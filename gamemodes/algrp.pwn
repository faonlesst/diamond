
                                                           /****************************************
                                                            **                                    **
                                                            **           GTA Roleplay             **
                                                            **        Une 2eme Chance RP          **
                                                            **                                    **
                                                            ****************************************/

//----------------------------------------|
//                                        |
//     Une 2eme Chance  1.0.7             |
//  Un Game Mode RP pour SA-MP 0.3        |
//                                        |
//----------------------------------------|

/*
Notes :
-> Serveur RP Nécessitant : SuperStream (S!m)
-> Systeme d'instructeurs remplacé par de simples commandes (/listepermis dans l'auto-école)
-> Systeme de Sabots (/mettresabot et /enleversabot)
-> Map Exclusive : Barrieres, Rond Point, Végétation...
-> Systeme de Braquage de Banque Exclusif (/braquer, /decoder, /mdpbanque, /secubanque)
-> Systeme de Faussaires (Création de Faux Permis, costumes, etc... : /creerpermis /creercostume)
-> Systeme d'apprentissage du RolePlay (/aiderp /powergame /metagame)
-> Possibilité de braquer plusieurs endroits (Mairie, Alhambrah, Teen Green Bottle, Clukin' Bell, Donut, Burger)
-> Systeme de création de FNO (Factions Non Officielles. /creerfno /fno)
-> Ajout de Takie Walkie
-> Création de 2 Factions (C.I.A, Corleone)
-> Systèmes de questions sur le RolePlay a la conexion.
-> Nouvelle Fourière
-> Système de test lors du passage de permis
-> Economie réaliste due à un PayDay limité.
-> Système d'Event Course très complet (/racemds)
-> Ecole de Langues
-> V.I.P Système (/mettrevip /vipchat)
-> Vous pouvez maintenant donner les clefs de votre voiture : faites /donner clef (jusqu'a 5)
-> Jobs ajoutés = Ouvrier, Eboueur
-> MAJ: Le tuning des voitures est maintenant sauvegardé.
-> Jobs ajoutés = Conducteur de Train, Pilote de Ligne
-> Ajout ANPE
-> /donner refait
-> GM revue, tous les éléments inutils ont été delete du script
-> Refonte de San News
-> Revision du systeme FNO
-> Revision du systeme de Jail (Un jail IC pour le RP et un jail Admin pour les actes NO RP)
-> Ajout d'une Eglise (faites /proposer si vous voulez savoir ou elle se trouve)
-> Systeme pour les journalistes débuggé (/news, /journaux)
-> /retirer débuggé
-> /hopital débuggé
-> Skin d'homme si vous êtes un homme a la fin du tuto, inversement pour les femmes
-> Radar, posez en en faisant /gcam ou /radar (Need level 1337 Admin)
-> Hopital : Le joueur paye 500 x son level jusqu'au level 10 ou il paiera 5000$. (Ex: Un level 5 paye 5 x 500 (deathcost) soit 2500$)
-> Les Admins sont maintenant prévus lorsqu'un nouvel arrivant arrive

ATTENTION !!! Anti-Cheat Argent supprimé en raison de bug !

Credits:
-> Raven's Roleplay (CuervO)
-> The Godfather (FeaR)
-> Los Santos RolePlay (Scorcher)
-> SA-MP
-> LordMan
-> Script Race (Yagu)

Pour l'aide :
-> http://forum.sa-mp.com/
-> http://www.gtaonline.fr/

Maintenance & Developpement :
-> FullDrive (Foo)


//<><><><><><><><><><><><><><><><><>///|
|   Ne Supprimez pas les Crédits!      |
//<><><><><><><><><><><><><><><><><>///|
//<><><><><><><><><><><><><><><><><>///|
|   Ne Supprimez pas les Crédits!      |
//<><><><><><><><><><><><><><><><><>///|
//<><><><><><><><><><><><><><><><><>///|
|   Ne Supprimez pas les Crédits!      |
//<><><><><><><><><><><><><><><><><>///|


*/



#define SCRIPT_VERSION "Une 2eme Chance 1.0.7"
#define Text_Minimap " ~n~ ~n~ ~n~ ~b~                             ~w~u2c-rp.forum-pro.fr"

//===========================Section: Includes==================================
#include <a_samp>
#include <radar> // Radar systeme
#include <core>
#include <float>
#include <time>
#include <file>
#include <dini>
#include <utils>
#include <morphinc>
#include <YSI/y_ini> // Nécéssaire pour les radars
#include "../include/gl_common.inc"
static gTeam[MAX_PLAYERS];
#pragma dynamic 16384

//#include <SimStream>
#include <SuperStream>

//===========================Section: Definations===============================

#define CreateObject CreateStreamObject
#define DestroyObject DestroyStreamObject
//#define MoveObject MoveStreamObject

// AFK
#define AFKTime 50  // Nombre de minutes pendant lesquelles le joueur peut être AFK
#define ShowTime 1 // Active/Desactive le temps pendant lequel on a été AFK dans le message du Kick.(0=Desactiver,1=Activer)
#define Public 1  // Active/Desactive le message de notification de kick qui va être envoyé a tous les joueurs.(0=Desactiver,1=Activer)

//------------------------------------------------------------------------------
#define COL_YELLOW                                                          	0xF2FB25FF
#define COLOR_LAWNGREEN                                                         0x7CFC00AA
#define COLOR_LIMEGREEN                                                         0x32CD32AA
#define COLOR_NICEBLUE                                                          0x25affeAA
#define COLOR_WT                                                                0x10ce96AA
#define BLANC 	                                                              	0xFFFFFFAA
#define JAUNE                                                                   0xFFFF00FF
#define GREEN                                                               	0x21DD00FF
#define VERT                                                                    0x33AA33AA
#define BLEUI                                                                   0x00E8E8FF
#define BLEUI                                                                   0x00E8E8FF
#define BLEUC                                                                   0x33CCFFAA
#define Cinza 																	0xAFAFAFAA
#define Verde 											    					0x33AA33AA
#define Vermelho																0xfAA3333AA
#define Lilas																	0x9999FFAA
#define Amarelo																	0xFFFF00AA
#define Branco             													    0xFFFFFFAA
#define Azul 																	0x0000BBAA
#define AzulClaro 																0x33CCFFAA
#define Laranja 																0xFF9900AA
#define VerdeClaro 																0x00FF00AA
#define COLOR_INVISIVEL                                                         0xFFFFFF00
#define COLOR_GREENYELLOW                                                       0xADFF2FAA
#define COLORT_SYSTEM 															0xEFEFF7AA
#define COLOR_GREEN_MC 															0xADFF2FAA
#define Verde2       												           	0x9ACD32AA
#define COLOR_COP 																0x3C26C7AA
#define Bisque																	0xFFE4C4AA
#define Coral																	0xFF7F50AA
#define Tomato																	0xFF6347AA
#define LaranjaVermelho 														0xFF4500AA
#define Gold														   			0xB8860BAA
#define RosaEscuro                                                              0xFF66FFAA
#define Limao																	0xDDDD2357
#define Violeta		 															0x9955DEEE
#define AmareloClaro	 														0xFFFFCCAA
#define Indigo	    														 	0x4B00B0AA
#define Navy																	0x000080AA
#define Crimson																 	0xDC143CAA
#define Ivory																 	0xFFFF82AA
#define Olive 																	0x808000AA
#define Flamingo                                                                0xC25A32FF
#define ADMINFS_MESSAGE_COLOR                                                   0xFF444499
#define PM_INCOMING_COLOR                                                       0xBBA033AA
#define PM_OUTGOING_COLOR                                                       0xE5C43EAA
#define MAX_STRING 255
#define CHECKPOINT_NONE 0
#define COLOR_ASKQ 0xFF0000FF
#define CHECKPOINT_HOME 12
#define COLOR_GRAD1 0xB4B5B7FF
#define COLOR_GRAD2 0xBFC0C2FF
#define COLOR_GRAD3 0xCBCCCEFF
#define COLOR_GRAD4 0xD8D8D8FF
#define COLOR_GRAD5 0xE3E3E3FF
#define COLOR_GRAD6 0xF0F0F0FF
#define COLOR_GREY 0xAFAFAFAA
#define COLOR_GREEN 0x9EC73DAA
#define COLOR_GROVE 0x00FF00FF
#define RED 0xAA3333AA
//#define COLOR_RED 0xAA3333AA
#define COLOR_RED 0xFF6347AA
#define COLOR_LIGHTRED 0xFF0000AA
#define COLOR_LIGHTBLUE 0x33CCFFAA
#define COLOR_LIGHTGREEN 0x9ACD32AA
#define COLOR_YELLOW 0xDABB3EAA
#define COLOR_YELLOW2 0xF5DEB3AA
#define COLOR_WHITE 0xFFFFFFAA
#define COLOR_FADE1 0xE6E6E6E6
#define COLOR_FADE2 0xC8C8C8C8
#define COLOR_FADE3 0xAAAAAAAA
#define COLOR_FADE4 0x8C8C8C8C
#define COLOR_FADE5 0x6E6E6E6E
#define COLOR_PURPLE 0xB462F6F6
#define COLOR_DBLUE 0x2641FEAA
#define COLOR_ALLDEPT 0xFF8282AA
#define COLOR_NEWS 0x458E1DAA
//#define COLOR_OOC 0xE0FFFFAA
#define COLOR_ORANGE 0xFF9900AA
#define COLOR_OOC 0xB8F600F6
#define TEAM_CYAN 1
#define TEAM_BLUE 2
#define TEAM_GREEN 3
#define TEAM_ORANGE 4
#define TEAM_COR 5
#define TEAM_BAR 6
#define TEAM_TAT 7
#define TEAM_CUN 8
#define TEAM_STR 9
#define TEAM_HIT 10
#define TEAM_ADMIN 11
#define OBJECTIVE_COLOR 0x64000064
#define TEAM_GREEN_COLOR 0x00A000F6
#define TEAM_JOB_COLOR 0xFFB6C1AA
#define TEAM_HIT_COLOR 0xFFFFFF00
#define TEAM_BLUE_COLOR 0x8D8DFF00
#define TEAM_RADIO_COLOR 0xF2D068FF
#define COLOR_ADD 0x63FF60AA
#define TEAM_GROVE_COLOR 0x00D900C8
#define TEAM_VAGOS_COLOR 0xFFC801C8
#define TEAM_BALLAS_COLOR 0xD900D3C8
#define TEAM_AZTECAS_COLOR 0x01FCFFC8
#define TEAM_CYAN_COLOR 0xFF8282AA
#define TEAM_ORANGE_COLOR 0xFF830000
#define TEAM_COR_COLOR 0x39393900
#define TEAM_BAR_COLOR 0x00D90000
#define TEAM_TAT_COLOR 0xBDCB9200
#define TEAM_CUN_COLOR 0xD900D300
#define TEAM_STR_COLOR 0x01FCFF00
#define TEAM_ADMIN_COLOR 0x00808000
#define COLOR_INVIS 0xAFAFAF00
#define COLOR_SPEC 0xBFC0C200
#define COLOR_BLUE 0x2641FEAA
#define COLOR_DARKNICERED 0x9D000096
#define COLOR_LIGHT_BLUE 0x9FB1EEAA
#define	Orange 	0xF47A00FF
#define Vert 	0x00D500FF
#define Bleu	0x0000BFFF
#define Gris 	0xC0C0C0FF
#define Rouge 	0xD90000FF
#define COLOR_ORANGERED 0xFF4500AA
#define COLOR_PINK 0xFFC0CBAA
#define COLOR_SPRINGGREEN 0x00FF7FAA
#define COLOR_TOMATO 0xFF6347AA
#define COLOR_YELLOWGREEN 0x9ACD32AA
#define COLOR_MEDIUMAQUA 0x83BFBFAA
#define COLOR_MEDIUMMAGENTA 0x8B008BAA
#define COLOR_BRIGHTRED 0xDC143CAA
#define COLOR_SYSTEM 0xEFEFF7AA

#pragma tabsize 0
#define NULL 0
#define dcmd(%1,%2,%3) if ((strcmp((%3)[1], #%1, true, (%2)) == 0) && ((((%3)[(%2) + 1] == 0) && (dcmd_%1(playerid, "")))||(((%3)[(%2) + 1] == 32) && (dcmd_%1(playerid, (%3)[(%2) + 2]))))) return 1
//#define LOGDIA 1
#define GPSD 0
#define menuaide 1

#define RETIRERMENU 4
#define DEPOSERMENU 5

#define TempsChangementMeteo 60 // Temps pour le changement de la météo (en minute) Default = 15.

#pragma semicolon 0
#define MAX_TRUNK_SLOTS		(5) // Is actually 4.
#define MAX_VEHICLE_MODELS	(70)
#define MAX_PLYVEH_RATIO	(20) // per player.
#define MAX_VEHICLE_PLATE	(7)

#define CODEMENU 10 // By DiXoN
#define CODEMENU1 11 // By DiXoN
#define CODEMENU2 12 // By DiXoN
#define CODEMENU3 13 // By DiXoN

#define SetPlayerHoldingObject(%1,%2,%3,%4,%5,%6,%7,%8,%9) SetPlayerAttachedObject(%1,MAX_PLAYER_ATTACHED_OBJECTS-1,%2,%3,%4,%5,%6,%7,%8,%9)
#define StopPlayerHoldingObject(%1) RemovePlayerAttachedObject(%1,MAX_PLAYER_ATTACHED_OBJECTS-1)
#define IsPlayerHoldingObject(%1) IsPlayerAttachedObjectSlotUsed(%1,MAX_PLAYER_ATTACHED_OBJECTS-1)
#define SLOT 1

#define DIALOGID 9999 // Voitures

#define MAX_FAMILY 20 // Familles FNO


//===================================================================================================
//                        Gveh par Mr.Fredo revue par Brian Turner/Price
//===================================================================================================

// Couleurs
#define COL_WHITE  	 	0xFFFFFFFF
#define COL_LIGHTRED   	0xFF2F35FF
#define COL_GREEN 	 	0x429D3DFF
#define COL_YELLOW     	0xF2FB25FF
#define COL_RED        	0xBD0000FF
#define COL_PURPLE      0xC2A2DAAA

#define INVALID_VEH_ID      0

#define VEHMENU 1337

// Options
//#define USE_MENU // Decomenter pour utiliser la gestion par menu
//#define USE_CALLCAR //Decomenter pour avoir la posibiliter d'appeler un de nos vehicule
//#define FILTERSCRIPT //Decomenter pour utiliser le script comme un FilterScripts


// Parametres
#define MAX_PLAYER_VEHICLES 1  //Nombre de vehicules par joueur
#define PRIX_ESSENCE 		5  //Prix du litre d'essence
#define SECONDE_LITRE       65 // Nombre de seconde pour retirer 1 litre d'essence au vehicule
#define RESPAWN_DELAY       7200000 // Temps de respawn en seconde (-1 = Pas de respawn, 7200000 = Respawn toutes les 2 heures)
#define TIMESAVE       		1800000 // Temps en MS du timer de sauvegarde des vehicule (1800000 = Sauvegarde toute les 30 minutes)
//#define DOSSIERLOGS 		"Gveh/Logs/" // Dans une futur version
#define VEH_FILENAME        "vehinfo.cfg"

forward SauvegardeVeh();
forward Remplisage(playerid);
forward Vitesses();
forward DestroyVeh(vehicleid);
forward RestartVeh(vehicleid);
forward CallCar(playerid,vehicleid);
forward CreateVeh(vehicleid,Float:x,Float:y,Float:z,Float:a);
forward ChargerVehicules();
forward TimerTempsCircuit(playerid);
forward TimerTempsAlarm(playerid);
forward StopAlarm(car);
forward PirateAlarm(playerid);
forward PirateVehicle(playerid);
forward ClignotePhare(car);
forward ProxDetectorVeh(Float:radi, playerid, string[],col1,col2,col3,col4,col5); // C'est le proxdetector du GF mais rename pour eviter des conflits

// Creation des variables
new BigEarr[MAX_PLAYERS];
new NbVeh = 1;
new TimerCourCircuit[MAX_PLAYERS] = 0;
new TimerAlarmCircuit[MAX_PLAYERS] = 0;
new ClignotePhareVar[MAX_VEHICLES] = 0;
new LalarmeEstOn[MAX_VEHICLES] = 0;
new TimerPhare[MAX_VEHICLES];

static Field[32][64];
static TimerSave;
static TimerVitesse;

// Position de pompe a essence
static Float:Pompe[22][3] = {
{2109.2126,917.5845,10.8203},
{2640.1831,1103.9224,10.8203},
{611.8934,1694.7921,6.7193},
{-1327.5398,2682.9771,49.7896},
{-2413.7427,975.9317,45.0031},
{-1672.3597,414.2950,6.8866},
{-2244.1365,-2560.6294,31.6276},
{-1603.0166,-2709.3589,48.2419},
{1939.3275,-1767.6813,13.2787},
{-94.7651,-1174.8079,1.9979},
{1381.6699,462.6467,19.8540},
{657.8167,-559.6507,16.0630},
{-1478.2916,1862.8318,32.3617},
{2147.3054,2744.9377,10.5263},
{2204.9602,2480.3494,10.5278},
{1590.9493,2202.2637,10.5247},
{1561.5695,1448.6895,10.3636},
{366.4071,2535.3784,16.8363},
{1969.3317,-2303.8423,13.2547},
{1587.3940,-2182.4717,13.5547},
{-2029.4491,156.7627,28.8359},
{-1818.9652,-1618.8468,23.0156}
};

static PickupPompe[sizeof(Pompe)];

enum VehInfo
{
	VehID,
	Model,
	Float:XSpawn,
	Float:YSpawn,
	Float:ZSpawn,
	Float:ASpawn,
	Couleur1,
	Couleur2,
	Prix,
	Status,
	Alarme,
	Tuning1,
	Tuning2,
	Tuning3,
	Tuning4,
	Tuning5,
	Tuning6,
	Tuning7,
	Tuning8,
	Tuning9,
	Tuning10,
	Tuning11,
	Tuning12,
	Tuning13,
	Tuning14,
	Tuning15,
	Tuning16,
	Tuning17,
	Peinture,
	MaxEssence,
	Proprio[MAX_PLAYER_NAME],
	Nom[64],
	Essence,
	Plaque[64],
	PiraAlarm,
	Moteur,
	Phares,
}
new VehiculeInfo[MAX_VEHICLES][VehInfo];

static EssenceCount[MAX_VEHICLES];

new VehicleName[212][64] = {
   "Landstalker","Bravura","Buffalo","Linerunner","Pereniel","Sentinel","Dumper","Firetruck","Trashmaster","Stretch","Manana",
   "Infernus","Voodoo","Pony","Mule","Cheetah","Ambulance","Leviathan","Moonbeam","Esperanto","Taxi","Washington","Bobcat",
   "Mr Whoopee","BF Injection","Hunter","Premier","Enforcer","Securicar","Banshee","Predator","Bus","Rhino","Barracks","Hotknife",
   "Trailer","Previon","Coach","Cabbie","Stallion","Rumpo","RCBandit","Romero","Packer","Monster Truck","Admiral","Squalo",
   "Seasparrow","Pizzaboy","Tram","Trailer","Turismo","Speeder","Reefer","Tropic","Flatbed","Yankee","Caddy","Solair","Berkley's RC Van",
   "Skimmer","PCJ600","Faggio","Freeway","RCBaron","RCRaider","Glendale","Oceanic","Sanchez","Sparrow","Patriot","Quad","Coastguard",
   "Dinghy","Hermes","Sabre","Rustler","ZR350","Walton","Regina","Comet","BMX","Burrito","Camper","Marquis","Baggage","Dozer","Maverick",
   "News Chopper","Rancher","(FBI)Rancher","Virgo","Greenwood","Jetmax","Hotring","Sandking","Blista Compact","(Police)Maverick","Boxville",
   "Benson","Mesa","RCGoblin","Hotring Racer 1","Hotring Racer 2","Bloodring Banger","Rancher","Super GT","Elegant","Journey","Bike","Mountain Bike",
   "Beagle","Cropdust","Stunt","Tanker","RoadTrain","Nebula","Majestic","Buccaneer","Shamal","Hydra","FCR900","NRG500","HPV1000",
   "Cement Truck","Tow Truck","Fortune","Cadrona","(FBI)Truck","Willard","Forklift","Tractor","Combine","Feltzer","Remington","Slamvan","Blade",
   "Freight","Streak","Vortex","Vincent","Bullet","Clover","Sadler","Firetruck","Hustler","Intruder","Primo","Cargobob","Tampa","Sunrise",
   "Merit","Utility","Nevada","Yosemite","Windsor","Monster Truck","Monster Truck","Uranus","Jester","Sultan","Stratum","Elegy","Raindance",
   "RC Tiger","Flash","Tahoma","Savanna","Bandito","Freight","Trailer","Kart","Mower","Duneride","Sweeper","Broadway","Tornado","AT-400",
   "DFT-30","Huntley","Stafford","BF-400","Newsvan","Tug","Trailer","Emperor","Wayfarer","Euros","Hotdog","Club","Trailer","Trailer","Andromada",
   "Dodo","RC Cam","Launch","(LSPD)Police Car","(SFPD)Police Car","(LVPD)Police Car","Police Ranger","Picador","SWAT Van","Alpha",
   "Phoenix","Glendale","Sadler","Luggage Trailer","Luggage Trailer","Stair Trailer","Boxville","Farm Plow","Utility Trailer"
};

#if defined USE_MENU
	static Menu:MenuJoueur;
	static Menu:MenuAdmin;
	static DefinirPrix[MAX_PLAYERS];
	static DefinirEssence[MAX_PLAYERS];
#endif

static PompeEssence[MAX_PLAYERS];
static TimerEssence[MAX_PLAYERS];
static TableauActive[MAX_PLAYERS];
static EnPanne[MAX_PLAYERS];
static Float:PlayerPos[MAX_PLAYERS][3];
static EchangeVeh[MAX_PLAYERS][3];

#if defined USE_CALLCAR
	static MyVehicleID[MAX_PLAYERS][MAX_PLAYER_VEHICLES];
#endif


//===================================================================================================
//                                         	   Settings  :     Radar Systeme par Gamer931215 (Forum Samp)
//===================================================================================================
//                   SETTING:                           VALUE:              	Discription:

#define				 CAMERA_LIMIT				 		100                     //Max loaded cameras (keep this as low as possible for the best performance)
#define				 CAMERA_UPDATE_INTERVAL		 		750                     //update interval of all speedcams (in miliseconds)
#define				 CAMERA_FLASH_TIME			 		600                    //ammount of miliseconds until the "flash" effect gets removed again
#define				 CAMERA_DIALOG_RANGE          		2666                    //dialog ID range (Example: 0 will take dialogid's 0 - 9)
#define              CAMERA_USEMPH                      0                       //toggles camera using mph by default (0=kmh, 1=mph)
#define              CAMERA_LABEL_COLOR                 0xFF000FFF              //The default color of the camera's label
#define              CAMERA_PERSPECTIVE                 false                    //Sets playercamera temporary at the camera's position while flashing

//streamer options (will be used if STREAMER_ENABLED is set on true)
#define              STREAMER_ENABLED					true                   //uses a streamer (true/false)
#define              STREAMER_ADD                   	CreateObject     //put here at the value the command your streamer uses to make an object (CreateDynamicObject by default)
#define              STREAMER_REMOVE                    DestroyObject    //put here at the value the command your streamer uses to remove an object (STREAMER_REMOVE by default)
#if STREAMER_ENABLED == true                                                    //ignore this line
    #include             								SuperStream				//put your include name here
#endif                                                                          //ignore this line
//===================================================================================================
//                                         	  Variables
//===================================================================================================
#define DIALOG_MAIN CAMERA_DIALOG_RANGE
#define DIALOG_RANGE CAMERA_DIALOG_RANGE +1
#define DIALOG_LIMIT CAMERA_DIALOG_RANGE +2
#define DIALOG_FINE CAMERA_DIALOG_RANGE +3
#define DIALOG_EDIT CAMERA_DIALOG_RANGE +4
#define DIALOG_EANGLE CAMERA_DIALOG_RANGE +5
#define DIALOG_ELIMIT CAMERA_DIALOG_RANGE +6
#define DIALOG_ERANGE CAMERA_DIALOG_RANGE +7
#define DIALOG_EFINE CAMERA_DIALOG_RANGE +8
#define DIALOG_ETYPE CAMERA_DIALOG_RANGE +9
#define DIALOG_LABEL CAMERA_DIALOG_RANGE +10

enum _camera
{Float:_x,Float:_y,Float:_z,Float:_rot,_range,_limit,_fine,_usemph,_objectid,bool:_active,bool:_activelabel,_labeltxt[128],Text3D:_label}
new SpeedCameras[CAMERA_LIMIT][_camera],loaded_cameras = 0,Text:flash;
//stocks for attaching labels to camera (must be defined before use, thats why this one is at the top)
stock Text3D:AttachLabelToCamera(cameraid,text[])
{
	new position,buffer[128];format(buffer,sizeof buffer,"%s",text);
	for(new i = 0;strfind(buffer,"\\n",true) != -1;i++)
	{
	    position = strfind(buffer,"\\n",true);
	    strdel(buffer,position,position +2);
	    strins(buffer,"\r\n",position,sizeof(buffer));
	}
	return Create3DTextLabel(buffer,CAMERA_LABEL_COLOR,SpeedCameras[cameraid][_x],SpeedCameras[cameraid][_y],SpeedCameras[cameraid][_z] +7,100,0,0);
}
stock UpdateCameraLabel(Text3D:labelid,text[])
{
	new position,buffer[128];format(buffer,sizeof buffer,"%s",text);
	for(new i = 0;strfind(buffer,"\\n",true) != -1;i++)
	{
	    position = strfind(buffer,"\\n",true);
	    strdel(buffer,position,position +2);
	    strins(buffer,"\r\n",position,sizeof(buffer));
	}
	return	Update3DTextLabelText(labelid,CAMERA_LABEL_COLOR,buffer);
}


//===========================Section: Forwards==================================
forward RefreshMenuHeader(playerid,Menu:menu,text[]);
new Menu:burgermenu, Menu:chickenmenu, Menu:pizzamenu, Menu:donutshop;
new Menu:Guide;
new Menu:LegalJobs, Menu:LegalJobs2;
new Menu:IlegalJobs;

//====================|HEURE DATES|========================

new Text:TextdrawHour;
new Text:TextdrawMinute;
new Text:TextdrawSeconds;
new Text:TextdrawDay;
new Text:TextdrawMonth;

forward RemiX_Time_Tools();
//-----------------------------------------------------------------------

// Trunk system
new vehTrunkCounter[MAX_VEHICLES] = 1;
new vehTrunk[MAX_VEHICLES][MAX_TRUNK_SLOTS];
new vehTrunkAmmo[MAX_VEHICLES][MAX_TRUNK_SLOTS];
new Float:vehTrunkArmour[MAX_VEHICLES];
forward SaveTrunk();
forward LoadTrunk();
forward IsAGangCar(carid);
forward IsAGangCar2(carid);
forward IsAGangCar3(carid);
forward IsAGangCar4(carid);
forward IsAGangCar5(carid);
forward IsAGangCar6(carid);
forward IsAGangCar7(carid); //Corleone
forward IsACIACar(carid); //CIA
forward IsALATimeCar(carid); // San News Van
forward CheckForWalkingTeleport(playerid);
forward NameTimer1()
/*forward MySQLConnect(sqlhost[], sqluser[], sqlpass[], sqldb[]);
forward MySQLDisconnect();
forward MySQLCheckConnection();
forward MySQLUpdateBuild(query[], sqlplayerid);
forward MySQLUpdateFinish(query[], sqlplayerid);
forward MySQLUpdatePlayerInt(query[], sqlplayerid, sqlvalname[], sqlupdateint);
forward MySQLUpdatePlayerIntSingle(sqlplayerid, sqlvalname[], sqlupdateint);
forward MySQLUpdatePlayerFlo(query[], sqlplayerid, sqlvalname[], Float:sqlupdateflo);
forward MySQLUpdatePlayerStr(query[], sqlplayerid, sqlvalname[], sqlupdatestr[]);
forward MySQLCheckAccount(sqlplayersname[]);
forward MySQLCheckAccountLocked(sqlplayerid);
forward MySQLCheckIPBanned(ip[]);
forward MySQLFetchAcctSingle(sqlplayerid, sqlvalname[], sqlresult[]);
forward MySQLFetchAcctRecord(sqlplayerid, sqlresult[]);
forward MySQLCreateAccount(newplayersname[], newpassword[]);
forward MySQLAddLoginRecord(sqlplayerid, ipaddr[]);*/
forward ResetRoadblockTimer();
forward Nouvellevoitureachetee(playerid, idcar, sendername);
forward Float:GetPlayerSpeed(playerid); // By Jeffrey
forward PointPermis(playerid);
forward DonnerArgentBraquage(playerid);
forward Braquage();
forward RobTimer(playerid);
forward RemoveRoadblock(playerid);
forward BackupClear(playerid, calledbytimer);
forward GateClose(playerid);
forward GrillePolice();
//forward GateClose2();
forward GateClose3();
forward GateClose4();
forward GateClose5();
forward GateClose6();
forward GrilleRusse();
forward GrilleCN();
forward GrilleFouriere(playerid);
forward GrilleGarage(playerid);
//forward GrilleMaison();
//forward GateClose7(playerid);
forward elevator1(playerid);
forward elevator2(playerid);
forward LoadProperty();
forward LoadBizz();
forward LoadSBizz();
forward LoadStuff();
forward SaveStuff();
forward LoadCK();
forward SaveCK();
forward LoadFamilies();
forward SaveFamilies();
forward LoadTurfs();
forward SaveTurfs();
forward LoadIRC();
forward SaveIRC();
forward LoadPapers();
forward SavePapers();
forward LoadCar();
forward SaveCarCoords();
forward LoadBoxer();
forward SaveBoxer();
forward OnPropUpdate();
forward ExtortionBiz(bizid, money);
forward ExtortionSBiz(bizid, money);
forward JoinChannel(playerid, number, line[]);
forward JoinChannelNr(playerid, number);
forward SearchingHit(playerid);
forward DollahScoreUpdate();
forward SetPlayerSpawn(playerid);
forward SetupPlayerForClassSelection(playerid);
forward SetPlayerTeamFromClass(playerid,classid);
forward PlayerToPoint(Float:radi, playerid, Float:x, Float:y, Float:z);
forward PlayerToPointStripped(Float:radi, playerid, Float:x, Float:y, Float:z, Float:curx, Float:cury, Float:curz);
forward CrimInRange(Float:radi, playerid,copid);
forward SendEnemyMessage(color, string[]);
forward SendTeamBeepMessage(team, color, string[]);
forward ABroadCast(color,const string[],level);
forward DateProp(playerid);
forward GetClosestPlayer(p1);
forward IsPlayerInTurf(playerid, turfid);
forward LoadMission(playerid,name[]);
forward SaveMission(playerid,name[]);
forward PrintBizInfo(playerid,targetid);
forward PrintSBizInfo(playerid,targetid);
forward SetPlayerUnjail();
forward OtherTimer();
forward SpeedoVoiture();
forward RingTonerRev();
forward RingToner();
forward scoreupdate(playerid)
forward HireCost(carid);
forward BanLog(string[]);
forward KickLog(string[]);
forward PayLog(string[]);
forward CKLog(string[]);

// ISA
//gang actuelle
forward IsAGrooveStreetCar(carid); //Groove Street
forward IsADeadAngelsCar(carid);
//forward IsAYakuzaCar(carid);
forward IsAVagosCar1(carid);
// encien gang
forward IsARiderZCar2(carid);
forward IsANostraCar3(carid);
forward IsARuskovfCar4(carid);
forward IsAClodoCar5(carid);
forward IsAFCar(carid);
forward IsABike(carid);
//forward IsABombeCar(carid);
forward IsAOBike(carid);
forward IsATank(carid);
forward IsACripzCar(carid);
//forward IsAnInstruCar(carid);
forward IsABloodsCar(carid);
forward IsPoidLourd(carid);
forward IsAtClothShop(playerid);
forward IsAtGasStation(playerid);
forward IsAtFishPlace(playerid);
forward IsAtCookPlace(playerid);
forward IsAtBar(playerid);
forward IsAtSexShop(playerid);
forward IsATruck(carid);
forward IsAPizzabike(carid);
forward IsABus(carid);
forward IsATowcar(carid);
forward IsAnAmbulance(carid);
forward IsAnFiretruck(carid);
forward IsACopCar(carid);
forward IsAnFbiCar(carid);
forward IsAnArmyCar(carid);
forward IsAGovernmentCar(carid);
forward IsAHspdCar(carid);
forward IsATaxiCar(carid);
forward IsAnOwnableCar(vehicleid);
forward IsAtDealership(playerid);
forward IsAtCarrental(playerid);
forward IsAPlane(carid);
forward IsABoat(carid);
forward IsAHarvest(carid);
forward IsAJobPlane(carid);
forward IsATrain(carid);
forward IsADrugHarvest(carid);
forward IsARentBike(carid);
forward IsARentCar(carid);
forward IsASmuggleCar(carid);
forward IsASweeper(carid);
forward IsAGarbageTruck(carid);
forward IsADozer(carid);
forward IsACop(playerid);
forward IsAPDMember(playerid);
forward IsAMember(playerid);
forward IsAnInstructor(playerid);
// ISA
// autre
forward Spectator();
forward ConvertTicks(ticks);
forward Encrypt(string[]);
forward KartingEnded();
forward StartKarting();
forward PrepareKarting();
forward PaintballEnded();
forward StartPaintball();
forward PreparePaintball();
forward Float:GetDistanceBetweenPlayers(p1,p2);
forward GameModeExitFunc();
forward SetAllPlayerCheckpoint(Float:allx, Float:ally, Float:allz, Float:radi, num);
forward SetAllCopCheckpoint(Float:allx, Float:ally, Float:allz, Float:radi);
forward SetPlayerCriminal(playerid,declare,reason[]);
forward SetPlayerCriminalEx(playerid,declare,reason[]);
forward SetPlayerFree(playerid,declare,reason[]);
forward SetPlayerWeapons(playerid);
forward ShowStats(playerid,targetid);
forward SetPlayerToTeamColor(playerid);
forward GameModeInitExitFunc();
forward split(const strsrc[], strdest[][], delimiter);
forward OnPlayerLogin(playerid,password[]);
forward OnPlayerUpdate(playerid);
forward OnPlayerRegister(playerid, password[]);
forward BroadCast(color,const string[]);
forward OOCOff(color,const string[]);
forward OOCNews(color,const string[]);
forward SendJobMessage(job, color, string[]);
forward SendFamilyMessage(family, color, string[]);
forward SendNewFamilyMessage(family, color, string[]);
forward SendIRCMessage(channel, color, string[]);
forward SendTeamMessage(team, color, string[]);
forward SendRadioMessage(member, color, string[]);
forward SendAdminMessage(color, string[]);
forward SendNewbieMessage(color, string[]);
forward SendVIPMessage(color, string[]);//
forward AddCar(carcoords);
forward ProxDetector(Float:radi, playerid, string[],col1,col2,col3,col4,col5);
forward ProxDetectorS(Float:radi, playerid, targetid);
forward ClearCK(ck);
forward ClearFamily(family);
forward ClearMarriage(playerid);
forward ClearPaper(paper);
forward ClearCrime(playerid);
forward FishCost(playerid, fish);
forward ClearFishes(playerid);
forward ClearFishID(playerid, fish);
forward ClearCooking(playerid);
forward ClearCookingID(playerid, cook);
forward ClearGroceries(playerid);
forward Lotto(number);
forward CarCheck();
forward CarInit();
forward CarTow(carid);
forward CarRespawn(carid);
forward LockCar(carid);
forward UnLockCar(carid);
//forward InitLockDoors(playerid);
forward CheckGas();
forward Fillup();
forward StoppedVehicle();
//forward SyncTime();
forward SyncUp();
forward SaveAccounts();
forward IsPlayerInZone(playerid, zoneid);
forward Production();
forward Checkprop();
forward PayDay();
forward ini_GetKey( line[] );
forward ini_GetValue( line[] );
forward PlayerPlayMusic(playerid);
forward StopMusic();
forward PlayerFixRadio(playerid);
forward PlayerFixRadio2();
forward HouseLevel(playerid);
forward CHouseLevel(houseid);
forward CustomPickups();
forward IdleKick();
forward SetCamBack(playerid);
forward AddsOn();
forward IsPlayerInArea(playerid, Float:minx, Float:maxx, Float:miny, Float:maxy);
forward AdvertiseToPlayersAtBusStop(Float:stopX, Float:stopY, Float:stopZ, eastorwest);
forward SendBusRoute(playerid, eastorwest);
forward IsInBusrouteZone(playerid);
forward BusrouteEnd(playerid, vehicleid);
forward CreateFoodMenus();
forward OnPlayerEnterFood(playerid, foodid);
forward OnPlayerExitFood(playerid);
forward ClearChatbox(playerid, lines);
forward CreateGuideMenus();
forward CreateLegalJobsMenus();
forward CreateIlegalJobsMenus();
forward Startup(playerid, vehicleid);
forward engine2(playerid);
forward trashplace(playerid);
forward busroutestoptimer(playerid);
forward CheckCarHealth();
forward StartingTheVehicle(playerid);
forward StartingTheVehicleVoler(playerid);
forward FarmerExit(playerid);
forward DrugFarmerExit(playerid);
forward LoadDrugSystem();
forward SaveDrugSystem();
forward LoadMatsSystem();
forward SaveMatsSystem();
forward LoadingDrugsForSmugglers(playerid);
forward SmugglerExit(playerid);
forward JobPlaneExit(playerid);
forward TrainPlaneExit(playerid);
forward SafeGivePlayerMoney(plyid, amounttogive);
forward SafeGivePlayerWeapon(plyid, weaponid, ammo);
forward SafeResetPlayerMoney(plyid);
forward SafeResetPlayerWeapons(plyid);
forward UpdateWeaponSlots(plyid);
forward GlobalHackCheck();
forward BanAdd(bantype, sqlplayerid, ip[], hackamount);
forward UnsetFirstSpawn(playerid);
forward LoadHQLocks();
forward SaveHQLocks();
forward LoadCoffreHQ();
forward SaveCoffreHQ();
forward ClearKnock(playerid);
forward DrugEffectGone(playerid);
forward UsingDrugsUnset(playerid);
//forward UpdatePlayerPosition(playerid);
forward CrashPlayer(playerid);
forward UnsetAfterTutorial(playerid);
forward AfterSpray1(playerid);
forward AfterSpray2(playerid);
forward AfterSpray3(playerid);
forward AfterSpray4(playerid);
forward UnsetCrash(playerid);
forward backtoclothes(playerid);
forward RemovePlayerWeapon(playerid, weaponid);
forward UpdateBurgerPositions();
forward ShowMenuBurger(i);
forward UpdateChickenPositions();
forward ShowMenuChicken(i);
forward CanDriveThruAgain(playerid);
forward Float:GetDistance(playerid, Float:x, Float:y);
forward TraceLastCall();
forward ReportReset(playerid);
forward ReduceTimer(playerid);
forward EnvoiAnnonce();
forward OuvertureGrille(playerid);
forward ExplodeShamal(vehicleid);
forward Decodage(playerid);
//forward VehicleSpeed(playerid);
//forward Speeding(playerid);
forward StopCameraEffect(playerid);
forward BOtimer();
forward DesactiverSpeedo(playerid);
//forward BombeCar(playerid);
forward ObjectRot(Float:x,Float:y,Float:z,objectid);
forward Bombardement(playerid,objectid,Float:x,Float:y,Float:z);
forward Cible(playerid,cibleid,objectid);
forward PlayerToObject(playerid,objectid,Float:radius);
forward FinMissile(playerid,objectid);
forward ConvertirTexte(Texte[]);
forward JoueurPasRein(playerid);
forward CreateLicensesMenus();
forward DropPlayerWeapons(playerid);
forward DeletePickup(pickupid);
forward GetWeaponModel(weaponid);
forward MeteoAleatoire();
forward SendWTMessage(channel, color, string[]);
forward AFKKicker();
forward Semasturber(playerid);
forward chargement(playerid); // By Dixon
forward KillCar(vehicleid);
forward GreenMoney(playerid);
forward RedMoney(playerid);

forward CanRobAgain();
forward UnsetPlayerRob(playerid);
forward UnsetCityHallRob();
forward RobCityHall(playerid);
forward UnsetBarRob();
forward UnsetAlhambraRob();
forward UnsetCluckin1Rob();
forward UnsetCluckin2Rob();
forward UnsetBurger1Rob();
forward UnsetBurger2Rob();
forward UnsetPizzaRob();
forward UnsetDonutRob();
forward UnsetGymRob();
forward UnsetPlayerRob(playerid);
forward RobCityHall(playerid);
forward RobBank(playerid);
forward RobAlhambra(playerid);
forward RobCluckin(playerid);
forward RobBurger(playerid);
forward RobPizza(playerid);
forward RobBar(playerid);
forward RobGym(playerid);
forward RobDonut(playerid);

forward IO1(playerid);
forward IO2(playerid);
forward IO3(playerid);
forward IO4(playerid);
forward IO5(playerid);
forward IO6(playerid);
forward IO7(playerid);
forward DKT1(playerid);
forward DKT2(playerid);
forward DKT3(playerid);
forward DKT4(playerid);
forward DKT5(playerid);
forward DKT6(playerid);

forward IsAtCandySprunk(playerid);
forward SetHP(playerid);

forward LoadVehicles(playerid, string[]);
forward SaveVehicles(playerid, car);
forward PlayAlarmSound(vehicleid, Float:radi, time);
forward BuyingVeh(playerid);


//forward PingKick();
//------------------------------------------------------------------------------------------------------
//new CarAutolock[999];
//new cartrack[256];
//new street_zone;
/*new CarName[][] =
{
    "Landstalker", "Bravura", "Buffalo", "Linerunner", "Perrenial", "Sentinel",
        "Dumper", "Firetruck", "Trashmaster", "Stretch", "Manana", "Infernus",
        "Voodoo", "Pony", "Mule", "Cheetah", "Ambulance", "Leviathan", "Moonbeam",
    "Esperanto", "Taxi", "Washington", "Bobcat", "Whoopee", "BF Injection",
        "Hunter", "Premier", "Enforcer", "Securicar", "Banshee", "Predator", "Bus",
        "Rhino", "Barracks", "Hotknife", "Trailer", "Previon", "Coach", "Cabbie",
        "Stallion", "Rumpo", "RC Bandit", "Romero", "Packer", "Monster", "Admiral",
        "Squalo", "Seasparrow", "Pizzaboy", "Tram", "Trailer", "Turismo", "Speeder",
        "Reefer", "Tropic", "Flatbed", "Yankee", "Caddy", "Solair", "Berkley's RC Van",
        "Skimmer", "PCJ-600", "Faggio", "Freeway", "RC Baron", "RC Raider", "Glendale",
        "Oceanic","Sanchez", "Sparrow", "Patriot", "Quad", "Coastguard", "Dinghy",
        "Hermes", "Sabre", "Rustler", "ZR-350", "Walton", "Regina", "Comet", "BMX",
        "Burrito", "Camper", "Marquis", "Baggage", "Dozer", "Maverick", "News Chopper",
        "Rancher", "FBI Rancher", "Virgo", "Greenwood", "Jetmax", "Hotring", "Sandking",
        "Blista Compact", "Police Maverick", "Boxvillde", "Benson", "Mesa", "RC Goblin",
        "Hotring Racer A", "Hotring Racer B", "Bloodring Banger", "Rancher", "Super GT",
        "Elegant", "Journey", "Bike", "Mountain Bike", "Beagle", "Cropduster", "Stunt",
        "Tanker", "Roadtrain", "Nebula", "Majestic", "Buccaneer", "Shamal", "Hydra",
        "FCR-900", "NRG-500", "HPV1000", "Cement Truck", "Tow Truck", "Fortune",
        "Cadrona", "FBI Truck", "Willard", "Forklift", "Tractor", "Combine", "Feltzer",
        "Remington", "Slamvan", "Blade", "Freight", "Streak", "Vortex", "Vincent",
    "Bullet", "Clover", "Sadler", "Firetruck", "Hustler", "Intruder", "Primo",
        "Cargobob", "Tampa", "Sunrise", "Merit", "Utility", "Nevada", "Yosemite",
        "Windsor", "Monster", "Monster", "Uranus", "Jester", "Sultan", "Stratium",
        "Elegy", "Raindance", "RC Tiger", "Flash", "Tahoma", "Savanna", "Bandito",
    "Freight Flat", "Streak Carriage", "Kart", "Mower", "Dune", "Sweeper",
        "Broadway", "Tornado", "AT-400", "DFT-30", "Huntley", "Stafford", "BF-400",
        "News Van", "Tug", "Trailer", "Emperor", "Wayfarer", "Euros", "Hotdog", "Club",
        "Freight Box", "Trailer", "Andromada", "Dodo", "RC Cam", "Launch", "Police Car",
        "Police Car", "Police Car", "Police Ranger", "Picador", "S.W.A.T", "Alpha",
        "Phoenix", "Glendale", "Sadler", "Luggage", "Luggage", "Stairs", "Boxville",
        "Tiller", "Utility Trailer"
};*/
//new DodoSpawn;

new Ann;
#define NombreAnnonces 8
new Annonces[NombreAnnonces][128] =
{
	{"Vous êtes nouveau et vous avez besoin d'aide ? Pas de problème, utilisez /question"},
	{"Vous avez vu un NO RP ou un cheater ? Utilisez /report"},
	{"Allez sur notre forum en cas de besoin : http://u2c-rp.forum-pro.fr"},
	{"Cheat, Insultes OOC, Non respect des règles = Sanctions"},
	{"Pour comprendre le RolePlay, utilisez les commandes /metagame /powergame et /roleplay"},
	{"Rappel: Roulez de façon RolePlay (Roulez à droite et ralentissez aux intersections)"},
	{"Si après un certain temps, vous ne montrez pas de signe d'activité (AFK), vous serez kické. "},
	{"Sécurité : Changez régulierement de mot de passe (Rappel: /changerpass)"}
};


enum Info_Meteo{
	IDMeteo,
	DescriptionMeteo[128]
};

new DescriptionIdMeteo[][Info_Meteo] =
{
	/* Indiquez ici l'id de la météo et sa description. */
	{10,"Il fait actuellement très beau a Los Santos !"},
	{16,"Le mauvais temps arrive. Forte prévision de pluie !"},
	{9,"Le brouillard se lève. Roulez prudemment !"},
	{19,"Attention! Vent violent !"},
    {8,"Risque d'orage important. Roulez moins vite sur les routes de Los Santos !"},
	{10,"Quel beau temps a Los Santos ! Profitez en !"},
	{13,"Il y a un peu de brouillard a Los Santos."},
	{19,"Vent violent a Los Santos ! Circulation aérienne pérturbée."},
	{10,"Le beau temps gagne notre ville."},
	{5,"Le ciel est dégagé a Los Santos."}
};


new GangCar[MAX_PLAYERS];
new tactical[MAX_PLAYERS];
new authorizetactical;
//new Cripz;
//new Surenos;
//new blanc;
//new black_yakuza;
//new corleonne;
//new bloods;
//new jefferson_saints;
new PC2;
new PC1;
//new armygate2;
//new armygate1;
new pdgate1;
new pdgate2;
new pdgate3;
//new tugate;
new lspddoor1;
new lspddoor2;
new fbigate;
new Portecommi;
new hspdgate;
new lucianogate;
new grillefouriere
new grillegarage
//new grillemaison;
//new felevateur;
new braquagetimer;
new letimerdelaceinture[MAX_PLAYERS];
/*new license_pu;
new license_pu2;
new license_pu3;
new license_pu4;
new license_pu5;*/
new Security = 0;
new gPlayerUsingLoopingAnim[MAX_PLAYERS];
new gPlayerAnimLibsPreloaded[MAX_PLAYERS];
//new Text:txtAnimHelper;
new CreatedCars[MAX_VEHICLES] = {INVALID_VEHICLE_ID, ...};
//new CreatedCar = 0;
new Tax = 0;
new TaxValue = 0;
new Jackpot = 0;
new StartingPaintballRound = 0;
new AnnouncedPaintballRound = 0;
new PaintballPlayers = 0;
new PaintballRound = 0;
new PaintballWinner = 999;
new PaintballWinnerKills = 0;
new StartingKartRound = 0;
new EndingKartRound = 0;
new AnnouncedKartRound = 0;
new KartingPlayers = 0;
new KartingRound = 0;
new FirstKartWinner = 999;
new SecondKartWinner = 999;
new ThirdKartWinner = 999;
new InRing = 0;
new RoundStarted = 0;
new BoxDelay = 0;
new Boxer1 = 255;
new Boxer2 = 255;
new TBoxer = 255;
new PlayerBoxing[MAX_PLAYERS];
new hitfound = 0;
new hitid = 999;
new Medics = 0;
new MedicCall = 999;
new MedicCallTime[MAX_PLAYERS];
new Mechanics = 0;
new MechanicCall = 999;
new MechanicCallTime[MAX_PLAYERS];
new TaxiDrivers = 0;
new TaxiCall = 999;
new TaxiCallTime[MAX_PLAYERS];
new TaxiAccepted[MAX_PLAYERS];
new BusDrivers = 0;
new BusCall = 999;
new ScriptMoney[MAX_PLAYERS];
new ScriptWeapons[MAX_PLAYERS][13];
new ScriptMoneyUpdated[MAX_PLAYERS];
new ScriptWeaponsUpdated[MAX_PLAYERS];
new ConsumingMoney[MAX_PLAYERS];
new BusCallTime[MAX_PLAYERS];
new BusAccepted[MAX_PLAYERS];
new TransportDuty[MAX_PLAYERS];
new TransportValue[MAX_PLAYERS];
new TransportMoney[MAX_PLAYERS];
new TransportTime[MAX_PLAYERS];
new TransportCost[MAX_PLAYERS];
new TransportDriver[MAX_PLAYERS];
new JobDuty[MAX_PLAYERS];
new RegistrationStep[MAX_PLAYERS];
new RegistrationQuestion[MAX_PLAYERS];
new MapIconsShown[MAX_PLAYERS];
new OnCK[MAX_PLAYERS];
new GettingCK[MAX_PLAYERS];
new PlayerPaintballing[MAX_PLAYERS];
new PlayerPaintballKills[MAX_PLAYERS];
new PlayerKarting[MAX_PLAYERS];
new PlayerInKart[MAX_PLAYERS];
new SchoolSpawn[MAX_PLAYERS];
new TakingLesson[MAX_PLAYERS];
new UsedFind[MAX_PLAYERS];
new tempvoiturevoler[MAX_PLAYERS];
new PlayersChannel[MAX_PLAYERS];
new PlayerOnMission[MAX_PLAYERS];
new MissionCheckpoint[MAX_PLAYERS];
new WatchingTV[MAX_PLAYERS];
new NoFuel[MAX_PLAYERS];
new MatsHolding[MAX_PLAYERS];
new DivorceOffer[MAX_PLAYERS];
new MarriageCeremoney[MAX_PLAYERS];
new ProposeOffer[MAX_PLAYERS];
new ProposedTo[MAX_PLAYERS];
new GotProposedBy[MAX_PLAYERS];
new MarryWitness[MAX_PLAYERS];
new MarryWitnessOffer[MAX_PLAYERS];
new TicketOffer[MAX_PLAYERS];
new TicketMoney[MAX_PLAYERS];
new OrganeOffer[MAX_PLAYERS];
new OrganeMoney[MAX_PLAYERS];
new PlayerStoned[MAX_PLAYERS];
//new ConsumingMoney[MAX_PLAYERS];
new BringingPaper[MAX_PLAYERS]; //Paper Boys must pick up a Paper first, then use /deliver
new GotPaper[MAX_PLAYERS]; //The player has a paper so he can use /read
new WritingPaper[MAX_PLAYERS]; //Used for onplayertext so he can type in lines
new WritingPaperNumber[MAX_PLAYERS]; //To which Paper in PaperInfo will it be written
new WritingLine[MAX_PLAYERS]; //Used for onplayertext to see which line he's at
new FishCount[MAX_PLAYERS];
new SpawnChange[MAX_PLAYERS];
new TutTime[MAX_PLAYERS];
new PlayerDrunk[MAX_PLAYERS];
new PlayerDrunkTime[MAX_PLAYERS];
new PlayerTazeTime[MAX_PLAYERS];
new FindTimePoints[MAX_PLAYERS];
new FindTime[MAX_PLAYERS];
new BoxWaitTime[MAX_PLAYERS];
new TestFishes[MAX_PLAYERS];
new PaperOffer[MAX_PLAYERS];
new BoxOffer[MAX_PLAYERS];
new CarOffer[MAX_PLAYERS];
new CarPrice[MAX_PLAYERS];
new CarID[MAX_PLAYERS];
new CarCalls[MAX_PLAYERS];
new GotHit[MAX_PLAYERS];
new GoChase[MAX_PLAYERS];
new GetChased[MAX_PLAYERS];
new OrderReady[MAX_PLAYERS];
new ConnectedToPC[MAX_PLAYERS];
new MedicTime[MAX_PLAYERS];
new NeedMedicTime[MAX_PLAYERS];
new MedicBill[MAX_PLAYERS];
new PlayerTied[MAX_PLAYERS];
new PlayerCuffed[MAX_PLAYERS];
new PlayerCuffedTime[MAX_PLAYERS];
new LiveOffer[MAX_PLAYERS];
new TalkingLive[MAX_PLAYERS];
new PlacedNews[MAX_PLAYERS];
new SelectChar[MAX_PLAYERS];
new SelectCharID[MAX_PLAYERS];
new SelectCharPlace[MAX_PLAYERS];
new ChosenSkin[MAX_PLAYERS];
new GettingJob[MAX_PLAYERS];
new GuardOffer[MAX_PLAYERS];
new GuardPrice[MAX_PLAYERS];
new ApprovedLawyer[MAX_PLAYERS];
new CallLawyer[MAX_PLAYERS];
new WantLawyer[MAX_PLAYERS];
new CurrentMoney[MAX_PLAYERS];
new KickPlayer[MAX_PLAYERS];
new Robbed[MAX_PLAYERS];
new RobbedTime[MAX_PLAYERS];
new CP[MAX_PLAYERS];
new MoneyMessage[MAX_PLAYERS];
new Condom[MAX_PLAYERS];
new Rope[MAX_PLAYERS];
new STDPlayer[MAX_PLAYERS];
new SexOffer[MAX_PLAYERS];
new SexPrice[MAX_PLAYERS];
new RepairOffer[MAX_PLAYERS];
new RepairPrice[MAX_PLAYERS];
new RefillOffer[MAX_PLAYERS];
new RefillPrice[MAX_PLAYERS];
new ChangeColorOffer[MAX_PLAYERS];
new ChangeColorPrice[MAX_PLAYERS];
new ChangeColor1[MAX_PLAYERS];
new ChangeColor2[MAX_PLAYERS];
new RepairCar[MAX_PLAYERS];
new DrugOffer[MAX_PLAYERS];
new DrugPrice[MAX_PLAYERS];
new DrugGram[MAX_PLAYERS];
new JailPrice[MAX_PLAYERS];
new WantedPoints[MAX_PLAYERS];
new WantedLevel[MAX_PLAYERS];
new swat[MAX_PLAYERS];
new OnDuty[MAX_PLAYERS];
new gPlayerCheckpointStatus[MAX_PLAYERS];
new gPlayerLogged[MAX_PLAYERS];
new gPlayerLogTries[MAX_PLAYERS];
new gPlayerSpawned[MAX_PLAYERS];
new gActivePlayers[MAX_PLAYERS];
new gLastCar[999];
new gOoc[MAX_PLAYERS];
new gNews[MAX_PLAYERS];
new gFam[MAX_PLAYERS];
new BigEar[MAX_PLAYERS];
new Spectate[MAX_PLAYERS];
new CellTime[MAX_PLAYERS];
new StartTime[MAX_PLAYERS];
new HireCar[MAX_PLAYERS];
new SafeTime[MAX_PLAYERS];
new Specing[MAX_PLAYERS];
new HidePM[MAX_PLAYERS];
new PhoneOnline[MAX_PLAYERS];
new gDice[MAX_PLAYERS];
new gGas[MAX_PLAYERS];
new gSpeedo[MAX_PLAYERS];
new gSpentCash[MAX_PLAYERS];
new FirstSpawn[MAX_PLAYERS];
new SwitchKey[MAX_PLAYERS];
new Fixr[MAX_PLAYERS];
new Locator[MAX_PLAYERS];
new Mobile[MAX_PLAYERS];
new RingTone[MAX_PLAYERS];
new CallCost[MAX_PLAYERS];
new gPlayerAccount[MAX_PLAYERS];
new gPlayerMission[MAX_PLAYERS];
new BusrouteEast[MAX_PLAYERS][2];
new BusrouteWest[MAX_PLAYERS][2];
new Float:BusShowLocation[MAX_PLAYERS][4];
new BusShowLocationC[MAX_PLAYERS];
new InAFoodPlace[MAX_PLAYERS];
new gLastDriver[1000];
new gCarLock[265];
new vLocked[MAX_VEHICLES];
new MissionPlayable = 0;
new noooc = 0;
new adds = 1;
new addtimer = 60000;
new Float:rx, Float:ry, Float:rz;
//new carselect[15];
new objstore[128];
new cbjstore[128];
new motd[256];
//new RStart;
new ghour = 0;
new gminute = 0;
new gsecond = 0;
new numplayers = 0;
new dollah = 2000; // Amount player recieves on spawn.
//new realtime = 1;
//new wtime = 16;
//new levelcost = 5000;
new deathcost = 500;
new callcost = 2; //20 seconds
new realchat = 1;
//new shifthour;
new othtimer;
new spdovoiture;
new hackchecktimer;
new synctimer;
new newmistimer;
new unjailtimer;
new turftimer;
new pickuptimer;
new spectatetimer;
new idletimer;
new productiontimer;
new SetWorld;
new accountstimer;
new checkgastimer;
new stoppedvehtimer;
new checkcarhealthtimer;
//new updateplayerpos;
new cartimer;
new intrate = 1;
new levelexp = 4;
new idletime = 600000; //10 mins
new civnokill = 0;
new suecost = 100;
new cchargetime = 60;
new txtcost = 1;
new pickups;
new authorizeswat;
new PizzaBoys = 0;
new PizzaCall = 999;
new PizzaCallTime[MAX_PLAYERS];
new bPizza[MAX_PLAYERS];
new sPizza[MAX_PLAYERS];
new CIV[] = {7,19,20,23,73,101,122};
new STD1[] = {0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3};
new STD2[] = {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3};
new STD3[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3};
new STD4[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 3};
new SELLCAR1[] = { 250, 263, 274, 301, 309, 342, 368, 389, 402, 433, 502 };
new SELLCAR2[] = { 504, 509, 525, 531, 538, 544, 548, 555, 568, 577, 580 };
new SELLCAR3[] = { 586, 591, 594, 599, 603, 609, 611, 619, 623, 631, 633 };
new SELLCAR4[] = { 642, 648, 653, 661, 668, 672, 674, 687, 693, 698, 703 };
new Float:ChangePos[MAX_PLAYERS][3];
new ChangePos2[MAX_PLAYERS][2];
//new Float:PlayerPos[MAX_PLAYERS][6];
new Float:TeleportDest[MAX_PLAYERS][3];
new Float:TelePos[MAX_PLAYERS][6];
new roadblocktimer = 0;
new engineOn[MAX_VEHICLES];
new PayDaySecure[MAX_PLAYERS];
new VoitureASabot[MAX_VEHICLES] = 0;
new vehicleEntered[MAX_PLAYERS][MAX_VEHICLES];
new gEngine[MAX_PLAYERS];
new FarmerVar[MAX_PLAYERS];
new FarmerPickup[MAX_PLAYERS][2];
new AirRoute[MAX_PLAYERS];
new TrainRoute[MAX_PLAYERS];
new DrugFarmerVar[MAX_PLAYERS];
new DrugFarmerPickup[MAX_PLAYERS][2];
new JustStarted[MAX_PLAYERS];
new SmugglerWork[MAX_PLAYERS];
new SmuggledDrugs[MAX_PLAYERS];
new JustDied[MAX_PLAYERS];
new KnockedDown[MAX_PLAYERS];
new UnidentifedCall[MAX_PLAYERS];
new LicenseOffer[MAX_PLAYERS];
new LicensePrice[MAX_PLAYERS];
new LicenseType[MAX_PLAYERS];
new DefaultWeather = 10;
new UsingDrugs[MAX_PLAYERS];
new AfterTutorial[MAX_PLAYERS];
new OwnableCarOffer[MAX_PLAYERS];
new OwnableCarID[MAX_PLAYERS];
new OwnableCarPrice[MAX_PLAYERS];
new BlindFold[MAX_PLAYERS];
new PlayerIsSweeping[MAX_PLAYERS];
new PlayerOnGarbage[MAX_PLAYERS];
new Masturber[MAX_PLAYERS];
// ------------
new RedAlertTimer;
new VehicleWindows[MAX_VEHICLES] = 0;
new AdminDuty[MAX_PLAYERS];
new fouriereduty[MAX_PLAYERS];
new BurgerPickUp[9];
new ChickenPickUp[9];
new Menu:BurgerShot;
new Menu:CluckinBell;
new IsMenuShowed[MAX_PLAYERS] = 0;
new burgertimer;
new	chickentimer;
new pdtrace = 0;
new Float:pdtrace_x;
new Float:pdtrace_y;
new Float:pdtrace_z;
new emdtrace = 0;
new Float:emdtrace_x;
new Float:emdtrace_y;
new Float:emdtrace_z;
new tracetimer;
new JustReported[MAX_PLAYERS];
new PlayerNeedsHelp[MAX_PLAYERS];
new AdminSpec[MAX_PLAYERS];
new IsSmoking[MAX_PLAYERS];
new UsingSmokeAnim[MAX_PLAYERS];
new ReduceTime[MAX_PLAYERS];
new CreatingGun[MAX_PLAYERS];
new CreatingGunAmmo[MAX_PLAYERS];
new CreatingGunPrice[MAX_PLAYERS];
new IsPuttingMaterials[MAX_PLAYERS];
new IsTakingGun[MAX_PLAYERS];
new Flicservice = 0;
new grilleouverte[MAX_PLAYERS] = 0;
new ceinture[MAX_PLAYERS] = 0;
new casque[MAX_PLAYERS] = 0;
new Objet[MAX_PLAYERS];
new lathune;
new braquageencours = 0;
new NombreBraqueur = 0;
new Braqueur[MAX_PLAYER_NAME];
new achatvoiture[MAX_PLAYERS] = 0;
new voitureenlivraison[MAX_PLAYERS];
new InShamal[MAX_PLAYERS];
new Float:ShamalPos[MAX_VEHICLES][3];
new sExplode[MAX_VEHICLES], tCount[MAX_VEHICLES];
new pretakick;
//new secubanque;
new blindebanque;
new mdpbanque = 0;
new braquerauto = 0;
new bool:IsSpeeding[MAX_PLAYERS];
//new playerspeedtimer[MAX_PLAYERS];
//new CrashTimer[MAX_PLAYERS];
new burnout[MAX_PLAYERS],timer;
new desactivetext[MAX_PLAYERS] = 0;
new ilbraque[MAX_PLAYERS] = 0;
new robmoney;
//new Float:labombex, Float:labombey, Float:labombez;
new missileObjet[MAX_PLAYERS],missileactiver[MAX_PLAYERS],Boom[MAX_PLAYERS] = 0;
new CibleTimer[MAX_PLAYERS];
new TimerFinMissile[MAX_PLAYERS];
new Cible1[MAX_PLAYERS];
new botcar;
new lavoituregarer[MAX_PLAYERS];
new Float:LastHealth[MAX_PLAYERS],Float:LastSpeed[MAX_PLAYERS];
new voiturepaslui[MAX_PLAYERS] = 0;
new ilsweep[MAX_PLAYERS] = 0;
new rein[MAX_PLAYERS] = 0;
new Organe = 0;
new changementvetements[MAX_PLAYERS];
new GotoCheck[MAX_PLAYERS];
new HandshakeOffer[MAX_PLAYERS];
new HandshakeType[MAX_PLAYERS];
new NoHospital[MAX_PLAYERS];
new Text3D:businesstext[51]; // BizzInfo
new Text3D:sbusinesstext[12]; // SBizzInfo
new Text3D:housetext[253]; // HouseInfo
new PlayerIsDozering[MAX_PLAYERS];
//new VehicleOwned[MAX_VEHICLES];
new gDestroyVehicle[MAX_VEHICLES];
new Text:Textdraw52[MAX_PLAYERS];
new ReceivedMoney[MAX_PLAYERS];
new MoneyTimer[MAX_PLAYERS];

//////////NEWS BRAQUAGE//////////
new Canrobagaintimer;
new RobCityHallTimer;
new RobbingTime[MAX_PLAYERS];
new CityHallRobbedRecently;
new RobbedRecently[MAX_PLAYERS];

/*new Robbed[MAX_PLAYERS];
new RobbedTime[MAX_PLAYERS];*/

new AlhambraRobbedRecently;
new GymRobbedRecently;
new BarRobbedRecently;
new DonutRobbedRecently;
new Cluckin1RobbedRecently;
new Cluckin2RobbedRecently;
new Burger1RobbedRecently;
new Burger2RobbedRecently;
new PizzaRobbedRecently;

new RobDonutTimer;
new RobGymTimer;
new RobAlhambraTimer;
new RobBarTimer;
new RobCluckinTimer;
new RobBurgerTimer;
new RobPizzaTimer;
//////////FIN NEWS BRAQUAGE//////////

new pTest[MAX_PLAYERS]; // Permis Automatique
new DKT[MAX_PLAYERS];

new quelquncoffre[MAX_VEHICLES];
new lemeccoffre[MAX_PLAYERS];

new BadWords[50][30];
new BadWords_Index;
new SvWerbung[50][30];
new SvWerbung_Index;

new tentativeconexionrcon = 0;
new Menu:Licenses;///////////////////////////////////////////////////////////////////////////////////////MENU LICENSES !
new pingkick=500; //change this if you want
new TookSprunk[MAX_PLAYERS];

new Float:PPos[MAX_PLAYERS][3];
new AFKMins[MAX_PLAYERS];
new show = ShowTime;
new pub = Public;

new aGun[MAX_PLAYERS][13];

//events
new Float: EventX, Float: EventY, Float: EventZ, EventInt, EventWorld;
new EventHP = 100, EventArmour = 0, ActiveEvent = 0, EventJoinText = 0, EventLocked = 0;
new EventWeapon1, EventWeapon2, EventWeapon3, EventWeapon4, EventWeapon5;
new EventText[128];
new IsAtEvent[MAX_PLAYERS];

// DMV Defines
/*#define GREEN 0x21DD00FF
#define RED 0xE60000FF*/
#define YELLOW 0xFFFF00FF
#define ORANGE 0xF97804FF
#define GRAY 0xCECECEFF
#define LIGHTBLUE 0x00C2ECFF
#define DrivingTestCash 5000 // Edit this if needed. 5000 = the cash that you'll pay to take the driving test
#define TooSlow 120 // 120 = if the time is 110 or more, you are driving too slow. You may edit this if needed.
#define TooFast 105 // 105 = if the time is less than 105, you are driving too fast. You may edit this if needed.
#define MINVEHHP 900 // 900 = the minimum vehicle health the vehicle can have to pass the test. You may edit this if needed.
#define cop_color 0xC2A2DAFF
#define COLOR_BLACK 0x000000FF
#define COLOR_NICERED 0xFF0000FF

#define GasMax 100
#define RunOutTime 25000
#define RefuelWait 5000
#define SPECIAL_ACTION_PISSING      68

///////// ANTI-FLOOD /////////
#define RATE_INC (500)  // The sensitivity per message, no need to modify.
#define RATE_MAX (900) // When the flood rate reaches this value the action below will be taken
#define THRESOLD_ACTION 2

enum LIST_ANTIFLOOD
{
        lastCheck,
        floodRate
}


new AntiFlood_Data[MAX_PLAYERS][LIST_ANTIFLOOD];
//////////////////////////////

//==============================================================================
#define dcmd(%1,%2,%3) if ((strcmp((%3)[1], #%1, true, (%2)) == 0) && ((((%3)[(%2) + 1] == 0) && (dcmd_%1(playerid, "")))||(((%3)[(%2) + 1] == 32) && (dcmd_%1(playerid, (%3)[(%2) + 2]))))) return 1

#define MAX_RACECHECKPOINTS 64
#define MAX_BUILDERS 4
#define RACEFILE_VERSION 2

new MajorityDelay = 120;
new RRotation = -1;
new RRotationDelay = 300000;
new BuildAdmin = 1;
new RaceAdmin = 1;
new PrizeMode=0;
new Prize=30000;
new DynaMP=1;
new JoinFee=1000;

new Menu:MAdmin, Menu:MPMode, Menu:MPrize, Menu:MDyna, Menu:MBuild, Menu:MLaps;
new Menu:MRace, Menu:MRacemode, Menu:MFee, Menu:MCPsize, Menu:MDelay;

forward RaceRotation();
forward LockRacers();
forward UnlockRacers();
forward SaveScores();
forward GetRaceTick(playerid);
forward GetLapTick(playerid);
forward ReadyRefresh();
forward RaceSound(playerid,sound);
forward BActiveCP(playerid,sele);
forward endrace();
forward countdown();
forward mscountdown();
forward otherstrtok(const string[],&index);
forward SetNextCheckpoint(playerid);
forward CheckBestLap(playerid, laptime);
forward CheckBestRace(playerid,racetime);
forward ChangeLap(playerid);
forward SetRaceCheckpoint(playerid,target,next);
forward SetBRaceCheckpoint(playerid,target,next);
forward LoadTimes(playerid,timemode,tmp[]);
forward IsNotAdmin(playerid);
forward GetBuilderSlot(playerid);
forward b(playerid);
forward Float:Distance(Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2);
forward clearrace(playerid);
forward startrace();
forward LoadRace(tmp[]);
forward CreateRaceMenus();

new RotationTimer;
new ystring[128];
new CBuilder[MAX_PLAYER_NAME], CFile[64], CRaceName[128];
new Pot=0;
new Ranking;
new PrizeMP;
new Countdown;
new cd;
new MajStart=0;
new MajStartTimer;
new mscd;
new RaceActive;
new RaceStart;
new Float:RaceCheckpoints[MAX_RACECHECKPOINTS][3];
new LCurrentCheckpoint;
new CurrentCheckpoint[MAX_PLAYERS];
new CurrentLap[MAX_PLAYERS];
new RaceParticipant[MAX_PLAYERS];
new Participants;
new PlayerVehicles[MAX_PLAYERS];
new ORacelaps, ORacemode;
new OAirrace, Float:OCPsize;
new Racelaps, Racemode;
new ScoreChange;
new RaceTick;
new LastLapTick[MAX_PLAYERS];
new TopRacers[6][MAX_PLAYER_NAME];
new TopRacerTimes[6];
new TopLappers[6][MAX_PLAYER_NAME];
new TopLapTimes[6];
new Float:CPsize;
new Airrace;
new Float:RLenght, Float:LLenght;

new BCurrentCheckpoints[MAX_BUILDERS];
new BSelectedCheckpoint[MAX_BUILDERS];
new RaceBuilders[MAX_PLAYERS];
new BuilderSlots[MAX_BUILDERS];
new Float:BRaceCheckpoints[MAX_BUILDERS][MAX_RACECHECKPOINTS][3];
new Bracemode[MAX_BUILDERS];
new Blaps[MAX_BUILDERS];
new Float:BCPsize[MAX_BUILDERS];
new BAirrace[MAX_BUILDERS];
//==============================================================================
//new FALSE = false;

#define CAR_AMOUNT 1999 //Change to Your Vehicle Amount
new Gas[CAR_AMOUNT];

new Refueling[MAX_PLAYERS];

enum SavePlayerPosEnum
{
    Float:LastX,
    Float:LastY,
    Float:LastZ
}
new SavePlayerPos[MAX_PLAYERS][SavePlayerPosEnum];
new SpeedMode = 1;
new UpdateSeconds = 1;

public Float:GetDistanceBetweenPlayers(p1,p2)
{
	new Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2;
	if(!IsPlayerConnected(p1) || !IsPlayerConnected(p2))
	{
		return -1.00;
	}
	GetPlayerPos(p1,x1,y1,z1);
	GetPlayerPos(p2,x2,y2,z2);
	return floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
}

new Music[MAX_PLAYERS];
/*new Songs[7][1] = {
{1187},
{1185},
{1183},
{1097},
{1076},
{1068},
{1062}
};*/

new Float:difc[13][4] = {
{1.13, 0.05, 1.10, 0.0},
{1.13, 2.35, 1.10, 180.0},
{1.13, 4.65, 1.10, 180.0},
{1.13, 1.05, 1.10, 0.0},
{1.13, 3.45, 1.10, 180.0},
{1.13, 5.85, 1.10, 180.0},
{1.13, 0.39, 0.56, 0.0},
{1.13, 2.69, 0.56, 180.0},
{1.13, 4.99, 0.56, 180.0},
{1.13, 0.71, 0.56, 0.0},
{1.13, 3.79, 0.56, 180.0},
{1.13, 6.19, 0.56, 180.0},
{0.00, 0.30, 1.10, 0.0}
};

new Float:BurgerDriveIn[6][3] = {
	{801.5522, -1628.91, 13.3828},
	{1209.958,-896.7405, 42.9259},
	{-2341.86, 1021.184, 50.6953},
	{2485.291, 2022.611, 10.8203},
	{1859.496, 2084.797, 10.8203},
	{-2349.49, -152.182, 35.3203}
};

new Float:ChickenDriveIn[3][3] = {
	{2409.651, -1488.65, 23.8281},
	{2377.733, -1909.27, 13.3828},
	{2375.014, 2021.186, 10.8203}
};

new FishNamesNumber = 22;
new FishNames[22][20] = {
{"Jacket"},
{"Amberjack"},
{"Grouper"},
{"Red Snapper"},
{"Pants"},
{"Trout"},
{"Blue Marlin"},
{"Can"},
{"Mackeral"},
{"Sea Bass"},
{"Shoes"},
{"Pike"},
{"Sail Fish"},
{"Garbage"},
{"Tuna"},
{"Eel"},
{"Dolphin"},
{"Shark"},
{"Turtle"},
{"Catfish"},
{"Money Bag"},
{"Swordfish"}
};

new Float:PaintballSpawns[7][3] = {
{-394.8027,2232.2317,42.4297},
{-430.8412,2240.5371,42.9834},
{-369.2361,2248.3127,42.4844},
{-350.8910,2218.0215,42.4912},
{-384.0544,2206.2908,42.4235},
{-395.7100,2214.9480,42.4297},
{-445.3718,2222.5481,42.4297}
};

new Float:gInviteSpawns[10][4] = {
{-1976.5912,166.1818,36.9623,272.6393},
{-1975.8610,162.1945,36.9623,272.0126},
{-1975.7461,157.5404,36.9623,276.1093},
{-1975.2136,151.4920,36.9623,268.2993},
{-1974.9963,145.3430,36.9623,269.2628},
{-1975.5842,140.8170,36.9623,269.8895},
{-1975.7874,134.0368,36.9623,271.7696},
{-1975.1681,129.0926,36.9623,270.8531},
{-1975.9069,121.4700,36.9623,270.5631},
{-1975.3311,112.7078,36.9623,267.7665}
};

new Float:gMedicSpawns[3][3] = {
{348.9868,165.0690,1014.6947},
{348.8042,162.5563,1014.6947},
{348.8767,159.9840,1014.6947}
};

new Float:gCopPlayerSpawns[2][3] = {
{216.9725,79.1339,1005.0391},
{219.8852,75.5487,1005.0391}
//{614.8,-608.2,17.2},
//{611.5,-607.8,17.2}
};

new Float:gMedPlayerSpawns[2][3] = {
{1178.1,-1321.0,14.1},
{1177.7,-1325.0,14.0}
};

new Float:gSweeperPoints[16][3] = {
{2003.3517,-1730.5336,13.1080},
{2243.8682,-1895.1603,13.1057},
{2872.5264,-1507.8936,10.5887},
{2733.4851,-1079.1128,69.0215},
{2491.6882,-1096.9484,48.1798},
{1973.2815,-1173.0474,25.6866},
{1441.3285,-1038.8422,23.4461},
{1041.5815,-776.1030,104.3925},
{958.6799,-1034.2134,29.8119},
{995.9623,-1351.8215,13.0737},
{793.3896,-1583.4993,13.1155},
{368.1902,-1977.2362,7.3970},
{834.1572,-1794.8837,13.5680},
{1243.4885,-1853.9174,13.1080},
{1527.9438,-1663.3240,13.1080},
{2083.6062,-1843.3563,13.1080}
};

new Float:gGarbagePoints[11][3] = {
{2656.0317,723.3734,11.3701},
{2617.9421,724.5952,11.3654},
{1633.3308,671.6982,11.3657},
{1562.7146,970.6492,11.2710},
{1677.1941,1163.6306,11.3666},
{1738.9978,1247.2136,11.2746},
{2553.1946,2242.3501,11.3612},
{2200.2012,2814.5315,11.3686},
{2226.6582,2816.5986,11.3684},
{1663.1783,2112.5767,11.3664}, //[10]
{793.3896,-1583.4993,13.1155}
};

new Float:gDozerPoints[35][3] = {
{782.5367,848.9471,5.4482}, //[1]
{774.0024,879.1360,-1.5721},
{745.5106,919.9079,-7.5863},
{727.7861,950.1171,-7.7018},
{703.2930,971.0656,-10.8495},
{666.8283,983.0425,-11.6000},
{640.9582,981.0701,-7.7002},
{625.0003,980.8895,-7.7189},
{579.3540,977.6509,-7.1689},
{560.4987,993.7305,-4.1696}, //[10]
{591.4593,996.3208,1.6282},
{651.2600,1002.3597,5.5620},
{698.7537,996.2466,5.5668},
{754.2548,940.3165,5.5610},
{759.8502,845.6880,-7.7149},
{745.8817,793.4456,-7.6877},
{700.6252,755.6165,-6.4750},
{642.9608,750.2213,-11.8209},
{587.8135,764.2768,-16.0093},
{529.8552,790.6788,-21.0453}, //[20]
{543.6426,817.9211,-28.7615},
{574.1843,802.3979,-29.0803},
{640.8110,786.8917,-30.5852},
{708.6047,821.8271,-30.5218},
{708.5413,855.5238,-30.4924},
{676.7378,895.0176,-40.4972},
{594.0986,909.4803,-44.4430},
{561.9764,867.9017,-43.6535},
{588.5715,852.1489,-43.1590},
{622.2214,817.4767,-43.2539}, //[30]
{636.4091,826.4158,-40.6984},
{606.2121,867.4075,-40.6492},
{672.5223,896.5225,-40.6443},
{603.3922,922.5510,-41.9187},
{578.4402,921.3410,-43.2316}
};

new Float:HelmetPos[][6] =
{
    {0.070000, 0.000000, 0.000000, 88.000000, 75.000000, 0.000000}, //skin 0
	{0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 1
	{0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 2
	{0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 3
	{0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 4
	{0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 5
	{0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 6
	{0.090000, 0.019999, 0.000000, 88.000000, 90.000000, 0.000000}, //skin 7
	{0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 8
	{0.059999, 0.019999, 0.000000, 88.000000, 90.000000, 0.000000}, //skin 9
	{0.090000, 0.019999, 0.000000, 88.000000, 90.000000, 0.000000}, //skin 10
	{0.070000, 0.019999, 0.000000, 88.000000, 90.000000, 0.000000}, //skin 11
	{0.070000, 0.019999, 0.000000, 88.000000, 90.000000, 0.000000}, //skin 12
	{0.070000, 0.019999, 0.000000, 88.000000, 90.000000, 0.000000}, //skin 13
	{0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 14
	{0.059999, 0.000000, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 15
	{0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 16
	{0.059999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 17
	{0.059999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 18
	{0.059999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 19
	{0.059999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 20
	{0.059999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 21
	{0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 22
	{0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 23
	{0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 24
	{0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 25
	{0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 26
	{0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 27
	{0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 28
	{0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 29
	{0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 30
	{0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 31
	{0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 32
	{0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 33
	{0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 34
	{0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 35
	{0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 36
	{0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 37
	{0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 38
	{0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 39
	{0.050000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 40
	{0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 41
	{0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 42
	{0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 43
	{0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 44
	{0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 45
	{0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 46
	{0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 47
	{0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 48
	{0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 49
	{0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 50
	{0.100000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 51
	{0.100000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 52
	{0.100000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 53
	{0.100000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 54
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 55
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 56
	{0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 57
	{0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 58
	{0.079999, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 59
	{0.079999, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 60
	{0.079999, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 61
	{0.079999, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 62
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 63
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 64
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 66
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 67
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 68
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 69
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 70
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 71
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 72
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 73
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 75
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 76
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 78
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 79
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 80
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 81
	{0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 82
	{0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 83
	{0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 84
	{0.070000, 0.039999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 85
	{0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 86
	{0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 87
	{0.070000, 0.039999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 88
	{0.070000, 0.039999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 89
	{0.050000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 90
	{0.050000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 91
	{0.050000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 92
	{0.050000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 93
	{0.050000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 94
	{0.050000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 95
	{0.050000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 96
	{0.050000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 97
	{0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 98
	{0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 99
	{0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 100
	{0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 101
	{0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 102
	{0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 103
	{0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 104
	{0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 105
	{0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 106
	{0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 107
	{0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 108
	{0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 109
	{0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 110
	{0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 111
	{0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 112
	{0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 113
	{0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 114
	{0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 115
	{0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 116
	{0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 117
	{0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 118
	{0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 119
	{0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 120
	{0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 121
	{0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 122
	{0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 123
	{0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 124
	{0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 125
	{0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 126
	{0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 127
	{0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 128
	{0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 129
	{0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 130
	{0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 131
	{0.000000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 132
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 133
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 134
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 135
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 136
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 137
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 138
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 139
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 140
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 141
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 142
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 143
	{0.090000, 0.000000, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 144
	{0.090000, 0.000000, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 145
	{0.090000, 0.000000, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 146
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 147
	{0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 148
	{0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 150
	{0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 151
	{0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 152
	{0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 153
	{0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 154
	{0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 155
	{0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 156
	{0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 157
	{0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 158
	{0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 159
	{0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 160
	{0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 161
	{0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 162
	{0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 163
	{0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 164
	{0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 165
	{0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 166
	{0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 167
	{0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 168
	{0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 169
	{0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 170
	{0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 171
	{0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 172
	{0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 173
	{0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 174
	{0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 175
	{0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 176
	{0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 177
	{0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 178
	{0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 179
	{0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 180
	{0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 181
	{0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 182
	{0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 183
	{0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 184
	{0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 185
	{0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 186
	{0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 187
	{0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 188
	{0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 189
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 190
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 191
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 192
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 193
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 194
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 195
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 196
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 197
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 198
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 199
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 200
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 201
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 202
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 203
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 204
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 205
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 206
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 207
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 209
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 210
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 211
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 212
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 213
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 214
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 215
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 216
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 217
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 218
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 219
	{0.029999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 220
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 221
	{0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 222
	{0.070000, 0.050000, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 223
	{0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 224
	{0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 225
	{0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 226
	{0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 227
	{0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 228
	{0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 229
	{0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 230
	{0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 231
	{0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 232
	{0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 233
	{0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 234
	{0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 235
	{0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 236
	{0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 237
	{0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 238
	{0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 239
	{0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 240
	{0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 241
	{0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 242
	{0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 243
	{0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 244
	{0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 245
	{0.070000, 0.050000, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 246
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 247
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 248
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 249
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 250
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 251
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 252
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 253
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 254
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 255
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 256
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 257
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 258
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 259
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 260
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 261
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 262
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 263
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 264
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 265
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 266
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 267
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 268
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 269
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 270
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 271
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 272
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 274
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 275
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 276
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 277
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 278
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 279
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 280
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 281
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 282
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 283
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 284
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 285
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 286
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 287
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 288
	{0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 289
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 290
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 291
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 292
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 293
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 294
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 295
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 296
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 297
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 298
	{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000} //skin 299
};

new Float:SkinOffSet[300][7] = {
{0.098771, 0.030772, -0.000335, 85.342658, 84.122947, 4.236968 }, // - 0
{0.100766, 0.028630, -0.003521, 87.936676, 82.110870, 4.236968 }, // - 1
{0.083712, 0.033132, -0.003521, 87.936676, 82.110870, 4.236968 }, // - 2
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 3
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 4
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 5
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 6
{0.090066, 0.043458, -0.006523, 87.936676, 82.110870, 4.236968 }, // - 7
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 8
{0.070977, 0.028663, 0.000147, 81.164970, 92.128402, 4.236968 },  // - 9
{0.072317, 0.032179, -0.002934, 86.843269, 84.196006, 4.236968 }, // - 10
{0.072317, 0.035465, -0.002201, 86.843269, 84.196006, 4.236968 }, // - 11
{0.072317, 0.028100, -0.002201, 86.843269, 84.196006, 4.236968 }, // - 12
{0.076569, 0.028100, -0.002201, 86.843269, 84.196006, 4.236968 }, // - 13
{0.091310, 0.049169, -0.002201, 86.843269, 84.196006, 4.236968 }, // - 14
{0.073734, 0.006292, -0.002755, 86.843269, 84.196006, 4.236968 }, // - 15
{0.092845, 0.040331, 0.000183, 86.843269, 82.864280, 4.236968 },  // - 16
{0.088241, 0.030184, -0.000157, 86.843269, 82.864280, 4.236968 }, // - 17
{0.061677, 0.029596, -0.007398, 86.843269, 82.864280, 4.236968 }, // - 18
{0.079911, 0.029596, -0.002934, 86.843269, 82.864280, 4.236968 }, // - 19
{0.095079, 0.029596, -0.001718, 85.261871, 86.296562, 4.236968 }, // - 20
{0.093728, 0.042083, -0.005781, 85.261871, 81.636192, 4.236968 }, // - 21
{0.079585, 0.042083, -0.005781, 85.261871, 81.636192, 4.236968 }, // - 22
{0.090786, 0.041737, -0.005263, 85.261871, 81.636192, 4.236968 }, // - 23
{0.085247, 0.026941, -0.000317, 85.261871, 81.636192, 4.236968 }, // - 24
{0.081646, 0.031448, -0.001113, 89.393653, 81.665985, 4.236968 }, // - 25
{0.083700, 0.033814, -0.001960, 86.436462, 81.665985, 4.236968 }, // - 26
{0.092498, 0.037321, -0.001960, 86.436462, 85.568023, 4.236968 }, // - 27
{0.097068, 0.041360, -0.007881, 86.771400, 85.568023, 4.236968 }, // - 28
{0.083456, 0.050595, 0.001011, 86.771400, 77.201461, 4.236968 },  // - 29
{0.076983, 0.047168, -0.006161, 86.771400, 74.329719, 4.236968 }, // - 30
{0.083798, 0.042184, -0.001869, 86.771400, 83.181861, 4.236968 }, // - 31
{0.053021, -0.000587, -0.001869, 86.771400, 66.859710, 4.236968 },// - 32
{0.034386, 0.013324, -0.001869, 86.771400, 80.314460, 4.236968 }, // - 33
{0.104669, 0.037365, -0.001403, 86.771400, 87.178382, 4.236968 }, // - 34
{0.102659, 0.037465, -0.000829, 86.771400, 93.020492, 4.236968 }, // - 35
{0.107638, 0.037465, -0.000829, 86.771400, 93.020492, 4.236968 }, // - 36
{0.107638, 0.035879, -0.000829, 86.771400, 93.020492, 4.236968 }, // - 37
{0.107638, 0.041106, -0.000829, 86.771400, 93.020492, 4.236968 }, // - 38
{0.080326, 0.035634, -0.000829, 86.771400, 93.020492, 4.236968 }, // - 39
{0.080326, 0.027371, -0.000829, 86.771400, 93.020492, 4.236968 }, // - 40
{0.084617, 0.039613, -0.001620, 86.771400, 93.020492, 4.236968 }, // - 41
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 42
{0.040075, 0.025445, -0.000974, 86.771400, 92.964149, 4.236968 }, // - 43
{0.077369, 0.028469, -0.000974, 86.771400, 78.435791, 4.236968 }, // - 44
{0.064145, 0.028684, -0.000974, 86.771400, 84.762802, 4.236968 }, // - 45
{0.091993, 0.056559, -0.000974, 86.771400, 84.762802, 4.236968 }, // - 46
{0.084582, 0.051277, -0.005034, 86.771400, 84.762802, 4.236968 }, // - 47
{0.092182, 0.042095, -0.003533, 86.771400, 84.762802, 4.236968 }, // - 48
{0.086866, 0.032203, -0.001021, 86.771400, 84.762802, 4.236968 }, // - 49
{0.099350, 0.009422, -0.005899, 86.771400, 84.762802, 4.236968 }, // - 50
{0.099350, 0.030598, -0.005899, 86.771400, 84.762802, 4.236968 }, // - 51
{0.099350, 0.030598, -0.003575, 86.771400, 84.762802, 4.236968 }, // - 52
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 53
{0.079123, 0.030598, -0.003575, 86.771400, 84.762802, 4.236968 }, // - 54
{0.063159, 0.029641, -0.003575, 86.771400, 84.762802, 4.236968 }, // - 55
{0.070293, 0.029641, -0.000570, 86.771400, 84.762802, 4.236968 }, // - 56
{0.111305, 0.045368, -0.000570, 86.771400, 84.458084, 4.236968 }, // - 57
{0.084901, 0.020965, -0.000570, 86.771400, 79.542411, 4.236968 }, // - 58
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 59
{0.090164, 0.044163, -0.004754, 86.771400, 79.542411, 4.236968 }, // - 60
{0.087151, 0.041447, -0.000885, 90.928329, 89.598678, 0.000000 }, // - 61
{0.094350, 0.041447, 0.005717, 90.928329, 89.598678, 0.000000 },  // - 62
{0.075534, 0.041447, -0.001751, 90.928329, 89.598678, 0.000000 }, // - 63
{0.075534, 0.041447, -0.001751, 90.928329, 89.598678, 0.000000 }, // - 64
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 65
{0.104148, 0.034787, 0.001341, 90.928329, 89.598678, 0.000000 },  // - 66
{0.104148, 0.034787, 0.001341, 90.928329, 89.598678, 0.000000 },  // - 67
{0.087317, 0.039646, -0.004032, 90.928329, 89.598678, 0.000000 }, // - 68
{0.074873, 0.039646, -0.003072, 90.928329, 89.598678, 0.000000 }, // - 69
{0.090391, 0.042364, 0.005494, 90.928329, 89.598678, 0.000000 },  // - 70
{0.090391, 0.022298, -0.001170, 90.928329, 89.598678, 0.000000 }, // - 71
{0.090391, 0.039580, -0.001170, 90.928329, 89.598678, 0.000000 }, // - 72
{0.090391, 0.038224, -0.001170, 90.928329, 89.598678, 0.000000 }, // - 73
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 74
{0.083113, 0.038224, -0.001170, 90.928329, 89.598678, 0.000000 }, // - 75
{0.072957, 0.028956, -0.001170, 90.928329, 89.598678, 0.000000 }, // - 76
{0.069398, 0.039981, -0.001170, 90.928329, 89.598678, 0.000000 }, // - 77
{0.105738, 0.010001, 0.004508, 90.928329, 79.030494, 0.000000 },  // - 78
{0.078264, 0.019668, 0.004508, 90.928329, 79.030494, 0.000000 },  // - 79
{0.087377, 0.022096, -0.001993, 90.928329, 79.030494, 0.000000 }, // - 80
{0.087377, 0.022096, -0.001635, 90.928329, 79.030494, 0.000000 }, // - 81
{0.100623, 0.043063, -0.001635, 90.928329, 87.672645, 0.000000 }, // - 82
{0.092528, 0.027493, -0.001635, 90.928329, 87.672645, 0.000000 }, // - 83
{0.102086, 0.027493, -0.001635, 90.928329, 87.672645, 0.000000 }, // - 84
{0.081954, 0.041672, -0.001635, 90.928329, 87.672645, 0.000000 }, // - 85
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 86
{0.077010, 0.046925, -0.003438, 90.928329, 91.590301, 0.000000 }, // - 87
{0.069952, 0.042635, -0.003438, 90.928329, 86.722587, 0.000000 }, // - 88
{0.093827, 0.019258, -0.003438, 90.928329, 86.722587, 0.000000 }, // - 89
{0.066464, 0.035685, -0.000843, 90.928329, 86.722587, 0.000000 }, // - 90
{0.066464, 0.035685, -0.000843, 90.928329, 86.722587, 0.000000 }, // - 91
{0.066464, 0.038135, -0.000843, 90.928329, 86.722587, 0.000000 }, // - 92
{0.066464, 0.038135, -0.001690, 90.928329, 86.722587, 0.000000 }, // - 93
{0.048124, 0.010598, -0.001690, 90.928329, 86.722587, 0.000000 }, // - 94
{0.084997, 0.006773, -0.001690, 90.928329, 86.722587, 0.000000 }, // - 95
{0.100076, 0.026633, -0.001690, 90.928329, 80.020179, 0.000000 }, // - 96
{0.061686, 0.027537, -0.001690, 90.928329, 80.020179, 0.000000 }, // - 97
{0.098318, 0.053993, -0.001690, 90.928329, 89.237678, 0.000000 }, // - 98
{0.098318, 0.033702, -0.001690, 90.928329, 89.237678, 0.000000 }, // - 99
{0.086149, 0.042526, -0.001690, 90.928329, 77.587478, 0.000000 }, // - 100
{0.081864, 0.030555, -0.001690, 90.928329, 78.145759, 0.000000 }, // - 101
{0.081864, 0.047914, -0.005079, 90.928329, 78.145759, 0.000000 }, // - 102
{0.089607, 0.036717, -0.005079, 90.928329, 78.145759, 0.000000 }, // - 103
{0.079655, 0.042021, -0.005079, 90.928329, 78.145759, 0.000000 }, // - 104
{0.091779, 0.037620, -0.005079, 90.928329, 78.145759, 0.000000 }, // - 105
{0.084179, 0.035251, -0.005079, 90.928329, 78.145759, 0.000000 }, // - 106
{0.089387, 0.040297, -0.006006, 90.928329, 78.145759, 0.000000 }, // - 107
{0.081930, 0.030756, 0.001523, 90.928329, 78.145759, 0.000000 },  // - 108
{0.092857, 0.043070, -0.006084, 90.928329, 85.326652, 0.000000 }, // - 109
{0.092857, 0.043070, -0.006084, 90.928329, 85.326652, 0.000000 }, // - 110
{0.106601, 0.028021, -0.003537, 90.928329, 90.217376, 0.000000 }, // - 111
{0.096335, 0.015873, -0.003537, 90.928329, 90.217376, 0.000000 }, // - 112
{0.105827, 0.046620, -0.001395, 90.928329, 90.217376, 0.000000 }, // - 113
{0.097520, 0.044296, -0.007286, 90.928329, 90.217376, 0.000000 }, // - 114
{0.097408, 0.043470, -0.007286, 90.928329, 90.217376, 0.000000 }, // - 115
{0.092588, 0.049832, -0.007286, 90.928329, 90.217376, 0.000000 }, // - 116
{0.081444, 0.037602, -0.003125, 90.928329, 90.217376, 0.000000 }, // - 117
{0.078678, 0.037602, -0.001816, 90.928329, 90.217376, 0.000000 }, // - 118
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 119
{0.089214, 0.029291, -0.000784, 90.928329, 84.624763, 0.000000 }, // - 120
{0.086825, 0.033424, -0.000784, 90.928329, 77.233818, 0.000000 }, // - 121
{0.082869, 0.030783, -0.000950, 90.928329, 77.233818, 0.000000 }, // - 122
{0.096117, 0.048957, -0.006245, 90.928329, 87.579650, 0.000000 }, // - 123
{0.103663, 0.040022, 0.000449, 90.928329, 87.579650, 0.000000 },  // - 124
{0.099326, 0.031202, -0.001180, 90.928329, 87.579650, 0.000000 }, // - 125
{0.099326, 0.031132, -0.001180, 90.928329, 87.579650, 0.000000 }, // - 126
{0.099326, 0.039279, -0.001180, 90.928329, 87.579650, 0.000000 }, // - 127
{0.099326, 0.047422, -0.001180, 90.928329, 87.579650, 0.000000 }, // - 128
{0.088817, 0.021210, 0.000730, 90.928329, 87.579650, 0.000000 },  // - 129
{0.025784, 0.028323, 0.000730, 90.928329, 59.394767, 0.000000 },  // - 130
{0.068455, 0.031841, -0.004470, 90.928329, 79.979003, 0.000000 }, // - 131
{0.012930, 0.008392, -0.004470, 90.928329, 72.129173, 0.000000 }, // - 132
{0.102457, 0.032260, -0.003338, 90.928329, 84.534217, 0.000000 }, // - 133
{0.085976, 0.014956, -0.003338, 90.928329, 80.308830, 0.000000 }, // - 134
{0.071574, 0.028186, -0.001588, 90.928329, 80.308830, 0.000000 }, // - 135
{0.085219, 0.016666, -0.000738, 90.928329, 80.308830, 0.000000 }, // - 136
{0.065114, 0.009318, -0.000738, 90.928329, 80.308830, 0.000000 }, // - 137
{0.066890, 0.040024, -0.000738, 90.928329, 87.341934, 0.000000 }, // - 138
{0.072037, 0.036141, -0.000702, 90.928329, 87.341934, 0.000000 }, // - 139
{0.069108, 0.042194, -0.000436, 90.928329, 87.341934, 0.000000 }, // - 140
{0.058717, 0.043547, -0.000436, 90.928329, 87.209770, 0.000000 }, // - 141
{0.104196, 0.039601, -0.005481, 90.928329, 87.209770, 0.000000 }, // - 142
{0.090929, 0.045881, -0.012780, 90.928329, 87.209770, 0.000000 }, // - 143
{0.098291, 0.042464, -0.006952, 90.928329, 83.081665, 0.000000 }, // - 144
{0.080087, 0.030122, 0.000606, 90.928329, 83.081665, 0.000000 },  // - 145
{0.093500, 0.030690, -0.001545, 90.928329, 83.081665, 0.000000 }, // - 146
{0.079566, 0.020138, 0.004838, 90.928329, 73.715591, 0.000000 },  // - 147
{0.073564, 0.028430, -0.000527, 90.928329, 88.295433, 0.000000 }, // - 148
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 149
{0.073564, 0.028430, -0.000527, 90.928329, 88.295433, 0.000000 }, // - 150
{0.083426, 0.032359, -0.005717, 90.928329, 88.295433, 0.000000 }, // - 151
{0.072349, 0.019623, -0.000747, 90.928329, 82.624351, 0.000000 }, // - 152
{0.075065, 0.015351, 0.006545, 90.928329, 71.041442, 0.000000 },  // - 153
{0.062227, 0.029731, -0.004938, 90.928329, 84.602760, 0.000000 }, // - 154
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 155
{0.079936, 0.049000, -0.000304, 90.928329, 82.926010, 0.000000 }, // - 156
{0.067550, 0.035686, -0.000017, 90.928329, 82.926010, 0.000000 }, // - 157
{0.090676, 0.039383, -0.001726, 90.928329, 88.667900, 0.000000 }, // - 158
{0.090676, 0.039383, -0.003532, 90.928329, 88.667900, 0.000000 }, // - 159
{0.098662, 0.017441, -0.001589, 90.928329, 88.667900, 0.000000 }, // - 160
{0.105388, 0.038409, 0.003155, 90.928329, 88.667900, 0.000000 },  // - 161
{0.097415, 0.036904, -0.000525, 90.928329, 88.667900, 0.000000 }, // - 162
{0.088934, 0.023302, -0.004153, 90.928329, 80.393875, 0.000000 }, // - 163
{0.088934, 0.023302, -0.004153, 90.928329, 80.393875, 0.000000 }, // - 164
{0.087018, 0.051364, 0.000484, 90.928329, 94.584838, 0.000000 },  // - 165
{0.087018, 0.051364, 0.000484, 90.928329, 94.584838, 0.000000 },  // - 166
{0.095996, 0.038787, 0.000484, 90.928329, 84.315711, 0.000000 },  // - 167
{0.089094, 0.034001, -0.006451, 90.928329, 84.315711, 0.000000 }, // - 168
{0.075700, 0.028082, -0.006451, 90.928329, 84.315711, 0.000000 }, // - 169
{0.093751, 0.041968, -0.005545, 90.928329, 84.315711, 0.000000 }, // - 170
{0.090124, 0.031055, -0.000505, 90.928329, 84.315711, 0.000000 }, // - 171
{0.066033, 0.032915, -0.002713, 90.928329, 84.315711, 0.000000 }, // - 172
{0.088287, 0.045350, -0.005384, 90.928329, 84.315711, 0.000000 }, // - 173
{0.087750, 0.042129, -0.005384, 90.928329, 84.315711, 0.000000 }, // - 174
{0.092384, 0.039294, -0.005384, 90.928329, 84.315711, 0.000000 }, // - 175
{0.097661, 0.039065, -0.006344, 90.928329, 80.736480, 0.000000 }, // - 176
{0.097114, 0.039641, -0.006692, 90.928329, 80.736480, 0.000000 }, // - 177
{0.069354, 0.039641, -0.000474, 90.928329, 80.736480, 0.000000 }, // - 178
{0.091414, 0.039641, -0.005617, 90.928329, 80.736480, 0.000000 }, // - 179
{0.094914, 0.039641, -0.005617, 90.928329, 80.736480, 0.000000 }, // - 180
{0.117232, 0.033217, -0.001099, 90.928329, 82.396362, 0.000000 }, // - 181
{0.082569, 0.032748, -0.003248, 90.928329, 87.394371, 0.000000 }, // - 182
{0.095527, 0.027237, -0.001960, 90.928329, 86.443649, 0.000000 }, // - 183
{0.095527, 0.040994, -0.006878, 90.928329, 86.443649, 0.000000 }, // - 184
{0.085663, 0.030601, -0.002345, 90.928329, 81.496513, 0.000000 }, // - 185
{0.085663, 0.030601, -0.001015, 90.928329, 81.496513, 0.000000 }, // - 186
{0.076527, 0.027211, 0.008500, 90.928329, 74.401092, 0.000000 },  // - 187
{0.096669, 0.032578, 0.001662, 90.928329, 83.502502, 0.000000 },  // - 188
{0.098753, 0.032129, -0.001659, 90.928329, 90.153724, 0.000000 }, // - 189
{0.092821, 0.035572, -0.001659, 90.928329, 90.153724, 0.000000 }, // - 190
{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000 }, // - 191
{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000 }, // - 192
{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000 }, // - 193
{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000 }, // - 194
{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000 }, // - 195
{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000 }, // - 196
{0.100630, 0.020568, -0.001132, 90.928329, 90.153724, 0.000000 }, // - 197
{0.077905, 0.028523, 0.000000, 89.675476, 89.270309, 0.000000 },  // - 198
{0.099095, 0.022463, 0.000000, 89.675476, 89.270309, 0.000000 },  // - 199
{0.103182, 0.031106, 0.000000, 89.675476, 89.270309, 0.000000 },  // - 200
{0.078426, 0.038546, 0.000000, 89.675476, 89.270309, 0.000000 },  // - 201
{0.101092, 0.035797, -0.002997, 89.675476, 82.081153, 0.000000 }, // - 202
{0.092009, 0.042780, -0.005841, 89.675476, 84.463294, 0.000000 }, // - 203
{0.092009, 0.042780, -0.005841, 89.675476, 84.463294, 0.000000 }, // - 204
{0.092969, 0.027782, -0.002959, 89.675476, 84.463294, 0.000000 }, // - 205
{0.105109, 0.036128, -0.000471, 89.675476, 84.463294, 0.000000 }, // - 206
{0.066892, 0.024410, -0.002792, 89.675476, 84.463294, 0.000000 }, // - 207
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 208
{0.084046, 0.013608, -0.002792, 89.675476, 81.667831, 0.000000 }, // - 209
{0.084046, 0.013608, -0.001034, 89.675476, 81.667831, 0.000000 }, // - 210
{0.067610, 0.033777, -0.001034, 89.675476, 85.214485, 0.000000 }, // - 211
{0.094159, 0.020717, 0.000715, 89.675476, 85.214485, 0.000000 },  // - 212
{0.098744, 0.036786, -0.001770, 89.675476, 85.214485, 0.000000 }, // - 213
{0.068755, 0.036786, -0.001770, 89.675476, 85.214485, 0.000000 }, // - 214
{0.068755, 0.026863, -0.001770, 89.675476, 85.214485, 0.000000 }, // - 215
{0.068755, 0.026863, -0.001770, 89.675476, 85.214485, 0.000000 }, // - 216
{0.095765, 0.030034, -0.001770, 89.675476, 85.214485, 0.000000 }, // - 217
{0.085486, 0.039427, -0.003311, 89.675476, 85.214485, 0.000000 }, // - 218
{0.068874, 0.027850, -0.001021, 89.675476, 85.214485, 0.000000 }, // - 219
{0.052931, 0.050390, -0.002062, 89.675476, 88.113647, 0.000000 }, // - 220
{0.094479, 0.034432, 0.000875, 89.675476, 83.572830, 0.000000 },  // - 221
{0.094479, 0.034432, -0.000596, 89.675476, 83.572830, 0.000000 }, // - 222
{0.094479, 0.062073, -0.003098, 89.675476, 83.572830, 0.000000 }, // - 223
{0.064458, 0.029760, -0.001460, 89.675476, 83.572830, 0.000000 }, // - 224
{0.064458, 0.029760, -0.001460, 89.675476, 83.572830, 0.000000 }, // - 225
{0.072095, 0.029760, -0.001460, 89.675476, 83.572830, 0.000000 }, // - 226
{0.110619, 0.043037, -0.001466, 89.675476, 86.927627, 0.000000 }, // - 227
{0.099446, 0.050772, -0.001466, 89.675476, 85.103805, 0.000000 }, // - 228
{0.078635, 0.023680, -0.000275, 89.675476, 73.445220, 0.000000 }, // - 229
{0.043357, 0.028726, -0.000275, 89.675476, 73.445220, 0.000000 }, // - 230
{0.092488, 0.049972, -0.000275, 89.675476, 88.981941, 0.000000 }, // - 231
{0.092488, 0.016739, -0.000275, 89.675476, 88.981941, 0.000000 }, // - 232
{0.071677, 0.037055, -0.002878, 89.675476, 88.981941, 0.000000 }, // - 233
{0.082745, 0.004209, -0.002878, 89.675476, 88.981941, 0.000000 }, // - 234
{0.057909, 0.021331, -0.002878, 89.675476, 88.981941, 0.000000 }, // - 235
{0.079016, 0.021331, -0.000419, 89.675476, 77.678733, 0.000000 }, // - 236
{0.074572, 0.021331, -0.000419, 89.675476, 84.527442, 0.000000 }, // - 237
{0.074572, 0.038346, -0.001500, 89.675476, 84.527442, 0.000000 }, // - 238
{0.111645, 0.011549, 0.006237, 89.675476, 84.527442, 0.000000 },  // - 239
{0.090766, 0.044221, -0.000423, 89.675476, 89.461883, 0.000000 }, // - 240
{0.069491, 0.049021, -0.000423, 89.675476, 89.461883, 0.000000 }, // - 241
{0.059706, 0.031911, -0.000423, 89.675476, 89.461883, 0.000000 }, // - 242
{0.065242, 0.031911, -0.000423, 89.675476, 89.461883, 0.000000 }, // - 243
{0.065242, 0.051077, -0.001103, 89.675476, 89.461883, 0.000000 }, // - 244
{0.082393, 0.038233, 0.000410, 89.675476, 89.461883, 0.000000 },  // - 245
{0.079338, 0.044859, -0.002535, 89.675476, 89.461883, 0.000000 }, // - 246
{0.101566, 0.037019, 0.000750, 89.675476, 83.514060, 0.000000 },  // - 247
{0.091887, 0.047776, -0.000040, 89.675476, 83.514060, 0.000000 }, // - 248
{0.089745, 0.044044, 0.004071, 89.675476, 83.514060, 0.000000 },  // - 249
{0.094214, 0.044044, -0.007274, 89.675476, 83.514060, 0.000000 }, // - 250
{0.072282, 0.044044, -0.001468, 89.675476, 90.444763, 0.000000 }, // - 251
{0.095764, 0.034224, -0.000264, 89.675476, 82.959915, 0.000000 }, // - 252
{0.087454, 0.026208, -0.000264, 89.675476, 82.959915, 0.000000 }, // - 253
{0.099198, 0.037362, -0.000264, 89.675476, 82.959915, 0.000000 }, // - 254
{0.070845, 0.019943, 0.003505, 89.675476, 73.529716, 0.000000 },  // - 255
{0.065373, 0.033656, -0.001141, 89.675476, 83.002151, 0.000000 }, // - 256
{0.070077, 0.033656, -0.001141, 89.675476, 83.002151, 0.000000 }, // - 257
{0.089536, 0.041904, 0.000715, 89.675476, 83.002151, 0.000000 },  // - 258
{0.084822, 0.041904, 0.000715, 89.675476, 83.002151, 0.000000 },  // - 259
{0.093009, 0.031491, -0.001568, 89.675476, 83.002151, 0.000000 }, // - 260
{0.093009, 0.015023, -0.001477, 89.675476, 83.002151, 0.000000 }, // - 261
{0.076580, 0.039782, -0.001477, 89.675476, 88.620780, 0.000000 }, // - 262
{0.076580, 0.028967, -0.001477, 89.675476, 88.620780, 0.000000 }, // - 263
{0.075424, 0.043059, -0.001477, 89.675476, 88.620780, 0.000000 }, // - 264
{0.089655, 0.021726, -0.001477, 89.675476, 88.620780, 0.000000 }, // - 265
{0.096792, 0.014114, -0.003062, 89.675476, 85.166038, 0.000000 }, // - 266
{0.094886, 0.024989, -0.003184, 89.675476, 85.166038, 0.000000 }, // - 267
{0.094886, 0.024989, -0.003184, 89.675476, 85.166038, 0.000000 }, // - 268
{0.102252, 0.024989, -0.003184, 89.675476, 85.166038, 0.000000 }, // - 269
{0.102252, 0.024989, 0.000529, 89.675476, 85.166038, 0.000000 },  // - 270
{0.096134, 0.025462, 0.000529, 89.675476, 79.225112, 0.000000 },  // - 271
{0.099226, 0.032663, 0.000529, 89.675476, 79.225112, 0.000000 },  // - 272
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 273
{0.089833, 0.022466, -0.001590, 89.675476, 88.636062, 0.000000 }, // - 274
{0.089833, 0.022466, -0.001590, 89.675476, 88.636062, 0.000000 }, // - 275
{0.089833, 0.022466, -0.001590, 89.675476, 88.636062, 0.000000 }, // - 276
{0.082718, 0.062596, -0.000201, 89.675476, 88.636062, 0.000000 }, // - 277
{0.082718, 0.062596, -0.000201, 89.675476, 88.636062, 0.000000 }, // - 278
{0.087652, 0.059379, -0.000201, 89.675476, 88.636062, 0.000000 }, // - 279
{0.087652, 0.023702, -0.003091, 89.675476, 88.636062, 0.000000 }, // - 280
{0.087652, 0.023702, -0.003091, 89.675476, 88.636062, 0.000000 }, // - 281
{0.090877, 0.026643, -0.003091, 89.675476, 88.636062, 0.000000 }, // - 282
{0.090877, 0.026643, -0.003091, 89.675476, 88.636062, 0.000000 }, // - 283
{0.090877, 0.053674, 0.009879, 89.675476, 88.636062, 0.000000 },  // - 284
{0.104320, 0.041487, 0.008021, 89.675476, 88.636062, 0.000000 },  // - 285
{0.087062, 0.021779, -0.003307, 89.675476, 88.636062, 0.000000 }, // - 286
{0.073173, 0.048856, 0.005337, 89.675476, 92.561180, 0.000000 },  // - 287
{0.090294, 0.027592, -0.003497, 89.675476, 92.561180, 0.000000 }, // - 288
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 289
{0.086562, 0.042698, -0.000612, 89.675476, 92.561180, 0.000000 }, // - 290
{0.096768, 0.039233, -0.000612, 89.675476, 83.550270, 0.000000 }, // - 291
{0.079939, 0.020731, -0.005162, 89.675476, 83.550270, 0.000000 }, // - 292
{0.097107, 0.027826, -0.005162, 89.675476, 88.505996, 0.000000 }, // - 293
{0.097107, 0.037636, 0.000618, 89.675476, 88.505996, 0.000000 },  // - 294
{0.079985, 0.035006, -0.000826, 89.675476, 87.533462, 0.000000 }, // - 295
{0.088445, 0.024209, -0.002076, 89.675476, 73.285072, 0.000000 }, // - 296
{0.094039, 0.035411, 0.000490, 89.675476, 84.277572, 0.000000 },  // - 297
{0.099553, 0.024683, -0.002919, 89.675476, 84.277572, 0.000000 }, // - 298
{0.099553, 0.044356, -0.000285, 89.675476, 84.277572, 0.000000 }  // - 299
};

enum {
CommonRed = 19006,
CommonOrange,
CommonGreen,
CommonBlue,
CommonPurple,
CommonEspiral,
CommonBlack,
CommonEyes,
CommonXadrex,
CommonTransparent,
CommonXRayVision,
SquareFormatYellow,
SquareFormatOrange,
SquareFormatRed,
SquareFormatBlue,
SquareFormatGreen,
RayBanGray,
RayBanBlue,
RayBanPurple,
RayBanPink,
RayBanRed,
RayBanOrange,
RayBanYellow,
RayBanGreen,
CircularNormal,
CircularYellow,
CircularRed,
CircularBlack,
CircularXadrex,
CircularThunders,
CopGlassesBlack = 19138,
CopGlassesRed = 19139,
CopGlassesBlue = 19140,
};

enum pBoxingStats
{
    TitelName[128],
    TitelWins,
    TitelLoses,
};
new Titel[pBoxingStats];

enum cCKInfo
{
	cSendername[20],
	cGiveplayer[20],
	cUsed,
};
new CKInfo[10][cCKInfo];

enum pPaperInfo
{
	PaperUsed,
	PaperMaker[20],
	PaperTitle[64],
	PaperText1[128],
	PaperText2[128],
	PaperText3[128],
	PaperText4[128],
	PaperText5[128],
	PaperText6[128],
	PaperText7[128],
	SafeSaving,
};
new PaperInfo[10][pPaperInfo];

enum pPaper
{
	pMaker[20],
	pTitle[64],
	pLine1[128],
	pLine2[128],
	pLine3[128],
	pLine4[128],
	pLine5[128],
	pLine6[128],
	pLine7[128],
};
new Paper[MAX_PLAYERS][pPaper];

enum fInfo
{
	FamilyTaken,
	FamilyName[20],
	FamilyMOTD[128],
	FamilyColor[20],
	FamilyLeader[MAX_PLAYER_NAME],
	FamilyMembers,
	Float:FamilySpawn[4],
	FamilyInterior,
	FamilyCash,
	FamilySafe,
	Float:FamilySafePos[3],
	FamilyCrack,
	FamilyMats,
	PickupID,
 	FStrikes,
 	FamilyTax,
};
new FamilyInfo[10][fInfo];

enum zInfo
{
	zOwner[64],
	zColor[20],
    Float:zMinX,
    Float:zMinY,
    Float:zMaxX,
    Float:zMaxY,
};
new TurfInfo[6][zInfo];
new Turfs[6];

enum pFishing
{
	pFish1[20],
	pFish2[20],
	pFish3[20],
	pFish4[20],
	pFish5[20],
	pWeight1,
	pWeight2,
	pWeight3,
	pWeight4,
	pWeight5,
	pFid1,
	pFid2,
	pFid3,
	pFid4,
	pFid5,
	pLastFish,
	pFishID,
	pLastWeight,
};
new Fishes[MAX_PLAYERS][pFishing];

enum pCooking
{
	pCook1[20],
	pCook2[20],
	pCook3[20],
	pCook4[20],
	pCook5[20],
	pCWeight1,
	pCWeight2,
	pCWeight3,
	pCWeight4,
	pCWeight5,
	pCookID1,
	pCookID2,
	pCookID3,
	pCookID4,
	pCookID5,
};
new Cooking[MAX_PLAYERS][pCooking];

enum pGroceries
{
	pChickens,
	pChicken,
	pHamburgers,
	pHamburger,
	pPizzas,
	pPizza,
};
new Groceries[MAX_PLAYERS][pGroceries];

enum pSpec
{
	Float:Coords[3],
	Float:sPx,
	Float:sPy,
	Float:sPz,
	sPint,
	sLocal,
	sCam,
};

new Unspec[MAX_PLAYERS][pSpec];

enum eCars
{
	model_id,
	Float:pos_x,
	Float:pos_y,
	Float:pos_z,
	Float:z_angle,
};

enum hNews
{
	hTaken1,
	hTaken2,
	hTaken3,
	hTaken4,
	hTaken5,
	hAdd1[128],
	hAdd2[128],
	hAdd3[128],
	hAdd4[128],
	hAdd5[128],
	hContact1[128],
	hContact2[128],
	hContact3[128],
	hContact4[128],
	hContact5[128],
};
new News[hNews];

enum pInfo
{
	pKey[128],
	pLevel,
	pAdmin,
	pDonateRank,
	gPupgrade,
	pConnectTime,
	pReg,
	pSex,
	pAge,
	pOrigin,
	pCK,
	pMuted,
	pMutedOOC,
    pWarnings,
	pExp,
	pCash,
	pAccount,
	probbank,
	//pDormir,
	pHotel,
	pfpermis,
	pMatsf,
	pPointPermis,
	pJobTimer,
	pCrimes,
	pKills,
	pDeaths,
	pArrested,
	pWantedDeaths,
	pPhoneBook,
	pLottoNr,
	pFishes,
	pBiggestFish,
	pJob,
	pPayCheck,
	pHeadValue,
	pJailed,
	pJailTime,
	pMats,
	pDrugs,
	pLeader,
	pMember,
	pFMember,
	pRank,
	pChar,
	pContractTime,
	pDetSkill,
	pSexSkill,
	pBoxSkill,
	pLawSkill,
	pMechSkill,
	pJackSkill,
	pCarSkill,
	pNewsSkill,
	pDrugsSkill,
	pCookSkill,
	pFishSkill,
	Float:pHealth,
	Float:pSHealth,
	pInt,
	pLocal,
	pTeam,
	pModel,
	pPnumber,
	pPhousekey,
	pPcarkey,
	pPcarkey2,
	pPcarkey3,
	pGangKey,
	pPbiskey,
	Float:pPos_x,
	Float:pPos_y,
	Float:pPos_z,
	pCarLic,
	pFlyLic,
	pFlyLicf,
	pFlyLict,
	pBoatLic,
	pBoatLicf,
	pBoatLict,
	pFishLic,
	pFishLicf,
	pFishLict,
	pLourdLic,
	pLourdLicf,
	pLourdLict,
	pMotoLic,
	pMotoLicf,
	pMotoLict,
	pGunLic,
	pGunLicf,
	pGunLict,
	pGun1,
	pGun2,
	pGun3,
	pGun4,
	pAmmo1,
	pAmmo2,
	pAmmo3,
	pAmmo4,
	pCarTime,
	pPayDay,
	pPayDayHad,
	pWatch,
	pGPS,
	pTante,
	pDecodeur,
	pCrashed,
	pKicked,
	pWins,
	pLoses,
	pAlcoholPerk,
	pDrugPerk,
	pMiserPerk,
	pPainPerk,
	pTraderPerk,
	pTut,
	pskinf,
	pskinfm,
	pMissionNr,
	//pWarns,
	pVirWorld,
	pFuel,
	pMarried,
	pMarriedTo[128],
	pFishTool,
	pNote1[128],
	pNote1s,
	pNote2[128],
	pNote2s,
	pNote3[128],
	pNote3s,
	pNote4[128],
	pNote4s,
	pNote5[128],
	pNote5s,
	pJustice,
	pInvWeapon,
	pInvAmmo,
	pLighter,
	pCigarettes,
	pRequestingBackup,
	pRoadblock,
	pMask,
	pMaskuse,
	pHideNumber,
	pSpeaker,
	pWT,
	pWTc,
	pLocked,
	pLang1,
	pLang2,
	pWork,
	pRobTime
	//pSQLID,
};
new PlayerInfo[MAX_PLAYERS][pInfo];

enum hInfo
{
	Float:hEntrancex,
	Float:hEntrancey,
	Float:hEntrancez,
	Float:hExitx,
	Float:hExity,
	Float:hExitz,
	hHealthx,
	hHealthy,
	hHealthz,
	hArmourx,
	hArmoury,
	hArmourz,
	hOwner[MAX_PLAYER_NAME],
	hDiscription[MAX_PLAYER_NAME],
	hValue,
	hHel,
	hArm,
	hInt,
	hLock,
	hOwned,
	hRooms,
	hRent,
	hRentabil,
	hTakings,
	hVec,
	hVcol1,
	hVcol2,
	hDate,
	hLevel,
	hWorld
};

new HouseInfo[253][hInfo]; // Ne pas oublier de modifier la ligne new Text3D:housetext si vous modifiez la valeur ici !

new HouseEntered[MAX_PLAYERS];

new carsonserver = 229;

enum cInfo
{
	cModel,
	Float:cLocationx,
	Float:cLocationy,
	Float:cLocationz,
	Float:cAngle,
	cColorOne,
	cColorTwo,
	cOwner[MAX_PLAYER_NAME],
	cDescription[12],
	cValue,
	cLicense[14],
	cRegistration,
	cOwned,
	cLock,
	mod1,
	mod2,
	mod3,
	mod4,
	mod5,
	mod6,
	mod7,
	mod8,
	mod9,
	mod10,
	mod11,
	mod12,
	mod13,
	mod14,
	mod15,
	mod16,
	mod17,
	paintjob,
};

new CarInfo[1000][cInfo];

//new CarInfo[617][cInfo]; // 870 //634

new spoiler[20][0] = {
	{1000},
	{1001},
	{1002},
	{1003},
	{1014},
	{1015},
	{1016},
	{1023},
	{1058},
	{1060},
	{1049},
	{1050},
	{1138},
	{1139},
	{1146},
	{1147},
	{1158},
	{1162},
	{1163},
	{1164}
};

new nitro[3][0] = {
    {1008},
    {1009},
    {1010}
};

new fbumper[23][0] = {
    {1117},
    {1152},
    {1153},
    {1155},
    {1157},
    {1160},
    {1165},
    {1167},
    {1169},
    {1170},
    {1171},
    {1172},
    {1173},
    {1174},
    {1175},
    {1179},
    {1181},
    {1182},
    {1185},
    {1188},
    {1189},
    {1192},
    {1193}
};

new rbumper[22][0] = {
    {1140},
    {1141},
    {1148},
    {1149},
    {1150},
    {1151},
    {1154},
    {1156},
    {1159},
    {1161},
    {1166},
    {1168},
    {1176},
    {1177},
    {1178},
    {1180},
    {1183},
    {1184},
    {1186},
    {1187},
    {1190},
    {1191}
};

new exhaust[28][0] = {
    {1018},
    {1019},
    {1020},
    {1021},
    {1022},
    {1028},
    {1029},
    {1037},
    {1043},
    {1044},
    {1045},
    {1046},
    {1059},
    {1064},
    {1065},
    {1066},
    {1089},
    {1092},
    {1104},
    {1105},
    {1113},
    {1114},
    {1126},
    {1127},
    {1129},
    {1132},
    {1135},
    {1136}
};

new bventr[2][0] = {
    {1042},
    {1044}
};

new bventl[2][0] = {
    {1043},
    {1045}
};

new bscoop[4][0] = {
	{1004},
	{1005},
	{1011},
	{1012}
};

new rscoop[13][0] = {
    {1006},
    {1032},
    {1033},
    {1035},
    {1038},
    {1053},
    {1054},
    {1055},
    {1061},
    {1067},
    {1068},
    {1088},
    {1091}
};

new lskirt[21][0] = {
    {1007},
    {1026},
    {1031},
    {1036},
    {1039},
    {1042},
    {1047},
    {1048},
    {1056},
    {1057},
    {1069},
    {1070},
    {1090},
    {1093},
    {1106},
    {1108},
    {1118},
    {1119},
    {1133},
    {1122},
    {1134}
};

new rskirt[21][0] = {
    {1017},
    {1027},
    {1030},
    {1040},
    {1041},
    {1051},
    {1052},
    {1062},
    {1063},
    {1071},
    {1072},
    {1094},
    {1095},
    {1099},
    {1101},
    {1102},
    {1107},
    {1120},
    {1121},
    {1124},
    {1137}
};

new hydraulics[1][0] = {
    {1087}
};

new base[1][0] = {
    {1086}
};

new rbbars[2][0] = {
    {1109},
    {1110}
};

new fbbars[2][0] = {
    {1115},
    {1116}
};

new wheels[17][0] = {
    {1025},
    {1073},
    {1074},
    {1075},
    {1076},
    {1077},
    {1078},
    {1079},
    {1080},
    {1081},
    {1082},
    {1083},
    {1084},
    {1085},
    {1096},
    {1097},
    {1098}
};

new light[2][0] = {
	{1013},
	{1024}
};

InitComponents(componentid)
{
	new i;
	for(i=0; i<20; i++)
	{
	    if(spoiler[i][0]==componentid) { return 1; }
	}
	for(i=0; i<3; i++)
	{
	    if(nitro[i][0]==componentid) { return 2; }
	}
	for(i=0; i<23; i++)
	{
	    if(fbumper[i][0]==componentid) { return 3; }
	}
	for(i=0; i<22; i++)
	{
	    if(rbumper[i][0]==componentid) { return 4; }
	}
	for(i=0; i<28; i++)
	{
	    if(exhaust[i][0]==componentid) { return 5; }
	}
	for(i=0; i<2; i++)
	{
	    if(bventr[i][0]==componentid) { return 6; }
	}
	for(i=0; i<2; i++)
	{
	    if(bventl[i][0]==componentid) { return 7; }
	}
	for(i=0; i<4; i++)
	{
	    if(bscoop[i][0]==componentid) { return 8; }
	}
	for(i=0; i<13; i++)
	{
	    if(rscoop[i][0]==componentid) { return 9; }
	}
	for(i=0; i<21; i++)
	{
	    if(lskirt[i][0]==componentid) { return 10; }
	}
	for(i=0; i<21; i++)
	{
	    if(rskirt[i][0]==componentid) { return 11; }
	}
	if(hydraulics[0][0]==componentid) { return 12; }
	if(base[0][0]==componentid) { return 13; }
	for(i=0; i<2; i++)
	{
	    if(rbbars[i][0]==componentid) { return 14; }
	}
	for(i=0; i<2; i++)
	{
	    if(fbbars[i][0]==componentid) { return 15; }
	}
	for(i=0; i<17; i++)
	{
	    if(wheels[i][0]==componentid) { return 16; }
	}
	for(i=0; i<2; i++)
	{
	    if(light[i][0]==componentid) { return 17; }
	}
	return 0;
}


new vehName[][] = {
	"Landstalker",
	"Bravura",
	"Buffalo",
	"Linerunner",
	"Perrenial",
	"Sentinel",
	"Dumper",
	"Firetruck",
	"Trashmaster",
	"Stretch",
	"Manana",
	"Infernus",
	"Voodoo",
	"Pony",
	"Mule",
	"Cheetah",
	"Ambulance",
	"Leviathan",
	"Moonbeam",
	"Esperanto",
	"Taxi",
	"Washington",
	"Bobcat",
	"Whoopee",
	"BF Injection",
	"Hunter",
	"Premier",
	"Enforcer",
	"Securicar",
	"Banshee",
	"Predator",
	"Bus",
	"Rhino",
	"Barracks",
	"Hotknife",
	"Trailer",
	"Previon",
	"Coach",
	"Cabbie",
	"Stallion",
	"Rumpo",
	"RC Bandit",
	"Romero",
	"Packer",
	"Monster",
	"Admiral",
	"Squalo",
	"Seasparrow",
	"Pizzaboy",
	"Tram",
	"Trailer",
	"Turismo",
	"Speeder",
	"Reefer",
	"Tropic",
	"Flatbed",
	"Yankee",
	"Caddy",
	"Solair",
	"Berkley's RC Van",
	"Skimmer",
	"PCJ-600",
	"Faggio",
	"Freeway",
	"RC Baron",
	"RC Raider",
	"Glendale",
	"Oceanic",
	"Sanchez",
	"Sparrow",
	"Patriot",
	"ATV",
	"Coastguard",
	"Dinghy",
	"Hermes",
	"Sabre",
	"Rustler",
	"ZR-350",
	"Walton",
	"Regina",
	"Comet",
	"BMX",
	"Burrito",
	"Camper",
	"Marquis",
	"Baggage",
	"Dozer",
	"Maverick",
	"News Chopper",
	"Rancher",
	"FBI Rancher",
	"Virgo",
	"Greenwood",
	"Jetmax",
	"Hotring",
	"Sandking",
	"Blista Compact",
	"Police Maverick",
	"Boxvillde",
	"Benson",
	"Mesa",
	"RC Goblin",
	"Hotring Racer A",
	"Hotring Racer B",
	"Bloodring Banger",
	"Rancher",
	"Super GT",
	"Elegant",
	"Journey",
	"Bike",
	"Mountain Bike",
	"Beagle",
	"Cropduster",
	"Stunt",
	"Tanker",
	"Roadtrain",
	"Nebula",
	"Majestic",
	"Buccaneer",
	"Shamal",
	"Hydra",
	"FCR-900",
	"NRG-500",
	"HPV1000",
	"Cement Truck",
	"Tow Truck",
	"Fortune",
	"Cadrona",
	"FBI Truck",
	"Willard",
	"Forklift",
	"Tractor",
	"Combine",
	"Feltzer",
	"Remington",
	"Slamvan",
	"Blade",
	"Freight",
	"Streak",
	"Vortex",
	"Vincent",
	"Bullet",
	"Clover",
	"Sadler",
	"Firetruck",
	"Hustler",
	"Intruder",
	"Primo",
	"Cargobob",
	"Tampa",
	"Sunrise",
	"Merit",
	"Utility",
	"Nevada",
	"Jeep",
	"Windsor",
	"Monster",
	"Monster",
	"Uranus",
	"Jester",
	"Sultan",
	"Stratum",
	"Elegy",
	"Raindance",
	"RC Tiger",
	"Flash",
	"Tahoma",
	"Savanna",
	"Bandito",
	"Freight Flat",
	"Streak Carriage",
	"Kart",
	"Mower",
	"Dune",
	"Sweeper",
	"Broadway",
	"Tornado",
	"AT-400",
	"DFT-30",
	"Huntley",
	"Stafford",
	"BF-400",
	"News Van",
	"Tug",
	"Trailer",
	"Emperor",
	"Wayfarer",
	"Euros",
	"Hotdog",
	"Club",
	"Freight Box",
	"Trailer",
	"Andromada",
	"Dodo",
	"RC Cam",
	"Launch",
	"Police Car LSPD",
	"Police Car SFPD",
	"Police Car LVPD",
	"Police Ranger",
	"Picador",
	"S.W.A.T",
	"Alpha",
	"Phoenix",
	"Glendale",
	"Sadler",
	"Luggage",
	"Luggage",
	"Stairs",
	"Boxville",
	"Tiller",
	"Utility Trailer"
};

enum bInfo
{
    bOwned,
	bOwner[64],
	bMessage[128],
	bExtortion[MAX_PLAYER_NAME],
	Float:bEntranceX,
	Float:bEntranceY,
	Float:bEntranceZ,
	Float:bExitX,
	Float:bExitY,
	Float:bExitZ,
	bLevelNeeded,
	bBuyPrice,
	bEntranceCost,
	bTill,
	bLocked,
	bInterior,
	bProducts,
	bMaxProducts,
	bPriceProd,
};
new BizzInfo[51][bInfo]; // Ne pas oublier de modifier la ligne new Text3D:businesstext si vous modifiez la valeur ici !

enum sbInfo
{
	sbOwned,
	sbOwner[64],
	sbMessage[128],
	sbExtortion[MAX_PLAYER_NAME],
	Float:sbEntranceX,
	Float:sbEntranceY,
	Float:sbEntranceZ,
	sbLevelNeeded,
	sbBuyPrice,
	sbEntranceCost,
	sbTill,
	sbLocked,
	sbInterior,
	sbProducts,
	sbMaxProducts,
	sbPriceProd,
};
new SBizzInfo[12][sbInfo]; // Ne pas oublier de modifier la ligne new Text3D:sbusinesstext si vous modifiez la valeur ici !

enum pHaul
{
	pCapasity,
	pLoad,
};

new PlayerHaul[214][pHaul];

enum pCrime
{
	pBplayer[32],
	pAccusing[32],
	pAccusedof[32],
	pVictim[32],
};
new PlayerCrime[MAX_PLAYERS][pCrime];

enum mInfo
{
    mTitle[128],
    mText1[128],
    mText2[128],
    mText3[128],
    mText4[128],
    mText5[128],
    mText6[128],
    mText7[128],
    mText8[128],
    mText9[128],
    mText10[128],
    mText11[128],
    mText12[128],
    mText13[128],
    mText14[128],
    mText15[128],
    mText16[128],
    mText17[128],
    mText18[128],
    mGText1[128],
    mGText2[128],
    mGText3[128],
    mGText4[128],
    mGText5[128],
    mGText6[128],
	Float:mCP1[3],
	Float:mCP2[3],
	Float:mCP3[3],
	Float:mCP4[3],
	Float:mCP5[3],
	Float:mCP6[3],
	mReward,
	mToggle,
};
new MissionInfo[mInfo];

enum kInfo
{
    kTitle[128],
    kMaker[MAX_PLAYER_NAME],
    kText1[128],
    kText2[128],
    kText3[128],
    kText4[128],
    kText5[128],
    kText6[128],
    kText7[128],
    kText8[128],
    kText9[128],
    kText10[128],
    kText11[128],
    kText12[128],
    kText13[128],
    kText14[128],
    kText15[128],
    kText16[128],
    kText17[128],
    kText18[128],
    kGText1[128],
    kGText2[128],
    kGText3[128],
    kGText4[128],
    kGText5[128],
    kGText6[128],
	Float:kCP1[3],
	Float:kCP2[3],
	Float:kCP3[3],
	Float:kCP4[3],
	Float:kCP5[3],
	Float:kCP6[3],
	kNumber,
	kReward,
	kToggle,
};
new PlayMission[kInfo];

enum iInfo
{
	iAdmin[128],
	iMOTD[128],
	iPassword[128],
	iNeedPass,
	iLock,
	iPlayers,
};
new IRCInfo[10][iInfo];

enum dDrug
{
	DrugAmmount,
};
new drugsys[dDrug];

enum dMats
{
	MatsAmmount,
};
new matssys[dMats];

enum hqLocks
{
	surlock,
	luclock,
	guclock,
	cuclock,
	stlock,
	iolock,
	yolock,
};
new hqlock[hqLocks];

enum coffrehqs
{
	cosacoffre,
};
new coffrehq[coffrehqs];

/*new RandCars[20][1] = {
{496},{542},{507},{585},
{466},{492},{579},{559},
{400},{551},{516},{475},
{561},{550},{566},{558},
{562},{562},{603},{560}
};


new RandLCars[1][1] = {
{431}// coach
};
*/

new GunPrice[30][1] = {
{500}, //parachute
{400}, //golfclub
{300}, //nightstick
{200}, //knife
{700}, //baseballbat
{300}, //shovel
{100}, //poolcue
{400}, //purpledildo
{780}, //whitedildo
{560}, //longwhitedildo
{530}, //whitedildo2
{200}, //flowers
{600}, //cane
{500}, //sdpistol
{1000}, //colt45
{3000}, //deagle
{2000}, //Tec9
{3000}, //uzi
{2500}, //mp5
{3000}, //shotgun
{6000}, //spas12
{4000}, //sawnoff
{5000}, //ak47
{5000}, //m4
{1000}, //rifle
{25}, //pistolammo
{40}, //shotgunammo
{25}, //smgammo
{40}, //assaultammo
{50} //rifle
};

new JoinPed[69][1] = {
{280},//POLICE_FORCE
{281},
{282},
{283},
{284},
{285},
{288},
{71},
{166},
{295},
{148},
{286},//FBI/ATF
{164},
{163},
{287},//NATIONAL_GUARD
{285},
{70},//FIRE/AMBULANCE
{274},
{275},
{276},
{277},
{278},
{279},
{292},//SURENOS
{114},
{115},
{175},
{174},
{116},
{173},
{176},
{124},//LUCIANO
{125},
{126},
{111},
{123},
{186},
{228},
{249},//HITMANS
{68},
{72},
{121},
{295},
{148},//NEWS_REPORTERS
{188},
{187},
{255},//TAXI_CAB_COMPANY
{253},
{153},//DRIVING/FLYING_SCHOOL
{156},//DRIVING/FLYING_SCHOOL
{206},//DRIVING/FLYING_SCHOOL
{221},//DRIVING/FLYING_SCHOOL
{19},//nortenos
{22},
{22},
{144},
{170},
{180},
{91},//Chornaya Bratva
{55},
{112},
{127},
{43},
{46},
{143},//Top Shottas
{156},
{176},
{177},
{184}
};

new CivMalePeds[55][1] = {
// Male civilians down here (by LordMan)
{2},
{47},
{48},
{50},
{58},
{60},
{68},
{72},
{73},
{80},
{81},
{82},
{83},
{95},
{100},
{101},
{102},
{103},
{104},
{108},
{109},
{110},
{121},
{122},
{123},
{135},
{142},
{143},
{144},
{146},
{153},
{154},
{155},
{156},
{158},
{159},
{160},
{161},
{170},
{179},
{180},
{189},
{202},
{203},
{204},
{258},
{259},
{260},
{293},
{295},
{296},
{297},
{61},
{255},
{253}
};

new CivFemalePeds[33][1] = {
// Female civilians down here (by LordMan)
{55},
{56},
{63},
{69},
{76},
{85},
{91},
{93},
{131},
{141},
{148},
{150},
{151},
{152},
{157},
{169},
{172},
{190},
{192},
{193},
{194},
{195},
{198},
{201},
{214},
{216},
{219},
{225},
{233},
{237},
{251},
{263},
{298}
};


new Peds[200][1] = {
{7},
/*{288},//TEAM_ADMIN
{286},{287},{228},{113},{120},{147},{294},{227},{61},{171},*/
{247},//CIVILIANS DOWN HERE
{248},{100},{256},{263},{262},{261},{260},{259},{258},{257},{256},{255},
{253},{252},{251},{246},{245},{244},{243},{242},{241},{239},
{238},{237},{236},{235},{234},{233},{232},{231},{230},{229},
{226},{225},{224},{223},{222},{221},{220},{219},{218},
{217},{216},{215},{214},{213},{212},{211},{210},{209},
{207},{206},{205},{204},{203},{202},{201},{200},{199},{198},{197},{196},
{195},{194},{193},{192},{191},{190},{189},{185},{184},{183},
{182},{181},{180},{179},{178},{176},{172},{170},{168},{167},{162},
{161},{160},{159},{158},{157},{156},{155},{154},{153},{152},{151},
{146},{145},{144},{143},{142},{141},{140},{139},{138},{137},{136},{135},
{134},{133},{132},{131},{130},{129},{128},{254},{99},{97},{96},{95},{94},
{92},{90},{89},{88},{87},{85},{84},{83},{82},{81},{80},{79},{78},{77},{76},
{75},{73},{72},{69},{68},{67},{66},{64},{63},{62},{58},{57},{56},{55},
{54},{53},{52},{51},{50},{49},{45},{44},{43},{41},{39},{38},{37},{36},{35},
{34},{33},{32},{31},{30},{29},{28},{27},{26},{25},{24},{23},{22},{21},{20},
{19},{18},{17},{16},{15},{14},{13},{12},{11},{10},{1},{2},
{290},//ROSE
{291},//PAUL
{293},//OGLOC
{187},
{296},//IZZY
{297},//MADDOGG
{298},//CAT
{299}//ZERO
};

new VehicleNames[212][] = {
   "Landstalker",  "Bravura",  "Buffalo", "Linerunner", "Perennial", "Sentinel",
   "Dumper",  "Firetruck" ,  "Trashmaster" ,  "Stretch",  "Manana",  "Infernus",
   "Voodoo", "Pony",  "Mule", "Cheetah", "Ambulance",  "Leviathan",  "Moonbeam",
   "Esperanto", "Taxi",  "Washington",  "Bobcat",  "Mr Whoopee", "BF Injection",
   "Hunter", "Premier",  "Enforcer",  "Securicar", "Banshee", "Predator", "Bus",
   "Rhino",  "Barracks",  "Hotknife",  "Trailer",  "Previon", "Coach", "Cabbie",
   "Stallion", "Rumpo", "RC Bandit",  "Romero", "Packer", "Monster",  "Admiral",
   "Squalo", "Seasparrow", "Pizzaboy", "Tram", "Trailer",  "Turismo", "Speeder",
   "Reefer", "Tropic", "Flatbed","Yankee", "Caddy", "Solair","Berkley's RC Van",
   "Skimmer", "PCJ-600", "Faggio", "Freeway", "RC Baron","RC Raider","Glendale",
   "Oceanic", "Sanchez", "Sparrow",  "Patriot", "Quad",  "Coastguard", "Dinghy",
   "Hermes", "Sabre", "Rustler", "ZR-350", "Walton",  "Regina",  "Comet", "BMX",
   "Burrito", "Camper", "Marquis", "Baggage", "Dozer","Maverick","News Chopper",
   "Rancher", "FBI Rancher", "Virgo", "Greenwood","Jetmax","Hotring","Sandking",
   "Blista Compact", "Police Maverick", "Boxville", "Benson","Mesa","RC Goblin",
   "Hotring Racer", "Hotring Racer", "Bloodring Banger", "Rancher",  "Super GT",
   "Elegant", "Journey", "Bike", "Mountain Bike", "Beagle", "Cropdust", "Stunt",
   "Tanker", "RoadTrain", "Nebula", "Majestic", "Buccaneer", "Shamal",  "Hydra",
   "FCR-900","NRG-500","HPV1000","Cement Truck","Tow Truck","Fortune","Cadrona",
   "FBI Truck", "Willard", "Forklift","Tractor","Combine","Feltzer","Remington",
   "Slamvan", "Blade", "Freight", "Streak","Vortex","Vincent","Bullet","Clover",
   "Sadler",  "Firetruck", "Hustler", "Intruder", "Primo", "Cargobob",  "Tampa",
   "Sunrise", "Merit",  "Utility Truck",  "Nevada", "Yosemite", "Windsor",  "Monster",
   "Monster","Uranus","Jester","Sultan","Stratum","Elegy","Raindance","RCTiger",
   "Flash","Tahoma","Savanna", "Bandito", "Freight", "Trailer", "Kart", "Mower",
   "Dune", "Sweeper", "Broadway", "Tornado", "AT-400",  "DFT-30", "Huntley",
   "Stafford", "BF-400", "Newsvan","Tug","Trailer","Emperor","Wayfarer","Euros",
   "Hotdog", "Club", "Trailer", "Trailer","Andromada","Dodo","RC Cam", "Launch",
   "Police Car (LSPD)", "Police Car (SFPD)","Police Car (LVPD)","Police Ranger",
   "Picador",   "S.W.A.T. Van",  "Alpha",   "Phoenix",   "Glendale",   "Sadler",
   "Luggage Trailer","Luggage Trailer","Stair Trailer", "Boxville", "Farm Plow",
   "Utility Trailer"
};

//------------------------------------------------------------------------------------------------------

main()
{
	print("|==============================================================================| ");
	print("                        .:: [FR] Une 2eme Chance [RP] ::. ");
	print("                                 FullDrive (Foo)");
    print(" ");
	print(" ");
	print("    **********  ************    *******                **********  *******");
	print("    **********  ************   *********               **********  ********");
	print("    **      **       **       **       **              **      **  ***   **");
	print("    **               **       **       **   ********   **      **  ***   **");
	print("    **   *****       **       **       **   ********   **********  ********");
	print("    **   *****       **      ** ******* **             **********  *******");
	print("    **      **       **      ** ******* **             **    **    *");
	print("    **********       **     **           **            **     **   *");
	print("    **********       **     **           **            **      **  *");
	print(" ");
	print(" ");
	print("                               -------------------");
	print("                              |   GTA Roleplay    |");
	print("                              |  Une 2eme Chance  |");
	print("                               -------------------");
	print("|==============================================================================| ");
}
//---------------------------------------------------------------------------------------------------------
public SearchingHit(playerid)
{
	new string[256];
	new giveplayer[MAX_PLAYER_NAME];
	new searchhit = 0;
	for(new i=0; i<MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(searchhit == 0)
		    {
			    if(PlayerInfo[i][pHeadValue] > 0 && GotHit[i] == 0 && PlayerInfo[i][pMember] != 8)
			    {
			        GetPlayerName(i, giveplayer, sizeof(giveplayer));
			        searchhit = 1;
			        hitfound = 1;
			        hitid = i;
			        for(new k=0; k<MAX_PLAYERS; k++)
					{
						if(IsPlayerConnected(k))
						{
				        	if(PlayerInfo[k][pMember] == 8 || PlayerInfo[k][pLeader] == 8)
				        	{
	               				SendClientMessage(k, COLOR_WHITE, "|__________________ Agence Hitman News __________________|");
				                SendClientMessage(k, COLOR_DBLUE, "** Nouveau Message: Un contract est disponible. **");
				                format(string, sizeof(string), "Personne: %s   ID: %d   Valeur: $%d", giveplayer, i, PlayerInfo[i][pHeadValue]);
								SendClientMessage(k, COLOR_DBLUE, string);
								SendClientMessage(k, COLOR_YELLOW, "Utiliser donnercontrat, pour donner le contrat a un Hitman.");
								SendClientMessage(k, COLOR_WHITE, "|________________________________________________________|");
	      					}
					    }
					}
					return 0;
			    }
			}
		}
	}
	if(searchhit == 0)
	{
	    SendClientMessage(playerid, COLOR_GREY, "   Pas de contrat disponible !");
	}
	return 0;
}

public ExtortionBiz(bizid, money)
{
    new string[256];
    format(string, sizeof(string), "Personne");
    if(strcmp(BizzInfo[bizid][bExtortion],string, true ) == 0 )
	{
	    return 0;
	}
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        new name[MAX_PLAYER_NAME];
			new wstring[MAX_PLAYER_NAME];
			GetPlayerName(i, name, sizeof(name));
			format(string, sizeof(string), "%s", name);
			strmid(wstring, string, 0, strlen(string), 255);
			if(strcmp(BizzInfo[bizid][bExtortion] ,wstring, true ) == 0 )
			{
			    new value = money / 100;
			    value = value * 10;
			    SafeGivePlayerMoney(i, value);
			    BizzInfo[bizid][bTill] -= value;
			}
		}
	}
	return 1;
}

public ExtortionSBiz(bizid, money)
{
    new string[256];
    format(string, sizeof(string), "Personne");
    if(strcmp(SBizzInfo[bizid][sbExtortion],string, true ) == 0 )
	{
	    return 0;
	}
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        new name[MAX_PLAYER_NAME];
			new wstring[MAX_PLAYER_NAME];
			GetPlayerName(i, name, sizeof(name));
			format(string, sizeof(string), "%s", name);
			strmid(wstring, string, 0, strlen(string), 255);
			if(strcmp(SBizzInfo[bizid][sbExtortion] ,wstring, true ) == 0 )
			{
			    new value = money / 100;
			    value = value * 10;
			    SafeGivePlayerMoney(i, value);
			    SBizzInfo[bizid][sbTill] -= value;
			}
		}
	}
	return 1;
}


public PreparePaintball()
{
    for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        if(PlayerPaintballing[i] != 0)
	        {
	            SendClientMessage(i, COLOR_YELLOW, "Le match de Painball va débuter dans 20 secondes. Bonne chance a tous !");
	        }
		}
	}
 	SetTimer("StartPaintball", 20000, 0);
	return 1;
}

public StartPaintball()
{
	PaintballRound = 1;
	StartingPaintballRound = 0;
	PaintballWinner = 999;
	PaintballWinnerKills = 0;
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        if(PlayerPaintballing[i] != 0)
	        {
	            SafeResetPlayerWeapons(i);
	            SafeGivePlayerWeapon(i, 29, 999);
	            TogglePlayerControllable(i, 1);
	            SendClientMessage(i, COLOR_YELLOW, "Le macth de Painball a démarré, encore 4 minutes a jouer.");
	            PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
	        }
	    }
	}
	SetTimer("PaintballEnded", 240000, 0);
	return 1;
}

public PaintballEnded()
{
	new string[256];
	new name[MAX_PLAYER_NAME];
    for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        if(PlayerPaintballing[i] != 0)
	        {
	            if(IsPlayerConnected(PaintballWinner))
	            {
	                GetPlayerName(PaintballWinner, name, sizeof(name));
	                format(string,sizeof(string), "* %s à gagné le match avec %d meurtres *",name,PaintballWinnerKills);
	                SendClientMessage(i, COLOR_WHITE, string);
	            }
	            SafeResetPlayerWeapons(i);
	            PlayerPaintballing[i] = 0;
	            SetPlayerPos(i, SBizzInfo[10][sbEntranceX],SBizzInfo[10][sbEntranceY],SBizzInfo[10][sbEntranceZ]);
	        }
		}
	}
	AnnouncedPaintballRound = 0;
    PaintballRound = 0;
	return 1;
}

public scoreupdate(playerid)
{
	new plyscore;
	plyscore = PlayerInfo[playerid][pLevel];
	SetPlayerScore(playerid, plyscore);
}


public PrepareKarting()
{
    for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        if(PlayerKarting[i] != 0 && PlayerInKart[i] != 0)
	        {
	            CP[i] = 9;
				SetPlayerCheckpoint(i,2308.3540,-2354.0039,12.6842,8.0);
				SendClientMessage(i, COLOR_YELLOW, "Une course de Kart va démarrer dans 20 secondes, allez a la ligne de départ.");
	        }
		}
	}
	SetTimer("StartKarting", 20000, 0);
	return 1;
}

public StartKarting()
{
	KartingRound = 1;
	StartingKartRound = 0;
	EndingKartRound = 0;
	FirstKartWinner = 999;
	SecondKartWinner = 999;
	ThirdKartWinner = 999;
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        if(PlayerKarting[i] != 0 && PlayerInKart[i] != 0)
	        {
	            CP[i] = 10;
	            SendClientMessage(i, COLOR_YELLOW, "Feux vert, go go go !");
	            PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
	            SetPlayerCheckpoint(i,2308.3540,-2354.0039,12.6842,8.0);
	        }
	    }
	}
	SetTimer("KartingEnded", 240000, 0);
	return 1;
}

public KartingEnded()
{
    for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        if(PlayerKarting[i] != 0 && PlayerInKart[i] != 0)
	        {
	            CP[i] = 0;
	            DisablePlayerCheckpoint(i);
	        }
		}
	}
	AnnouncedKartRound = 0;
    KartingRound = 0;
	return 1;
}

public DollahScoreUpdate()
{
	new LevScore;
	for(new i=0; i<MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
   			LevScore = PlayerInfo[i][pLevel];
			SetPlayerScore(i, LevScore);
		}
	}
	return 1;
}

LoopingAnim(playerid,animlib[],animname[], Float:Speed, looping, lockx, locky, lockz, lp)
{
    gPlayerUsingLoopingAnim[playerid] = 1;
    ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp);
    //TextDrawShowForPlayer(playerid,txtAnimHelper);
}

public Encrypt(string[])
{
	for(new x=0; x < strlen(string); x++)
	  {
		  string[x] += (3^x) * (x % 15);
		  if(string[x] > (0xff))
		  {
			  string[x] -= 256;
		  }
	  }
	return 1;
}

stock NomJoueurEx(playerid, const name[]) // Exemple d'utilisation : [...] PlayerInfo[playerid][pLeader] == 7 || NomJoueurEx(playerid,"Anthony_Toto"))
{
	if(IsPlayerConnected(playerid))
	{
		new PName[MAX_PLAYER_NAME];
		GetPlayerName(playerid, PName, sizeof(PName));
		if(strcmp(PName, name, true)==0)
		{
		    return 1;
		}
		else
		{
			return 0;
		}
	}
	else
	{
	    return 0;
	}
}

stock ReturnVehicleModelID(string[])
{

	if(IsNumeric(string))
	{
		new id = strval(string);

		if(id >= 400 && id <= 611)
		{
		    return id;
		}
	}

	for(new i = 0;i < sizeof(VehicleNames);i++)
    {
        if(strfind(VehicleNames[i],string,true) != -1)
        {
            return i + 400;
        }
    }

    return 0;
}

stock Noms(playerid)
{
	new name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, sizeof(name));
	return name;
}

stock GivePlayerAdminGun(playerid, weaponid)
{
    switch (weaponid)
    {
        case 1: { aGun[playerid][0] = 1; GivePlayerWeapon(playerid, 1, 1); }
        case 2..9: { aGun[playerid][1] = weaponid; GivePlayerWeapon(playerid, weaponid, 1); }
        case 10..15: { aGun[playerid][10] = weaponid; GivePlayerWeapon(playerid, weaponid, 1); }
        case 16..18, 39: { aGun[playerid][8] = weaponid; GivePlayerWeapon(playerid, weaponid, 2); }
        case 21: { aGun[playerid][12] = 21; SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USEJETPACK); }
        case 22..24: { aGun[playerid][2] = weaponid; GivePlayerWeapon(playerid, weaponid, 99999); }
        case 25..27: { aGun[playerid][3] = weaponid; GivePlayerWeapon(playerid, weaponid, 99999); }
        case 28..29, 32: { aGun[playerid][4] = weaponid; GivePlayerWeapon(playerid, weaponid, 99999); }
        case 30, 31: { aGun[playerid][5] = weaponid; GivePlayerWeapon(playerid, weaponid, 99999); }
        case 33, 34: { aGun[playerid][6] = weaponid; GivePlayerWeapon(playerid, weaponid, 99999); }
        case 35..38: { aGun[playerid][7] = weaponid; GivePlayerWeapon(playerid, weaponid, 99999); }
        case 40: { aGun[playerid][12] = 40; GivePlayerWeapon(playerid, 40, 1); }
        case 41..43: { aGun[playerid][9] = weaponid; GivePlayerWeapon(playerid, weaponid, 99999); }
        case 44..46: { aGun[playerid][11] = weaponid; GivePlayerWeapon(playerid, weaponid, 99999); }
    }
	return 1;
}

GiveNameSpace(str[])
{
    new strl;
    strl=strlen(str);
    while(strl--) {
    if(str[strl]=='_')	str[strl]=' ';
    }
    return 0;
}

stock SetPlayerFacingPlayer(playerid, giveplayerid)
{
	new Float:angle;
	new Float:misc = 5.0;
	new Float:x, Float:y, Float:z;
	new Float:ix, Float:iy, Float:iz;
	GetPlayerPos(giveplayerid, x, y, z);
	GetPlayerPos(playerid, ix, iy, iz);
	angle = 180.0-atan2(ix-x,iy-y);
	angle += misc;
	misc *= -1;
	SetPlayerFacingAngle(playerid, angle+misc);
}

stock GetPlayerNameEx(playerid)
{
    new string[24];
    GetPlayerName(playerid,string,24);
    new str[24];
    strmid(str,string,0,strlen(string),24);
    for(new i = 0; i < MAX_PLAYER_NAME; i++)
    {
        if (str[i] == '_') str[i] = ' ';
    }
    return str;
}

stock CrashPlayer(playerid)
{
	for(new i=0;i<=1000;i++) CreatePlayerObject(playerid,4108,0,0,0,0,0,0);
	return 1;
}

stock right(source[], len)
{
	new retval[MAX_STRING], srclen;
	srclen = strlen(source);
	strmid(retval, source, srclen - len, srclen, MAX_STRING);
	return retval;
}

stock sscanf(string[], format[], {Float,_}:...)
{
	new
		formatPos = 0,
		stringPos = 0,
		paramPos = 2,
		paramCount = numargs();
	while (paramPos < paramCount && string[stringPos])
	{
		switch (format[formatPos++])
		{
			case '\0':
			{
				return 0;
			}
			case 'i', 'd':
			{
				new
					neg = 1,
					num = 0,
					ch = string[stringPos];
				if (ch == '-')
				{
					neg = -1;
					ch = string[++stringPos];
				}
				do
				{
					stringPos++;
					if (ch >= '0' && ch <= '9')
					{
						num = (num * 10) + (ch - '0');
					}
					else
					{
						return 1;
					}
				}
				while ((ch = string[stringPos]) && ch != ' ');
				setarg(paramPos, 0, num * neg);
			}
			case 'h', 'x':
			{
				new
					ch,
					num = 0;
				while ((ch = string[stringPos++]))
				{
					switch (ch)
					{
						case 'x', 'X':
						{
							num = 0;
							continue;
						}
						case '0' .. '9':
						{
							num = (num << 4) | (ch - '0');
						}
						case 'a' .. 'f':
						{
							num = (num << 4) | (ch - ('a' - 10));
						}
						case 'A' .. 'F':
						{
							num = (num << 4) | (ch - ('A' - 10));
						}
						case ' ':
						{
							break;
						}
						default:
						{
							return 1;
						}
					}
				}
				setarg(paramPos, 0, num);
			}
			case 'c':
			{
				setarg(paramPos, 0, string[stringPos++]);
			}
			case 'f':
			{
				new tmp[25];
				strmid(tmp, string, stringPos, stringPos+sizeof(tmp)-2);
				setarg(paramPos, 0, _:floatstr(tmp));
			}
			case 's', 'z':
			{
				new
					i = 0,
					ch;
				if (format[formatPos])
				{
					while ((ch = string[stringPos++]) && ch != ' ')
					{
						setarg(paramPos, i++, ch);
					}
					if (!i) return 1;
				}
				else
				{
					while ((ch = string[stringPos++]))
					{
						setarg(paramPos, i++, ch);
					}
				}
				stringPos--;
				setarg(paramPos, i, '\0');
			}
			default:
			{
				continue;
			}
		}
		while (string[stringPos] && string[stringPos] != ' ')
		{
			stringPos++;
		}
		while (string[stringPos] == ' ')
		{
			stringPos++;
		}
		paramPos++;
	}
	while (format[formatPos] == 'z') formatPos++;
	return format[formatPos];
}

public Spectator()
{
	new string[256];
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(KickPlayer[i]==1) { Kick(i); }
			else if(KickPlayer[i]==2) { Ban(i); }
			//if(GetPlayerPing(i) >= 500 && PlayerInfo[i][pAdmin] < 1) { Kick(i); }
			if(Spectate[i] < 253 && Spectate[i] != 255)
			{
				SetPlayerColor(i,COLOR_SPEC);
				TogglePlayerControllable(i, 0);
				new targetid = Spectate[i];
				if(IsPlayerConnected(targetid))
				{
				    TogglePlayerSpectating(i, 1);
				    if(PlayerInfo[i][pAdmin] >= 1)
				    {
				        new Float:health;
					    new name[MAX_PLAYER_NAME];
					    GetPlayerName(targetid, name, sizeof(name));
					    GetPlayerHealth(targetid, health);
					    format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~y~%s(ID:%d)~n~~y~vie:%.1f",name,targetid,health);
					    GameTextForPlayer(i, string, 2500, 3);
				    }
				    if(IsPlayerInAnyVehicle(targetid))
					{
					    new carid = GetPlayerVehicleID(targetid);
					    PlayerSpectateVehicle(i, carid);
					}
					else
					{
					    PlayerSpectatePlayer(i, targetid);
					}
					if(GetPlayerInterior(targetid) == 0)
					{
						SetPlayerInterior(i,0);
					}
					else if(GetPlayerInterior(targetid) > 0)
					{
						SetPlayerInterior(i,GetPlayerInterior(targetid));
					}
				}//Targetid connected
			}
			if(Spectate[i] == 253)
			{
				TogglePlayerControllable(i, 1);
				TogglePlayerSpectating(i, 0);
				SetPlayerInterior(i,Unspec[i][sPint]);
				PlayerInfo[i][pInt] = Unspec[i][sPint];
				PlayerInfo[i][pLocal] = Unspec[i][sLocal];
				Unspec[i][sLocal] = 255;
				SetSpawnInfo(i, PlayerInfo[i][pTeam], PlayerInfo[i][pModel], Unspec[i][sPx],  Unspec[i][sPy], Unspec[i][sPz]-1.0, 1.0, -1, -1, -1, -1, -1, -1);
				gTeam[i] = PlayerInfo[i][pTeam];
				SetPlayerToTeamColor(i);
				MedicBill[i] = 0;
				if(PlayerInfo[i][pDonateRank] > 0)
		        {
		            SetSpawnInfo(i, PlayerInfo[i][pTeam], PlayerInfo[i][pModel], Unspec[i][Coords][0], Unspec[i][Coords][1], Unspec[i][Coords][2], 10.0, -1, -1, -1, -1, -1, -1);
					SpawnPlayer(i);
					SetCameraBehindPlayer(i);
		        }
		        else
		        {
					SpawnPlayer(i);
				}
				Spectate[i] = 255;
			}
			if(Spectate[i] == 254)
			{
				TogglePlayerControllable(i, 1);
				SetPlayerInterior(i,Unspec[i][sPint]);
				PlayerInfo[i][pInt] = Unspec[i][sPint];
				PlayerInfo[i][pLocal] = Unspec[i][sLocal];
				SetPlayerPos(i, Unspec[i][sPx],  Unspec[i][sPy], Unspec[i][sPz]);
				Spectate[i] = 255;
			}
			if(Spectate[i] == 256)
			{
				SetPlayerToTeamColor(i);
				Spectate[i] = 255;
			}
			if(Spectate[i] == 257)
			{
				Spectate[i] = 254;
			}
		}
	}
}

//------------------------------------------------------------------------------------------------------

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	if (GetVehicleModel(vehicleid) == 519 && ispassenger)
 	{
	    if (!ShamalExists(vehicleid))
	    {
	           CreateShamalInt(vehicleid, float(randomEx(3000)), float(randomEx(3000)), float(random(100)+800));
	    }
        SetPlayerPosInShamal(playerid, vehicleid);
        InShamal[playerid] = vehicleid;
 	}
 	if(IsAnOwnableCar(vehicleid) && CarInfo[vehicleid][cLock] == 1 && CarInfo[vehicleid][cOwned] == 1)
	{
		if(PlayerInfo[playerid][pAdmin] >= 1337 && AdminDuty[playerid] == 1) { }
		else
		{
			new Float:cx, Float:cy, Float:cz;
  			GetPlayerPos(playerid, cx, cy, cz);
    		SetPlayerPos(playerid, cx, cy, cz);
		}
	}
	if(gTeam[playerid] >= 1||gTeam[playerid] >= 3||gTeam[playerid] >= 4)
	{
		if (IsACopCar(vehicleid) && !ispassenger)
		{
			if(PlayerInfo[playerid][pLeader]==1||PlayerInfo[playerid][pLeader]==2||PlayerInfo[playerid][pLeader]==3||PlayerInfo[playerid][pMember]==1||PlayerInfo[playerid][pMember]==2||PlayerInfo[playerid][pMember]==3) {}
		    else {
				//WantedPoints[playerid]+=2;
				//SetPlayerCriminal(playerid,255, "Stealing A Police Vehicle");
				new Float:cx, Float:cy, Float:cz;
				GetPlayerPos(playerid, cx, cy, cz);
				SetPlayerPos(playerid, cx,  cy, cz);
			}
		}
		if (IsAnArmyCar(vehicleid) && !ispassenger)
		{
		    if(PlayerInfo[playerid][pLeader]==1||PlayerInfo[playerid][pLeader]==2||PlayerInfo[playerid][pLeader]==3||PlayerInfo[playerid][pMember]==1||PlayerInfo[playerid][pMember]==2||PlayerInfo[playerid][pMember]==3) {}
		    else {
				//WantedPoints[playerid]+=2;
				//SetPlayerCriminal(playerid,255, "Stealing A Police Vehicle");
				new Float:cx, Float:cy, Float:cz;
				GetPlayerPos(playerid, cx, cy, cz);
				SetPlayerPos(playerid, cx,  cy, cz);
			}
		}
		if (IsAnAmbulance(vehicleid) && !ispassenger)
		{
		    if(PlayerInfo[playerid][pMember]==4||PlayerInfo[playerid][pLeader]==4) { }
		    else { WantedPoints[playerid]+=0;
		    SendClientMessage(playerid, COLOR_LIGHT_BLUE, "Tu n'as pas les clefs de ce véhicule");
			SetPlayerCriminal(playerid,255, "A volé une Ambulance.");}
		}
 		if (IsAnFiretruck(vehicleid) && !ispassenger)
		{
		    if(PlayerInfo[playerid][pMember]==4||PlayerInfo[playerid][pLeader]==4) { }
		    else { WantedPoints[playerid]+=0; SendClientMessage(playerid, COLOR_LIGHT_BLUE, "Tu n'as pas les clefs de ce véhicule"); SetPlayerCriminal(playerid,255, "A volé une un Camion Pompier."); }
		}
		if (IsATank(vehicleid) && !ispassenger)
		{
			if(PlayerInfo[playerid][pLeader]==1||PlayerInfo[playerid][pLeader]==3||PlayerInfo[playerid][pMember]==3) {}
		    else { WantedPoints[playerid]+=0; SendClientMessage(playerid, COLOR_LIGHT_BLUE, "Tu n'as pas les clefs de ce véhicule"); SetPlayerCriminal(playerid,255, "A volé un Tank"); SendClientMessage(playerid, COLOR_GREY,"Vous ne savez pas comment piloter ce véhicule."); }
		}
		if(IsAnOwnableCar(vehicleid) && CarInfo[vehicleid][cLock] == 1 && CarInfo[vehicleid][cOwned] == 1)
		{
		    if(PlayerInfo[playerid][pAdmin] >= 1339 && AdminDuty[playerid] == 1) { }
		    else if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)
		    {
			}
		    else
		    {
		    	new Float:cx, Float:cy, Float:cz;
		    	GetPlayerPos(playerid, cx, cy, cz);
		    	SetPlayerPos(playerid, cx, cy, cz);
			}
		}
	}
	return 1;
}

public IsAnInstructor(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = PlayerInfo[playerid][pLeader];
	    new member = PlayerInfo[playerid][pMember];
	    if(member==11)
		{
		    return 1;
		}
		if(leader==11)
		{
		    return 1;
		}
	}
	return 0;
}

public IsAMember(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = PlayerInfo[playerid][pLeader];
	    new member = PlayerInfo[playerid][pMember];
	    if(member==5 || member==6 || member==8 || member==14 || member==15 || member==16)
		{
		    return 1;
		}
		if(leader==5 || leader==6 || leader==8 || leader==14 || leader==15 || leader==16)
		{
		    return 1;
		}
	}
	return 0;
}

public IsACop(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = PlayerInfo[playerid][pLeader];
	    new member = PlayerInfo[playerid][pMember];
	    if(member==1 || member==2 || member==3)
		{
		    return 1;
		}
		else if(leader==1 || leader==2 || leader==3)
		{
		    return 1;
		}
	}
	return 0;
}

public IsAPDMember(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = PlayerInfo[playerid][pLeader];
	    new member = PlayerInfo[playerid][pMember];
	    if(member==1)
		{
		    return 1;
		}
		else if(leader==1)
		{
		    return 1;
		}
	}
	return 0;
}

public IsAnOwnableCar(vehicleid)
{
	if(vehicleid >= carsonserver && vehicleid <= 1000) { return 1; }
	return 0;
}

public IsAtDealership(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(PlayerToPoint(25.0,playerid,2128.0864,-1135.3912,25.5855) || PlayerToPoint(50,playerid,537.3366,-1293.2140,17.2422) || PlayerToPoint(35,playerid,2521.5544,-1524.4504,23.8365) || PlayerToPoint(50,playerid,2155.0146,-1177.3333,23.8211) || PlayerToPoint(50,playerid,299.1723,-1518.6627,24.6007) || PlayerToPoint(50,playerid,1815.9460,-2434.3069,13.5590))
		{
			return 1;
		}
	}
	return 0;
}
public IsAtCarrental(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(PlayerToPoint(30.0,playerid,1696.5543,-1053.4685,23.9063))
		{
			return 1;
		}
	}
	return 0;
}

public IsAtClothShop(playerid)
{
    if(IsPlayerConnected(playerid))
	{
        if(PlayerToPoint(25.0,playerid,20.5627,-103.7291,1005.2578) || PlayerToPoint(25.0,playerid,203.9068,-41.0728,1001.8047))
		{//Binco & Suburban
		    return 1;
		}
		else if(PlayerToPoint(30.0,playerid,214.4470,-7.6471,1001.2109) || PlayerToPoint(50.0,playerid,161.3765,-83.8416,1001.8047))
		{//Zip & Victim
		    return 1;
  }
	}
	return 0;
}

public IsAtGasStation(playerid)
{
    if(IsPlayerConnected(playerid))
	{
		if(PlayerToPoint(6.0,playerid,1004.0070,-939.3102,42.1797) || PlayerToPoint(6.0,playerid,1944.3260,-1772.9254,13.3906))
		{//LS
		    return 1;
		}
		else if(PlayerToPoint(6.0,playerid,-90.5515,-1169.4578,2.4079) || PlayerToPoint(6.0,playerid,-1609.7958,-2718.2048,48.5391))
		{//LS
		    return 1;
		}
		else if(PlayerToPoint(6.0,playerid,-2029.4968,156.4366,28.9498) || PlayerToPoint(8.0,playerid,-2408.7590,976.0934,45.4175))
		{//SF
		    return 1;
		}
		else if(PlayerToPoint(5.0,playerid,-2243.9629,-2560.6477,31.8841) || PlayerToPoint(8.0,playerid,-1676.6323,414.0262,6.9484))
		{//Between LS and SF
		    return 1;
		}
		else if(PlayerToPoint(6.0,playerid,2202.2349,2474.3494,10.5258) || PlayerToPoint(10.0,playerid,614.9333,1689.7418,6.6968))
		{//LV
		    return 1;
		}
		else if(PlayerToPoint(8.0,playerid,-1328.8250,2677.2173,49.7665) || PlayerToPoint(6.0,playerid,70.3882,1218.6783,18.5165))
		{//LV
		    return 1;
		}
		else if(PlayerToPoint(8.0,playerid,2113.7390,920.1079,10.5255) || PlayerToPoint(6.0,playerid,-1327.7218,2678.8723,50.0625))
		{//LV
		    return 1;
		}
		else if(PlayerToPoint(8.0,playerid,656.4265,-559.8610,16.5015) || PlayerToPoint(6.0,playerid,656.3797,-570.4138,16.5015))
		{//Dillimore
		    return 1;
		}
	}
	return 0;
}

public IsAtFishPlace(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(PlayerToPoint(1.0,playerid,403.8266,-2088.7598,7.8359) || PlayerToPoint(1.0,playerid,398.7553,-2088.7490,7.8359))
		{//Fishplace at the bigwheel
		    return 1;
		}
		else if(PlayerToPoint(1.0,playerid,396.2197,-2088.6692,7.8359) || PlayerToPoint(1.0,playerid,391.1094,-2088.7976,7.8359))
		{//Fishplace at the bigwheel
		    return 1;
		}
		else if(PlayerToPoint(1.0,playerid,383.4157,-2088.7849,7.8359) || PlayerToPoint(1.0,playerid,374.9598,-2088.7979,7.8359))
		{//Fishplace at the bigwheel
		    return 1;
		}
		else if(PlayerToPoint(1.0,playerid,369.8107,-2088.7927,7.8359) || PlayerToPoint(1.0,playerid,367.3637,-2088.7925,7.8359))
		{//Fishplace at the bigwheel
		    return 1;
		}
		else if(PlayerToPoint(1.0,playerid,362.2244,-2088.7981,7.8359) || PlayerToPoint(1.0,playerid,354.5382,-2088.7979,7.8359))
		{//Fishplace at the bigwheel
		    return 1;
		}
	}
	return 0;
}

public IsAtCookPlace(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(PlayerToPoint(3.0,playerid,369.9786,-4.0798,1001.8589))
	    {//Cluckin Bell
	        return 1;
	    }
	    else if(PlayerToPoint(3.0,playerid,376.4466,-60.9574,1001.5078) || PlayerToPoint(3.0,playerid,378.1215,-57.4928,1001.5078))
		{//Burgershot
		    return 1;
		}
		else if(PlayerToPoint(3.0,playerid,374.1185,-113.6361,1001.4922) || PlayerToPoint(3.0,playerid,377.7971,-113.7668,1001.4922))
		{//Well Stacked Pizza
		    return 1;
		}
	}
	return 0;
}

public IsAtBar(playerid)
{
    if(IsPlayerConnected(playerid))
	{
		if(PlayerToPoint(4.0,playerid,495.7801,-76.0305,998.7578) || PlayerToPoint(4.0,playerid,499.9654,-20.2515,1000.6797))
		{//In Groove Street bar (with girlfriend), and in Havanna
		    return 1;
		}
		else if(PlayerToPoint(4.0,playerid,1215.9480,-13.3519,1000.9219) || PlayerToPoint(10.0,playerid,-2658.9749,1407.4136,906.2734))
		{//PIG Pen
		    return 1;
		}
 		else if(PlayerToPoint(4.0,playerid,968.7739,-46.6145,1001.1172) || PlayerToPoint(10.0,playerid,968.7739,-46.6145,1001.1172))
		{//Famille Corleone HQ
		    return 1;
		}
		else if(PlayerToPoint(4.0,playerid,-791.016,512.249,1336.41) || PlayerToPoint(10.0,playerid,-799.122,520.988,1336.41))
		{//Nortenos House
		    return 1;
		}
	}
	return 0;
}

public IsAtSexShop(playerid)
{
    if(IsPlayerConnected(playerid))
	{
		if(PlayerToPoint(20.0,playerid,-100.6095,-21.5757,1000.7188))
		{//In grove street bar (with girlfriend), and in Havanna
		    return 1;
		}
	}
	return 0;
}

public IsABoat(carid)
{
	if(carid == 0 || carid == 0)
	{
		return 1;
	}
	return 0;
}

public IsAHarvest(carid)
{
	if(strcmp(VehiculeInfo[carid][Proprio],"Ferme",true) == 0)
	{
		return 1;
	}
	return 0;
}

public IsADrugHarvest(carid)
{
	if(strcmp(VehiculeInfo[carid][Proprio],"Ferme-Drogue",true) == 0)
	{
		return 1;
	}
	return 0;
}

public IsARentCar(carid)
{
	if(strcmp(VehiculeInfo[carid][Proprio],"Auto-Location",true) == 0)
	{
		return 1;
	}
	return 0;
}

public IsARentBike(carid)
{
	if(strcmp(VehiculeInfo[carid][Proprio],"Scooter-Location",true) == 0)
	{
		return 1;
	}
	return 0;
}

public IsASmuggleCar(carid) 
{
	if(strcmp(VehiculeInfo[carid][Proprio],"Drogue",true) == 0)
	{
		return 1;
	}
	return 0;
}

public IsASweeper(carid) 
{
	if(strcmp(VehiculeInfo[carid][Proprio],"Balayeur",true) == 0)
	{
		return 1;
	}
	return 0;
}

public IsAGarbageTruck(carid)
{
    if(strcmp(VehiculeInfo[carid][Proprio],"Poubelle",true) == 0)
	{
		return 1;
	}
	return 0;
}

public IsADozer(carid) // Voiture job ouvrier
{
	if(strcmp(VehiculeInfo[carid][Proprio],"Ouvrier",true) == 0)
	{
		return 1;
	}
	return 0;
}

public IsAPlane(carid)
{
    new mdv = GetVehicleModel(carid);
	if(mdv == 592 || mdv == 577 || mdv == 511 || mdv == 512 || mdv == 593 || mdv == 520 || mdv == 553 || mdv == 476 || mdv == 519 || mdv == 460 || mdv == 513 || mdv == 553 || mdv == 548 || mdv == 425 || mdv == 417 || mdv == 487 || mdv == 488 || mdv == 497 || mdv == 563 || mdv == 447 || mdv == 469)
	{
		return 1;
	}
	return 0;
}

public IsACopCar(carid) 
{
	if(strcmp(VehiculeInfo[carid][Proprio],"LSPD",true) == 0)
	{
		return 1;
	}
	return 0;
}

public IsAnFbiCar(carid)//fbi
{
	if(strcmp(VehiculeInfo[carid][Proprio],"FBI",true) == 0)
	{
	    return 1;
	}
	return 0;
}

public IsATaxiCar(carid)//Job Taxi
{
	if(strcmp(VehiculeInfo[carid][Proprio],"Taxi",true) == 0)
	{
	    return 1;
	}
	return 0;
}

public IsAnArmyCar(carid)//militaire
{
	if(strcmp(VehiculeInfo[carid][Proprio],"Army",true) == 0)
	{
	    return 1;
	}
	return 0;
}

public IsAGovernmentCar(carid)
{
	if(strcmp(VehiculeInfo[carid][Proprio],"Gouvernement",true) == 0)
	{
		return 1;
	}
	return 0;
}


public IsAHspdCar(carid) // C.I.A Hélicos
{
	if(strcmp(VehiculeInfo[carid][Proprio],"CIA",true) == 0)
	{
		return 1;
	}
	return 0;
}

public IsAJobPlane(carid)
{
	if(strcmp(VehiculeInfo[carid][Proprio],"Avion",true) == 0)
	{
		return 1;
	}
	return 0;
}

public IsATrain(carid) // Marche pas avec Gveh
{
	if(carid == 99999)
	{
		return 1;
	}
	return 0;
}

public IsATank(carid)
{
	new model = GetVehicleModel(carid);
	if(model == 432)
	{
		return 1;
	}
	return 0;
}

public IsAnAmbulance(carid)
{
	if(strcmp(VehiculeInfo[carid][Proprio],"Hopital",true) == 0)
	{
		return 1;
	}
	return 0;
}

public IsAnFiretruck(carid)
{
	if(strcmp(VehiculeInfo[carid][Proprio],"Pompier",true) == 0)
	{
		return 1;
	}
	return 0;
}

public IsATruck(carid)
{
	if(strcmp(VehiculeInfo[carid][Proprio],"Camion",true) == 0)
	{
		return 1;
	}
	return 0;
}

public IsAPizzabike(carid)
{
	if(strcmp(VehiculeInfo[carid][Proprio],"Pizza-Bike",true) == 0)
	{
		return 1;
	}
	return 0;
}

public IsABus(carid)
{
	if(strcmp(VehiculeInfo[carid][Proprio],"Bus",true) == 0)
	{
		return 1;
	}
	return 0;
}

public IsATowcar(carid)
{
	if(strcmp(VehiculeInfo[carid][Proprio],"Mecanicien",true) == 0)
	{
		return 1;
	}
	return 0;
}

public IsAFCar(carid) // Fouriere
{
    if(strcmp(VehiculeInfo[carid][Proprio],"Mecanicien",true) == 0)
	{
		return 1;
	}
	return 0;
}

public IsAGangCar(carid) // Vagos
{
    if(strcmp(VehiculeInfo[carid][Proprio],"Vagos",true) == 0)
	{
		return 1;
	}
	return 0;
}

public IsAGangCar2(carid) // Gurentai
{
    if(strcmp(VehiculeInfo[carid][Proprio],"Gurentai",true) == 0)
	{
		return 1;
	}
	return 0;
}

public IsAGangCar3(carid) // Bikers
{
    if(strcmp(VehiculeInfo[carid][Proprio],"Bikers",true) == 0)
	{
		return 1;
	}
	return 0;
}

public IsAGangCar4(carid) // Ballas (Bratva)
{
    if(strcmp(VehiculeInfo[carid][Proprio],"Ballas",true) == 0)
	{
		return 1;
	}
	return 0;
}

public IsAGangCar5(carid) // Grove
{
    if(strcmp(VehiculeInfo[carid][Proprio],"Grove",true) == 0)
	{
		return 1;
	}
	return 0;
}
public IsAGangCar6(carid) // Hitman
{
    if(strcmp(VehiculeInfo[carid][Proprio],"Hitman",true) == 0)
	{
		return 1;
	}
	return 0;
}
public IsAGangCar7(carid) // Corleone
{
    if(strcmp(VehiculeInfo[carid][Proprio],"Corleone",true) == 0)
	{
		return 1;
	}
	return 0;
}
public IsACIACar(carid) // CIA + HSPD Car
{
    if(strcmp(VehiculeInfo[carid][Proprio],"CIA",true) == 0)
	{
		return 1;
	}
	return 0;
}
public IsALATimeCar(carid) // LA Time (San News)
{
    if(strcmp(VehiculeInfo[carid][Proprio],"San-News",true) == 0)
	{
		return 1;
	}
	return 0;
}
/*
public IsAHarvest(carid)
{
	if((carid >= 178) && (carid <= 181))
	{
		return 1;
	}
	return 0;
}

public IsADrugHarvest(carid)
{
	if((carid >= 182) && (carid <= 185))
	{
		return 1;
	}
	return 0;
}

public IsASmuggleCar(carid)
{
	if((carid >= 186) && (carid <= 188))
	{
		return 1;
	}
	return 0;
}

public IsASweeper(carid)
{
	if((carid >= 192) && (carid <= 194))
	{
	    return 1;
	}
	return 0;
}

public IsAGarbageTruck(carid)
{
	if((carid >= 53) && (carid <= 54))
	{
		return 1;
	}
	return 0;
}

public IsADozer(carid)
{
	if((carid >= 55) && (carid <= 56))
	{
	    return 1;
	}
	return 0;
}

public IsAPlane(carid)
{
    new mdv = GetVehicleModel(carid);
	if(mdv == 592 || mdv == 577 || mdv == 511 || mdv == 512 || mdv == 593 || mdv == 520 || mdv == 553 || mdv == 476 || mdv == 519 || mdv == 460 || mdv == 513 || mdv == 553 || mdv == 548 || mdv == 425 || mdv == 417 || mdv == 487 || mdv == 488 || mdv == 497 || mdv == 563 || mdv == 447 || mdv == 469)
	{
		return 1;
	}
	return 0;
}

public IsACopCar(carid)
{
	if((carid >= 30) && (carid <= 52))
	{
		return 1;
	}
	return 0;
}

public IsAnFbiCar(carid)//fbi
{
	if((carid >= 63) && (carid <= 74))
	{
	    return 1;
	}
	return 0;
}

public IsAnArmyCar(carid)//militaire
{
	if((carid >= 1) && (carid <= 23))
	{
	    return 1;
	}
	return 0;
}

public IsAGovernmentCar(carid)
{
	if((carid >= 24) && (carid <= 29))
	{
		return 1;
	}
	return 0;
}

public IsAHspdCar(carid)
{
	if((carid == 74))
	{
	    return 1;
	}
	return 0;
}

public IsAJobPlane(carid)
{
	if(carid == 227 || carid == 228)
	{
		return 1;
	}
	return 0;
}

public IsATrain(carid)
{
	if(carid == 223 || carid == 224 || carid == 225 || carid == 226)
	{
		return 1;
	}
	return 0;
}

public IsATank(carid)
{
	if((carid >= 9999) && (carid <= 9999))
	{
		return 1;
	}
	return 0;
}

public IsAnAmbulance(carid)
{
	if((carid >= 75) && (carid <= 78))
	{
		return 1;
	}
	return 0;
}

public IsAnFiretruck(carid)
{
	if((carid >= 154) && (carid <= 156))
	{
		return 1;
	}
	return 0;
}

public IsATruck(carid)
{
	if(carid >= 131 && carid <= 134)
	{
		return 1;
	}
	return 0;
}

public IsAPizzabike(carid)
{
	if(carid >= 125 && carid <= 130)
	{
		return 1;
	}
	return 0;
}

public IsABus(carid)
{
	if(carid >= 82 && carid <= 83)
	{
		return 1;
	}
	return 0;
}

public IsATowcar(carid)
{
	if((carid >= 97) && (carid <= 100))
	{
		return 1;
	}
	return 0;
}

public IsAFCar(carid) // Fouriere
{
if((carid >= 97 && carid <= 100))
	{
		return 1;
	}
	return 0;
}

public IsAGangCar(carid) // Vagos
{
if((carid >= 189 && carid <= 190) || (carid >= 123 && carid <= 124))
	{
		return 1;
	}
	return 0;
}

public IsAGangCar2(carid) // Gurentai
{
if(carid >= 195 && carid <= 199)
	{
		return 1;
	}
	return 0;
}

public IsAGangCar3(carid) // Bikers
{
if((carid >= 120 && carid <= 122) || (carid == 200))
	{
		return 1;
	}
	return 0;
}

public IsAGangCar4(carid) // Ballas (Bratva)
{
if(carid >= 204 && carid <= 206)
	{
		return 1;
	}
	return 0;
}

public IsAGangCar5(carid) // Grove
{
if((carid >= 207 && carid <= 208) || (carid == 209) || (carid == 157))
	{
		return 1;
	}
	return 0;
}
public IsAGangCar6(carid) // Hitman
{
if(carid >= 79 && carid <= 81)
	{
		return 1;
	}
	return 0;
}
public IsAGangCar7(carid) // Corleone
{
if(carid >= 219 && carid <= 222)
	{
		return 1;
	}
	return 0;
}
public IsACIACar(carid) // CIA
{
if(carid >= 216 && carid <= 218)
	{
		return 1;
	}
	return 0;
}
public IsALATimeCar(carid) // LA Time (San News)
{
if(carid >= 94 && carid <= 96)
	{
		return 1;
	}
	return 0;
}
*/

//===============================================

/*
public IsADeadAngelsCar(carid) // DS
{
if((carid >= 365 && carid <= 372))
	{
		return 1;
	}
	return 0;
}

public IsAGrooveStreetCar(carid)
{
if(carid >= 358 && carid <= 364)
	{
		return 1;
	}
	return 0;
}

public IsAVagosCar1(carid) // Vagos
{
if((carid >= 373 && carid <= 379))
	{
		return 1;
	}
	return 0;
}

public IsAnInstruCar(carid)
{
if(carid >= 429 && carid <= 436)
	{
	    return 1;
	}
	return 0;
}

public IsAYakuzaCar(carid)
{
if(carid >= 352 && carid <= 357)
	{
	    return 1;
	}
	return 0;
}

public IsARiderZCar2(carid) // Corleonne
{
if(carid >= 9999 && carid <= 9999)
	{
		return 1;
	}
	return 0;
}

public IsANostraCar3(carid) // Yamaguchi
{
if(carid >= 9999 && carid <= 9999)
	{
		return 1;
	}
	return 0;
}

public IsARuskovfCar4(carid) // BRATVA
{
if((carid >= 9999) && (carid <= 9999))
	{
		return 1;
	}
	return 0;
}

public IsAClodoCar5(carid) // Clodo
{
if((carid >= 9999 && carid <= 9999))
	{
		return 1;
	}
	return 0;
}

public IsACripzCar(carid)
{
if(carid >= 9999 && carid <= 9999)
	{
	    return 1;
	}
	return 0;
}

public IsABloodsCar(carid)
{
if(carid >= 9999 && carid <= 9999)
	{
	    return 1;
	}
	return 0;
}
*/

public IsAOBike(carid)
{
new modelveh = GetVehicleModel(carid);
if(modelveh == 581 || modelveh == 521 || modelveh == 463 || modelveh == 522 || modelveh == 523 || modelveh == 461 || modelveh == 448 || modelveh == 471 || modelveh == 468 || modelveh == 586)
	{
		return 1;
	}
	return 0;
}

public IsABike(carid)
{
if(carid >= 0 && carid <= 0)
	{
		return 1;
	}
	return 0;
/*}

public IsABombeCar(carid)
{
if(carid == 440)
	{
		return 1;
	}
	return 0;*/
}

public IsPoidLourd(carid)
{
new modelveh = GetVehicleModel(carid);
if(modelveh == 403 || modelveh == 406 || modelveh == 407 || modelveh == 408 || modelveh == 431 || modelveh == 437 || modelveh == 443 || modelveh == 514 || modelveh == 515 || modelveh == 578)
	{
		return 1;
	}
	return 0;
}

//------------------------------------------------------------------------------------------------------

public OnPlayerConnect(playerid)
{


///---------------
    AntiFlood_InitPlayer( playerid );
    /// AFK
    PPos[playerid][0] = 0;
	PPos[playerid][1] = 0;
	PPos[playerid][2] = 0;
	AFKMins[playerid] = 0;
	/// FIN AFK
	new Text:text = TextDrawCreate(5.0, 400.0,Text_Minimap);
	TextDrawUseBox(text, 0);
	TextDrawFont(text, 3);
	TextDrawSetShadow(text,0);
	TextDrawSetOutline(text,1);
	TextDrawBackgroundColor(text,0x000000FF);
	TextDrawColor(text,0xFFFFFFFF);
	TextDrawShowForPlayer(playerid, text);
	
	Textdraw52[playerid] = TextDrawCreate(494.000000, 81.000000, " "); // money changes
	TextDrawAlignment(Textdraw52[playerid], 3);
	TextDrawBackgroundColor(Textdraw52[playerid], 255);
	TextDrawFont(Textdraw52[playerid], 1);
	TextDrawLetterSize(Textdraw52[playerid], 0.279999, 1.600000);
	TextDrawColor(Textdraw52[playerid], 0xFFFFFFFF);
	TextDrawSetOutline(Textdraw52[playerid], 1);
	TextDrawSetProportional(Textdraw52[playerid], 1);
    new plname[MAX_PLAYER_NAME];
    GetPlayerName(playerid, plname, sizeof(plname));
    new astring[256];
    if(IsPlayerNPC(playerid)) return 1;
    SetTimer("PingKick", 60000, true);
    format(astring, sizeof(astring), "(( [%i] %s à rejoint Une 2eme Chance ))",playerid, plname);
   	SendClientMessageToAll(COLOR_YELLOW, astring);
	//AFKMin[playerid] = 0;
	Objet[playerid] = -1; //Le joueur n'a pas d'objet
	InShamal[playerid] = 0;
	//playerspeedtimer[playerid] = SetTimerEx("VehicleSpeed", 100, 1, "i", playerid);
	burnout[playerid]=0;
	gPlayerUsingLoopingAnim[playerid] = 0;
    gPlayerAnimLibsPreloaded[playerid] = 0;
 	LastHealth[playerid] = NULL;
 	SetTimer("scoreupdate", 60000, 1);
  	LastSpeed[playerid] = NULL;
  	new sendername[MAX_PLAYER_NAME];
  	GetPlayerName(playerid, sendername, sizeof(sendername));
  	PlayerPos[playerid][0] = 0; PlayerPos[playerid][1] = 0; PlayerPos[playerid][2] = 0;
	PompeEssence[playerid] = 255;
	TableauActive[playerid] = 1;
	EnPanne[playerid] = 0;
	EchangeVeh[playerid][0] = 255; EchangeVeh[playerid][1] = 0; EchangeVeh[playerid][2] = 0;
	#if defined USE_MENU
		DefinirPrix[playerid] = 0;
		DefinirEssence[playerid] = 0;
	#endif
	#if defined USE_CALLCAR
		for(new c=0;c<MAX_PLAYER_VEHICLES;c++)
		{
		    MyVehicleID[playerid][c] = 0;
		}
	#endif
	for(new m=0;m<sizeof(Pompe);m++)
	{
		SetPlayerMapIcon(playerid,m,Pompe[m][0],Pompe[m][1],Pompe[m][2],51,1);
	}
 	if (Objet[playerid]  != -1)
    {
        DestroyStreamObject (Objet[playerid]);
        Objet[playerid] = -1;
    /*}
	for(new p=0;p<sizeof(AFKPos[]);p++)
	{
	    AFKPos[playerid][p] = 0;*/
	}
	if(Security != 0)
	{
	    SendClientMessage(playerid, COLOR_YELLOW, "Host has broken one of the Agreement rules, action has been taken.");
	    Kick(playerid);
	    return 1;
	}
    new namestring = strfind(plname, "_", true);
 	if(namestring == -1)
	{
        new string[256];
		SendClientMessage(playerid, COLOR_YELLOW2, "Département d'immigration: Votre nom n'est pas acceptable.");
		SendClientMessage(playerid, COLOR_YELLOW2, "Info: Votre nom doit réspécté la forme Prénom_Nom. (Exemple : Thomas_Dupont)");
		format(string,sizeof(string),"[ANTI-NORP]: %s a été kické pour nom NO-RP.",sendername);
		SendClientMessageToAll(COLOR_RED,string);
		Kick(playerid);
		return 1;
	}
	new BadNameChars[][2] = {"/","`","~","!","@","#","$","%","^","&","","(",")","-","=","+",".",",","<",">","[","]","{","}","|",":",";","'","0","1","2","3","4","5","6","7","8","9","°"};
	for(new i=0;i<sizeof(BadNameChars);i++)
	{
		if(strfind(sendername,BadNameChars[i],true) != -1 || strlen(sendername) > MAX_PLAYERS)
		{
		new string[256];
		SendClientMessage(playerid, COLOR_YELLOW2, "Département d'immigration: Votre nom n'est pas acceptable. (Caractères interdits)");
		SendClientMessage(playerid, COLOR_YELLOW2, "Info: Votre nom doit réspécté la forme Prénom_Nom. (Exemple : Thomas_Dupont)");
		format(string,sizeof(string),"[ANTI-NORP]: %s a été kické pour nom NO-RP.",sendername);
        SendClientMessageToAll(COLOR_RED,string);
		Kick(playerid);
		return 1;
		}
    }
    if (strlen(sendername) < 5)
	{
        new string[256];
		SendClientMessage(playerid, COLOR_YELLOW2, "Département d'immigration: Votre nom n'est pas acceptable. (Trop court)");
		SendClientMessage(playerid, COLOR_YELLOW2, "Info: Votre nom doit réspécté la forme Prénom_Nom. (Exemple : Thomas_Dupont)");
		format(string,sizeof(string),"[ANTI-NORP]: %s a été kické pour nom NO-RP.",sendername);
		SendClientMessageToAll(COLOR_RED,string);
		Kick(playerid);
		return 1;

	}
	gActivePlayers[playerid]++;
	numplayers++;
	new string[512];
	SelectChar[playerid] = 0; HidePM[playerid] = 0; PhoneOnline[playerid] = 0;
	SelectCharID[playerid] = 0; SelectCharPlace[playerid] = 0; ChosenSkin[playerid] = 0;
	GettingJob[playerid] = 0; GuardOffer[playerid] = 999; GuardPrice[playerid] = 0;
    ApprovedLawyer[playerid] = 0; CallLawyer[playerid] = 0; WantLawyer[playerid] = 0; PlayerIsDozering[playerid] = 0;
	KickPlayer[playerid] = 0; CurrentMoney[playerid] = 0; UsedFind[playerid] = 0; tempvoiturevoler[playerid] = 0;
	CP[playerid] = 0; Robbed[playerid] = 0; SpawnChange[playerid] = 1; voiturepaslui[playerid] = 0;
	CarOffer[playerid] = 9999; CarPrice[playerid] = 0; CarID[playerid] = 0; CarCalls[playerid] = 0;
	RobbedTime[playerid] = 0; MoneyMessage[playerid] = 0; Condom[playerid] = 0; Rope[playerid] = 0;
	STDPlayer[playerid] = 0; SexOffer[playerid] = 999; SexPrice[playerid] = 0; ilsweep[playerid] = 0;
	RepairOffer[playerid] = 999; RepairPrice[playerid] = 0; RepairCar[playerid] = 0; rein[playerid] = 0;
	TalkingLive[playerid] = 255; LiveOffer[playerid] = 999; TakingLesson[playerid] = 0;
	RefillOffer[playerid] = 999; RefillPrice[playerid] = 0; MapIconsShown[playerid] = 0;
	DrugOffer[playerid] = 999; PlayerCuffed[playerid] = 0; PlayerCuffedTime[playerid] = 0; HandshakeOffer[playerid] = 999; HandshakeType[playerid] = 0;
	DrugPrice[playerid] = 0; RegistrationStep[playerid] = 0; OnCK[playerid] = 999; GettingCK[playerid] = 999;
	DrugGram[playerid] = 0; ConnectedToPC[playerid] = 0; OrderReady[playerid] = 0;
	JailPrice[playerid] = 0; MedicTime[playerid] = 0; NeedMedicTime[playerid] = 0; MedicBill[playerid] = 0; GotHit[playerid] = 0;
	WantedPoints[playerid] = 0; GoChase[playerid] = 999; GetChased[playerid] = 999; PlacedNews[playerid] = 0;
	OnDuty[playerid] = 0; WantedLevel[playerid] = 0; tactical[playerid] = 0; swat[playerid] = 0; TestFishes[playerid] = 0;
	BoxWaitTime[playerid] = 0; SchoolSpawn[playerid] = 0; ChangePos2[playerid][1] = 0;
	SafeTime[playerid] = 60; TransportDuty[playerid] = 0; PlayerTied[playerid] = 0;
	BusCallTime[playerid] = 0; TaxiCallTime[playerid] = 0; MedicCallTime[playerid] = 0; MechanicCallTime[playerid] = 0;
	BusrouteEast[playerid][0] = 0; BusrouteWest[playerid][0] = 0; BusShowLocation[playerid][0] = 0; BusShowLocationC[playerid] = 0;
	FindTimePoints[playerid] = 0; FindTime[playerid] = 0; JobDuty[playerid] = 0;
	Mobile[playerid] = 255; Music[playerid] = 0; BoxOffer[playerid] = 999; PlayerBoxing[playerid] = 0;
	Spectate[playerid] = 255; PlayerDrunk[playerid] = 0; PlayerDrunkTime[playerid] = 0;
	Unspec[playerid][sLocal] = 255; FishCount[playerid] = 0; NoHospital[playerid] = 0;
	WritingPaper[playerid] = 0; WritingPaperNumber[playerid] = 999; WritingLine[playerid] = 0; BringingPaper[playerid] = 0; GotPaper[playerid] = 0;
	PaperOffer[playerid] = 999; /*ConsumingMoney[playerid] = 0;*/
	ScriptMoney[playerid] = 0; ScriptMoneyUpdated[playerid] = 0;
	for (new c=0; c<13; c++) ScriptWeapons[playerid][c] = 0;
	ScriptWeaponsUpdated[playerid] = 0;
    gLastCar[playerid] = 0; FirstSpawn[playerid] = 1;
	gOoc[playerid] = 0; gNews[playerid] = 0; BigEar[playerid] = 0; gDice[playerid] = 0; gFam[playerid] = 0;
	gSpeedo[playerid] = 1; gGas[playerid] = 0;
	gPlayerLogged[playerid] = 0; gPlayerLogTries[playerid] = 0; gPlayerAccount[playerid] = 0;
	gPlayerSpawned[playerid] = 0; PlayerKarting[playerid] = 0; PlayerInKart[playerid] = 0;
	PlayerTazeTime[playerid] = 0; PlayerStoned[playerid] = 0;
	StartTime[playerid] = 0; TicketOffer[playerid] = 999; TicketMoney[playerid] = 0; OrganeOffer[playerid] = 999; OrganeMoney[playerid] = 0;
	MatsHolding[playerid] = 0; TutTime[playerid] = 0;
	gPlayerMission[playerid] = 0; TaxiAccepted[playerid] = 999; BusAccepted[playerid] = 999;
	PlayerInfo[playerid][pCash] = dollah; NoFuel[playerid] = 0;
	HireCar[playerid] = 299; GangCar[playerid] = 512; PlayersChannel[playerid] = 999;
	TransportValue[playerid] = 0; TransportMoney[playerid] = 0; TransportTime[playerid] = 0; TransportCost[playerid] = 0; TransportDriver[playerid] = 999;
	Locator[playerid] = 0; PlayerOnMission[playerid] = 0; MissionCheckpoint[playerid] = 0;
	WatchingTV[playerid] = 0; PlayerPaintballing[playerid] = 0; PlayerPaintballKills[playerid] = 0;
	Fishes[playerid][pLastFish] = 0; Fishes[playerid][pFishID] = 0;
	ProposeOffer[playerid] = 999; MarryWitness[playerid] = 999; MarryWitnessOffer[playerid] = 999; MarriageCeremoney[playerid] = 0; ProposedTo[playerid] = 999; GotProposedBy[playerid] = 999; DivorceOffer[playerid] = 999; ChangeColorOffer[playerid] = 999;
	SafeGivePlayerMoney(playerid,PlayerInfo[playerid][pCash]); tactical[playerid] = 0; swat[playerid] = 0; authorizetactical = 0;
	PizzaCallTime[playerid] = 0; bPizza[playerid] = 0; sPizza[playerid] = 0; gEngine[playerid] = 0; FarmerVar[playerid] = 0; FarmerPickup[playerid][0] = 0; SmugglerWork[playerid] = 0; SmuggledDrugs[playerid] = 0; JustDied[playerid] = 0; KnockedDown[playerid] = 0; UnidentifedCall[playerid] = 0;
	LicenseOffer[playerid] = 999; LicensePrice[playerid] = 0; LicenseType[playerid] = 0; UsingDrugs[playerid] = 0; AfterTutorial[playerid] = 0;
	OwnableCarOffer[playerid] = 9999; OwnableCarID[playerid] = 0; OwnableCarPrice[playerid] = 0; BlindFold[playerid] = 0; PlayerIsSweeping[playerid] = 0; PlayerOnGarbage[playerid] = 0; AdminDuty[playerid] = 0; JustReported[playerid] = 0; PlayerNeedsHelp[playerid] = 0; AdminSpec[playerid] = 0; IsSmoking[playerid] = 0; UsingSmokeAnim[playerid] = 0; ReduceTime[playerid] = 0;
	CreatingGun[playerid] = 0; CreatingGunAmmo[playerid] = 0; CreatingGunPrice[playerid] = 0; IsPuttingMaterials[playerid] = 0; IsTakingGun[playerid] = 0;
	InAFoodPlace[playerid] = 0; Masturber[playerid] = 0;
	RegistrationQuestion[playerid] = 0;
    PlayerInfo[playerid][pWarnings] = 0;
	PlayerInfo[playerid][pLevel] = 0;
	PlayerInfo[playerid][pAdmin] = 0;
	PlayerInfo[playerid][pDonateRank] = 0;
	PlayerInfo[playerid][gPupgrade] = 0;
	PlayerInfo[playerid][pConnectTime] = 0;
	PlayerInfo[playerid][pReg] = 0;
	PlayerInfo[playerid][pSex] = 0;
	PlayerInfo[playerid][pAge] = 0;
	PlayerInfo[playerid][pOrigin] = 0;
	PlayerInfo[playerid][pExp] = 0;
	PlayerInfo[playerid][pAccount] = 0;
	PlayerInfo[playerid][probbank] = 0;
	//PlayerInfo[playerid][pDormir] = 0;
	PlayerInfo[playerid][pHotel] = 0;
	PlayerInfo[playerid][pfpermis] = 0;
	PlayerInfo[playerid][pMatsf] = 0;
	PlayerInfo[playerid][pPointPermis] = 0;
	PlayerInfo[playerid][pCrimes] = 0;
	PlayerInfo[playerid][pDeaths] = 0;
	PlayerInfo[playerid][pArrested] = 0;
	PlayerInfo[playerid][pWantedDeaths] = 0;
	PlayerInfo[playerid][pPhoneBook] = 0;
	PlayerInfo[playerid][pLottoNr] = 0;
	PlayerInfo[playerid][pFishes] = 0;
	PlayerInfo[playerid][pBiggestFish] = 0;
	PlayerInfo[playerid][pJob] = 0;
	PlayerInfo[playerid][pPayCheck] = 0;
	PlayerInfo[playerid][pHeadValue] = 0;
	PlayerInfo[playerid][pJailed] = 0;
	PlayerInfo[playerid][pJailTime] = 0;
	PlayerInfo[playerid][pMats] = 0;
	PlayerInfo[playerid][pDrugs] = 0;
	PlayerInfo[playerid][pLeader] = 0;
	PlayerInfo[playerid][pMember] = 0;
	PlayerInfo[playerid][pFMember] = 255;
	PlayerInfo[playerid][pRank] = 0;
	PlayerInfo[playerid][pChar] = 0;
	PlayerInfo[playerid][pContractTime] = 0;
	PlayerInfo[playerid][pDetSkill] = 0;
	PlayerInfo[playerid][pSexSkill] = 0;
	PlayerInfo[playerid][pBoxSkill] = 0;
	PlayerInfo[playerid][pLawSkill] = 0;
	PlayerInfo[playerid][pMechSkill] = 0;
	PlayerInfo[playerid][pJackSkill] = 0;
	PlayerInfo[playerid][pCarSkill] = 0;
	PlayerInfo[playerid][pNewsSkill] = 0;
	PlayerInfo[playerid][pDrugsSkill] = 0;
	PlayerInfo[playerid][pCookSkill] = 0;
	PlayerInfo[playerid][pFishSkill] = 0;
	PlayerInfo[playerid][pSHealth] = 0.0;
	PlayerInfo[playerid][pHealth] = 50.0;
    PlayerInfo[playerid][pPos_x] = 1743.1295;
	PlayerInfo[playerid][pPos_y] = -1862.9645;
	PlayerInfo[playerid][pPos_z] = 13.5757;
	PlayerInfo[playerid][pInt] = 0;
	PlayerInfo[playerid][pLocal] = 255;
	PlayerInfo[playerid][pTeam] = 3;
	PlayerInfo[playerid][pModel] = 7;
	new randphone = 1000 + random(9999);//minimum 1000  max 9999 //giving one at the start
	PlayerInfo[playerid][pPnumber] = randphone;
	PlayerInfo[playerid][pPhousekey] = 255;
	PlayerInfo[playerid][pGangKey] = 255;
	PlayerInfo[playerid][pPbiskey] = 255;
	PlayerInfo[playerid][pCarLic] = 0;
	PlayerInfo[playerid][pFlyLic] = 0;
	PlayerInfo[playerid][pFlyLicf] = 0;
	PlayerInfo[playerid][pFlyLict] = 0;
	PlayerInfo[playerid][pBoatLic] = 0;
	PlayerInfo[playerid][pBoatLicf] = 0;
	PlayerInfo[playerid][pBoatLict] = 0;
	PlayerInfo[playerid][pFishLic] = 0;
	PlayerInfo[playerid][pFishLicf] = 0;
	PlayerInfo[playerid][pFishLict] = 0;
	PlayerInfo[playerid][pLourdLic] = 0;
	PlayerInfo[playerid][pLourdLicf] = 0;
	PlayerInfo[playerid][pLourdLict] = 0;
	PlayerInfo[playerid][pMotoLic] = 0;
	PlayerInfo[playerid][pMotoLicf] = 0;
	PlayerInfo[playerid][pMotoLict] = 0;
	PlayerInfo[playerid][pGunLic] = 0;
	PlayerInfo[playerid][pGunLicf] = 0;
	PlayerInfo[playerid][pGunLict] = 0;
	PlayerInfo[playerid][pGun1] = 0;
	PlayerInfo[playerid][pGun2] = 0;
	PlayerInfo[playerid][pGun3] = 0;
	PlayerInfo[playerid][pGun4] = 0;
	PlayerInfo[playerid][pAmmo1] = 0;
	PlayerInfo[playerid][pAmmo2] = 0;
	PlayerInfo[playerid][pAmmo3] = 0;
	PlayerInfo[playerid][pAmmo4] = 0;
	PlayerInfo[playerid][pCarTime] = 0;
	PlayerInfo[playerid][pPayDay] = 0;
	PlayerInfo[playerid][pPayDayHad] = 0;
	PlayerInfo[playerid][pWatch] = 0;
	PlayerInfo[playerid][pGPS] = 0;
	PlayerInfo[playerid][pTante] = 0;
	PlayerInfo[playerid][pDecodeur] = 0;
	PlayerInfo[playerid][pCrashed] = 0;
	PlayerInfo[playerid][pKicked] = 0;
	PlayerInfo[playerid][pWins] = 0;
	PlayerInfo[playerid][pLoses] = 0;
	PlayerInfo[playerid][pAlcoholPerk] = 0;
	PlayerInfo[playerid][pDrugPerk] = 0;
	PlayerInfo[playerid][pMiserPerk] = 0;
	PlayerInfo[playerid][pPainPerk] = 0;
	PlayerInfo[playerid][pTraderPerk] = 0;
	PlayerInfo[playerid][pTut] = 0;
	PlayerInfo[playerid][pskinf] = 0;
	PlayerInfo[playerid][pskinfm] = 0;
	PlayerInfo[playerid][pMissionNr] = 0;
	//PlayerInfo[playerid][pWarns] = 0;
	PlayerInfo[playerid][pFuel] = 0;
	PlayerInfo[playerid][pVirWorld] = 0;
	PlayerInfo[playerid][pRequestingBackup] = 0;
	PlayerInfo[playerid][pRoadblock] = 0;
	PlayerInfo[playerid][pFishTool] = 0;
	strmid(PlayerInfo[playerid][pNote1], "Aucune", 0, strlen("Aucune"), 255);
	PlayerInfo[playerid][pNote1s] = 0;
	strmid(PlayerInfo[playerid][pNote2], "Aucune", 0, strlen("Aucune"), 255);
	PlayerInfo[playerid][pNote2s] = 0;
	strmid(PlayerInfo[playerid][pNote3], "Aucune", 0, strlen("Aucune"), 255);
	PlayerInfo[playerid][pNote3s] = 0;
	strmid(PlayerInfo[playerid][pNote4], "Aucune", 0, strlen("Aucune"), 255);
	PlayerInfo[playerid][pNote4s] = 0;
	strmid(PlayerInfo[playerid][pNote5], "Aucune", 0, strlen("Aucune"), 255);
	PlayerInfo[playerid][pNote5s] = 0;
	PlayerInfo[playerid][pJustice] = 0;
	PlayerInfo[playerid][pInvWeapon] = 0;
	PlayerInfo[playerid][pInvAmmo] = 0;
	PlayerInfo[playerid][pLighter] = 0;
	PlayerInfo[playerid][pCigarettes] = 0;
	PlayerInfo[playerid][pMask] = 0;
	PlayerInfo[playerid][pMaskuse] = 0;
	PlayerInfo[playerid][pHideNumber] = 0;
	PlayerInfo[playerid][pSpeaker] = 0;
	PlayerInfo[playerid][pWT] = 0;
	PlayerInfo[playerid][pWTc] = 0;
	PlayerInfo[playerid][pLocked] = 0;
	CityHallRobbedRecently = 0;
	RobbedRecently[playerid] = 0;
	PlayerInfo[playerid][pLang1] = 0;
	PlayerInfo[playerid][pLang2] = 0;
	PlayerInfo[playerid][pRobTime] = 0;
	PlayerInfo[playerid][pWork] = 0;
	AirRoute[playerid] = 0;
	TrainRoute[playerid] = 0;
	//PlayerInfo[playerid][pSQLID] = 0;
	ClearCrime(playerid);
	ClearFishes(playerid);
	ClearCooking(playerid);
	ClearGroceries(playerid);
	ClearMarriage(playerid);
	SetPlayerColor(playerid,COLOR_GRAD2);
	HouseEntered[playerid] = 255;
	PlayerInfo[playerid][pPcarkey] = -1;
	PlayerInfo[playerid][pPcarkey2] = -1;
	PlayerInfo[playerid][pPcarkey3] = -1;
	if(strfind(Noms(playerid),"Al_Pacino",true) != -1)
	{
        SendClientMessage(playerid, COLOR_LIGHTRED, "Nom Connu.");
		Kick(playerid);
	}
	if(strfind(Noms(playerid),"Oussama_Benladen",true) != -1)
	{
        SendClientMessage(playerid, COLOR_LIGHTRED, "Nom Connu.");
		Kick(playerid);
	}
	if(strfind(Noms(playerid),"Brad_Pitt",true) != -1)
	{
        SendClientMessage(playerid, COLOR_LIGHTRED, "Nom Connu.");
		Kick(playerid);
	}
	if(strfind(Noms(playerid),"Johnny_Halliday",true) != -1)
	{
        SendClientMessage(playerid, COLOR_LIGHTRED, "Nom Connu.");
		Kick(playerid);
	}
	if(strfind(Noms(playerid),"Michael_Jackson",true) != -1)
	{
        SendClientMessage(playerid, COLOR_LIGHTRED, "Nom Connu.");
		Kick(playerid);
	}
	if(strfind(Noms(playerid),"Bob_Marley",true) != -1)
	{
        SendClientMessage(playerid, COLOR_LIGHTRED, "Nom Connu.");
		Kick(playerid);
	}
	if(strfind(Noms(playerid),"Adolf_Hitler",true) != -1)
	{
        SendClientMessage(playerid, COLOR_LIGHTRED, "Nom Connu.");
		Kick(playerid);
	}
	if(strfind(Noms(playerid),"Adolphe_Hitler",true) != -1)
	{
        SendClientMessage(playerid, COLOR_LIGHTRED, "Nom Connu.");
		Kick(playerid);
	}
	if(strfind(Noms(playerid),"Adolf_Hitler",true) != -1)
	{
        SendClientMessage(playerid, COLOR_LIGHTRED, "Nom Connu.");
		Kick(playerid);
	}
	for(new h = 618; h < sizeof(CarInfo); h++)
	{
		SetVehicleParamsForPlayer(h,playerid,0,CarInfo[h][cLock]);
	}
	GetPlayerName(playerid, plname, sizeof(plname));
	format(string, sizeof(string), "users/%s.ini", plname);
	SendClientMessage(playerid, COLOR_YELLOW2, "Veuillez Patienter...");
	if(fexist(string))
	{
  		gPlayerAccount[playerid] = 1;
		//LOGINSYS(playerid);
	}
	else
	{
		gPlayerAccount[playerid] = 0;
		//SendClientMessage(playerid,COLOR_YELLOW2,"Immigration: Please supply the necessary immigration documents by typing /enregistrer <password>");
		//return 1;
	}
	//MySQLCheckConnection();

	// Check if the account exists
	/*new sqlaccountstatus = MySQLCheckAccount(plname);
	if(sqlaccountstatus != 0)
	{
		// Check if the account is locked
		if (MySQLCheckAccountLocked(sqlaccountstatus) != 0)
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "This account has been locked and cannot be accessed. Please contact an admin.");
			Kick(playerid);
			return 0;
		}
		gPlayerAccount[playerid] = 1;
		PlayerInfo[playerid][pSQLID] = sqlaccountstatus;
	}
	else
	{
		gPlayerAccount[playerid] = 0;
	}*/
	return 1;
}

public JoinChannel(playerid, number, line[])
{
    if(IsPlayerConnected(playerid))
	{
	    if(strcmp(IRCInfo[number][iPassword],line, true ) == 0 )
		{
	        JoinChannelNr(playerid, number);
	    }
	    else
	    {
	        SendClientMessage(playerid, COLOR_GREY, "   Le mot de passe du canal est incorrect !");
	    }
	}
	return 1;
}

public JoinChannelNr(playerid, number)
{
	if(IsPlayerConnected(playerid))
	{
	    new string[256];
		new sendername[MAX_PLAYER_NAME];
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(PlayersChannel[playerid] < 999)
	    {
			format(string, sizeof(string), " %s a quitté le canal.", sendername);
			SendIRCMessage(PlayersChannel[playerid], COLOR_GREEN, string);
			IRCInfo[PlayersChannel[playerid]][iPlayers] -= 1;
	    }
		new channel; channel = number; channel += 1;
	    PlayersChannel[playerid] = number;
	    IRCInfo[PlayersChannel[playerid]][iPlayers] += 1;
    	new wstring[128];
		format(string, sizeof(string), "%s", sendername);
		strmid(wstring, string, 0, strlen(string), 255);
		if(strcmp(IRCInfo[number][iAdmin],wstring, true ) == 0 )
		{
		    format(string, sizeof(string), " Vous avez rejoins le cannal IRC %d en tant qu'Administrateur.", channel);
			SendClientMessage(playerid, COLOR_YELLOW, string);
		}
		else
		{
		    format(string, sizeof(string), " Vous avez rejoins le cannal IRC %d, Administrateur: %s.", channel, IRCInfo[number][iAdmin]);
			SendClientMessage(playerid, COLOR_YELLOW, string);
		}
		format(string, sizeof(string), "MOTD: %s.", IRCInfo[number][iMOTD]);
		SendClientMessage(playerid, COLOR_YELLOW, string);
		format(string, sizeof(string), " %s à rejoint le cannal.", sendername);
		SendIRCMessage(number, COLOR_GREEN, string);
	}
	return 1;
}

public ClearCK(ck)
{
    new string[MAX_PLAYER_NAME];
	format(string, sizeof(string), "Personne");
	strmid(CKInfo[ck][cSendername], string, 0, strlen(string), 255);
	strmid(CKInfo[ck][cGiveplayer], string, 0, strlen(string), 255);
	CKInfo[ck][cUsed] = 0;
	SaveCK();
	return 1;
}

public ClearMarriage(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new string[MAX_PLAYER_NAME];
		format(string, sizeof(string), "Personne");
		strmid(PlayerInfo[playerid][pMarriedTo], string, 0, strlen(string), 255);
		PlayerInfo[playerid][pMarried] = 0;
	}
	return 1;
}

public ClearPaper(paper)
{
    new string[MAX_PLAYER_NAME];
	format(string, sizeof(string), "None");
	PaperInfo[paper][PaperUsed] = 0;
	strmid(PaperInfo[paper][PaperMaker], string, 0, strlen(string), 255);
	strmid(PaperInfo[paper][PaperTitle], string, 0, strlen(string), 255);
	strmid(PaperInfo[paper][PaperText1], string, 0, strlen(string), 255);
	strmid(PaperInfo[paper][PaperText2], string, 0, strlen(string), 255);
	strmid(PaperInfo[paper][PaperText3], string, 0, strlen(string), 255);
	strmid(PaperInfo[paper][PaperText4], string, 0, strlen(string), 255);
	strmid(PaperInfo[paper][PaperText5], string, 0, strlen(string), 255);
	strmid(PaperInfo[paper][PaperText6], string, 0, strlen(string), 255);
	strmid(PaperInfo[paper][PaperText7], string, 0, strlen(string), 255);
	SavePapers();
	return 1;
}

public ClearFamily(family)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        if(PlayerInfo[i][pFMember] == family)
	        {
	            SendClientMessage(i, COLOR_WHITE, " La famille ou vous étiez a été suprimée par le Leader, vous avez été kické automatiquement.");
	            PlayerInfo[i][pFMember] = 255;
	        }
	    }
	}
    new string[MAX_PLAYER_NAME];
	format(string, sizeof(string), "Aucune");
	FamilyInfo[family][FamilyTaken] = 0;
	strmid(FamilyInfo[family][FamilyName], string, 0, strlen(string), 255);
	strmid(FamilyInfo[family][FamilyMOTD], string, 0, strlen(string), 255);
	strmid(FamilyInfo[family][FamilyLeader], string, 0, strlen(string), 255);
	format(string, sizeof(string), "0xFF000069");
	strmid(FamilyInfo[family][FamilyColor], string, 0, strlen(string), 255);
	FamilyInfo[family][FamilyMembers] = 0;
	FamilyInfo[family][FamilySpawn][0] = 0.0;
	FamilyInfo[family][FamilySpawn][1] = 0.0;
	FamilyInfo[family][FamilySpawn][2] = 0.0;
	FamilyInfo[family][FamilySpawn][3] = 0.0;
	FamilyInfo[family][FamilyInterior] = 0;
	FamilyInfo[family][FamilyCash] = 0;
	FamilyInfo[family][FamilySafe] = 0;
	FamilyInfo[family][FamilySafePos][0] = 0.0;
	FamilyInfo[family][FamilySafePos][1] = 0.0;
	FamilyInfo[family][FamilySafePos][2] = 0.0;
	FamilyInfo[family][FamilyCrack] = 0;
	FamilyInfo[family][FamilyMats] = 0;
	DestroyPickup(FamilyInfo[family][PickupID]);
	printf("DestroyPickup %d",FamilyInfo[family][PickupID]);
	FamilyInfo[family][PickupID] = CreatePickup(1239, 23, FamilyInfo[family][FamilySafePos][0],FamilyInfo[family][FamilySafePos][1], FamilyInfo[family][FamilySafePos][2]);
    FamilyInfo[family][FStrikes] = 0;
    FamilyInfo[family][FamilyTax] = 0;
	SaveFamilies();
	return 1;
}

public ClearCrime(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new string[MAX_PLAYER_NAME];
		format(string, sizeof(string), "******");
		strmid(PlayerCrime[playerid][pBplayer], string, 0, strlen(string), 255);
		strmid(PlayerCrime[playerid][pVictim], string, 0, strlen(string), 255);
		strmid(PlayerCrime[playerid][pAccusing], string, 0, strlen(string), 255);
		strmid(PlayerCrime[playerid][pAccusedof], string, 0, strlen(string), 255);
	}
	return 1;
}

public FishCost(playerid, fish)
{
	if(IsPlayerConnected(playerid))
	{
		new cost = 0;
		switch (fish)
		{
		    case 1:
		    {
		        cost = 1;
		    }
		    case 2:
		    {
		        cost = 3;
		    }
		    case 3:
		    {
		        cost = 3;
		    }
		    case 5:
		    {
		        cost = 5;
		    }
		    case 6:
		    {
		        cost = 2;
		    }
		    case 8:
		    {
		        cost = 8;
		    }
		    case 9:
		    {
		        cost = 12;
		    }
		    case 11:
		    {
		        cost = 9;
		    }
		    case 12:
		    {
		        cost = 7;
		    }
		    case 14:
		    {
		        cost = 12;
		    }
		    case 15:
		    {
		        cost = 9;
		    }
		    case 16:
		    {
		        cost = 7;
		    }
		    case 17:
		    {
		        cost = 7;
		    }
		    case 18:
		    {
		        cost = 10;
		    }
		    case 19:
		    {
		        cost = 4;
		    }
		    case 21:
		    {
		        cost = 3;
		    }
		}
		return cost;
	}
	return 0;
}

public ClearFishes(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    Fishes[playerid][pFid1] = 0; Fishes[playerid][pFid2] = 0; Fishes[playerid][pFid3] = 0;
		Fishes[playerid][pFid4] = 0; Fishes[playerid][pFid5] = 0;
		Fishes[playerid][pWeight1] = 0; Fishes[playerid][pWeight2] = 0; Fishes[playerid][pWeight3] = 0;
		Fishes[playerid][pWeight4] = 0; Fishes[playerid][pWeight5] = 0;
		new string[MAX_PLAYER_NAME];
		format(string, sizeof(string), "Aucune");
		strmid(Fishes[playerid][pFish1], string, 0, strlen(string), 255);
		strmid(Fishes[playerid][pFish2], string, 0, strlen(string), 255);
		strmid(Fishes[playerid][pFish3], string, 0, strlen(string), 255);
		strmid(Fishes[playerid][pFish4], string, 0, strlen(string), 255);
		strmid(Fishes[playerid][pFish5], string, 0, strlen(string), 255);
	}
	return 1;
}

public ClearFishID(playerid, fish)
{
	if(IsPlayerConnected(playerid))
	{
		new string[MAX_PLAYER_NAME];
		format(string, sizeof(string), "None");
		switch (fish)
		{
		    case 1:
		    {
		        strmid(Fishes[playerid][pFish1], string, 0, strlen(string), 255);
		        Fishes[playerid][pWeight1] = 0;
		        Fishes[playerid][pFid1] = 0;
		    }
		    case 2:
		    {
		        strmid(Fishes[playerid][pFish2], string, 0, strlen(string), 255);
		        Fishes[playerid][pWeight2] = 0;
		        Fishes[playerid][pFid2] = 0;
		    }
		    case 3:
		    {
		        strmid(Fishes[playerid][pFish3], string, 0, strlen(string), 255);
		        Fishes[playerid][pWeight3] = 0;
		        Fishes[playerid][pFid3] = 0;
		    }
		    case 4:
		    {
		        strmid(Fishes[playerid][pFish4], string, 0, strlen(string), 255);
		        Fishes[playerid][pWeight4] = 0;
		        Fishes[playerid][pFid4] = 0;
		    }
		    case 5:
		    {
		        strmid(Fishes[playerid][pFish5], string, 0, strlen(string), 255);
		        Fishes[playerid][pWeight5] = 0;
		        Fishes[playerid][pFid5] = 0;
		    }
		}
	}
	return 1;
}

public ClearCooking(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    Cooking[playerid][pCookID1] = 0; Cooking[playerid][pCookID2] = 0; Cooking[playerid][pCookID3] = 0;
		Cooking[playerid][pCookID4] = 0; Cooking[playerid][pCookID5] = 0;
		Cooking[playerid][pCWeight1] = 0; Cooking[playerid][pCWeight2] = 0; Cooking[playerid][pCWeight3] = 0;
		Cooking[playerid][pCWeight4] = 0; Cooking[playerid][pCWeight5] = 0;
		new string[MAX_PLAYER_NAME];
		format(string, sizeof(string), "Rien");
		strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
		strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
		strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
		strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
		strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
	}
	return 1;
}

public ClearCookingID(playerid, cook)
{
	if(IsPlayerConnected(playerid))
	{
		new string[MAX_PLAYER_NAME];
		format(string, sizeof(string), "Rien");
		switch (cook)
		{
		    case 1:
		    {
		        strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
		        Cooking[playerid][pCWeight1] = 0;
		        Cooking[playerid][pCookID1] = 0;
		    }
		    case 2:
		    {
		        strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
		        Cooking[playerid][pCWeight2] = 0;
		        Cooking[playerid][pCookID2] = 0;
		    }
		    case 3:
		    {
		        strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
		        Cooking[playerid][pCWeight3] = 0;
		        Cooking[playerid][pCookID3] = 0;
		    }
		    case 4:
		    {
		        strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
		        Cooking[playerid][pCWeight4] = 0;
		        Cooking[playerid][pCookID4] = 0;
		    }
		    case 5:
		    {
		        strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
		        Cooking[playerid][pCWeight5] = 0;
		        Cooking[playerid][pCookID5] = 0;
		    }
		}
	}
	return 1;
}

public ClearGroceries(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    Groceries[playerid][pChickens] = 0; Groceries[playerid][pChicken] = 0;
	    Groceries[playerid][pHamburgers] = 0; Groceries[playerid][pHamburger] = 0;
	    Groceries[playerid][pPizzas] = 0; Groceries[playerid][pPizza] = 0;
	}
	return 1;
}

public Lotto(number)
{
	new JackpotFallen = 0;
	new string[256];
	new winner[MAX_PLAYER_NAME];
	format(string, sizeof(string), "Nouvelle de la Lotterie: Aujourd'hui le numero gagnant était: %d.", number);
    OOCOff(COLOR_WHITE, string);
    for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pLottoNr] > 0)
		    {
			    if(PlayerInfo[i][pLottoNr] == number)
			    {
			        JackpotFallen = 1;
			        GetPlayerName(i, winner, sizeof(winner));
					format(string, sizeof(string), "Nouvelle de la Lotterie: %s à gagné le Jackpot de $%d avec son Ticket de lotterie.", winner, Jackpot);
					OOCOff(COLOR_DBLUE, string);
					format(string, sizeof(string), "Vous avez gagné $%d avec votre ticket de lotterie.", Jackpot);
					SendClientMessage(i, COLOR_YELLOW, string);
					//ConsumingMoney[i] = 1;
					SafeGivePlayerMoney(i, Jackpot);
			    }
			    else
			    {
			        SendClientMessage(i, COLOR_WHITE, "Votre ticket de Lotterie n'était pas gagnant...");
			    }
			}
			PlayerInfo[i][pLottoNr] = 0;
		}
	}
	if(JackpotFallen)
	{
	    new rand = random(125000); rand += 15789;
	    Jackpot = rand;
	    SaveStuff();
	    format(string, sizeof(string), "Nouvelle de la Lotterie: Le nouveau de Jackpot est de $%d.", Jackpot);
		OOCOff(COLOR_WHITE, string);
	}
	else
	{
	    new rand = random(15000); rand += 2158;
	    Jackpot += rand;
	    SaveStuff();
	    format(string, sizeof(string), "Nouvelle de la Lotterie: Le Jackpot a été levé à $%d.", Jackpot);
		OOCOff(COLOR_DBLUE, string);
	}
	return 1;
}

//------------------------------------------------------------------------------------------------------
public OnPlayerDisconnect(playerid, reason)
{
    if(IsPlayerInAnyVehicle(playerid))
    {
	    new tmpcar = GetPlayerVehicleID(playerid);
		quelquncoffre[tmpcar] = 0;
 	}
 	if(PompeEssence[playerid] != 255)
	{
	    KillTimer(TimerEssence[playerid]);
	}
 	lemeccoffre[playerid] = 0;
	new astring[256];
    new plname[MAX_PLAYER_NAME];
    GetPlayerName(playerid, plname, sizeof(plname));
	gActivePlayers[playerid]--;
	numplayers--;
	TextDrawDestroy(Textdraw52[playerid]);
	//AFKMin[playerid] = 0;
	//KillTimer(playerspeedtimer[playerid]);
    //KillTimer(CrashTimer[playerid]);
    KillTimer(letimerdelaceinture[playerid])
    IsSpeeding[playerid] = false;
    LastHealth[playerid] = NULL;
    LastSpeed[playerid] = NULL;
    KillTimer(MoneyTimer[playerid]);
	/*for(new p=0;p<sizeof(AFKPos[]);p++)
	{
	    AFKPos[playerid][p] = 0;
	}*/
	if(missileactiver[playerid] == 1)
 	{
    	new Float:x,Float:y,Float:z;
        GetObjectPos(Objet[playerid],x,y,z);
		Bombardement(playerid,missileObjet[playerid],x,y,z);
 	}
	if(achatvoiture[playerid] == 1)
	{
	    KillTimer(voitureenlivraison[playerid]);
	}
	if(OnDuty[playerid]==1)
    {
        Flicservice --;
        format(astring, sizeof(astring), "__________| %i Force(s) de l'ordre sont actuellement en Service |__________",Flicservice);
        if(PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
		{
    		SendClientMessageToAll(Vert, astring);
 		}
  		else
   		{
   		    SendClientMessageToAll(0x0000F6F6, astring);
		}
    	OnDuty[playerid] = 0;
	}
	if(reason == 0)
	{
	    PlayerInfo[playerid][pCrashed] = 1;
	    format(astring, sizeof(astring), "(( [%i] %s a quitté Une 2eme Chance (Crash) ))",playerid,plname);
    	ProxDetector(30.0, playerid, astring, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW);
	    for(new slot = 0; slot != 12; slot++)
	    {
	        new wep, ammo;
	        GetPlayerWeaponData(playerid, slot, wep, ammo);

	        if(wep != 0 && ammo != 0)
	        {
	            if(PlayerInfo[playerid][pGun1] == 0) { PlayerInfo[playerid][pGun1] = wep; PlayerInfo[playerid][pAmmo1] = ammo; }
	            else if(PlayerInfo[playerid][pGun2] == 0) { PlayerInfo[playerid][pGun2] = wep; PlayerInfo[playerid][pAmmo2] = ammo; }
	            else if(PlayerInfo[playerid][pGun3] == 0) { PlayerInfo[playerid][pGun3] = wep; PlayerInfo[playerid][pAmmo3] = ammo; }
	            else if(PlayerInfo[playerid][pGun4] == 0) { PlayerInfo[playerid][pGun4] = wep; PlayerInfo[playerid][pAmmo4] = ammo; }
	        }
	    }
	    OnPlayerUpdate(playerid);
	}
	else if(reason == 2)
	{
	    PlayerInfo[playerid][pKicked] = 2;
	    format(astring, sizeof(astring), "(( [%i] %s a quitté Une 2eme Chance (Kick) ))",playerid,plname);
	    ProxDetector(30.0, playerid, astring, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW);
	}
	else
	{
	format(astring, sizeof(astring), "(( [%i] %s a quitté Une 2eme Chance (Déconnection) ))",playerid,plname);
	ProxDetector(30.0, playerid, astring, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW);
	if(PlayerInfo[playerid][pLocal] == 255 && PlayerInfo[playerid][pTut] == 1 || GetPlayerInterior(playerid) == 0 && PlayerInfo[playerid][pTut] == 1)
	{
	    if(PlayerInfo[playerid][pTante] > 0)
	    {
	        PlayerInfo[playerid][pTante] --;
		}
		else
		{
	    	//PlayerInfo[playerid][pDormir] = 1;
	    }
	}
	OnPlayerUpdate(playerid);
	}
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        if(TaxiAccepted[i] < 999)
	        {
		        if(TaxiAccepted[i] == playerid)
		        {
		            TaxiAccepted[i] = 999;
		            GameTextForPlayer(i, "~w~La Personne qui attendait un taxi~n~~r~à quitté le jeu.", 5000, 1);
		            TaxiCallTime[i] = 0;
		            DisablePlayerCheckpoint(i);
		        }
	        }
	        else if(BusAccepted[i] < 999)
	        {
		        if(BusAccepted[i] == playerid)
		        {
		            BusAccepted[i] = 999;
		            GameTextForPlayer(i, "~w~La Personne qui attendait un Bus~n~~r~à quitté le jeu.", 5000, 1);
		            BusCallTime[i] = 0;
		            DisablePlayerCheckpoint(i);
		        }
	        }
	    }
	}
	if(RaceParticipant[playerid]>=1)
		{
			if(Participants==1)
			{
				endrace();
			}
			if(RaceParticipant[playerid] < 3 && RaceStart == 0 && !(RaceParticipant[playerid]==3 && RaceStart == 1))
			{
		    	ReadyRefresh();
			}
	    	Participants--;
	    	RaceParticipant[playerid]=0;
	    	DisablePlayerRaceCheckpoint(playerid);
		}
		if(RaceBuilders[playerid] != 0)
		{
   	    	DisablePlayerRaceCheckpoint(playerid);
	    	for(new i;i<BCurrentCheckpoints[b(playerid)];i++)
	    	{
    	 		BRaceCheckpoints[b(playerid)][i][0]=0.0;
   	        	BRaceCheckpoints[b(playerid)][i][1]=0.0;
	        	BRaceCheckpoints[b(playerid)][i][2]=0.0;
			}
			BuilderSlots[b(playerid)] = MAX_PLAYERS+1;
			RaceBuilders[playerid] = 0;
    	}
	if(TransportCost[playerid] > 0 && TransportDriver[playerid] < 999)
	{
	    if(IsPlayerConnected(TransportDriver[playerid]))
		{
		    new string[64];
		    TransportMoney[TransportDriver[playerid]] += TransportCost[playerid];
		    TransportTime[TransportDriver[playerid]] = 0;
		    TransportCost[TransportDriver[playerid]] = 0;
		    format(string, sizeof(string), "~w~Le passager est sortit~n~~g~ Gain: $%d",TransportCost[playerid]);
		    GameTextForPlayer(TransportDriver[playerid], string, 5000, 1);
		}
	}
	if(GotHit[playerid] > 0)
	{
	    if(GetChased[playerid] < 999)
	    {
	        if(IsPlayerConnected(GetChased[playerid]))
	        {
	        	SendClientMessage(GetChased[playerid], COLOR_YELLOW, "Contrat Annulé. Le Joueur concerné a quitté le jeu.");
	            GoChase[GetChased[playerid]] = 999;
			}
	    }
	}
	if(PlayerPaintballing[playerid] != 0)
	{
	    PaintballPlayers --;
	}
	if(PlayerKarting[playerid] > 0 && PlayerInKart[playerid] > 0)
	{
	    KartingPlayers --;
	}
	if(PlayersChannel[playerid] < 999)
	{
		IRCInfo[PlayersChannel[playerid]][iPlayers] -= 1;
	}
	if(HireCar[playerid] != 299)
	{
		gLastDriver[HireCar[playerid]] = 998;
		gCarLock[HireCar[playerid]] = 0;
		UnLockCar(HireCar[playerid]);
		if(reason != 0)
		{
			SetVehicleToRespawn(HireCar[playerid]);
		}
	}
	if(GangCar[playerid] != 512)
	{
		gLastDriver[GangCar[playerid]] = 520;
		gCarLock[GangCar[playerid]] = 0;
		UnLockCar(GangCar[playerid]);
	}
	if (gLastCar[playerid] > 0)
	{
		gLastDriver[gLastCar[playerid]] = 999;
		if(PlayerInfo[playerid][pPhousekey] != gLastCar[playerid]-1)
		{
			gCarLock[gLastCar[playerid]] = 0;
			UnLockCar(gLastCar[playerid]);
		}
	}
	if(PlayerBoxing[playerid] > 0)
	{
	    if(Boxer1 == playerid)
	    {
	        if(IsPlayerConnected(Boxer2))
	        {
	        	PlayerBoxing[Boxer2] = 0;
	        	SetPlayerPos(Boxer2, 765.8433,3.2924,1000.7186);
	        	SetPlayerInterior(Boxer2, 5);
	        	PlayerInfo[Boxer2][pInt] = 5;
	        	GameTextForPlayer(Boxer2, "~r~Match Interrompu", 5000, 1);
			}
	    }
	    else if(Boxer2 == playerid)
	    {
	        if(IsPlayerConnected(Boxer1))
	        {
	        	PlayerBoxing[Boxer1] = 0;
	        	SetPlayerPos(Boxer1, 765.8433,3.2924,1000.7186);
	        	SetPlayerInterior(Boxer1, 5);
	        	PlayerInfo[Boxer2][pInt] = 5;
	        	GameTextForPlayer(Boxer1, "~r~Match Interrompu", 5000, 1);
			}
	    }
	    InRing = 0;
     	RoundStarted = 0;
		Boxer1 = 255;
		Boxer2 = 255;
		TBoxer = 255;
	}
    if(TransportDuty[playerid] == 1)
	{
		TaxiDrivers -= 1;
	}
    else if(TransportDuty[playerid] == 2)
	{
		BusDrivers -= 1;
	}
/*	if(PlayerInfo[playerid][pJob] == 11)
	{
	    if(JobDuty[playerid] == 1) { Medics -= 1; }
	}*/
	else if(PlayerInfo[playerid][pJob] == 7)
	{
	    if(JobDuty[playerid] == 1) { Mechanics -= 1; }
	}
	else if(PlayerInfo[playerid][pJob] == 17)
	{
		if(JobDuty[playerid] == 1) { PizzaBoys -= 1; }
	}
	if (PlayerInfo[playerid][pRoadblock] != 0)
	{
		RemoveRoadblock(playerid);
	}
	BusrouteEast[playerid][0] = 0;
	BusrouteWest[playerid][0] = 0;
	AirRoute[playerid] = 0;
	TrainRoute[playerid] = 0;
    return 1;
	}

public GateClose(playerid)
{
      MoveStreamObject(pdgate1,1589.053344,-1638.123168,14.122960, 0.97);
      PlayerPlaySound(playerid, 1153, 1589.053344,-1638.123168,14.122960);
      return 1;
/*}

public GateClose2()
{
      MoveStreamObject(armygate1,2720.3772, -2409.7523, 12.6, 2.5);
      MoveStreamObject(armygate2,2720.3772, -2508.3069, 12.6, 2.5);
      return 1;*/
}

public GateClose3()
{
      MoveStreamObject(fbigate, 1534.9020,-1451.5979,14.4882, 1.5);
      return 1;
}

public GateClose4()
{
      MoveStreamObject(hspdgate, 1643.3379,-1714.9338,14.4067, 1.5);
      return 1;
}

public GateClose5()
{
      DestroyStreamObject( pdgate3 );
      pdgate2 = CreateObject(968,1544.700317,-1630.735717,13.096980,-1.000000,-91.000000,269.972869);
      return 1;
}

public GateClose6()
{
      MoveStreamObject(lucianogate, 1246.0033,-767.3727,91.1473, 1.5);
	  return 1;
}

public GrilleFouriere(playerid)
{
      MoveStreamObject(grillefouriere, 2203.928125, -1977.191040, 15.331029, 1.5);
      PlayerPlaySound(playerid, 1153, 2203.928125, -1977.191040, 15.331029);
	  return 1;
}

public GrilleGarage(playerid)
{
	  MoveStreamObject(grillegarage, 2007.544921875, -2120.4736328125, 14.262490272522, 1.5);
	  PlayerPlaySound(playerid, 1153, 2007.544921875, -2120.4736328125, 14.262490272522);
	  return 1;
}

/*public GateClose7()
{
      MoveStreamObject(iorgate, 2796.1454,-1600.2020,10.1297, 1.5);
	  return 1;
}*/

public elevator1(playerid)
{
      SetPlayerPos(playerid,1174.9591,-1374.8761,23.9736);
      return 1;
}

public elevator2(playerid)
{
      SetPlayerPos(playerid,1174.9100,-1361.7330,13.9876);
	  return 1;
}

public SetPlayerSpawn(playerid)
{
    if(IsPlayerNPC(playerid)) return 1;
	if(IsPlayerConnected(playerid))
	{
	    SetPlayerSkin(playerid, PlayerInfo[playerid][pChar]);
	    if(PlayerInfo[playerid][pTut] == 0)
	    {
			gOoc[playerid] = 1; gNews[playerid] = 1; gFam[playerid] = 1;
			SetPlayerInterior(playerid, 3);
			PlayerInfo[playerid][pInt] = 3;
			SetPlayerPos(playerid, 330.6825,163.6688,1014.1875);
			SetPlayerFacingAngle(playerid, 280);
			TogglePlayerControllable(playerid, 0);
			RegistrationStep[playerid] = 1;
			SendClientMessage(playerid, COLOR_YELLOW, "Veuillez remplir ce formulaire s'il vous plait. Il nous permettra d'avoir plus d'informations sur vous.");
			SendClientMessage(playerid, 0x87C1D7F6, "~~~~~~~~~~~~~~~~Etape 1~~~~~~~~~~~~~~~~");
			SendClientMessage(playerid, COLOR_WHITE, "Êtes vous un Homme ou une Femme ? (Ecrivez ce que vous êtes)");
			SendClientMessage(playerid, 0x87C1D7F6, "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
			return 1;
	    }
	    if(AdminSpec[playerid] == 1)
		{
		    return 1;
		}
		new rand;
		new house = PlayerInfo[playerid][pPhousekey];
		if(PlayerPaintballing[playerid] != 0)
		{
		    SafeResetPlayerWeapons(playerid);
      		SafeGivePlayerWeapon(playerid, 29, 999);
		    rand = random(sizeof(PaintballSpawns));
			SetPlayerPos(playerid, PaintballSpawns[rand][0], PaintballSpawns[rand][1], PaintballSpawns[rand][2]);
		    return 1;
		}
		if(PlayerInfo[playerid][pskinf] >= 1)
		{
            SetPlayerSkin(playerid, 280);
		}
		if(PlayerInfo[playerid][pskinfm] >= 1)
		{
            SetPlayerSkin(playerid, 274);
		}
		if(PlayerInfo[playerid][pJob] == 3)
		{
            SafeGivePlayerWeapon(playerid, 10, 500); // God Mauve
		}
		if(PlayerInfo[playerid][pJailed] == 1)
		{
		    SetPlayerInterior(playerid, 6);
		    PlayerInfo[playerid][pInt] = 6;
		    //PlayerInfo[playerid][pDormir] = 0;
			SetPlayerPos(playerid,264.6288,77.5742,1001.0391);
			TogglePlayerControllable(playerid, 0);
			SendClientMessage(playerid, COLOR_LIGHTRED, "Votre peine de prison n'est pas terminée, retour en prison.");
			return 1;
		}
		if(PlayerInfo[playerid][pJailed] == 2)
		{
            SetPlayerInterior(playerid, 6);
		    PlayerInfo[playerid][pInt] = 6;
		    //PlayerInfo[playerid][pDormir] = 0;
		    SetPlayerWorldBounds(playerid, 264.6288,77.5742,1001.0391,1798.7453);
			SetPlayerPos(playerid,264.6288,77.5742,1001.0391);
			TogglePlayerControllable(playerid, 0);
			SendClientMessage(playerid, COLOR_LIGHTRED, "Votre peine de prison pour comportement NO RP n'est pas terminée, retour en prison.");
			return 1;
		}
		if(MedicBill[playerid] == 1 && PlayerInfo[playerid][pJailed] == 0 && PlayerPaintballing[playerid] == 0)
		{
            if (AdminDuty[playerid] == 1)
            {
                SetPlayerPos(playerid,1514.6956,-1674.7020,14.0469);
       		    SetPlayerInterior(playerid, 0);
		        PlayerInfo[playerid][pInt] = 0;
				return 1;
			}
			if(NoHospital[playerid] == 1)
         	{
                SendClientMessage(playerid, COLOR_WHITE, "L'hopital a été désactivé, vous ne payez pas.");
                SetPlayerPos(playerid,1514.6956,-1674.7020,14.0469);
       		    SetPlayerInterior(playerid, 0);
		        PlayerInfo[playerid][pInt] = 0;
	            return 1;
         	}
		    if(FirstSpawn[playerid] != 1)
		    {
		    	/*new string[256];
		    	new cut = deathcost; //PlayerInfo[playerid][pLevel]*deathcost;
				SafeGivePlayerMoney(playerid, -cut);
				format(string, sizeof(string), "DOC: Your Medical Bill comes to $%d, Have a nice day.", cut);
				SendClientMessage(playerid, TEAM_CYAN_COLOR, string);
				MedicBill[playerid] = 0;
				MedicTime[playerid] = 0;
				NeedMedicTime[playerid] = 0;*/
				PlayerInfo[playerid][pDeaths] += 1;
				SetPlayerHealth(playerid, 25.0);
		    	SetPlayerInterior(playerid, 3);
		    	PlayerInfo[playerid][pInt] = 3;
	        	rand = random(sizeof(gMedicSpawns));
				SetPlayerPos(playerid, gMedicSpawns[rand][0], gMedicSpawns[rand][1], gMedicSpawns[rand][2]); // Warp the player
				SetPlayerFacingAngle(playerid, 0);
	        	TogglePlayerControllable(playerid, 0);
	        	JustDied[playerid] = 1;
	        	MedicTime[playerid] = 1;
	        	ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
	        	if(PlayerInfo[playerid][pDonateRank] > 0)
	        	{
	            	NeedMedicTime[playerid] = 25;
	            	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~Veuillez patienter...", 25000, 3);
	        	}
	        	else
	        	{
	        		NeedMedicTime[playerid] = 40;
	        		GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~Veuillez patienter...", 40000, 3);
				}
	        	PlayerPlaySound(playerid, 1185, 0.0, 0.0, 0.0);
	        	//PlayerInfo[playerid][pDormir] = 0;
		    	return 1;
			}
		}
		if(JustDied[playerid] == 1)
		{
		    if(GetPlayerVirtualWorld(playerid) != 0 || PlayerInfo[playerid][pVirWorld] != 0)
      {
		        SetPlayerVirtualWorld(playerid, 0);
		        PlayerInfo[playerid][pVirWorld] = 0;
		    }
		    SetPlayerPos(playerid, 1182.5638,-1323.5256,13.5790);
		    SetPlayerFacingAngle(playerid, 270.0);
		    SetPlayerInterior(playerid,0);
		    PlayerInfo[playerid][pInt] = 0;
		    //PlayerInfo[playerid][pDormir] = 0;
		    return 1;
		}
		if(PlayerInfo[playerid][pCrashed] == 1)
		{
		    if(TutTime[playerid] == 0 && PlayerInfo[playerid][pTut] == 1 && RegistrationStep[playerid] == 0 && AfterTutorial[playerid] == 0 && FirstSpawn[playerid] == 1)
		    {
		        new string[512];
		        SetPlayerVirtualWorld(playerid,PlayerInfo[playerid][pVirWorld]);
		        SetPlayerInterior(playerid,PlayerInfo[playerid][pInt]);
		    	SetPlayerPos(playerid, PlayerInfo[playerid][pPos_x], PlayerInfo[playerid][pPos_y], PlayerInfo[playerid][pPos_z] + 1);
		    	SendClientMessage(playerid, COLOR_WHITE, "Crash, retour ou vous avez crash.");
		    	format(string, sizeof(string), "~p~Crash~n~~w~Retour ou vous avez crash");
		    	ConvertirTexte (string);
		    	GameTextForPlayer(playerid, string, 5000, 1);
		    	return 1;
			}
        }
		if(house !=255)
		{
		    if(SpawnChange[playerid]) //If 1, then you get to your house, else spawn somewhere else
		    {
				SetPlayerToTeamColor(playerid);
				SetPlayerInterior(playerid,HouseInfo[house][hInt]);
				SetPlayerVirtualWorld(playerid,HouseInfo[house][hWorld]);
				SetPlayerPos(playerid, HouseInfo[house][hExitx], HouseInfo[house][hExity],HouseInfo[house][hExitz]); // Warp the player
				PlayerInfo[playerid][pLocal] = house;
				HouseEntered[playerid] = house;
				PlayerInfo[playerid][pInt] = HouseInfo[house][hInt];
				return 1;
			}
		}
		if(PlayerInfo[playerid][pMember] == 7 || PlayerInfo[playerid][pLeader] == 7)//Mayor spawn
		{
		    SetPlayerToTeamColor(playerid);
		    SetPlayerInterior(playerid, 3);
		    SetPlayerPos(playerid, 356.2998,151.9914,1025.7891);
		    PlayerInfo[playerid][pInt] = 3;
			PlayerInfo[playerid][pLocal] = 241;
		    return 1;
		}
		if (PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)//Police Force spawn
		{
			SetPlayerToTeamColor(playerid);
			SetPlayerInterior(playerid,6);
		    rand = random(sizeof(gCopPlayerSpawns));
			SetPlayerPos(playerid, gCopPlayerSpawns[rand][0], gCopPlayerSpawns[rand][1], gCopPlayerSpawns[rand][2]); // Warp the player
			SetPlayerFacingAngle(playerid, 270.0);
			PlayerInfo[playerid][pInt] = 6;
			return 1;
	    }
	    if (PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2)//FBI spawn
		{
			SetPlayerToTeamColor(playerid);
			SetPlayerInterior(playerid,3);
			SetPlayerPos(playerid, 299.7097,183.1322,1007.1719);
			SetPlayerFacingAngle(playerid, 90);
			PlayerInfo[playerid][pInt] = 3;
			return 1;
	    }
		if (PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)//National Guard spawn
		{
		    SetPlayerToTeamColor(playerid);
		    SetPlayerInterior(playerid, 0);
		    SetPlayerPos(playerid, 2731.5229,-2451.3643,17.5937);
		    PlayerInfo[playerid][pInt] = 0;
		    return 1;
		}
		if (PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pLeader] == 4)//Fire/Ambulance spawn
		{
		    SetPlayerToTeamColor(playerid);
            SetPlayerPos(playerid, -3436.2021,476.3759,57.6132);
	     	SetTimerEx("chargement",2000,0,"i",playerid);
	    	TogglePlayerControllable(playerid, 0);
	    	SetPlayerInterior(playerid,0);
	    	SetPlayerFacingAngle(playerid, 0);
	    	PlayerInfo[playerid][pInt] = 0;
		    return 1;
		}
		if (PlayerInfo[playerid][pMember] == 5 || PlayerInfo[playerid][pLeader] == 5)//Vagos spawn
		{
		    SetPlayerToTeamColor(playerid);
		    SetPlayerInterior(playerid, 5);
		    SetPlayerPos(playerid, 2345.6570,-1185.5266,1027.9766);
		    PlayerInfo[playerid][pInt] = 5;
		    return 1;
		}
		if (PlayerInfo[playerid][pMember] == 6 || PlayerInfo[playerid][pLeader] == 6)//La Famiglia Vercetti spawn
		{
		    SetPlayerToTeamColor(playerid);
		    SetPlayerInterior(playerid, 3);
		    SetPlayerPos(playerid, 962.8333,-60.0172,1001.1246);
		    PlayerInfo[playerid][pInt] = 3;
		    return 1;
		}
	    if (PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8) //Hitman spawn
	    {
	        SetPlayerToTeamColor(playerid);
			SetPlayerPos(playerid, 948.3666,2107.0986,1011.0234);
			SetPlayerInterior(playerid,1);
			PlayerInfo[playerid][pInt] = 1;
	        return 1;
	    }
	    if (PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9) // L.A News Spawn
	    {
	        SetPlayerToTeamColor(playerid);
	        SetPlayerInterior(playerid,3);
			SetPlayerPos(playerid, 1802.5034,-1292.7516,13.5085);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerInterior(playerid,0);
			SafeGivePlayerWeapon(playerid, 43, 50);
	        return 1;
	    }
	    if (PlayerInfo[playerid][pJob] == 13) //Taxi Cab Company spawn
	    {
	        SetPlayerToTeamColor(playerid);
			SetPlayerPos(playerid, 1754.99,-1894.19,13.55);
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
	        return 1;
	    }
	    if (PlayerInfo[playerid][pMember] == 14 || PlayerInfo[playerid][pLeader] == 14)//Biker spawn
		{
		    SetPlayerToTeamColor(playerid);
		    SetPlayerInterior(playerid, 0);
		    SetPlayerPos(playerid, 854.7837,-593.0181,17.9729);
		    PlayerInfo[playerid][pInt] = 0;
		    return 1;
		}
		if (PlayerInfo[playerid][pMember] == 15 || PlayerInfo[playerid][pLeader] == 15)//Ballas spawn
		{
		    SetPlayerToTeamColor(playerid);
		    SetPlayerInterior(playerid, 5);
		    SetPlayerPos(playerid, 331.1232,1128.5670,1083.8828);
		    PlayerInfo[playerid][pInt] = 5;
		    return 1;
		}
		if (PlayerInfo[playerid][pMember] == 16 || PlayerInfo[playerid][pLeader] == 16)//Groove spawn
		{
		    SetPlayerToTeamColor(playerid);
		    SetPlayerInterior(playerid, 3);
		    SetPlayerPos(playerid, 2493.7427,-1710.4219,1014.7422);
		    PlayerInfo[playerid][pInt] = 5;
		    return 1;
		}
		if (PlayerInfo[playerid][pMember] == 17 || PlayerInfo[playerid][pLeader] == 17)//Corleone spawn
		{
		    SetPlayerToTeamColor(playerid);
		    SetPlayerInterior(playerid, 5);
		    SetPlayerPos(playerid, 1263.4788,-784.7917,1091.9063);
		    PlayerInfo[playerid][pInt] = 5;
		    return 1;
		}
		if (PlayerInfo[playerid][pMember] == 18 || PlayerInfo[playerid][pLeader] == 18)//CIA spawn
		{
		    SetPlayerToTeamColor(playerid);
		    SetPlayerInterior(playerid, 10);
		    SetPlayerPos(playerid, 246.62,112.1,1003.2);
		    PlayerInfo[playerid][pInt] = 10;
		    return 1;
		}
	    /*if(IsAnInstructor(playerid) || PlayerInfo[playerid][pMember] == 11 || PlayerInfo[playerid][pLeader] == 11) //Driving/Flying School spawn
	    {
		    SetPlayerToTeamColor(playerid);
		    SetPlayerInterior(playerid,3);
			SetPlayerPos(playerid, 1494.4991,1308.9163,1093.2845);
			SetPlayerFacingAngle(playerid, 180);
			PlayerInfo[playerid][pInt] = 3;
	        return 1;
	    }*/
	    if ((gTeam[playerid]) == 1)
	    {
			SetPlayerToTeamColor(playerid);
			rand = random(sizeof(gMedPlayerSpawns));
			SetPlayerPos(playerid, gMedPlayerSpawns[rand][0], gMedPlayerSpawns[rand][1], gMedPlayerSpawns[rand][2]); // Warp the player
			SetPlayerFacingAngle(playerid, 270.0);
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			return 1;
		}
		if(PlayerInfo[playerid][pFMember] != 255)
		{
		    new family = PlayerInfo[playerid][pFMember];
		    SetPlayerToTeamColor(playerid);
		    SetPlayerInterior(playerid, FamilyInfo[family][FamilyInterior]);
		    SetPlayerPos(playerid, FamilyInfo[family][FamilySpawn][0],FamilyInfo[family][FamilySpawn][1],FamilyInfo[family][FamilySpawn][2]);
		    SetPlayerFacingAngle(playerid, FamilyInfo[family][FamilySpawn][3]);
		    return 1;
		}
	    else
	    {
			SetPlayerToTeamColor(playerid);
			SetPlayerPos(playerid,1743.1295,-1862.9645,13.5757);
			SetPlayerFacingAngle(playerid, 0);
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			return 1;
		}
	}
	return 1;
}
//------------------------------------------------------------------------------------------------------

public OnPlayerDeath(playerid, killerid, reason)
{
	new name[MAX_PLAYER_NAME];
	//new name2[MAX_PLAYER_NAME];
	new string[256];
	//new dmessage[128];
	//new deathreason[20];
	new playercash;
	new victimteam;
	new Float:px,Float:py,Float:pz;
	new killerteam;
    InShamal[playerid] = 0;
	victimteam = gTeam[playerid];
	killerteam = gTeam[killerid];
	gPlayerSpawned[playerid] = 0;
	assert( AntiFlood_Check( playerid ) );
	PlayerInfo[playerid][pInvWeapon] = 0;
 	PlayerInfo[playerid][pInvAmmo] = 0;
	GetPlayerName(playerid, name, sizeof(name));
	PlayerInfo[playerid][pLocal] = 255;
	GetPlayerPos(playerid, px, py, pz);
	DropPlayerWeapons(playerid);
	IsAtEvent[playerid] = 0;
	ilbraque[playerid] = 0;
	if(AdminDuty[playerid] == 1) return 1;
	if(killerid != 255)
	{
		if(GetPlayerState(killerid) == 2)
		{
		    if(ProxDetectorS(20, killerid, playerid))
		    {
		        if(!IsPlayerInAnyVehicle(playerid))
		        {
					if(PlayerInfo[killerid][pMember] == 1||PlayerInfo[killerid][pLeader] == 1||PlayerInfo[killerid][pMember] == 2||PlayerInfo[killerid][pLeader] ==2)
		    		{
		    		    SendClientMessage(killerid, COLOR_YELLOW, "Vous avez tuer quelqu'un par Drive By. Evité que ça se reproduise.");
						return 1;
					}
					SetPlayerCriminal(killerid,255,"Homicide involontaire");
					SetPlayerWantedLevel(killerid, GetPlayerWantedLevel(killerid)+1);
					return 1;
				}
			}
		}
	}
	if (PlayerInfo[killerid][pAdmin] < 1)
	{
		if(reason == 38)
		{
			new kstring[128];
			new kickname[MAX_PLAYER_NAME];
			if(IsPlayerConnected(killerid))
			{
				GetPlayerName(killerid, kickname, sizeof(kickname));
				format(string, 256, "[%d]%s a killé [%d]%s avec un minigun.",killerid,kickname,playerid,name);
				ABroadCast(COLOR_LIGHTRED,string,1);
				printf("%s", kstring);
				//Kick(killerid);
				ResetPlayerWeapons(killerid);
				SendClientMessage(playerid,COLOR_RED,"Le joueur qui t'as tué a été informé aux administrateurs");
				SendClientMessage(killerid,COLOR_RED,"Attention a toi, les administrateurs on été prevenu de ton cheat arme");
				SendClientMessage(killerid,COLOR_RED,"Si tu recommences, tu te feras ban.");
                format(string, 256, "[WARNING] Le joueur [%d][%s] A tuer [%d][&s] Avec une arme interdite !",killerid,kickname,playerid,name);
                SendAdminMessage(COLOR_YELLOW,string);
				pretakick ++;
				if(pretakick == 3)
				{
					Kick(killerid);
					pretakick = 0;
				}
			}
		}
		if(reason == 35)
		{
			new kstring[128];
			new kickname[MAX_PLAYER_NAME];
			if(IsPlayerConnected(killerid))
			{
				GetPlayerName(killerid, kickname, sizeof(kickname));
				format(string, 256, "[%d]%s a tué un joueur avec un lance-flamme et sont ip a été banni.",killerid,kickname);
				ABroadCast(COLOR_LIGHTRED,string,1);
				printf("%s", kstring);
				//Ban(killerid);
				ResetPlayerWeapons(killerid);
				SendClientMessage(playerid,COLOR_RED,"Le joueur qui t'as tué a été informé aux administrateurs");
				SendClientMessage(killerid,COLOR_RED,"Attention a toi, les administrateurs on été prevenu de ton cheat arme");
				SendClientMessage(killerid,COLOR_RED,"Si tu recommences, tu te feras ban.");
                format(string, 256, "[WARNING] Le joueur [%d][%s] A tuer [%d][&s] Avec une arme interdite !",killerid,kickname,playerid,name);
                SendAdminMessage(COLOR_YELLOW,string);
				pretakick ++;
				if(pretakick == 3)
				{
					Kick(killerid);
					pretakick = 0;
				}
			}
		}
		if(reason == 9)
		{
			new kstring[128];
			new kickname[MAX_PLAYER_NAME];
			if(IsPlayerConnected(killerid))
			{
				GetPlayerName(killerid, kickname, sizeof(kickname));
				format(string, 256, "[%d]%s a tué un joueur avec une tronçoneuse et sont ip a été banni.",killerid,kickname);
				ABroadCast(COLOR_LIGHTRED,string,1);
				printf("%s", kstring);
				//Ban(killerid);
				ResetPlayerWeapons(killerid);
				SendClientMessage(playerid,COLOR_RED,"Le joueur qui t'as tué a été informé aux administrateurs");
				SendClientMessage(killerid,COLOR_RED,"Attention a toi, les administrateurs on été prevenu de ton cheat arme");
				SendClientMessage(killerid,COLOR_RED,"Si tu recommences, tu te feras ban.");
                format(string, 256, "[WARNING] Le joueur [%d][%s] A tuer [%d][&s] Avec une arme interdite !",killerid,kickname,playerid,name);
                SendAdminMessage(COLOR_YELLOW,string);
				pretakick ++;
				if(pretakick == 3)
				{
					Kick(killerid);
					pretakick = 0;
				}
			}
		}
		if(reason == 16)
		{
			new kstring[128];
			new kickname[MAX_PLAYER_NAME];
			if(IsPlayerConnected(killerid))
			{
				GetPlayerName(killerid, kickname, sizeof(kickname));
				format(string, 256, "[%d]%s a tué un joueur avec une/des grenades et sont ip a été banni.",killerid,kickname);
				ABroadCast(COLOR_LIGHTRED,string,1);
				printf("%s", kstring);
				//Ban(killerid);
				ResetPlayerWeapons(killerid);
				SendClientMessage(playerid,COLOR_RED,"Le joueur qui t'as tué a été informé aux administrateurs");
				SendClientMessage(killerid,COLOR_RED,"Attention a toi, les administrateurs on été prevenu de ton cheat arme");
				SendClientMessage(killerid,COLOR_RED,"Si tu recommences, tu te feras ban.");
                format(string, 256, "[WARNING] Le joueur [%d][%s] A tuer [%d][&s] Avec une arme interdite !",killerid,kickname,playerid,name);
                SendAdminMessage(COLOR_YELLOW,string);
				pretakick ++;
				if(pretakick == 3)
				{
					Kick(killerid);
					pretakick = 0;
				}
			}
		}
		if(reason == 18)
		{
			new kstring[128];
			new kickname[MAX_PLAYER_NAME];
			if(IsPlayerConnected(killerid))
			{
				GetPlayerName(killerid, kickname, sizeof(kickname));
				format(string, 256, "[%d]%s a tué un joueur avec un coktail molotov et sont ip a été banni.",killerid,kickname);
				ABroadCast(COLOR_LIGHTRED,string,1);
				printf("%s", kstring);
				//Ban(killerid);
				ResetPlayerWeapons(killerid);
				SendClientMessage(playerid,COLOR_RED,"Le joueur qui t'as tué a été informé aux administrateurs");
				SendClientMessage(killerid,COLOR_RED,"Attention a toi, les administrateurs on été prevenu de ton cheat arme");
				SendClientMessage(killerid,COLOR_RED,"Si tu recommences, tu te feras ban.");
                format(string, 256, "[WARNING] Le joueur [%d][%s] A tuer [%d][&s] Avec une arme interdite !",killerid,kickname,playerid,name);
                SendAdminMessage(COLOR_YELLOW,string);
				pretakick ++;
				if(pretakick == 3)
				{
					Kick(killerid);
					pretakick = 0;
				}
			}
		}
		if(reason == 28)
		{
			new kstring[128];
			new kickname[MAX_PLAYER_NAME];
			if(IsPlayerConnected(killerid))
			{
				GetPlayerName(killerid, kickname, sizeof(kickname));
				format(string, 256, "[%d]%s a tué un joueur avec un uzi, surveillez-le.",killerid,kickname);
				ABroadCast(COLOR_LIGHTRED,string,1);
				printf("%s", kstring);
				ResetPlayerWeapons(killerid);
				SendClientMessage(playerid,COLOR_RED,"Le joueur qui t'as tué a été informé aux administrateurs");
				SendClientMessage(killerid,COLOR_RED,"Attention a toi, les administrateurs on été prevenu de ton cheat arme");
				SendClientMessage(killerid,COLOR_RED,"Si tu recommences, tu te feras ban.");
                format(string, 256, "[WARNING] Le joueur [%d][%s] A tuer [%d][&s] Avec une arme interdite !",killerid,kickname,playerid,name);
                SendAdminMessage(COLOR_YELLOW,string);
				pretakick ++;
				if(pretakick == 3)
				{
					Kick(killerid);
					pretakick = 0;
				}
			}
		}
		if(reason == 32)
		{
			new kstring[128];
			new kickname[MAX_PLAYER_NAME];
			if(IsPlayerConnected(killerid))
			{
				GetPlayerName(killerid, kickname, sizeof(kickname));
				format(string, 256, "[%d]%s a tué un joueur avec un tec9, surveillez-le.",killerid,kickname);
				ABroadCast(COLOR_LIGHTRED,string,1);
				printf("%s", kstring);
				ResetPlayerWeapons(killerid);
				SendClientMessage(playerid,COLOR_RED,"Le joueur qui t'as tué a été informé aux administrateurs");
				SendClientMessage(killerid,COLOR_RED,"Attention a toi, les administrateurs on été prevenu de ton cheat arme");
				SendClientMessage(killerid,COLOR_RED,"Si tu recommences, tu te feras ban.");
                format(string, 256, "[WARNING] Le joueur [%d][%s] A tuer [%d][&s] Avec une arme interdite !",killerid,kickname,playerid,name);
                SendAdminMessage(COLOR_YELLOW,string);
				pretakick ++;
				if(pretakick == 3)
				{
					Kick(killerid);
					pretakick = 0;
				}
			}
		}
		if(reason == 36)
		{
			new kstring[128];
			new kickname[MAX_PLAYER_NAME];
			if(IsPlayerConnected(killerid))
			{
				GetPlayerName(killerid, kickname, sizeof(kickname));
				format(string, 256, "[%d]%s a tué un joueur avec un lance roquette et son IP a été banni.",killerid,kickname);
				ABroadCast(COLOR_LIGHTRED,string,1);
				printf("%s", kstring);
				//Ban(killerid);
				ResetPlayerWeapons(killerid);
				SendClientMessage(playerid,COLOR_RED,"Le joueur qui t'as tué a été informé aux administrateurs");
				SendClientMessage(killerid,COLOR_RED,"Attention a toi, les administrateurs on été prevenu de ton cheat arme");
				SendClientMessage(killerid,COLOR_RED,"Si tu recommences, tu te feras ban.");
                format(string, 256, "[WARNING] Le joueur [%d][%s] A tuer [%d][&s] Avec une arme interdite !",killerid,kickname,playerid,name);
                SendAdminMessage(COLOR_YELLOW,string);
				pretakick ++;
				if(pretakick == 3)
				{
					Kick(killerid);
					pretakick = 0;
				}
			}
		}
	}
	if (gPlayerCheckpointStatus[playerid] > 4 && gPlayerCheckpointStatus[playerid] < 11)
	{
		DisablePlayerCheckpoint(playerid);
		gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
	}
  	new arme[70];
	if(reason == 0) { arme = " Coup de Point."; }
	else if(reason == 1) { arme = " Point Américain."; }
	else if(reason == 2) { arme = " Club de Golf."; }
	else if(reason == 3) { arme = " Matraque."; }
	else if(reason == 4) { arme = " Couteau."; }
	else if(reason == 5) { arme = " Batte de Baseball."; }
	else if(reason == 6) { arme = " Pelle."; }
	else if(reason == 7) { arme = " Queue de Billard."; }
	else if(reason == 8) { arme = " Katana."; }
	else if(reason == 10) { arme = " Sex Toy."; }
	else if(reason == 11) { arme = " Sex Toy."; }
	else if(reason == 12) { arme = " Sex Toy."; }
	else if(reason == 13) { arme = " Sex Toy."; }
	else if(reason == 16) { arme = " Grenade."; }
	else if(reason == 22) { arme = " Pistolet."; }
	else if(reason == 23) { arme = " Pistolet Silencieux."; }
	else if(reason == 24) { arme = " Desert Eagle."; }
	else if(reason == 25) { arme = " Fusil."; }
	else if(reason == 29) { arme = " MP5."; }
	else if(reason == 30) { arme = " AK47."; }
	else if(reason == 31) { arme = " M4."; }
	else if(reason == 34) { arme = " Sniper."; }
	else if (reason == 41) { arme = " Spray."; }
	if (PlayerInfo[killerid][pMember] == 0 && PlayerInfo[killerid][pLeader] == 0)
    {
   	new tueurid[MAX_PLAYER_NAME];
    GetPlayerName(killerid, tueurid, sizeof(tueurid));
   	new tuerid[MAX_PLAYER_NAME];
    GetPlayerName(playerid, tuerid, sizeof(tuerid));
    format(string, sizeof(string), "Le civil %s à tué %s avec un(e) %s",tueurid, tuerid,arme);
	SendClientMessageToAll(COLOR_LIMEGREEN, string);
    }
	new caller = Mobile[playerid];
	if(caller != 255)
	{
		if(caller < 255)
		{
			SendClientMessage(caller,  COLOR_GRAD2, "   La ligne a raccrochée....");
			CellTime[caller] = 0;
			CellTime[playerid] = 0;
			Mobile[caller] = 255;
		}
		Mobile[playerid] = 255;
		CellTime[playerid] = 0;
	}
	ClearCrime(playerid);
	if(PlayerPaintballing[playerid] != 0)
	{
	    PlayerPaintballKills[killerid] ++;
	    if(PlayerPaintballKills[killerid] > PaintballWinnerKills)
	    {
	        new killer[MAX_PLAYER_NAME];
	        PaintballWinner = killerid;
	        PaintballWinnerKills = PlayerPaintballKills[killerid];
	        GetPlayerName(killerid, killer, sizeof(killer));
	        for(new i = 0; i < MAX_PLAYERS; i++)
	        {
	            if(IsPlayerConnected(i))
	            {
	                if(PlayerPaintballing[i] != 0)
	                {
	                    format(string, sizeof(string), " %s est le leader avec %d kill.",killer,PaintballWinnerKills);
						SendClientMessage(i, COLOR_WHITE, string);
	                }
	            }
	        }
	    }
	    return 1;
	}
	if(GettingCK[playerid] < 999)
	{
	    if(IsPlayerConnected(killerid))
	    {
	        if(OnCK[killerid] < 999)
	        {
	            new killer[MAX_PLAYER_NAME];
	            new dier[MAX_PLAYER_NAME];
	            GetPlayerName(playerid, dier, sizeof(dier));
				GetPlayerName(killerid, killer, sizeof(killer));
	            format(string, sizeof(string), " %s vous a Character Kill, vous ne pouvez plus jouer avec ce personnage.",killer);
	            SendClientMessage(playerid, COLOR_LIGHTRED, string);
	            format(string, sizeof(string), "* %s a Character Kill %s *",killer,dier);
	            CKLog(string);
	            BroadCast(COLOR_LIGHTRED, string);
	            PlayerInfo[playerid][pCK] = 1;
	            if(GettingCK[playerid] < 999) { GettingCK[playerid] = 999; }
	            else if(OnCK[playerid] < 999) { OnCK[playerid] = 999; }
	            if(GettingCK[killerid] < 999) { GettingCK[killerid] = 999; }
	            else if(OnCK[killerid] < 999) { OnCK[killerid] = 999; }
	            KickPlayer[playerid] = 1;
	        }
	    }
	}
	if(PlayerInfo[playerid][pHeadValue] > 0)
	{
	    if(IsPlayerConnected(killerid))
	    {
		    if(gTeam[killerid] == 10 || PlayerInfo[killerid][pLeader] == 8)
		    {
		        if(GoChase[killerid] == playerid)
		        {
		            //ConsumingMoney[killerid] = 1;
					new killer[MAX_PLAYER_NAME];
					GetPlayerName(killerid, killer, sizeof(killer));
					SafeGivePlayerMoney(killerid, PlayerInfo[playerid][pHeadValue]);
					format(string,128,"<< Hitman %s à exécuté le contrat de %s et gagne $%d >>",killer,name,PlayerInfo[playerid][pHeadValue]);
					SendFamilyMessage(8, COLOR_YELLOW, string);
					PlayerInfo[playerid][pHeadValue] = 0;
					GotHit[playerid] = 0;
					GetChased[playerid] = 999;
					GoChase[killerid] = 999;
				}
			}
		}
	}
	if(GotoCheck[playerid] == 100)//hahahaha truc.
	{
	    if(braquageencours == 1)
	    {
	        SendClientMessage(playerid, COLOR_RED, "Vous êtes mort, tout l'argent que vous avez gagné vous a été retiré.");
	        robmoney = 0;
	        ilbraque[playerid] = 0;
    	    new sendername[256];
    	    UnderscoreToSpace( sendername );
	        GetPlayerName(playerid, sendername, sizeof(sendername));
    		format(string, sizeof(string), "*** A TOUTES LES UNITES : %s est mort, l'argent a été remis à la banque. ! ***",sendername);
			SendRadioMessage(1, TEAM_RADIO_COLOR, string);
			SendRadioMessage(2, TEAM_RADIO_COLOR, string);
			SendRadioMessage(3, TEAM_RADIO_COLOR, string);
			SendRadioMessage(18, TEAM_RADIO_COLOR, string);
			GotoCheck[playerid] = 0;
		}
	}
	if(victimteam >= 4)
	{
	    if(IsPlayerConnected(killerid))
	    {
			//new killer[MAX_PLAYER_NAME];
			//GetPlayerName(killerid, killer, sizeof(killer));
			new slice = 100; //$100
			playercash = GetPlayerMoney(playerid);
			if(gTeam[killerid] != 2) { WantedPoints[killerid] += 0; } //+ 2 wanted points
			if(SafeTime[playerid] <= 0)
			{
				if(gTeam[killerid] != gTeam[playerid])
				{
					if(GetPlayerState(killerid) == 1)
					{
						PlayerInfo[killerid][pKills] = PlayerInfo[killerid][pKills] + 2;
					}
					else
					{
						PlayerInfo[killerid][pKills]++;
					}
					PlayerInfo[playerid][pKills]--;
				}
			}
			/*if (strlen(deathreason) > 0)// patch
			{
				if (((gTeam[killerid]) == 1) || ((gTeam[killerid]) == 3 && civnokill) || gTeam[killerid] == gTeam[playerid])//med kill criminal
				{
					format(string, sizeof(string), ".: %s murdered %s. (%s) :.", killer, name, deathreason);
				}
				else
				{
					format(string, sizeof(string), ".: %s murdered %s. (%s) for $%d :.", killer, name, deathreason, slice);
				}

			}
			else
			{
				if (((gTeam[killerid]) == 1) || ((gTeam[killerid]) == 3 && civnokill || gTeam[killerid] == gTeam[playerid]))
				{
					format(string, sizeof(string), ".: %s murdered %s :.", killer, name);
				}
				else
				{
					format(string, sizeof(string), ".: %s murdered %s for $%d :.", killer, name, slice);
				}
			}*/
			if (((gTeam[killerid]) == 1) || ((gTeam[killerid]) == 3 && civnokill) || (gTeam[killerid] == gTeam[playerid] && gTeam[playerid] != 4))
			{
				slice = 0;
			}
			if (((gTeam[killerid]) != 4) && ((gTeam[killerid]) == gTeam[playerid]))//no team kill
			{
				slice = 0;
			}
			if (playercash > 0)
			{
				SafeGivePlayerMoney(playerid, -slice);
			}
			else
			{
				slice = slice+500;
			}
			//SafeGivePlayerMoney(killerid, slice);
			//GameTextForPlayer(playerid, dmessage, 5000, 2);
			PlayerPlaySound(killerid, 1083, 0.0, 0.0, 0.0);
			if (((gTeam[killerid]) == 3) && reason != 49)
			{
				SetPlayerCriminal(killerid,255, "Meurtre au 1er Degré");
			}
			else if (((gTeam[killerid]) == 3) && reason == 49)
			{
				SetPlayerCriminal(killerid,255, "Attaque et Cours");
			}
		}
	}
	else if (victimteam == 2)
	{
	    if(IsPlayerConnected(killerid))
	    {
			//new killer[MAX_PLAYER_NAME];
			//GetPlayerName(killerid, killer, sizeof(killer));
			// Cop kill
			PlayerInfo[playerid][pKills]--;
			if (gTeam[killerid] == 2)//cops kill cop
			{
				//format(string,128,".: Officer %s murdered Officer %s (%s) and was sued for $%d :.",killer,name,deathreason,suecost);
				PlayerPlaySound(killerid, 1084, 0.0, 0.0, 0.0);
				SafeGivePlayerMoney(killerid, -suecost);
				SafeGivePlayerMoney(playerid, suecost+100);//+100pays hospital bill
			}
			else
			{
				//format(string,128,".: %s murdered Officer %s (%s) :.",killer,name,deathreason);
		    }
			if (gTeam[killerid] >= 3)
			{
			    WantedPoints[killerid] += 0; //+ 2 wanted points
				if(reason != 49)
				{
					SetPlayerCriminal(killerid,255, "Meurtre au 1er Degré");
				}
				else if (reason == 49)
				{
					SetPlayerCriminal(killerid,255, "Attaque et cours");
				}
			}
			if(gTeam[killerid] >= 5 && SafeTime[playerid] <= 0)
			{
				if(GetPlayerState(killerid) == 1)
				{
					PlayerInfo[killerid][pKills] = PlayerInfo[killerid][pKills]+2;
				}
				else
				{
					PlayerInfo[killerid][pKills]++;
				}
				WantedPoints[killerid]+=0;
			}
			//BroadCast(COLOR_RED, string);
		}
	}
	else if (victimteam == 3)
	{
	    if(IsPlayerConnected(killerid))
	    {
			//new killer[MAX_PLAYER_NAME];
			//GetPlayerName(killerid, killer, sizeof(killer));
			// Civ kill
			if ((gTeam[killerid]) == 2)//cops kill civ
			{
			    if(WantedLevel[playerid] < 1)
			    {
					//format(string,128,".: Officer %s murdered %s (%s) and was sued for $%d :.",killer,name,deathreason,suecost);
					PlayerPlaySound(killerid, 1084, 0.0, 0.0, 0.0);
					SafeGivePlayerMoney(killerid, -suecost);
					SafeGivePlayerMoney(playerid, suecost+10);//+100pays hospital bill
				}
			}
			else
			{
				//format(string,128,".: %s murdered %s (%s) :.",killer,name,deathreason);
				WantedPoints[killerid] += 0;
		    }
			if (((gTeam[killerid]) >= 3 || (gTeam[killerid]) == 1) && reason != 49)
			{
				SetPlayerCriminal(killerid,255, "Meurtre au 1er Degré");
			}
			else if (((gTeam[killerid]) >= 3 || (gTeam[killerid]) == 1) && reason == 49)
			{
				SetPlayerCriminal(killerid,255, "Attaque et cours");
			}
		    //BroadCast(COLOR_RED, string);
		}
	}
	else if (victimteam == 1)
	{
	    if(IsPlayerConnected(killerid))
	    {
			//new killer[MAX_PLAYER_NAME];
			//GetPlayerName(killerid, killer, sizeof(killer));
			// Civ kill
			if ((gTeam[killerid]) == 2)//cops kill civ
			{
				//format(string,128,".: Officer %s murdered Paramedic %s (%s) and was sued for $%d :.",killer,name,deathreason,suecost);
				PlayerPlaySound(killerid, 1084, 0.0, 0.0, 0.0);
				SafeGivePlayerMoney(killerid, -suecost);
				SafeGivePlayerMoney(playerid, suecost+10);//+100pays hospital bill
			}
			else if ((gTeam[killerid]) == 1)//med kill civ
			{
				//format(string,128,".: Paramedic %s murdered %s (%s) and was sued for $%d :.",killer,name,deathreason,suecost);
				PlayerPlaySound(killerid, 1084, 0.0, 0.0, 0.0);
				SafeGivePlayerMoney(killerid, -suecost);
				SafeGivePlayerMoney(playerid, suecost+10);//+100pays hospital bill
			}
			else
			{
				//format(string,128,".: %s murdered %s (%s) :.",killer,name,deathreason);
		    }
			if (((gTeam[killerid]) == 4) && reason != 49)
			{
				SetPlayerCriminal(killerid,255, "Meurtre au 1er degré");
			}
			else if (((gTeam[killerid]) == 3) && reason == 49)
			{
				SetPlayerCriminal(killerid,255, "Attaque et cours");
			}
		    //BroadCast(COLOR_RED, string);
		}
	}
	if (victimteam >= 3 && WantedPoints[playerid] > 0 && killerteam == 2)
	{
	    SetPlayerFree(playerid,killerid, "A été Tué");
	}
	if (BusrouteEast[playerid][0] != 0 || BusrouteWest[playerid][0] != 0)
	{
		if (BusrouteEast[playerid][0] != 0) BusrouteEnd(playerid, BusrouteEast[playerid][1]);
		else if (BusrouteWest[playerid][0] != 0) BusrouteEnd(playerid, BusrouteWest[playerid][1]);
		else BusrouteEnd(playerid, 0);
	}
	if(FarmerVar[playerid] != 0)
	{
	    FarmerVar[playerid] = 0;
	    DisablePlayerCheckpoint(playerid);
	}
	if(DrugFarmerVar[playerid] != 0)
	{
		DrugFarmerVar[playerid] = 0;
		DisablePlayerCheckpoint(playerid);
	}
	if(SmugglerWork[playerid] != 0)
	{
	    SmugglerWork[playerid] = 0;
	    DisablePlayerCheckpoint(playerid);
	}
	killerid = INVALID_PLAYER_ID;
	SetPlayerColor(playerid,COLOR_GRAD2);
	return 1;
    }

public OnPlayerSpawn(playerid)
{
	//InitLockDoors(playerid);
	STDPlayer[playerid] = 0;
	AntiDeAMX();
	gTeam[playerid] = PlayerInfo[playerid][pTeam]; //Set the Team
	//PreloadAnimLib(playerid, "BOMBER");
	//PreloadAnimLib(playerid, "GRENADE");
	if(IsPlayerNPC(playerid))// si le joueur est un BOT
    {
        new playername[MAX_PLAYER_NAME];
		GetPlayerName(playerid,playername,MAX_PLAYER_NAME);//on récupère sont pseudo
		//if(!strcmp(playername,"at400_lv",true))//si sont pseudo est Bruno2
		{
			SetPlayerSkin(playerid,0);//je desir lui mettre le skin 0
			PutPlayerInVehicle(playerid, botcar, 0);// je le met au volant de sont vehicule
			return 1;
		}
		//else if(!strcmp(playername,"Bruno",true))//si sont pseudo est Bruno
		/*{
			SetPlayerSkin(playerid,163);//je désir lui mettre le skin 0
			return 1;
		}
		return 1;*/
	}
	else
	{
		if(IsPlayerNPC(playerid)) //Checks if the player that just spawned is an NPC.
	    {
	        new npcname[MAX_PLAYER_NAME];
	        GetPlayerName(playerid, npcname, sizeof(npcname)); //Getting the NPC's name.
	        if(!strcmp(npcname, "Danny_Glover", true)) //Checking if the NPC's name is MyFirstNPC
	        {
	            SetSpawnInfo(playerid, 0, 288,1580.0020,-1635.2153,13.5610,320.2449,0,0,0,0,0,0);
	        }
	        return 1;
		}
		if (gTeam[playerid] == 4) //medic / criminal reset team
		{
			gTeam[playerid] = 3;
		}
		if(gPlayerLogged[playerid] == 0)
		{
	    	SendClientMessage(playerid, COLOR_LIGHTRED, "* Ce serveur requiert de s'enregistrer avant de spawn *");
	        KickPlayer[playerid] = 1;
	 	/*}
		if(gTeam[playerid] == 11 && PlayerInfo[playerid][pLeader] < 1)
		{
		    MedicBill[playerid] = 0;
		    new rand = random(sizeof(CIV));
			SendClientMessage(playerid, COLOR_LIGHTRED, "Vous n'êtes pas un bon leader, vous êtes maintenant Un Civil !");
			PlayerInfo[playerid][pTeam] = 3;
			gTeam[playerid] = 3;
			SetSpawnInfo(playerid, gTeam[playerid], CIV[rand],0.0,0.0,0.0,0,0,0,0,0,0,0);
			PlayerInfo[playerid][pModel] = CIV[rand];
			SpawnPlayer(playerid);
		}
		if(gTeam[playerid] == 5)
		{
		    if(PlayerInfo[playerid][pMember] < 1)
		    {
		        MedicBill[playerid] = 0;
		        new rand = random(sizeof(CIV));
				SendClientMessage(playerid, COLOR_LIGHTRED, "Vous n'êtes pas un membre de famille, vous êtes maintenant Un Civil !");
				PlayerInfo[playerid][pTeam] = 3;
				gTeam[playerid] = 3;
	            SetSpawnInfo(playerid, gTeam[playerid], CIV[rand],0.0,0.0,0.0,0,0,0,0,0,0,0);
				PlayerInfo[playerid][pModel] = CIV[rand];
				SpawnPlayer(playerid);
			}
		}
		if(gTeam[playerid] == 10)
		{
		    if(PlayerInfo[playerid][pMember] != 8)
		    {
		        MedicBill[playerid] = 0;
		        new rand = random(sizeof(CIV));
				SendClientMessage(playerid, COLOR_LIGHTRED, "Vous n'êtes pas un membre de cette Agence, vous êtes maintenant Un Civil !");
				PlayerInfo[playerid][pTeam] = 3;
				gTeam[playerid] = 3;
	            SetSpawnInfo(playerid, gTeam[playerid], CIV[rand],0.0,0.0,0.0,0,0,0,0,0,0,0);
				PlayerInfo[playerid][pModel] = CIV[rand];
				SpawnPlayer(playerid);
			}*/
		}
		if(gTeam[playerid] == 2 && PlayerInfo[playerid][pMember] > 3)
		{
		    MedicBill[playerid] = 0;
			new rand = random(sizeof(CIV));
			SendClientMessage(playerid, COLOR_LIGHTRED, "Vous n'avez pas demandé a être un Officier/ FBI / Garde National, Vous êtes maintenant un Civil !");
			PlayerInfo[playerid][pTeam] = 3;
			gTeam[playerid] = 3;
			SetSpawnInfo(playerid, gTeam[playerid], CIV[rand],0.0,0.0,0.0,0,0,0,0,0,0,0);
			PlayerInfo[playerid][pModel] = CIV[rand];
			SpawnPlayer(playerid);
		}
		if(gTeam[playerid] == 3)
		{
		    if(PlayerInfo[playerid][pMember] > 0 || PlayerInfo[playerid][pLeader] > 0)
		    {
				SendClientMessage(playerid, COLOR_LIGHTRED, "Vous faites parti d'une famille. Vous avez été redirigé vers la bonne classe !");
				MedicBill[playerid] = 0;
				new model = PlayerInfo[playerid][pChar];
				if(PlayerInfo[playerid][pMember] == 1) { SetSpawnInfo(playerid, 2, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 2; gTeam[playerid] = 2; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pMember] == 2) { SetSpawnInfo(playerid, 2, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 2; gTeam[playerid] = 2; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pMember] == 3) { SetSpawnInfo(playerid, 2, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 2; gTeam[playerid] = 2; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pMember] == 4) { SetSpawnInfo(playerid, 1, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 1; gTeam[playerid] = 1; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pMember] == 5) { SetSpawnInfo(playerid, 5, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 5; gTeam[playerid] = 5; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pMember] == 6) { SetSpawnInfo(playerid, 5, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 5; gTeam[playerid] = 5; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pMember] == 7) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pMember] == 8) { SetSpawnInfo(playerid, 10, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 10; gTeam[playerid] = 10; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pMember] == 9) { SetSpawnInfo(playerid, 12, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pJob] == 13) { SetSpawnInfo(playerid, 12, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; PlayerInfo[playerid][pModel] = model; }
			//else if(PlayerInfo[playerid][pMember] == 11) { SetSpawnInfo(playerid, 12, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pMember] == 14) { SetSpawnInfo(playerid, 5, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 5; gTeam[playerid] = 5; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pMember] == 15) { SetSpawnInfo(playerid, 5, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 5; gTeam[playerid] = 5; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pMember] == 16) { SetSpawnInfo(playerid, 5, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 5; gTeam[playerid] = 5; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pLeader] == 1) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pLeader] == 2) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pLeader] == 3) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pLeader] == 4) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pLeader] == 5) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pLeader] == 6) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pLeader] == 7) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pLeader] == 8) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pLeader] == 9) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; PlayerInfo[playerid][pModel] = model; }
			//else if(PlayerInfo[playerid][pLeader] == 10) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; PlayerInfo[playerid][pModel] = model; }
			//else if(PlayerInfo[playerid][pLeader] == 11) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pLeader] == 14) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pLeader] == 15) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pLeader] == 16) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pLeader] == 17) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pLeader] == 18) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 2; gTeam[playerid] = 2; PlayerInfo[playerid][pModel] = model; }
			//SetSpawnInfo(playerid, team, model,0.0,0.0,0.0,0,0,0,0,0,0,0);
				SpawnPlayer(playerid);
			}
		}
		if(PlayerInfo[playerid][pChar] > 0) { SetPlayerSkin(playerid, PlayerInfo[playerid][pChar]); }
		else { SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]); }
		SetPlayerWeapons(playerid);
		SetPlayerSpawn(playerid);
		SetPlayerToTeamColor(playerid);
		PlayerFixRadio(playerid);
		for(new i = 0; i < sizeof(Turfs); i++)
		{
		    /*GangZoneShowForPlayer(playerid, i, TurfInfo[i][zColor]);
	    	GangZoneShowForPlayer(playerid, Cripz, 0x00800096);
			GangZoneShowForPlayer(playerid, Surenos, 0x00FFFF96);
		    GangZoneShowForPlayer(playerid, black_yakuza, 0x000000C2);
			GangZoneShowForPlayer(playerid, blanc, 0xFFFFFFAA);
			GangZoneShowForPlayer(playerid, corleonne, 0xFFFFFFAA);
			GangZoneShowForPlayer(playerid, bloods, 0xD900D3C8);*/
			//GangZoneShowForPlayer(playerid, jefferson_saints, 0xD900D3C8);
	        return 1;
		}
		if(MapIconsShown[playerid] != 1)
		{
		    MapIconsShown[playerid] = 1;
		    for(new i = 0; i < sizeof(BizzInfo); i++)
			{
				SetPlayerMapIcon(playerid,i + 1,BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ],36,COLOR_LIGHTRED);
			}
			for(new i = 0; i < sizeof(SBizzInfo); i++)
			{
			    SetPlayerMapIcon(playerid,i + 20,SBizzInfo[i][sbEntranceX],SBizzInfo[i][sbEntranceY],SBizzInfo[i][sbEntranceZ],36,COLOR_LIGHTRED);
			}
		}
	}
	return 1;
}

public CKLog(string[])
{
	new entry[256];
	format(entry, sizeof(entry), "%s\n",string);
	new File:hFile;
	hFile = fopen("ck.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

public PayLog(string[])
{
	new entry[256];
	format(entry, sizeof(entry), "%s\n",string);
	new File:hFile;
	hFile = fopen("pay.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

public KickLog(string[])
{
	new entry[256];
	format(entry, sizeof(entry), "%s\n",string);
	new File:hFile;
	hFile = fopen("kick.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

public BanLog(string[])
{
	new entry[256];
	format(entry, sizeof(entry), "%s\n",string);
	new File:hFile;
	hFile = fopen("ban.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

public OnPlayerEnterCheckpoint(playerid)
{
	new string[128];
	new string2[128];
	new name[MAX_PLAYER_NAME];
	if(TaxiCallTime[playerid] > 0 && TaxiAccepted[playerid] < 999)
	{
	    TaxiAccepted[playerid] = 999;
		GameTextForPlayer(playerid, "~w~Destination atteinte", 5000, 1);
		TaxiCallTime[playerid] = 0;
		DisablePlayerCheckpoint(playerid);
	}
	else if(BusCallTime[playerid] > 0 && BusAccepted[playerid] < 999)
	{
	    BusAccepted[playerid] = 999;
		GameTextForPlayer(playerid, "~w~Destination atteinte", 5000, 1);
		BusCallTime[playerid] = 0;
		DisablePlayerCheckpoint(playerid);
	}
	else if(CP[playerid]==1)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
		    PlayerInfo[playerid][pJackSkill] ++;
			if(PlayerInfo[playerid][pJackSkill] == 50)
			{ SendClientMessage(playerid, COLOR_YELLOW, " Votre Niveau de Car Jack est de 2, Vous allez gagner plus dargent et être plus rapide."); }
			else if(PlayerInfo[playerid][pJackSkill] == 100)
			{ SendClientMessage(playerid, COLOR_YELLOW, " Votre Niveau de Car Jack est de 3, Vous allez gagner plus dargent et être plus rapide."); }
			else if(PlayerInfo[playerid][pJackSkill] == 200)
			{ SendClientMessage(playerid, COLOR_YELLOW, " Votre Niveau de Car Jack est de 4, Vous allez gagner plus dargent et être plus rapide."); }
			else if(PlayerInfo[playerid][pJackSkill] == 400)
			{ SendClientMessage(playerid, COLOR_YELLOW, " Votre Niveau de Car Jack est de 5, Vous allez gagner plus dargent et être plus rapide."); }
			new level = PlayerInfo[playerid][pJackSkill];
			if(level >= 0 && level <= 50)
			{
			    new rand = random(sizeof(SELLCAR1));
			    format(string, sizeof(string), "Vous avez vendu une voiture pour $%d. Votre temps de recharge est de 20 minutes.", SELLCAR1[rand]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				SafeGivePlayerMoney(playerid, SELLCAR1[rand]);
			    PlayerInfo[playerid][pCarTime] = 1200;
			}
			else if(level >= 51 && level <= 100)
			{
			    new rand = random(sizeof(SELLCAR2));
			    format(string, sizeof(string), "Vous avez vendu une voiture pour $%d, Votre temps derecharge est de 18 minutes.", SELLCAR2[rand]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				SafeGivePlayerMoney(playerid, SELLCAR2[rand]);
			    PlayerInfo[playerid][pCarTime] = 1080;
			}
			else if(level >= 101 && level <= 200)
			{
			    new rand = random(sizeof(SELLCAR3));
			    format(string, sizeof(string), "Vous avez vendu une voiture pour $%d, Votre temps derecharge est de 16 minutes.", SELLCAR3[rand]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				SafeGivePlayerMoney(playerid, SELLCAR3[rand]);
			    PlayerInfo[playerid][pCarTime] = 960;
			}
			else if(level >= 201 && level <= 400)
			{
			    new rand = random(sizeof(SELLCAR4));
			    format(string, sizeof(string), "Vous avez vendu une voiture pour $%d, Votre temps derecharge est de 14 minutes.", SELLCAR4[rand]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				SafeGivePlayerMoney(playerid, SELLCAR4[rand]);
			    PlayerInfo[playerid][pCarTime] = 840;
			}
			else if(level >= 401)
			{
			    new money = 6000;
			    format(string, sizeof(string), "Vous avez vendu une voiture pour $%d, Votre temps derecharge est de 12 minutes.", money);
				SendClientMessage(playerid, COLOR_WHITE, string);
				SafeGivePlayerMoney(playerid, money);
			    PlayerInfo[playerid][pCarTime] = 720;
			}
			GameTextForPlayer(playerid, "~y~Voiture Vendue", 2500, 1);
			CP[playerid] = 0;
		    DisablePlayerCheckpoint(playerid);
		    SetVehicleToRespawn(GetPlayerVehicleID(playerid));
		}
		else
		{
		    GameTextForPlayer(playerid, "Pas dans une voiture", 5000, 1);
		}
	}
	else if(CP[playerid] == 5)
	{
	    GameTextForPlayer(playerid, "~y~Au Checkpoint de la mission", 2500, 1);
		CP[playerid] = 0;
	    DisablePlayerCheckpoint(playerid);
	}
	else if(CP[playerid] == 9)//Karting
	{
		GameTextForPlayer(playerid, "~r~Attendez ici pour plus de concurents", 4000, 3);
		DisablePlayerCheckpoint(playerid);
	}
	else if(CP[playerid] == 10) { CP[playerid] = 11; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2258.7874,-2402.9712,12.7035,8.0); }
	else if(CP[playerid] == 11) { CP[playerid] = 12; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2225.8755,-2461.3875,12.7190,8.0); }
	else if(CP[playerid] == 12) { CP[playerid] = 13; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2276.9983,-2662.8328,12.8580,8.0); }
	else if(CP[playerid] == 13) { CP[playerid] = 14; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2449.1399,-2663.0562,12.8138,8.0); }
	else if(CP[playerid] == 14) { CP[playerid] = 15; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2566.9814,-2504.5686,12.7692,8.0); }
	else if(CP[playerid] == 15) { CP[playerid] = 16; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2719.0520,-2503.5962,12.7706,8.0); }
	else if(CP[playerid] == 16) { CP[playerid] = 17; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2720.7881,-2405.6589,12.7441,8.0); }
	else if(CP[playerid] == 17) { CP[playerid] = 18; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2571.5195,-2401.1531,12.7528,8.0); }
	else if(CP[playerid] == 18) { CP[playerid] = 19; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2406.6995,-2423.1182,12.6641,8.0); }
	else if(CP[playerid] == 19) { CP[playerid] = 20; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2322.9194,-2341.5715,12.6664,8.0); }
	else if(CP[playerid] == 20)//End of Karting
	{
	    CP[playerid] = 0;
	    DisablePlayerCheckpoint(playerid);
	    GetPlayerName(playerid, name, sizeof(name));
	    if(FirstKartWinner == 999)
	    {
	        FirstKartWinner = playerid;
	        for(new i = 0; i < MAX_PLAYERS; i++)
	        {
	            if(IsPlayerConnected(i))
	            {
		            if(PlayerKarting[i] != 0 && PlayerInKart[i] != 0)
		            {
		                format(string, sizeof(string), " %s à fini premier a la course de Kart.",name);
		                SendClientMessage(i, COLOR_WHITE, string);
		            }
				}
			}
	    }
	    else if(SecondKartWinner == 999)
	    {
	        SecondKartWinner = playerid;
	        for(new i = 0; i < MAX_PLAYERS; i++)
	        {
	            if(IsPlayerConnected(i))
	            {
		            if(PlayerKarting[i] != 0 && PlayerInKart[i] != 0)
		            {
		                format(string, sizeof(string), " %s à fini second a la course de Kart.",name);
		                SendClientMessage(i, COLOR_WHITE, string);
		            }
				}
			}
	    }
	    else if(ThirdKartWinner == 999)
	    {
	        ThirdKartWinner = playerid;
	        for(new i = 0; i < MAX_PLAYERS; i++)
	        {
	            if(IsPlayerConnected(i))
	            {
		            if(PlayerKarting[i] != 0 && PlayerInKart[i] != 0)
		            {
		                format(string, sizeof(string), " %s à fini troisieme a la course de Kart.",name);
		                SendClientMessage(i, COLOR_WHITE, string);
		                SendClientMessage(i, COLOR_WHITE, "* Course de Kart finie *");
		                CP[i] = 0;
		                DisablePlayerCheckpoint(i);
		            }
				}
	        }
	    }
	}
	else if(MissionCheckpoint[playerid] > 0 && PlayMission[kToggle] == 1)//Missions + Checkpoint on toggle
	{
        	RingTone[playerid] = 20;
		    switch(MissionCheckpoint[playerid])
		    {
	        	case 1:
		        {
					format(string, sizeof(string), "%s", PlayMission[kGText1]);
					GameTextForPlayer(playerid, string, 8000, 3);
					format(string, sizeof(string), "%s", PlayMission[kText4]);
					SendClientMessage(playerid, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText5]);
					SendClientMessage(playerid, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText6]);
					SendClientMessage(playerid, COLOR_YELLOW2, string);
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpoint(playerid, PlayMission[kCP2][0], PlayMission[kCP2][1], PlayMission[kCP2][2], 8);
					MissionCheckpoint[playerid] = 2;
		        }
		        case 2:
		        {
		            format(string, sizeof(string), "%s", PlayMission[kGText2]);
					GameTextForPlayer(playerid, string, 8000, 3);
					format(string, sizeof(string), "%s", PlayMission[kText7]);
					SendClientMessage(playerid, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText8]);
					SendClientMessage(playerid, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText9]);
					SendClientMessage(playerid, COLOR_YELLOW2, string);
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpoint(playerid, PlayMission[kCP3][0], PlayMission[kCP3][1], PlayMission[kCP3][2], 8);
					MissionCheckpoint[playerid] = 3;
		        }
		        case 3:
		        {
		            format(string, sizeof(string), "%s", PlayMission[kGText3]);
					GameTextForPlayer(playerid, string, 8000, 3);
					format(string, sizeof(string), "%s", PlayMission[kText10]);
					SendClientMessage(playerid, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText11]);
					SendClientMessage(playerid, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText12]);
					SendClientMessage(playerid, COLOR_YELLOW2, string);
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpoint(playerid, PlayMission[kCP4][0], PlayMission[kCP4][1], PlayMission[kCP4][2], 8);
					MissionCheckpoint[playerid] = 4;
		        }
		        case 4:
		        {
		            format(string, sizeof(string), "%s", PlayMission[kGText4]);
					GameTextForPlayer(playerid, string, 8000, 3);
					format(string, sizeof(string), "%s", PlayMission[kText13]);
					SendClientMessage(playerid, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText14]);
					SendClientMessage(playerid, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText15]);
					SendClientMessage(playerid, COLOR_YELLOW2, string);
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpoint(playerid, PlayMission[kCP5][0], PlayMission[kCP5][1], PlayMission[kCP5][2], 8);
					MissionCheckpoint[playerid] = 5;
		        }
		        case 5:
		        {
		            format(string, sizeof(string), "%s", PlayMission[kGText5]);
					GameTextForPlayer(playerid, string, 8000, 3);
					format(string, sizeof(string), "%s", PlayMission[kText16]);
					SendClientMessage(playerid, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText17]);
					SendClientMessage(playerid, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText18]);
					SendClientMessage(playerid, COLOR_YELLOW2, string);
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpoint(playerid, PlayMission[kCP6][0], PlayMission[kCP6][1], PlayMission[kCP6][2], 8);
					MissionCheckpoint[playerid] = 6;
		        }
		        case 6:
		        {
		            format(string, sizeof(string), "%s", PlayMission[kGText6]);
					GameTextForPlayer(playerid, string, 8000, 3);
					format(string, sizeof(string), "..:: Mission Réussie : %s | Recompense Reçue: $%d ::..", PlayMission[kTitle], PlayMission[kReward]);
					SendClientMessage(playerid, COLOR_GREEN, string);
					DisablePlayerCheckpoint(playerid);
					SafeGivePlayerMoney(playerid, PlayMission[kReward]);
					PlayerInfo[playerid][pMissionNr] = PlayerOnMission[playerid];
					MissionCheckpoint[playerid] = 0;
					PlayerOnMission[playerid] = 0;
		        }
		    }
	}
	else
	{
		switch (gPlayerCheckpointStatus[playerid])
		{
			case CHECKPOINT_HOME:
		    {
				PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
				DisablePlayerCheckpoint(playerid);
				gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
				GameTextForPlayer(playerid, "~w~Vous etes a~n~~y~Destination", 5000, 1);
		    }
		}
	}
	if (BusrouteEast[playerid][0] != 0)
	{
		if (IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == 2)
		{
			new nextstop[64];
			BusrouteWest[playerid][0] = 0;
		    switch(BusrouteEast[playerid][0])
		    {
case 1:
		        {
					nextstop = "Airport";
		            SetPlayerCheckpoint(playerid, 1979.7369,-2171.4861,13.5363, 5.0);
					AdvertiseToPlayersAtBusStop(1979.7369,-2171.4861,13.5363, 0);
				}
				case 2:
				{
					nextstop = "Willowfield Factory";
				    SetPlayerCheckpoint(playerid, 2227.6953,-2201.9053,13.5164, 5.0);
					AdvertiseToPlayersAtBusStop(2227.6953,-2201.9053,13.5164, 0);
					SetTimerEx("busroutestoptimer", 10000, false, "i", playerid);
					TogglePlayerControllable(playerid, 0);
					SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Vous devez attendre 10 secondes.");
				}
				case 3:
				{
					nextstop = "Loco";
				    SetPlayerCheckpoint(playerid, 2719.9419,-2030.2104,13.5076, 5.0);
					AdvertiseToPlayersAtBusStop(2719.9419,-2030.2104,13.5076, 0);
					SetTimerEx("busroutestoptimer", 10000, false, "i", playerid);
					TogglePlayerControllable(playerid, 0);
					SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Vous devez attendre 10 secondes.");
				}
				case 4:
				{
					nextstop = "6 Street Plaza";
				    SetPlayerCheckpoint(playerid, 2470.8059,-1926.7136,13.5125, 5.0);
					AdvertiseToPlayersAtBusStop(2470.8059,-1926.7136,13.5125, 0);
					SetTimerEx("busroutestoptimer", 10000, false, "i", playerid);
					TogglePlayerControllable(playerid, 0);
					SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Vous devez attendre 10 secondes.");
				}
				case 5:
				{
					nextstop = "10 Green Bottles";
				    SetPlayerCheckpoint(playerid, 2348.0249,-1695.8247,13.5286, 5.0);
					AdvertiseToPlayersAtBusStop(2348.0249,-1695.8247,13.5286, 0);
					SetTimerEx("busroutestoptimer", 10000, false, "i", playerid);
					TogglePlayerControllable(playerid, 0);
					SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Vous devez attendre 10 secondes.");
				}
				case 6:
				{
					nextstop = "Pigpen";
				    SetPlayerCheckpoint(playerid, 2422.4092,-1251.1915,23.9176, 5.0);
					AdvertiseToPlayersAtBusStop(2422.4092,-1251.1915,23.9176, 0);
					SetTimerEx("busroutestoptimer", 10000, false, "i", playerid);
					TogglePlayerControllable(playerid, 0);
					SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Vous devez attendre 10 secondes.");
				}
				case 7:
				{
					nextstop = "Golden Palm";
				    SetPlayerCheckpoint(playerid, 2717.7463,-1218.8141,64.9276, 5.0);
					AdvertiseToPlayersAtBusStop(2717.7463,-1218.8141,64.9276, 0);
					SetTimerEx("busroutestoptimer", 10000, false, "i", playerid);
					TogglePlayerControllable(playerid, 0);
					SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Vous devez attendre 10 secondes.");
				}
				case 8:
				{
					nextstop = "Jefferson Motel";
				    SetPlayerCheckpoint(playerid, 2173.1165,-1114.3069,25.4259, 5.0);
					AdvertiseToPlayersAtBusStop(2173.1165,-1114.3069,25.4259, 0);
					SetTimerEx("busroutestoptimer", 10000, false, "i", playerid);
					TogglePlayerControllable(playerid, 0);
					SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Vous devez attendre 10 secondes.");
				}
				case 9:
				{
					nextstop = "Glen Park";
				    SetPlayerCheckpoint(playerid, 2028.4354,-1259.1379,23.9287, 5.0);
					AdvertiseToPlayersAtBusStop(2028.4354,-1259.1379,23.9287, 0);
					SetTimerEx("busroutestoptimer", 10000, false, "i", playerid);
					TogglePlayerControllable(playerid, 0);
					SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Vous devez attendre 10 secondes.");
				}
				case 10:
				{
					nextstop = "Bus Station";
				    SetPlayerCheckpoint(playerid, 1203.5101,-1833.5771,13.4946, 5.0);
					AdvertiseToPlayersAtBusStop(1203.5101,-1833.5771,13.4946, 0);
					SetTimerEx("busroutestoptimer", 10000, false, "i", playerid);
					TogglePlayerControllable(playerid, 0);
					SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Vous devez attendre 10 secondes.");
				}
				case 11:
				{
					nextstop = "end";
					TogglePlayerControllable(playerid, 0);
	                SendClientMessage(playerid, COLOR_YELLOW, "Bus Route Complet, utilisez /startest ou /startouest pour repartir.");
					SendClientMessage(playerid, COLOR_YELLOW, "Utilisez /sortir pour sortir du bus.");
				    DisablePlayerCheckpoint(playerid);
				}
			}
			BusrouteEast[playerid][0]++;
			if (strcmp(nextstop, "end", true) != 0)
			{
				format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~r~$3 Bonus~n~~n~~g~Next Stop: %s", nextstop);
				format(string2, sizeof(string2), "~n~~n~~n~~n~~n~~n~~n~~g~Prochain Stop: %s", nextstop);
			}
			else
			{
				string = "~g~Fin du Parcourt~n~~n~~n~~n~~w~/commencerest pour continuer le parcourt";
				string2 = "~n~~g~Fin du Parcourt~n~~n~~w~SVP Sortez du Bus ou attendez le second parcourt";
				//BusrouteEast[playerid][0] = 0;
                new cashes=(random(30-10)+75);
                format(string, sizeof(string), "Vous gagnez %d$",cashes);
	            SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	            SafeGivePlayerMoney(playerid, cashes);
			}
			PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
			for (new i=0; i<=MAX_PLAYERS; i++)
			{
				if (IsPlayerConnected(i) &&  GetPlayerVehicleID(i) == BusrouteEast[playerid][1])
				{
					if (BusrouteEast[i][0] != 0) GameTextForPlayer(i, string, 10000, 3);
					else GameTextForPlayer(i, string2, 10000, 3);
				}
			}
			SafeGivePlayerMoney(playerid, 50);
			return 1;
		}
	}
	else if (BusrouteWest[playerid][0] != 0)
	{
		if (IsPlayerInAnyVehicle(playerid))
		{
			new nextstop[64];
			BusrouteEast[playerid][0] = 0;
		    switch(BusrouteWest[playerid][0])
		    {
		        case 1:
		        {
					nextstop = "Alhambra";
		            SetPlayerCheckpoint(playerid, 1826.8738,-1634.5306,13.5588, 5.0);
					AdvertiseToPlayersAtBusStop(1826.8738,-1634.5306,13.5588, 1);
				}
				case 2:
				{
					nextstop = "Glen Park";
				    SetPlayerCheckpoint(playerid, 1856.7260,-1211.7167,20.3898, 5.0);
					AdvertiseToPlayersAtBusStop(1856.7260,-1211.7167,20.3898, 1);
					SetTimerEx("busroutestoptimer", 10000, false, "i", playerid);
					TogglePlayerControllable(playerid, 0);
					SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Vous devez attendre 10 secondes.");
				}
				case 3:
				{
					nextstop = "Vinewood Burger";
					PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
				    SetPlayerCheckpoint(playerid, 1208.0479,-929.9481,42.9049, 5.0);
					AdvertiseToPlayersAtBusStop(1208.0479,-929.9481,42.9049, 1);
					SetTimerEx("busroutestoptimer", 10000, false, "i", playerid);
					TogglePlayerControllable(playerid, 0);
					SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Vous devez attendre 10 secondes.");
				}
				case 4:
				{
					nextstop = "Vice Theater";
				    SetPlayerCheckpoint(playerid, 1119.0096,-1137.8805,23.7597, 5.0);
					AdvertiseToPlayersAtBusStop(1119.0096,-1137.8805,23.7597, 1);
					SetTimerEx("busroutestoptimer", 10000, false, "i", playerid);
					TogglePlayerControllable(playerid, 0);
					SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Vous devez attendre 10 secondes.");
				}
				case 5:
				{
					nextstop = "Bank";
					SetPlayerCheckpoint(playerid, 1443.0234,-1028.7131,23.8281, 5.0);
					AdvertiseToPlayersAtBusStop(1443.0234,-1028.7131,23.8281, 1);
					SetTimerEx("busroutestoptimer", 10000, false, "i", playerid);
					TogglePlayerControllable(playerid, 0);
					SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Vous devez attendre 10 secondes.");
				}
				case 6:
				{
					nextstop = "Rodeo";
				    SetPlayerCheckpoint(playerid, 526.6218,-1480.9631,14.5567, 5.0);
					AdvertiseToPlayersAtBusStop(526.6218,-1480.9631,14.5567, 1);
					SetTimerEx("busroutestoptimer", 10000, false, "i", playerid);
					TogglePlayerControllable(playerid, 0);
					SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Vous devez attendre 10 secondes.");
				}
				case 7:
				{
					nextstop = "Santa Maria Beach";
				    SetPlayerCheckpoint(playerid, 443.9078,-1724.8008,10.0896, 5.0);
					AdvertiseToPlayersAtBusStop(443.9078,-1724.8008,10.0896, 1);
					SetTimerEx("busroutestoptimer", 10000, false, "i", playerid);
					TogglePlayerControllable(playerid, 0);
					SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Vous devez attendre 10 secondes.");
				}
				case 8:
				{
					nextstop = "Verona Beach";
				    SetPlayerCheckpoint(playerid, 836.2728,-1788.8121,13.9260, 5.0);
					AdvertiseToPlayersAtBusStop(836.2728,-1788.8121,13.9260, 1);
					SetTimerEx("busroutestoptimer", 10000, false, "i", playerid);
					TogglePlayerControllable(playerid, 0);
					SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Vous devez attendre 10 secondes.");
				}
				case 9:
				{
					nextstop = "Pershing Square";
				    SetPlayerCheckpoint(playerid, 1508.7136,-1735.5184,13.4921, 5.0);
					AdvertiseToPlayersAtBusStop(1508.7136,-1735.5184,13.4921, 1);
					SetTimerEx("busroutestoptimer", 10000, false, "i", playerid);
					TogglePlayerControllable(playerid, 0);
					SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Vous devez attendre 10 secondes.");
				}
				case 10:
				{
					nextstop = "Bus Station";
				    SetPlayerCheckpoint(playerid, 1203.5101,-1833.5771,13.4946, 5.0);
					AdvertiseToPlayersAtBusStop(1203.5101,-1833.5771,13.4946, 1);
					SetTimerEx("busroutestoptimer", 10000, false, "i", playerid);
					TogglePlayerControllable(playerid, 0);
					SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Vous devez attendre 10 secondes.");
				}
				case 11:
				{
					nextstop = "end";
					TogglePlayerControllable(playerid, 0);
	                SendClientMessage(playerid, COLOR_YELLOW, "Bus Route Complet, utilisez /startest ou /startouest pour repartir.");
					SendClientMessage(playerid, COLOR_YELLOW, "Utilisez /sortir pour sortir du bus.");
				    DisablePlayerCheckpoint(playerid);
	          	}
			}
			BusrouteWest[playerid][0]++;
			if (strcmp(nextstop, "end", true) != 0)
			{
				format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~r~$50 Bonus~n~~n~~g~Prochain Arret: %s", nextstop);
				format(string2, sizeof(string2), "~n~~n~~n~~n~~n~~n~~n~~g~Prochain Arret: %s", nextstop);
			}
			else
			{
				string = "~g~Fin du parcours~n~~n~~r~n~~n~~w~/startest pour continuez de conduire le bus";
				string2 = "~n~~g~Fin du parcour~n~~n~~w~Merci de dessendre ou attendez le prochain depart";
				//BusrouteWest[playerid][0] = 0;
                new cashes=(random(30-10)+75);
                format(string, sizeof(string), "Vous gagnez %d$",cashes);
	            SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	            SafeGivePlayerMoney(playerid, cashes);
			}
			PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
			for (new i=0; i<=MAX_PLAYERS; i++)
			{
				if (IsPlayerConnected(i) &&  GetPlayerVehicleID(i) == BusrouteWest[playerid][1])
				{
					if (BusrouteWest[i][0] != 0) GameTextForPlayer(i, string, 10000, 3);
					else GameTextForPlayer(i, string2, 10000, 3);
				}
			}
			SafeGivePlayerMoney(playerid, 50);
			return 1;
		}
	}
	if (BusShowLocationC[playerid] == 1)
	{
		DisablePlayerCheckpoint(playerid);
		BusShowLocationC[playerid] = 0;
		return 1;
	}
	if(FarmerVar[playerid] == 1)
	{
	    if (IsPlayerInAnyVehicle(playerid))
		{
		    new carid = GetPlayerVehicleID(playerid);
		    //new cash=(random(70-20)+20);
		    if(IsAHarvest(carid))
		    {
		        switch(FarmerPickup[playerid][0])
		        {
		            case 0:
		        	{
		            	SetPlayerCheckpoint(playerid, -205.9348,-1332.2749,10.4056, 5.0);
		            	if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
					}
					case 1:
		        	{
		            	SetPlayerCheckpoint(playerid, -376.7750,-1437.6874,25.7266, 5.0);
		            	if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
					}
					case 2:
		        	{
		        	    if(JustStarted[playerid] != 1)
		        	    {
                            new cashes=(random(15-10)+20);
                            format(string, sizeof(string), "Vous gagnez %d$",cashes);
	                        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	                        SafeGivePlayerMoney(playerid, cashes);
		        	    }
		        	    else
		        	    {
		        	        JustStarted[playerid] = 0;
		        	    }
		            	SetPlayerCheckpoint(playerid, -548.5396,-1329.0653,19.6210, 5.0);
					}
					case 3:
		        	{
		            	SetPlayerCheckpoint(playerid, -376.7750,-1437.6874,25.7266, 5.0);
		            	if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
					}
					case 4:
		        	{
		            	if(JustStarted[playerid] != 1)
		        	    {
                            new cashes=(random(15-10)+20);
                            format(string, sizeof(string), "Vous gagnez %d$",cashes);
	                        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	                        SafeGivePlayerMoney(playerid, cashes);
		        	    }
		        	    else
		        	    {
		        	        JustStarted[playerid] = 0;
		        	    }
		        	    SetPlayerCheckpoint(playerid, -370.9486,-1281.1089,29.8698, 5.0);
					}
					case 5:
		        	{
		            	SetPlayerCheckpoint(playerid, -376.7750,-1437.6874,25.7266, 5.0);
		            	if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
					}
					case 6:
		        	{
		            	if(JustStarted[playerid] != 1)
		        	    {
                            new cashes=(random(15-10)+20);
                            format(string, sizeof(string), "Vous gagnez %d$",cashes);
	                        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	                        SafeGivePlayerMoney(playerid, cashes);
		        	    }
		        	    else
		        	    {
		        	        JustStarted[playerid] = 0;
		        	    }
		        	    SetPlayerCheckpoint(playerid, -258.3272,-1387.9211,10.1292, 5.0);
					}
					case 7:
		        	{
		            	SetPlayerCheckpoint(playerid, -376.7750,-1437.6874,25.7266, 5.0);
		            	if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
					}
					case 8:
		        	{
		            	if(JustStarted[playerid] != 1)
		        	    {
                            new cashes=(random(15-10)+20);
                            format(string, sizeof(string), "Vous gagnez %d$",cashes);
	                        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	                        SafeGivePlayerMoney(playerid, cashes);
		        	    }
		        	    else
		        	    {
		        	        JustStarted[playerid] = 0;
		        	    }
		        	    SetPlayerCheckpoint(playerid, -288.8517,-1385.0117,9.8957, 5.0);
					}
					case 9:
		        	{
		            	SetPlayerCheckpoint(playerid, -376.7750,-1437.6874,25.7266, 5.0);
		            	if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
					}
					case 10:
		        	{
		            	if(JustStarted[playerid] != 1)
		        	    {
                            new cashes=(random(15-10)+20);
                            format(string, sizeof(string), "Vous gagnez %d$",cashes);
	                        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	                        SafeGivePlayerMoney(playerid, cashes);
		        	    }
		        	    else
		        	    {
                   			JustStarted[playerid] = 0;
		        	    }
		        	    SetPlayerCheckpoint(playerid, -283.1325,-1338.2822,7.4280, 5.0);
					}
					case 11:
		        	{
		            	SetPlayerCheckpoint(playerid, -376.7750,-1437.6874,25.7266, 5.0);
		            	if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
					}
					case 12:
		        	{
		            	if(JustStarted[playerid] != 1)
		        	    {
                            new cashes=(random(15-10)+20);
                            format(string, sizeof(string), "Vous gagnez %d$",cashes);
	                        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	                        SafeGivePlayerMoney(playerid, cashes);
		        	    }
		        	    else
		        	    {
                   			JustStarted[playerid] = 0;
		        	    }
		        	    SetPlayerCheckpoint(playerid, -224.5992,-1509.1902,7.4473, 5.0);
					}
					case 13:
		        	{
		            	SetPlayerCheckpoint(playerid, -376.7750,-1437.6874,25.7266, 5.0);
		            	if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
					}
					case 14:
		        	{
		            	if(JustStarted[playerid] != 1)
		        	    {
                            new cashes=(random(15-10)+20);
                            format(string, sizeof(string), "Vous gagnez %d$",cashes);
	                        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	                        SafeGivePlayerMoney(playerid, cashes);
		        	    }
		        	    else
		        	    {
                   			JustStarted[playerid] = 0;
		        	    }
		        	    SetPlayerCheckpoint(playerid, -247.2859,-1528.8744,6.5904, 5.0);
					}
					case 15:
		        	{
		            	SetPlayerCheckpoint(playerid, -376.7750,-1437.6874,25.7266, 5.0);
		            	if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
					}
					case 16:
		        	{
		            	if(JustStarted[playerid] != 1)
		        	    {
                            new cashes=(random(15-10)+20);
                            format(string, sizeof(string), "Vous gagnez %d$",cashes);
	                        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	                        SafeGivePlayerMoney(playerid, cashes);
		        	    }
		        	    else
		        	    {
                   			JustStarted[playerid] = 0;
		        	    }
		        	    SetPlayerCheckpoint(playerid, -283.9610,-1549.7180,6.4975, 5.0);
					}
					case 17:
		        	{
		            	SetPlayerCheckpoint(playerid, -376.7750,-1437.6874,25.7266, 5.0);
		            	if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
					}
					case 18:
		        	{
		            	if(JustStarted[playerid] != 1)
		        	    {
                            new cashes=(random(15-10)+20);
                            format(string, sizeof(string), "Vous gagnez %d$",cashes);
	                        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	                        SafeGivePlayerMoney(playerid, cashes);
		        	    }
		        	    else
		        	    {
                   			JustStarted[playerid] = 0;
		        	    }
		        	    SetPlayerCheckpoint(playerid, -431.6107,-1334.0961,28.6561, 5.0);
					}
					case 19:
		        	{
		            	SetPlayerCheckpoint(playerid, -376.7750,-1437.6874,25.7266, 5.0);
		            	if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
					}
					case 20:
		        	{
		            	if(JustStarted[playerid] != 1)
		        	    {
		        	        new cashes=(random(15-10)+20);
		            		format(string, sizeof(string), "~w~Bonus :~n~~g~$%d",cashes);
		            		SafeGivePlayerMoney(playerid, cashes);
		            		GameTextForPlayer(playerid, string, 5000, 1);
		        	    }
		        	    else
		        	    {
                   			JustStarted[playerid] = 0;
		        	    }
		        	    SetPlayerCheckpoint(playerid, -476.4104,-1391.6769,20.4733, 5.0);
					}
					case 21:
		        	{
		            	SetPlayerCheckpoint(playerid, -376.7750,-1437.6874,25.7266, 5.0);
		            	if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
					}
					case 22:
		        	{
		            	DisablePlayerCheckpoint(playerid);
		            	TogglePlayerControllable(playerid, 0);
                        new cashes=(random(35-10)+50);
                        format(string, sizeof(string), "Utilisez /sortir pour sortir. Vous gagnez %d$",cashes);
	                    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	                    SafeGivePlayerMoney(playerid, cashes);
					}
		        }
		        FarmerPickup[playerid][0]++;
		        PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
		    }
		}
		return 1;
	}
	if(MatsHolding[playerid] == 25)
	{
		if(PlayerInfo[playerid][pJob] == 22)
		{
		    DisablePlayerCheckpoint(playerid);
		    PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
			SafeGivePlayerMoney(playerid, 300);
			SendClientMessage(playerid, COLOR_WHITE, "Vous avez vendu 25 matériaux aux matériaux de banque.");
			MatsHolding[playerid] = 0;
			matssys[MatsAmmount] += 25;
			GameTextForPlayer(playerid, "~w~Materiaux importer", 5000, 1);
			SaveMatsSystem();
		}
	    return 1;
	}
	if(IsPuttingMaterials[playerid] == 1)
	{
	    if(PlayerInfo[playerid][pJob] == 23)
	    {
	        if(PlayerInfo[playerid][pMats] < CreatingGunPrice[playerid])
	        {
	            SendClientMessage(playerid, COLOR_GREY, "  pas asser de matériaux ");
	            return 1;
	        }
	        DisablePlayerCheckpoint(playerid);
	        PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
	        GameTextForPlayer(playerid, "~w~Materiaux livre avec succes", 5000, 1);
	        PlayerInfo[playerid][pMats] -= CreatingGunPrice[playerid];
	        CreatingGunPrice[playerid] = 0;
	        IsPuttingMaterials[playerid] = 0;
			new randomize = random(3)+1;
	        if(randomize == 1) ProxDetector(40.0, playerid, "Factory speaker: prenez le matos dans l usine !",COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
	        else if(randomize == 2) ProxDetector(40.0, playerid, "Factory speaker: Chea' ya blasta is outside !",COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
	        else ProxDetector(40.0, playerid, "Factory speaker: Damn nice ass gun i made. It's waiting for ya outside !",COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
	        IsTakingGun[playerid] = 1;
	        SetPlayerCheckpoint(playerid, 2163.3430,-2271.9934,13.3293, 1.0);
	        return 1;
	    }
	    return 1;
	}
	if(IsTakingGun[playerid] == 1)
	{
	    if(PlayerInfo[playerid][pJob] == 23)
	    {
	        if(CreatingGun[playerid] == 0 || CreatingGunAmmo[playerid] == 0)
	        {
	            return 1;
	        }
	        DisablePlayerCheckpoint(playerid);
	        new gunname[128];
	        GetWeaponName(CreatingGun[playerid],gunname,sizeof(gunname));
	        format(string, sizeof(string), "   Vous avez pris %s a partir du sol.", gunname);
	        SendClientMessage(playerid, COLOR_GREY, string);
	        SafeGivePlayerWeapon(playerid, CreatingGun[playerid], CreatingGunAmmo[playerid]);
	        CreatingGun[playerid] = 0;
	        CreatingGunAmmo[playerid] = 0;
	        IsTakingGun[playerid] = 0;
	        return 1;
	    }
	    return 1;
	}
	if(DrugFarmerVar[playerid] == 1)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
		    new carid = GetPlayerVehicleID(playerid);
		    new cash=(random(250-100)+100);
		    if(IsADrugHarvest(carid))
		    {
		        switch(DrugFarmerPickup[playerid][0])
		        {
		            case 0:
		            {
                        SetPlayerCheckpoint(playerid, -181.4144,167.2931,7.8413, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 1:
		            {
                        SetPlayerCheckpoint(playerid, -184.1222,-66.2325,3.1172, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 2:
		            {
                        SetPlayerCheckpoint(playerid, -39.6705,-102.2681,3.1172, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 3:
		            {
                        SetPlayerCheckpoint(playerid, 35.3907,-74.2866,0.9706, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 4:
		            {
                        SetPlayerCheckpoint(playerid, 58.6579,-3.7121,1.6909, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 5:
		            {
                        SetPlayerCheckpoint(playerid, 19.7974,43.5431,3.1172, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 6:
		            {
                        SetPlayerCheckpoint(playerid, -34.1614,73.9170,3.1096, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 7:
		            {//drop-off
		                if(JustStarted[playerid] != 1)
		                {
                            new cashes=(random(15-10)+20);
                            format(string, sizeof(string), "Utilisez /sortir pour sortir. Vous gagnez %d$",cashes);
	                        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	                        SafeGivePlayerMoney(playerid, cashes);
		                	drugsys[DrugAmmount]++;
		                	format(string, sizeof(string), "~w~Bonus :~n~~b~$%d",cash);
		            		GameTextForPlayer(playerid, string, 5000, 1);
		            		SaveDrugSystem();
						}
						else
						{
						    JustStarted[playerid] = 0;
						}
                        SetPlayerCheckpoint(playerid, 30.2059,20.1222,3.1172, 5.0);
		            }
		            case 8:
		            {
                        SetPlayerCheckpoint(playerid, -21.3052,-60.9220,3.1172, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 9:
		            {
                        SetPlayerCheckpoint(playerid, -191.6069,-70.8331,3.1172, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 10:
		            {
                        SetPlayerCheckpoint(playerid, -253.8518,-3.7909,2.5041, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 11:
		            {
                        SetPlayerCheckpoint(playerid, -178.0497,128.4783,3.8665, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 12:
		            {
                        SetPlayerCheckpoint(playerid, -110.8844,143.1536,3.1144, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 13:
		            {
                        SetPlayerCheckpoint(playerid, -34.1614,73.9170,3.1096, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 14:
		            {//drop-off
		                if(JustStarted[playerid] != 1)
		                {
                            new cashes=(random(15-10)+20);
	                        format(string, sizeof(string), "Vous gagnez %d$",cashes);
	                        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	                        SafeGivePlayerMoney(playerid, cashes);
		                	drugsys[DrugAmmount]++;
		                	format(string, sizeof(string), "~w~Bonus :~n~~b~$%d",cash);
		            		GameTextForPlayer(playerid, string, 5000, 1);
		            		SaveDrugSystem();
						}
						else
						{
						    JustStarted[playerid] = 0;
						}
                        SetPlayerCheckpoint(playerid, -164.3909,28.9677,3.1172, 5.0);
		            }
		            case 15:
		            {
                        SetPlayerCheckpoint(playerid, -213.1695,-26.4404,3.1172, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 16:
		            {
                        SetPlayerCheckpoint(playerid, -11.7208,-10.7312,3.1172, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 17:
		            {
                        SetPlayerCheckpoint(playerid, 11.4609,-90.3436,2.0164, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 18:
		            {
                        SetPlayerCheckpoint(playerid, 63.1697,-22.5562,1.2136, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 19:
		            {
                        SetPlayerCheckpoint(playerid, 23.2130,30.9418,3.1172, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 20:
		            {
                        SetPlayerCheckpoint(playerid, -134.6788,151.1453,3.9566, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 21:
		            {
                        SetPlayerCheckpoint(playerid, -34.1614,73.9170,3.1096, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 22:
		            {//drop-off
		                if(JustStarted[playerid] != 1)
		                {
                            new cashes=(random(15-10)+20);
	                        format(string, sizeof(string), "Vous gagnez %d$",cashes);
	                        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	                        SafeGivePlayerMoney(playerid, cashes);
		                	drugsys[DrugAmmount]++;
		                	format(string, sizeof(string), "~w~Bonus :~n~~b~$%d",cash);
		            		GameTextForPlayer(playerid, string, 5000, 1);
		            		SaveDrugSystem();
						}
						else
						{
						    JustStarted[playerid] = 0;
						}
                        SetPlayerCheckpoint(playerid, 45.6651,35.6647,2.1518, 5.0);
		            }
		            case 23:
		            {
                        SetPlayerCheckpoint(playerid, 65.9438,-13.9811,1.3468, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 24:
		            {
                        SetPlayerCheckpoint(playerid, 17.1980,-86.7067,1.7758, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 25:
		            {
                        SetPlayerCheckpoint(playerid, -7.0889,-19.7445,3.1172, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 26:
		            {
                        SetPlayerCheckpoint(playerid, -185.1862,155.1479,6.5185, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 27:
		            {
                        SetPlayerCheckpoint(playerid, -184.7949,-57.7402,3.1172, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 28:
		            {
                        SetPlayerCheckpoint(playerid, -263.0331,-45.5427,3.1172, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 29:
		            {
                        SetPlayerCheckpoint(playerid, -34.1614,73.9170,3.1096, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 30:
		            {//drop-off
		                if(JustStarted[playerid] != 1)
		                {
                            new cashes=(random(35-10)+20);
	                        format(string, sizeof(string), "Vous gagnez %d$",cashes);
	                        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	                        SafeGivePlayerMoney(playerid, cashes);
		                	drugsys[DrugAmmount]++;
		                	format(string, sizeof(string), "~w~Bonus :~n~~b~$%d",cash);
		            		GameTextForPlayer(playerid, string, 5000, 1);
		            		SaveDrugSystem();
						}
						else
						{
						    JustStarted[playerid] = 0;
						}
                        SetPlayerCheckpoint(playerid, -255.7015,-3.0833,2.4276, 5.0);
		            }
		            case 31:
		            {
                        SetPlayerCheckpoint(playerid, -171.7835,-59.3110,3.1172, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 32:
		            {
                        SetPlayerCheckpoint(playerid, -153.4347,143.9473,4.1833, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 33:
		            {
                        SetPlayerCheckpoint(playerid, 49.4775,24.9682,1.8078, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 34:
		            {
                        SetPlayerCheckpoint(playerid, -9.5707,-36.4109,3.1172, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 35:
		            {
                        SetPlayerCheckpoint(playerid, 35.6805,-95.6367,0.6169, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 36:
		            {
                        SetPlayerCheckpoint(playerid, -34.1614,73.9170,3.1096, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 37:
		            {//last drop-off
                        new cashes=(random(35-10)+50);
	                    format(string, sizeof(string), "Vous gagnez %d$",cashes);
	                    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	                    SafeGivePlayerMoney(playerid, cashes);
	                	drugsys[DrugAmmount]++;
	                	SaveDrugSystem();
                        DisablePlayerCheckpoint(playerid);
                        TogglePlayerControllable(playerid, 0);
                        GameTextForPlayer(playerid, "~w~Utilisez /sortir Pour Sortir", 5000, 1);
		            }
		        }
		        DrugFarmerPickup[playerid][0]++;
		        PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
		    }
		}
		return 1;
	}
	if(SmugglerWork[playerid] == 1)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        new carid = GetPlayerVehicleID(playerid);
	        if(IsASmuggleCar(carid))
	        {
	            switch (SmugglerWork[playerid])
	            {
	                case 1:
	                {
	                    TogglePlayerControllable(playerid, 0);
	            		SendClientMessage(playerid, COLOR_WHITE, "drogue bien importée, utilisez /sortir pour quiter la voiture.");
	            		PlayerInfo[playerid][pDrugs] += SmuggledDrugs[playerid];
	            		format(string, sizeof(string), "~b~%d ~w~grame de drogue importé",SmuggledDrugs[playerid]);
           				GameTextForPlayer(playerid, string, 5000, 1);
	            		DisablePlayerCheckpoint(playerid);
	            		SmuggledDrugs[playerid] = 0;
	            		SmugglerWork[playerid] = 0;
	            		OnPlayerUpdate(playerid);
	                }
	            }

	        }
	    }
	    return 1;
	}
	if(PlayerIsSweeping[playerid] == 1)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        new carid = GetPlayerVehicleID(playerid);
	        if(IsASweeper(carid))
	        {
                new cashes=(random(35-10)+10);
	            PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
	            format(string, sizeof(string), "Vous gagnez %d$",cashes);
	            SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	            //GameTextForPlayer(playerid, string, 5000, 1);
	            PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
	            DisablePlayerCheckpoint(playerid);
	            SafeGivePlayerMoney(playerid, cashes);
	            new randomss;
		        randomss = random(sizeof(gSweeperPoints));
		        SetPlayerCheckpoint(playerid, gSweeperPoints[randomss][0], gSweeperPoints[randomss][1], gSweeperPoints[randomss][2], 5.0);
	        }
	    }
	    return 1;
	}
	if(PlayerOnGarbage[playerid] == 1)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        new carid = GetPlayerVehicleID(playerid);
	        if(IsAGarbageTruck(carid))
	        {
	            new cashes=(random(10-1)+10);
				GameTextForPlayer(playerid, "Loading trash", 3000, 3);
				SetTimerEx("trashplace", 5000, false, "i", playerid);
				TogglePlayerControllable(playerid, 0);
	            PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
	            format(string, sizeof(string), "Vous gagnez %d$",cashes);
	            SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	            DisablePlayerCheckpoint(playerid);
	            SafeGivePlayerMoney(playerid, cashes);
	            new randomss;
		        randomss = random(sizeof(gGarbagePoints));
		        SetPlayerCheckpoint(playerid, gGarbagePoints[randomss][0], gGarbagePoints[randomss][1], gGarbagePoints[randomss][2], 5.0);
	        }
	    }
	    return 1;
	}
	if(PlayerIsDozering[playerid] == 1)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        new carid = GetPlayerVehicleID(playerid);
	        if(IsADozer(carid))
	        {
	            new cashes=(random(10-1)+10);
	            PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
	            format(string, sizeof(string), "Vous gagnez %d$",cashes);
	            SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	            DisablePlayerCheckpoint(playerid);
	            SafeGivePlayerMoney(playerid, cashes);
	            //PlayerInfo[playerid][pPayCheck] += cashes * 5;
	            new randomss;
		        randomss = random(sizeof(gDozerPoints));
		        SetPlayerCheckpoint(playerid, gDozerPoints[randomss][0], gDozerPoints[randomss][1], gDozerPoints[randomss][2], 5.0);
	        }
	    }
	    return 1;
	}
	// -------------------------- RUTA AVION ------------------------ //
// by CodeMan of Course!
	if(AirRoute[playerid] == 1)
	{
    	SetPlayerCheckpoint(playerid, 1477.9502,1638.8958,11.5501, 10.0);
    	AirRoute[playerid] = 2;
    	//GivePlayerMoney(playerid, 100);
    	//GameTextForPlayer(playerid, "~y~Preparate para despegar", 2000, 6 );
    	PlayerPlaySound(playerid, 1083, 0.0, 0.0, 0.0);
    	return 1;
    }
    else if(AirRoute[playerid] == 2)
	{
    	SetPlayerCheckpoint(playerid, -1609.6440,-115.5528,14.8879, 10.0);
    	AirRoute[playerid] = 3;
    	//GameTextForPlayer(playerid, "~y~Preparate para despegar", 2000, 6 );
    	PlayerPlaySound(playerid, 1083, 0.0, 0.0, 0.0);
    	SetTimerEx("busroutestoptimer", 10000, false, "i", playerid);
		TogglePlayerControllable(playerid, 0);
		SetVehicleVelocity(GetPlayerVehicleID(playerid), 0.0, 0.0, 0.0);
		SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Vous devez attendre 10 secondes.");
    	return 1;
    }
    else if(AirRoute[playerid] == 3)
	{
    	SetPlayerCheckpoint(playerid, 1510.0546,-2494.0354,14.2854, 10.0);
    	AirRoute[playerid] = 4;
    	//GameTextForPlayer(playerid, "~y~Preparate para despegar", 2000, 6 );
    	PlayerPlaySound(playerid, 1083, 0.0, 0.0, 0.0);
    	GameTextForAll("~r~IBERIA AIRLINES ~b~53420-23 ~n~~g~Va a llegar a LS", 5000, 6 );
    	SetTimerEx("busroutestoptimer", 10000, false, "i", playerid);
		TogglePlayerControllable(playerid, 0);
		SetVehicleVelocity(GetPlayerVehicleID(playerid), 0.0, 0.0, 0.0);
		SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Vous devez attendre 10 secondes.");
    	return 1;
    }
    else if(AirRoute[playerid] == 4)
	{
    	AirRoute[playerid] = 0;
    	SafeGivePlayerMoney(playerid, 500);
    	SendClientMessage(playerid, COLOR_YELLOW2, "Trajet terminé, faites /sortir pour sortir.");
    	DisablePlayerCheckpoint(playerid);
    	GameTextForPlayer(playerid, "~r~500$~n~", 5000, 6 );
    	PlayerPlaySound(playerid, 1083, 0.0, 0.0, 0.0);
    	SetVehicleVelocity(GetPlayerVehicleID(playerid), 0.0, 0.0, 0.0);
    	TogglePlayerControllable(playerid, 0);
        PlayerInfo[playerid][pWork] += 1;
    	return 1;
    }
// -------------------------- RUTA TREN ------------------------ //
// by CodeMan of Course!
if(TrainRoute[playerid] == 1) // To LA Station
	{
    	SetPlayerCheckpoint(playerid, 824.4037,-1375.1676,-0.2494, 10.0);
    	TrainRoute[playerid] = 2;
    	PlayerPlaySound(playerid, 1083, 0.0, 0.0, 0.0);
    	return 1;
    }
    else if(TrainRoute[playerid] == 2) // TO SF
	{
    	SetPlayerCheckpoint(playerid, -1942.7585,169.0360,27.0006, 10.0);
    	TrainRoute[playerid] = 3;
    	PlayerPlaySound(playerid, 1083, 0.0, 0.0, 0.0);
  		SetTimerEx("busroutestoptimer", 10000, false, "i", playerid);
		TogglePlayerControllable(playerid, 0);
		SetVehicleVelocity(GetPlayerVehicleID(playerid), 0.0, 0.0, 0.0);
		SetPlayerVelocity(playerid,0.0,0.0,0.0);
		new Float:X,Float:Y,Float:Z,Float:VX,Float:VY,Float:VZ ;
        new Veh=GetPlayerVehicleID(playerid);
        GetVehicleVelocity(Veh,VX,VY,VZ);
        GetVehiclePos(Veh,X,Y,Z);
        SetVehicleVelocity(Veh,0,0,0);
        SetVehiclePos(Veh,X+VX,Y+VY,Z+VZ);
		SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Vous devez attendre 10 secondes.");
    	return 1;
    }
    else if(TrainRoute[playerid] == 3) // To LV Station I
	{
    	SetPlayerCheckpoint(playerid, 1473.3613,2632.2500,12.1256, 10.0);
    	TrainRoute[playerid] = 4;
    	PlayerPlaySound(playerid, 1083, 0.0, 0.0, 0.0);
    	SetTimerEx("busroutestoptimer", 10000, false, "i", playerid);
		TogglePlayerControllable(playerid, 0);
		SetVehicleVelocity(GetPlayerVehicleID(playerid), 0.0, 0.0, 0.0);
		SetPlayerVelocity(playerid,0.0,0.0,0.0);
		new Float:X,Float:Y,Float:Z,Float:VX,Float:VY,Float:VZ ;
        new Veh=GetPlayerVehicleID(playerid);
        GetVehicleVelocity(Veh,VX,VY,VZ);
        GetVehiclePos(Veh,X,Y,Z);
        SetVehicleVelocity(Veh,0,0,0);
        SetVehiclePos(Veh,X+VX,Y+VY,Z+VZ);
		SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Vous devez attendre 10 secondes.");
    	return 1;
    }
    else if(TrainRoute[playerid] == 4) // To LV Station II
	{
    	SetPlayerCheckpoint(playerid, 2864.7500,1254.9102,12.1256, 10.0);
    	TrainRoute[playerid] = 5;
    	PlayerPlaySound(playerid, 1083, 0.0, 0.0, 0.0);
    	SetTimerEx("busroutestoptimer", 10000, false, "i", playerid);
		TogglePlayerControllable(playerid, 0);
		SetVehicleVelocity(GetPlayerVehicleID(playerid), 0.0, 0.0, 0.0);
		SetPlayerVelocity(playerid,0.0,0.0,0.0);
		new Float:X,Float:Y,Float:Z,Float:VX,Float:VY,Float:VZ ;
        new Veh=GetPlayerVehicleID(playerid);
        GetVehicleVelocity(Veh,VX,VY,VZ);
        GetVehiclePos(Veh,X,Y,Z);
        SetVehicleVelocity(Veh,0,0,0);
        SetVehiclePos(Veh,X+VX,Y+VY,Z+VZ);
		SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Vous devez attendre 10 secondes.");
    	return 1;
    }
    else if(TrainRoute[playerid] == 5) // To Unity Finish
	{
    	SetPlayerCheckpoint(playerid, 1698.5337,-1953.6488,14.8756, 10.0);
    	TrainRoute[playerid] = 6;
    	PlayerPlaySound(playerid, 1083, 0.0, 0.0, 0.0);
    	SetTimerEx("busroutestoptimer", 10000, false, "i", playerid);
		TogglePlayerControllable(playerid, 0);
		SetVehicleVelocity(GetPlayerVehicleID(playerid), 0.0, 0.0, 0.0);
		SetPlayerVelocity(playerid,0.0,0.0,0.0);
		new Float:X,Float:Y,Float:Z,Float:VX,Float:VY,Float:VZ ;
        new Veh=GetPlayerVehicleID(playerid);
        GetVehicleVelocity(Veh,VX,VY,VZ);
        GetVehiclePos(Veh,X,Y,Z);
        SetVehicleVelocity(Veh,0,0,0);
        SetVehiclePos(Veh,X+VX,Y+VY,Z+VZ);
		SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Vous devez attendre 10 secondes.");
    	return 1;
    }
    else if(TrainRoute[playerid] == 6)
	{
    	TrainRoute[playerid] = 0;
    	SafeGivePlayerMoney(playerid, 300);
    	TogglePlayerControllable(playerid, 0);
    	SetPlayerVelocity(playerid,0.0,0.0,0.0);
		new Float:X,Float:Y,Float:Z,Float:VX,Float:VY,Float:VZ ;
        new Veh=GetPlayerVehicleID(playerid);
        GetVehicleVelocity(Veh,VX,VY,VZ);
        GetVehiclePos(Veh,X,Y,Z);
        SetVehicleVelocity(Veh,0,0,0);
        SetVehiclePos(Veh,X+VX,Y+VY,Z+VZ);
    	SendClientMessage(playerid, COLOR_YELLOW2, "Trajet terminé, faites /sortir pour sortir.");
    	DisablePlayerCheckpoint(playerid);
    	GameTextForPlayer(playerid, "~~r~+ 300$~n~", 5000, 6 );
    	SetVehicleVelocity(GetPlayerVehicleID(playerid), 0.0, 0.0, 0.0);
    	PlayerPlaySound(playerid, 1083, 0.0, 0.0, 0.0);
        PlayerInfo[playerid][pWork] += 1;
    	return 1;
    }
	if (InAFoodPlace[playerid] != 0)
	{
		TogglePlayerControllable(playerid, 0);
		switch (InAFoodPlace[playerid])
		{
			case 1: // chicken
			{
				ShowMenuForPlayer(chickenmenu, playerid);
				SetPlayerPos(playerid,368.9714,-6.2486,1001.8516);
				SetPlayerFacingAngle(playerid, 357.0132);
			}
			case 2: // burger
			{
				ShowMenuForPlayer(burgermenu, playerid);
				SetPlayerPos(playerid,376.8571,-67.6620,1001.5151);
				SetPlayerFacingAngle(playerid, 357.0132);
			}
			case 3: // pizza
			{
				ShowMenuForPlayer(pizzamenu, playerid);
				SetPlayerPos(playerid,375.6895,-118.9683,1001.4995);
				SetPlayerFacingAngle(playerid, 357.0132);
			}
			case 4: // donut
			{
				ShowMenuForPlayer(donutshop, playerid);
				SetPlayerPos(playerid,379.0611,-186.6032,1000.6328);
				SetPlayerFacingAngle(playerid, 280);
			}
		}
		SetCameraBehindPlayer(playerid);
		return 1;
	}
	DisablePlayerCheckpoint(playerid);
	return 1;
}

public OnPlayerLeaveCheckpoint(playerid)
{
	return 1;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
	if(RaceParticipant[playerid]>=1)
	{
		if(RaceParticipant[playerid] == 6)
	    {
			new name[MAX_PLAYER_NAME], LapTime, RaceTime;
			LapTime=GetLapTick(playerid);
			RaceTime=GetRaceTick(playerid);
			GetPlayerName(playerid, name, MAX_PLAYER_NAME);
			RaceParticipant[playerid]=0;
			RaceSound(playerid,1139);
			format(ystring,sizeof(ystring),"[Info:] %s has finished the race, position: %d",name,Ranking);
			if (Ranking < 4) SendClientMessageToAll(COLOR_LIGHTGREEN,ystring);
			else SendClientMessage(playerid,COLOR_WHITE,ystring);
			if(Racemode == ORacemode && ORacelaps == Racelaps)
			{
				new	LapString[10],RaceString[10], laprank, racerank;
				LapString=BeHuman(LapTime);
				RaceString=BeHuman(RaceTime);
				format(ystring,sizeof(ystring),"~w~Racetime: %s",RaceString);
				if(ORacemode!=0) format(ystring,sizeof(ystring),"%s~n~Laptime: %s",ystring,LapString);
				laprank=CheckBestLap(playerid,LapTime);
				if(laprank == 1)
				{
				    format(ystring,sizeof(ystring),"%s~n~~y~LAP RECORD",ystring);
				}
				racerank=CheckBestRace(playerid,RaceTime);
				if(racerank == 1)
				{
				    format(ystring,sizeof(ystring),"%s~n~~y~TRACK RECORD",ystring);
				}
			    GameTextForPlayer(playerid,ystring,5000,3);
		    }
			if(Ranking<4)
			{
				new winrar;
				if(Ranking == 1 && Participants == 1) winrar=Pot;
				else if(Ranking == 1 && Participants == 2) winrar=Pot/6*4;
				else winrar=Pot/6*PrizeMP;
				SafeGivePlayerMoney(playerid,winrar);
				format(ystring,sizeof(ystring),"[Info:] You have earned $%d from the race",winrar);
				PrizeMP--;
				SendClientMessage(playerid,COLOR_WHITE,ystring);
			}
			Ranking++;
			Participants--;
	        DisablePlayerRaceCheckpoint(playerid);
	        if(Participants == 0)
	        {
	            endrace();
	        }
	    }
	    else if (RaceStart == 0 && RaceParticipant[playerid]==1)
	    {
			SendClientMessage(playerid, COLOR_WHITE, "[Info:] Type /ready when you are ready to start");
			RaceParticipant[playerid]=2;
	    }
	    else if (RaceStart==1)
	    {
			RaceSound(playerid,1138);
			SetNextCheckpoint(playerid);
	    }
	}
	return 1;
}

public OnPlayerLeaveRaceCheckpoint(playerid)
{
	return 1;
}

public OnRconCommand(cmd[])
{
	return 1;
}

public OnObjectMoved(objectid)
{
	return 1;
}

public OnPlayerObjectMoved(playerid, objectid)
{
	return 1;
}
public OnPlayerSelectedMenuRow(playerid, row)
{
    new Menu:Current = GetPlayerMenu(playerid);
    new Float:PlayerHealth;
    new Health = GetPlayerHealth(playerid, PlayerHealth);
    if(Current == BurgerShot)
	{
	 	switch(row)
	 	{
	  		case 0:
	  		{
	  			SafeGivePlayerMoney(playerid, -3);
	  			if(Health <= 74.9)
	  			{
	  				SetPlayerHealth(playerid, PlayerHealth+25);
				}
				else
				{
				    SetPlayerHealth(playerid, 100.0);
				}
	  			SendClientMessage(playerid, 0xFFC801C8, "Burger Shot: Merci d'avoir acheté le Baby Burger, Bon appétit et Bonne fin de journée!");
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				TogglePlayerControllable(playerid, 1);
				SetTimerEx("CanDriveThruAgain", 7000, 0, "i", playerid);
				return 1;
			}
			case 1:
	  		{
	  			SafeGivePlayerMoney(playerid, -6);
	  			if(Health <= 49.9)
	  			{
	  				SetPlayerHealth(playerid, PlayerHealth+50);
				}
				else
				{
				    SetPlayerHealth(playerid, 100.0);
				}
	  			SendClientMessage(playerid, 0xFFC801C8, "Burger Shot: Merci d'avoir acheté le Double Cheese, Bon appétit et Bonne fin de journée!");
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				TogglePlayerControllable(playerid, 1);
				SetTimerEx("CanDriveThruAgain", 7000, 0, "i", playerid);
				return 1;
			}
			case 2:
	  		{
	  			SafeGivePlayerMoney(playerid, -9);
	  			SetPlayerHealth(playerid, 100);
	  			SendClientMessage(playerid, 0xFFC801C8, "Burger Shot: Merci d'avoir acheté le Tripple Whopper, Bon appétit et Bonne fin de journée!");
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				TogglePlayerControllable(playerid, 1);
				SetTimerEx("CanDriveThruAgain", 7000, 0, "i", playerid);
				return 1;
			}
			case 3:
			{
			    if(PlayerTied[playerid] != 1 || PlayerCuffed[playerid] != 1)
			    {
			        TogglePlayerControllable(playerid, 1);
				}
				SetTimerEx("CanDriveThruAgain", 7000, 0, "i", playerid);
			    return 1;
			}
		}
	}
	//new Menu:Current = GetPlayerMenu(playerid);
	if(Current == MAdmin)
	{
		if(row <=4 && RaceActive == 1)
		{
		    SendClientMessage(playerid, COLOR_GREY, "[Error:] Race active, can not change this setting");
			ShowMenuForPlayer(MAdmin,playerid);
		    return 1;
		}
		if(row == 0) ShowMenuForPlayer(MPMode,playerid);
		else if (row == 1) ShowMenuForPlayer(MPrize,playerid);
		else if (row == 2) ShowMenuForPlayer(MDyna,playerid);
		else if (row == 3) ShowMenuForPlayer(MFee,playerid);
		else if (row == 4) ShowMenuForPlayer(MDelay,playerid);
		else if (row == 5)
		{
		    if(RaceActive == 1) endrace();
		    else SendClientMessage(playerid, COLOR_GREY, "[Error:] No race active");
		    ShowMenuForPlayer(MAdmin,playerid);
		}
		else if (row == 9)
		{
			TogglePlayerControllable(playerid,1);
			HideMenuForPlayer(MAdmin,playerid);
		}
		else
		{
			if(row == 6 && RaceAdmin == 1) RaceAdmin=0;
			else if(row == 6 && RaceAdmin == 0) RaceAdmin=1;
			else if(row == 7 && BuildAdmin == 1) BuildAdmin=0;
			else if(row == 7 && BuildAdmin == 0) BuildAdmin=1;
			else if(row == 8 && RRotation >= 0) RRotation = -1;
			else RRotation = 0;
			if(RaceAdmin == 1) format(ystring,sizeof(ystring),"RA: On");
			else format(ystring,sizeof(ystring),"RA: Off");
			if(BuildAdmin == 1) format(ystring,sizeof(ystring),"%s BA: On",ystring);
			else format(ystring,sizeof(ystring),"%s BA: Off",ystring);
			if(RRotation >= 0) format(ystring,sizeof(ystring),"%s RR: On",ystring);
			else format(ystring,sizeof(ystring),"%s RR: Off",ystring);
			if(RRotation >= 0 && row == 8)  RotationTimer = SetTimer("RaceRotation",RRotationDelay,1);
			else if(RRotation -1 && row == 8) KillTimer(RotationTimer);
			RefreshMenuHeader(playerid,MAdmin,ystring);
		}
	}
	else if(Current == MPMode)
	{
		if(row == 5)
		{
			 ShowMenuForPlayer(MAdmin,playerid);
			 return 1;
		}
		PrizeMode = row;
		if     (PrizeMode == 0) ystring = "Fixed";
		else if(PrizeMode == 1) ystring = "Dynamic";
		else if(PrizeMode == 2) ystring = "Join Fee";
		else if(PrizeMode == 3) ystring = "Join Fee + Fixed";
		else if(PrizeMode == 4) ystring = "Join Fee + Dynamic";
		format(ystring,sizeof(ystring),"Mode: %s",ystring);
		RefreshMenuHeader(playerid,MPMode,ystring);
	}
	else if(Current == MPrize)
	{
	    if(row == 6)
	    {
	        ShowMenuForPlayer(MAdmin,playerid);
	        return 1;
	    }
	    if     (row == 0) Prize += 100;
	    else if(row == 1) Prize += 1000;
	    else if(row == 2) Prize += 10000;
	    else if(row == 3) Prize -= 100;
	    else if(row == 4) Prize -= 1000;
	    else if(row == 5) Prize -= 10000;
	    if(Prize < 0) Prize = 0;
		format(ystring,sizeof(ystring),"Amount: %d",Prize);
		RefreshMenuHeader(playerid,MPrize,ystring);
	}
	else if(Current == MDyna)
	{
		if(row == 4)
		{
		    ShowMenuForPlayer(MAdmin,playerid);
		    return 1;
		}
		if     (row == 0) DynaMP++;
		else if(row == 1) DynaMP+=5;
		else if(row == 2) DynaMP--;
		else if(row == 3) DynaMP-=5;
		else if(DynaMP < 1) DynaMP = 1;
		format(ystring,sizeof(ystring),"Multiplier: %dx",DynaMP);
		RefreshMenuHeader(playerid,MDyna,ystring);
	}
	else if(Current == MBuild)
	{

	    if (row == 0)
		{
			format(ystring,sizeof(ystring),"Laps: %d",Blaps[b(playerid)]);
			SetMenuColumnHeader(MLaps,0,ystring);
			ShowMenuForPlayer(MLaps,playerid);
		}
	    else if (row == 1)
		{
			format(ystring,sizeof(ystring),"Mode: %s",ReturnModeName(Bracemode[b(playerid)]));
			SetMenuColumnHeader(MRacemode,0,ystring);
			ShowMenuForPlayer(MRacemode,playerid);
		}
		else if (row == 2)
		{
		    format(ystring,sizeof(ystring),"Size: %0.2f",BCPsize[b(playerid)]);
		    SetMenuColumnHeader(MCPsize,0,ystring);
		    ShowMenuForPlayer(MCPsize,playerid);
		}
	    else if (row == 3)
	    {
	        if(BAirrace[b(playerid)] == 0)
			{
				BAirrace[b(playerid)] = 1;
				format(ystring,sizeof(ystring),"Air race: On");
			}
   	        else if(BAirrace[b(playerid)] == 1)
			{
				BAirrace[b(playerid)] = 0;
				format(ystring,sizeof(ystring),"Air race: Off");
			}
   	        RefreshMenuHeader(playerid,MBuild,ystring);
	    }
	    else if(row == 4)
	    {
	        clearrace(playerid);
	        HideMenuForPlayer(MBuild,playerid);
	        TogglePlayerControllable(playerid,1);
			return 1;
	    }
	    else if(row == 5)
	    {
	        HideMenuForPlayer(MBuild,playerid);
			TogglePlayerControllable(playerid,1);
	    }
	}
	else if(Current == MLaps)
	{

	    if(row == 6)
	    {
	        if(RaceBuilders[playerid] != 0) ShowMenuForPlayer(MBuild,playerid);
	        else ShowMenuForPlayer(MRace,playerid);
	        return 1;
		}
		new change=0;
	    if     (row == 0) change++;
		else if(row == 1) change+=5;
		else if(row == 2) change+=10;
		else if(row == 3) change--;
		else if(row == 4) change-=5;
		else if(row == 5) change-=10;
		if(RaceBuilders[playerid] != 0)
		{
		    Blaps[b(playerid)] += change;
			if(Blaps[b(playerid)] < 1) Blaps[b(playerid)] = 1;
			format(ystring,sizeof(ystring),"Laps: %d",Blaps[b(playerid)]);
			RefreshMenuHeader(playerid,MLaps,ystring);
		}
		else
		{
			Racelaps += change;
			if(Racelaps < 1) Racelaps = 1;
			format(ystring,sizeof(ystring),"Laps: %d",Racelaps);
			RefreshMenuHeader(playerid,MLaps,ystring);
		}

	}
	else if(Current == MRacemode)
	{
		if(row == 4)
		{
		    if(RaceBuilders[playerid] != 0) ShowMenuForPlayer(MBuild,playerid);
		    else ShowMenuForPlayer(MRace,playerid);
		    return 1;
		}
		if(RaceBuilders[playerid] != 0)
		{
		    Bracemode[b(playerid)]=row;
			if(Bracemode[b(playerid)] == 2 && BCurrentCheckpoints[b(playerid)] < 3)
			{
				SendClientMessage(playerid, COLOR_GREY, "[Error:] You can not set racemode 2 with only 2 CPs");
				Bracemode[b(playerid)] = 1;
			}
			format(ystring,sizeof(ystring),"Mode: %s",ReturnModeName(Bracemode[b(playerid)]));
			RefreshMenuHeader(playerid,MRacemode,ystring);
			return 1;
		}
		else
		{
		    Racemode = row;
			if(Racemode == 2 && LCurrentCheckpoint < 2)
			{
				SendClientMessage(playerid, COLOR_GREY, "[Error:] You can not set racemode 2 with only 2 CPs");
				Racemode = 1;
			}
			format(ystring,sizeof(ystring),"Mode: %s",ReturnModeName(Racemode));
			RefreshMenuHeader(playerid,MRacemode,ystring);
			return 1;
		}
	}
	else if(Current == MRace)
	{
	    if(row == 0)
		{
			format(ystring,sizeof(ystring),"Laps: %d",Racelaps);
			SetMenuColumnHeader(MLaps,0,ystring);
			ShowMenuForPlayer(MLaps,playerid);
		}
	    else if(row == 1)
		{
			format(ystring,sizeof(ystring),"Mode: %s",ReturnModeName(Racemode));
			SetMenuColumnHeader(MRacemode,0,ystring);
            ShowMenuForPlayer(MRacemode,playerid);
		}
		else if(row == 2)
		{
		    format(ystring,sizeof(ystring),"Size: %0.2f",CPsize);
		    SetMenuColumnHeader(MCPsize,0,ystring);
		    ShowMenuForPlayer(MCPsize,playerid);
		}
	    else if(row == 3)
	    {
	        if(Airrace == 0)
			{
				Airrace = 1;
				format(ystring,sizeof(ystring),"Air race: On");
			}
			else if(Airrace == 1)
			{
				Airrace = 0;
				format(ystring,sizeof(ystring),"Air race: Off");
			}
			RefreshMenuHeader(playerid,MRace,ystring);
	    }
		else if(row == 4)
		{
			if(RaceActive == 0)
			{
				startrace();
		        HideMenuForPlayer(MRace,playerid);
				TogglePlayerControllable(playerid,1);
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "[Error:] Race is already active");

			}
		}
		else if(row == 5)
		{
	        HideMenuForPlayer(MRace,playerid);
			TogglePlayerControllable(playerid,1);
		}
	}
	else if(Current == MFee)
	{
	    if(row == 6)
	    {
	        ShowMenuForPlayer(MAdmin,playerid);
	        return 1;
	    }
	    if(row == 0) JoinFee +=100;
	    if(row == 1) JoinFee +=1000;
	    if(row == 2) JoinFee +=10000;
	    if(row == 3) JoinFee -=100;
	    if(row == 4) JoinFee -=1000;
	    if(row == 5) JoinFee -=10000;
	    if(JoinFee < 0) JoinFee = 0;
		format(ystring,sizeof(ystring),"Fee: %d$",JoinFee);
	    RefreshMenuHeader(playerid,MFee,ystring);
	}
	else if(Current == MCPsize)
	{
	    if(row == 6)
	    {
			if(RaceBuilders[playerid] != 0) ShowMenuForPlayer(MBuild,playerid);
			else ShowMenuForPlayer(MRace,playerid);
	        return 1;
	    }
		new Float:change;
	    if(row == 0) change +=0.1;
	    if(row == 1) change +=1.0;
	    if(row == 2) change +=10.0;
		if(row == 3) change -=0.1;
		if(row == 4) change -=1.0;
		if(row == 5) change -=10.0;
		if(RaceBuilders[playerid] != 0)
		{
		    BCPsize[b(playerid)] += change;
			if(BCPsize[b(playerid)] < 1.0) BCPsize[b(playerid)] = 1.0;
			if(BCPsize[b(playerid)] > 32.0) BCPsize[b(playerid)] = 32.0;
			format(ystring,sizeof(ystring),"Size %0.2f",BCPsize[b(playerid)]);
			RefreshMenuHeader(playerid,MCPsize,ystring);
		}
		else
		{
		    CPsize += change;
		    if(CPsize < 1.0) CPsize = 1.0;
		    if(CPsize > 32.0) CPsize = 32.0;
		    format(ystring,sizeof(ystring),"Size %0.2f",CPsize);
		    RefreshMenuHeader(playerid,MCPsize,ystring);
		}
	}
	else if(Current == MDelay)
	{
	    if(row == 4)
	    {
	        ShowMenuForPlayer(MAdmin,playerid);
	        return 1;
	    }
		if      (row == 0) MajorityDelay+=10;
		else if (row == 1) MajorityDelay+=60;
		else if (row == 2) MajorityDelay-=10;
		else if (row == 3) MajorityDelay-=60;
		if(MajorityDelay <= 0)
		{
			MajorityDelay=0;
			format(ystring,sizeof(ystring),"Delay: disabled");
		}
		else format(ystring,sizeof(ystring),"Delay: %ds",MajorityDelay);
		RefreshMenuHeader(playerid,MDelay,ystring);
	}
	if(Current == CluckinBell)
	{
	 	switch(row)
	 	{
	  		case 0:
	  		{
	  			SafeGivePlayerMoney(playerid, -3);
	  			if(Health <= 74.9)
	  			{
	  				SetPlayerHealth(playerid, PlayerHealth+25);
				}
				else
				{
				    SetPlayerHealth(playerid, 100.0);
				}
	  			SendClientMessage(playerid, 0xFFC801C8, "Cluckin' Bell: Merci pour l'interet que ovus portez a notre nourriture, Bonne fin de journée!");
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				TogglePlayerControllable(playerid, 1);
				SetTimerEx("CanDriveThruAgain", 7000, 0, "i", playerid);
				return 1;
			}
			case 1:
	  		{
	  			SafeGivePlayerMoney(playerid, -6);
	  			if(Health <= 49.9)
	  			{
	  				SetPlayerHealth(playerid, PlayerHealth+50);
				}
				else
				{
				    SetPlayerHealth(playerid, 100.0);
				}
	  			SendClientMessage(playerid, 0xFFC801C8, "Cluckin' Bell: Merci et bon appétit, Bonne journée!");
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				TogglePlayerControllable(playerid, 1);
				SetTimerEx("CanDriveThruAgain", 7000, 0, "i", playerid);
				return 1;
			}
			case 2:
	  		{
	  			SafeGivePlayerMoney(playerid, -9);
	  			SetPlayerHealth(playerid, 100);
	  			SendClientMessage(playerid, 0xFFC801C8, "Cluckin' Bell: Nous esperons que vous mangerez tout, Bonne journée!");
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				TogglePlayerControllable(playerid, 1);
				SetTimerEx("CanDriveThruAgain", 7000, 0, "i", playerid);
				return 1;
			}
			case 3:
			{
			    if(PlayerTied[playerid] != 1 || PlayerCuffed[playerid] != 1)
			    {
			        TogglePlayerControllable(playerid, 1);
				}
				SetTimerEx("CanDriveThruAgain", 7000, 0, "i", playerid);
			    return 1;
			}
		}
	}
   	if(Current == burgermenu || Current == chickenmenu || Current == pizzamenu || Current == donutshop)
	{
		TogglePlayerControllable(playerid, 1);
		if (row != 10) // 10 = Leave
		{
			if (GetPlayerMoney(playerid) <= 0)
			{
				GameTextForPlayer(playerid, "~r~Pas assez d'argent", 5000, 1);
				return 1;
			}
			new actstring[128];
			new sendername[64];
			new Float:health;
			GetPlayerName(playerid, sendername, sizeof(sendername));
			GetPlayerHealth(playerid, health);
			if (row == 7 || row == 8) // Drink
			{
				format(actstring, sizeof(actstring), " %s boit à la Bouteille.", sendername);
				SafeGivePlayerMoney(playerid, -1);
				SetPlayerHealth(playerid, health + 10);
				ApplyAnimation(playerid,"VENDING","VEND_Drink_P",4.1,0,1,1,0,1);
			}
			else // Meal
			{
				switch (row)
				{
					case 1:
					{
					    if(Current == donutshop) format(actstring, sizeof(actstring), " %s mange son petit donuts et joue avec le jouet qu'il a reçus.", sendername);
						else format(actstring, sizeof(actstring), " %s mange son menu enfant et joue avec le jouet qu'il a reçus.", sendername);
						SafeGivePlayerMoney(playerid, -2);
						SetPlayerHealth(playerid, health + 20);
					}
					case 2:
					{
						if (Current == chickenmenu) format(actstring, sizeof(actstring), " %s mange ses nuggets qui était dans le bol.", sendername);
						else if (Current == pizzamenu) format(actstring, sizeof(actstring), " %s mange sa pizza.", sendername);
						else if (Current == donutshop) format(actstring, sizeof(actstring), " %s mange son donuts.", sendername);
						else format(actstring, sizeof(actstring), " %s mange son cheeseburger.", sendername);
						SafeGivePlayerMoney(playerid, -4);
						SetPlayerHealth(playerid, health + 50);
					}
					case 3:
					{
						if (Current == pizzamenu) format(actstring, sizeof(actstring), " %s mange sa pizza bien grasse.", sendername);
						else if (Current == donutshop) format(actstring, sizeof(actstring), " %s mange son donuts exrtat large.", sendername);
						else format(actstring, sizeof(actstring), " %s mange son sandwish.", sendername);
						SafeGivePlayerMoney(playerid, -5);
						SetPlayerHealth(playerid, health + 80);
					}
					case 4:
					{
					    if (Current == donutshop) format(actstring, sizeof(actstring), " %s mange son donuts exrtat large.", sendername);
					    else format(actstring, sizeof(actstring), " %s mange sa salade.", sendername);
						SafeGivePlayerMoney(playerid, -3);
						SetPlayerHealth(playerid, health + 35);
					}
				}
				if (Current == burgermenu) ApplyAnimation(playerid,"FOOD","EAT_Burger",4.1,0,1,1,0,1);
				else if (Current == chickenmenu) ApplyAnimation(playerid,"FOOD","EAT_Chicken",4.1,0,1,1,0,1);
				else if (Current == pizzamenu) ApplyAnimation(playerid,"FOOD","EAT_Pizza",4.1,0,1,1,0,1);
				else if (Current == donutshop) ApplyAnimation(playerid,"FOOD","EAT_Pizza",4.1,0,1,1,0,1);
				if (GetPlayerMoney(playerid) > 100) SetPlayerHealth(playerid, 100);
			}
			ProxDetector(30.0, playerid, actstring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
	}
	if(Current == Licenses)
	{
	    switch(row)
	    {
	        case 0:
	        {
	            SendClientMessage(playerid, COLOR_LIGHTBLUE, " Bienvenue a l'Auto Ecole. Si vous voulez acheter votre permis de conduire, utilisez: /permisconduire ");
	    		SendClientMessage(playerid, COLOR_LIGHTBLUE, " Nous ésperons que vous roulerez prudement sur les routes de Los Santos.");
	    		SendClientMessage(playerid, COLOR_LIGHTBLUE, " Vous dervez réalisé un test pour obtenir votre permis de conduire.");
	    		SendClientMessage(playerid, COLOR_LIGHTRED, " [Le permis conduire coûte 2,500$] ");
	    		TogglePlayerControllable(playerid,1);
		 	}
    		case 1:
	        {
	            SendClientMessage(playerid, COLOR_LIGHTBLUE, " Bienvenue a l'auto ecole. Si vous voulez acheter votre permis de vol tapper: /permisvol ");
	    		SendClientMessage(playerid, COLOR_LIGHTBLUE, " Nous esperons que vous allez voler prudement dans les airs de Los Santos ! ");
                SendClientMessage(playerid, COLOR_LIGHTRED, " [Le permis vol coûte 30,000$] ");
				TogglePlayerControllable(playerid,1);
		 	}
		 	case 2:
	        {
	            SendClientMessage(playerid, COLOR_LIGHTBLUE, " Bienvenue a l'auto ecole. Si vous voulez acheter votre permis de navigation tapper: /permisnavigation ");
	    		SendClientMessage(playerid, COLOR_LIGHTBLUE, " Nous esperons que vous allez naviguer prudement sur les eaux de Los Santos ! ");
                SendClientMessage(playerid, COLOR_LIGHTRED, " [Le permis de navigation coûte 5,000$] ");
				TogglePlayerControllable(playerid,1);
		 	}
		 	case 3:
            {
	            SendClientMessage(playerid, COLOR_LIGHTBLUE, " Ici, vous êtes a l'auto-école ! Si vous voulez vous procurer le permis arme légalement, ");
	    		SendClientMessage(playerid, COLOR_LIGHTBLUE, " Demandez a un agent de Police de vous le fournir. ");
                SendClientMessage(playerid, COLOR_LIGHTRED, "  Attention : Son prix peut être variable ! ");
				TogglePlayerControllable(playerid,1);
		 	}
		 	case 4:
	        {
         		HideMenuForPlayer(Licenses, playerid);
	            TogglePlayerControllable(playerid,1);
		 	}
		}
	}
	if(Current == LegalJobs)
	{
	    switch(row)
	    {
	        case 0:
	        {
	        	SendClientMessage(playerid, COLOR_WHITE, " Vous êtes sur le point de devenir Detective, et d'obtenir un contrat de 5h.");
	    		SendClientMessage(playerid, COLOR_WHITE, " Vous devez finir le contrat de 5h si vous voulez quitter ce job plus tard.");
		   		SendClientMessage(playerid, COLOR_WHITE, " Si vous êtes sur de devenir Detective, tapper /accepter job.");
	    		GettingJob[playerid] = 1;
	    		TogglePlayerControllable(playerid,1);
		 	}
		 	case 1:
		 	{
		 	    SendClientMessage(playerid, COLOR_WHITE, " Vous êtes sur le point de devenir Avocat, et d'obtenir un contrat de 5h.");
				SendClientMessage(playerid, COLOR_WHITE, " Vous devez finir le contrat de 5h si vous voulez quitter ce job plus tard.");
				SendClientMessage(playerid, COLOR_WHITE, " Si vous êtes sur de devenir Avocat, tapper /accepter job.");
				GettingJob[playerid] = 2;
				TogglePlayerControllable(playerid,1);
			}
			case 2:
			{
   				SendClientMessage(playerid, COLOR_WHITE, " Vous êtes sur le point de devenir Serveur, et d'obtenir un contrat de 5h.");
				SendClientMessage(playerid, COLOR_WHITE, " Vous devez finir le contrat de 5h si vous voulez quitter ce job plus tard.");
				SendClientMessage(playerid, COLOR_WHITE, " Si vous êtes sur de devenir serveur, tapper /accepter job.");
				GettingJob[playerid] = 6;
				TogglePlayerControllable(playerid,1);
			}
			case 3:
			{
   				SendClientMessage(playerid, COLOR_WHITE, " Vous êtes sur le point de devenir Boxeur et d'obtenir un contrat de 5h.");
				SendClientMessage(playerid, COLOR_WHITE, " Vous devez finir le contrat de 5h si vous voulez quitter ce job plus tard.");
				SendClientMessage(playerid, COLOR_WHITE, " Si vous êtes sur de devenir Boxer, tapper /accepter job.");
				GettingJob[playerid] = 12;
				TogglePlayerControllable(playerid,1);
			}
 			case 4:
			{
   				SendClientMessage(playerid, COLOR_WHITE, " Vous êtes sur le point de devenir Cammioneur, et d'obtenir un contrat de 5h.");
				SendClientMessage(playerid, COLOR_WHITE, " Vous devez finir le contrat de 5h si vous voulez quitter ce job plus tard.");
				SendClientMessage(playerid, COLOR_WHITE, " Si vous êtes sur de devenir Cammioneur, tapper /accepter job.");
				GettingJob[playerid] = 16;
				TogglePlayerControllable(playerid,1);
			}
  			case 5:
			{
   				SendClientMessage(playerid, COLOR_WHITE, " Vous êtes sur le point de devenir Fermier, et d'obtenir un contrat de 5h.");
				SendClientMessage(playerid, COLOR_WHITE, " Vous devez finir le contrat de 5h si vous voulez quitter ce job plus tard.");
				SendClientMessage(playerid, COLOR_WHITE, " Si vous êtes sur de devenir Fermier, tapper /accepter job.");
				GettingJob[playerid] = 18;
				TogglePlayerControllable(playerid,1);
			}
			case 6:
			{
   				SendClientMessage(playerid, COLOR_WHITE, " Vous êtes sur le point de devenir Eboueur, et d'obtenir un contrat de 5h.");
				SendClientMessage(playerid, COLOR_WHITE, " Vous devez finir le contrat de 5h si vous voulez quitter ce job plus tard.");
				SendClientMessage(playerid, COLOR_WHITE, " Si vous êtes sur de devenir Eboueur, tapper /accepter job.");
				GettingJob[playerid] = 25;
				TogglePlayerControllable(playerid,1);
			}
			case 7:
			{
   				SendClientMessage(playerid, COLOR_WHITE, " Vous êtes sur le point de devenir Ouvrier, et d'obtenir un contrat de 5h.");
				SendClientMessage(playerid, COLOR_WHITE, " Vous devez finir le contrat de 5h si vous voulez quitter ce job plus tard.");
				SendClientMessage(playerid, COLOR_WHITE, " Si vous êtes sur de devenir Ouvrier, tapper /accepter job.");
				GettingJob[playerid] = 26;
				TogglePlayerControllable(playerid,1);
			}
			case 8:
			{
	            HideMenuForPlayer(LegalJobs, playerid);
	            ShowMenuForPlayer(LegalJobs2, playerid);
			}
 			case 9:
			{
	            HideMenuForPlayer(LegalJobs, playerid);
	            TogglePlayerControllable(playerid,1);
			}
		}
	}
	if(Current == LegalJobs2)
	{
	    switch(row)
	    {
	        case 0:
	        {
   				SendClientMessage(playerid, COLOR_WHITE, " Vous êtes sur le point de devenir Chauffeur de Taxi, et d'obtenir un contrat de 5h.");
				SendClientMessage(playerid, COLOR_WHITE, " Vous devez finir le contrat de 5h si vous voulez quitter ce job plus tard.");
				SendClientMessage(playerid, COLOR_WHITE, " Si vous êtes sur de devenir Chauffeur de Taxi, tapper /accepter job.");
	    		GettingJob[playerid] = 13;
	    		TogglePlayerControllable(playerid,1);
		 	}
		 	case 1:
		 	{
   				SendClientMessage(playerid, COLOR_WHITE, " Vous êtes sur le point de devenir Chauffeur de Bus, et d'obtenir un contrat de 5h.");
				SendClientMessage(playerid, COLOR_WHITE, " Vous devez finir le contrat de 5h si vous voulez quitter ce job plus tard.");
				SendClientMessage(playerid, COLOR_WHITE, " Si vous êtes sur de devenir Chauffeur de Bus, tapper /accepter job.");
				GettingJob[playerid] = 14;
				TogglePlayerControllable(playerid,1);
			}
			case 2:
			{
   				SendClientMessage(playerid, COLOR_WHITE, " Vous êtes sur le point de devenir Livreur de Journaux, et d'obtenir un contrat de 5h.");
				SendClientMessage(playerid, COLOR_WHITE, " Vous devez finir le contrat de 5h si vous voulez quitter ce job plus tard.");
				SendClientMessage(playerid, COLOR_WHITE, " Si vous êtes sur de devenir Livreur de Journaux, tapper /accepter job.");
				GettingJob[playerid] = 15;
				TogglePlayerControllable(playerid,1);
			}
			case 3:
			{
   				SendClientMessage(playerid, COLOR_WHITE, " Vous êtes sur le point de devenir Livreur de Pizza, et d'obtenir un contrat de 5h.");
				SendClientMessage(playerid, COLOR_WHITE, " Vous devez finir le contrat de 5h si vous voulez quitter ce job plus tard.");
				SendClientMessage(playerid, COLOR_WHITE, " Si vous êtes sur de devenir Livreur de Pizza, tapper /accepter job.");
				GettingJob[playerid] = 17;
				TogglePlayerControllable(playerid,1);
			}
 			case 4:
			{
   				SendClientMessage(playerid, COLOR_WHITE, " Vous êtes sur le point de devenir Balayeur de Rue, et d'obtenir un contrat de 5h.");
				SendClientMessage(playerid, COLOR_WHITE, " Vous devez finir le contrat de 5h si vous voulez quitter ce job plus tard.");
				SendClientMessage(playerid, COLOR_WHITE, " Si vous êtes sur de devenir Balayeur de Rue, tapper /accepter job.");
				GettingJob[playerid] = 21;
				TogglePlayerControllable(playerid,1);
			}
  			case 5:
			{
   				SendClientMessage(playerid, COLOR_WHITE, " Vous êtes sur le point de devenir Mecanicien, et d'obtenir un contrat de 5h.");
				SendClientMessage(playerid, COLOR_WHITE, " Vous devez finir le contrat de 5h si vous voulez quitter ce job plus tard.");
				SendClientMessage(playerid, COLOR_WHITE, " Si vous êtes sur de devenir Mecanicien, tapper /accepter job.");
				GettingJob[playerid] = 7;
				TogglePlayerControllable(playerid,1);
			}
   			case 6:
			{
   				SendClientMessage(playerid, COLOR_WHITE, " Vous êtes sur le point de devenir Garde du Corp, et d'obtenir un contrat de 5h.");
				SendClientMessage(playerid, COLOR_WHITE, " Vous devez finir le contrat de 5h si vous voulez quitter ce job plus tard.");
				SendClientMessage(playerid, COLOR_WHITE, " Si vous êtes sur de devenir Garde du Corp, tapper /accepter job.");
				GettingJob[playerid] = 8;
				TogglePlayerControllable(playerid,1);
			}
 			case 7:
			{
	            HideMenuForPlayer(LegalJobs2, playerid);
	            ShowMenuForPlayer(LegalJobs, playerid);
			}
  			case 8:
			{
	            HideMenuForPlayer(LegalJobs2, playerid);
	            TogglePlayerControllable(playerid,1);
			}
		}
	}
	if(Current == IlegalJobs)
	{
	    switch(row)
	    {
	        case 0:
	        {
   				SendClientMessage(playerid, COLOR_WHITE, " Vous êtes sur le point de devenir Prostituee, et d'obtenir un contrat de 5h.");
				SendClientMessage(playerid, COLOR_WHITE, " Vous devez finir le contrat de 5h si vous voulez quitter ce job plus tard.");
				SendClientMessage(playerid, COLOR_WHITE, " Si vous êtes sur de devenir Prostituee, tapper /accepter job.");
	    		GettingJob[playerid] = 3;
	    		TogglePlayerControllable(playerid,1);
		 	}
		 	case 1:
		 	{
   				SendClientMessage(playerid, COLOR_WHITE, " Vous êtes sur le point de devenir Dealer de Drogues, et d'obtenir un contrat de 5h.");
				SendClientMessage(playerid, COLOR_WHITE, " Vous devez finir le contrat de 5h si vous voulez quitter ce job plus tard.");
				SendClientMessage(playerid, COLOR_WHITE, " Si vous êtes sur de devenir Dealer de Drogues, tapper /accepter job.");
				GettingJob[playerid] = 4;
				TogglePlayerControllable(playerid,1);
			}
			case 2:
			{
   				SendClientMessage(playerid, COLOR_WHITE, " Vous êtes sur le point de devenir Dealer d'Armes, et d'obtenir un contrat de 5h.");
				SendClientMessage(playerid, COLOR_WHITE, " Vous devez finir le contrat de 5h si vous voulez quitter ce job plus tard.");
				SendClientMessage(playerid, COLOR_WHITE, " Si vous êtes sur de devenir Dealer d'Armes, tapper /accepter job.");
				GettingJob[playerid] = 9;
				TogglePlayerControllable(playerid,1);
			}
			case 3:
			{
   				SendClientMessage(playerid, COLOR_WHITE, " Vous êtes sur le point de devenir Voleur de voitures, et d'obtenir un contrat de 5h.");
				SendClientMessage(playerid, COLOR_WHITE, " Vous devez finir le contrat de 5h si vous voulez quitter ce job plus tard.");
				SendClientMessage(playerid, COLOR_WHITE, " Si vous êtes sur de devenir Voleur de voitures, tapper /accepter job.");
				SendClientMessage(playerid, COLOR_LIGHTRED, " JOB DESACTIVE ");
				GettingJob[playerid] = 0;
				TogglePlayerControllable(playerid,1);
			}
 			case 4:
			{
   				SendClientMessage(playerid, COLOR_WHITE, " Vous êtes sur le point de devenir Cultivateur de Drogues, et d'obtenir un contrat de 5h.");
				SendClientMessage(playerid, COLOR_WHITE, " Vous devez finir le contrat de 5h si vous voulez quitter ce job plus tard.");
				SendClientMessage(playerid, COLOR_WHITE, " Si vous êtes sur de devenir Cultivateur de Drogues, tapper /accepter job.");
				GettingJob[playerid] = 19;
				TogglePlayerControllable(playerid,1);
			}
  			case 5:
			{
   				SendClientMessage(playerid, COLOR_WHITE, " Vous êtes sur le point de devenir Contrebandier de Drogues, et d'obtenir un contrat de 5h.");
				SendClientMessage(playerid, COLOR_WHITE, " Vous devez finir le contrat de 5h si vous voulez quitter ce job plus tard.");
				SendClientMessage(playerid, COLOR_WHITE, " Si vous êtes sur de devenir Contrebandier de Drogues, tapper /accepter job.");
				GettingJob[playerid] = 20;
				TogglePlayerControllable(playerid,1);
			}
			case 6:
			{
   				SendClientMessage(playerid, COLOR_WHITE, " Vous êtes sur le point de devenir Contrebandier d'Armes, et d'obtenir un contrat de 5h.");
				SendClientMessage(playerid, COLOR_WHITE, " Vous devez finir le contrat de 5h si vous voulez quitter ce job plus tard.");
				SendClientMessage(playerid, COLOR_WHITE, " Si vous êtes sur de devenir Contrebandier d'Armes, tapper /accepter job.");
				GettingJob[playerid] = 22;
				TogglePlayerControllable(playerid,1);
			}
   			case 7:
			{
   				SendClientMessage(playerid, COLOR_WHITE, " Vous êtes sur le point de devenir Fabricant d'Armes, et d'obtenir un contrat de 5h.");
				SendClientMessage(playerid, COLOR_WHITE, " Vous devez finir le contrat de 5h si vous voulez quitter ce job plus tard.");
				SendClientMessage(playerid, COLOR_WHITE, " Si vous êtes sur de devenir Fabricant d'Armes, tapper /accepter job.");
				GettingJob[playerid] = 23;
				TogglePlayerControllable(playerid,1);
			}
 			case 8:
			{
   				SendClientMessage(playerid, COLOR_WHITE, " Vous êtes sur le point de devenir Faussaire, et d'obtenir un contrat de 5h.");
				SendClientMessage(playerid, COLOR_WHITE, " Vous devez finir le contrat de 5h si vous voulez quitter ce job plus tard.");
				SendClientMessage(playerid, COLOR_WHITE, " Si vous êtes sur de devenir Faussaire, tapper /accepter job.");
				GettingJob[playerid] = 24;
				TogglePlayerControllable(playerid,1);
			}
  			case 9:
			{
	            HideMenuForPlayer(IlegalJobs, playerid);
	            TogglePlayerControllable(playerid,1);
			}
		}
	}
	if(Current == Guide)
	{
	    switch(row)
	    {
	        case 0:
	        {
	           SendClientMessage(playerid, COLOR_GREEN, "__________________Les Regles___________________");
	            SendClientMessage(playerid, COLOR_WHITE, " Soyez Toujours RP, agissez comme dans la vrai vie.");
	            SendClientMessage(playerid, COLOR_WHITE, " Pas de Death Match (DM) (Vous êtes sur un serveur RP)");
	            SendClientMessage(playerid, COLOR_WHITE, " Seulement le Français est autorisé sur le serveur");
	            SendClientMessage(playerid, COLOR_WHITE, " N'utiliser pas de Bug ni de Cheat sinon Ban Permanant.");
	            SendClientMessage(playerid, COLOR_WHITE, " Drive-By Interdit (Sauf pour les Policiers et Passagers)");
	            SendClientMessage(playerid, COLOR_WHITE, " N'utiliser pas de Smiley (ni mdr, ptdr) en IC");
	            SendClientMessage(playerid, COLOR_WHITE, " Ne faites pas de Bunny (Sauter pour aller plus vite), c'est interdit");
                SendClientMessage(playerid, COLOR_WHITE, " Plus d'infos : http://u2c-rp.forum-pro.fr");
				SendClientMessage(playerid, COLOR_GREEN, "______________________________________________");
	            TogglePlayerControllable(playerid,1);
	        }
	        case 1:
	        {
	           SendClientMessage(playerid, COLOR_GREEN, "__________________Le RolePlay___________________");
	            SendClientMessage(playerid, COLOR_WHITE, " Les commandes /rp /powergame et /metagame sont la pour vous aider.");
	            SendClientMessage(playerid, COLOR_WHITE, " Elles vous expliqueront les bases et les règles a connaitre.");
                SendClientMessage(playerid, COLOR_WHITE, " Pour plus d'infos : http://u2c-rp.forum-pro.fr");
				SendClientMessage(playerid, COLOR_GREEN, "______________________________________________");
	            TogglePlayerControllable(playerid,1);
	        }
	        case 2:
	        {
	            SendClientMessage(playerid, COLOR_GREEN, "L'auto école est marquée sur votre map (Marqueur Rouge).");
	            SendClientMessage(playerid, COLOR_WHITE, "Info: Tapper /listepermis pour voir les permis disponibles");
	            SetPlayerCheckpoint(playerid,2048.352,-1900.153,13.5538,5.0);
	            TogglePlayerControllable(playerid,1);
	        }
	        case 3:
	        {
	            SendClientMessage(playerid, COLOR_GREEN, "L'endroit pour louer les véhicules est marqué sur votre map (Marqueur Rouge).");
	            SetPlayerCheckpoint(playerid,2094.0300,1432.8625,10.8203,5.0);
	            TogglePlayerControllable(playerid,1);
	        }
	        case 4:
	        {
	            SendClientMessage(playerid, COLOR_GREEN, "Le Magasin Binco a été marqué marqué sur votre map (Marqueur Rouge).");
	            SendClientMessage(playerid, COLOR_WHITE, "Info: Utiliser /vetements quand vous êtes a l'intérieur du Binco.");
	            SetPlayerCheckpoint(playerid,2361.5391,2406.9792,10.8203,5.0);
	            TogglePlayerControllable(playerid,1);
	        }
	        case 5:
	        {
                SendClientMessage(playerid, COLOR_GREEN, "L'A.N.P.E est l'endroit ou vous trouverez du travail.");
	            SendClientMessage(playerid, COLOR_GREEN, "Elle a été marquée sur votre map (Marqueur Rouge).");
	            SendClientMessage(playerid, COLOR_WHITE, "Info: Seulement des jobs légaux vous y seront proposés.");
	            SetPlayerCheckpoint(playerid,1722.7952,-1603.5991,15.1365,5.0);
	            TogglePlayerControllable(playerid,1);
	        }
	        case 6:
	        {
	            HideMenuForPlayer(Guide, playerid);
	            TogglePlayerControllable(playerid,1);
	        }
	    }
	}
	#if defined USE_MENU
	    new Menu:MenuActuel = GetPlayerMenu(playerid);
	    if(MenuActuel == MenuJoueur)
		{
			switch(row)
			{
			    case 0:
				{
					AcheterVehicule(playerid);
				 	HideMenuForPlayer(MenuActuel, playerid);
					TogglePlayerControllable(playerid, 1);
				}
				case 1:
				{
				    VendreVehicule(playerid, 0);
				    HideMenuForPlayer(MenuActuel, playerid);
				    TogglePlayerControllable(playerid, 1);
				}
				case 2:
				{
				    GarerVehicule(playerid, 0);
				    HideMenuForPlayer(MenuActuel, playerid);
				    TogglePlayerControllable(playerid, 1);
				}
				case 3:
				{
				    AlarmeVehicule(playerid, 0);
	 			    HideMenuForPlayer(MenuActuel, playerid);
				    TogglePlayerControllable(playerid, 1);
				}
				case 4:
				{
					EssenceVehicule(playerid, 0);
	 			    HideMenuForPlayer(MenuActuel, playerid);
				    TogglePlayerControllable(playerid, 1);
				}
				case 5:
				{
				    TableauDeBord(playerid);
	 			    HideMenuForPlayer(MenuActuel, playerid);
				    TogglePlayerControllable(playerid, 1);
				}
				#if defined USE_CALLCAR
		 			case 6:
					{
						if(CountPlayerVehicle(playerid) == 0)
						{
						    SendClientMessage(playerid,COL_LIGHTRED,"Vous n'avez pas de vehicules!");
							TogglePlayerControllable(playerid,1);
							return 1;
						}
						new playername[MAX_PLAYER_NAME],string[128];
						SendClientMessage(playerid,COL_WHITE,"------[LISTE DE VOS VEHICULE]------");
						GetPlayerName(playerid,playername,sizeof(playername));
						new count = 0;
						for(new v=1;v<NbVeh;v++)
						{
		    				if(VehiculeInfo[v][VehID] != INVALID_VEH_ID)
					    	{
						 		if(strcmp(VehiculeInfo[v][Proprio],playername,true) == 0)
							    {
									format(string,sizeof(string),"%d: %s",count+1,VehiculeInfo[v][Nom]);
									SendClientMessage(playerid,COL_WHITE,string);
									MyVehicleID[playerid][count] = v;
									count++;
								}
							}
						}
						SendClientMessage(playerid,COL_LIGHTRED,"Pour appeler un vehicule entrer sont numero dans la zone de texte!");
		 			    HideMenuForPlayer(MenuActuel, playerid);
					    TogglePlayerControllable(playerid, 1);
					}
					case 7:
					{
		 			    HideMenuForPlayer(MenuActuel, playerid);
					    TogglePlayerControllable(playerid, 1);
					}
				#else
	 				case 6:
					{
		 			    HideMenuForPlayer(MenuActuel, playerid);
					    TogglePlayerControllable(playerid, 1);
					}
				#endif
			}
		}
		else if(MenuActuel == MenuAdmin)
		{
			switch(row)
			{
			    case 0:
			    {
			        DefinirPrix[playerid] = 1;
			        SendClientMessage(playerid,COL_GREEN,"Taper le prix dans la zone de texte!");
					HideMenuForPlayer(MenuActuel, playerid);
				}
				case 1:
				{
				    AlarmeVehicule(playerid, 1);
				    HideMenuForPlayer(MenuActuel, playerid);
				    TogglePlayerControllable(playerid, 1);
				}
				case 2:
				{
				    VendreVehicule(playerid, 1);
				    HideMenuForPlayer(MenuActuel, playerid);
				    TogglePlayerControllable(playerid, 1);
				}
				case 3:
				{
				    StatusVehicule(playerid);
				    HideMenuForPlayer(MenuActuel, playerid);
				    TogglePlayerControllable(playerid, 1);
				}
				case 4:
				{
				    GarerVehicule(playerid, 1);
				    HideMenuForPlayer(MenuActuel, playerid);
				    TogglePlayerControllable(playerid, 1);
				}
				case 5:
				{
				    EssenceVehicule(playerid, 1);
	 			    HideMenuForPlayer(MenuActuel, playerid);
				    TogglePlayerControllable(playerid, 1);
				}
	 			case 6:
				{
	 			    DefinirEssence[playerid] = 1;
	 			    SendClientMessage(playerid,COL_GREEN,"Taper une valeur dans la zone de texte!");
	 			    HideMenuForPlayer(MenuActuel, playerid);
				}
				case 7:
				{
				    ResetTuning(playerid);
				    HideMenuForPlayer(MenuActuel,playerid);
				    TogglePlayerControllable(playerid, 1);
				}
				case 8:
				{
	 			    HideMenuForPlayer(MenuActuel, playerid);
				    TogglePlayerControllable(playerid, 1);
				}
			}
		}
	#else
		#pragma unused playerid
		#pragma unused row
	#endif
	return 1;
}

public OnPlayerExitedMenu(playerid)
{
	new Menu:Current = GetPlayerMenu(playerid);
	if(!IsValidMenu(Current)) return 1;
	ShowMenuForPlayer(Current, playerid);
	TogglePlayerControllable(playerid,1);
	SetTimerEx("CanDriveThruAgain", 7000, 0, "i", playerid);
	#if defined USE_MENU
		if(EnPanne[playerid] == 0)
		{
			new Menu:MenuActuel = GetPlayerMenu(playerid);
			if(MenuActuel == MenuJoueur || MenuActuel == MenuAdmin)
			{
				TogglePlayerControllable(playerid, 1);
			}
		}
	#else
	    #pragma unused playerid
	#endif
	return 1;
}

public RefreshMenuHeader(playerid,Menu:menu,text[])
{
	SetMenuColumnHeader(menu,0,text);
	ShowMenuForPlayer(menu,playerid);
}

public SetAllPlayerCheckpoint(Float:allx, Float:ally, Float:allz, Float:radi, num)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			SetPlayerCheckpoint(i,allx,ally,allz, radi);
			if (num != 255)
			{
				gPlayerCheckpointStatus[i] = num;
			}
		}
	}

}

public SetAllCopCheckpoint(Float:allx, Float:ally, Float:allz, Float:radi)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(gTeam[i] == 2)
			{
				SetPlayerCheckpoint(i,allx,ally,allz, radi);
			}
		}
	}
	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
	new string[256];
	new pveh = GetVehicleModel(GetPlayerVehicleID(playerid));
	new vehicle = GetPlayerVehicleID(playerid);
	//AFKMin[playerid] = 0;
	if(newstate == PLAYER_STATE_DRIVER && (pveh != 509 && pveh != 481 && pveh != 510) && IsPlayerInAnyVehicle(playerid) && !IsAPlane(vehicle) && !IsAHarvest(vehicle) && !IsADrugHarvest(vehicle) && !IsASweeper(vehicle))
	{
		SetTimerEx("Startup", 1, false, "ii", playerid, vehicle);
		SetTimerEx("engine2", 2500, false, "ii", playerid);
	}
	else if(newstate == PLAYER_STATE_DRIVER && (pveh != 509 && pveh != 481 && pveh != 510) && IsPlayerInAnyVehicle(playerid) && !IsAPlane(vehicle) && !IsAHarvest(vehicle) && !IsADrugHarvest(vehicle) && !IsASweeper(vehicle))
	{
		SetTimerEx("Startup", 1, false, "ii", playerid, vehicle);
		SetTimerEx("engine2", 2500, false, "ii", playerid);
	}
	if(newstate == PLAYER_STATE_ONFOOT)
	{
	    KillTimer(letimerdelaceinture[playerid]);
	    ceinture[playerid] = 0;
	    casque[playerid] = 0;
	    if(PlayerKarting[playerid] > 0 && PlayerInKart[playerid] > 0)
		{
		    PlayerInKart[playerid] = 0;
		    KartingPlayers --;
		}
	    if(TransportDuty[playerid] > 0)
		{
		    if(TransportDuty[playerid] == 1)
			{
		        TaxiDrivers -= 1;
			}
			else if(TransportDuty[playerid] == 2)
			{
			    BusDrivers -= 1;
			}
			TransportDuty[playerid] = 0;
			format(string, sizeof(string), " Vous n'êtes plus en Service et gagné $%d.", TransportMoney[playerid]);
			SendClientMessage(playerid, COLOR_WHITE, string);
			SafeGivePlayerMoney(playerid, TransportMoney[playerid]);
			/*ConsumingMoney[playerid] = 1;*/ TransportValue[playerid] = 0; TransportMoney[playerid] = 0;
		}
		if(TransportCost[playerid] > 0 && TransportDriver[playerid] < 999)
		{
		    if(IsPlayerConnected(TransportDriver[playerid]))
			{
			    TransportMoney[TransportDriver[playerid]] += TransportCost[playerid];
			    TransportTime[TransportDriver[playerid]] = 0;
			    TransportCost[TransportDriver[playerid]] = 0;
			    format(string, sizeof(string), "~w~Le Trajet vous a coûté~n~~r~$%d",TransportCost[playerid]);
			    GameTextForPlayer(playerid, string, 5000, 1);
			    format(string, sizeof(string), "~w~Le Passager est sortit du taxi~n~~g~ gains $%d",TransportCost[playerid]);
			    GameTextForPlayer(TransportDriver[playerid], string, 5000, 1);
				SafeGivePlayerMoney(playerid, -TransportCost[playerid]);
				TransportCost[playerid] = 0;
				TransportTime[playerid] = 0;
				TransportDriver[playerid] = 999;
			}
		}
		TelePos[playerid][0] = 0.0;
		TelePos[playerid][1] = 0.0;
	}
	if(newstate == PLAYER_STATE_PASSENGER) // TAXI & BUSSES
	{
	    new name[MAX_PLAYER_NAME];
	    GetPlayerName(playerid, name, sizeof(name));
	    new vehicleid = GetPlayerVehicleID(playerid);
	    for(new i = 0; i < MAX_PLAYERS; i++)
	    {
	        if(IsPlayerConnected(i))
	        {
	            if(IsPlayerInVehicle(i, vehicleid) && GetPlayerState(i) == 2 && TransportDuty[i] > 0)
	            {
	                if(GetPlayerMoney(playerid) < TransportValue[i])
	                {
	                    format(string, sizeof(string), " Vous avez besoin de $%d pour entrer.", TransportValue[i]);
						SendClientMessage(playerid, COLOR_WHITE, string);
						RemovePlayerFromVehicle(playerid);
	                }
	                else
	                {
	                    if(TransportDuty[i] == 1)
	                    {
	                        format(string, sizeof(string), " Vous avez payé $%d au Chauffeur de Taxi.", TransportValue[i]);
							SendClientMessage(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), " Le Passager %s est entré dans votre Taxi.", name);
							SendClientMessage(i, COLOR_WHITE, string);
							TransportTime[i] = 1;
	                    	TransportTime[playerid] = 1;
	                    	TransportCost[playerid] = TransportValue[i];
	                    	TransportCost[i] = TransportValue[i];
	                    	TransportDriver[playerid] = i;
	                    }
	                    else if(TransportDuty[i] == 2)
	                    {
	                        format(string, sizeof(string), " Vous avez payé $%d au Chauffeur de Bus.", TransportValue[i]);
							SendClientMessage(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), " Le Passager %s est entré dans votre Bus.", name);
							SendClientMessage(i, COLOR_WHITE, string);
	                    }
						SafeGivePlayerMoney(playerid, - TransportValue[i]);
						TransportMoney[i] += TransportValue[i];
	                }
	            }
	        }
	    }
	/*}
	if(newstate == PLAYER_STATE_WASTED)
	{
		if(WantedLevel[playerid] >= 1)
		{
		    new price = WantedLevel[playerid] * 1000;
			new count;
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
				    if(gTeam[i] == 2 && CrimInRange(30.0, playerid,i))
				    {
						count = 1;
						format(string, sizeof(string), "~w~Fugitif~r~abbatu~n~Bonus~g~$%d", price);
						GameTextForPlayer(i, string, 5000, 1);
						//ConsumingMoney[i] = 1;
						SafeGivePlayerMoney(i, price / 2);
						PlayerPlaySound(i, 1058, 0.0, 0.0, 0.0);
					}
				}*/
			/*}
			if(count == 1)
			{
				SafeGivePlayerMoney(playerid, - price);
				PlayerInfo[playerid][pWantedDeaths] += 1;
				PlayerInfo[playerid][pJailed] = 1;
			    PlayerInfo[playerid][pJailTime] = (WantedLevel[playerid])*(600);
			    format(string, sizeof(string), " Vous êtes en prison pour %d Seondes et vous perdez $%d a cause que vous étiez en cavale et qu'un Policier vous a abattu.", PlayerInfo[playerid][pJailTime], price);
			    SendClientMessage(playerid, COLOR_LIGHTRED, string);
			    WantedPoints[playerid] = 0;
				WantedLevel[playerid] = 0;
			}
		}*/
	}

	if(newstate == PLAYER_STATE_DRIVER)
	{// 38 / 49 / 56 = SS
		new newcar = GetPlayerVehicleID(playerid);
		new oldcar = gLastCar[playerid];
		new housecar = PlayerInfo[playerid][pPhousekey]+1;
		new mdv = GetVehicleModel(newcar);
		TelePos[playerid][0] = 0.0;
		TelePos[playerid][1] = 0.0;
		if(Objet[playerid] == -1)
		{
		    DestroyStreamObject (Objet[playerid]);
		}
		new vehicleid = GetPlayerVehicleID(playerid);
        new playername[MAX_PLAYER_NAME],string[128];
        new Float:x,Float:y,Float:z;
        GetPlayerName(playerid,playername,sizeof(playername));
        GetPlayerPos(playerid,x,y,z);
		PlayerPos[playerid][0] = x;
   		PlayerPos[playerid][1] = y;
      	PlayerPos[playerid][2] = z;
      	if(VehiculeInfo[vehicleid][VehID] == INVALID_VEH_ID && PlayerInfo[playerid][pAdmin] >= 1337)
  	    {
  	        format(string,sizeof(string),"Ce vehicule (%s) n'est pas un vehicule sauvegarder pour le sauvegarder taper /vehsave",VehiculeInfo[vehicleid][Nom]);
	   		SendClientMessage(playerid,COL_LIGHTRED,string);
		}
        if(VehiculeInfo[vehicleid][Alarme] == 2)
        {
            if(PlayerInfo[playerid][pAdmin] == 0)
            {
				format(string,sizeof(string),"Ce vehicule (%s) est reserver au admin. Vous ne pouvez pas l'utiliser!",VehiculeInfo[vehicleid][Nom]);
				SendClientMessage(playerid,COL_LIGHTRED,string);
				RemovePlayerFromVehicle(playerid);
				return 1;
			}
			else
			{
			    format(string,sizeof(string),"Ce vehicule (%s) est reserver au admin. Vous pouvez l'utiliser!",VehiculeInfo[vehicleid][Nom]);
			    SendClientMessage(playerid,COL_GREEN,string);
			}
		}
        if(strcmp(VehiculeInfo[vehicleid][Proprio],"Aucun",true) == 0 && vehicleid > 225)
        {
            if(VehiculeInfo[vehicleid][Status] == 1)
            {
			#if defined USE_MENU
				format(string,sizeof(string),"Ce vehicule (%s) peux être acheter pour %d$! Pour l'acheter taper /vmenu et selectioner 'Acheter'",VehiculeInfo[vehicleid][Nom],VehiculeInfo[vehicleid][Prix]);
			#else
			    format(string,sizeof(string),"Ce vehicule (%s) peux être acheter pour %d$! Pour l'acheter taper /vacheter!",VehiculeInfo[vehicleid][Nom],VehiculeInfo[vehicleid][Prix]);
			#endif
				SendClientMessage(playerid,COL_YELLOW,string);
			}
         }
         else if(strcmp(VehiculeInfo[vehicleid][Proprio],playername,true) == 0)
         {
				format(string,sizeof(string),"Bienvenu dans votre vehicule (%s)",VehiculeInfo[vehicleid][Nom]);
				SendClientMessage(playerid,COL_GREEN,string);
				if(VehiculeInfo[vehicleid][Alarme] == 0)
				{
				    SendClientMessage(playerid,COL_GREEN,"L'alarme de votre vehicule est desactivé!");
				}
				else if(VehiculeInfo[vehicleid][Alarme] == 1)
				{
				    SendClientMessage(playerid,COL_GREEN,"L'alarme de votre vehicule est activé!");
				}
				else if(VehiculeInfo[vehicleid][Alarme] == 2)
				{
				    SendClientMessage(playerid,COL_GREEN,"Ce vehicule est proteger par l'alarme admin!");
			}
         }
         else
         {
            if(VehiculeInfo[vehicleid][Alarme] == 0)
            {
               	format(string,sizeof(string),"Ce vehicule (%s) appartient a %s",VehiculeInfo[vehicleid][Nom],VehiculeInfo[vehicleid][Proprio]);
                SendClientMessage(playerid,COL_GREEN,string);
			}
			else if(VehiculeInfo[vehicleid][Alarme] == 1)
			{
	    	    format(string,sizeof(string),"Ce vehicule (%s) appartient a %s et est proteger par une alarme!",VehiculeInfo[vehicleid][Nom],VehiculeInfo[vehicleid][Proprio]);
                SendClientMessage(playerid,COL_GREEN,string);
                RemovePlayerFromVehicle(playerid);
                return 1;
			}
			else if(VehiculeInfo[vehicleid][Alarme] == 2)
			{
			    format(string,sizeof(string),"Ce vehicule (%s) appartient a %s et est proteger par l'alarme admin!",VehiculeInfo[vehicleid][Nom],VehiculeInfo[vehicleid][Proprio]);
			    SendClientMessage(playerid,COL_GREEN,string);
			}
		}
        if(VehiculeInfo[vehicleid][Essence] <= 0 && EnPanne[playerid] == 0)
        {
			format(string,sizeof(string),"Le reservoir de ce vehicule (%s) est vide!",VehiculeInfo[vehicleid][Nom]);
			SendClientMessage(playerid,COL_LIGHTRED,string);
		    new engine,lighttss,alarm,doors,bonnet,boot,objective;
		  	GetVehicleParamsEx(vehicleid,engine,lighttss,alarm,doors,bonnet,boot,objective);
		   	SetVehicleParamsEx(vehicleid,0,lighttss,alarm,doors,bonnet,boot,objective);
			EnPanne[playerid] = 1;
		}
		if(IsABoat(newcar))
		{
		    if(PlayerInfo[playerid][pBoatLic] < 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, " Vous n'avez pas le permis de navigation. Sortez du bateau !");
			    RemovePlayerFromVehicle(playerid);
			    TogglePlayerControllable(playerid, 1);
			}
		}
		else if(IsAPlane(newcar))
		{
		SendClientMessage(playerid, COLOR_YELLOW, "N'oubliez pas votre ceinture ! [/ceinture]");
		    if(PlayerInfo[playerid][pFlyLic] < 1)
			{
			    if(TakingLesson[playerid] == 1) { }
			    else {
			    SendClientMessage(playerid, COLOR_GREY, " Vous n'avez pas le permis de vol. Sortez de l'Avion/Hélicopter !");
			    RemovePlayerFromVehicle(playerid);
				TogglePlayerControllable(playerid, 1); }
			}
		}
		else if(IsPoidLourd(newcar))
		{
		SendClientMessage(playerid, COLOR_YELLOW, "N'oubliez pas votre ceinture ! (/ceinture)");
		    if(PlayerInfo[playerid][pLourdLic] < 1)
			{
			    if(TakingLesson[playerid] == 1) { }
			    else {
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, " Fais attention a la police, tu n'as pas le permis poid lourd !");
			    //RemovePlayerFromVehicle(playerid);
				}
			}
		}
		else if(IsAOBike(newcar))
		{
		    if(PlayerInfo[playerid][pMotoLic] < 1)
			{
			    if(TakingLesson[playerid] == 1) { }
			    else {
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, " Fais attention a la police, tu n'as pas le permis de moto !");
			    //RemovePlayerFromVehicle(playerid);
		 		}
			}
		}
		else
		{
			if(IsABike(newcar) || mdv == 509 || mdv == 481 || mdv == 510 || mdv == 462)
			{
				SendClientMessage(playerid, COLOR_YELLOW, "N'oubliez pas votre ceinture, [/ceinture]");
			}
			if(PlayerInfo[playerid][pCarLic] < 0)
			{
			    if(PlayerDrunk[playerid] >= 1)
				{
				    WantedPoints[playerid] += 0;
					SetPlayerCriminal(playerid,255, "Conduite en état d'ivresse.");
				}

			}
			else if(PlayerDrunk[playerid] >= 1)
			{
			    WantedPoints[playerid] += 0;
				SetPlayerCriminal(playerid,255, "Conduite en état d'ivresse.");
			}

			if(PlayerInfo[playerid][pCarLic] < 1)
			{
			    if(IsABike(newcar) || mdv == 509 || mdv == 481 || mdv == 510) { }
			    else
			    {
	                /*if(PlayerInfo[playerid][pCarLic] < 1)
					{
					    WantedPoints[playerid] += 1;
						SetPlayerCriminal(playerid,255, "Driving without License");
					}*/
					if(TakingLesson[playerid] == 1) { }
					else {
					SendClientMessage(playerid, COLOR_LIGHTBLUE, " Tu n'as pas le permis, fais attention a la police !");
	    			//RemovePlayerFromVehicle(playerid);
	              }
				}
			}
		}//Done with car check
		if(IsACopCar(newcar))
		{
		    if(IsACop(playerid)) { }
		    else if(PlayerInfo[playerid][pAdmin] >= 1339 && AdminDuty[playerid] == 1)
			{
   				SendClientMessage(playerid, COLOR_GREY, "Vous pouvez conduire ce véhicule Car vous êtes un Admin en Service !");
   				TogglePlayerControllable(playerid, 1);
			}
			else if(PlayerInfo[playerid][pskinf] >= 1 || PlayerInfo[playerid][pskinfm] >= 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "Fais attention, tu portes un faux habit de police")
			    TogglePlayerControllable(playerid, 1);
			}
		    else { RemovePlayerFromVehicle(playerid); }
		}
		if(IsATank(newcar))
		{
		    if(PlayerInfo[playerid][pLeader] == 1||PlayerInfo[playerid][pLeader] == 3) { }
		    else if(PlayerInfo[playerid][pAdmin] >= 1339 && AdminDuty[playerid] == 1)
			{
   				SendClientMessage(playerid, COLOR_GREY, "Vous pouvez conduire ce véhicule Car vous êtes un Admin en Service !");
   				TogglePlayerControllable(playerid, 1);
			}
		    else { RemovePlayerFromVehicle(playerid);
			SendClientMessage(playerid, COLOR_GREY,"Vous ne faites pas parti de l'armée."); }
		}
		if(IsAnFbiCar(newcar))
		{
		    if(PlayerInfo[playerid][pLeader] == 2||PlayerInfo[playerid][pMember] == 2) { }
		    else if(PlayerInfo[playerid][pAdmin] >= 1339 && AdminDuty[playerid] == 1)
			{
   				SendClientMessage(playerid, COLOR_GREY, "Vous pouvez conduire ce véhicule Car vous êtes un Admin en Service !");
   				TogglePlayerControllable(playerid, 1);
			}
		    else {
	        RemovePlayerFromVehicle(playerid);
	        SendClientMessage(playerid, COLOR_GREY,"Vous ne faites pas parti de la C.I.A.");}
		}
		if(IsAnArmyCar(newcar))
		{
		    if(PlayerInfo[playerid][pLeader] == 3||PlayerInfo[playerid][pMember] == 3) { }
		    else if(PlayerInfo[playerid][pAdmin] >= 1339 && AdminDuty[playerid] == 1)
			{
   				SendClientMessage(playerid, COLOR_GREY, "Vous pouvez conduire ce véhicule Car vous êtes un Admin en Service !");
   				TogglePlayerControllable(playerid, 1);
			}
		    else {
	        RemovePlayerFromVehicle(playerid);
	        SendClientMessage(playerid, COLOR_GREY,"Vous ne faites pas parti de l'armée.");}
		}
		if(IsAGovernmentCar(newcar))
		{
		    if(PlayerInfo[playerid][pLeader] == 1||PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 2||PlayerInfo[playerid][pMember] == 2||PlayerInfo[playerid][pLeader] == 3||PlayerInfo[playerid][pMember] == 3||PlayerInfo[playerid][pLeader] == 7||PlayerInfo[playerid][pMember] == 7) { }
		    else if(PlayerInfo[playerid][pAdmin] >= 1339 && AdminDuty[playerid] == 1)
			{
   				SendClientMessage(playerid, COLOR_GREY, "Vous pouvez conduire ce véhicule Car vous êtes un Admin en Service !");
   				TogglePlayerControllable(playerid, 1);
			}
		    else {
	        RemovePlayerFromVehicle(playerid);
	        SendClientMessage(playerid, COLOR_GREY,"Vous ne faites pas parti du gourvernement.");}
		}
		if(IsAHspdCar(newcar))
		{
		    if(PlayerInfo[playerid][pLeader] == 1||PlayerInfo[playerid][pMember] == 1 && PlayerInfo[playerid][pRank] > 2) { }
		    else if(PlayerInfo[playerid][pAdmin] >= 1339 && AdminDuty[playerid] == 1)
			{
   				SendClientMessage(playerid, COLOR_GREY, "Vous pouvez conduire ce véhicule Car vous êtes un Admin en Service !");
   				TogglePlayerControllable(playerid, 1);
			}
		    else {
	        RemovePlayerFromVehicle(playerid);
	        SendClientMessage(playerid, COLOR_GREY,"Vous ne faites pas parti de la Police.");}
		}
		else if(IsAnAmbulance(newcar))
		{
		    if(PlayerInfo[playerid][pMember] == 4||PlayerInfo[playerid][pLeader] == 4) { }
		    else if(PlayerInfo[playerid][pAdmin] >= 1339 && AdminDuty[playerid] == 1)
			{
   				SendClientMessage(playerid, COLOR_GREY, "Vous pouvez conduire ce véhicule Car vous êtes un Admin en Service !");
   				TogglePlayerControllable(playerid, 1);
			}
		    else { RemovePlayerFromVehicle(playerid); }
        }
		else if(IsAnFiretruck(newcar))
		{
		    if(PlayerInfo[playerid][pMember] == 4||PlayerInfo[playerid][pLeader] == 4) { }
		    else if(PlayerInfo[playerid][pAdmin] >= 1339 && AdminDuty[playerid] == 1)
			{
   				SendClientMessage(playerid, COLOR_GREY, "Vous pouvez conduire ce véhicule Car vous êtes un Admin en Service !");
   				TogglePlayerControllable(playerid, 1);
			}
		    else { RemovePlayerFromVehicle(playerid); }
        }
			if(IsAGangCar(newcar))
		{
		    if(PlayerInfo[playerid][pLeader] == 5||PlayerInfo[playerid][pMember] == 5) { }
		    else if(PlayerInfo[playerid][pAdmin] >= 1339 && AdminDuty[playerid] == 1)
			{
   				SendClientMessage(playerid, COLOR_GREY, "Vous pouvez conduire ce véhicule Car vous êtes un Admin en Service !");
   				TogglePlayerControllable(playerid, 1);
			}
		    else {
	        RemovePlayerFromVehicle(playerid);
	        SendClientMessage(playerid, COLOR_GREY,"Vous n'avez pas les clefs de ce Véhicule.");}
		}
		if(IsAGangCar2(newcar))
		{
		    if(PlayerInfo[playerid][pLeader] == 6||PlayerInfo[playerid][pMember] == 6) { }
		    else if(PlayerInfo[playerid][pAdmin] >= 1339 && AdminDuty[playerid] == 1)
			{
   				SendClientMessage(playerid, COLOR_GREY, "Vous pouvez conduire ce véhicule Car vous êtes un Admin en Service !");
   				TogglePlayerControllable(playerid, 1);
			}
		    else {
	        RemovePlayerFromVehicle(playerid);
	        SendClientMessage(playerid, COLOR_GREY,"Vous n'avez pas les clefs de ce Véhicule.");}
		}
		if(IsAGangCar3(newcar))
		{
		    if(PlayerInfo[playerid][pLeader] == 14||PlayerInfo[playerid][pMember] == 14) { }
		    else if(PlayerInfo[playerid][pAdmin] >= 1339 && AdminDuty[playerid] == 1)
			{
   				SendClientMessage(playerid, COLOR_GREY, "Vous pouvez conduire ce véhicule Car vous êtes un Admin en Service !");
   				TogglePlayerControllable(playerid, 1);
			}
		    else {
	        RemovePlayerFromVehicle(playerid);
	        SendClientMessage(playerid, COLOR_GREY,"Vous n'avez pas les clefs de ce Véhicule.");}
		}
		if(IsAGangCar4(newcar))
		{
		    if(PlayerInfo[playerid][pLeader] == 15||PlayerInfo[playerid][pMember] == 15) { }
		    else if(PlayerInfo[playerid][pAdmin] >= 1339 && AdminDuty[playerid] == 1)
			{
   				SendClientMessage(playerid, COLOR_GREY, "Vous pouvez conduire ce véhicule Car vous êtes un Admin en Service !");
   				TogglePlayerControllable(playerid, 1);
			}
		    else {
	        RemovePlayerFromVehicle(playerid);
	        SendClientMessage(playerid, COLOR_LIGHTRED,"Vous n'êtes pas des Crip'Z");}
		}
		if(IsAGangCar5(newcar))
		{
		    if(PlayerInfo[playerid][pLeader] == 16||PlayerInfo[playerid][pMember] == 16) { }
		    else if(PlayerInfo[playerid][pAdmin] >= 1339 && AdminDuty[playerid] == 1)
			{
   				SendClientMessage(playerid, COLOR_GREY, "Vous pouvez conduire ce véhicule Car vous êtes un Admin en Service !");
   				TogglePlayerControllable(playerid, 1);
			}
		    else {
	        RemovePlayerFromVehicle(playerid);
	        SendClientMessage(playerid, COLOR_GREY,"Vous n'avez pas les clefs de ce Véhicule.");}
		}
		if(IsAGangCar6(newcar))
		{
		    if(PlayerInfo[playerid][pLeader] == 8||PlayerInfo[playerid][pMember] == 8) { }
		    else if(PlayerInfo[playerid][pAdmin] >= 1339 && AdminDuty[playerid] == 1)
			{
   				SendClientMessage(playerid, COLOR_GREY, "Vous pouvez conduire ce véhicule Car vous êtes un Admin en Service !");
   				TogglePlayerControllable(playerid, 1);
			}
		    else {
	        RemovePlayerFromVehicle(playerid);
	        SendClientMessage(playerid, COLOR_GREY,"Vous n'avez pas les clefs de ce Véhicule.");}
		}
		if(IsAGangCar7(newcar))
		{
		    if(PlayerInfo[playerid][pLeader] == 17||PlayerInfo[playerid][pMember] == 17) { }
		    else if(PlayerInfo[playerid][pAdmin] >= 1339 && AdminDuty[playerid] == 1)
			{
   				SendClientMessage(playerid, COLOR_GREY, "Vous pouvez conduire ce véhicule Car vous êtes un Admin en Service !");
   				TogglePlayerControllable(playerid, 1);
			}
		    else {
	        RemovePlayerFromVehicle(playerid);
	        SendClientMessage(playerid, COLOR_GREY,"Vous n'avez pas les clefs de ce Véhicule.");}
		}
		if(IsALATimeCar(newcar))
		{
		    if(PlayerInfo[playerid][pLeader] == 9||PlayerInfo[playerid][pJob] == 5||PlayerInfo[playerid][pMember] == 9) { }
		    else if(PlayerInfo[playerid][pAdmin] >= 1339 && AdminDuty[playerid] == 1)
			{
   				SendClientMessage(playerid, COLOR_GREY, "Vous pouvez conduire ce véhicule Car vous êtes un Admin en Service !");
   				TogglePlayerControllable(playerid, 1);
			}
		    else {
	        RemovePlayerFromVehicle(playerid);
	        SendClientMessage(playerid, COLOR_GREY,"Vous n'avez pas les clefs de ce Véhicule.");}
		}
		if(IsACIACar(newcar))
		{
		    if(PlayerInfo[playerid][pLeader] == 18||PlayerInfo[playerid][pMember] == 18) { }
		    else if(PlayerInfo[playerid][pAdmin] >= 1339 && AdminDuty[playerid] == 1)
			{
   				SendClientMessage(playerid, COLOR_GREY, "Vous pouvez conduire ce véhicule Car vous êtes un Admin en Service !");
   				TogglePlayerControllable(playerid, 1);
			}
		    else {
	        RemovePlayerFromVehicle(playerid);
	        SendClientMessage(playerid, COLOR_GREY,"Vous n'avez pas les clefs de ce Véhicule.");}
		}
		/*if(IsAHitmanCar(newcar))
		{
		    if(PlayerInfo[playerid][pLeader] == 16||PlayerInfo[playerid][pMember] == 16) { }
		    else if(PlayerInfo[playerid][pAdmin] >= 1339 && AdminDuty[playerid] == 1)
			{
   				SendClientMessage(playerid, COLOR_GREY, "Vous pouvez conduire ce véhicule Car vous êtes un Admin en Service !");
   				TogglePlayerControllable(playerid, 1);
			}
		    else {
	        RemovePlayerFromVehicle(playerid);
	        SendClientMessage(playerid, COLOR_GREY,"Vous n'avez pas les clefs de ce Véhicule.");}
		}
		if(IsAVagosCar(newcar))
		{
		    if(PlayerInfo[playerid][pLeader] == 5||PlayerInfo[playerid][pMember] == 5) { }
		    else if(PlayerInfo[playerid][pAdmin] >= 1339 && AdminDuty[playerid] == 1)
			{
   				SendClientMessage(playerid, COLOR_GREY, "Vous pouvez conduire ce véhicule Car vous êtes un Admin en Service !");
   				TogglePlayerControllable(playerid, 1);
			}
		    else {
	        RemovePlayerFromVehicle(playerid);
	        SendClientMessage(playerid, COLOR_GREY,"Vous n'avez pas les clefs de ce Véhicule.");}
		}*/
		/*if(IsAnInstruCar(newcar)) // Instructeur
		{
		    if(PlayerInfo[playerid][pLeader] == 11||PlayerInfo[playerid][pMember] == 11||TakingLesson[playerid] == 1) { }
		    else if(PlayerInfo[playerid][pAdmin] >= 1339 && AdminDuty[playerid] == 1)
			{
   				SendClientMessage(playerid, COLOR_GREY, "Vous pouvez conduire ce véhicule Car vous êtes un Admin en Service !");
   				TogglePlayerControllable(playerid, 1);
			}
		    else {
	        RemovePlayerFromVehicle(playerid);
	        SendClientMessage(playerid, COLOR_GREY,"Tu ne fais pas parti des instructeurs.");}
		}*/
		if(IsAPizzabike(newcar))
		{
		    if(PlayerInfo[playerid][pJob] == 17)
			{
			}
		    else
			{
	        		RemovePlayerFromVehicle(playerid);
	        		SendClientMessage(playerid, COLOR_GREY,"Ce Scooter a un cadena, vous ne pouvez pas l'utiliser.");
			}
		}
		if(VoitureASabot[newcar] == 1)
		{
		    format(string, sizeof(string), "Ce véhicule est bloqué par un sabot. Appelez la police pour l'enlever.");
			SendClientMessage(playerid, COLOR_RED, string);
			RemovePlayerFromVehicle(playerid);
			TogglePlayerControllable(playerid, 1);
		}
		if(IsABus(newcar))
		{
		    if(PlayerInfo[playerid][pJob] == 14)
			{
			    GameTextForPlayer(playerid, "~w~Utiliser /commencerest or /commencerouest Pour commencer le parcourt de Bus", 5000, 3);
			    SendClientMessage(playerid, COLOR_WHITE, "Utiliser /commencerest or /commencerouest pour commencer le parcourt de Bus.");
				SendClientMessage(playerid, COLOR_YELLOW2, "Vous êtes entrer dans un bus, tapper /sortir pour arreter le parcourt.");
				//GangZoneShowForPlayer(playerid, buszonewest, COLOR_RED);
				//GangZoneShowForPlayer(playerid, buszoneeast, COLOR_BLUE);
				SendClientMessage(playerid, COLOR_YELLOW2, "Pour commencer le parcourt Ouest, utilisez /commencerouest. Pour commencer le parcourt Est, utilisez /commencerEst.");
				new routezonecheck = IsInBusrouteZone(playerid);
				if (routezonecheck == 0) SendClientMessage(playerid, COLOR_YELLOW, "Info: Your nearest route is east.");
				else if (routezonecheck == 1) SendClientMessage(playerid, COLOR_YELLOW, "Info: Your nearest route is west.");
				TogglePlayerControllable(playerid, 0);
			}
			else if(PlayerInfo[playerid][pAdmin] >= 1339 && AdminDuty[playerid] == 1)
			{
   				SendClientMessage(playerid, COLOR_GREY, "Vous pouvez conduire ce véhicule Car vous êtes un Admin en Service !");
   				TogglePlayerControllable(playerid, 1);
			}
		    else {
	        RemovePlayerFromVehicle(playerid);
	        SendClientMessage(playerid, COLOR_GREY,"Vous n'avez pas les clefs de ce Bus.");}
		}
		if(IsATowcar(newcar))
		{
		    if(PlayerInfo[playerid][pJob] == 7) { }
		    else if(PlayerInfo[playerid][pAdmin] >= 1339 && AdminDuty[playerid] == 1)
			{
   				SendClientMessage(playerid, COLOR_GREY, "Vous pouvez conduire ce véhicule Car vous êtes un Admin en Service !");
   				TogglePlayerControllable(playerid, 1);
			}
		    else {
	        RemovePlayerFromVehicle(playerid);
	        SendClientMessage(playerid, COLOR_GREY,"Vous n'avez pas les clefs de ce Véhicule.");}
		}
		if(IsATruck(newcar))
		{
		    if(PlayerInfo[playerid][pJob] == 16)
			{
				format(string, sizeof(string), "Produits: %d/%d", PlayerHaul[newcar][pLoad],PlayerHaul[newcar][pCapasity]);
				SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
				SendClientMessage(playerid, COLOR_WHITE, "Info: Vous pouvez dès à présent livrer les Produits au magasins.");
				SendClientMessage(playerid, COLOR_WHITE, "Info: Les Commandes sont /charger /acheterproduits /vendreproduits");
			}
			else if(PlayerInfo[playerid][pAdmin] >= 1339 && AdminDuty[playerid] == 1)
			{
   				SendClientMessage(playerid, COLOR_GREY, "Vous pouvez conduire ce véhicule Car vous êtes un Admin en Service !");
   				TogglePlayerControllable(playerid, 1);
			}
			else
			{
	        	RemovePlayerFromVehicle(playerid);
	        	SendClientMessage(playerid, COLOR_GREY,"Vous n'avez pas les clefs de ce Véhicule.");
			}
		/*}
		if(IsABombeCar(newcar))
		{
 				GetPlayerPos(playerid,labombex, labombey, labombez);
   				SendClientMessage(playerid, COLOR_ORANGE, "Belle voiture, oh Non une bombe ! Il ya une bombe !!");
   				SetTimerEx("BombeCar", 3000, 0, "i", playerid);
   				PlayerPlaySound(playerid, 1138, labombex, labombey, labombez);
   				RemovePlayerFromVehicle(playerid);*/
		}
		if(IsAJobPlane(newcar))
		{
		    if(PlayerInfo[playerid][pJob] == 28)
			{
		   	GameTextForPlayer(playerid, "~g~/commenceravion ~w~ pour commencer ~n~ ~r~/sortir ~w~pour sotir de l avion", 5000, 3);
		   	SendClientMessage(playerid, COLOR_RED, "____________________Guide du Pilote de Ligne___________________");
			SendClientMessage(playerid, COLOR_WHITE, "Pilote de Ligne ** /commenceravion ou /sortir");
		  	SendClientMessage(playerid, COLOR_RED, "_______________________________________________________________");
			TogglePlayerControllable(playerid, 0);
			return 1;
		 	}
		 	else if(PlayerInfo[playerid][pAdmin] >= 1339 && AdminDuty[playerid] == 1)
			{
   				SendClientMessage(playerid, COLOR_GREY, "Vous pouvez conduire ce véhicule Car vous êtes un Admin en Service !");
   				TogglePlayerControllable(playerid, 1);
			}
		    else
		    {
		        RemovePlayerFromVehicle(playerid);
	        	SendClientMessage(playerid, COLOR_GREY,"Vous n'avez pas les clefs de ce Véhicule.");
		    }
		}
		if(IsATrain(newcar))
		{
		    if(PlayerInfo[playerid][pJob] == 27)
			{
			GameTextForPlayer(playerid, "~g~/commencertrain ~w~ pour commencer ~n~ ~r~/sortir ~w~pour sotir du Train", 5000, 3);
		   	SendClientMessage(playerid, COLOR_RED, "__________________Guide du Conducteur de Train_________________");
			SendClientMessage(playerid, COLOR_WHITE, "Conducteur de Train ** /commencertrain ou /sortir");
		  	SendClientMessage(playerid, COLOR_RED, "_______________________________________________________________");
   			TogglePlayerControllable(playerid, 0);
			return 1;
			}
			else if(PlayerInfo[playerid][pAdmin] >= 1339 && AdminDuty[playerid] == 1)
			{
   				SendClientMessage(playerid, COLOR_GREY, "Vous pouvez conduire ce véhicule Car vous êtes un Admin en Service !");
   				TogglePlayerControllable(playerid, 1);
			}
		    else
		    {
		        RemovePlayerFromVehicle(playerid);
	        	SendClientMessage(playerid, COLOR_GREY,"Vous n'avez pas les clefs de ce Véhicule.");
	        	new Float:cx, Float:cy, Float:cz;
  		    	GetPlayerPos(playerid, cx, cy, cz);
    	    	SetPlayerPos(playerid, cx, cy, cz);
		    }
		}
		if(IsASweeper(newcar))
		{
		    if(PlayerInfo[playerid][pJob] == 21)
		    {
		        if(PlayerIsSweeping[playerid] == 0)
		        {
		        	TogglePlayerControllable(playerid, 0);
		        	GameTextForPlayer(playerid, "~g~/commencersweep ~w~ pour commencer a balayer~n~Tapper ~r~/sortir ~w~pour sotir du sweeper", 5000, 3);
		        	SendClientMessage(playerid, COLOR_RED, "_______________________Guide du Balayeur______________________");
			    	SendClientMessage(playerid, COLOR_WHITE, "Balayeur ** /commencersweep, /arretersweep ou /sortir");
			    	SendClientMessage(playerid, COLOR_RED, "______________________________________________________________");
				}
				else
				{
				    SendClientMessage(playerid, COLOR_WHITE, "Vous pouvez arreter de balayer, utilisez /arretersweep .");
				}
		    }
		    else if(PlayerInfo[playerid][pAdmin] >= 1339 && AdminDuty[playerid] == 1)
			{
   				SendClientMessage(playerid, COLOR_GREY, "Vous pouvez conduire ce véhicule Car vous êtes un Admin en Service !");
   				TogglePlayerControllable(playerid, 1);
			}
		    else
		    {
		        RemovePlayerFromVehicle(playerid);
	        	SendClientMessage(playerid, COLOR_GREY,"Vous n'avez pas les clefs de ce Véhicule.");
		    }
		}
		if(IsAGarbageTruck(newcar))
		{
		    if(PlayerInfo[playerid][pJob] == 25)
		    {
		        if(PlayerOnGarbage[playerid] == 0)
		        {
		        	TogglePlayerControllable(playerid, 0);
		        	GameTextForPlayer(playerid, "~g~/commencerpoubelle ~w~ pour commencer a collecter les poubelles~n~ ~r~/sortir ~w~pour sotir du Camion Poubelle", 5000, 3);
		        	SendClientMessage(playerid, COLOR_RED, "_______________________Guide de l'Eboueur______________________");
			    	SendClientMessage(playerid, COLOR_WHITE, "Eboueur ** /commencerpoubelle, /arreterpoubelle ou /sortir");
			    	SendClientMessage(playerid, COLOR_RED, "_______________________________________________________________");
				}
				else
				{
				    SendClientMessage(playerid, COLOR_WHITE, "Vous pouvez arreter de collecter les poubelles, utilisez /arreterpoubelle .");
				}
		    }
		    else if(PlayerInfo[playerid][pAdmin] >= 1339 && AdminDuty[playerid] == 1)
			{
   				SendClientMessage(playerid, COLOR_GREY, "Vous pouvez conduire ce véhicule Car vous êtes un Admin en Service !");
   				TogglePlayerControllable(playerid, 1);
			}
		    else
		    {
		        RemovePlayerFromVehicle(playerid);
	        	SendClientMessage(playerid, COLOR_GREY,"Vous n'avez pas les clefs de ce Véhicule.");
		    }
		}
		if(IsADozer(newcar))
		{
		    if(PlayerInfo[playerid][pJob] == 26)
		    {
		        if(PlayerIsDozering[playerid] == 0)
		        {
		        	TogglePlayerControllable(playerid, 0);
		        	GameTextForPlayer(playerid, "~g~/commencerdozer ~w~ pour commencer ~n~ ~r~/sortir ~w~pour sotir du Dozer", 5000, 3);
		           	SendClientMessage(playerid, COLOR_RED, "_______________________Guide de l'Ouvrier______________________");
			    	SendClientMessage(playerid, COLOR_WHITE, "Ouvrier ** /commencerdozer, /arreterdozer ou /sortir");
			    	SendClientMessage(playerid, COLOR_RED, "_______________________________________________________________");
				}
				else
				{
				    SendClientMessage(playerid, COLOR_WHITE, "Vous pouvez arreter de collecter les poubelles, utilisez /arreterdozer .");
				}
		    }
		    else if(PlayerInfo[playerid][pAdmin] >= 1339 && AdminDuty[playerid] == 1)
			{
   				SendClientMessage(playerid, COLOR_GREY, "Vous pouvez conduire ce véhicule Car vous êtes un Admin en Service !");
   				TogglePlayerControllable(playerid, 1);
			}
		    else
		    {
		        RemovePlayerFromVehicle(playerid);
	        	SendClientMessage(playerid, COLOR_GREY,"Vous n'avez pas les clefs de ce Véhicule.");
		    }
		}
		if(PlayerKarting[playerid] != 0)
		{
		    new kart = GetPlayerVehicleID(playerid);
		    if(kart >=101 && kart <= 106)
		    {
		        PlayerInKart[playerid] = 1;
		    	KartingPlayers ++;
			}
		}
		/*if(newcar == 442)
		{
		    if(PlayerInfo[playerid][pPhousekey] == 34 || PlayerInfo[playerid][pPhousekey] == 35 || PlayerInfo[playerid][pPhousekey] == 36) { }
		    else if(PlayerInfo[playerid][pAdmin] >= 1339 && AdminDuty[playerid] == 1)
			{
   				SendClientMessage(playerid, COLOR_GREY, "Vous pouvez conduire ce véhicule Car vous êtes un Admin en Service !");
   				TogglePlayerControllable(playerid, 1);
			}
		    else
		    {
		        SendClientMessage(playerid,COLOR_GREY,"   Bateau personnel des Hills !");
		        RemovePlayerFromVehicle(playerid);
		    }
		}*/
		if(newcar == 52)
		{
		    if(PlayerInfo[playerid][pRank] >= 3) { }
		    else if(PlayerInfo[playerid][pAdmin] >= 1339 && AdminDuty[playerid] == 1)
			{
   				SendClientMessage(playerid, COLOR_GREY, "Vous pouvez conduire ce véhicule Car vous êtes un Admin en Service !");
   				TogglePlayerControllable(playerid, 1);
			}
		    else
		    {
		        SendClientMessage(playerid,COLOR_GREY,"   Vous devez être Rang 3 Pour voler avec cet Helicopter !");
		        RemovePlayerFromVehicle(playerid);
		    }
		}
		if(IsATaxiCar(newcar))
		{
		    if(PlayerInfo[playerid][pJob] == 13) { }
		    else if(PlayerInfo[playerid][pAdmin] >= 1339 && AdminDuty[playerid] == 1)
			{
   				SendClientMessage(playerid, COLOR_GREY, "Vous pouvez conduire ce véhicule Car vous êtes un Admin en Service !");
   				TogglePlayerControllable(playerid, 1);
			}
		    else
			{
		        SendClientMessage(playerid,COLOR_GREY,"   Vous n'avez pas les clefs de ce Véhicule !");
		        RemovePlayerFromVehicle(playerid);
		    }
		}
        /*if(newcar >= 94 && newcar <= 96)
		{
			if(PlayerInfo[playerid][pJob] == 5){ }
			else if(PlayerInfo[playerid][pAdmin] >= 1339 && AdminDuty[playerid] == 1)
			{
   				SendClientMessage(playerid, COLOR_GREY, "Vous pouvez conduire ce véhicule Car vous êtes un Admin en Service !");
   				TogglePlayerControllable(playerid, 1);
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Vous n'avez pas les clefs de ce Véhicule !");
			    RemovePlayerFromVehicle(playerid);
			}
		}*/
		if(newcar >= 101 && newcar <= 106)
		{
		    if(PlayerKarting[playerid] != 1)
		    {
		        RemovePlayerFromVehicle(playerid);
		    }
		}
		if(IsARentCar(newcar))
		{
			if (HireCar[playerid] != newcar)
			{
				format(string, sizeof(string), "~w~Vous Pouvez Louer cette voiture~n~Cout:~g~$%d~n~~w~Pour louer Tapez ~g~/louervoiture~w~~n~Pour sortir Tapez ~r~/sortir",SBizzInfo[1][sbEntranceCost]);
				TogglePlayerControllable(playerid, 0);
				GameTextForPlayer(playerid, string, 5000, 3);
				desactivetext[playerid] = 1;
				SetTimerEx("DesactiverSpeedo", 5000, 0, "i", playerid);
			}
		}
		if(IsARentBike(newcar))
		{
		    if (HireCar[playerid] != newcar)
			{
				format(string, sizeof(string), "~w~Vous Pouvez Louer cette moto~n~Cout:~g~$%d~n~~w~Pour louer Tapez ~g~/louermoto~w~~n~Pour sortir Tapez ~r~/sortir",SBizzInfo[0][sbEntranceCost]);
				TogglePlayerControllable(playerid, 0);
				GameTextForPlayer(playerid, string, 5000, 3);
				desactivetext[playerid] = 1;
				SetTimerEx("DesactiverSpeedo", 5000, 0, "i", playerid);
			}
		}
		/*if(IsAYakuzaCar(newcar))
		{
		    if(PlayerInfo[playerid][pMember] == 8||PlayerInfo[playerid][pLeader] == 8) { }
		    else if(PlayerInfo[playerid][pAdmin] >= 1339 && AdminDuty[playerid] == 1)
			{
   				SendClientMessage(playerid, COLOR_GREY, "Vous pouvez conduire ce véhicule Car vous êtes un Admin en Service !");
   				TogglePlayerControllable(playerid, 1);
			}
		    else
			{
		        SendClientMessage(playerid,COLOR_GREY,"   Vous n'êtes pas un Yakuza !");
		        RemovePlayerFromVehicle(playerid);
		    }
		}*/
		if(IsAHarvest(newcar))
		{
			if(PlayerInfo[playerid][pJob] == 18)
			{
			    if(FarmerVar[playerid] == 0)
			    {
			    	SendClientMessage(playerid, COLOR_RED, "_______________________Guide du Fermier______________________");
			    	SendClientMessage(playerid, COLOR_WHITE, "Fermier ** /commencerrecolte, /arreterrecolte ou /sortir");
			    	SendClientMessage(playerid, COLOR_RED, "_____________________________________________________________");
			    	TogglePlayerControllable(playerid, 0);
				}
				else { }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Vous n'avez pas les clefs de ce Véhicule !");
			    RemovePlayerFromVehicle(playerid);
			}
		}
		if(IsADrugHarvest(newcar))
		{
			if(PlayerInfo[playerid][pJob] == 19)
			{
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "__________________________Guide du Cultivateur de Drogue______________________________________");
			    SendClientMessage(playerid, COLOR_WHITE, "     Cultivateur de Drogue/commencerrecoltedrogue(/crd), /arreterrecoltedrogue(/ard) ou /sortir");
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "______________________________________________________________________________________________");
			    TogglePlayerControllable(playerid, 0);
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Vous n'avez pas les clefs de ce Véhicule !");
			    RemovePlayerFromVehicle(playerid);
			}
		}
		if(IsASmuggleCar(newcar))
		{
		    if(PlayerInfo[playerid][pJob] == 20)
		    {

				SendClientMessage(playerid, COLOR_YELLOW, "Note: Vous pouvez dès à présent faire passer clandestinement de la drogue !");
    		}
    		else if(PlayerInfo[playerid][pAdmin] >= 1339 && AdminDuty[playerid] == 1)
			{
   				SendClientMessage(playerid, COLOR_GREY, "Vous pouvez conduire ce véhicule Car vous êtes un Admin en Service !");
   				TogglePlayerControllable(playerid, 1);
			}
      		else
        	{
         		SendClientMessage(playerid, COLOR_GREY, "   Vous n'avez pas les clefs de ce Véhicule !");
	    		RemovePlayerFromVehicle(playerid);
       		}
		}
		/*if(IsAnOwnableCar(newcar))
		{
		    if(CarInfo[newcar][cOwned]==0)
		    {
		        format(string,sizeof(string),"~w~Vehicule: %s~n~Prix: ~g~%d~n~~w~/v acheter Pour acheter ce vehicule~n~~r~",CarInfo[newcar][cDescription],CarInfo[newcar][cValue]);
				GameTextForPlayer(playerid,string,5000,5);
				format(string,sizeof(string),"Ce véhicule : %s est a vendre pour le prix de %d$.",CarInfo[newcar][cDescription],CarInfo[newcar][cValue]);
				SendClientMessage(playerid, COL_YELLOW, string);
				SendClientMessage(playerid, COLOR_YELLOW2, "Si vous désirez acheter ce véhicule, faites /v acheter");
                TogglePlayerControllable(playerid, 0);
		        format(string,sizeof(string),"~w~Vehicule: %s~n~Prix: ~g~%d~n~~w~/v acheter Pour acheter ce vehicule~n~~r~",CarInfo[newcar][cDescription],CarInfo[newcar][cValue]);
				GameTextForPlayer(playerid,string,5000,5);
				desactivetext[playerid] = 1;
				SetTimerEx("DesactiverSpeedo", 5000, 0, "i", playerid);
		    }
			new playername[MAX_PLAYER_NAME];
			GetPlayerName(playerid,playername,sizeof(playername));
		    if(CarInfo[newcar][cOwned]==1)
		    {
                format(string,sizeof(string),"Ce véhicule appartient à %s",CarInfo[newcar][cOwner]);
				SendClientMessage(playerid, COLOR_BLUE, string);
				/*if(PlayerInfo[playerid][pPcarkey] != newcar)
				{
				    RemovePlayerFromVehicle(playerid);
				    SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas les clées de ce véhicule.");
				    return 0;
				}
				if(engineOn[GetPlayerVehicleID(playerid)])
			    {
				    // SendClientMessage(playerid, COLOR_GREEN, "Ce véhicule ne t'apartient pas, fais attention a la Police !");
					TogglePlayerControllable(playerid, 1);
					return 1;
		        }
				if(PlayerInfo[playerid][pPcarkey] == newcar) { }
				else if(PlayerInfo[playerid][pPcarkey2] == newcar) { }
				else if(PlayerInfo[playerid][pPcarkey3] == newcar) { }
				else { RemovePlayerFromVehicle(playerid) && SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas les clées de ce véhicule."); }
				{
				    if(PlayerInfo[playerid][pAdmin] >= 1339 && AdminDuty[playerid] == 1)
					{
					    SendClientMessage(playerid, COLOR_GREY, "Vous pouvez conduire ce véhicule Car vous êtes un Admin en Service !");
					    TogglePlayerControllable(playerid, 1);
					}
					else if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)
					{
					    SendClientMessage(playerid, COLOR_GREEN, "Tu peux conduire ce véhicule car tu es de la Police");
					    TogglePlayerControllable(playerid, 1);
					}
				    else
				    {
				        if(engineOn[GetPlayerVehicleID(playerid)])
				        {
				           // SendClientMessage(playerid, COLOR_GREEN, "Ce véhicule ne t'apartient pas, fais attention a la Police !");
					    	TogglePlayerControllable(playerid, 1);
				        }
				        else
				        {
				    	   //	SendClientMessage(playerid, COLOR_GREEN, "Tu n'as pas les clefs de ce véhicule, fais /volervehicule pour le voler");
					    	TogglePlayerControllable(playerid, 1);
					    	//voiturepaslui[playerid] = 1;
						}
					}
				}
		    }
		}*/
		if(oldcar != 999)
		{
			if((housecar != oldcar && oldcar != 0) && (HireCar[playerid] != oldcar && newcar != housecar))
			{
				if(gLastDriver[oldcar] == playerid && oldcar != newcar)
				{
					gLastDriver[oldcar] = 998;
					gCarLock[oldcar] = 0;
					UnLockCar(oldcar);
				}
			}
		}
		gLastCar[playerid] = newcar;
		gLastDriver[newcar] = playerid;
	}
	if(newstate == PLAYER_STATE_SPAWNED)
	{
		new Float: lwx, Float:lwy, Float:lwz;
		GetPlayerPos(playerid, lwx, lwy, lwz);
		if((lwz > 530.0 && PlayerInfo[playerid][pInt] == 0) || PlayerToPoint(1000.0, playerid, -1041.9,-1868.4,79.1)) //the highest land point in sa = 526.8
		{
			SetPlayerSpawn(playerid);
		}
		if(WantedPoints[playerid] > 0)
		{
		    new dstring[128];
			new wanted = WantedPoints[playerid];
			new diecash = 0;
		    while(WantedPoints[playerid] > 0)
		    {
		        diecash += 500;
		        WantedPoints[playerid] --;
		    }
		    format(dstring, sizeof(dstring), "", diecash, wanted);
		    SendClientMessage(playerid, COLOR_YELLOW, dstring);
		    SafeGivePlayerMoney(playerid, - diecash);
		    PlayerInfo[playerid][pWantedDeaths] += 0;
		}
		if(PlayerOnMission[playerid] > 0)
		{
			GameTextForPlayer(playerid, "~r~Echec de la mission", 5000, 3);
			PlayerOnMission[playerid] = 0;
		    PlayerInfo[playerid][pMissionNr] = 0;
		}
		WantedPoints[playerid] = 0;
		WantedLevel[playerid] = 0;
		if(PlayerInfo[playerid][pDonateRank] > 0) { SetPlayerHealth(playerid, 100.0); }
		else { SetPlayerHealth(playerid, 50.0+PlayerInfo[playerid][pSHealth]); }
		MedicBill[playerid] = 1;
		TelePos[playerid][0] = 0.0;
		TelePos[playerid][1] = 0.0;
		gPlayerSpawned[playerid] = 1;
		SafeTime[playerid] = 60;
	}
	return 1;
}

public HireCost(carid)
{
	switch (carid)
	{
		case 69:
		{
			return 90000; //bullit
		}
		case 70:
		{
			return 130000; //infurnus
		}
		case 71:
		{
			return 100000; //turismo
		}
		case 72:
		{
			return 80000;
		}
		case 73:
		{
			return 70000;
		}
		case 74:
		{
			return 60000;
		}
	}
	return 0;
}

public CarCheck()
{
	new string[256];
	for(new j = 0; j<MAX_PLAYERS; j++)
	{
	    if(IsPlayerConnected(j))
	    {
	        /*SetVehicleParamsForPlayer(99, j, 0, 0);
	        SetVehicleParamsForPlayer(100, j, 0, 0);
	        SetVehicleParamsForPlayer(101, j, 0, 0);
	        SetVehicleParamsForPlayer(102, j, 0, 0);
	        SetVehicleParamsForPlayer(103, j, 0, 0);
	        SetVehicleParamsForPlayer(104, j, 0, 0);
	        SetVehicleParamsForPlayer(105, j, 0, 0);
	        SetVehicleParamsForPlayer(106, j, 0, 0);
	        SetVehicleParamsForPlayer(107, j, 0, 0);
	        SetVehicleParamsForPlayer(108, j, 0, 0);
	        SetVehicleParamsForPlayer(109, j, 0, 0);*/
		    new Float:health;
		    GetPlayerHealth(j, health);
			if(STDPlayer[j]==1)
			{
			    GetPlayerHealth(j, health);
			    SetPlayerHealth(j, health - 5.0);
			    SendClientMessage(j, COLOR_WHITE, " Vous perdez 4pts de vie a cause de votre MST.");
			}
			else if(STDPlayer[j]==2)
			{
			    GetPlayerHealth(j, health);
			    SetPlayerHealth(j, health - 12.0);
			    SendClientMessage(j, COLOR_WHITE, " Vous perdez 8pts de vie a cause de votre MST.");
			}
			else if(STDPlayer[j]==3)
			{
			    GetPlayerHealth(j, health);
			    SetPlayerHealth(j, health - 20.0);
			    SendClientMessage(j, COLOR_WHITE, " Vous perdez 12pts de vie a cause de votre MST.");
			}

			if(GetPlayerMoney(j) < 0)
			{
			    if(MoneyMessage[j]==0)
			    {
				    format(string, sizeof(string), "Vous possédez des dettes ($%d), remboursez les  ou vous irez en prison à la prochaine paye.", GetPlayerMoney(j));
					SendClientMessage(j, COLOR_LIGHTRED, string);
					MoneyMessage[j] = 1;
				}
			}
			else
			{
			    MoneyMessage[j] = 0;
			}
		}
	}
	for(new c = 1; c < 254; c++)
	{
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
				if (PlayerInfo[i][pJob] == 5)
				{
					SetVehicleParamsForPlayer(c, i, 0, 0);
				}
			}
		}
		if (gLastDriver[c] == 999)
		{
//			CarRespawn(c);
		}
		if (gLastDriver[c] >= 998)
		{
			gLastDriver[c]++;
		}
		//foundowner = -1;
	}
	return 1;
}

public CarInit()
{
	for(new c = 1; c < 254; c++)
	{
 		gLastDriver[c] = 299;
	}
	gLastDriver[999]=255;
	return 1;
}

/*public CarTow(carid)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(IsPlayerInVehicle(i, carid) || HireCar[i] == carid)
			{
				gLastDriver[carid] = 255;
				return 0;
			}
		}
	}
	SetVehiclePos(carid,HouseCarSpawns[carid-1][0], HouseCarSpawns[carid-1][1], HouseCarSpawns[carid-1][2]);
	SetVehicleZAngle(carid, HouseCarSpawns[carid-1][3]);
	return 1;
}

public CarRespawn(carid)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(IsPlayerInVehicle(i, carid) || HireCar[i] == carid)
			{
				gLastDriver[carid] = 255;
				return 0;
			}
		}
	}
	SetVehicleToRespawn(carid);
	gLastDriver[carid] = 299;
	return 1;
}*/

public LockCar(carid)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			SetVehicleParamsForPlayer(carid,i,0,1);
			gCarLock[carid] = 1;
		}
	}
	vLocked[carid]=1;
}

public UnLockCar(carid)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(!IsAPlane(carid))
			{
				SetVehicleParamsForPlayer(carid,i,0,0);
				gCarLock[carid] = 0;
			}
		}
	}
	vLocked[carid]=0;
}

/*public InitLockDoors(playerid)
{
    if(IsPlayerConnected(playerid))
	{
		new c;
		while (c < 210)
		{
			c++;
			if (gCarLock[c] == 1)
			{
				SetVehicleParamsForPlayer(c,playerid,0,1);
			}
		}
	}
	return 1;
}
*/
public OnVehicleStreamIn(vehicleid, forplayerid)
{

    if(gCarLock[vehicleid] == 1)
    {
        LockCar(vehicleid);
    }
    else
	{
		UnLockCar(vehicleid);
	}
	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
    if(PompeEssence[playerid] != 255)
	{
	    KillTimer(TimerEssence[playerid]);
	    PompeEssence[playerid] = 255;
		SendClientMessage(playerid,COL_GREEN,"Vous êtes sortis du vehicule pendant le remplisage du reservoir. Le remplisage c'est arreter!");
	}
	if(TableauActive[playerid] == 1 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    TableauActive[playerid] = 6;
	}
	return 1;
	LastHealth[playerid] = NULL;
 	LastSpeed[playerid] = NULL;
 	new playername[MAX_PLAYER_NAME];
 	if(IsPlayerInAnyVehicle(playerid) == 1 && ceinture[playerid] == 1)
	{
        new string[256];
        GetPlayerName(playerid, playername, sizeof(playername));
		SendClientMessage(playerid, COLOR_WHITE, "Vous avez retiré votre ceinture automatiquement !");
		format(string, sizeof(string), " %s descend et retire sa ceinture de sécuritée.", playername);
	 	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
    	SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 30.0, 5000);
	    printf("%s", string);
 		ceinture[playerid] = 0;
 		gEngine[playerid] = 0;
	}
	if(IsPlayerInAnyVehicle(playerid) == 1 && casque[playerid] == 1)
	{
        new string[256];
        GetPlayerName(playerid, playername, sizeof(playername));
		SendClientMessage(playerid, COLOR_WHITE, "Vous avez retiré votre casque automatiquement !");
		format(string, sizeof(string), " %s descend et retire son casque de sécurité.", playername);
	 	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
    	SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 30.0, 5000);
    	RemovePlayerAttachedObject(playerid, SLOT);
	    printf("%s", string);
 		ceinture[playerid] = 0;
 		gEngine[playerid] = 0;
	}
	else if(IsPlayerInAnyVehicle(playerid) == 1 && ceinture[playerid] == 0)
	{
 		ceinture[playerid] = 0;
 		gEngine[playerid] = 0;
 		return 1;
	}

//---------------------------[infotpetitcarrer]---------
	/*if(Inf[playerid] == 0)
	{
	Inf[playerid] = 1;
	}*/
//--------------------------------------------------------
	if (GetPlayerState(playerid) == 1)
	{
		return 1;
	}
	/*if(IsAnOwnableCar(vehicleid))
	{
	   	new Float:x,Float:y,Float:z;
		new Float:a;
		GetVehiclePos(vehicleid, x, y, z);
		GetVehicleZAngle(vehicleid, a);
		CarInfo[vehicleid][cLocationx] = x;
		CarInfo[vehicleid][cLocationy] = y;
		CarInfo[vehicleid][cLocationz] = z;
		CarInfo[vehicleid][cAngle] = a;
		OnPropUpdate();
	}
	if(CarAutolock[vehicleid] == 1)
	{
	    for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if (IsPlayerConnected(i))
			{
				SetVehicleParamsForPlayer(vehicleid,i,0,1);
				GameTextForPlayer(playerid,"~w~Car~n~~r~Autolocked",2500,3);
				return 1;
			}
		}
	}*/
/*	new keycar = PlayerInfo[playerid][pPvehkey];
	new keycar2 = PlayerInfo[playerid][pPvehkey2];
	new keycar3 = PlayerInfo[playerid][pPvehkey3];
	new vehicle = GetPlayerVehicleID(playerid);
	if(IsAnOwnableCar(vehicleid))
	{
	   	if(keycar == vehicleid)
		{
	   		for(new i = 0; i < MAX_PLAYERS; i++)
			{
			    if (IsPlayerConnected(i))
			    {
			       	SetVehicleParamsForPlayer(vehicleid,i,0,1);
			    }
				GameTextForPlayer(playerid, "~w~Vehicle~n~~r~Auto-Locked", 10000, 3);
				CarInfo[keycar][cLock] = 1;
   			}
		}
		else if(keycar2 == vehicleid)
		{
	   		for(new i = 0; i < MAX_PLAYERS; i++)
			{
			    if (IsPlayerConnected(i))
			    {
			       	SetVehicleParamsForPlayer(vehicleid,i,0,1);
			    }
				GameTextForPlayer(playerid, "~w~Vehicle~n~~r~Auto-Locked", 10000, 3);
				CarInfo[keycar2][cLock] = 1;
   			}
		}
		else if(keycar3 == vehicleid)
		{
	   		for(new i = 0; i < MAX_PLAYERS; i++)
			{
			    if (IsPlayerConnected(i))
			    {
			       	SetVehicleParamsForPlayer(vehicleid,i,0,1);
			    }
				GameTextForPlayer(playerid, "~w~Vehicle~n~~r~Auto-Locked", 10000, 3);
				CarInfo[keycar3][cLock] = 1;
   			}
		}
	}*/
	if(IsAHarvest(vehicleid))
	{
	    if(FarmerVar[playerid] == 1)
	    {
			SetTimer("FarmerExit", 7000, 0);
			GameTextForPlayer(playerid, "~n~~w~Vous avez ~r~7~w~ secondes~n~pour remonter dans la Moissonneuse", 5000, 3);
	    }
	}
	if(IsATrain(vehicleid))
	{
	    if(TrainRoute[playerid] >= 1)
	    {
	        SetTimer("TrainPlaneExit", 20000, 0);
	        GameTextForPlayer(playerid, "~n~~w~Vous avez ~r~20~w~ secondes~n~pour remonter dans le Train", 5000, 3);
		}
	}
	if(IsAJobPlane(vehicleid))
	{
	    if(AirRoute[playerid] >= 1)
	    {
	        SetTimer("JobPlaneExit", 20000, 0);
	        GameTextForPlayer(playerid, "~n~~w~Vous avez ~r~20~w~ secondes~n~pour remonter dans l'avion", 5000, 3);
		}
	}
	if(IsADrugHarvest(vehicleid))
	{
	    if(DrugFarmerVar[playerid] == 1)
	    {
			SetTimer("DrugFarmerExit", 7000, 0);
			GameTextForPlayer(playerid, "~n~~w~Vous avez ~b~7~w~ secondes~n~pour remonter dans la Moissonneuse", 5000, 3);
	    }
	}
	if(IsASmuggleCar(vehicleid))
	{
	    if(SmugglerWork[playerid] == 1)
	    {
	        SetTimer("SmugglerExit", 7000, 0);
	        GameTextForPlayer(playerid, "~n~~w~Vous avez ~r~7~w~ secondes~n~pour remonter dans une Voiture", 5000, 3);
		}
	}
	if(gGas[playerid] == 1)
	{
	    GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~Sortit de la Voiture", 500, 3);
	}
	if (BusrouteEast[playerid][0] != 0 || BusrouteWest[playerid][0] != 0)
	{
		BusrouteEnd(playerid, vehicleid);
	}
	if (IsABus(vehicleid))
	{
		for (new i=0; i<=MAX_PLAYERS; i++)
		{
			if (IsPlayerConnected(i))
			{
				if (BusrouteEast[i][0] != 0 && BusrouteEast[i][1] == vehicleid)
				{
					//BusrouteEast[i][2] --;
					GameTextForPlayer(i, "~n~~n~~n~~n~~n~~n~~g~Le Passager est sorti du Bus", 5000, 3);
				}
				else if (BusrouteWest[i][0] != 0 && BusrouteWest[i][1] == vehicleid)
				{
					//BusrouteWest[i][2] --;
					GameTextForPlayer(i, "~n~~n~~n~~n~~n~~n~~g~Le Passager est sorti du Bus", 5000, 3);
				}
			}
		}
	}
	return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
	new string[128];
	PlayerPlaySound(playerid, 1185, 0.0, 0.0, 0.0);
	PlayerInfo[playerid][pModel] = Peds[classid][0];
	if(IsPlayerNPC(playerid)) return 1;
	if (RegistrationStep[playerid] == 0 && gPlayerLogged[playerid] != 1)
	{
		ClearChatbox(playerid, 10);
		format(string, sizeof(string), "Bienvenue sur Une 2eme Chance RolePlay. Version du script: %s", SCRIPT_VERSION);
		SendClientMessage(playerid, COLOR_YELLOW, string);
		format(string, sizeof(string), "Ce serveur est équipé d'une protection Anti-Cheat.");
		SendClientMessage(playerid, 0xF66F0DF6, string);
		SendClientMessage(playerid, COLOR_YELLOW2, " ");
		if (gPlayerAccount[playerid] != 0)
		{
		    new loginstring[256];
			new loginname[64];
			GetPlayerName(playerid,loginname,sizeof(loginname));
			format(loginstring,sizeof(loginstring),"Une 2eme Chance RolePlay :\n\nBienvenue %s. Votre compte est enregistré.\n\nVeuillez entrer votre mot de passe ci-dessous pour vous connecter :",loginname);
			ShowPlayerDialog(playerid,12346,DIALOG_STYLE_INPUT,"Conexion",loginstring,"Valider","Quitter");
			//SendClientMessage(playerid, COLOR_YELLOW2, "Note: Utilisez /ident <motdepasse> pour vous connecté avec votre compte.");
			//SendClientMessage(playerid, COLOR_LIGHTRED, "Vous serez kické apres 30secondes si vous ne vous connecté pas !");
		}
		else
		{
		    gPlayerAccount[playerid] = 0;
 			new regstring[256];
			new regname[64];
			GetPlayerName(playerid,regname,sizeof(regname));
			format(regstring,sizeof(regstring),"Une 2eme Chance RolePlay :\n\nBienvenue %s. Vous n'avez pas encore de compte.\n\nInscrivez votre mot de passe ci-dessous pour vous enregistrer et pouvoir jouer :",regname);
			ShowPlayerDialog(playerid,12345,DIALOG_STYLE_INPUT,"Inscription",regstring,"Valider","Quitter");
			//SendClientMessage(playerid, COLOR_YELLOW2, "Bureau de L'immigration de LA: S'il vous plaît, fournissez nous les documents nécéssaire pour l'immigration.");
			//SendClientMessage(playerid, COLOR_WHITE, "Note: /enregistrer [motdepasse]");
		}
        SetPlayerCameraPos(playerid, 1482.3204,-1585.1097,111.1916);
        SetPlayerCameraLookAt(playerid, 1482.9917,-1764.0282,86.8616)
		/*SetPlayerCameraPos(playerid, 2219.6323,1414.4399,81.7810);
		SetPlayerCameraLookAt(playerid, 2097.1487,1271.4426,10.8203);
		//PlayerPlaySound(playerid, 1187, 0.0, 0.0, 0.0);*/
		PlayerInfo[playerid][pModel] = Peds[classid][0];
		SetPlayerTeamFromClass(playerid,classid);
	}
	else SpawnPlayer(playerid);
	return false;

 	/*if (classid == 1)
	{
			format(string, sizeof(string), "~y~> ~p~Police Chief ~y~< ~n~Leaders only!");
			GameTextForPlayer(playerid,string,3500,6);
	}
	else if (classid == 2)
	{
			format(string, sizeof(string), "~y~> ~p~FBI/ATF Leader ~y~< ~n~Leaders only!");
			GameTextForPlayer(playerid,string,3500,6);
	}
	else if (classid == 3)
	{
			format(string, sizeof(string), "~y~> ~p~National Guard General ~y~< ~n~Leaders only!");
			GameTextForPlayer(playerid,string,3500,6);
	}
	else if (classid == 4)
	{
			format(string, sizeof(string), "~y~> ~p~Fire/Ambulance Chief ~y~< ~n~Leaders only!");
			GameTextForPlayer(playerid,string,3500,6);
	}
	else if (classid == 5)
	{
			format(string, sizeof(string), "~y~> ~p~Espana Drogas Leader ~y~< ~n~Leaders only!");
			GameTextForPlayer(playerid,string,3500,6);
	}
	else if (classid == 6)
	{
			format(string, sizeof(string), "~y~> ~p~Luciano Leader ~y~< ~n~Leaders only!");
			GameTextForPlayer(playerid,string,3500,6);
	}
	else if (classid == 7)
	{
			format(string, sizeof(string), "~y~> ~p~Mayor ~y~< ~n~Leaders only!");
			GameTextForPlayer(playerid,string,3500,6);
	}
	else if (classid == 8)
	{
			format(string, sizeof(string), "~y~> ~p~yakuza Leader ~y~< ~n~Leaders only!");
			GameTextForPlayer(playerid,string,3500,6);
	}
	else if (classid == 9)
	{
			format(string, sizeof(string), "~y~> ~p~News Leader ~y~< ~n~Leaders only!");
			GameTextForPlayer(playerid,string,3500,6);
	}
	else if (classid == 10)
	{
			format(string, sizeof(string), "~y~> ~p~Taxi Cab Company Leader ~y~< ~n~Leaders only!");
			GameTextForPlayer(playerid,string,3500,6);
	}
	else if (classid == 11)
	{
			format(string, sizeof(string), "~y~> ~p~License Faction Leader ~y~< ~n~Leaders only!");
			GameTextForPlayer(playerid,string,3500,6);
	}
	else if (classid == 14)
	{
			format(string, sizeof(string), "~y~> ~p~Nortenos Leader ~y~< ~n~Leaders only!");
			GameTextForPlayer(playerid,string,3500,6);
	}
	else if (classid == 15)
	{
			format(string, sizeof(string), "~y~> ~p~Grove Street Leader ~y~< ~n~Leaders only!");
			GameTextForPlayer(playerid,string,3500,6);
	}
	else if (classid == 16)
	{
			format(string, sizeof(string), "~y~> ~p~Jefferson Saints Leader ~y~< ~n~Leaders only!");
			GameTextForPlayer(playerid,string,3500,6);
	}
	else
	{
		format(string, sizeof(string), "~y~> ~g~Civilian ~y~<");
		GameTextForPlayer(playerid,string,3500,6);
	}
	SetPlayerTeamFromClass(playerid,classid);
	SetupPlayerForClassSelection(playerid);
	return 1;*/
}

public SetupPlayerForClassSelection(playerid)
{
	/*switch (gTeam[playerid])
	{
		case TEAM_BLUE:
		{
			SetPlayerInterior(playerid,5);
			SetPlayerPos(playerid,323.4,305.6,999.1);
			SetPlayerFacingAngle(playerid, 90.0);
			SetPlayerCameraPos(playerid,323.4-1.5-1.0,305.6,999.1+0.7);
			SetPlayerCameraLookAt(playerid,323.4-1.0,305.6,999.1+0.7);

		}
		case TEAM_ADMIN:
		{
		    SetPlayerInterior(playerid,3);
			SetPlayerPos(playerid,-2654.4,1424.2,912.4);
			SetPlayerFacingAngle(playerid, 90.0);
			SetPlayerCameraPos(playerid,-2654.4-1.5,1424.2,912.4+0.7);
			SetPlayerCameraLookAt(playerid,-2654.4,1424.2,912.4+0.7);
		}
		default:
		{
		    SetPlayerInterior(playerid,3);
			SetPlayerPos(playerid,361.8270,174.0347,1008.3893);
			SetPlayerFacingAngle(playerid,90);
		    SetPlayerCameraPos(playerid, 361.7270,169.0347,1008.3893);
		    SetPlayerCameraLookAt(playerid,361.8270,174.0347,1008.3893);
		}
	}*/
}

//---------------------------------------------------------

public SetPlayerTeamFromClass(playerid,classid)
{
 	/*if (classid >= 1 && classid <= 14)
	{
		gTeam[playerid] = 11; //admin
		PlayerInfo[playerid][pTeam] = 11;
	}
	else
	{
	    gTeam[playerid] = 3;
	    PlayerInfo[playerid][pTeam] = 3;
	}*/
}

//---------------------------------------------------------

public SetPlayerCriminal(playerid,declare,reason[])
{//example: SetPlayerCriminal(playerid,255, "Stealing A Police Vehicle");
	if(IsPlayerConnected(playerid))
	{
	    PlayerInfo[playerid][pCrimes] += 1;
	    new points = WantedPoints[playerid];
		new turned[MAX_PLAYER_NAME];
		new turner[MAX_PLAYER_NAME];
		new turnmes[128];
		new string[256];
		new wantedmes[128];
		new wlevel;
		strmid(PlayerCrime[playerid][pAccusedof], reason, 0, strlen(reason), 255);
		GetPlayerName(playerid, turned, sizeof(turned));
		if (declare == 255)
		{
			format(turner, sizeof(turner), "Anonyme");
			strmid(PlayerCrime[playerid][pVictim], turner, 0, strlen(turner), 255);
		}
		else
		{
		    if(IsPlayerConnected(declare))
		    {
				GetPlayerName(declare, turner, sizeof(turner));
				strmid(PlayerCrime[playerid][pVictim], turner, 0, strlen(turner), 255);
				strmid(PlayerCrime[declare][pBplayer], turned, 0, strlen(turned), 255);
				strmid(PlayerCrime[declare][pAccusing], reason, 0, strlen(reason), 255);
			}
		}
		if(AdminDuty[playerid] == 1)
		{
			format(string, sizeof(string),"Vous avez commis un crime: %s. Témoin: %s, Mais vous êtes Duty On. Il n'a pas été rapporté a la LSPD.",reason,turner);
			SendClientMessage(playerid, COLOR_LIGHTRED, string);
			return 1;
		}
		format(turnmes, sizeof(turnmes), "Vous avez commis un crime: %s. Témoin: %s.",reason,turner);
		SendClientMessage(playerid, COLOR_DARKNICERED, turnmes);
		if(points > 0)
		{
		    new yesno;
			if(points == 3) { if(WantedLevel[playerid] != 1) { WantedLevel[playerid] = 1; wlevel = 1; yesno = 1; } }
			else if(points >= 4 && points <= 5) { if(WantedLevel[playerid] != 2) { WantedLevel[playerid] = 2; wlevel = 2; yesno = 1; } }
			else if(points >= 6 && points <= 7) { if(WantedLevel[playerid] != 3) { WantedLevel[playerid] = 3; wlevel = 3; yesno = 1; } }
			else if(points >= 8 && points <= 9) { if(WantedLevel[playerid] != 4) { WantedLevel[playerid] = 4; wlevel = 4; yesno = 1; } }
			else if(points >= 10 && points <= 11) { if(WantedLevel[playerid] != 5) { WantedLevel[playerid] = 5; wlevel = 5; yesno = 1; } }
			else if(points >= 12 && points <= 13) { if(WantedLevel[playerid] != 6) { WantedLevel[playerid] = 6; wlevel = 6; yesno = 1; } }
			else if(points >= 14) { if(WantedLevel[playerid] != 10) { WantedLevel[playerid] = 10; wlevel = 10; yesno = 1; } }
			if(WantedLevel[playerid] >= 1) { if(gTeam[playerid] == 3) { gTeam[playerid] = 4; } }
			if(yesno)
			{
				format(wantedmes, sizeof(wantedmes), "Niveau de recherche actuel: %d", wlevel);
				SendClientMessage(playerid, COLOR_YELLOW, wantedmes);
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
					    if(PlayerInfo[i][pMember] == 1||PlayerInfo[i][pLeader] == 1)
					    {
							format(cbjstore, sizeof(turnmes), "QG: A Toutes les unités APB: Témoin: %s",turner);
							SendClientMessage(i, TEAM_BLUE_COLOR, cbjstore);
							format(cbjstore, sizeof(turnmes), "QG: Crime: %s, Suspet: %s",reason,turned);
							SendClientMessage(i, TEAM_BLUE_COLOR, cbjstore);
						}
					}
				}
			}
		}
	}
	return 0;//not connected
}
//---------------------------------------------------------

public SetPlayerCriminalEx(playerid,declare,reason[])
{//example: SetPlayerCriminal(playerid,255, "Stealing A Police Vehicle");
	if(IsPlayerConnected(playerid))
	{
	    PlayerInfo[playerid][pCrimes] += 1;
	    new points = WantedPoints[playerid];
		new turned[MAX_PLAYER_NAME];
		new turner[MAX_PLAYER_NAME];
		new turnmes[128];
		new wantedmes[128];
		new wlevel;
		strmid(PlayerCrime[playerid][pAccusedof], reason, 0, strlen(reason), 255);
		GetPlayerName(playerid, turned, sizeof(turned));
		if (declare == 255)
		{
			format(turner, sizeof(turner), "Anonyme");
			strmid(PlayerCrime[playerid][pVictim], turner, 0, strlen(turner), 255);
		}
		else
		{
		    if(IsPlayerConnected(declare))
		    {
				GetPlayerName(declare, turner, sizeof(turner));
				strmid(PlayerCrime[playerid][pVictim], turner, 0, strlen(turner), 255);
				strmid(PlayerCrime[declare][pBplayer], turned, 0, strlen(turned), 255);
				strmid(PlayerCrime[declare][pAccusing], reason, 0, strlen(reason), 255);
			}
		}
		format(turnmes, sizeof(turnmes), "Vous avez commis un  crime: %s. Témoin: %s.",reason,turner);
		//SendClientMessage(playerid, COLOR_DARKNICERED, turnmes);
		if(points > 0)
		{
		    new yesno;
			if(points == 3) { if(WantedLevel[playerid] != 1) { WantedLevel[playerid] = 1; wlevel = 1; yesno = 1; } }
			else if(points >= 4 && points <= 5) { if(WantedLevel[playerid] != 2) { WantedLevel[playerid] = 2; wlevel = 2; yesno = 1; } }
			else if(points >= 6 && points <= 7) { if(WantedLevel[playerid] != 3) { WantedLevel[playerid] = 3; wlevel = 3; yesno = 1; } }
			else if(points >= 8 && points <= 9) { if(WantedLevel[playerid] != 4) { WantedLevel[playerid] = 4; wlevel = 4; yesno = 1; } }
			else if(points >= 10 && points <= 11) { if(WantedLevel[playerid] != 5) { WantedLevel[playerid] = 5; wlevel = 5; yesno = 1; } }
			else if(points >= 12 && points <= 13) { if(WantedLevel[playerid] != 6) { WantedLevel[playerid] = 6; wlevel = 6; yesno = 1; } }
			else if(points >= 14) { if(WantedLevel[playerid] != 10) { WantedLevel[playerid] = 10; wlevel = 10; yesno = 1; } }
			if(WantedLevel[playerid] >= 1) { if(gTeam[playerid] == 3) { gTeam[playerid] = 4; } }
			if(yesno)
			{
				format(wantedmes, sizeof(wantedmes), "Niveau de recherche actuel: %d", wlevel);
				SendClientMessage(playerid, COLOR_YELLOW, wantedmes);
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
					    if(PlayerInfo[i][pMember] == 1||PlayerInfo[i][pLeader] == 1)
					    {
							format(cbjstore, sizeof(turnmes), "QG: A Toutes les unités APB: Témoin: %s",turner);
							SendClientMessage(i, TEAM_BLUE_COLOR, cbjstore);
							format(cbjstore, sizeof(turnmes), "QG: Crime: %s, Suspet: %s",reason,turned);
							SendClientMessage(i, TEAM_BLUE_COLOR, cbjstore);
						}
					}
				}
			}
		}
	}//not connected
}

//---------------------------------------------------------
public SetPlayerFree(playerid,declare,reason[])
{
	if(IsPlayerConnected(playerid))
	{
		ClearCrime(playerid);
		new turned[MAX_PLAYER_NAME];
		new turner[MAX_PLAYER_NAME];
		new turnmes[128];
		new crbjstore[128];
		if (declare == 255)
		{
			format(turner, sizeof(turner), "911");
		}
		else
		{
		    if(IsPlayerConnected(declare))
		    {
				GetPlayerName(declare, turner, sizeof(turner));
			}
		}
		GetPlayerName(playerid, turned, sizeof(turned));
		format(turnmes, sizeof(turnmes), "SMS: %s, Grace à %s, Vous n'êtes plus un criminel, Expéditeur: MOLE (555)",turned,reason);
		RingTone[playerid] = 20;
		SendClientMessage(playerid, COLOR_YELLOW, turnmes);
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
			    if(PlayerInfo[i][pMember] == 1||PlayerInfo[i][pLeader] == 1)
			    {
					format(crbjstore, sizeof(crbjstore), "QG: A toutes les unités, Officier %s A accomplit ça Mission",turner);
					SendClientMessage(i, COLOR_DBLUE, crbjstore);
					format(crbjstore, sizeof(crbjstore), "QG: %s a été traité, %s",turned,reason);
					SendClientMessage(i, COLOR_DBLUE, crbjstore);
				}
			}
		}
	}
}

public RingToner()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
			if(RingTone[i] != 6 && RingTone[i] != 0 && RingTone[i] < 11)
			{
				RingTone[i] = RingTone[i] -1;
				PlayerPlaySound(i, 1138, 0.0, 0.0, 0.0);
			}
			if(RingTone[i] == 6)
			{
				RingTone[i] = RingTone[i] -1;
			}
			if(RingTone[i] == 20)
			{
				RingTone[i] = RingTone[i] -1;
				PlayerPlaySound(i, 1139, 0.0, 0.0, 0.0);
			}
		}
	}
	SetTimer("RingTonerRev", 1000, 0);
	return 1;
}

public RingTonerRev()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
			if(RingTone[i] != 5 && RingTone[i] != 0 && RingTone[i] < 10)
			{
				RingTone[i] = RingTone[i] -1;
				PlayerPlaySound(i, 1137, 0.0, 0.0, 0.0);
			}
			if(RingTone[i] == 5)
			{
				RingTone[i] = RingTone[i] -1;
			}
			if(RingTone[i] == 19)
			{
				PlayerPlaySound(i, 1139, 0.0, 0.0, 0.0);
				RingTone[i] = 0;
			}
		}
	}
	SetTimer("RingToner", 1000, 0);
	return 1;
}

public OtherTimer()
{
    //new Float:maxspeed = 270.0;
    //new plname[MAX_PLAYER_NAME];
	new string[256];
	new Float:oldposx, Float:oldposy, Float:oldposz;
    for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        if (GetPlayerState(i) == 1) CheckForWalkingTeleport(i); // IF THE PLAYER IS IN A TELEPORT ZONE, TELEPORT THEM
	        new vehicleid = GetPlayerVehicleID(i);
	        //new modelveh = GetVehicleModel(vehicleid);
            if(SafeTime[i] > 0)
			{
				SafeTime[i]--;
			}
			if(SafeTime[i] == 1)
			{
				if(gPlayerAccount[i] == 1 && gPlayerLogged[i] == 0)
				{
					//SendClientMessage(i, COLOR_WHITE, "Note: Vous pouvez vous connecté en tappant  /ident <motdepasse>");
					new loginname[64];
					new loginstring[128];
					GetPlayerName(i,loginname,64);
			        format(loginstring,sizeof(loginstring),"Une 2eme Chance RolePlay :\n\nBienvenue %s. Votre compte est enregistré.\n\nVeuillez entrer votre mot de passe ci-dessous pour vous connecter :",loginname);
			        ShowPlayerDialog(i,12346,DIALOG_STYLE_INPUT,"Conexion",loginstring,"Valider","Quitter");
				}
			}
		    /*if(GetPlayerState(i) == 2)
		    {
					if ((BusrouteEast[i][0] == 0 && BusrouteWest[i][0] == 0))
					{
						if(gSpeedo[i] == 1)
						{
						    if(desactivetext[i] == 1 || AdminDuty[i] == 1)
						    {
						    }
							else if(IsAPlane(vehicleid) || IsABoat(vehicleid) || IsABike(vehicleid) || IsAHarvest(vehicleid) || IsADrugHarvest(vehicleid) || IsASweeper(vehicleid) || modelveh == 481 || modelveh == 510 || modelveh == 509)
		   		    		{
		   		    		    if(!engineOn[vehicleid])
		   		    		    {
		   		    		    	format(string, 256, "~n~~n~~n~~n~~n~~g~Vehicule: ~w~%s ~n~~b~Km/H:   ~w~%.f ~n~~r~Essence:~w~ N/A~n~",CarName[GetVehicleModel(GetPlayerVehicleID(i))-400],GetPlayerSpeed(i))
								}
								else if(engineOn[vehicleid])
								{
								    format(string, 256, "~n~~n~~n~~n~~n~~g~Vehicule: ~w~%s ~n~~b~Km/H:   ~w~%.f ~n~~r~Essence:~w~ N/A~n~",CarName[GetVehicleModel(GetPlayerVehicleID(i))-400],GetPlayerSpeed(i))
								}
								GameTextForPlayer(i, string, 5000, 5);
							}
							else
							{
							    if(!engineOn[vehicleid])
		   		    		    {
		   		    		    	format(string, 256, "~n~~n~~n~~n~Moteur :~r~ Eteind~n~~g~Vehicule: ~w~%s ~n~~b~Km/H:   ~w~%.f ~n~~r~Essence:~w~ %d%~n~",CarName[GetVehicleModel(GetPlayerVehicleID(i))-400],GetPlayerSpeed(i),Gas[vehicleid])
								}
								else if(engineOn[vehicleid])
								{
								    format(string, 256, "~n~~n~~n~~n~Moteur :~b~ Allume~n~~g~Vehicule: ~w~%s ~n~~b~Km/H:   ~w~%.f ~n~~r~Essence:~w~ %d%~n~",CarName[GetVehicleModel(GetPlayerVehicleID(i))-400],GetPlayerSpeed(i),Gas[vehicleid])
								}
								GameTextForPlayer(i, string, 5000, 5);
							}
						}
						if(GetPlayerSpeed(i) > maxspeed && PlayerInfo[i][pAdmin] < 1)
						{
							new tmpcar = GetPlayerVehicleID(i);
							if(!IsAPlane(tmpcar))
							{
								GetPlayerName(i, plname, sizeof(plname));
								format(string, 256, "MomoWarning: [%d]%s %.0f Km/H",i,plname,GetPlayerSpeed(i));
								ABroadCast(COLOR_YELLOW,string,1);
							}
						}
					}
			}*/
		    if(PlayerInfo[i][pLocal] != 255 && PlayerInfo[i][pInt] != 0)
			{
				new house = PlayerInfo[i][pLocal];
				GetPlayerPos(i, oldposx, oldposy, oldposz);
				if(oldposz != 0.0)
				{
					if(oldposz < 600.0)
					{
						/*if(house > 10000)
						{
							new tmpcar = GetPlayerVehicleID(i);
							if (!PlayerToPoint(6, i,1040.6,-1021.0,31.7) && house == 10001 ||!PlayerToPoint(6, i,-2720.5,217.5,4.1) && house == 10002 ||!PlayerToPoint(6, i,2644.6,-2044.9,13.3) && house == 10003)
							{
								if (GetPlayerState(i) == 2)
								{
									SetVehiclePos(tmpcar, HouseCarSpawns[tmpcar-1][0], HouseCarSpawns[tmpcar-1][1], HouseCarSpawns[tmpcar-1][2]);
									SetVehicleZAngle(tmpcar, HouseCarSpawns[tmpcar-1][3]);
								}
								else
								{
									SetPlayerPos(i, HouseCarSpawns[tmpcar-1][0], HouseCarSpawns[tmpcar-1][1], HouseCarSpawns[tmpcar-1][2]);
								}
								new oldcash = gSpentCash[i];
								new Total = GetPlayerMoney(i) - oldcash;
								printf("Total %d = GetPlayerMoney(playerid) %d - oldcash %d",Total,GetPlayerMoney(i),oldcash);
								new name[MAX_PLAYER_NAME];
								GetPlayerName(i, name, sizeof(name));
								format(string,128,"<< %s has left the homemodshop with $%d >>",name,Total);
								PayLog(string);
								gSpentCash[i] = 0;
								TelePos[i][0] = 0.0;
								TelePos[i][1] = 0.0;
								PlayerInfo[i][pLocal] = 255;
								SetPlayerInterior(i,0);
								PlayerInfo[i][pInt] = 0;
								Spectate[i] = 255;
							}
						}*/
						if(house == 242)
						{
						    SetPlayerInterior(i,0);
							SetPlayerPos(i,-2518.5967,-623.2701,132.7679);
							PlayerInfo[i][pInt] = 0;
							PlayerInfo[i][pLocal] = 255;
						}
						/*if(house >= 99 && house != 10000)
						{
							SetPlayerPos(i, BizzInfo[house-99][bEntranceX], BizzInfo[house-99][bEntranceY],BizzInfo[house-99][bEntranceZ]); // Warp the player
							PlayerInfo[i][pLocal] = 255;
							SetPlayerInterior(i,0);
							PlayerInfo[i][pInt] = 0;
						}*/
						/*else if(house < 99 && house != 10000)
						{
							SetPlayerPos(i, HouseInfo[house][hEntrancex], HouseInfo[house][hEntrancey],HouseInfo[house][hEntrancez]); // Warp the player
							PlayerInfo[i][pLocal] = 255;
							SetPlayerInterior(i,0);
							PlayerInfo[i][pInt] = 0;
						}*/
					}
				}
			}
		    if(CellTime[i] > 0)
			{
				if (CellTime[i] == cchargetime)
				{
					CellTime[i] = 1;
					if(Mobile[Mobile[i]] == i)
					{
						CallCost[i] = CallCost[i]+callcost;
					}
				}
				CellTime[i] = CellTime[i] +1;
				if (Mobile[Mobile[i]] == 255 && CellTime[i] == 5)
				{
				    if(IsPlayerConnected(Mobile[i]))
				    {
						new called[MAX_PLAYER_NAME];
						GetPlayerName(Mobile[i], called, sizeof(called));
						format(string, sizeof(string), "* Le portable de %s sonne.", called);
						RingTone[Mobile[i]] = 10;
						ProxDetector(30.0, Mobile[i], string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}
			}
			if(CellTime[i] == 0 && CallCost[i] > 0)
			{
				format(string, sizeof(string), "~w~L'appel vous a coute~n~~r~$%d",CallCost[i]);
				SafeGivePlayerMoney(i, -CallCost[i]);
				SBizzInfo[2][sbTill] += CallCost[i];
				ExtortionSBiz(2, CallCost[i]);
				GameTextForPlayer(i, string, 5000, 1);
				CallCost[i] = 0;
			}
			if(TransportTime[i] > 0)
			{//Taxi driver and passenger only
			    if(TransportTime[i] >= 16)
				{
					TransportTime[i] = 1;
					if(TransportDriver[i] < 999)
					{
						if(IsPlayerConnected(TransportDriver[i]))
						{
	      					TransportCost[i] += TransportValue[TransportDriver[i]];
						    TransportCost[TransportDriver[i]] = TransportCost[i];
						}
					}
				}
			    TransportTime[i] += 1;
			    format(string, sizeof(string), "~r~%d ~w~: ~g~$%d",TransportTime[i],TransportCost[i]);
			    GameTextForPlayer(i, string, 15000, 6);
			}
			if (BusrouteEast[i][0] != 0 || BusrouteWest[i][0] != 0)
			{
				if (!IsPlayerInAnyVehicle(i) || !IsABus(GetPlayerVehicleID(i)))
				if (vehicleid != 0)
				{
					if (!IsABus(vehicleid))
					{
						if (BusrouteEast[i][0] != 0) BusrouteEnd(i, BusrouteEast[i][1]);
						else if (BusrouteWest[i][0] != 0) BusrouteEnd(i, BusrouteWest[i][1]);
					}
				}
				else
				{
					if (BusrouteEast[i][0] != 0) BusrouteEnd(i, BusrouteEast[i][1]);
					else if (BusrouteWest[i][0] != 0) BusrouteEnd(i, BusrouteWest[i][1]);
				}
			}
			if (IsABus(vehicleid) && GetPlayerState(i) == 2 && PlayerInfo[i][pJob] != 14)
			{
				SetVehicleToRespawn(vehicleid);
			}
		}
	}
	return 1;
}


public SetPlayerUnjail()
{
//	new plname[MAX_PLAYER_NAME];
	new string[256];
	if(PaintballPlayers >= 2 && PaintballRound != 1 && StartingPaintballRound != 1)
	{
		StartingPaintballRound = 1;
	   	SetTimer("PreparePaintball", 15000, 0);
	}
	if(KartingPlayers >= 2 && KartingRound != 1 && StartingKartRound != 1)
	{
	    StartingKartRound = 1;
	    SetTimer("PrepareKarting", 15000, 0);
	}
	if(KartingRound != 0 && KartingPlayers < 2)
	{
	    StartingKartRound = 0;
	    KartingRound = 0;
	    EndingKartRound = 1;
	}
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
			new newcar = GetPlayerVehicleID(i);
			new level = PlayerInfo[i][pLevel];
			if(level >= 0 && level <= 2) { PlayerInfo[i][pPayCheck] += 1; }
			else if(level >= 3 && level <= 4) { PlayerInfo[i][pPayCheck] += 2; }
			else if(level >= 5 && level <= 6) { PlayerInfo[i][pPayCheck] += 3; }
			else if(level >= 7 && level <= 8) { PlayerInfo[i][pPayCheck] += 4; }
			else if(level >= 9 && level <= 10) { PlayerInfo[i][pPayCheck] += 5; }
			else if(level >= 11 && level <= 12) { PlayerInfo[i][pPayCheck] += 6; }
			else if(level >= 13 && level <= 14) { PlayerInfo[i][pPayCheck] += 7; }
			else if(level >= 15 && level <= 16) { PlayerInfo[i][pPayCheck] += 8; }
			else if(level >= 17 && level <= 18) { PlayerInfo[i][pPayCheck] += 9; }
			else if(level >= 19 && level <= 20) { PlayerInfo[i][pPayCheck] += 10; }
			else if(level >= 21) { PlayerInfo[i][pPayCheck] += 11; }
		    if(PlayerInfo[i][pJailed] > 0)
		    {
				if(PlayerInfo[i][pJailTime] > 0 && WantLawyer[i] == 0)
				{
					PlayerInfo[i][pJailTime]--;
					format(string, sizeof(string), "~n~~n~~n~~b~ Il vous reste encore ~r~%d ~b~secondes de prison",PlayerInfo[i][pJailTime]);
	    			GameTextForPlayer(i, string, 1000, 3);

				}
				if(PlayerInfo[i][pJailTime] <= 0 && WantLawyer[i] == 0)
				{
				    PlayerInfo[i][pJailTime] = 0;
					if(PlayerInfo[i][pJailed] == 1)
					{
						SetPlayerInterior(i, 6);
						PlayerInfo[i][pInt] = 6;
						SetPlayerPos(i,246.8439,70.0776,1003.6406);
						SetPlayerWorldBounds(i,20000.0000,-20000.0000,20000.0000,-20000.0000);
						SendClientMessage(i, COLOR_WHITE,"Vous avez été libéré de Prison. Réfléchissez avant de commettre un autre crime.");
					    format(string, sizeof(string), "~g~Vous etes libre~n~~w~Essayer d'etre un meilleur Citoyen.");
					}
					else if(PlayerInfo[i][pJailed] == 2)
					{
					    SetPlayerWorldBounds(i,20000.0000,-20000.0000,20000.0000,-20000.0000); //Reset world to player 
	     				SetPlayerInterior(i, 0);
						PlayerInfo[i][pInt] = 0;
						SetPlayerPos(i,1743.1295,-1862.9645,13.5757);
						SendClientMessage(i, COLOR_RED,"Vous avez terminé votre peine de prison.");
				    	SendClientMessage(i, COLOR_RED,"Ne faites plus d'actes NO RP et vous ne serez plus emprisonnés par un Admin.");
				    	SendClientMessage(i, COLOR_RED,"N'oubliez pas d'aller consulter les règles sur : http://u2c-rp.forum-pro.fr");
					}
					PlayerInfo[i][pJailed] = 0;
					TogglePlayerControllable(i, 1);
					GameTextForPlayer(i, string, 5000, 1);
					if(gTeam[i] == 4) { gTeam[i] = 3; }
					ClearCrime(i);
					SetPlayerToTeamColor(i);
				}
			}
				if(PlayerInfo[i][pFlyLict] > 1)
				{
					PlayerInfo[i][pFlyLict]--;
				}
				if(PlayerInfo[i][pFlyLict] == 1)
				{
					PlayerInfo[i][pFlyLict] = 0;
					SendClientMessage(i, COLOR_WHITE, "**Faux Permis expiré");
				}
				if(PlayerInfo[i][pFlyLict] < 0)
				{
					PlayerInfo[i][pFlyLict] = 0;
					SendClientMessage(i, COLOR_WHITE, "**Faux Permis expiré");
				}
                if(PlayerInfo[i][pBoatLict] > 1)
				{
					PlayerInfo[i][pBoatLict]--;
				}
				if(PlayerInfo[i][pBoatLict] < 0)
				{
					PlayerInfo[i][pBoatLict] = 0;
					SendClientMessage(i, COLOR_WHITE, "**Faux Permis expiré");
				}
				if(PlayerInfo[i][pBoatLict] == 1)
				{
					PlayerInfo[i][pBoatLict] = 0;
					SendClientMessage(i, COLOR_WHITE, "**Faux Permis expiré");
				}
                if(PlayerInfo[i][pFishLict] > 1)
				{
					PlayerInfo[i][pFishLict]--;
				}
				if(PlayerInfo[i][pFishLict] < 0)
				{
					PlayerInfo[i][pFishLict] = 0;
					SendClientMessage(i, COLOR_WHITE, "**Faux Permis expiré");
				}
    			if(PlayerInfo[i][pFishLict] == 1)
				{
					PlayerInfo[i][pFishLict] = 0;
					SendClientMessage(i, COLOR_WHITE, "**Faux Permis expiré");
				}
    			if(PlayerInfo[i][pLourdLict] > 1)
				{
					PlayerInfo[i][pLourdLict]--;
				}
				if(PlayerInfo[i][pLourdLict] < 0)
				{
					PlayerInfo[i][pLourdLict] = 0;
					SendClientMessage(i, COLOR_WHITE, "**Faux Permis expiré");
				}
				if(PlayerInfo[i][pLourdLict] == 1)
				{
					PlayerInfo[i][pLourdLict] = 0;
					SendClientMessage(i, COLOR_WHITE, "**Faux Permis expiré");
				}
                if(PlayerInfo[i][pMotoLict] > 1)
				{
					PlayerInfo[i][pMotoLict]--;
				}
				if(PlayerInfo[i][pMotoLict] < 0)
				{
					PlayerInfo[i][pMotoLict] = 0;
					SendClientMessage(i, COLOR_WHITE, "**Faux Permis expiré");
				}
    			if(PlayerInfo[i][pMotoLict] == 1)
				{
					PlayerInfo[i][pMotoLict] = 0;
					SendClientMessage(i, COLOR_WHITE, "**Faux Permis expiré");
				}
                if(PlayerInfo[i][pGunLict] > 1)
				{
					PlayerInfo[i][pGunLict]--;
				}
				if(PlayerInfo[i][pGunLict] < 0)
				{
					PlayerInfo[i][pGunLict] = 0;
					SendClientMessage(i, COLOR_WHITE, "**Faux Permis expiré");
				}
				if(PlayerInfo[i][pGunLict] == 1)
				{
					PlayerInfo[i][pGunLict] = 0;
					SendClientMessage(i, COLOR_WHITE, "**Faux Permis expiré");
				}
				if(PlayerInfo[i][pGunLict] == 0 && PlayerInfo[i][pFishLict] == 0 && PlayerInfo[i][pBoatLict] == 0 && PlayerInfo[i][pFlyLict] == 0)
				{
					PlayerInfo[i][pfpermis] = 0;
				}
                if(PlayerInfo[i][pskinf] > 1)
				{
					PlayerInfo[i][pskinf]--;
				}
				if(PlayerInfo[i][pskinf] == 1)
				{
					PlayerInfo[i][pskinf] = 0;
					SetPlayerSkin(i, PlayerInfo[i][pChar]);
					SendClientMessage(i, COLOR_WHITE, "**Le faux costume a cracké !");
					TogglePlayerControllable(i, 1);
				}
				if(PlayerInfo[i][pskinf] < 0)
				{
					PlayerInfo[i][pskinf] = 0;
					SetPlayerSkin(i, PlayerInfo[i][pChar]);
					SendClientMessage(i, COLOR_WHITE, "**Le faux costume a cracké !");
					TogglePlayerControllable(i, 1);
				}
                if(PlayerInfo[i][pskinfm] > 1)
				{
					PlayerInfo[i][pskinfm]--;
				}
				if(PlayerInfo[i][pskinfm] == 1)
				{
					PlayerInfo[i][pskinfm] = 0;
					SetPlayerSkin(i, PlayerInfo[i][pChar]);
					SendClientMessage(i, COLOR_WHITE, "**Le faux costume a cracké !");
					TogglePlayerControllable(i, 1);
				}
				if(PlayerInfo[i][pskinfm] < 0)
				{
					PlayerInfo[i][pskinfm] = 0;
					SetPlayerSkin(i, PlayerInfo[i][pChar]);
					SendClientMessage(i, COLOR_WHITE, "**Le faux costume a cracké !");
					TogglePlayerControllable(i, 1);
				}
			/*if(GetPlayerMoney(i) - CurrentMoney[i] >= 20000 && PlayerInfo[i][pAdmin] < 1)
		    {
		        if(ConsumingMoney[i])
		        {
                    CurrentMoney[i] = GetPlayerMoney(i);
					ConsumingMoney[i] = 0;
		        }
		        else
		        {
			        GetPlayerName(i, plname, sizeof(plname));
			        format(string, 256, "MomoWarning: [%d]%s just spawned above $20000 in one second (moneycheat), use /verifier on him.",i,plname);
					ABroadCast(COLOR_YELLOW,string,1);
					PayLog(string);
			        CurrentMoney[i] = GetPlayerMoney(i);
			        TogglePlayerControllable(i, 0);
	            	SendClientMessage(i, COLOR_YELLOW, "Frozen for money cheat detection.");
		        }
		    }
		    else
		    {
		        CurrentMoney[i] = GetPlayerMoney(i);
		    }*/
		    if(IsABoat(newcar))
			{
			    if(PlayerInfo[i][pBoatLic] < 1 && GetPlayerState(i) == 2)
				{
				    RemovePlayerFromVehicle(i);
				}
			}
			else if(IsAPlane(newcar))
			{
			    if(PlayerInfo[i][pFlyLic] < 1 && GetPlayerState(i) == 2)
				{
				    if(TakingLesson[i] == 1) { }
				}
			}
			else
			{
				if(PlayerInfo[i][pCarLic] < 1 && IsPlayerInAnyVehicle(i) && GetPlayerState(i) == 2)
				{
					if(TakingLesson[i] == 1) { }
				}
			}//Done with car check
		    if(UsedFind[i] >= 1)
		    {
		        UsedFind[i] += 1;
				if(UsedFind[i] >= 120)
				{
				    UsedFind[i] = 0;
				}
		    }
		    if(tempvoiturevoler[i] >= 1)
		    {
		        tempvoiturevoler[i] += 1;
				if(tempvoiturevoler[i] >= 120)
				{
				    tempvoiturevoler[i] = 0;
				}
		    }
   			if(MedicTime[i] > 0)
			{
			    if(MedicTime[i] == 3)
			    {
			        SetPlayerInterior(i, 3);
			        PlayerInfo[i][pInt] = 3;
			        new Float:X, Float:Y, Float:Z;
			        GetPlayerPos(i, X,Y,Z);
			        SetPlayerCameraPos(i, X - 3, Y, Z);
			        SetPlayerCameraLookAt(i,X,Y,Z);
			    }
			    MedicTime[i] ++;
			    if(MedicTime[i] >= NeedMedicTime[i])
			    {
					new cut = deathcost; //PlayerInfo[playerid][pLevel]*deathcost;
					//SafeGivePlayerMoney(i, -cut);*/
					if(PlayerInfo[i][pLevel] >= 10)
				    {
					    cut = 5000;
	                }
	                else cut = PlayerInfo[i][pLevel]*deathcost;
					//SafeGivePlayerMoney(i, -cut);
					format(string, sizeof(string), "Docteur: Votre facture d'hopital est de $%d. Bonne journée !", cut);
					SendClientMessage(i, TEAM_CYAN_COLOR, string);
					TogglePlayerControllable(i, 1);
					SafeGivePlayerMoney(i, -cut);
			        MedicBill[i] = 0;
			        MedicTime[i] = 0;
			        NeedMedicTime[i] = 0;
			        PlayerInfo[i][pDeaths] += 1;
			        PlayerFixRadio(i);
			        ClearAnimations(i);
			        SetPlayerSpawn(i);
					SetCameraBehindPlayer(i);
			    }
			}
			if(WantLawyer[i] >= 1)
			{
			    CallLawyer[i] = 111;
			    if(WantLawyer[i] == 1)
				{
				    SendClientMessage(i, COLOR_YELLOW2, "Voulez vous un avocat? (Tapper oui ou non)");
				}
				WantLawyer[i] ++;
				if(WantLawyer[i] == 8)
				{
				    SendClientMessage(i, COLOR_YELLOW2, "Voulez vous un avocat? (Tapper oui ou non)");
				}
	            if(WantLawyer[i] == 15)
				{
				    SendClientMessage(i, COLOR_YELLOW2, "Voulez vous un avocat? (Tapper oui ou non)");
				}
				if(WantLawyer[i] == 20)
				{
				    SendClientMessage(i, COLOR_YELLOW2, "Il n'y a pas d'avocat présent, Votre peine de Prison commence.");
				    WantLawyer[i] = 0;
				    CallLawyer[i] = 0;
				}
			}
			if(TutTime[i] >= 1)
			{
			    TutTime[i] += 1;
                if(TutTime[i] == 3)
			    {
                    SendClientMessage(i, COLOR_WHITE, " ");
			        SendClientMessage(i, COLOR_WHITE, "Alors vous êtes nouveau ici ? Nous allons vous montrer certains endroits et de vous donner quelques conseils.");
			        SendClientMessage(i, COLOR_WHITE, "Si vous ne savez pas comment jouer RP, lisez les règles en allant sur le forum : http://u2c-rp.forum-pro.fr");
			        SetPlayerCameraPos(i, 2247.0215,-1655.0173,17.2856);
					SetPlayerCameraLookAt(i, 2244.6536,-1663.9304,15.4766);
					SetPlayerInterior(i, 0);
					SetPlayerVirtualWorld(i, 0);
					TogglePlayerControllable(i, 0);
					SetPlayerPos(i, 2256.3555,-1646.6377,15.4959);
					SendClientMessage(i, COLOR_WHITE, " ");
                    SendClientMessage(i, COLOR_YELLOW, "                                             .:: MAGASIN DE VETEMENTS ::.");
                    SendClientMessage(i, COLOR_WHITE, "");
                    SendClientMessage(i, COLOR_YELLOW2, "Tout d'abord, vous aurez besoin de nouveaux vêtements, vous pouvez les acheter à n'importe quel magasin de vêtements.");
                    SendClientMessage(i, COLOR_YELLOW2, "Quand vous êtes dans le magasin tappez 'suivant' jusqu'a ce que vous trouviez une tenue qui vous convient.");
			    }
			    else if(TutTime[i] == 16)
			    {
			        ClearChatbox(i, 10);
			        SetPlayerPos(i, 2089.6624,-1901.7891,13.5469);
			        SetPlayerCameraPos(i, 2070.8093,-1914.6747,18.5469);
					SetPlayerCameraLookAt(i, 2055.2405,-1906.4608,13.5469);
					SetPlayerInterior(i, 0);
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_YELLOW, "                            .::  AUTO-ECOLE ::.");
					SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_YELLOW2, "Vous n'avez pas encore de permis de conduire ?");
					SendClientMessage(i, COLOR_YELLOW2, "Vous devez allez ici pour obtenir les permis, ils sont indispensables !");
					SendClientMessage(i, COLOR_YELLOW2, "Pour passer vos permis, utilisez /listepermis une fois dans l'auto-école.");
			    }
			    else if(TutTime[i] == 32)
			    {
			        ClearChatbox(i, 10);
			        SetPlayerPos(i, 1514.3059,-1667.8116,14.0469);
			        SetPlayerCameraPos(i, 1535.9584,-1676.1428,18.3828);
					SetPlayerCameraLookAt(i, 1553.7861,-1676.4270,16.1953);
					SetPlayerInterior(i, 0);
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_YELLOW, "                                      .::  Commissariat  ::.");
					SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_YELLOW2, "La police de Los Santos et le FBI sont présents dans la ville pour votre protéction.");
					SendClientMessage(i, COLOR_YELLOW2, "Les gens qui commettent des crimes seront traités rapidement et avec force si nécessaire.");
					SendClientMessage(i, COLOR_YELLOW2, "Pour appeler un agent de police, utilisez le numéro d'urgence /appeler 911.");
			    }
			    else if(TutTime[i] == 54)
			    {
			        ClearChatbox(i, 10);
			        SetPlayerPos(i, 1221.7010,-1328.6449,13.4821);
			        SetPlayerCameraPos(i, 1204.3781,-1313.3323,16.3984);
					SetPlayerCameraLookAt(i, 1174.7167,-1323.4485,14.5938);
					SetPlayerInterior(i, 0);
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_YELLOW, "                                  .:: HOPITAL  ::.");
					SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_YELLOW2, "Vous vous sentez mal ? Allez consulter les médecins de Los Santos");
					SendClientMessage(i, COLOR_YELLOW2, "Pour appeler un médecin, utilisez le numéro d'urgence /appeler 911");
					SendClientMessage(i, COLOR_YELLOW2, "Vous réaparaitrez ici après votre mort.");
			    }
			    else if(TutTime[i] == 76)
			    {
			        ClearChatbox(i, 10);
			        SetPlayerPos(i, 1786.1758,-1258.4976,13.6417);
			        SetPlayerCameraPos(i, 1779.4259,-1275.1025,15.6328);
					SetPlayerCameraLookAt(i, 1785.7263,-1296.0200,13.4213);
					SetPlayerInterior(i, 0);
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_WHITE, " ");
			        SendClientMessage(i, COLOR_YELLOW, "                                              .:: SAN NEWS STUDIO ::.");
			        SendClientMessage(i, COLOR_WHITE, " ");
			        SendClientMessage(i, COLOR_YELLOW2, "Vous avez une annonce à faire passer ? Allez à San News Studio et demandez aux journalistes de la faire.");
			        SendClientMessage(i, COLOR_YELLOW2, "Vous pouvez aussi afficher votre annonce à la presse locale.");
			    }
			    else if(TutTime[i] == 98)
			    {
			        ClearChatbox(i, 10);
			        SetPlayerPos(i, 1475.7020,-1050.9489,23.8246);
			        SetPlayerCameraPos(i, 1458.3872,-1042.2423,24.8281);
					SetPlayerCameraLookAt(i, 1458.5930,-1019.9205,24.5264);
					SetPlayerInterior(i, 0);
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_YELLOW, "                                 .:: BANQUE CENTRALE ::.");
					SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_YELLOW2, "Vous ne pourrez pas garder votre argent en cash, on risquerait de vous le voler.");
					SendClientMessage(i, COLOR_YELLOW2, "Vous pouvez déposer ou retirer votre argent à la banque. (/deposer /retirer)");
					SendClientMessage(i, COLOR_YELLOW2, "A chaque heure, votre paye sera déposée sur votre compte banquaire.");
			    }
			    else if(TutTime[i] == 110)
			    {
			        ClearChatbox(i, 10);
			        SetPlayerInterior(i, 3);
			        SetPlayerPos(i, 330.6825,163.6688,1014.1875);
			        SetCameraBehindPlayer(i);
			        SetPlayerVirtualWorld(i, 0);
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_YELLOW, "                                             .:: FIN DU TUTORIAL ::.");
					SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_YELLOW2, "Il ya beaucoup de lieux à visiter a Los Santos, mais vous devez les découvrir par vous-même.");
					SendClientMessage(i, COLOR_YELLOW2, "N'oubliez pas les règles du RolePlay, parce que les actions NO-RP sont interdites et seront sanctionnées !");
			    }
			    else if(TutTime[i] == 119)
			    {
			        ClearChatbox(i, 10);
			        TogglePlayerControllable(i, 1);
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_WHITE, " ");
			        SendClientMessage(i, COLOR_YELLOW2, "                              Bienvenue sur Une 2eme Chance.");
			        SendClientMessage(i, COLOR_WHITE, "Aide: Pour appeler un taxi ou un bus faites /appeler 444 ou /appeler 222.");
			        SendClientMessage(i, COLOR_WHITE, "Aide: Pour changer vos vétements vous devez allez au magasin de vêtements.");
					SendClientMessage(i, COLOR_WHITE, "Aide: Si vous n'arrivez pas a vous repérer, allez acheter un GPS au 24/7.");
					SendClientMessage(i, COLOR_WHITE, "Utilisez les commandes /aiderp /powergame et /metagame si vous ne connaissez pas le RolePlay.");
			        TutTime[i] = 0; PlayerInfo[i][pTut] = 1;
					gOoc[i] = 0; gNews[i] = 0; gFam[i] = 0;
					TogglePlayerControllable(i, 1);
					SafeGivePlayerMoney(i, 2700);
					MedicBill[i] = 0;
					AfterTutorial[i] = 1;
					SetTimerEx("UnsetAfterTutorial", 2500, false, "i", i);
					SetTimerEx("UnsetFirstSpawn", 5000, false, "i", i);
					SetPlayerSpawn(i);
					RegistrationQuestion[i] = 0;
				    if(PlayerInfo[i][pSex] == 1) { SetPlayerSkin(i, 26); }
					else { SetPlayerSkin(i, 298); }
			        new message[256];
			     	GetPlayerName(i, message, sizeof(message));
			    	format(message, sizeof(message), "Une 2eme Chance acceuil un nouvel arrivant en ville : %s(%d)", message, i);
			     	ABroadCast(COLOR_YELLOW,message,1);
			    }
			}
			if(PlayerTazeTime[i] >= 1)
			{
			    PlayerTazeTime[i] += 1;
			    if(PlayerTazeTime[i] == 15)
			    {
                    PlayerTazeTime[i] = 0;
			    }
			    else
			    {
			        new Float:angle;
					GetPlayerFacingAngle(i, angle);
					SetPlayerFacingAngle(i, angle + 90);
			    }
			}
			if(PlayerDrunk[i] >= 5)
			{
			    PlayerDrunkTime[i] += 1;
			    if(PlayerDrunkTime[i] == 8)
			    {
			        PlayerDrunkTime[i] = 0;
			        new Float:angle;
					GetPlayerFacingAngle(i, angle);
					if(IsPlayerInAnyVehicle(i))
					{
					    if(GetPlayerState(i) == 2)
					    {
					    	//SetVehicleZAngle(GetPlayerVehicleID(i), angle + 25);
						}
					}
					else
					{
					    ApplyAnimation(i,"PED", "WALK_DRUNK",4.0,0,1,0,0,0);
					}
			    }
			}
			if(PlayerStoned[i] >= 2)
			{
		        PlayerStoned[i] += 0;
			    if(PlayerStoned[i] == 0)
			    {
			        PlayerStoned[i] = 2;
			        new Float:angle;
					GetPlayerFacingAngle(i, angle);
					if(IsPlayerInAnyVehicle(i))
					{
					    if(GetPlayerState(i) == 2)
					    {
					    	SetVehicleZAngle(GetPlayerVehicleID(i), angle + 0);
						}
					}
					else
					{
					    SetPlayerFacingAngle(i, angle + 0);
					}
			    }
			}
			if(PlayerInfo[i][pCarTime] > 0)
			{
			    if(PlayerInfo[i][pCarTime] <= 0)
			    {
			        PlayerInfo[i][pCarTime] = 0;
			    }
			    else
			    {
			        PlayerInfo[i][pCarTime] -= 1;
			    }
			}
			if(BoxWaitTime[i] > 0)
			{
			    if(BoxWaitTime[i] >= BoxDelay)
				{
				    BoxDelay = 0;
					BoxWaitTime[i] = 0;
					PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
					GameTextForPlayer(i, "~g~Le Matche Demarre", 5000, 1);
					TogglePlayerControllable(i, 1);
					RoundStarted = 1;
				}
			    else
				{
				    format(string, sizeof(string), "%d", BoxDelay - BoxWaitTime[i]);
					GameTextForPlayer(i, string, 1500, 6);
					BoxWaitTime[i] += 1;
				}
			}
			if(RoundStarted > 0)
			{
			    if(PlayerBoxing[i] > 0)
			    {
			        new trigger = 0;
			        new Lost = 0;
		        	new Float:angle;
		            new Float:health;
					GetPlayerHealth(i, health);
		            if(health < 12)
					{
					    if(i == Boxer1) { Lost = 1; trigger = 1; }
			            else if(i == Boxer2) { Lost = 2; trigger = 1; }
					}
			        if(health < 28) { GetPlayerFacingAngle(i, angle); SetPlayerFacingAngle(i, angle + 85); }
			        if(trigger)
			        {
			            new winner[MAX_PLAYER_NAME];
			            new loser[MAX_PLAYER_NAME];
			            new titel[MAX_PLAYER_NAME];
			            if(Lost == 1)
			            {
			                if(IsPlayerConnected(Boxer1) && IsPlayerConnected(Boxer2))
			                {
					        	SetPlayerPos(Boxer1, 765.8433,3.2924,1000.7186); SetPlayerPos(Boxer2, 765.8433,3.2924,1000.7186);
					        	SetPlayerInterior(Boxer1, 5); SetPlayerInterior(Boxer2, 5);
					        	PlayerInfo[Boxer1][pInt] = 5; PlayerInfo[Boxer2][pInt] = 5;
			                	GetPlayerName(Boxer1, loser, sizeof(loser));
			                	GetPlayerName(Boxer2, winner, sizeof(winner));
		                		if(PlayerInfo[Boxer1][pJob] == 12) { PlayerInfo[Boxer1][pLoses] += 1; }
								if(PlayerInfo[Boxer2][pJob] == 12) { PlayerInfo[Boxer2][pWins] += 1; }
			                	if(TBoxer < 255)
			                	{
			                	    if(IsPlayerConnected(TBoxer))
			                	    {
				                	    if(TBoxer != Boxer2)
				                	    {
				                	        if(PlayerInfo[Boxer2][pJob] == 12)
				                	        {
				                	            TBoxer = Boxer2;
				                	            GetPlayerName(TBoxer, titel, sizeof(titel));
					                	        new nstring[MAX_PLAYER_NAME];
												format(nstring, sizeof(nstring), "%s", titel);
												strmid(Titel[TitelName], nstring, 0, strlen(nstring), 255);
					                	        Titel[TitelWins] = PlayerInfo[TBoxer][pWins];
					                	        Titel[TitelLoses] = PlayerInfo[TBoxer][pLoses];
					                	        SaveBoxer();
							                	format(string, sizeof(string), "Arbitre: %s à gagné le matche contre le champion %s et est le nouveau Champion de Boxe.",  titel, loser);
												OOCOff(COLOR_WHITE,string);
				                	        }
				                	        else
				                	        {
				                	            SendClientMessage(Boxer2, COLOR_WHITE, " Vous seriez le nouveau champion de boxe si vous étiez professionel !");
				                	        }
										}
										else
										{
										    GetPlayerName(TBoxer, titel, sizeof(titel));
										    format(string, sizeof(string), "Arbitre: Le Champion de Boxe %s a gagné le matche contre %s.",  titel, loser);
											OOCOff(COLOR_WHITE,string);
											Titel[TitelWins] = PlayerInfo[TBoxer][pWins];
				                	        Titel[TitelLoses] = PlayerInfo[Boxer2][pLoses];
				                	        SaveBoxer();
										}
									}
								}//TBoxer
								format(string, sizeof(string), " Vous avez perdu le matche contre %s.", winner);
								SendClientMessage(Boxer1, COLOR_WHITE, string);
								GameTextForPlayer(Boxer1, "~r~Vous avez perdu", 3500, 1);
								format(string, sizeof(string), " Vous avez gagné le matche contre %s.", loser);
								SendClientMessage(Boxer2, COLOR_WHITE, string);
								GameTextForPlayer(Boxer2, "~r~Vous avez gagne", 3500, 1);
								if(GetPlayerHealth(Boxer1, health) < 20)
								{
								    SendClientMessage(Boxer1, COLOR_WHITE, " Le matche vous a fatigué, allez manger quelquepart.");
								    SetPlayerHealth(Boxer1, 30.0);
								}
								else
								{
								    SendClientMessage(Boxer1, COLOR_WHITE, " Vous vous sentez tres bien, même après le matche.");
								    SetPlayerHealth(Boxer1, 50.0);
								}
								if(GetPlayerHealth(Boxer2, health) < 20)
								{
								    SendClientMessage(Boxer2, COLOR_WHITE, " Le matche vous a fatigué, allez manger quelquepart.");
							    	SetPlayerHealth(Boxer2, 30.0);
								}
								else
								{
								    SendClientMessage(Boxer2, COLOR_WHITE, " Vous vous sentez tres bien, même après le matche.");
								    SetPlayerHealth(Boxer2, 50.0);
								}
                                GameTextForPlayer(Boxer1, "~g~Matche Terminer", 5000, 1); GameTextForPlayer(Boxer2, "~g~Matche Terminer", 5000, 1);
								if(PlayerInfo[Boxer2][pJob] == 12) { PlayerInfo[Boxer2][pBoxSkill] += 1; }
								PlayerBoxing[Boxer1] = 0;
								PlayerBoxing[Boxer2] = 0;
							}
			            }
			            else if(Lost == 2)
			            {
			                if(IsPlayerConnected(Boxer1) && IsPlayerConnected(Boxer2))
			                {
					        	SetPlayerPos(Boxer1, 765.8433,3.2924,1000.7186); SetPlayerPos(Boxer2, 765.8433,3.2924,1000.7186);
					        	SetPlayerInterior(Boxer1, 5); SetPlayerInterior(Boxer2, 5);
					        	PlayerInfo[Boxer1][pInt] = 5; PlayerInfo[Boxer2][pInt] = 5;
			                	GetPlayerName(Boxer1, winner, sizeof(winner));
			                	GetPlayerName(Boxer2, loser, sizeof(loser));
		                		if(PlayerInfo[Boxer2][pJob] == 12) { PlayerInfo[Boxer2][pLoses] += 1; }
								if(PlayerInfo[Boxer1][pJob] == 12) { PlayerInfo[Boxer1][pWins] += 1; }
			                	if(TBoxer < 255)
			                	{
			                	    if(IsPlayerConnected(TBoxer))
			                	    {
				                	    if(TBoxer != Boxer1)
				                	    {
				                	        if(PlayerInfo[Boxer1][pJob] == 12)
				                	        {
					                	        TBoxer = Boxer1;
					                	        GetPlayerName(TBoxer, titel, sizeof(titel));
					                	        new nstring[MAX_PLAYER_NAME];
												format(nstring, sizeof(nstring), "%s", titel);
												strmid(Titel[TitelName], nstring, 0, strlen(nstring), 255);
					                	        Titel[TitelWins] = PlayerInfo[TBoxer][pWins];
					                	        Titel[TitelLoses] = PlayerInfo[TBoxer][pLoses];
					                	        SaveBoxer();
							                	format(string, sizeof(string), "Arbitre: %s à gagné le matche contre le champion %s et est le nouveau Champion de Boxe.",  titel, loser);
												OOCOff(COLOR_WHITE,string);
											}
				                	        else
				                	        {
				                	            SendClientMessage(Boxer1, COLOR_WHITE, " Vous seriez le nouveau champion de boxe si vous étiez professionel !");
				                	        }
										}
										else
										{
										    GetPlayerName(TBoxer, titel, sizeof(titel));
										    format(string, sizeof(string), "Arbitre: Le Champion de Boxe %s a gagné le matche contre %s.",  titel, loser);
											OOCOff(COLOR_WHITE,string);
											Titel[TitelWins] = PlayerInfo[TBoxer][pWins];
				                	        Titel[TitelLoses] = PlayerInfo[Boxer1][pLoses];
				                	        SaveBoxer();
										}
									}
								}//TBoxer
								format(string, sizeof(string), " Vous avez perdu le matche contre %s.", winner);
								SendClientMessage(Boxer2, COLOR_WHITE, string);
								GameTextForPlayer(Boxer2, "~r~Vous avez perdu", 3500, 1);
								format(string, sizeof(string), " Vous avez gagné le matche contre %s.", loser);
								SendClientMessage(Boxer1, COLOR_WHITE, string);
								GameTextForPlayer(Boxer1, "~g~Vous avez gagne", 3500, 1);
								if(GetPlayerHealth(Boxer1, health) < 20)
								{
								    SendClientMessage(Boxer1, COLOR_WHITE, " Le matche vous a fatigué, allez manger quelquepart.");
								    SetPlayerHealth(Boxer1, 30.0);
								}
								else
								{
								    SendClientMessage(Boxer1, COLOR_WHITE, " Vous vous sentez tres bien, même après le matche.");
								    SetPlayerHealth(Boxer1, 50.0);
								}
								if(GetPlayerHealth(Boxer2, health) < 20)
								{
								    SendClientMessage(Boxer2, COLOR_WHITE, " Le matche vous a fatigué, allez manger quelquepart.");
							    	SetPlayerHealth(Boxer2, 30.0);
								}
								else
								{
								    SendClientMessage(Boxer2, COLOR_WHITE, " Vous vous sentez tres bien, même après le matche.");
								    SetPlayerHealth(Boxer2, 50.0);
								}
                                GameTextForPlayer(Boxer1, "~g~Matche Terminer", 5000, 1); GameTextForPlayer(Boxer2, "~g~Matche Terminer", 5000, 1);
								if(PlayerInfo[Boxer1][pJob] == 12) { PlayerInfo[Boxer1][pBoxSkill] += 1; }
								PlayerBoxing[Boxer1] = 0;
								PlayerBoxing[Boxer2] = 0;
							}
			            }
			            InRing = 0;
			            RoundStarted = 0;
			            Boxer1 = 255;
			            Boxer2 = 255;
			            TBoxer = 255;
			            trigger = 0;
			        }
			    }
			}
			if(StartingPaintballRound == 1 && AnnouncedPaintballRound == 0)
			{
			    AnnouncedPaintballRound = 1;
			    if(PlayerPaintballing[i] != 0)
			    {
			        SendClientMessage(i, COLOR_YELLOW, "On annoncera le Match de Paintball dans 15 secondes (Pour avoir plus de Joueur).");
			    }
			}
			if(StartingKartRound == 1 && AnnouncedKartRound == 0)
			{
			    AnnouncedKartRound = 1;
			    if(PlayerKarting[i] != 0 && PlayerInKart[i] != 0)
			    {
			        SendClientMessage(i, COLOR_YELLOW, "On annoncera la Course Kart dans 15 secondes (Pour avoir plus de Joueur).");
			    }
			}
			if(EndingKartRound == 1)
			{
			    if(PlayerKarting[i] != 0 && PlayerInKart[i] != 0)
			    {
			        DisablePlayerCheckpoint(i);
			        CP[i] = 0;
			    }
			}
			if(FindTime[i] > 0)
			{
			    if(FindTime[i] == FindTimePoints[i]) { FindTime[i] = 0; FindTimePoints[i] = 0; DisablePlayerCheckpoint(i); PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0); GameTextForPlayer(i, "~r~RedMarker gone", 2500, 1); }
			    else
				{
				    format(string, sizeof(string), "%d", FindTimePoints[i] - FindTime[i]);
					GameTextForPlayer(i, string, 1500, 6);
					FindTime[i] += 1;
				}
			}
			if(TaxiCallTime[i] > 0)
			{
			    if(TaxiAccepted[i] < 999)
			    {
				    if(IsPlayerConnected(TaxiAccepted[i]))
				    {
				        new Float:X,Float:Y,Float:Z;
						GetPlayerPos(TaxiAccepted[i], X, Y, Z);
						SetPlayerCheckpoint(i, X, Y, Z, 5);
				    }
				}
			}
			if(BusCallTime[i] > 0)
			{
			    if(BusAccepted[i] < 999)
			    {
				    if(IsPlayerConnected(BusAccepted[i]))
				    {
				        new Float:X,Float:Y,Float:Z;
						GetPlayerPos(BusAccepted[i], X, Y, Z);
						SetPlayerCheckpoint(i, X, Y, Z, 5);
				    }
				}
			}
			if(MedicCallTime[i] > 0)
			{
			    if(MedicCallTime[i] == 90) { MedicCallTime[i] = 0; DisablePlayerCheckpoint(i); PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0); GameTextForPlayer(i, "~r~RedMarker gone", 2500, 1); }
			    else
				{
				    format(string, sizeof(string), "%d", 90 - MedicCallTime[i]);
					GameTextForPlayer(i, string, 1500, 6);
					MedicCallTime[i] += 1;
				}
			}
			if(MechanicCallTime[i] > 0)
			{
			    if(MechanicCallTime[i] == 30) { MechanicCallTime[i] = 0; DisablePlayerCheckpoint(i); PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0); GameTextForPlayer(i, "~r~RedMarker gone", 2500, 1); }
			    else
				{
				    format(string, sizeof(string), "%d", 30 - MechanicCallTime[i]);
					GameTextForPlayer(i, string, 1500, 6);
					MechanicCallTime[i] += 1;
				}
			}
			if(PizzaCallTime[i] > 0)
   			{
       			if(PizzaCallTime[i] == 90) { PizzaCallTime[i] = 0; DisablePlayerCheckpoint(i); PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0); GameTextForPlayer(i, "~r~RedMarker gone", 2500, 1); }
       			else
    			{
        			format(string, sizeof(string), "%d", 90 - PizzaCallTime[i]);
     				GameTextForPlayer(i, string, 1500, 6);
     				PizzaCallTime[i] += 1;
    			}
   			}
			if(Robbed[i] == 1)
			{
			    if(RobbedTime[i] <= 0)
			    {
			        RobbedTime[i] = 0;
					Robbed[i] = 0;
			    }
			    else
			    {
			        RobbedTime[i] -= 1;
			    }
			}
			if(PlayerCuffed[i] == 1)
			{
			    if(PlayerCuffedTime[i] <= 0)
			    {
			        TogglePlayerControllable(i, 1);
			        PlayerCuffed[i] = 0;
			        PlayerCuffedTime[i] = 0;
			        PlayerTazeTime[i] = 1;
			    }
			    else
			    {
			        PlayerCuffedTime[i] -= 1;
			    }
			}
			if(PlayerCuffed[i] == 2)
			{
			    if(PlayerCuffedTime[i] <= 0)
			    {
			        GameTextForPlayer(i, "~r~Vous avez casse les menottes, vous etes libre!", 2500, 3);
			        TogglePlayerControllable(i, 1);
			        PlayerCuffed[i] = 0;
			        PlayerCuffedTime[i] = 0;
			    }
			    else
			    {
			        PlayerCuffedTime[i] -= 1;
			    }
			}
			if(IsSmoking[i] > 0)
			{
			    if(IsSmoking[i] == 1)
			    {
			        new sendername[MAX_PLAYER_NAME];
			        GetPlayerName(i, sendername, sizeof(sendername));
			        UnderscoreToSpace( sendername );
				    if(PlayerInfo[i][pSex] == 1) { format(string, sizeof(string), " %s à fini sa cigarette.", sendername); }
					else { format(string, sizeof(string), " %s à finie sa cigarette.", sendername); }
				    ProxDetector(30.0, i, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				    new Float:PlayerHealth;
				    GetPlayerHealth(i, PlayerHealth);
				    SetPlayerHealth(i, PlayerHealth+7);
				    if(UsingSmokeAnim[i] == 1)
				    {
				        UsingSmokeAnim[i] = 0;
				        ClearAnimations(i);
				    }
			    }
			    if(IsSmoking[i] == 51)
			    {
			        new sendername[MAX_PLAYER_NAME];
			        GetPlayerName(i, sendername, sizeof(sendername));
			        UnderscoreToSpace( sendername );
			        if(PlayerInfo[i][pSex] == 1) { format(string, sizeof(string), " %s jette les cendres de sa cigarette a terre.", sendername); }
					else { format(string, sizeof(string), " %s jette les cendres de sa cigarette a terre.", sendername); }
			        ProxDetector(30.0, i, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			        new Float:PlayerHealth;
			        GetPlayerHealth(i, PlayerHealth);
				    SetPlayerHealth(i, PlayerHealth+7);
			    }
			    if(IsSmoking[i] == 31)
			    {
			        new sendername[MAX_PLAYER_NAME];
			        GetPlayerName(i, sendername, sizeof(sendername));
			        UnderscoreToSpace( sendername );
			        if(PlayerInfo[i][pSex] == 1) { format(string, sizeof(string), " %s jette les cendres de sa cigarette a terre.", sendername); }
					else { format(string, sizeof(string), " %s jette les cendres de sa cigarette a terre.", sendername); }
			        ProxDetector(30.0, i, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			        new Float:PlayerHealth;
			        GetPlayerHealth(i, PlayerHealth);
				    SetPlayerHealth(i, PlayerHealth+7);
			    }
			    if(IsSmoking[i] == 11)
			    {
			        new sendername[MAX_PLAYER_NAME];
			        GetPlayerName(i, sendername, sizeof(sendername));
			        UnderscoreToSpace( sendername );
			        if(PlayerInfo[i][pSex] == 1) { format(string, sizeof(string), " %s jette les cendres de sa cigarette a terre.", sendername); }
					else { format(string, sizeof(string), " %s jette les cendres de sa cigarette a terre.", sendername); }
			        ProxDetector(30.0, i, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			        new Float:PlayerHealth;
			        GetPlayerHealth(i, PlayerHealth);
				    SetPlayerHealth(i, PlayerHealth+7);
			    }
			    IsSmoking[i] -= 1;
			}
			/*if(PlayerToPoint(20, i,2015.4500,1017.0900,996.8750))
			{//Four Dragons
			    GameTextForPlayer(i, "~r~Fermer", 5000, 1);
			    SetPlayerInterior(i, 0);
			    PlayerInfo[i][pInt] = 0;
			    SetPlayerPos(i,1022.599975,-1123.699951,23.799999);
			}
			else if(PlayerToPoint(20, i,2233.9099,1710.7300,1011.2987))
			{//Caligula
			    GameTextForPlayer(i, "~r~Fermer", 5000, 1);
			    SetPlayerInterior(i, 0);
			    PlayerInfo[i][pInt] = 0;
			    SetPlayerPos(i,1022.599975,-1123.699951,23.799999);
			}
			else if(PlayerToPoint(10, i,2265.7900,1619.5800,1090.4453))
			{//Caligula Roof 1
			    GameTextForPlayer(i, "~r~Fermer", 5000, 1);
			    SetPlayerInterior(i, 0);
			    PlayerInfo[i][pInt] = 0;
			    SetPlayerPos(i,1022.599975,-1123.699951,23.799999);
			}
			else if(PlayerToPoint(10, i,2265.7800,1675.9301,1090.4453))
			{//Caligula Roof 2
			    GameTextForPlayer(i, "~r~Fermer", 5000, 1);
			    SetPlayerInterior(i, 0);
			    PlayerInfo[i][pInt] = 0;
			    SetPlayerPos(i,1022.599975,-1123.699951,23.799999);
			}
			else if(PlayerToPoint(20, i,1133.0699,-9.5731,1000.6797))
			{//West Casino place
			    GameTextForPlayer(i, "~r~Fermer", 5000, 1);
			    SetPlayerInterior(i, 0);
			    PlayerInfo[i][pInt] = 0;
			    SetPlayerPos(i,1022.599975,-1123.699951,23.799999);
			}
			else if(PlayerToPoint(20, i,292.0274,-36.0291,1001.5156))
			{//Ammunation 1
			    GameTextForPlayer(i, "~r~Vous etes en prison car vous etes entrer dans l'amunation", 5000, 1);
			    SetPlayerInterior(i, 6);
			    PlayerInfo[i][pInt] = 6;
				SetPlayerPos(i,264.6288,77.5742,1001.0391);
				PlayerInfo[i][pJailTime] = 300;
				PlayerInfo[i][pJailed] = 1;
			}
			else if(PlayerToPoint(20, i,308.2740,-141.2833,999.6016))
			{//Ammunation 2
			    GameTextForPlayer(i, "~r~Vous etes en prison car vous etes entrer dans l'amunation", 5000, 1);
			    SetPlayerInterior(i, 6);
			    PlayerInfo[i][pInt] = 6;
				SetPlayerPos(i,264.6288,77.5742,1001.0391);
				PlayerInfo[i][pJailTime] = 300;
				PlayerInfo[i][pJailed] = 1;
			}
			else if(PlayerToPoint(20, i,294.3212,-108.7869,1001.5156))
			{//Ammunation 3 (small one's)
			    GameTextForPlayer(i, "~r~Vous etes en prison car vous etes entrer dans l'amunation", 5000, 1);
			    SetPlayerInterior(i, 6);
			    PlayerInfo[i][pInt] = 6;
				SetPlayerPos(i,264.6288,77.5742,1001.0391);
				PlayerInfo[i][pJailTime] = 300;
				PlayerInfo[i][pJailed] = 1;
			}
			else if(PlayerToPoint(20, i,288.8592,-80.4535,1001.5156))
			{//Ammunation 4 (small one's)
			    GameTextForPlayer(i, "~r~Vous etes en prison car vous etes entrer dans l'amunation", 5000, 1);
			    SetPlayerInterior(i, 6);
			    PlayerInfo[i][pInt] = 6;
				SetPlayerPos(i,264.6288,77.5742,1001.0391);
				PlayerInfo[i][pJailTime] = 300;
				PlayerInfo[i][pJailed] = 1;
			}
			else if(PlayerToPoint(20, i,316.9583,-165.4707,999.6010))
			{//Ammunation 5 (Unprotected)
			    GameTextForPlayer(i, "~r~Vous etes en prison car vous etes entrer dans l'amunation", 5000, 1);
			    SetPlayerInterior(i, 6);
			    PlayerInfo[i][pInt] = 6;
				SetPlayerPos(i,264.6288,77.5742,1001.0391);
				PlayerInfo[i][pJailTime] = 300;
				PlayerInfo[i][pJailed] = 1;
			}*/
		}
	}
}

public CheckGas()
{
	new string[256];
	for(new i=0;i<MAX_PLAYERS;i++)
	{
    	if(IsPlayerConnected(i))
       	{
       	    if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
       	    {
	       		new vehicle = GetPlayerVehicleID(i);
	        	if(Gas[vehicle] >= 1)
		   		{
		   		    if(Gas[vehicle] <= 10)
				    {
			   			PlayerPlaySound(i, 1085, 0.0, 0.0, 0.0);
			   			if(gGas[i] == 0) {
			   				GameTextForPlayer(i,"~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~Vous serez bientot en pane d'essence",5000,3);
						}
				    }
		   		    if(gGas[i] == 1) {
		   		    if(IsAPlane(vehicle) || IsATrain(vehicle) || IsABoat(vehicle) || IsABike(vehicle) || IsAHarvest(vehicle) || IsADrugHarvest(vehicle) || IsASweeper(vehicle)|| IsAGarbageTruck(vehicle) || IsADozer(vehicle))
		   		    {
		      			format(string, sizeof(string), "~b~~n~~n~~n~~n~~n~~n~~n~~n~~n~Essence:~w~ N/A");
					}
					else
					{
                        format(string, sizeof(string), "~b~~n~~n~~n~~n~~n~~n~~n~~n~~n~Essence:~w~ %d%",Gas[vehicle]);
					}
		      		GameTextForPlayer(i,string,20500,3); }
					if(IsAPlane(vehicle) || IsATrain(vehicle) || IsABoat(vehicle) || IsABike(vehicle) || IsAHarvest(vehicle) || IsADrugHarvest(vehicle) || IsASweeper(vehicle)|| IsAGarbageTruck(vehicle) || IsADozer(vehicle) || engineOn[vehicle] == 0) { Gas[vehicle]++; }
	              	Gas[vehicle]--;
		   		}
	   			else
	           	{
	              	NoFuel[i] = 1;
	              	TogglePlayerControllable(i, 0);
		        	GameTextForPlayer(i,"~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~Plus d essence dans le vehicule",1500,3);
				}
			}
    	}
	}
	return 1;
}

public Fillup()
{
	for(new i=0; i<MAX_PLAYERS; i++)
   	{
	   	if(IsPlayerConnected(i))
	   	{
		    new VID;
		    new FillUp;
		    new string[256];
		    VID = GetPlayerVehicleID(i);
		    FillUp = GasMax - Gas[VID];
			if(Refueling[i] == 1)
			{
				if(PlayerInfo[i][pDonateRank] >= 1)
				{
					Gas[VID] += FillUp;
		            FillUp = FillUp * SBizzInfo[4][sbEntranceCost];
		            format(string,sizeof(string)," Le plein a été fait, pour: $%d.",FillUp);
	    			SendClientMessage(i,COLOR_WHITE,string);
	    			GameTextForPlayer(i, "~w~Gratuit pour les membres V.I.P !!!", 5000, 1);
					SBizzInfo[4][sbTill] += FillUp;
					ExtortionSBiz(4, FillUp);
					Refueling[i] = 0;
					TogglePlayerControllable(i, 1);
				}
		        if(IsACopCar(VID) || IsAnFbiCar(VID) || IsAnAmbulance(VID) || IsAnFiretruck(VID) || IsAnArmyCar(VID) || IsAGovernmentCar(VID) || IsAHspdCar(VID))
		        {
		            Gas[VID] += FillUp;
		            FillUp = FillUp * SBizzInfo[4][sbEntranceCost];
		            format(string,sizeof(string)," Le plein a été fait, pour: $%d.",FillUp);
	    			SendClientMessage(i,COLOR_WHITE,string);
	    			GameTextForPlayer(i, "~w~Le gouvernement a payer pour vous.", 5000, 1);
					SBizzInfo[4][sbTill] += FillUp;
					ExtortionSBiz(4, FillUp);
					Refueling[i] = 0;
					TogglePlayerControllable(i, 1);
		        }
		        else
		        {
					if(GetPlayerMoney(i) >= FillUp+4)
					{
						Gas[VID] += FillUp;
						FillUp = FillUp * SBizzInfo[4][sbEntranceCost];
				    	format(string,sizeof(string)," Le plein a été fait, pour: %d$",FillUp);
				    	SendClientMessage(i,COLOR_WHITE,string);
						SafeGivePlayerMoney(i, - FillUp);
						SBizzInfo[4][sbTill] += FillUp;
						ExtortionSBiz(4, FillUp);
						Refueling[i] = 0;
						TogglePlayerControllable(i, 1);
					}
			   		else
			   		{
			   	    	format(string,sizeof(string)," Vous n'avez pas assez d'argent pour faire le plein, cela coûte $%d pour remplir votre véhicule.",FillUp);
				    	SendClientMessage(i,COLOR_WHITE,string);
				    	TogglePlayerControllable(i, 1);
			   		}
				}
		 	}
		}
	}
	return 1;
}

public StoppedVehicle()
{
	new Float:x,Float:y,Float:z;
	new Float:distance,value;
	for(new i=0; i<MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(IsPlayerInAnyVehicle(i))
			{
				new VID;
				VID = GetPlayerVehicleID(i);
				GetPlayerPos(i, x, y, z);
				distance = floatsqroot(floatpower(floatabs(floatsub(x,SavePlayerPos[i][LastX])),2)+floatpower(floatabs(floatsub(y,SavePlayerPos[i][LastY])),2)+floatpower(floatabs(floatsub(z,SavePlayerPos[i][LastZ])),2));
				value = floatround(distance * 3600);
				if(UpdateSeconds > 1)
				{
					value = floatround(value / UpdateSeconds);
				}
				if(SpeedMode)
				{
	            }
				if(value == 0)
				{
					Gas[VID]++;
				}
				SavePlayerPos[i][LastX] = x;
				SavePlayerPos[i][LastY] = y;
				SavePlayerPos[i][LastZ] = z;
			}
		}
	}
	return 1;
}

public SetPlayerWeapons(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    SafeResetPlayerWeapons(playerid);
	    if(PlayerInfo[playerid][pJailed] < 1)
	    {
			if(gTeam[playerid] == 2 || IsACop(playerid))
			{
				SafeGivePlayerWeapon(playerid, 41, 500); //spray
				SafeGivePlayerWeapon(playerid, 24, 500); // Eagle
				if(OnDuty[playerid] == 1 || PlayerInfo[playerid][pMember] == 2)//Cops & FBI/ATF
				{
                        SafeGivePlayerWeapon(playerid, 3, 1);
					    SafeGivePlayerWeapon(playerid, 24, 99999);
					    SafeGivePlayerWeapon(playerid, 29, 99999);
					if(PlayerInfo[playerid][pChar] == 285)//SWAT
					{
                        SafeGivePlayerWeapon(playerid, 3, 1);
					    SafeGivePlayerWeapon(playerid, 24, 99999);
					    SafeGivePlayerWeapon(playerid, 29, 99999);
					}
					else if(PlayerInfo[playerid][pChar] == 287)//Army
					{
                        SafeGivePlayerWeapon(playerid, 3, 1);
					    SafeGivePlayerWeapon(playerid, 24, 99999);
					    SafeGivePlayerWeapon(playerid, 29, 99999);
					}
				}
				if(PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)//National Guard
				{
                        SafeGivePlayerWeapon(playerid, 3, 1);
					    SafeGivePlayerWeapon(playerid, 24, 99999);
					    SafeGivePlayerWeapon(playerid, 29, 99999);
				}
			}
			if(gTeam[playerid] >= 3)
			{
				SafeGivePlayerWeapon(playerid, 0, 0);
			}
			if(PlayerInfo[playerid][pDonateRank] > 0)
			{
				if (PlayerInfo[playerid][pGun1] > 0)
				{
					SafeGivePlayerWeapon(playerid, PlayerInfo[playerid][pGun1], PlayerInfo[playerid][pAmmo1]);
					PlayerInfo[playerid][pGun1] = 0; PlayerInfo[playerid][pAmmo1] = 0;
				}
				if (PlayerInfo[playerid][pGun2] > 0)
				{
					SafeGivePlayerWeapon(playerid, PlayerInfo[playerid][pGun2], PlayerInfo[playerid][pAmmo2]);
					PlayerInfo[playerid][pGun2] = 0; PlayerInfo[playerid][pAmmo2] = 0;
				}
				if (PlayerInfo[playerid][pGun3] > 0)
				{
					SafeGivePlayerWeapon(playerid, PlayerInfo[playerid][pGun3], PlayerInfo[playerid][pAmmo3]);
					PlayerInfo[playerid][pGun3] = 0; PlayerInfo[playerid][pAmmo3] = 0;
				}
				if (PlayerInfo[playerid][pGun4] > 0)
				{
					SafeGivePlayerWeapon(playerid, PlayerInfo[playerid][pGun4], PlayerInfo[playerid][pAmmo4]);
					PlayerInfo[playerid][pGun4] = 0; PlayerInfo[playerid][pAmmo4] = 0;
				}
			}
			else
			{
			    if (PlayerInfo[playerid][pGun1] > 0)
				{
					SafeGivePlayerWeapon(playerid, PlayerInfo[playerid][pGun1], PlayerInfo[playerid][pAmmo1]);
					PlayerInfo[playerid][pGun1] = 0; PlayerInfo[playerid][pAmmo1] = 0;
				}
				if (PlayerInfo[playerid][pGun2] > 0)
				{
					SafeGivePlayerWeapon(playerid, PlayerInfo[playerid][pGun2], PlayerInfo[playerid][pAmmo2]);
					PlayerInfo[playerid][pGun2] = 0; PlayerInfo[playerid][pAmmo2] = 0;
				}
			}
		}
	}
}

public PrintSBizInfo(playerid,targetid)
{
	if(IsPlayerConnected(playerid))
	{
		new coordsstring[256];
		SendClientMessage(playerid, COLOR_GREEN,"____________________________________________");
		format(coordsstring, sizeof(coordsstring),"** %s **",SBizzInfo[targetid][sbMessage]);
		SendClientMessage(playerid, COLOR_WHITE,coordsstring);
		format(coordsstring, sizeof(coordsstring), "Fermé: %d Entrée: $%d Caisse: $%d", SBizzInfo[targetid][sbLocked], SBizzInfo[targetid][sbEntranceCost], SBizzInfo[targetid][sbTill]);
		SendClientMessage(playerid, COLOR_GRAD1,coordsstring);
		format(coordsstring, sizeof(coordsstring), "Produits: %d/%d Extorqué Par: %s", SBizzInfo[targetid][sbProducts],SBizzInfo[targetid][sbMaxProducts],SBizzInfo[targetid][sbExtortion]);
		SendClientMessage(playerid, COLOR_GRAD2,coordsstring);
		SendClientMessage(playerid, COLOR_GREEN,"____________________________________________");
	}
}

public PrintBizInfo(playerid,targetid)
{
    if(IsPlayerConnected(playerid))
	{
		new coordsstring[256];
		SendClientMessage(playerid, COLOR_GREEN,"____________________________________________");
		format(coordsstring, sizeof(coordsstring),"** %s **",BizzInfo[targetid][bMessage]);
		SendClientMessage(playerid, COLOR_WHITE,coordsstring);
		format(coordsstring, sizeof(coordsstring), "Fermé: %d Entrée: $%d Caisse: $%d", BizzInfo[targetid][bLocked], BizzInfo[targetid][bEntranceCost], BizzInfo[targetid][bTill]);
		SendClientMessage(playerid, COLOR_GRAD1,coordsstring);
		format(coordsstring, sizeof(coordsstring), "Produits: %d/%d Extorqué Par: %s", BizzInfo[targetid][bProducts],BizzInfo[targetid][bMaxProducts],BizzInfo[targetid][bExtortion]);
		SendClientMessage(playerid, COLOR_GRAD2,coordsstring);
		SendClientMessage(playerid, COLOR_GREEN,"____________________________________________");
	}
}

public ShowStats(playerid,targetid)
{
    if(IsPlayerConnected(playerid)&&IsPlayerConnected(targetid))
	{
		new cash =  GetPlayerMoney(targetid);
		new atext[20];
		if(PlayerInfo[targetid][pSex] == 1) { atext = "Homme"; }
		else if(PlayerInfo[targetid][pSex] == 2) { atext = "Femme"; }
  		new otext[20];
		if(PlayerInfo[targetid][pOrigin] == 1) { otext = "USA"; }
		else if(PlayerInfo[targetid][pOrigin] == 2) { otext = "Europe"; }
		else if(PlayerInfo[targetid][pOrigin] == 3) { otext = "Asie"; }
		else if(PlayerInfo[targetid][pOrigin] == 4) { otext = "Afrique"; }
		new ttext[20];
		if(PlayerInfo[targetid][pMember] == 4 || PlayerInfo[targetid][pLeader] == 4) { ttext = "Medecin"; }
		else if(gTeam[targetid] == 3 || gTeam[targetid] == 4) { ttext = "Civil"; }
		else if(gTeam[targetid] == 0 || gTeam[targetid] == 0) { ttext = "Civil"; }
		else if(PlayerInfo[targetid][pMember] == 1 || PlayerInfo[targetid][pLeader] == 1) { ttext = "Officier de Police"; }
		else if(PlayerInfo[targetid][pMember] == 2 || PlayerInfo[targetid][pLeader] == 2) { ttext = "Agent du FBI"; }
		else if(PlayerInfo[targetid][pMember] == 3 || PlayerInfo[targetid][pLeader] == 3) { ttext = "Garde National"; }
		else if(PlayerInfo[targetid][pMember] == 4 || PlayerInfo[targetid][pLeader] == 4) { ttext = "Medecin"; }
		else if(PlayerInfo[targetid][pMember] == 5 || PlayerInfo[targetid][pLeader] == 5) { ttext = "Vagos"; }
		else if(PlayerInfo[targetid][pMember] == 6 || PlayerInfo[targetid][pLeader] == 6) { ttext = "Vercetti"; }
		else if(PlayerInfo[targetid][pMember] == 7 || PlayerInfo[targetid][pLeader] == 7) { ttext = "Gouvernement"; }
		else if(PlayerInfo[targetid][pMember] == 8 || PlayerInfo[targetid][pLeader] == 8) { ttext = "Hitman"; }
		else if(PlayerInfo[targetid][pMember] == 9 || PlayerInfo[targetid][pLeader] == 9) { ttext = "L.A News"; }
		//else if(PlayerInfo[targetid][pMember] == 10 || PlayerInfo[targetid][pLeader] == 10) { ttext = "Taxi"; }
		//else if(PlayerInfo[targetid][pMember] == 11 || PlayerInfo[targetid][pLeader] == 11) { ttext = "School Instructor"; }
		else if(PlayerInfo[targetid][pMember] == 14 || PlayerInfo[targetid][pLeader] == 14) { ttext = "Bikers"; }
		else if(PlayerInfo[targetid][pMember] == 15 || PlayerInfo[targetid][pLeader] == 15) { ttext = "Ballas"; }
		else if(PlayerInfo[targetid][pMember] == 16 || PlayerInfo[targetid][pLeader] == 16) { ttext = "Groove"; }
		else if(PlayerInfo[targetid][pMember] == 17 || PlayerInfo[targetid][pLeader] == 17) { ttext = "Corleone"; }
		else if(PlayerInfo[targetid][pMember] == 18 || PlayerInfo[targetid][pLeader] == 18) { ttext = "C.I.A"; }
		new dtext[20];
		if(STDPlayer[targetid] == 1) { dtext = "SIDA"; }
		else if(STDPlayer[targetid] == 2) { dtext = "Gonorrhée"; }
		else if(STDPlayer[targetid] == 3) { dtext = "Syphilis"; }
		else { dtext = "Aucune"; }
	    new ftext[30];
	    if(PlayerInfo[targetid][pMember] == 1 || PlayerInfo[targetid][pLeader] == 1)
		{ ftext = "Police de LA"; }
        else if(PlayerInfo[targetid][pMember] == 4 || PlayerInfo[targetid][pLeader] == 4)
		{ ftext = "Medecin"; }
  		else if(PlayerInfo[targetid][pMember] == 5 || PlayerInfo[targetid][pLeader] == 5)
		{ ftext = "Vagos"; }
		else if(PlayerInfo[targetid][pMember] == 6 || PlayerInfo[targetid][pLeader] == 6)
		{ ftext = "Vercetti"; }
		else if(PlayerInfo[targetid][pMember] == 7 || PlayerInfo[targetid][pLeader] == 7)
		{ ftext = "Gouvernement"; }
		else if(PlayerInfo[targetid][pMember] == 8 || PlayerInfo[targetid][pLeader] == 8)
		{ ftext = "Hitman"; }
		else if(PlayerInfo[targetid][pMember] == 9 || PlayerInfo[targetid][pLeader] == 9)
		{ ftext = "L.A News"; }
		else if(PlayerInfo[targetid][pMember] == 11 || PlayerInfo[targetid][pLeader] == 11)
		{ ftext = "Instructeur"; }
		else if(PlayerInfo[targetid][pMember] == 14 || PlayerInfo[targetid][pLeader] == 14)
		{ ftext = "Bikers"; }
		else if(PlayerInfo[targetid][pMember] == 15 || PlayerInfo[targetid][pLeader] == 15)
		{ ftext = "Ballas"; }
		else if(PlayerInfo[targetid][pMember] == 16 || PlayerInfo[targetid][pLeader] == 16)
		{ ftext = "Groove"; }
		else if(PlayerInfo[targetid][pMember] == 17 || PlayerInfo[targetid][pLeader] == 17)
		{ ftext = "Corleone"; }
		else if(PlayerInfo[targetid][pMember] == 18 || PlayerInfo[targetid][pLeader] == 18)
		{ ftext = "C.I.A"; }
		else
		{ ftext = "Aucune"; }
		new f2text[20];
	    if(PlayerInfo[targetid][pFMember] < 255) { f2text = FamilyInfo[PlayerInfo[targetid][pFMember]][FamilyName]; } // FamilyInfo[family][FamilyName]
		else { f2text = "Aucune"; }
	    new rftext[64];
	    if(gTeam[targetid] == 5 || PlayerInfo[targetid][pFMember] < 255)//The 2 Organisations
	    {
        	if(PlayerInfo[targetid][pRank] == 1) { rftext = "Piccioto(1)"; }
			else if(PlayerInfo[targetid][pRank] == 2) { rftext = "Soldier(2)"; }
			else if(PlayerInfo[targetid][pRank] == 3) { rftext = "Capo(3)"; }
			else if(PlayerInfo[targetid][pRank] == 4) { rftext = "Consiglière(4)"; }
			else if(PlayerInfo[targetid][pRank] == 5) { rftext = "Bras-Droit(5)"; }
  			else if(PlayerInfo[targetid][pRank] == 6) { rftext = "Godfather(6)"; }
			else { rftext = "Piccioto"; }
		}
		new rtext[64];
		if(PlayerInfo[targetid][pMember] == 1 || PlayerInfo[targetid][pLeader] == 1)//PD Ranks
		{
		    if(PlayerInfo[targetid][pRank] == 1) { rtext = "Cadet(1)"; }
			else if(PlayerInfo[targetid][pRank] == 2) { rtext = "Officier(2)"; }
			else if(PlayerInfo[targetid][pRank] == 3) { rtext = "Sergent(3)"; }
			else if(PlayerInfo[targetid][pRank] == 4) { rtext = "Lieutenant(4)"; }
			else if(PlayerInfo[targetid][pRank] == 5) { rtext = "Capitaine(5)"; }
	        else if(PlayerInfo[targetid][pRank] == 6) { rtext = "Shériff(6)"; }
			else { rtext = "Cadet"; }
		}
		else if(PlayerInfo[targetid][pMember] == 2 || PlayerInfo[targetid][pLeader] == 2)//FBI Ranks
		{
		    if(PlayerInfo[targetid][pRank] == 1) { rtext = "Stagière(1)"; }
			else if(PlayerInfo[targetid][pRank] == 2) { rtext = "Agent(2)"; }
			else if(PlayerInfo[targetid][pRank] == 3) { rtext = "Agent-Spécial(3)"; }
			else if(PlayerInfo[targetid][pRank] == 4) { rtext = "Chef-de Groupe(4)"; }
			else if(PlayerInfo[targetid][pRank] == 5) { rtext = "Sous-Chef(5)"; }
		    else if(PlayerInfo[targetid][pRank] == 6) { rtext = "Chef(6)"; }
			else { rtext = "Stagière"; }
		}
		else if(PlayerInfo[targetid][pMember] == 3 || PlayerInfo[targetid][pLeader] == 3)//Army Ranks
		{
		    if(PlayerInfo[targetid][pRank] == 1) { rtext = "Soldat(1)"; }
			else if(PlayerInfo[targetid][pRank] == 2) { rtext = "Sergent(2)"; }
			else if(PlayerInfo[targetid][pRank] == 3) { rtext = "Lieutenant(3)"; }
			else if(PlayerInfo[targetid][pRank] == 4) { rtext = "Capitaine(4)"; }
			else if(PlayerInfo[targetid][pRank] == 5) { rtext = "Colonel(5)"; }
		    else if(PlayerInfo[targetid][pRank] == 6) { rtext = "Général(6)"; }
			else { rtext = "Soldat"; }
		}
		else if(PlayerInfo[targetid][pMember] == 4 || PlayerInfo[targetid][pLeader] == 4)//MEDECIN
		{
		    if(PlayerInfo[targetid][pRank] == 1) { rtext = "Stagière(1)"; }
			else if(PlayerInfo[targetid][pRank] == 2) { rtext = "Interime(2)"; }
			else if(PlayerInfo[targetid][pRank] == 3) { rtext = "Secouriste(3)"; }
			else if(PlayerInfo[targetid][pRank] == 4) { rtext = "Infirmier(4)"; }
			else if(PlayerInfo[targetid][pRank] == 5) { rtext = "Medecin(5)"; }
		    else if(PlayerInfo[targetid][pRank] == 6) { rtext = "Chef(6)"; }
			else { rtext = "Stagière"; }
		}
		else if(PlayerInfo[targetid][pMember] == 5 || PlayerInfo[targetid][pLeader] == 5)//Vagos Ranks
		{
		    if(PlayerInfo[targetid][pRank] == 1) { rtext = "Voyou(1)"; }
			else if(PlayerInfo[targetid][pRank] == 2) { rtext = "Soldat(2)"; }
			else if(PlayerInfo[targetid][pRank] == 3) { rtext = "Gros Bras(3)"; }
			else if(PlayerInfo[targetid][pRank] == 4) { rtext = "Soldat(4)"; }
			else if(PlayerInfo[targetid][pRank] == 5) { rtext = "Gangsta(5)"; }
  			else if(PlayerInfo[targetid][pRank] == 6) { rtext = "Top Gangsta(6)"; }
			else { rtext = "Vouou"; }
		}
		else if(PlayerInfo[targetid][pMember] == 6 || PlayerInfo[targetid][pLeader] == 6)//La Famiglia Vercetti Ranks
		{
        	if(PlayerInfo[targetid][pRank] == 1) { rtext = "Piccioto(1)"; }
			else if(PlayerInfo[targetid][pRank] == 2) { rtext = "Soldier(2)"; }
			else if(PlayerInfo[targetid][pRank] == 3) { rtext = "Capo(3)"; }
			else if(PlayerInfo[targetid][pRank] == 4) { rtext = "Consiglière(4)"; }
			else if(PlayerInfo[targetid][pRank] == 5) { rtext = "Bras-Droit(5)"; }
  			else if(PlayerInfo[targetid][pRank] == 6) { rtext = "Godfather(6)"; }
			else { rtext = "Piccioto"; }
		}
		else if(PlayerInfo[targetid][pMember] == 6 || PlayerInfo[targetid][pLeader] == 8)//Hitman
		{
        	if(PlayerInfo[targetid][pRank] == 1) { rtext = "Apprenti(1)"; }
			else if(PlayerInfo[targetid][pRank] == 2) { rtext = "Serviteur(2)"; }
			else if(PlayerInfo[targetid][pRank] == 3) { rtext = "Tueur(3)"; }
			else if(PlayerInfo[targetid][pRank] == 4) { rtext = "Maitre Tueur(4)"; }
			else if(PlayerInfo[targetid][pRank] == 5) { rtext = "Bras-Droit(5)"; }
  			else if(PlayerInfo[targetid][pRank] == 6) { rtext = "Chef(6)"; }
			else { rtext = "Apprenti"; }
		}
		else if(PlayerInfo[targetid][pMember] == 7 || PlayerInfo[targetid][pLeader] == 7)//Mayor ranks
		{
		    if(PlayerInfo[targetid][pRank] == 1) { rtext = "Conducteur(1)"; }
		    else if(PlayerInfo[targetid][pRank] == 2) { rtext = "Garde du corp(2)"; }
		    else if(PlayerInfo[targetid][pRank] == 3) { rtext = "Chef de la sécurité(3)"; }
		    else if(PlayerInfo[targetid][pRank] == 4) { rtext = "Secretaire(4)"; }
		    else if(PlayerInfo[targetid][pRank] == 5) { rtext = "Maire Adjoint(5)"; }
		    else if(PlayerInfo[targetid][pRank] == 6) { rtext = "Maire(6)"; }
		    else { rtext = "Conducteur"; }
		}
		else if(PlayerInfo[targetid][pMember] == 9 || PlayerInfo[targetid][pLeader] == 9)//NR Ranks
		{
		    if(PlayerInfo[targetid][pRank] == 1) { rtext = "Interime(1)"; }
			else if(PlayerInfo[targetid][pRank] == 2) { rtext = "Journaliste(2)"; }
			else if(PlayerInfo[targetid][pRank] == 3) { rtext = "Chef de groupe"; }
			else if(PlayerInfo[targetid][pRank] == 4) { rtext = "Secretaire(4)"; }
			else if(PlayerInfo[targetid][pRank] == 5) { rtext = "Sous Chef(5)"; }
		    else if(PlayerInfo[targetid][pRank] == 6) { rtext = "Chef(6)"; }
			else { rtext = "Interime"; }
		}
		/*else if(PlayerInfo[targetid][pMember] == 10 || PlayerInfo[targetid][pLeader] == 10)//Taxi Company Ranks
		{
		    if(PlayerInfo[targetid][pRank] == 1) { rtext = "Trainee(1)"; }
			else if(PlayerInfo[targetid][pRank] == 2) { rtext = "Taxi Rookie(2)"; }
			else if(PlayerInfo[targetid][pRank] == 3) { rtext = "Cabbie(3)"; }
			else if(PlayerInfo[targetid][pRank] == 4) { rtext = "Dispatcher(4)"; }
			else if(PlayerInfo[targetid][pRank] == 5) { rtext = "Shift Supervisor(5)"; }
		    else if(PlayerInfo[targetid][pRank] == 6) { rtext = "Taxi Company Owner(6)"; }
			else { rtext = "Trainee"; }
		}*/
		/*else if(IsAnInstructor(targetid))//Driving/Flying School Ranks
		{
		    if(PlayerInfo[targetid][pRank] == 1) { rtext = "Trainee(1)"; }
			else if(PlayerInfo[targetid][pRank] == 2) { rtext = "Instructor(1)"; }
			else if(PlayerInfo[targetid][pRank] == 3) { rtext = "Senior Instructor(2)"; }
			else if(PlayerInfo[targetid][pRank] == 4) { rtext = "Manager(3)"; }
			else if(PlayerInfo[targetid][pRank] == 5) { rtext = "Under Boss"(4); }
		    else if(PlayerInfo[targetid][pRank] == 6) { rtext = "Boss(5)"; }
			else { rtext = "Trainee"; }
		}*/
		else if(PlayerInfo[targetid][pMember] == 14 || PlayerInfo[targetid][pLeader] == 14)//Bikers ranks
		{
		    if(PlayerInfo[targetid][pRank] == 1) { rtext = "Voyou(1)"; }
			else if(PlayerInfo[targetid][pRank] == 2) { rtext = "Apprenti(2)"; }
			else if(PlayerInfo[targetid][pRank] == 3) { rtext = "Motard(3)"; }
			else if(PlayerInfo[targetid][pRank] == 4) { rtext = "Biker(4)"; }
			else if(PlayerInfo[targetid][pRank] == 5) { rtext = "Top Rider(5)"; }
			else if(PlayerInfo[targetid][pRank] == 6) { rtext = "Hell's Rider(6)"; }
			else { rtext = "Voyou"; }
		}
		else if(PlayerInfo[targetid][pMember] == 15 || PlayerInfo[targetid][pLeader] == 15)//Ballas gang Ranks
		{
		    if(PlayerInfo[targetid][pRank] == 1) { rtext = "Voyou(1)"; }
			else if(PlayerInfo[targetid][pRank] == 2) { rtext = "Debrouillar(2)"; }
			else if(PlayerInfo[targetid][pRank] == 3) { rtext = "Gros Bras(3)"; }
			else if(PlayerInfo[targetid][pRank] == 4) { rtext = "Soldat(4)"; }
			else if(PlayerInfo[targetid][pRank] == 5) { rtext = "Gangsta(5)"; }
			else if(PlayerInfo[targetid][pRank] == 6) { rtext = "Top Gangsta(6)"; }
			else { rtext = "Voyou"; }
		}
		else if(PlayerInfo[targetid][pMember] == 16 || PlayerInfo[targetid][pLeader] == 16)//Groove Ranks
		{
		    if(PlayerInfo[targetid][pRank] == 1) { rtext = "Voyou(1)"; }
			else if(PlayerInfo[targetid][pRank] == 2) { rtext = "Debrouillar(2)"; }
			else if(PlayerInfo[targetid][pRank] == 3) { rtext = "Gros Bras(3)"; }
			else if(PlayerInfo[targetid][pRank] == 4) { rtext = "Soldat(4)"; }
			else if(PlayerInfo[targetid][pRank] == 5) { rtext = "Gangsta(5)"; }
			else if(PlayerInfo[targetid][pRank] == 6) { rtext = "Top Gangsta(6)"; }
			else { rtext = "Voyou"; }
		}
		else if(PlayerInfo[targetid][pMember] == 17 || PlayerInfo[targetid][pLeader] == 17)//La Famiglia Corleone Ranks
		{
        	if(PlayerInfo[targetid][pRank] == 1) { rtext = "Piccioto(1)"; }
			else if(PlayerInfo[targetid][pRank] == 2) { rtext = "Soldier(2)"; }
			else if(PlayerInfo[targetid][pRank] == 3) { rtext = "Capo(3)"; }
			else if(PlayerInfo[targetid][pRank] == 4) { rtext = "Consiglière(4)"; }
			else if(PlayerInfo[targetid][pRank] == 5) { rtext = "Bras-Droit(5)"; }
  			else if(PlayerInfo[targetid][pRank] == 6) { rtext = "Godfather(6)"; }
			else { rtext = "Piccioto"; }
		}
		else if(PlayerInfo[targetid][pMember] == 18 || PlayerInfo[targetid][pLeader] == 18)//C.I.A Ranks
		{
		    if(PlayerInfo[targetid][pRank] == 1) { rtext = "Stagière(1)"; }
			else if(PlayerInfo[targetid][pRank] == 2) { rtext = "Agent(2)"; }
			else if(PlayerInfo[targetid][pRank] == 3) { rtext = "Agent-Spécial(3)"; }
			else if(PlayerInfo[targetid][pRank] == 4) { rtext = "Chef-de Groupe(4)"; }
			else if(PlayerInfo[targetid][pRank] == 5) { rtext = "Sous-Chef(5)"; }
		    else if(PlayerInfo[targetid][pRank] == 6) { rtext = "Chef(6)"; }
			else { rtext = "Stagière"; }
		}
		else
		{
		    rtext = "Aucun";
		}
        new jtext[21];
        if(PlayerInfo[targetid][pJob] == 1) { jtext = "Detective"; }
        else if(PlayerInfo[targetid][pJob] == 2) { jtext = "Avocat"; }
        else if(PlayerInfo[targetid][pJob] == 3) { jtext = "Prostituée"; }
        else if(PlayerInfo[targetid][pJob] == 4) { jtext = "Dealer de Drogue"; }
        else if(PlayerInfo[targetid][pJob] == 5) { jtext = "Reportaire"; }
        else if(PlayerInfo[targetid][pJob] == 6) { jtext = "Serveur"; }
        else if(PlayerInfo[targetid][pJob] == 7) { jtext = "Mecanicien"; }
        else if(PlayerInfo[targetid][pJob] == 8) { jtext = "Garde du Corp"; }
        else if(PlayerInfo[targetid][pJob] == 9) { jtext = "Dealer d'Armes"; }
        else if(PlayerInfo[targetid][pJob] == 10) { jtext = "Voleur de voitures"; }
        else if(PlayerInfo[targetid][pJob] == 11) { jtext = "Job Desactiver"; }//cascadeur
		else if(PlayerInfo[targetid][pJob] == 12) { jtext = "Boxeur"; }
		else if(PlayerInfo[targetid][pJob] == 13) { jtext = "Chauffeur de Taxi"; }
        else if(PlayerInfo[targetid][pJob] == 14) { jtext = "Chauffeur de Bus"; }
        else if(PlayerInfo[targetid][pJob] == 15) { jtext = "Livreur de Journaux"; }
        else if(PlayerInfo[targetid][pJob] == 16) { jtext = "Cammioneur"; }
        else if(PlayerInfo[targetid][pJob] == 17) { jtext = "Livreur de Pizza"; }
        else if(PlayerInfo[targetid][pJob] == 18) { jtext = "Fermier"; }
        else if(PlayerInfo[targetid][pJob] == 19) { jtext = "Cultivateur Drogue"; }
        else if(PlayerInfo[targetid][pJob] == 20) { jtext = "Contrebandier Drogue"; }
        else if(PlayerInfo[targetid][pJob] == 21) { jtext = "Balayeur de Rue"; }
        else if(PlayerInfo[targetid][pJob] == 22) { jtext = "Contrebandier Armes"; }
        else if(PlayerInfo[targetid][pJob] == 23) { jtext = "Fabricant d'Armes"; }
        else if(PlayerInfo[targetid][pJob] == 24) { jtext = "Faussaire"; }
        else if(PlayerInfo[targetid][pJob] == 25) { jtext = "Eboueur"; }
        else if(PlayerInfo[targetid][pJob] == 26) { jtext = "Ouvrier"; }
        else if(PlayerInfo[targetid][pJob] == 27) { jtext = "Conducteur de Train"; }
        else if(PlayerInfo[targetid][pJob] == 28) { jtext = "Pilote de Ligne"; }
        else { jtext = "Aucun"; }
		new drank[20];
		if(PlayerInfo[targetid][pDonateRank] == 1) { drank = "Membre de Confiance"; }
		else if(PlayerInfo[targetid][pDonateRank] >= 2) { drank = "V.I.P"; }
		else { drank = "Aucun"; }

		new lang1text[20],lang2text[20];
		if(PlayerInfo[targetid][pLang1] == 1) { lang1text = "Japonais"; }
		else if(PlayerInfo[targetid][pLang1] == 2) { lang1text = "Espagnol"; }
		else if(PlayerInfo[targetid][pLang1] == 3) { lang1text = "Russe"; }
		else if(PlayerInfo[targetid][pLang1] == 4) { lang1text = "Arabe"; }
		else if(PlayerInfo[targetid][pLang1] == 5) { lang1text = "Italien"; }
		else if(PlayerInfo[targetid][pLang1] == 6) { lang1text = "Allemand"; }
		else if(PlayerInfo[targetid][pLang1] == 7) { lang1text = "Anglais"; }
		else if(PlayerInfo[targetid][pLang1] == 8) { lang1text = "Chinois"; }
		else {lang1text = "Aucune";}

		if(PlayerInfo[targetid][pLang2] == 1) { lang2text = "Japonais"; }
		else if(PlayerInfo[targetid][pLang2] == 2) { lang2text = "Spanish"; }
		else if(PlayerInfo[targetid][pLang2] == 3) { lang2text = "Russe"; }
		else if(PlayerInfo[targetid][pLang2] == 4) { lang2text = "Arabe"; }
		else if(PlayerInfo[targetid][pLang2] == 5) { lang2text = "Italien"; }
		else if(PlayerInfo[targetid][pLang2] == 6) { lang2text = "Allemand"; }
		else if(PlayerInfo[targetid][pLang2] == 7) { lang2text = "Anglais"; }
		else if(PlayerInfo[targetid][pLang2] == 7) { lang2text = "Chinois"; }
		else {lang2text = "Aucune";}

  /*new married[20];
		strmid(married, PlayerInfo[targetid][pMarriedTo], 0, strlen(PlayerInfo[targetid][pMarriedTo]), 255);*/
		new age = PlayerInfo[targetid][pAge];
		new pointpermis = PlayerInfo[targetid][pPointPermis];
		new ptime = PlayerInfo[targetid][pConnectTime];
		//new lotto = PlayerInfo[targetid][pLottoNr];
		//new deaths = PlayerInfo[targetid][pDeaths];
		//new fishes = PlayerInfo[targetid][pFishes];
		new bigfish = PlayerInfo[targetid][pBiggestFish];
		//new crimes = PlayerInfo[targetid][pCrimes];
		new arrests = PlayerInfo[targetid][pArrested];
		//new warrests = PlayerInfo[targetid][pWantedDeaths];
		new drugs = PlayerInfo[targetid][pDrugs];
		new mats = PlayerInfo[targetid][pMats];
		new faussmats = PlayerInfo[targetid][pMatsf];
		//new wanted = WantedLevel[targetid];
        new level = PlayerInfo[targetid][pLevel];
		new exp = PlayerInfo[targetid][pExp];
		//new kills = PlayerInfo[targetid][pKills];
		new pnumber = PlayerInfo[targetid][pPnumber];
		new account = PlayerInfo[targetid][pAccount];
		new nxtlevel = PlayerInfo[targetid][pLevel]+1;
		new expamount = nxtlevel*levelexp;
		//new costlevel = nxtlevel*levelcost;//10k for testing purposes
		new housekey = PlayerInfo[targetid][pPhousekey];
		new bizkey = PlayerInfo[targetid][pPbiskey];
		//new carkey = PlayerInfo[targetid][pPvehkey];
		//new carkey2 = PlayerInfo[targetid][pPvehkey2];
		//new carkey3 = PlayerInfo[targetid][pPvehkey3];
		//new carkey4 = PlayerInfo[targetid][pPvehkey4];
		new intir = PlayerInfo[targetid][pInt];
		new virworld = PlayerInfo[targetid][pVirWorld];
		new local = PlayerInfo[targetid][pLocal];
		//new Float:shealth = PlayerInfo[targetid][pSHealth];
		new Float:health;
		new name[MAX_PLAYER_NAME];
		GetPlayerName(targetid, name, sizeof(name));
		GetPlayerHealth(targetid,health);
		new Float:px,Float:py,Float:pz;
		GetPlayerPos(targetid, px, py, pz);
		new coordsstring[256];
		//new family = PlayerInfo[targetid][pFMember];
		new family;
		format(coordsstring, sizeof(coordsstring),"=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*[ %s ]*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=",name);
		SendClientMessage(playerid, COLOR_LIMEGREEN,coordsstring);
		format(coordsstring, sizeof(coordsstring), "Niveau:[%d] Sexe:[%s] Age:[%d] Cash:[$%d] Banque:[$%d] Tel:[%d] Respect:[%d/%d]", level,atext,age,cash,account,pnumber,exp,expamount);
		SendClientMessage(playerid, COLOR_GRAD1,coordsstring);
		format(coordsstring, sizeof(coordsstring), "FaussMats:[%d] Heures Jouées:[%d] Gros Poissons:[%d] Temps Arreté:[%d] Job:[%s]", faussmats, ptime,bigfish,arrests,jtext);
		SendClientMessage(playerid, COLOR_GRAD3,coordsstring);
		format(coordsstring, sizeof(coordsstring), "Drogues:[%d] Materiaux:[%d] Team:[%s] Organisation:[%s] Rang:[%s]",drugs,mats,ttext,ftext,rtext);
		SendClientMessage(playerid, COLOR_GRAD5,coordsstring);
		format(coordsstring, sizeof(coordsstring), "Langue 1:[Francais] Langue 2:[%s] Langue 3:[%s] Points Permis:[%d]",lang1text,lang2text,pointpermis);
		SendClientMessage(playerid, COLOR_GRAD5,coordsstring);
		format(coordsstring, sizeof(coordsstring), "RangDonateur:[%s] Talkie Walkie Fréquence:[%d] FNO:[%s] Rang FNO:[%d]", drank, PlayerInfo[targetid][pWTc], FamilyInfo[family][FamilyName], PlayerInfo[targetid][pRank]);
		SendClientMessage(playerid, COLOR_GRAD5,coordsstring);
		//format(coordsstring, sizeof(coordsstring), "FNO %d:%s | Rang FNO: %d:%s.",family,FamilyInfo[family][FamilyName],PlayerInfo[targetid][pRank],rftext);
		//SendClientMessage(playerid, COLOR_GRAD5,coordsstring);
		new carkey = PlayerInfo[playerid][pPcarkey];
	    new carkey2 = PlayerInfo[playerid][pPcarkey2];
	    new carkey3 = PlayerInfo[playerid][pPcarkey3];
        if (PlayerInfo[playerid][pPcarkey] != -1)
        {
	        format(coordsstring, sizeof(coordsstring), "1| VehModel:[%s] VehValue:[%d] VehColor1:[%d] VehColor2:[%d] VehLocked:[%d]", CarInfo[carkey][cDescription], CarInfo[carkey][cValue], CarInfo[carkey][cColorOne], CarInfo[carkey][cColorTwo], CarInfo[carkey][cLock]);
		    SendClientMessage(playerid, COLOR_GRAD5,coordsstring);
	    }
	    if (PlayerInfo[playerid][pPcarkey2] != -1)
	    {
		    format(coordsstring, sizeof(coordsstring), "2| VehModel:[%s] VehValue:[%d] VehColor1:[%d] VehColor2:[%d] VehLocked:[%d]", CarInfo[carkey2][cDescription], CarInfo[carkey2][cValue], CarInfo[carkey2][cColorOne], CarInfo[carkey2][cColorTwo], CarInfo[carkey2][cLock]);
            SendClientMessage(playerid, COLOR_GRAD5,coordsstring);
	    }
	  	if (PlayerInfo[playerid][pPcarkey3] != -1)
	   	{
		    format(coordsstring, sizeof(coordsstring), "3| VehModel:[%s] VehValue:[%d] VehColor1:[%d] VehColor2:[%d] VehLocked:[%d]", CarInfo[carkey3][cDescription], CarInfo[carkey3][cValue], CarInfo[carkey3][cColorOne], CarInfo[carkey3][cColorTwo], CarInfo[carkey3][cLock]);
		    SendClientMessage(playerid, COLOR_GRAD5,coordsstring);
	   	}
		if (PlayerInfo[playerid][pAdmin] >= 1)
		{
			format(coordsstring, sizeof(coordsstring), "Clef Maison:[%d] Clef Biz:[%d] Clef Location:[%d] Interior:[%d] Virtual World:[%d] Local:[%d]", housekey,bizkey,HireCar[targetid],intir,virworld,local);
			SendClientMessage(playerid, COLOR_GRAD6,coordsstring);
		}
		format(coordsstring, sizeof(coordsstring),"=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*[ %s ]*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=",name);
		SendClientMessage(playerid, COLOR_LIMEGREEN,coordsstring);
	}
}
//--------------------------------------------------------- 

public SetPlayerToTeamColor(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    SetPlayerColor(playerid,TEAM_HIT_COLOR); // white
	    /*if (PlayerInfo[playerid][pMember] == 5 || PlayerInfo[playerid][pLeader] == 5)
        SetPlayerColor(playerid,COLOR_DBLUE);*/
        if (PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)
        SetPlayerColor(playerid,COLOR_DBLUE);
        /*if (PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pLeader] == 4)
        SetPlayerColor(playerid,TEAM_JOB_COLOR);*/
        /*if (PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2)
        SetPlayerColor(playerid,cop_color);*/
        if (PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
        SetPlayerColor(playerid,COLOR_DBLUE);
        if (PlayerInfo[playerid][pAdmin] > 0)
        SetPlayerColor(playerid,COLOR_RED);
	}
}

//---------------------------------------------------------

public GameModeInitExitFunc()
{
	new string[128];
	format(string, sizeof(string), "Le serveur Redemarre...");
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			DisablePlayerCheckpoint(i);
			gPlayerCheckpointStatus[i] = CHECKPOINT_NONE;
			GameTextForPlayer(i, string, 4000, 5);
			SetPlayerCameraPos(i,1460.0, -1324.0, 287.2);
			SetPlayerCameraLookAt(i,1374.5, -1291.1, 239.0);
			OnPlayerUpdate(i);
			gPlayerLogged[i] = 0;
		}
	}
	SetTimer("GameModeExitFunc", 4000, 0);
	return 1;
}

public GameModeExitFunc()
{
   	ClearAllObjects();
   	RemoveCameras();
   	print("Radars / Objets ont été supprimé");
	KillTimer(synctimer);
	KillTimer(hackchecktimer);
	KillTimer(newmistimer);
	KillTimer(unjailtimer);
	KillTimer(othtimer);
	KillTimer(spdovoiture);
	KillTimer(cartimer);
	KillTimer(accountstimer);
	KillTimer(checkgastimer);
	KillTimer(idletimer);
	KillTimer(pickuptimer);
	KillTimer(productiontimer);
	KillTimer(spectatetimer);
	KillTimer(stoppedvehtimer);
	KillTimer(turftimer);
	KillTimer(checkcarhealthtimer);
	KillTimer(burgertimer);
	KillTimer(chickentimer);
	KillTimer(tracetimer);
	KillTimer(braquagetimer);
	KillTimer(lathune);
	KillTimer(timer);
	KillTimer(Canrobagaintimer);
	//KillTimer(updateplayerpos);
//-----------------------------
//------------------------------------------------
    DestroyMenu(MAdmin);
	DestroyMenu(MPMode);
	DestroyMenu(MPrize);
	DestroyMenu(MDyna);
	DestroyMenu(MBuild);
	DestroyMenu(MLaps);
	DestroyMenu(MRace);
	DestroyMenu(MRacemode);
	DestroyMenu(MFee);
	DestroyMenu(MCPsize);
	DestroyMenu(MDelay);
    DestroyMenu(Licenses);
	DestroyMenu(LegalJobs);
	DestroyMenu(LegalJobs2);
	DestroyMenu(IlegalJobs);
	DestroyMenu(Guide);
	SauvegardeVeh();
	#if defined USE_MENU

	    DestroyMenu(MenuJoueur);
	    DestroyMenu(MenuAdmin);

	#endif

	KillTimer(TimerSave);
	KillTimer(TimerVitesse);

	for(new i=0;i<MAX_PLAYERS;i++)
	{
		if(IsPlayerConnected(i) && PompeEssence[i] != 255)
		{
		    KillTimer(TimerEssence[i]);
		}
	}
	GameModeExit();
    return 1;
}

//------------------------------------------------------------------------------------------------------
public SaveMission(playerid,name[])
{
	if(IsPlayerConnected(playerid))
	{
	    new coordsstring[256];
	    new missionname[64];
		new var[128];
		new makername[MAX_PLAYER_NAME];
		GetPlayerName(playerid, makername, sizeof(makername));
		new rand = random(999);
		if(rand == 0) { rand = 1; }
		new number = rand;
		if(MissionInfo[mToggle] == 0 || MissionInfo[mToggle] == 1) { }
		else { MissionInfo[mToggle] = 1; }
		format(missionname, sizeof(missionname), "%s.mis",name);
		new File: hFile = fopen(missionname, io_write);
		format(var, 128, "Title=%s\n", MissionInfo[mTitle]);fwrite(hFile, var);
		format(var, 128, "Maker=%s\n", makername);fwrite(hFile, var);
		format(var, 128, "Text1=%s\n", MissionInfo[mText1]);fwrite(hFile, var);
		format(var, 128, "Text2=%s\n", MissionInfo[mText2]);fwrite(hFile, var);
		format(var, 128, "Text3=%s\n", MissionInfo[mText3]);fwrite(hFile, var);
		format(var, 128, "Text4=%s\n", MissionInfo[mText4]);fwrite(hFile, var);
		format(var, 128, "Text5=%s\n", MissionInfo[mText5]);fwrite(hFile, var);
		format(var, 128, "Text6=%s\n", MissionInfo[mText6]);fwrite(hFile, var);
		format(var, 128, "Text7=%s\n", MissionInfo[mText7]);fwrite(hFile, var);
		format(var, 128, "Text8=%s\n", MissionInfo[mText8]);fwrite(hFile, var);
		format(var, 128, "Text9=%s\n", MissionInfo[mText9]);fwrite(hFile, var);
		format(var, 128, "Text10=%s\n", MissionInfo[mText10]);fwrite(hFile, var);
		format(var, 128, "Text11=%s\n", MissionInfo[mText11]);fwrite(hFile, var);
		format(var, 128, "Text12=%s\n", MissionInfo[mText12]);fwrite(hFile, var);
		format(var, 128, "Text13=%s\n", MissionInfo[mText13]);fwrite(hFile, var);
		format(var, 128, "Text14=%s\n", MissionInfo[mText14]);fwrite(hFile, var);
		format(var, 128, "Text15=%s\n", MissionInfo[mText15]);fwrite(hFile, var);
		format(var, 128, "Text16=%s\n", MissionInfo[mText16]);fwrite(hFile, var);
		format(var, 128, "Text17=%s\n", MissionInfo[mText17]);fwrite(hFile, var);
		format(var, 128, "Text18=%s\n", MissionInfo[mText18]);fwrite(hFile, var);
		format(var, 128, "GText1=%s\n", MissionInfo[mGText1]);fwrite(hFile, var);
		format(var, 128, "GText2=%s\n", MissionInfo[mGText2]);fwrite(hFile, var);
		format(var, 128, "GText3=%s\n", MissionInfo[mGText3]);fwrite(hFile, var);
		format(var, 128, "GText4=%s\n", MissionInfo[mGText4]);fwrite(hFile, var);
		format(var, 128, "GText5=%s\n", MissionInfo[mGText5]);fwrite(hFile, var);
		format(var, 128, "GText6=%s\n", MissionInfo[mGText6]);fwrite(hFile, var);
		format(var, 128, "CP1X=%f\n", MissionInfo[mCP1][0]);fwrite(hFile, var);
		format(var, 128, "CP1Y=%f\n", MissionInfo[mCP1][1]);fwrite(hFile, var);
		format(var, 128, "CP1Z=%f\n", MissionInfo[mCP1][2]);fwrite(hFile, var);
		format(var, 128, "CP2X=%f\n", MissionInfo[mCP2][0]);fwrite(hFile, var);
		format(var, 128, "CP2Y=%f\n", MissionInfo[mCP2][1]);fwrite(hFile, var);
		format(var, 128, "CP2Z=%f\n", MissionInfo[mCP2][2]);fwrite(hFile, var);
		format(var, 128, "CP3X=%f\n", MissionInfo[mCP3][0]);fwrite(hFile, var);
		format(var, 128, "CP3Y=%f\n", MissionInfo[mCP3][1]);fwrite(hFile, var);
		format(var, 128, "CP3Z=%f\n", MissionInfo[mCP3][2]);fwrite(hFile, var);
		format(var, 128, "CP4X=%f\n", MissionInfo[mCP4][0]);fwrite(hFile, var);
		format(var, 128, "CP4Y=%f\n", MissionInfo[mCP4][1]);fwrite(hFile, var);
		format(var, 128, "CP4Z=%f\n", MissionInfo[mCP4][2]);fwrite(hFile, var);
		format(var, 128, "CP5X=%f\n", MissionInfo[mCP5][0]);fwrite(hFile, var);
		format(var, 128, "CP5Y=%f\n", MissionInfo[mCP5][1]);fwrite(hFile, var);
		format(var, 128, "CP5Z=%f\n", MissionInfo[mCP5][2]);fwrite(hFile, var);
		format(var, 128, "CP6X=%f\n", MissionInfo[mCP6][0]);fwrite(hFile, var);
		format(var, 128, "CP6Y=%f\n", MissionInfo[mCP6][1]);fwrite(hFile, var);
		format(var, 128, "CP6Z=%f\n", MissionInfo[mCP6][2]);fwrite(hFile, var);
		format(var, 128, "Number=%d\n", number);fwrite(hFile, var);
		format(var, 128, "Reward=%d\n", MissionInfo[mReward]);fwrite(hFile, var);
		format(var, 128, "Toggle=%d\n", MissionInfo[mToggle]);fwrite(hFile, var);
		fclose(hFile);
		format(coordsstring, sizeof(coordsstring), "%s Mission Sauvée.",name);
		SendClientMessage(playerid, COLOR_GREEN,coordsstring);
	}
	return 1;
}

public LoadMission(playerid,name[])
{
	if(IsPlayerConnected(playerid))
	{
		new strFromFile2[128];
		new missionname[64];
		format(missionname, sizeof(missionname), "%s.Ratée",name);
		new File: file = fopen(missionname, io_read);
		if (file)
		{
		    new key[ 256 ] , val[ 256 ];
		    new Data[ 256 ];
		    while ( fread( file , Data , sizeof( Data ) ) )
			{
				key = ini_GetKey( Data );
				if( strcmp( key , "Title" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kTitle], val, 0, strlen(val), 255); }
				if( strcmp( key , "Maker" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kMaker], val, 0, strlen(val), 255); }
				if( strcmp( key , "Text1" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kText1], val, 0, strlen(val), 255); }
				if( strcmp( key , "Text2" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kText2], val, 0, strlen(val), 255); }
				if( strcmp( key , "Text3" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kText3], val, 0, strlen(val), 255); }
				if( strcmp( key , "Text4" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kText4], val, 0, strlen(val), 255); }
				if( strcmp( key , "Text5" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kText5], val, 0, strlen(val), 255); }
				if( strcmp( key , "Text6" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kText6], val, 0, strlen(val), 255); }
				if( strcmp( key , "Text7" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kText7], val, 0, strlen(val), 255); }
				if( strcmp( key , "Text8" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kText8], val, 0, strlen(val), 255); }
				if( strcmp( key , "Text9" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kText9], val, 0, strlen(val), 255); }
				if( strcmp( key , "Text10" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kText10], val, 0, strlen(val), 255); }
				if( strcmp( key , "Text11" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kText11], val, 0, strlen(val), 255); }
				if( strcmp( key , "Text12" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kText12], val, 0, strlen(val), 255); }
				if( strcmp( key , "Text13" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kText13], val, 0, strlen(val), 255); }
				if( strcmp( key , "Text14" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kText14], val, 0, strlen(val), 255); }
				if( strcmp( key , "Text15" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kText15], val, 0, strlen(val), 255); }
				if( strcmp( key , "Text16" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kText16], val, 0, strlen(val), 255); }
				if( strcmp( key , "Text17" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kText17], val, 0, strlen(val), 255); }
				if( strcmp( key , "Text18" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kText18], val, 0, strlen(val), 255); }
				if( strcmp( key , "GText1" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kGText1], val, 0, strlen(val), 255); }
				if( strcmp( key , "GText2" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kGText2], val, 0, strlen(val), 255); }
				if( strcmp( key , "GText3" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kGText3], val, 0, strlen(val), 255); }
				if( strcmp( key , "GText4" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kGText4], val, 0, strlen(val), 255); }
				if( strcmp( key , "GText5" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kGText5], val, 0, strlen(val), 255); }
				if( strcmp( key , "GText6" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kGText6], val, 0, strlen(val), 255); }
				if( strcmp( key , "CP1X" , true ) == 0 ) { val = ini_GetValue( Data ); PlayMission[kCP1][0] = floatstr( val ); }
				if( strcmp( key , "CP1Y" , true ) == 0 ) { val = ini_GetValue( Data ); PlayMission[kCP1][1] = floatstr( val ); }
				if( strcmp( key , "CP1Z" , true ) == 0 ) { val = ini_GetValue( Data ); PlayMission[kCP1][2] = floatstr( val ); }
				if( strcmp( key , "CP2X" , true ) == 0 ) { val = ini_GetValue( Data ); PlayMission[kCP2][0] = floatstr( val ); }
				if( strcmp( key , "CP2Y" , true ) == 0 ) { val = ini_GetValue( Data ); PlayMission[kCP2][1] = floatstr( val ); }
				if( strcmp( key , "CP2Z" , true ) == 0 ) { val = ini_GetValue( Data ); PlayMission[kCP2][2] = floatstr( val ); }
				if( strcmp( key , "CP3X" , true ) == 0 ) { val = ini_GetValue( Data ); PlayMission[kCP3][0] = floatstr( val ); }
				if( strcmp( key , "CP3Y" , true ) == 0 ) { val = ini_GetValue( Data ); PlayMission[kCP3][1] = floatstr( val ); }
				if( strcmp( key , "CP3Z" , true ) == 0 ) { val = ini_GetValue( Data ); PlayMission[kCP3][2] = floatstr( val ); }
				if( strcmp( key , "CP4X" , true ) == 0 ) { val = ini_GetValue( Data ); PlayMission[kCP4][0] = floatstr( val ); }
				if( strcmp( key , "CP4Y" , true ) == 0 ) { val = ini_GetValue( Data ); PlayMission[kCP4][1] = floatstr( val ); }
				if( strcmp( key , "CP4Z" , true ) == 0 ) { val = ini_GetValue( Data ); PlayMission[kCP4][2] = floatstr( val ); }
				if( strcmp( key , "CP5X" , true ) == 0 ) { val = ini_GetValue( Data ); PlayMission[kCP5][0] = floatstr( val ); }
				if( strcmp( key , "CP5Y" , true ) == 0 ) { val = ini_GetValue( Data ); PlayMission[kCP5][1] = floatstr( val ); }
				if( strcmp( key , "CP5Z" , true ) == 0 ) { val = ini_GetValue( Data ); PlayMission[kCP5][2] = floatstr( val ); }
				if( strcmp( key , "CP6X" , true ) == 0 ) { val = ini_GetValue( Data ); PlayMission[kCP6][0] = floatstr( val ); }
				if( strcmp( key , "CP6Y" , true ) == 0 ) { val = ini_GetValue( Data ); PlayMission[kCP6][1] = floatstr( val ); }
				if( strcmp( key , "CP6Z" , true ) == 0 ) { val = ini_GetValue( Data ); PlayMission[kCP6][2] = floatstr( val ); }
				if( strcmp( key , "Number" , true ) == 0 ) { val = ini_GetValue( Data ); PlayMission[kNumber] = strval( val ); }
				if( strcmp( key , "Reward" , true ) == 0 ) { val = ini_GetValue( Data ); PlayMission[kReward] = strval( val ); }
				if( strcmp( key , "Toggle" , true ) == 0 ) { val = ini_GetValue( Data ); PlayMission[kToggle] = strval( val ); }
			}
			fclose(file);
			format(strFromFile2, sizeof(strFromFile2), "%s Mission Loaded.",name);
			SendClientMessage(playerid, COLOR_GREEN,strFromFile2);
			format(strFromFile2, sizeof(strFromFile2), "Mission Available: %s, By : %s | Reward: $%d",PlayMission[kTitle],PlayMission[kMaker],PlayMission[kReward]);
			SendClientMessageToAll(COLOR_GREEN, strFromFile2);
			MissionPlayable = PlayMission[kNumber];
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREEN,"Le fichier mission non trouvé.");
		}
	}
	return 1;
}

public LoadBoxer()
{
	new arrCoords[3][64];
	new strFromFile2[256];
	new File: file = fopen("boxer.ini", io_read);
	if (file)
	{
		fread(file, strFromFile2);
		split(strFromFile2, arrCoords, ',');
		Titel[TitelWins] = strval(arrCoords[0]);
		strmid(Titel[TitelName], arrCoords[1], 0, strlen(arrCoords[1]), 255);
		Titel[TitelLoses] = strval(arrCoords[2]);
		fclose(file);
	}
	return 1;
}

public SaveBoxer()
{
	new coordsstring[256];
	format(coordsstring, sizeof(coordsstring), "%d,%s,%d", Titel[TitelWins],Titel[TitelName],Titel[TitelLoses]);
	new File: file2 = fopen("boxer.ini", io_write);
	fwrite(file2, coordsstring);
	fclose(file2);
	return 1;
}

public LoadStuff()
{
	new arrCoords[4][64];
	new strFromFile2[256];
	new File: file = fopen("stuff.ini", io_read);
	if (file)
	{
		fread(file, strFromFile2);
		split(strFromFile2, arrCoords, ',');
		Jackpot = strval(arrCoords[0]);
		Tax = strval(arrCoords[1]);
		TaxValue = strval(arrCoords[2]);
		Security = strval(arrCoords[3]);
		fclose(file);
		if(Security == 0 || Security == 1)
		{
		}
		else
		{
		    GameModeExit();
		}
	}
	else
	{
	    GameModeExit();
	}
	return 1;
}

public SaveStuff()
{
	new coordsstring[256];
	format(coordsstring, sizeof(coordsstring), "%d,%d,%d,%d", Jackpot,Tax,TaxValue,Security);
	new File: file2 = fopen("stuff.ini", io_write);
	fwrite(file2, coordsstring);
	fclose(file2);
	return 1;
}

public LoadIRC()
{
	new arrCoords[5][64];
	new strFromFile2[256];
	new File: file = fopen("channels.cfg", io_read);
	if (file)
	{
		new idx;
		while (idx < sizeof(IRCInfo))
		{
			fread(file, strFromFile2);
			split(strFromFile2, arrCoords, '|');
			strmid(IRCInfo[idx][iAdmin], arrCoords[0], 0, strlen(arrCoords[0]), 255);
			strmid(IRCInfo[idx][iMOTD], arrCoords[1], 0, strlen(arrCoords[1]), 255);
			strmid(IRCInfo[idx][iPassword], arrCoords[2], 0, strlen(arrCoords[2]), 255);
			IRCInfo[idx][iNeedPass] = strval(arrCoords[3]);
			IRCInfo[idx][iLock] = strval(arrCoords[4]);
			printf("IRC:%d Admin:%s MOTD: %s Motdepasse: %s BesoindeMDP: %d Fermé: %d",idx,IRCInfo[idx][iAdmin],IRCInfo[idx][iMOTD],IRCInfo[idx][iPassword],IRCInfo[idx][iNeedPass],IRCInfo[idx][iLock]);
			idx++;
		}
		fclose(file);
	}
	return 1;
}

public SaveIRC()
{
	new idx;
	new File: file2;
	while (idx < sizeof(IRCInfo))
	{
		new coordsstring[256];
		format(coordsstring, sizeof(coordsstring), "%s|%s|%s|%d|%d\n",
		IRCInfo[idx][iAdmin],
		IRCInfo[idx][iMOTD],
		IRCInfo[idx][iPassword],
		IRCInfo[idx][iNeedPass],
		IRCInfo[idx][iLock]);
		if(idx == 0)
		{
			file2 = fopen("channels.cfg", io_write);
		}
		else
		{
			file2 = fopen("channels.cfg", io_append);
		}
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	return 1;
}

public LoadTurfs()
{
	new arrCoords[6][64];
	new strFromFile2[256];
	new File: file = fopen("turfs.cfg", io_read);
	if (file)
	{
		new idx;
		while (idx < sizeof(TurfInfo))
		{
			fread(file, strFromFile2);
			split(strFromFile2, arrCoords, '|');
			strmid(TurfInfo[idx][zOwner], arrCoords[0], 0, strlen(arrCoords[0]), 255);
			strmid(TurfInfo[idx][zColor], arrCoords[1], 0, strlen(arrCoords[1]), 255);
			TurfInfo[idx][zMinX] = floatstr(arrCoords[2]);
			TurfInfo[idx][zMinY] = floatstr(arrCoords[3]);
			TurfInfo[idx][zMaxX] = floatstr(arrCoords[4]);
			TurfInfo[idx][zMaxY] = floatstr(arrCoords[5]);
			//printf("Turf:%d Name: %s Owner:%s MinX:%f MinY:%f MinZ:%f MaxX:%f MaxY:%f MaxZ:%f\n",
			//idx,TurfInfo[idx][zName],TurfInfo[idx][zOwner],TurfInfo[idx][zMinX],TurfInfo[idx][zMinY],TurfInfo[idx][zMinZ],TurfInfo[idx][zMaxX],TurfInfo[idx][zMaxY],TurfInfo[idx][zMaxZ]);
			idx++;
		}
		fclose(file);
	}
	return 1;
}

public SaveTurfs()
{
	new idx;
	new File: file2;
	while (idx < sizeof(TurfInfo))
	{
		new coordsstring[256];
		format(coordsstring, sizeof(coordsstring), "%s|%s|%f|%f|%f|%f|%f|%f\n",
		TurfInfo[idx][zOwner],
		TurfInfo[idx][zColor],
		TurfInfo[idx][zMinX],
		TurfInfo[idx][zMinY],
		TurfInfo[idx][zMaxX],
		TurfInfo[idx][zMaxY]);
		if(idx == 0)
		{
			file2 = fopen("turfs.cfg", io_write);
		}
		else
		{
			file2 = fopen("turfs.cfg", io_append);
		}
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	return 1;
}

public LoadCK()
{
	new arrCoords[3][64];
	new strFromFile2[256];
	new File: file = fopen("ck.cfg", io_read);
	if (file)
	{
		new idx;
		while (idx < sizeof(CKInfo))
		{
			fread(file, strFromFile2);
			split(strFromFile2, arrCoords, '|');
			strmid(CKInfo[idx][cSendername], arrCoords[0], 0, strlen(arrCoords[0]), 255);
			strmid(CKInfo[idx][cGiveplayer], arrCoords[1], 0, strlen(arrCoords[1]), 255);
			CKInfo[idx][cUsed] = strval(arrCoords[2]);
			printf("CK:%d Taken: %d Sendername:%s Giveplayer: %s",
			idx,CKInfo[idx][cUsed],CKInfo[idx][cSendername],CKInfo[idx][cGiveplayer]);
			idx++;
		}
		fclose(file);
	}
	return 1;
}

public SaveCK()
{
	new idx;
	new File: file2;
	while (idx < sizeof(CKInfo))
	{
		new coordsstring[256];
		format(coordsstring, sizeof(coordsstring), "%s|%s|%d\n",
		CKInfo[idx][cSendername],
		CKInfo[idx][cGiveplayer],
		CKInfo[idx][cUsed]);
		if(idx == 0)
		{
			file2 = fopen("ck.cfg", io_write);
		}
		else
		{
			file2 = fopen("ck.cfg", io_append);
		}
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	return 1;
}

public LoadFamilies()
{
	new arrCoords[20][64];
	new strFromFile2[512];
	new File: file = fopen("families.cfg", io_read);
	if (file)
	{
		new idx;
		while (idx < sizeof(FamilyInfo))
		{
			fread(file, strFromFile2);
			split(strFromFile2, arrCoords, '|');
			FamilyInfo[idx][FamilyTaken] = strval(arrCoords[0]);
			strmid(FamilyInfo[idx][FamilyName], arrCoords[1], 0, strlen(arrCoords[1]), 255);
			strmid(FamilyInfo[idx][FamilyMOTD], arrCoords[2], 0, strlen(arrCoords[2]), 255);
			strmid(FamilyInfo[idx][FamilyColor], arrCoords[3], 0, strlen(arrCoords[3]), 255);
			strmid(FamilyInfo[idx][FamilyLeader], arrCoords[4], 0, strlen(arrCoords[4]), 255);
			FamilyInfo[idx][FamilyMembers] = strval(arrCoords[5]);
			FamilyInfo[idx][FamilySpawn][0] = floatstr(arrCoords[6]);
			FamilyInfo[idx][FamilySpawn][1] = floatstr(arrCoords[7]);
			FamilyInfo[idx][FamilySpawn][2] = floatstr(arrCoords[8]);
			FamilyInfo[idx][FamilySpawn][3] = floatstr(arrCoords[9]);
			FamilyInfo[idx][FamilyInterior] = strval(arrCoords[10]);
			FamilyInfo[idx][FamilyCash] = strvalEx(arrCoords[11]);
			FamilyInfo[idx][FamilySafe] = strvalEx(arrCoords[12]);
			FamilyInfo[idx][FamilySafePos][0] = floatstr(arrCoords[13]);
			FamilyInfo[idx][FamilySafePos][1] = floatstr(arrCoords[14]);
			FamilyInfo[idx][FamilySafePos][2] = floatstr(arrCoords[15]);
			FamilyInfo[idx][FamilyCrack] = strvalEx(arrCoords[16]);
			FamilyInfo[idx][FamilyMats] = strvalEx(arrCoords[17]);
			FamilyInfo[idx][FStrikes] = strval(arrCoords[18]);
			FamilyInfo[idx][FamilyTax] = strval(arrCoords[19]);
			printf("Family:%d Taken: %d Name:%s MOTD:%s Leader:%s Members:%d SpawnX:%f SpawnY:%f SpawnZ:%f Int:%d Cash:%d Safe:%d SafeX:%f SafeY:%f SafeZ:%f Pot:%d Crack:%d Mats:%d Avertissements:%d Taxe:%d",
			idx,FamilyInfo[idx][FamilyTaken],FamilyInfo[idx][FamilyName],FamilyInfo[idx][FamilyMOTD],FamilyInfo[idx][FamilyLeader],FamilyInfo[idx][FamilyMembers],FamilyInfo[idx][FamilySpawn][0],FamilyInfo[idx][FamilySpawn][1],FamilyInfo[idx][FamilySpawn][2],FamilyInfo[idx][FamilyInterior],FamilyInfo[idx][FamilyCash],FamilyInfo[idx][FamilySafe],FamilyInfo[idx][FamilySafePos][0],
			FamilyInfo[idx][FamilySafePos][1],FamilyInfo[idx][FamilySafePos][2],FamilyInfo[idx][FamilyCrack],FamilyInfo[idx][FamilyMats],FamilyInfo[idx][FStrikes],FamilyInfo[idx][FamilyTax]);
			idx++;
		}
		fclose(file);
	}
	return 1;
}

public SaveFamilies()
{
	new idx;
	new File: file2;
	while (idx < sizeof(FamilyInfo))
	{
		new coordsstring[512];
		format(coordsstring, sizeof(coordsstring), "%d|%s|%s|%s|%s|%d|%f|%f|%f|%f|%d|%d|%d|%f|%f|%f|%d|%d|%d|%d|%d|%d\n",
		FamilyInfo[idx][FamilyTaken],
		FamilyInfo[idx][FamilyName],
		FamilyInfo[idx][FamilyMOTD],
		FamilyInfo[idx][FamilyColor],
		FamilyInfo[idx][FamilyLeader],
		FamilyInfo[idx][FamilyMembers],
		FamilyInfo[idx][FamilySpawn][0],
		FamilyInfo[idx][FamilySpawn][1],
		FamilyInfo[idx][FamilySpawn][2],
		FamilyInfo[idx][FamilySpawn][3],
		FamilyInfo[idx][FamilyInterior],
		FamilyInfo[idx][FamilyCash],
		FamilyInfo[idx][FamilySafe],
		FamilyInfo[idx][FamilySafePos][0],
		FamilyInfo[idx][FamilySafePos][1],
		FamilyInfo[idx][FamilySafePos][2],
		FamilyInfo[idx][FamilyCrack],
		FamilyInfo[idx][FamilyMats],
		FamilyInfo[idx][FStrikes],
		FamilyInfo[idx][FamilyTax]);
		if(idx == 0)
		{
			file2 = fopen("families.cfg", io_write);
		}
		else
		{
			file2 = fopen("families.cfg", io_append);
		}
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	return 1;
}

public LoadPapers()
{
	new arrCoords[11][64];
	new strFromFile2[256];
	new File: file = fopen("papers.cfg", io_read);
	if (file)
	{
		new idx;
		while (idx < sizeof(PaperInfo))
		{
			fread(file, strFromFile2);
			split(strFromFile2, arrCoords, '|');
			PaperInfo[idx][PaperUsed] = strval(arrCoords[0]);
			strmid(PaperInfo[idx][PaperMaker], arrCoords[1], 0, strlen(arrCoords[1]), 255);
			strmid(PaperInfo[idx][PaperTitle], arrCoords[2], 0, strlen(arrCoords[2]), 255);
			strmid(PaperInfo[idx][PaperText1], arrCoords[3], 0, strlen(arrCoords[3]), 255);
			strmid(PaperInfo[idx][PaperText2], arrCoords[4], 0, strlen(arrCoords[4]), 255);
			strmid(PaperInfo[idx][PaperText3], arrCoords[5], 0, strlen(arrCoords[5]), 255);
			strmid(PaperInfo[idx][PaperText4], arrCoords[6], 0, strlen(arrCoords[6]), 255);
			strmid(PaperInfo[idx][PaperText5], arrCoords[7], 0, strlen(arrCoords[7]), 255);
			strmid(PaperInfo[idx][PaperText6], arrCoords[8], 0, strlen(arrCoords[8]), 255);
			strmid(PaperInfo[idx][PaperText7], arrCoords[9], 0, strlen(arrCoords[9]), 255);
			PaperInfo[idx][SafeSaving] = strval(arrCoords[10]);
			printf("Paper:%d Used: %d Maker:%s Title: %s Text1: %s Text2: %s Text3: %s Text4: %s Text5: %s Text6: %s Text7: %s",
			idx,PaperInfo[idx][PaperUsed],PaperInfo[idx][PaperMaker],PaperInfo[idx][PaperTitle],PaperInfo[idx][PaperText1],PaperInfo[idx][PaperText2],PaperInfo[idx][PaperText3],PaperInfo[idx][PaperText4],PaperInfo[idx][PaperText5],PaperInfo[idx][PaperText6],PaperInfo[idx][PaperText7]);
			idx++;
		}
		fclose(file);
	}
	return 1;
}

public SavePapers()
{
	new idx;
	new File: file2;
	while (idx < sizeof(IRCInfo))
	{
		new coordsstring[256];
		format(coordsstring, sizeof(coordsstring), "%d|%s|%s|%s|%s|%s|%s|%s|%s|%s|%d\n",
		PaperInfo[idx][PaperUsed],
		PaperInfo[idx][PaperMaker],
		PaperInfo[idx][PaperTitle],
		PaperInfo[idx][PaperText1],
		PaperInfo[idx][PaperText2],
		PaperInfo[idx][PaperText3],
		PaperInfo[idx][PaperText4],
		PaperInfo[idx][PaperText5],
		PaperInfo[idx][PaperText6],
		PaperInfo[idx][PaperText7],
		PaperInfo[idx][SafeSaving]);
		if(idx == 0)
		{
			file2 = fopen("papers.cfg", io_write);
		}
		else
		{
			file2 = fopen("papers.cfg", io_append);
		}
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	return 1;
}

public LoadProperty()
{
	new arrCoords[30][64];
	new strFromFile2[256];
	new File: file = fopen("property.cfg", io_read);
	if (file)
	{
		new idx;
		while (idx < sizeof(HouseInfo))
		{
			fread(file, strFromFile2);
			split(strFromFile2, arrCoords, ',');
			HouseInfo[idx][hEntrancex] = floatstr(arrCoords[0]);
			HouseInfo[idx][hEntrancey] = floatstr(arrCoords[1]);
			HouseInfo[idx][hEntrancez] = floatstr(arrCoords[2]);
			HouseInfo[idx][hExitx] = floatstr(arrCoords[3]);
			HouseInfo[idx][hExity] = floatstr(arrCoords[4]);
			HouseInfo[idx][hExitz] = floatstr(arrCoords[5]);
			HouseInfo[idx][hHealthx] = strval(arrCoords[6]);
			HouseInfo[idx][hHealthy] = strval(arrCoords[7]);
			HouseInfo[idx][hHealthz] = strval(arrCoords[8]);
			HouseInfo[idx][hArmourx] = strval(arrCoords[9]);
			HouseInfo[idx][hArmoury] = strval(arrCoords[10]);
			HouseInfo[idx][hArmourz] = strval(arrCoords[11]);
			strmid(HouseInfo[idx][hOwner], arrCoords[12], 0, strlen(arrCoords[12]), 255);
			strmid(HouseInfo[idx][hDiscription], arrCoords[13], 0, strlen(arrCoords[13]), 255);
			HouseInfo[idx][hValue] = strval(arrCoords[14]);
			HouseInfo[idx][hHel] = strval(arrCoords[15]);
			HouseInfo[idx][hArm] = strval(arrCoords[16]);
			HouseInfo[idx][hInt] = strval(arrCoords[17]);
			HouseInfo[idx][hLock] = strval(arrCoords[18]);
			HouseInfo[idx][hOwned] = strval(arrCoords[19]);
			HouseInfo[idx][hRooms] = strval(arrCoords[20]);
			HouseInfo[idx][hRent] = strval(arrCoords[21]);
			HouseInfo[idx][hRentabil] = strval(arrCoords[22]);
			HouseInfo[idx][hTakings] = strval(arrCoords[23]);
			HouseInfo[idx][hVec] = strval(arrCoords[24]);
  	        if(HouseInfo[idx][hVec] == 33)

			{
				HouseInfo[idx][hVec] = 33;
			}
			HouseInfo[idx][hVcol1] = strval(arrCoords[25]);
			HouseInfo[idx][hVcol2] = strval(arrCoords[26]);
			HouseInfo[idx][hDate] = strval(arrCoords[27]);
			HouseInfo[idx][hLevel] = strval(arrCoords[28]);
			HouseInfo[idx][hWorld] = strval(arrCoords[29]);
            new string[128];
			if(HouseInfo[idx][hOwned] == 0)
			{
    			format(string, sizeof(string), "[Maison a Vendre]\n%s\nPrix: $%d", HouseInfo[idx][hDiscription],HouseInfo[idx][hValue]);
    			housetext[idx] = Create3DTextLabel(string,0x00FF00FF, HouseInfo[idx][hEntrancex],HouseInfo[idx][hEntrancey],HouseInfo[idx][hEntrancez],40.0,0, 1);
			}
			if(HouseInfo[idx][hOwned] == 1)
			{
    			format (string, sizeof(string), "Propriétaire: %s\n/louermaison", HouseInfo[idx][hOwner],HouseInfo[idx][hRentabil]);
    			housetext[idx] = Create3DTextLabel(string,0x00FF00FF,HouseInfo[idx][hEntrancex],HouseInfo[idx][hEntrancey],HouseInfo[idx][hEntrancez],40.0,0, 1);
			}
			//Create3DTextLabel(HouseInfo[idx][hDiscription],0xB40100FF, HouseInfo[idx][hEntrancex],HouseInfo[idx][hEntrancey],HouseInfo[idx][hEntrancez]+1,20,0);

			printf("HouseInfo:%d Propriétaire:%s hTakings %d hVec %d",idx,HouseInfo[idx][hOwner],HouseInfo[idx][hTakings],HouseInfo[idx][hVec]);
			idx++;
		}
		fclose(file);
	}
	return 1;
}

public LoadBizz()
{
	new arrCoords[20][64];
	new strFromFile2[256];
	new File: file = fopen("bizz.cfg", io_read);
	if (file)
	{
		new idx;
		while (idx < sizeof(BizzInfo))
		{
			fread(file, strFromFile2);
			split(strFromFile2, arrCoords, '|');
			BizzInfo[idx][bOwned] = strval(arrCoords[0]);
			strmid(BizzInfo[idx][bOwner], arrCoords[1], 0, strlen(arrCoords[1]), 255);
			strmid(BizzInfo[idx][bMessage], arrCoords[2], 0, strlen(arrCoords[2]), 255);
			strmid(BizzInfo[idx][bExtortion], arrCoords[3], 0, strlen(arrCoords[3]), 255);
			BizzInfo[idx][bEntranceX] = floatstr(arrCoords[4]);
			BizzInfo[idx][bEntranceY] = floatstr(arrCoords[5]);
			BizzInfo[idx][bEntranceZ] = floatstr(arrCoords[6]);
			BizzInfo[idx][bExitX] = floatstr(arrCoords[7]);
			BizzInfo[idx][bExitY] = floatstr(arrCoords[8]);
			BizzInfo[idx][bExitZ] = floatstr(arrCoords[9]);
			BizzInfo[idx][bLevelNeeded] = strval(arrCoords[10]);
			BizzInfo[idx][bBuyPrice] = strval(arrCoords[11]);
			BizzInfo[idx][bEntranceCost] = strval(arrCoords[12]);
			BizzInfo[idx][bTill] = strval(arrCoords[13]);
			BizzInfo[idx][bLocked] = strval(arrCoords[14]);
			BizzInfo[idx][bInterior] = strval(arrCoords[15]);
			BizzInfo[idx][bProducts] = strval(arrCoords[16]);
			BizzInfo[idx][bMaxProducts] = strval(arrCoords[17]);
			BizzInfo[idx][bPriceProd] = strval(arrCoords[18]);
			printf("BizzInfo:%d Propriétaire:%s Message:%s Entrée:%d Caisse:%d Produits:%d/%d Interieur:%d.\n",
			idx,
			BizzInfo[idx][bOwner],
			BizzInfo[idx][bMessage],
			BizzInfo[idx][bEntranceCost],
			BizzInfo[idx][bTill],
			BizzInfo[idx][bProducts],
			BizzInfo[idx][bMaxProducts],
			BizzInfo[idx][bInterior]);
			new string[128];
			if(BizzInfo[idx][bOwned] == 0)
			{
               	format(string, sizeof(string), "%s\nBusiness a Vendre\nPrix: $%d", BizzInfo[idx][bMessage],BizzInfo[idx][bBuyPrice]);
               	businesstext[idx] = Create3DTextLabel(string,COLOR_ORANGERED,BizzInfo[idx][bEntranceX],BizzInfo[idx][bEntranceY],BizzInfo[idx][bEntranceZ],40.0,0, 1);
     		}
     		if(BizzInfo[idx][bOwned] == 1)
			{
               	format(string, sizeof(string), "%s\nPropriétaire: %s", BizzInfo[idx][bMessage],BizzInfo[idx][bOwner]);
               	businesstext[idx] = Create3DTextLabel(string,COLOR_ORANGERED,BizzInfo[idx][bEntranceX],BizzInfo[idx][bEntranceY],BizzInfo[idx][bEntranceZ],40.0,0, 1);
     		}
			idx++;
		}
		fclose(file);
	}
	return 1;
}


public LoadSBizz()
{
	new arrCoords[16][64];
	new strFromFile2[256];
	new File: file = fopen("sbizz.cfg", io_read);
	if (file)
	{
		new idx;
		while (idx < sizeof(SBizzInfo))
		{
			fread(file, strFromFile2);
			split(strFromFile2, arrCoords, '|');
			SBizzInfo[idx][sbOwned] = strval(arrCoords[0]);
			strmid(SBizzInfo[idx][sbOwner], arrCoords[1], 0, strlen(arrCoords[1]), 255);
			strmid(SBizzInfo[idx][sbMessage], arrCoords[2], 0, strlen(arrCoords[2]), 255);
			strmid(SBizzInfo[idx][sbExtortion], arrCoords[3], 0, strlen(arrCoords[3]), 255);
			SBizzInfo[idx][sbEntranceX] = floatstr(arrCoords[4]);
			SBizzInfo[idx][sbEntranceY] = floatstr(arrCoords[5]);
			SBizzInfo[idx][sbEntranceZ] = floatstr(arrCoords[6]);
			SBizzInfo[idx][sbLevelNeeded] = strval(arrCoords[7]);
			SBizzInfo[idx][sbBuyPrice] = strval(arrCoords[8]);
			SBizzInfo[idx][sbEntranceCost] = strval(arrCoords[9]);
			SBizzInfo[idx][sbTill] = strval(arrCoords[10]);
			SBizzInfo[idx][sbLocked] = strval(arrCoords[11]);
			SBizzInfo[idx][sbInterior] = strval(arrCoords[12]);
			SBizzInfo[idx][sbProducts] = strval(arrCoords[13]);
			SBizzInfo[idx][sbMaxProducts] = strval(arrCoords[14]);
			SBizzInfo[idx][sbPriceProd] = strval(arrCoords[15]);
			printf("Biz Info:%d Patron:%s Message:%s Prix d'entrée:%d Caisse:%d Produits:%d/%d Interior:%d.\n",
			idx,
			SBizzInfo[idx][sbOwner],
			SBizzInfo[idx][sbMessage],
			SBizzInfo[idx][sbEntranceCost],
			SBizzInfo[idx][sbTill],
			SBizzInfo[idx][sbProducts],
			SBizzInfo[idx][sbMaxProducts],
			SBizzInfo[idx][sbInterior]);
			new string[128];
			if(SBizzInfo[idx][sbOwned] == 0)
			{
               	format(string, sizeof(string), "%s\nBusiness a Vendre\nPrix: $%d", SBizzInfo[idx][sbMessage],SBizzInfo[idx][sbBuyPrice]);
               	sbusinesstext[idx] = Create3DTextLabel(string,COLOR_ORANGERED,SBizzInfo[idx][sbEntranceX],SBizzInfo[idx][sbEntranceY],SBizzInfo[idx][sbEntranceZ],40.0,0, 1);
     		}
     		if(SBizzInfo[idx][sbOwned] == 1)
			{
               	format(string, sizeof(string), "%s\nPropriétaire: %s", SBizzInfo[idx][sbMessage],SBizzInfo[idx][sbOwner]);
               	sbusinesstext[idx] = Create3DTextLabel(string,COLOR_ORANGERED,SBizzInfo[idx][sbEntranceX],SBizzInfo[idx][sbEntranceY],SBizzInfo[idx][sbEntranceZ],40.0,0, 1);
     		}
			idx++;
		}
		fclose(file);
	}
	return 1;
}

//------------------------------------------------------------------------------------------------------
public OnGameModeInit()
{
    //ConnectNPC("at400_lv","at400_lv");//cette fonction permet de spawn un bot script BOT_2 Pseudo du bot Bruno2
    //ConnectNPC("Bruno","Bruno");//cette fonction permet de spawn un bot script BOT_1 Pseudo du bot Bruno
    AntiDeAMX();
    //SendRconCommand("loadfs carownership");
    ManualVehicleEngineAndLights();
    LoadBadwordsList();
    roadblocktimer = 0;
    new string[MAX_PLAYER_NAME];
    new string1[MAX_PLAYER_NAME];
    Ann = 0;
    SetTimer("AFKKicker", 60000, 1);
    SetTimer("MeteoAleatoire", 60000*TempsChangementMeteo, 1);
	SetTimer("EnvoiAnnonce", 300000, 1);
	SetTimer("JoueurPasRein", 600, true);
	print("Une 2eme Chance");
	timer = SetTimer("BOtimer",100,true);
	
	// Radars
	SetTimer("UpdateCameras",CAMERA_UPDATE_INTERVAL,true);
	flash = TextDrawCreate(-20.000000,2.000000,"|");
	TextDrawUseBox(flash,1);
	TextDrawBoxColor(flash,0xffffff66);
	TextDrawTextSize(flash,660.000000,22.000000);
	TextDrawAlignment(flash,0);
	TextDrawBackgroundColor(flash,0x000000ff);
	TextDrawFont(flash,3);
	TextDrawLetterSize(flash,1.000000,52.200000);
	TextDrawColor(flash,0xffffffff);
	TextDrawSetOutline(flash,1);
	TextDrawSetProportional(flash,1);
	TextDrawSetShadow(flash,1);
	LoadCameras();

    /*if(AFKActiver == 1)
	{
		AFKTimer = SetTimer("AFK",60000,1);
	}*/
	ChargerVehicules();
	#if defined USE_MENU

		MenuJoueur = CreateMenu("Menu Joueur",1,440,140,150,40);
		AddMenuItem(MenuJoueur,0,"Acheter");
		AddMenuItem(MenuJoueur,0,"Vendre");
 		AddMenuItem(MenuJoueur,0,"Garer");
		AddMenuItem(MenuJoueur,0,"Alarme");
		AddMenuItem(MenuJoueur,0,"Essence");
		AddMenuItem(MenuJoueur,0,"Tableau de bord");
		#if defined USE_CALLCAR
			AddMenuItem(MenuJoueur,0,"CallCar");
		#endif
		AddMenuItem(MenuJoueur,0,"Exit");

        MenuAdmin = CreateMenu("Menu Admin",1,440,140,150,40);
		AddMenuItem(MenuAdmin,0,"Prix");
		AddMenuItem(MenuAdmin,0,"Alarme Admin");
		AddMenuItem(MenuAdmin,0,"Vendre");
		AddMenuItem(MenuAdmin,0,"Status");
		AddMenuItem(MenuAdmin,0,"Garer");
		AddMenuItem(MenuAdmin,0,"Essence");
		AddMenuItem(MenuAdmin,0,"MaxEssence");
		AddMenuItem(MenuAdmin,0,"Reset Tuning");
		AddMenuItem(MenuAdmin,0,"Exit");

	#endif

	for(new p=0;p<sizeof(Pompe);p++)
	{
		PickupPompe[p] = CreatePickup(1239,1,Pompe[p][0],Pompe[p][1],Pompe[p][2]);
	}
	TimerSave = SetTimer("SauvegardeVeh",TIMESAVE,1);
	TimerVitesse = SetTimer("Vitesses", 300, 1);
		print(" --------------------------------------------");
		print("|   [INC] Gestion Vehicule | By mister-fred   |");
		print("|   [INC] Mise a jour by Brian Price          |");
		print(" --------------------------------------------\n");
		
	for(new c=0;c<CAR_AMOUNT;c++)
	{
		Gas[c] = GasMax;
	}
	for(new i=0;i<GetMaxPlayers();i++)
 	{
        IsSpeeding[i] = false;
 	}
 	for ( new playerid; playerid < MAX_PLAYERS; playerid++ )
    {
              if ( IsPlayerConnected( playerid ) )
                  AntiFlood_InitPlayer( playerid );
    }

    //==========================================================================
	RaceActive=0;
	Ranking=1;
	LCurrentCheckpoint=0;
	Participants=0;
	for(new i;i<MAX_BUILDERS;i++)
	{
	    BuilderSlots[i]=MAX_PLAYERS+1;
	}
	if(RRotation != -1) SetTimer("RaceRotation",RRotationDelay,1);
	CreateRaceMenus();
	//==========================================================================
	CreateFoodMenus();
	CreateGuideMenus();
	CreateLegalJobsMenus();
	CreateIlegalJobsMenus();
	CreateLicensesMenus();
	LoadProperty();
	LoadBizz();
	LoadSBizz();
	LoadBoxer();
	LoadStuff();
	LoadIRC();
	LoadFamilies();
	LoadCK();
	LoadTurfs();
	LoadPapers();
	LoadDrugSystem();
	LoadMatsSystem();
	LoadHQLocks();
	LoadCoffreHQ();
	LoadTrunk();
	IRCInfo[0][iPlayers] = 0; IRCInfo[1][iPlayers] = 0; IRCInfo[2][iPlayers] = 0;
	IRCInfo[3][iPlayers] = 0; IRCInfo[4][iPlayers] = 0; IRCInfo[5][iPlayers] = 0;
	IRCInfo[6][iPlayers] = 0; IRCInfo[7][iPlayers] = 0; IRCInfo[8][iPlayers] = 0;
	IRCInfo[9][iPlayers] = 0;
	News[hTaken1] = 0; News[hTaken2] = 0; News[hTaken3] = 0; News[hTaken4] = 0; News[hTaken5] = 0;
	format(string, sizeof(string), "Rien");
	strmid(News[hAdd1], string, 0, strlen(string), 255);
	strmid(News[hAdd2], string, 0, strlen(string), 255);
	strmid(News[hAdd3], string, 0, strlen(string), 255);
	strmid(News[hAdd4], string, 0, strlen(string), 255);
	strmid(News[hAdd5], string, 0, strlen(string), 255);
	format(string1, sizeof(string1), "Personne");
	strmid(News[hContact1], string1, 0, strlen(string1), 255);
	strmid(News[hContact2], string1, 0, strlen(string1), 255);
	strmid(News[hContact3], string1, 0, strlen(string1), 255);
	strmid(News[hContact4], string1, 0, strlen(string1), 255);
	strmid(News[hContact5], string1, 0, strlen(string1), 255);
	PlayerHaul[134][pCapasity] = 20;
	PlayerHaul[133][pCapasity] = 20;
	PlayerHaul[132][pCapasity] = 40;
	PlayerHaul[131][pCapasity] = 40;
	//PlayerHaul[210][pCapasity] = 40;
	//PlayerHaul[211][pCapasity] = 40;
	SetGameModeText("U2C RPG v1.0.7");
	SendRconCommand("mapname San Andreas U2C");
	SendRconCommand("weburl u2c-rp.forum-pro.fr");
	format(objstore, sizeof(objstore), "MOLE: Je n'ai rien, revenez me voir plus tard.");
	format(cbjstore, sizeof(cbjstore), "QG: Il ne se passe rien dans votre voisinage.");
	format(motd, sizeof(motd), "Bienvenue sur Une 2eme Chance RolePlay.");
	gettime(ghour, gminute, gsecond);
	/*if(!realtime)
	{
		SetWorldTime(wtime);
	}*/
	SetPDistance(10);
    ShowPlayerMarkers(0);
    AllowInteriorWeapons(1);//Permettre les armes à l'intérieur
	AllowAdminTeleport(1);
	DisableInteriorEnterExits();
	EnableStuntBonusForAll(0);//Désactiver stunt bonus.
    EnableZoneNames(1);   // Pour afficher en bah a droite, le nom des zone ou vous vous trouvez. (Exmple, je suis a Groove Street, ca me marque "Groove Street"
	//EnableTirePopping(1);
    //UsePlayerPedAnims();  // pour que vos personnages puissent courir plus vite et non pas au ralenti
    //SetNameTagDrawDistance(5.0);

	//mdpbanque = 100;
	mdpbanque = random(10000);

   // /ouvrirgrille
Create3DTextLabel("/ouvrirgrille",0x0000FFFF, 2335.2158203125, 2443.791015625, 14.350885391235,20,0);
Create3DTextLabel("/ouvrirgrille",0x0000FFFF, 2293.8974609375, 2499.078125, 11.395983695984,20,0);
Create3DTextLabel("/ouvrirgrille",0x0000FFFF, 2238.205078125,2450.4223632813,10.538173675537,20,0);
Create3DTextLabel("/ouvrirgrille",0x0000FFFF, 1012.7029418945, 3286.8498535156, 9.9971599578857,20,0);
Create3DTextLabel("/ouvrirgrille",0x0000FFFF, 1534.9020,-1451.5979,14.4882,20,0);
Create3DTextLabel("/ouvrirgrille",0x0000FFFF, 1643.3379,-1714.9338,15.3067,20,0);
Create3DTextLabel("/ouvrirgrille",0x0000FFFF, 1246.0033,-767.3727,91.1473,20,0);
Create3DTextLabel("/ouvrirgrille",0x0000FFFF, 2061.384765625, 2437.7890625, 18.416982650757,20,0);
Create3DTextLabel("/ouvrirgrille",0x0000FFFF, 1521.259765625,2773.26171875,17.695266723633,20,0);
Create3DTextLabel("/porte2",0x0000FFFF, 222.134,70.876,1003.98,20,0);
Create3DTextLabel("SPAWN",0x0000FFFF,1743.1295,-1862.9645,13.5757,20,0);
/*// /ouvrirgrillemaison
Create3DTextLabel("/ouvrirgrillemaison",0x0000FFFF, 897.28515625, 2211.326171875, 0.1883735656738,20,0);
Create3DTextLabel("/ouvrirgrillemaison",0x0000FFFF, 2786.1454,-1600.2020,10.1297,20,0);*/

Create3DTextLabel("SORTIE",0x0000FFFF,948.5014,2103.9685,1011.0234,20,0);

AddStaticPickup(1239, 1, 1734.2914,-1660.2087,23.7178, 0); // Avocat
AddStaticPickup(1239, 1, 1734.4084,-1654.3083,23.7309, 0); // Serveur
AddStaticPickup(1239, 1, 1734.5419,-1648.5579,23.7436, 0); // Detective
AddStaticPickup(1239, 1, 1734.4458,-1642.4052,23.7519, 0); // Mecanicien
AddStaticPickup(1239, 1, 1708.9329,-1649.1675,23.6953, 0); // Garde du Corps
AddStaticPickup(1239, 1, 1708.9597,-1654.3541,23.7012, 0); // Boxeur
AddStaticPickup(1239, 1, 1709.0222,-1659.6246,23.7024, 0); // Chauffeur de taxi
AddStaticPickup(1239, 1, 1708.9978,-1664.8838,23.7037, 0); // Chauffeur de bus
AddStaticPickup(1239, 1, 1709.1526,-1670.0980,23.7046, 0); // Livreur de Journaux
AddStaticPickup(1239, 1, 1709.2399,-1670.1592,27.1953, 0); // Livreur de Pizza
AddStaticPickup(1239, 1, 1709.0657,-1664.8726,27.1953, 0); // fermier
AddStaticPickup(1239, 1, 1708.9312,-1659.2906,27.1953, 0); // balayeur de rue
AddStaticPickup(1239, 1, 1708.8202,-1654.2233,27.1953, 0); // eboueur
AddStaticPickup(1239, 1, 1708.9236,-1649.0898,27.1953, 0); // ouvrier
AddStaticPickup(1239, 1, 1734.6354,-1660.2012,27.2164, 0); // Conducteur de train
AddStaticPickup(1239, 1, 1734.4001,-1654.1403,27.2271, 0); // pilote de ligne
Create3DTextLabel("[N'oubliez pas d'aller a l'étage suivant !]",0x00FF00FF,1489.0118,-1720.1245,8.2369, 15, 0, 1);

// Eglise
AddStaticPickup(1239, 1, 2233.2068,-1333.2169,23.9815, 0);

Create3DTextLabel("/get drogue",0x00FF00FF,1489.0118,-1720.1245,8.2369, 15, 0, 1);
AddStaticPickup(1239, 1, 1489.0118,-1720.1245,8.2369, 0);

Create3DTextLabel("/apprendrelangue",0x00FF00FF,1211.5039,-898.6489,1094.1084, 15, 0, 1);
AddStaticPickup(1239, 1, 1211.5039,-898.6489,1094.1084, 0);

Create3DTextLabel("Job Eboueur",0x00FF00FF,2281.0352,-2226.3916,13.5469, 15, 0, 1);
AddStaticPickup(1239, 1, 2281.0352,-2226.3916,13.5469, 0);

Create3DTextLabel("Ecole de Langues de Los Santos",0x00FF00FF,1219.2813,-1811.9434,16.5938, 15, 0, 1);
AddStaticPickup(1239, 1, 1219.2813,-1811.9434,16.5938, 0);

Create3DTextLabel("SORTIE",0x00FF00FF,-3436.2354,472.8241,57.6132, 15, 0, 1);
AddStaticPickup(1239, 1, -3436.2354,472.8241,57.6132, 0);

Create3DTextLabel("SORTIE",0x00FF00FF,2157.2434,1596.5140,999.9688, 15, 0, 1);
AddStaticPickup(1239, 1, 2157.2434,1596.5140,999.9688, 0);

Create3DTextLabel("Faites /v acheter pour acheter un véhicule",0x00FF00FF,536.4335,-1282.1498,17.2422, 15, 0, 1);
AddStaticPickup(1239, 1, 536.4335,-1282.1498,17.2422, 0);

Create3DTextLabel("/achetermatos",0x00FF00FF,2230.1196,-2286.3254,14.3751, 15, 0, 1);
AddStaticPickup(1239, 1, 2230.1196,-2286.3254,14.3751, 0);

Create3DTextLabel("Fouriere de Los Santos",0x00FF00FF,2206.9329,-1969.4095,13.5469, 15, 0, 1);
AddStaticPickup(1239, 1, 2206.9329,-1969.4095,13.5469, 0);

Create3DTextLabel("[Cambriolage Mairie] \n /volermairie",0x00FF00FF,358.5919,184.2908,1008.3828, 15, 0, 1);
AddStaticPickup(1239, 1, 358.5919,184.2908,1008.3828, 0);

    AddStaticPickup(1239, 1, 499.6341,-20.3592,1000.6797, 0);
    Create3DTextLabel("[Cambriolage Alhambra] \n /voleralhambra",0x00FF00FF,499.6341,-20.3592,1000.6797, 15, 0, 1);

    AddStaticPickup(1239, 1, 756.5454,5.4325,1000.6992, 0);
    Create3DTextLabel("[Cambriolage Gymnase] \n /volergymnase",0x00FF00FF,756.5454,5.4325,1000.6992, 15, 0, 1);

    AddStaticPickup(1239, 1, 492.0305,-82.4695,998.7578, 0);
    Create3DTextLabel("[Cambriolage Ten Green Bottles] \n /volertgb",0x00FF00FF,492.0305,-82.4695,998.7578, 15, 0, 1);

    AddStaticPickup(1239, 1, 2309.6060,-4.0211,26.7422, 0);
    Create3DTextLabel("[Cambriolage Donut Store] \n /volerdonut",0x00FF00FF,379.1978,-184.1220,1000.6328, 15, 0, 1);

    AddStaticPickup(1239, 1, 371.7011,-6.2796,1001.8589, 9);
    Create3DTextLabel("[Cambriolage Cluckin Bell] \n /volercluckin",0x00FF00FF,371.7011,-6.2796,1001.8589, 15, 2, 1);
    Create3DTextLabel("[Cambriolage Cluckin Bell] \n /volercluckin",0x00FF00FF,371.7011,-6.2796,1001.8589, 15, 1, 1);

    AddStaticPickup(1239, 1, 373.8943,-67.4481,1001.5078, 10);
    Create3DTextLabel("[Cambriolage Burger Store] \n /volerburger",0x00FF00FF,373.8943,-67.4481,1001.5078, 15, 2, 1);
    Create3DTextLabel("[Cambriolage Burger Store] \n /volerburger",0x00FF00FF,373.8943,-67.4481,1001.5078, 15, 1, 1);

    AddStaticPickup(1239, 1, 373.6143,-118.8086,1001.4922, 5);
    Create3DTextLabel("[Cambriolage Pizza Store] \n /volerpizza",0x00FF00FF,373.6143,-118.8086,1001.4922, 15, 0, 1);

// /ofgrille /ffgrille
Create3DTextLabel("/ofgrille",0x0000FFFF, 2516.9375,2346.2314453125,5.2402683258057,20,0);
Create3DTextLabel("/ffgrille",0x0000FFFF, 2516.9377441406,2346.2319335938,11.640268325806,20,0);

// /ouvrirhangar /fermerhangar
Create3DTextLabel("/ouvrirhangar",0x0000FFFF, 977.65704345703, 2076.3278808594, 12.593704223633,20,0);
Create3DTextLabel("/fermerhangar",0x0000FFFF, 725.9677734375, 2930.77734375, 10.143821716309,20,0);

// /faelevateur1
Create3DTextLabel("/faelevateur1",0x0000FFFF, 725.96807861328, 2930.77734375, 17.168794631958,20,0);
// /aelevateur2
Create3DTextLabel("/aelevateur2",0x0000FFFF, 762.46484375, 2956.8955078125, 9.8759651184082,20,0);
// /faelevateur2
Create3DTextLabel("/aelevateur2",0x0000FFFF, 762.46508789063, 2956.8962402344, 16.900938034058,20,0);
//secubanque
Create3DTextLabel("/secubanque",0x0000FFFF, 2144.1677,1603.0985,993.5684,20,0);
// /ouvrirtunning
//Create3DTextLabel("/ouvrirtunning",0x0000FFFF, 1042.2530,-1026.0344,32.1016,20,0);
// /ouvrirporte
Create3DTextLabel("/ouvrirporte",0x0000FFFF, 245.0578,72.4314,1002.5406,20,0);
// /swat
Create3DTextLabel("/swat",0x0000FFFF, 210.5792,144.4530,1003.0234,20,0);
Create3DTextLabel("/swat",0x0000FFFF, 211.1120,151.6898,1003.0234,20,0);
// /tactique
Create3DTextLabel("/tactique",0x0000FFFF, 252.4938,73.4559,1003.6406,20,0);
Create3DTextLabel("/tactique",0x0000FFFF, 258.6202,79.8815,1003.6406,20,0);
// /duty
Create3DTextLabel("/duty",0x0000FFFF, 255.3,77.4,1003.6,20,0);
Create3DTextLabel("/duty",0x0000FFFF, 244.9195,188.4331,1008.1719,20,0);
// /missile
Create3DTextLabel("/missile",0x0000FFFF, 831.0058,2959.2417,18.4550,20,0);
// 8ball Track
Create3DTextLabel("8ball Track",0x0000FFFF, 2695.6235,-1704.6960,11.8438,20,0);
// the Dirt Track
Create3DTextLabel("The Dirt Track",0x0000FFFF, -2111.5686,-443.9720,38.7344,20,0);
// the Stunting Track
Create3DTextLabel("The Stunting Track",0x0000FFFF, -2080.3079,-406.0309,38.7344,20,0);
// /uniforme
Create3DTextLabel("/uniforme",0x0000FFFF, -792.9693,500.5572,1367.3672,20,0);
Create3DTextLabel("/uniforme",0x0000FFFF, -779.3134,497.8989,1371.7490,20,0);
// /agent
Create3DTextLabel("/agent",0x0000FFFF, 246.5625,120.3976,1003.2629,20,0);
// Restroom
Create3DTextLabel("Restroom",0x0000FFFF, 488.2531,-82.7632,998.7578,20,0);
// Ten Green Bottles
Create3DTextLabel("Ten Green Bottles",0x0000FFFF, 2280.0476,-1139.5413,1050.8984,20,0);
// Eglise
Create3DTextLabel("Eglise",0x0000FFFF, 2232.4524,-1333.1495,23.9815,20,0);
// Gym
Create3DTextLabel("Gym",0x0000FFFF, 1968.6350,2295.8726,16.4559,20,0);
// Pigpen
Create3DTextLabel("Pigpen",0x0000FFFF, 2506.9031,2120.2952,10.8398,20,0);
// /fill
Create3DTextLabel("/v remplir",0x0000FFFF, 1004.0070,-939.3102,42.1797,20,0);
Create3DTextLabel("/v remplir",0x0000FFFF, 1944.3260,-1772.9254,13.3906,20,0);
Create3DTextLabel("/v remplir",0x0000FFFF, -90.5515,-1169.4578,2.4079,20,0);
Create3DTextLabel("/v remplir",0x0000FFFF, -1609.7958,-2718.2048,48.5391,20,0);
Create3DTextLabel("/v remplir",0x0000FFFF, -2029.4968,156.4366,28.9498,20,0);
Create3DTextLabel("/v remplir",0x0000FFFF, -2408.7590,976.0934,45.4175,20,0);
Create3DTextLabel("/v remplir",0x0000FFFF, -2243.9629,-2560.6477,31.8841,20,0);
Create3DTextLabel("/v remplir",0x0000FFFF, -1676.6323,414.0262,6.9484,20,0);
Create3DTextLabel("/v remplir",0x0000FFFF, 2202.2349,2474.3494,10.5258,20,0);
Create3DTextLabel("/v remplir",0x0000FFFF, 70.3882,1218.6783,18.5165,20,0);
Create3DTextLabel("/v remplir",0x0000FFFF, 2113.7390,920.1079,10.5255,20,0);
Create3DTextLabel("/v remplir",0x0000FFFF, -1327.7218,2678.8723,50.0625,20,0);
Create3DTextLabel("/v remplir",0x0000FFFF, 2639.2161,1105.7794,10.6959,20,0);
Create3DTextLabel("/v remplir",0x0000FFFF, 656.4265,-559.8610,16.5015,20,0);
Create3DTextLabel("/v remplir",0x0000FFFF, 656.3797,-570.4138,16.5015,20,0);

    Create3DTextLabel("F.B.I",0x0000FFFF, 1654.0858,-1655.9982,22.5156,20,0);
    AddStaticPickup(1239, 2, 1654.0858,-1655.9982,22.5156); // HQ FBI icone Entrée
    AddStaticPickup(1239, 2, 288.7287,168.5377,1007.1719); // HQ FBI Sortie 1
    AddStaticPickup(1239, 2, 238.7290,139.4386,1003.0234); // HQ FBI Sortie 2

    Create3DTextLabel("Jefferson Motel",0x0000FFFF, 2232.9993,-1159.7517,25.8906,20,0); // Jefferson Motel Entrée
    AddStaticPickup(1239, 2, 2232.9993,-1159.7517,25.8906); // Jefferson Motel icone Entrée
    AddStaticPickup(1239, 2, 2214.8450,-1150.4794,1025.7969); // Jefferson Motel icone Sortie
    Create3DTextLabel("SORTIE",0x0000FFFF, 2214.8450,-1150.4794,1025.7969,20,0); // Jefferson Motel Sortie

	AddStaticPickup(1274, 2, 2518.0454,2335.0117,10.8203); // Fouriere
    Create3DTextLabel("Fouriere",0x0000FFFF, 2518.0454,2335.0117,10.8203,20,0);

	AddStaticPickup(1274, 2, 2577.5349,1325.1555,10.8203); // Nouvelle Banque
    Create3DTextLabel("Banque",0x0000FFFF, 2577.5349,1325.1555,10.8203,20,0);

	AddStaticPickup(1239, 2, 2217.3882,-1146.9778,1025.7969); // Louer chambre
    Create3DTextLabel("/louerchambre",0x0000FFFF, 2217.3882,-1146.9778,1025.7969,20,0);

	AddStaticPickup(1239, 2, 2613.6372,2042.0688,10.8203); // QG Bloods
    Create3DTextLabel("QG Bloods",0x0000FFFF, 2613.6372,2042.0688,10.8203,20,0);

	AddStaticPickup(1239, 2, 2507.2603,1242.2599,10.8270); //Cripz Pickup
    Create3DTextLabel("QG Cripz",0x0000FFFF, 2507.2603,1242.2599,10.8270,20,0);

    AddStaticPickup(1239, 2, 1172.0818,-1325.3009,15.4073); // Hopital ipo
	Create3DTextLabel("L'Hospital",0x0000FFFF, 1172.0818,-1325.3009,15.4073,20,0);

	AddStaticPickup(1239, 2, 2017.8821,1007.5283,39.0911); //HQ copter to hq
    Create3DTextLabel("Helicopter au HQ Yakuza",0x0000FFFF, 2017.8821,1007.5283,39.0911,20,0);

	AddStaticPickup(1239, 2, -792.9693,500.5572,1367.3672);//serveur uniform list
    Create3DTextLabel("/uniforme",0x0000FFFF, -792.9693,500.5572,1367.3672,20,0);

	AddStaticPickup(1239, 2, -779.3134,497.8989,1371.7490);//serveur uniform list 2
    Create3DTextLabel("/uniforme",0x0000FFFF, -779.3134,497.8989,1371.7490,20,0);

	AddStaticPickup(1239, 2, 1607.3711,1815.6852,10.8203); //Hospital 1 near Ammu

	AddStaticPickup(1239, 2, 2029.5945,-1404.6426,17.2512); //Hospital 2 near speedway
    Create3DTextLabel("/healme",0x0000FFFF, 2029.5945,-1404.6426,17.2512,20,0);

	AddStaticPickup(1239, 2, 253.9280,69.6094,1003.6406); //Clear icon in Police Station
    Create3DTextLabel("/mdc",0x0000FFFF,253.9280,69.6094,1003.6406,20,0);

	AddStaticPickup(1239, 2, 1042.8492,1011.1059,11.0000); //City Hall
    Create3DTextLabel("Mairie",0x0000FFFF, 1042.8492,1011.1059,11.0000,20,0);

	AddStaticPickup(1239, 2, 2144.0420,1638.5311,993.5761);
    Create3DTextLabel("/braquer",0x0000FFFF, 2144.0420,1638.5311,993.5761,20,0);

	AddStaticPickup(1239, 2, 2447.2183,2376.1445,12.1635); // Tribunal entrer
    Create3DTextLabel("Tribunal Entrer",0x0000FFFF, 2447.2183,2376.1445,12.1635,20,0);

	AddStaticPickup(1239, 2, 208.4958,-229.6796,1.7786); //Black Market
    Create3DTextLabel("/creerarme",0x0000FFFF, 208.4958,-229.6796,1.7786,20,0);

	AddStaticPickup(1239, 2, 1381.0413,-1088.8511,27.3906); //Bill Board (old Job Department)
    Create3DTextLabel("/mission",0x0000FFFF, 1381.0413,-1088.8511,27.3906,20,0);

	AddStaticPickup(1239, 2, 2142.5330,1625.7997,993.6882); // Mot de passe banque
    Create3DTextLabel("/decoder",0x0000FFFF, 2142.5330,1625.7997,993.6882,20,0);

	AddStaticPickup(1239, 2, 2019.8147,1008.0146,10.8203); //yakuza Agency entrance
    Create3DTextLabel("Yakuza Agency",0x0000FFFF, 2019.8147,1008.0146,10.8203,20,0);

	AddStaticPickup(1239, 2, 2019.9419,1027.6105,10.8203); // Pickup Arme
    Create3DTextLabel("Yakuza Agency Arme",0x0000FFFF, 2019.9419,1027.6105,10.8203,20,0);

	AddStaticPickup(1242, 2, 1527.5,-12.1,1002.0); // binco armor
    Create3DTextLabel("Police Armoury",0x0000FFFF, 1527.5,-12.1,1002.0,20,0);

	AddStaticPickup(1240, 2, 279.3000,1853.5619,8.7649); // area51 health
    Create3DTextLabel("Health",0x0000FFFF, 279.3000,1853.5619,8.7649,20,0);

	AddStaticPickup(1239, 2, 2364.8733,2382.9822,10.8203); //[/pjournal] Livreur de Journals + news reporter
    Create3DTextLabel("/pjournal",0x0000FFFF,2364.8733,2382.9822,10.8203,20,0);

	AddStaticPickup(1239, 2, 1174.9100,-1365.7330,13.9876); // Elevator 1
    Create3DTextLabel("Ascenseur1",0x0000FFFF, 1174.9100,-1365.7330,13.9876,20,0);

	AddStaticPickup(1239, 2, 1174.9591,-1369.8761,23.9736); // Elevator 2
    Create3DTextLabel("Ascenseur2",0x0000FFFF, 1174.9591,-1369.8761,23.9736,20,0);

	AddStaticPickup(1239, 2, 379.1396,-114.2661,1001.4922); // Pizza Ramassage
    Create3DTextLabel("Pizza Ramassage",0x0000FFFF, 379.1396,-114.2661,1001.4922,20,0);

	AddStaticPickup(1240, 2, 263.1702,76.4346,1001.0391); // Jail health
    Create3DTextLabel("Health",0x0000FFFF, 263.1702,76.4346,1001.0391,20,0);

	AddStaticPickup(1239, 2, 1806.1897,-1294.9735,13.5411); // AD
    Create3DTextLabel("/publicite",0x0000FFFF, 1806.1897,-1294.9735,13.5411,20,0);

	AddStaticPickup(1239, 2, 2798.5601,-2416.6804,13.6310); // Drugs for smugglers
    Create3DTextLabel("/contrebandedrogue",0x0000FFFF, 2798.5601,-2416.6804,13.6310,20,0);

	AddStaticPickup(1318, 2, 2151.3706,-2255.7769,13.2986); //Faussaire get
    Create3DTextLabel("/mats",0x0000FFFF, 2151.3706,-2255.7769,13.2986,20,0);

	AddStaticPickup(1318, 2, 764.7709,-1350.1090,13.5168); //Faussaire deliver
    Create3DTextLabel("/mats",0x0000FFFF, 764.7709,-1350.1090,13.5168,20,0);

	AddStaticPickup(1239, 2, 2849.3208,1246.0183,11.3906); // Drugs Smuggler pickup
    Create3DTextLabel("Job : Contrebandier de drogue /prendrejob",0x0000FFFF, 2849.3208,1246.0183,11.3906,20,0);

	AddStaticPickup(1239, 2, 1856.3259,2368.5259,10.9799); // Drugs Dealer reg /prendrejob
    Create3DTextLabel("Job : Dealer de drogue /prendrejob",0x0000FFFF, 856.3259,2368.5259,10.9799,20,0);

	AddStaticPickup(1239, 2, 2826.6938,1632.9011,10.8203); // Materials smuggler reg
    Create3DTextLabel("Job : Contrebandier d'arme /prendrejob",0x0000FFFF, 2826.6938,1632.9011,10.8203,20,0);

	AddStaticPickup(1239, 2, 2397.8171,962.2006,10.8130); // Drugs Farmer reg /prendrejob
    Create3DTextLabel("Job : Cultivateur de drogue /prendrejob",0x0000FFFF, 2397.8171,962.2006,10.8130,20,0);

	AddStaticPickup(1239, 2, 2493.2258,1874.6377,10.8203); // Gun Maker reg
    Create3DTextLabel("Job : Fabricant d'arme /prendrejob",0x0000FFFF, 2493.2258,1874.6377,10.8203,20,0);

	AddStaticPickup(1239, 2, 1215.1304,-11.8431,1000.9219); // Pute /prendrejob
    Create3DTextLabel("Job : Prosituer /prendrejob",0x0000FFFF, 1215.1304,-11.8431,1000.9219,20,0);

	AddStaticPickup(1239, 2, 2566.3870,2252.6050,2.189); // Voleur de voiture
    Create3DTextLabel("Job : Voleur de voiture /prendrejob",0x0000FFFF, 2566.3870,2252.6050,2.189,20,0);

	AddStaticPickup(1239, 2, 2268.6116,1388.8862,42.8203); // Job faussaire
    Create3DTextLabel("Job : Faussaire /prendrejob",0x0000FFFF, 2268.6116,1388.8862,42.8203,20,0);

	AddStaticPickup(1314, 2, 2292.0945,2452.4775,10.8203); // arrest
    Create3DTextLabel("/arreter",0x0000FFFF, 2292.0945,2452.4775,10.8203,20,0);

	AddStaticPickup(1314, 2, 2293.1460,2467.8892,10.8203); // arret
    Create3DTextLabel("/arreter",0x0000FFFF, 2293.1460,2467.8892,10.8203,20,0);

	// Entrances and exits start
	AddStaticPickup(1239, 2, 2315.4529,0.3478,26.7422); // Banque pick up
    Create3DTextLabel("Banque: Salle des Coffres",0x0000FFFF, 2315.4529,0.3478,26.7422,20,0);

	AddStaticPickup(1239, 2, 2085.1211,2074.0354,11.0547); // Sex shop 1
    Create3DTextLabel("Sex Shop 1",0x0000FFFF, 2085.1211,2074.0354,11.0547,20,0);

	AddStaticPickup(1239, 2, 2515.3142,2297.2288,10.8203); // Sex Shop 2
    Create3DTextLabel("Sex Shop 2",0x0000FFFF, 2515.3142,2297.2288,10.8203,20,0);

	AddStaticPickup(1239, 2, 2268.3552,2448.8892,3.5313);//PD Building
    Create3DTextLabel("Police Ascenseur",0x0000FFFF, 2268.3552,2448.8892,3.5313,20,0);

	AddStaticPickup(1239, 2, 2268.0820,2448.3660,-7.1953);//PD Building
    Create3DTextLabel("Police Ascenseur",0x0000FFFF, 2268.0820,2448.3660,-7.1953,20,0);

	AddStaticPickup(1239, 2, 2297.0366,2451.4780,10.8203);//PD Building
    Create3DTextLabel("Police Ascenseur",0x0000FFFF, 2297.0366,2451.4780,10.8203,20,0);

	AddStaticPickup(1239, 2, 2454.7717,1499.6946,11.6174);//Alhabra
    Create3DTextLabel("Alhambra",0x0000FFFF, 2454.7717,1499.6946,11.6174,20,0);

	AddStaticPickup(1239, 2, 2310.0183,-1643.4669,14.8270);//10 green
    Create3DTextLabel("Ten Green Bottles",0x0000FFFF, 2310.0183,-1643.4669,14.8270,20,0);

	AddStaticPickup(1239, 2, 1968.6350,2295.8726,16.4559);//Ganton gym
    Create3DTextLabel("Gym",0x0000FFFF, 1968.6350,2295.8726,16.4559,20,0);

	AddStaticPickup(1239, 2, 2506.9031,2120.2952,10.8398);//Pig Pen
    Create3DTextLabel("Pig Pen",0x0000FFFF, 2506.9031,2120.2952,10.8398,20,0);

	AddStaticPickup(1239, 2, 2638.5872,1671.7445,11.0234);//Cluckin bell under it
    Create3DTextLabel("Cluckin Bell",0x0000FFFF, 2638.5872,1671.7445,11.0234,20,0);

	AddStaticPickup(1239, 2, 2393.1328,2041.5737,10.8203);//Cluckin bell next to 10 green
    Create3DTextLabel("Cluckin Bell",0x0000FFFF, 2393.1328,2041.5737,10.8203,20,0);

	AddStaticPickup(1239, 2, 2472.8655,2034.0881,11.0625);//Marina burger Burger shot
    Create3DTextLabel("Burger shot",0x0000FFFF, 2472.8655,2034.0881,11.0625,20,0);

	AddStaticPickup(1239, 2, 2102.3000,2228.8362,11.0234);//Cluckin above it
    Create3DTextLabel("Cluckin bell",0x0000FFFF, 2102.3000,2228.8362,11.0234,20,0);
    
	AddStaticPickup(1239, 2, 1872.2670,2071.7517,11.0625);//Vinewood burger
    Create3DTextLabel("Burger shot",0x0000FFFF, 1872.2670,2071.7517,11.0625,20,0);
    
	AddStaticPickup(1239, 2, 2546.5952,1972.3506,10.8203);//24/7 gas station vinewood
    Create3DTextLabel("24/7",0x0000FFFF, 1557.6044,990.6632,10.8203,20,0);
    
	AddStaticPickup(1239, 2, 1557.6044,990.6632,10.8203);//24/7 vinewood
    Create3DTextLabel("24/7",0x0000FFFF, 1557.6044,990.6632,10.8203,20,0);
    
	AddStaticPickup(1239, 2, 2638.7871,1849.7618,11.0234);//Pizzaboy
    Create3DTextLabel("Pizzaboy",0x0000FFFF, 2638.7871,1849.7618,11.0234,20,0);
	AddStaticPickup(1239, 2, 2083.3252,2224.6978,11.0234);//Pizzaboy
    Create3DTextLabel("Pizzaboy",0x0000FFFF, 2083.3252,2224.6978,11.0234,20,0);
    
	AddStaticPickup(1239, 2, 2194.9373,1991.0553,12.2969); // 24-7 Entrance
    Create3DTextLabel("24/7",0x0000FFFF, 2194.9373,1991.0553,12.2969,20,0);
	AddStaticPickup(1239, 2, -25.1326,-141.0670,1003.5469); // 24-7 Exit
    Create3DTextLabel("24/7",0x0000FFFF, -25.1326,-141.0670,1003.5469,20,0);
	AddStaticPickup(1239, 2, 2247.7297,2396.1682,10.8203); // 24/7 devant comi
    Create3DTextLabel("24/7",0x0000FFFF, 2247.7297,2396.1682,10.8203,20,0);
	AddStaticPickup(1239, 2, 2452.4722,2065.1846,10.8203);//24/7 Near DMV
    Create3DTextLabel("24/7",0x0000FFFF, 2452.4722,2065.1846,10.8203,20,0);
	AddStaticPickup(1239, 2, 2637.2947,1129.6770,11.1797);//24/7 Near 8-Ball
    Create3DTextLabel("24/7",0x0000FFFF, 2637.2947,1129.6770,11.1797,20,0);
    
	AddStaticPickup(1239, 2, 2638.0869,2352.1033,10.8203);//Madd dog crib
    Create3DTextLabel("QG de La Famille RiderZ",0x0000FFFF, 2638.0869,2352.1033,10.8203,20,0);
 	AddStaticPickup(1239, 2, 2388.8228,2465.9277,10.8203);//FBI
    Create3DTextLabel("FBI",0x0000FFFF, 2388.8228,2465.9277,10.8203,20,0);
	AddStaticPickup(1239, 2, 2448.8418,1722.8167,10.8203);//Jim's sticky ring
    Create3DTextLabel("Jim' sticky ring",0x0000FFFF, 2448.8418,1722.8167,10.8203,20,0);
	AddStaticPickup(1239, 2, 349.5560,161.6693,1019.9912); //Heal me
    Create3DTextLabel("/healme",0x0000FFFF, 349.5560,161.6693,1019.9912,20,0);
	AddStaticPickup(1239, 2, 2581.3052,1060.5470,11.7828); //Vagos HQ
    Create3DTextLabel("/Surenos HQ",0x0000FFFF, 2581.3052,1060.5470,11.7828,20,0);
	AddStaticPickup(1239, 2, 2364.8940,2377.4761,10.8203); //ABC studio
    Create3DTextLabel("ABC Studio",0x0000FFFF, 1792.0664,-1286.7233,13.6617,20,0);
    AddStaticPickup(1239, 2, 1792.0664,-1286.7233,13.6617); //ABC studio
    
	AddStaticPickup(1239, 2, 1752.8452,-1894.1328,13.5573); //LA Yellow Cab Co.
    Create3DTextLabel("LA Yellow Cab Co.",0x0000FFFF, 1752.8452,-1894.1328,13.5573,20,0);
	AddStaticPickup(1239, 2, 2445.5481,-1758.8947,13.5919); //Top Shottas HQ
    Create3DTextLabel("Top Shottas HQ",0x0000FFFF, 2445.5481,-1758.8947,13.5919,20,0);
	AddStaticPickup(1239, 2, 1165.5927,1346.5027,10.9219); //DMW
    Create3DTextLabel("Centre D'exercice",0x0000FFFF, 1165.5927,1346.5027,10.9219,20,0);
	AddStaticPickup(1239, 2, 203.5140,-202.2578,1.5781); //Pizza stack at BlueBerry
    //Create3DTextLabel("Centre D'exercice",0x0000FFFF, 2029.5945,-1404.6426,17.2512,20,0);
	AddStaticPickup(1247, 2, 2290.1006,2430.7295,10.8203); // Comissaria Police Station
    Create3DTextLabel("Commissariat de police",0x0000FFFF, 2290.1006,2430.7295,10.8203,20,0);
	AddStaticPickup(1239, 2, 1570.3828,-1333.8882,16.4844); // Building next ABC
    Create3DTextLabel("Building ABC Studio",0x0000FFFF, 1570.3828,-1333.8882,16.4844,20,0);
	AddStaticPickup(1239, 2, 1456.6678,2773.4307,10.8203); // Yamaguchi HQ
    Create3DTextLabel("HQ MS 13 ",0x0000FFFF, 1456.6678,2773.4307,10.8203,20,0);
    
	AddStaticPickup(1239, 2, 1505.2416,-1694.5597,14.0469); // Journal
    Create3DTextLabel("/journal",0x0000FFFF, 1505.2416,-1694.5597,14.0469,20,0);
   	AddStaticPickup(1239, 2, 1749.0442,-1861.8928,13.5770); // Journal
    Create3DTextLabel("/guide",0x0000FFFF, 1749.0442,-1861.8928,13.5770,20,0);
	AddStaticPickup(1239, 2, 2127.5474,2378.6277,10.8203); // Chornaya Bratva HQ
    Create3DTextLabel("HQ Ruskovf",0x0000FFFF, 2127.5474,2378.6277,10.8203,20,0);
	AddStaticPickup(1239, 2, 2276.9663,2458.7051,38.6837); // Helico lvpd
	Create3DTextLabel("Toit du Commissariat de LA",0x0000FFFF, 2276.9663,2458.7051,38.6837,20,0);
	AddStaticPickup(1318, 2, 2007.7874,1167.5256,10.8203); // Boite de nuit
	Create3DTextLabel("The Sun",0x0000FFFF, 2007.7874,1167.5256,10.8203,20,0);
    //2576.7900,-1284.8854,1054.6406
    //LS
	AddStaticPickup(1239, 2, 2046.5029,-1907.9750,13.5469); // AUTO ECOLE !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    Create3DTextLabel("Auto-Ecole",0x0000FFFF, 2046.5029,-1907.9750,13.5469,20,0);
    AddStaticPickup(1239, 2, 1490.3195,1305.6976,1093.2964); // Licenses Menu/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//AddStaticPickup(1239, 2, 1087.6921,-922.4852,43.3906); // sex shop LS
	AddStaticPickup(1239, 2, 1309.8829,-1367.7006,13.5390); // TRibunal LS
	AddStaticPickup(1239, 2, 2179.0415,-1660.6899,14.9431); // Appartement dealer 1
	AddStaticPickup(1239, 2, 2164.4695,-1703.0287,15.0818); // Appartement dealer déchargement 1
	AddStaticPickup(1239, 2, 2366.4331,-2015.1521,13.7715); //Emplacement n°1 camion ( chargement )
	AddStaticPickup(1279, 2, 2442.5442,-1425.7607,24.0000); //Emplacement n°2 camion ( déchargement )
	AddStaticPickup(1239, 2, 1173.2563,-1323.3102,15.3943); //Hospital 1 near Ammu
	AddStaticPickup(1239, 2, 2029.5945,-1404.6426,17.2512); //Hospital 2 near speedway
	AddStaticPickup(1239, 2, 1366.4325,-1275.2096,13.5469); //ArmsDealer Registration
	AddStaticPickup(1239, 2, 2072.5486,-1582.8029,13.4741); //JOB être Drugs dealer
	AddStaticPickup(1239, 2, 1215.1304,-11.8431,1000.9219); //JOB Etre pute
	AddStaticPickup(1239, 2, -86.1251,2.6412,3.1172); //Drugs Farmer
	AddStaticPickup(1239, 2, 2847.4922,-2504.8691,14.6081); //materials deliver
    AddStaticPickup(1239, 2, 349.5560,161.6693,1019.9912); //healme
	AddStaticPickup(1239, 2, -792.9693,500.5572,1367.3672);//Waiter uniform list
	AddStaticPickup(1239, 2, -779.3134,497.8989,1371.7490);//Waiter uniform list 2
	AddStaticPickup(1239, 2, 242.7591,66.4315,1003.6406); // Inside PD elevator
	AddStaticPickup(1239, 2, 1481.0206,-1771.1138,18.7958); //City Hall
	AddStaticPickup(1239, 2, 1381.0413,-1088.8511,27.3906); //Bill Board (old Job Department) <- "mission"
    //AddStaticPickup(1239, 2, 1793.02,-1296.56,13.44); //[/paper] paper boy + news reporter
    //AddStaticPickup(1239, 2, 1073.0619,-344.5148,73.9922); //Calviconi Agency entrance
    AddStaticPickup(1242, 2, 1527.5,-12.1,1002.0); // binco armor
    AddStaticPickup(1240, 2, 279.3000,1853.5619,8.7649); // area51 health
	AddStaticPickup(1239, 2, 2101.7620,-1812.5922,13.5547); // PizzaBoy JobLocations
    AddStaticPickup(1239, 2, 1174.9100,-1365.7330,13.9876); // Elevator 1
	AddStaticPickup(1239, 2, 1174.9591,-1369.8761,23.9736); // Elevator 2
	AddStaticPickup(1239, 2, 379.1396,-114.2661,1001.4922); // Pizza Pickup
	AddStaticPickup(1239, 2, 359.6820,207.0294,1008.3828); // AD (/pub)
    AddStaticPickup(1239, 2, -382.6660,-1426.5121,26.2410); // Fermier l'emploi (Locations)
	AddStaticPickup(1239, 2, 1611.5129,-1893.6997,13.5469); // Balayeur de rue (Locations)
	// Entrances and exits start
	AddStaticPickup(1247, 2, 1554.9537,-1675.6584,16.1953);//Police Departmen enter
	Create3DTextLabel("LSPD",0x0000FFFF,1554.9537,-1675.6584,17.1953,10,0);
    AddStaticPickup(1240, 2, 263.1702,76.4346,1001.0391); // Jail health
	AddStaticPickup(1239, 2, 1836.4064,-1682.4403,13.3493);//Alhabra
	AddStaticPickup(1239, 2, 2310.0183,-1643.4669,14.8270);//10 green
	AddStaticPickup(1239, 2, 2244.3423,-1665.5542,15.4766);//binco next to it
	AddStaticPickup(1239, 2, 2229.9011,-1721.2582,13.5613);//Ganton gym (Boxeur l'emploi)
	AddStaticPickup(1239, 2, 2421.4998,-1219.2438,25.5617);//Pig Pen (Prostituer emploi)
	AddStaticPickup(1239, 2, 2419.9941,-1509.5865,24.0000);//Cluckin bell under it
	AddStaticPickup(1239, 2, 2398.6240,-1899.2014,13.5469);//Cluckin bell next to 10 green
	AddStaticPickup(1239, 2, 810.4849,-1616.2451,13.5469);//Marina burger
	AddStaticPickup(1239, 2, 928.9110,-1352.9958,13.3438);//Cluckin above it
	AddStaticPickup(1239, 2, 1199.2477,-918.1447,43.1233);//Vinewood burger
	AddStaticPickup(1239, 2, 1000.5861,-919.8832,42.3281);//24/7 gas station vinewood
	AddStaticPickup(1239, 2, 1315.4581,-897.6843,39.5781);//24/7 vinewood
    AddStaticPickup(1239, 2, 2105.4858,-1806.4725,13.5547);//Pizzaboy
	AddStaticPickup(1239, 2, -2441.9749,754.0135,35.1786); // 24-7 Entrance
	AddStaticPickup(1239, 2, -25.1326,-141.0670,1003.5469); // 24-7 Exit
	AddStaticPickup(1239, 2, 1352.1194,-1759.2534,13.5078);//24/7 Near DMV enter
	AddStaticPickup(1239, 2, 1833.6124,-1842.4968,13.5781);//24/7 Near 8-Ball enter
	AddStaticPickup(1239, 2, 1298.7075,-798.5981,84.1406);//Madd dog crib
	//AddStaticPickup(1239, 2, 1518.5179,-1452.9224,14.2031);//FBI
	AddStaticPickup(1239, 2, 1038.0298,-1339.9967,13.7361);//Jim's sticky ring
    AddStaticPickup(1239, 2, 2495.9155,-1692.2400,1014.7422); // Gang Groove Street exit
	//AddStaticPickup(1239, 2, 2495.6208,-1690.9980,14.7656); //Gang Groove Street enter
	
	AddStaticPickup(1239, 2, 1752.8452,-1894.1328,13.5573); //LA Yellow Cab Co.
	AddStaticPickup(1239, 2, 203.5140,-202.2578,1.5781); //Pizza stack at BlueBerry
	AddStaticPickup(1239, 2, 1570.3828,-1333.8882,16.4844); // Building next ABC
	AddStaticPickup(1239, 2, 1122.7406,-2037.0421,69.8942); // Chornaya Bratva HQ
    AddStaticPickup(1314, 2, 1528.779,-1678.113,5.890625); //Arrest Place police
    AddStaticPickup(1314, 2, 1658.6390,-1691.3785,15.6094); //Arrest Place FBI //1658.6390,-1691.3785,15.6094 1510.5193,-1467.4611,9.5000
	AddStaticPickup(1239, 2, 1524.5724,-1677.8043,6.2188); // PD Tunnel
    AddStaticPickup(1239, 2, 1557.7257,-1675.2711,28.3955); // PD roof
	AddStaticPickup(1254, 2, 1424.1024,-1317.6764,13.5547); // Materials get
    AddStaticPickup(1239, 2, 2022.1492,-1108.7837,26.2031); // Drugs Smuggler pickup
    AddStaticPickup(1239, 2, 362.1231,173.6424,1008.3828); // /Legal Job Menu
    AddStaticPickup(1239, 2, 1490.3195,1305.6976,1093.2964); // Licenses Menu
	// Entrances and exits ends
    AddStaticPickup(1314, 2, 1528.779,-1678.113,5.890625); //Arrest Place
	//AddStaticPickup(1239, 2, 1043.4530,-1028.0344,32.1016); //Fernandez tuning
    //AddStaticPickup(1239, 2, 2073.2979,-1831.1228,13.5469); // Pay & Spray
    //AddStaticPickup(1239, 2, 1024.9756,-1030.7930,32.0257); // Pay & Spray
    //AddStaticPickup(1239, 2, 488.3819,-1733.0563,11.1752); // Pay & Spray
    //AddStaticPickup(1239, 2, 719.8940,-464.8272,16.3359); // Pay & Spray
    AddStaticPickup(1239, 2, 242.7591,66.4315,1003.6406); // Inside PD elevator
    //Create3DTextLabel("/+1",0x0000FFFF, 2007.7874,1167.5256,10.8203,20,0);
	AddStaticPickup(1239, 2, 1524.5724,-1677.8043,6.2188); // PD Tunnel
    AddStaticPickup(1239, 2, 1557.7257,-1675.2711,28.3955); // PD roof

     AddStaticPickup(1239, 2, 2000.0508,-1114.0536,27.1250); // Ballas HQ
   	Create3DTextLabel("Ballas HQ",0x0000FFFF, 2000.0508,-1114.0536,27.1250,20,0);

	AddStaticPickup(1239, 2, 2770.6982,-1628.7228,12.1775); // Hitman HQ
	Create3DTextLabel("Ballas HQ",0x0000FFFF, 2000.0508,-1114.0536,27.1250,20,0);

	//AddStaticPickup(1239, 2, 826.6191,-613.4954,16.3359); // GARAGE Bikers HQ
	//Create3DTextLabel("Garage Bikers",0x0000FFFF, 826.6191,-613.4954,16.3359,20,0);
	//AddStaticPickup(1239, 2, 854.5645,-605.0123,18.4219); // Bikers HQ
	//Create3DTextLabel("Bikers HQ",0x0000FFFF, 854.5645,-605.0123,18.4219,20,0);

	AddStaticPickup(1239, 2, 2495.3254,-1691.1366,14.7656); //Groove HQ
	Create3DTextLabel("Groove HQ",0x0000FFFF, 2495.3254,-1691.1366,14.7656,20,0);

	AddStaticPickup(1239, 2, 1828.1594,-1980.4380,13.5469); //Vagos HQ
	Create3DTextLabel("Vagos HQ",0x0000FFFF, 1828.1594,-1980.4380,13.5469,20,0);

	AddStaticPickup(1239, 2, 659.0,-626.2,16.3); //Hitman Agency entrance
	Create3DTextLabel("Hitman HQ",0x0000FFFF, 659.0,-626.2,16.3,20,0);

	AddStaticPickup(1239, 2, 1303.1649,-980.2634,38.3527); //CIA HQ Entrée
	Create3DTextLabel("CIA HQ",0x0000FFFF, 1303.1649,-980.2634,38.3527,20,0);
	AddStaticPickup(1239, 2, 246.4302,107.4845,1003.2188); //CIA HQ Sortie
	Create3DTextLabel("SORTIE",0x0000FFFF, 246.4302,107.4845,1003.2188,20,0);


    AddStaticPickup(1254, 2, 2408.5229,1837.7008,6.0156); // Materials pickup /contrebandematos
    Create3DTextLabel("/contrebandematos",0x0000FFFF, 2408.5229,1837.7008,6.0156,20,0);

	AddStaticPickup(1254, 2, 930.4985,2150.1475,10.8203); // Materials bank /achetermatos
    Create3DTextLabel("/achetermatos",0x0000FFFF, 930.4985,2150.1475,10.8203,20,0);

	AddStaticPickup(1279, 2, 1424.1729,-1317.9955,13.5547); // Get Drugs Pickup 2 /prendre drogue
    Create3DTextLabel("/prendre drogue",0x0000FFFF, 1424.1729,-1317.9955,13.5547,20,0);

	AddStaticPickup(1239, 2, 362.1231,173.6424,1008.3828); // Legal Job Menu /legaljobs
    Create3DTextLabel("[Vous cherchez du travail ? Faites /aideanpe]",0x0000FFFF, 362.1231,173.6424,1008.3828,20,0);

    AddStaticPickup(1239, 2, 362.1231,173.6424,1008.3828); // Illegal Jobs Menu /jobsillegaux
    Create3DTextLabel("/jobsillegaux",0x0000FFFF, 2062.4106,-1556.5736,13.4482,20,0);

    AddStaticPickup(1275, 2,2244.3572,-1665.5575,15.4766);// Brooklyn Sgop
    Create3DTextLabel("Brooklyn Shop",0xB40100FF, 2244.3572,-1665.5575,15.4766,20,0);

    AddStaticPickup(1318, 2,1833.7747,-1842.5409,13.5781);// 24/7 Gare
    Create3DTextLabel("24/7",0xB40100FF, 1833.7747,-1842.5409,13.5781,20,0);

    AddStaticPickup(1318, 2,1482.6469,-1772.3138,18.7958);// Mairie 2
    Create3DTextLabel("Mairie",0xB40100FF, 1482.6469,-1772.3138,18.7958,20,0);

	//ANPE
	AddStaticPickup(1318, 2,1727.0532,-1636.6693,20.2172);// ANPE
	Create3DTextLabel("A.N.P.E",0x0000FFFF, 1726.8065,-1636.9882,22.8779,20,0);

	/*AddStaticPickup(1239, 2,1735.0490,-1642.6157,23.7570); // Fermier
	Create3DTextLabel("Fermier\n/entretien",0xB40100FF,1735.0490,-1642.6157,23.7570,20,0);

	AddStaticPickup(1239, 2,1735.0580,-1648.1445,23.7449); // Pizza Boy
	Create3DTextLabel("Pizza Boy\n/entretien",0xB40100FF,1735.0580,-1648.1445,23.7449,20,0);

	AddStaticPickup(1239, 2,1735.0833,-1654.2095,23.7316); // Camionneur
	Create3DTextLabel("Camionneur\n/entretien",0xB40100FF,1735.0833,-1654.2095,23.7316,20,0);

	AddStaticPickup(1239, 2,1735.1013,-1660.1799,23.7185); // Conducteur de Bus
	Create3DTextLabel("Conducteur de Bus\n/entretien",0xB40100FF,1735.1013,-1660.1799,23.7185,20,0);

	AddStaticPickup(1239, 2,-77.4017,-1136.6041,0.6975); // camionneur
	Create3DTextLabel("Camionneur",0xB40100FF,-77.4017,-1136.6041,0.6975,20,0);

	AddStaticPickup(1239, 2,2100.7536,-1811.9603,13.0991); // livreur
	Create3DTextLabel("Livreur de Pizza",0xB40100FF,2100.7536,-1811.9603,13.0991,20,0);

	AddStaticPickup(1239, 2,1666.6013,-1902.7270,13.1663); // nettoyeur
	Create3DTextLabel("Nettoyeur",0xB40100FF,1666.6013,-1902.7270,13.1663,20,0);

	AddStaticPickup(1239, 2,1857.4820,-1870.9549,13.0809); // pute
	Create3DTextLabel("Putes",0xB40100FF,1857.4820,-1870.9549,13.0809,20,0);

	AddStaticPickup(1239, 2,1343.9377,-1771.5101,13.0883); // dealer de dorogue
	Create3DTextLabel("Dealer de drogue",0xB40100FF,1343.9377,-1771.5101,13.0883,20,0);

	AddStaticPickup(1239, 2,2445.4218,-1759.4573,13.2351); // dealer d'arme
	Create3DTextLabel("Dealer d'arme",0xB40100FF,2445.4218,-1759.4573,13.2351,20,0);

	AddStaticPickup(1239, 2,2315.4758,0.3543,26.7422); // dealer d'arme
	Create3DTextLabel("Privé",0xB40100FF,2315.4758,0.3543,26.7422,20,0);

    AddStaticPickup(1239, 2,-381.7037,-1426.4058,25.7590); // fermier
	Create3DTextLabel("Fermier",0xB40100FF,-381.7037,-1426.4058,25.7590,20,0);*/




 	//-----------porte/grille/barirer---------
 	grillefouriere = CreateObject(980, 2203.923828125, -1977.1910400391, 15.331029891968, 0, 0, 270.67565917969);
	pdgate1 = CreateObject(971,1589.053344,-1638.123168,14.122960,0.000000,0.000000,180);
	pdgate2 = CreateObject(968,1544.700317,-1630.735717,13.096980,-1.000000,-91.000000,269.972869);
	lspddoor1 = CreateObject(1500, 245.0578,72.4314,1002.5406,0, 0.0000, 0.0000);
	lspddoor2 = CreateObject(1500, 245.9478,72.4314,1002.5406,0, 0.0000, 0.0000);
	/*armygate1 = CreateObject(969, 2720.3772,-2409.7523,12.6,0, 0.0000, 90);
	armygate2 = CreateObject(969, 2720.3772,-2508.3069,12.6,0, 0.0000, 90);*/
	fbigate = CreateObject(980, 1534.9020,-1451.5979,14.4882,0, 0.0000, 0);
	hspdgate = CreateObject(971, 1643.3379,-1714.9338,14.4067,0, 0.0000, 90);
	CreateObject(1536, 222.134,67.850,1003.98,0, 0.0000, 90);//Modification commissariat
	Portecommi = CreateObject(1536, 222.134,69.276,1003.98,0, 0.0000, 90);
	//-----------Auto ecole grillage------------------------------------------------
	/*CreateObject(1412, 2047.91,-1922.11,13.7188,0, 0.0000, 0);
	CreateObject(1412, 2063.19,-1922.15,13.7188,0, 0.0000, 0);
	CreateObject(1412, 2068.47,-1922.2,13.7188,0, 0.0000, 0);
	CreateObject(1412, 2072.03,-1919.36,13.7188,0, 0.0000, 90);
	CreateObject(1412, 2071.79,-1899.89,13.7188,0, 0.0000, 90);
	CreateObject(1412, 2071.81,-1905.21,13.7188,0, 0.0000, 90);*/
	//-------------------------------------------------Banque------------------------------------------------------------
	//secubanque = CreateObject(980, 2144.7109375, 1606.787109375, 998.71154785156, 0, 0, 0);
	blindebanque = CreateObject(2634, 2144.1813964844, 1626.6809082031, 994.26220703125, 0, 0, 179.77966308594);


CreateObject(18248, 2346.2668457031, -2370.2778320313, 20.605590820313, 0, 0, 0);
CreateObject(4520, 2339.2170410156, -2354.5905761719, 14.380284309387, 0, 0, 136.96447753906);
CreateObject(4520, 2410.6450195313, -2425.6396484375, 14.375, 0, 0, 314.34533691406);
CreateObject(3091, 2332.7839355469, -2344.4816894531, 13.027853965759, 0, 0, 223.03601074219);
CreateObject(3091, 2328.9799804688, -2348.0212402344, 13.027853965759, 0, 0, 223.03601074219);
CreateObject(3057, 2363.599609375, -2370.0588378906, 12.925066947937, 0, 0, 0);
CreateObject(3057, 2362.0932617188, -2370.1203613281, 12.766288757324, 0, 0, 0);
CreateObject(3057, 2360.5048828125, -2370.0300292969, 12.766288757324, 0, 0, 0);
CreateObject(3057, 2358.1206054688, -2369.9702148438, 12.766288757324, 0, 0, 0);
CreateObject(2960, 2393.52734375, -2404.259765625, 12.779927253723, 0, 0, 125.05383300781);
CreateObject(2960, 2389.123046875, -2409.2470703125, 12.779926300049, 0, 0, 221.05041503906);
CreateObject(2960, 2385.4206542969, -2409.3247070313, 12.938705444336, 0, 0, 0);
CreateObject(2960, 2383.4306640625, -2397.23828125, 12.779927253723, 0, 0, 0);
CreateObject(2960, 2373.5144042969, -2394.8403320313, 12.779927253723, 0, 0, 3.969970703125);
CreateObject(3274, 2358.6838378906, -2375.8862304688, 12.380284309387, 0, 0, 43.669799804688);
CreateObject(16092, 2412.6171875, -2427.9174804688, 12.375, 0, 0, 314.34533691406);
CreateObject(4519, 2266.2392578125, -2662.83984375, 14.434345245361, 0, 0, 181.35131835938);
CreateObject(4519, 2380.5693359375, -2662.560546875, 14.498741149902, 0, 0, 0);
CreateObject(16092, 2365.7932128906, -2663.3181152344, 12.500807762146, 0, 0, 358.01501464844);
CreateObject(16092, 2280.3464355469, -2663.3330078125, 12.572898864746, 0, 0, 0);
CreateObject(16132, 2327.5080566406, -2671.7868652344, 15.780487060547, 0, 0, 268.69067382813);
CreateObject(16132, 2321.6723632813, -2654.5773925781, 15.746337890625, 0, 0, 89.324493408203);
CreateObject(16132, 2372.6528320313, -2400.9353027344, 14.380284309387, 0, 0, 225.02099609375);
CreateObject(16132, 2380.5666503906, -2384.0061035156, 14.514866828918, 0, 0, 45.65478515625);
CreateObject(1685, 2776.3674316406, -2407.6318359375, 13.39506816864, 0, 0, 0);
CreateObject(1685, 2778.1450195313, -2407.611328125, 13.396134376526, 0, 0, 0);
CreateObject(1685, 2779.9157714844, -2407.5688476563, 13.385586738586, 0, 0, 0);
CreateObject(1685, 2781.6506347656, -2407.5952148438, 13.385161399841, 0, 0, 0);
CreateObject(1685, 2776.3688964844, -2409.2507324219, 13.40061378479, 0, 0, 0);
CreateObject(1685, 2778.1379394531, -2409.2456054688, 13.3860206604, 0, 0, 0);
CreateObject(1685, 2779.9025878906, -2409.2414550781, 13.385589599609, 0, 0, 0);
CreateObject(1685, 2781.6630859375, -2409.1733398438, 13.385158538818, 0, 0, 0);
CreateObject(1963, 2788.7309570313, -2417.6938476563, 13.036235809326, 0, 0, 270.67565917969);
CreateObject(1279, 2791.9836425781, -2422.9904785156, 13.723635673523, 0, 0, 0);
CreateObject(1279, 2783.7485351563, -2412.3564453125, 12.816630363464, 0, 0, 0);
CreateObject(1279, 2797.1918945313, -2412.4743652344, 12.813347816467, 0, 0, 0);
CreateObject(1279, 2783.9931640625, -2422.9814453125, 13.684573173523, 0, 0, 0);
CreateObject(1279, 2783.8381347656, -2422.9970703125, 14.380410194397, 0, 0, 0);
CreateObject(1279, 2783.6455078125, -2424.5505371094, 15.198198318481, 0, 0, 0);
CreateObject(1279, 2783.435546875, -2424.5534667969, 12.81670665741, 0, 0, 0);
CreateObject(1279, 2792.2573242188, -2412.4982910156, 12.814553260803, 0, 0, 0);
CreateObject(1279, 2788.8740234375, -2416.9978027344, 12.815379142761, 0, 0, 0);
CreateObject(1279, 2788.8388671875, -2417.8835449219, 12.81538772583, 0, 0, 0);
CreateObject(1279, 2788.673828125, -2418.548828125, 13.565428733826, 0, 0, 0);
CreateObject(1671, 2790.0642089844, -2417.5629882813, 13.093322753906, 0, 0, 270.67565917969);
CreateObject(1685, 2776.3156738281, -2428.2954101563, 13.386466026306, 0, 0, 0);
CreateObject(1685, 2778.0727539063, -2428.2902832031, 13.386035919189, 0, 0, 0);
CreateObject(1685, 2779.8332519531, -2428.29296875, 13.385606765747, 0, 0, 0);
CreateObject(1685, 2781.5517578125, -2428.2866210938, 13.385186195374, 0, 0, 0);
CreateObject(1685, 2776.3342285156, -2426.6435546875, 13.38646030426, 0, 0, 0);
CreateObject(1685, 2778.0964355469, -2426.634765625, 13.386030197144, 0, 0, 0);
CreateObject(1685, 2779.8100585938, -2426.6547851563, 13.385612487793, 0, 0, 0);
CreateObject(1685, 2781.5773925781, -2426.5891113281, 13.385179519653, 0, 0, 0);
CreateObject(3886, 2815.3034667969, -2437.1669921875, 11.508083343506, 0, 0, 268.69067382813);
CreateObject(2669, 2845.7416992188, -2504.9982910156, 14.948335647583, 0, 0, 89.324493408203);
CreateObject(3066, 2843.4770507813, -2513.3371582031, 17.559387207031, 0, 0, 89.324493408203);
CreateObject(3052, 2843.6904296875, -2506.2094726563, 13.85698890686, 0, 0, 0);
CreateObject(3052, 2843.6989746094, -2505.8391113281, 13.85698890686, 0, 0, 0);
CreateObject(3052, 2843.7016601563, -2505.45703125, 13.85698890686, 0, 0, 0);
CreateObject(3052, 2843.7026367188, -2505.0690917969, 13.85698890686, 0, 0, 0);
CreateObject(3052, 2843.7067871094, -2504.6911621094, 13.85698890686, 0, 0, 0);
CreateObject(3052, 2843.72265625, -2504.3139648438, 13.85698890686, 0, 0, 0);
CreateObject(3052, 2843.73046875, -2503.9326171875, 13.85698890686, 0, 0, 0);
CreateObject(3015, 2843.7373046875, -2506.1765136719, 14.014999389648, 0, 0, 0);
CreateObject(3015, 2843.7365722656, -2505.7795410156, 14.014999389648, 0, 0, 0);
CreateObject(3015, 2843.7351074219, -2505.3815917969, 14.014999389648, 0, 0, 0);
CreateObject(3015, 2843.6945800781, -2505.0185546875, 14.014999389648, 0, 0, 0);
CreateObject(3015, 2843.6960449219, -2504.6552734375, 14.014999389648, 0, 0, 0);
CreateObject(3015, 2843.736328125, -2504.2768554688, 14.014999389648, 0, 0, 0);
CreateObject(3015, 2843.7741699219, -2503.9033203125, 14.014999389648, 0, 0, 0);
CreateObject(2358, 2844.3728027344, -2505.9357910156, 13.84722328186, 0, 0, 89.324493408203);
CreateObject(2358, 2844.4187011719, -2504.4685058594, 13.84722328186, 0, 0, 87.339508056641);
CreateObject(2173, 2846.2062988281, -2504.3649902344, 13.730688095093, 0, 0, 268.69067382813);
CreateObject(1714, 2845.5576171875, -2504.9040527344, 13.730688095093, 0, 0, 87.339508056641);
CreateObject(2044, 2846.2456054688, -2505.6196289063, 14.559874534607, 0, 0, 0);
CreateObject(2036, 2846.3989257813, -2504.2133789063, 14.566267967224, 0, 0, 0);
CreateObject(2035, 2846.4057617188, -2505.2351074219, 14.556778907776, 0, 0, 0);
CreateObject(1672, 2846.6159667969, -2504.3444824219, 14.738060951233, 0, 0, 0);
CreateObject(2064, 2848.7155761719, -2496.8742675781, 14.237282752991, 0, 0, 0);
CreateObject(2064, 2846.1608886719, -2496.9985351563, 14.237282752991, 0, 0, 0);
CreateObject(2064, 2843.6052246094, -2496.9790039063, 14.237282752991, 0, 0, 0);
CreateObject(2064, 2840.7138671875, -2497.0385742188, 14.237282752991, 0, 0, 0);
CreateObject(2064, 2837.162109375, -2497.0400390625, 14.237282752991, 0, 0, 0);
CreateObject(2957, 2799.3020019531, -2430.2678222656, 14.932285308838, 0, 0, 0);
CreateObject(2957, 2799.2041015625, -2405.4187011719, 14.934110641479, 0, 0, 0);
CreateObject(3091, 2314.2917480469, -2119.6535644531, 13.199343681335, 0, 0, 45.65478515625);
CreateObject(3091, 2322.205078125, -2111.1552734375, 13.184111595154, 0, 0, 47.639770507813);
CreateObject(17065, 2313.0578613281, -2108.4821777344, 16.696804046631, 0, 0, 316.33032226563);
CreateObject(4642, 2314.8359375, -2106.3039550781, 14.057982444763, 0, 0, 136.96447753906);
CreateObject(1616, 2320.6296386719, -2111.802734375, 18.18440246582, 0, 0, 142.91952514648);
CreateObject(1616, 2303.5642089844, -2107.1970214844, 17.564027786255, 0, 0, 334.19519042969);
CreateObject(1245, 2822.857421875, -2436.580078125, 10.82631778717, 0, 0, 0);
CreateObject(987, 1642.7526855469, -1692.0639648438, 20.680618286133, 0, 0, 268.69067382813);
CreateObject(987, 1642.6276855469, -1699.8494873047, 20.680620193481, 0, 0, 270.67565917969);
CreateObject(987, 1643.1708984375, -1722.9370117188, 20.682811737061, 0, 0, 0);
CreateObject(987, 1655.1228027344, -1722.9370117188, 20.682430267334, 0, 0, 0);
CreateObject(987, 1663.5480957031, -1722.9370117188, 20.679977416992, 0, 0, 0);
CreateObject(987, 1675.2336425781, -1703.8896484375, 20.7057056427, 0, 0, 89.324493408203);
CreateObject(987, 1675.1420898438, -1714.5140380859, 20.637603759766, 0, 0, 89.324493408203);
CreateObject(987, 1675.2961425781, -1723.1708984375, 20.7057056427, 0, 0, 91.309509277344);
CreateObject(987, 1676.9559326172, -1693.4061279297, 21.439231872559, 0, 0, 89.324493408203);
CreateObject(987, 1679.3822021484, -1682.2612304688, 20.217002868652, 0, 0, 0);
CreateObject(987, 1687.3487548828, -1681.892578125, 20.211929321289, 0, 0, 0);
CreateObject(987, 1698.9455566406, -1685.3114013672, 20.2109375, 0, 0, 0);
CreateObject(987, 1703.466796875, -1685.173828125, 20.2109375, 0, 0, 0);
CreateObject(987, 1691.7392578125, -1664.3087158203, 20.199611663818, 0, 0, 181.35131835938);
CreateObject(987, 1699.9793701172, -1664.5224609375, 20.205783843994, 0, 0, 179.36633300781);
CreateObject(987, 1680.2166748047, -1664.1091308594, 22.521942138672, 0, 0, 89.324493408203);
CreateObject(987, 1680.2578125, -1652.1118164063, 22.399494171143, 0, 0, 91.309509277344);
CreateObject(987, 1680.1828613281, -1640.4925537109, 22.515625, 0, 0, 89.324493408203);
CreateObject(987, 1680.2578125, -1628.6901855469, 22.428226470947, 0, 0, 89.324493408203);
CreateObject(987, 1680.4226074219, -1621.5489501953, 22.515625, 0, 0, 91.309509277344);
CreateObject(987, 1680.1514892578, -1609.7902832031, 22.515625, 0, 0, 180.63439941406);
CreateObject(987, 1668.2596435547, -1609.9476318359, 22.515625, 0, 0, 180.63439941406);
CreateObject(987, 1656.3638916016, -1609.7578125, 22.515625, 0, 0, 180.63439941406);
CreateObject(987, 1645.2380371094, -1610.2833251953, 18.484329223633, 0, 0, 180.63439941406);
CreateObject(987, 1641.0034179688, -1610.3928222656, 18.265625, 0, 0, 180.63439941406);
CreateObject(987, 1629.3890380859, -1610.099609375, 18.265625, 0, 0, 270.67565917969);
CreateObject(987, 1629.333984375, -1621.7043457031, 19.265625, 0, 0, 270.67565917969);
CreateObject(987, 1629.662109375, -1632.2337646484, 21.515625, 0, 0, 270.67565917969);
CreateObject(987, 1629.6953125, -1644.5738525391, 22.238552093506, 0, 0, 268.69067382813);
CreateObject(987, 1628.9659423828, -1652.1329345703, 22.521944046021, 0, 0, 270.67565917969);
CreateObject(987, 1629.0280761719, -1663.9758300781, 22.517482757568, 0, 0, 0);
CreateObject(987, 1709.3459472656, -1684.794921875, 19.2109375, 0, 0, 0);
CreateObject(1616, 1639.3215332031, -1678.2037353516, 21.052742004395, 0, 0, 0);
CreateObject(1616, 1642.4342041016, -1718.9840087891, 19.204034805298, 0, 0, 0);
CreateObject(1616, 1658.0394287109, -1656.0551757813, 26.074817657471, 0, 0, 87.339508056641);
CreateObject(1616, 1637.2296142578, -1703.9704589844, 19.998441696167, 0, 0, 0);
CreateObject(987, 1633.8583984375, -1660.4577636719, 11.45836353302, 0, 0, 270.67565917969);
CreateObject(987, 1634.5364990234, -1649.6384277344, 11.452704429626, 0, 0, 266.70568847656);
CreateObject(987, 1634.0841064453, -1680.1274414063, 11.543012619019, 0, 0, 314.34533691406);
CreateObject(987, 1633.6630859375, -1668.4827880859, 11.561891555786, 0, 0, 272.66064453125);
CreateObject(2921, 1639.5559082031, -1689.8365478516, 19.05477142334, 0, 0, 0);
CreateObject(2922, 1650.6673583984, -1656.3463134766, 23.428550720215, 0, 0, 176.66015625);
CreateObject(987, 1642.3658447266, -1680.8277587891, 20.937255859375, 0, 0, 270.67565917969);
CreateObject(987, 1642.751953125, -1671.0537109375, 20.711887359619, 0, 0, 268.68713378906);
CreateObject(5821, 2831.8720703125, 983.11114501953, 12.542310714722, 0, 0, 179.47497558594);
CreateObject(9241, 2814.27734375, 994.01287841797, 18.248092651367, 0, 0, 90.275024414063);
CreateObject(16093, 2785.1298828125, 924.35675048828, 9.5808629989624, 0, 0, 359.69519042969);
CreateObject(2921, 1451.5941162109, -1019.7496337891, 28.333118438721, 0, 0, 89.324493408203);
CreateObject(2921, 1472.3773193359, -1019.7496337891, 28.265907287598, 0, 0, 67.489624023438);
CreateObject(2886, 1461.8922119141, -1009.8300170898, 27.658107757568, 0, 0, 0);
CreateObject(954, 1461.3693847656, -1020.4450683594, 32.266250610352, 0, 0, 0);
CreateObject(11245, 1461.6379394531, -1022.94921875, 33.655872344971, 0, 0, 274.64172363281);
CreateObject(3350, 1450.6574707031, -1019.7721557617, 47.140625, 0, 0, 0);
CreateObject(3350, 1472.9875488281, -1019.5892944336, 47.140625, 0, 0, 0);
CreateObject(1337, 1430.5892333984, -1022.4563598633, 23.477350234985, 0, 0, 0);
CreateObject(1337, 1498.4200439453, -1022.626953125, 23.46941947937, 0, 0, 0);
CreateObject(1257, 1505.0972900391, -1028.6379394531, 24.075571060181, 0, 0, 83.369506835938);
CreateObject(1257, 1462.5899658203, -1041.3155517578, 24.107316970825, 0, 0, 270.67565917969);
CreateObject(9314, 1392.1650390625, -1019.4797363281, 42.557060241699, 0, 0, 270.67565917969);
CreateObject(2745, 1406.1245117188, -1021.2518310547, 42.007423400879, 0, 0, 0);
CreateObject(2745, 1411.3905029297, -1021.3289794922, 42.007423400879, 0, 0, 0);
CreateObject(3660, 1441.3502197266, -1022.4242553711, 25.48119354248, 0, 0, 0);
CreateObject(3660, 1482.1162109375, -1022.313293457, 25.48119354248, 0, 0, 0);
CreateObject(3471, 1449.1586914063, -1021.2131958008, 46.9970703125, 0, 0, 268.69067382813);
CreateObject(3471, 1474.9348144531, -1021.4973144531, 46.990837097168, 0, 0, 268.69067382813);
CreateObject(984, 1539.9111328125, -1022.1090087891, 23.714805603027, 0, 0, 336.17614746094);
CreateObject(984, 1544.0354003906, -1012.6645507813, 23.714805603027, 0, 0, 336.17614746094);
CreateObject(984, 1552.9630126953, -1006.3728637695, 23.542930603027, 0, 0, 91.309509277344);
CreateObject(984, 1543.5704345703, -1029.9888916016, 23.66833114624, 0, 0, 73.443603515625);
CreateObject(984, 1555.8552246094, -1033.6396484375, 23.542930603027, 0, 0, 73.443603515625);
CreateObject(6976, 1441.8806152344, -965.01593017578, 38.010768890381, 0, 0, 346.10510253906);
CreateObject(6976, 1487.5869140625, -992.94244384766, 47.9375, 0, 0, 270.67565917969);
CreateObject(10771, 821.21691894531, 2957.826171875, 5.6659030914307, 0, 0, 15.8798828125);
CreateObject(11145, 760.71795654297, 2940.7868652344, 4.4906606674194, 0, 0, 15.894897460938);
CreateObject(11146, 812.41961669922, 2955.9187011719, 12.526651382446, 0, 0, 15.8798828125);
CreateObject(10770, 826.4228515625, 2951.4948730469, 38.8984375, 0, 0, 15.864868164063);
CreateObject(11237, 826.41253662109, 2951.4614257813, 37.830177307129, 0, 0, 15.864868164063);
CreateObject(10772, 822.48114013672, 2958.1677246094, 16.573774337769, 0, 0, 15.970001220703);
CreateObject(11149, 816.76501464844, 2951.2709960938, 12.200719833374, 0, 0, 15.704956054688);
CreateObject(3277, 853.68695068359, 2959.1530761719, 20.46875, 0, 0, 137.20983886719);
CreateObject(10772, 822.49719238281, 2957.982421875, 17.450033187866, 0, 0, 15.864868164063);
CreateObject(3884, 853.74920654297, 2959.103515625, 20.961057662964, 0, 0, 322.28527832031);
CreateObject(3277, 818.30017089844, 2949.150390625, 29.163372039795, 0, 0, 149.92822265625);
CreateObject(3884, 818.23236083984, 2949.2121582031, 29.663372039795, 0, 0, 154.95935058594);
CreateObject(3934, 869.82464599609, 2963.6840820313, 17.454965591431, 0, 0, 286.67028808594);
CreateObject(3051, 2224.3078613281, 1598.2673339844, 1001.9987792969, 316.19500732422, 90.605010986328, 0.4991455078125);
CreateObject(3051, 2146.2026367188, 1603.3017578125, 1002.3298339844, 0, 0, 45.741577148438);
CreateObject(3051, 2146.20703125, 1604.4766845703, 1002.3298339844, 0, 0, 45.741577148438);
CreateObject(3051, 2146.1838378906, 1604.4859619141, 1004.9073486328, 0, 0, 45.991577148438);
CreateObject(3051, 2146.2021484375, 1603.3017578125, 1003.6561279297, 0, 0, 45.741577148438);
CreateObject(3051, 2146.1943359375, 1602.15625, 1004.6551513672, 0, 0, 45.741577148438);
CreateObject(3089, 2146.2668457031, 1603.8620605469, 1002.2575683594, 0, 0, 268.62524414063);
CreateObject(1491, 2160.4577636719, 1603.3172607422, 998.97644042969, 0, 0, 269.62536621094);
CreateObject(3051, 2146.1943359375, 1602.15625, 1002.3298339844, 0, 0, 45.741577148438);
CreateObject(1491, 2168.6008300781, 1619.4421386719, 998.97772216797, 0, 0, 269.81530761719);
CreateObject(3051, 2160.4638671875, 1602.517578125, 1002.0863037109, 316.19201660156, 90.604248046875, 90.17578125);
CreateObject(1491, 2175.6552734375, 1609.2177734375, 999.01531982422, 0, 0, 0);
CreateObject(3051, 2168.53515625, 1618.7236328125, 1002.0654296875, 316.19201660156, 90.604248046875, 90.17578125);
CreateObject(1491, 2175.6640625, 1594.3282470703, 998.96203613281, 0, 0, 0);
CreateObject(3051, 2176.4252929688, 1594.3841552734, 1002.052734375, 316.19201660156, 90.604248046875, 180.34606933594);
CreateObject(1491, 2196.1491699219, 1617.9302978516, 998.9765625, 0, 0, 89.639892578125);
CreateObject(3051, 2176.2099609375, 1609.208984375, 1002.0639648438, 316.19201660156, 90.604248046875, 180.34606933594);
CreateObject(1491, 2223.5690917969, 1598.2590332031, 998.96136474609, 0, 0, 0);
CreateObject(3051, 2196.1142578125, 1618.7021484375, 1002.0404052734, 316.19201660156, 90.604248046875, 271.29638671875);
CreateObject(1491, 2147.5126953125, 1604.7106933594, 1000.9428100586, 0, 0, 0);
CreateObject(3051, 2148.267578125, 1604.6723632813, 1003.9929199219, 316.19201660156, 90.604248046875, 180.36071777344);
CreateObject(2003, 2142.5659179688, 1643.0625, 994.59051513672, 0, 0, 0);
CreateObject(2003, 2143.3374023438, 1643.0700683594, 994.59051513672, 0, 0, 0);
CreateObject(2003, 2144.1345214844, 1643.0709228516, 994.59051513672, 0, 0, 0);
CreateObject(2003, 2144.9555664063, 1643.0662841797, 994.59051513672, 0, 0, 0);
CreateObject(2005, 2144.9729003906, 1642.9886474609, 994.51434326172, 0, 0, 0);
CreateObject(2005, 2144.1245117188, 1642.958984375, 994.51434326172, 0, 0, 0);
CreateObject(2005, 2143.3520507813, 1642.9744873047, 994.51434326172, 0, 0, 0);
CreateObject(2005, 2142.5700683594, 1642.9594726563, 994.51434326172, 0, 0, 0);
CreateObject(2004, 2144.5778808594, 1642.8376464844, 994.59545898438, 0, 0, 303.12536621094);
CreateObject(2004, 2143.80078125, 1642.818359375, 994.59545898438, 0, 0, 270.37353515625);
CreateObject(2004, 2143.0539550781, 1642.7906494141, 994.59545898438, 0, 0, 300.14831542969);
CreateObject(2004, 2142.2036132813, 1642.8234863281, 994.59545898438, 0, 0, 276.56164550781);
CreateObject(1829, 2142.2534179688, 1642.3807373047, 993.04064941406, 0, 0, 0);
CreateObject(1829, 2143.08203125, 1642.3699951172, 993.04064941406, 0, 0, 0);
CreateObject(1829, 2143.88671875, 1642.3916015625, 993.04064941406, 0, 0, 0);
CreateObject(1829, 2144.7084960938, 1642.396484375, 993.04064941406, 0, 0, 0);
CreateObject(1829, 2145.4956054688, 1642.4044189453, 993.04064941406, 0, 0, 0);
CreateObject(3092, 2136.00390625, 1618.1566162109, 993.94555664063, 0, 0, 0);
CreateObject(2922, 2142.5776367188, 1626.7973632813, 993.93688964844, 0, 0, 179.86975097656);
CreateObject(2921, 2130.5239257813, 1606.5756835938, 996.59722900391, 0, 0, 278.34521484375);
CreateObject(1616, 2149.6823730469, 1612.2297363281, 997.2265625, 0, 0, 3.969970703125);
CreateObject(1616, 2141.4777832031, 1627.7666015625, 997.17224121094, 0, 0, 266.31518554688);
CreateObject(2922, 2146.0283203125, 1605.5961914063, 994.02038574219, 0, 0, 89.889892578125);
CreateObject(1419, 1345.6643066406, -660.96343994141, 108.66659545898, 0, 0, 17.864868164063);
CreateObject(1419, 1351.6988525391, -666.2822265625, 108.66660308838, 0, 0, 17.864868164063);
CreateObject(1419, 1355.3442382813, -665.04547119141, 108.66970062256, 0, 0, 19.849853515625);
CreateObject(1419, 1359.0875244141, -663.74377441406, 108.66970062256, 0, 0, 19.849853515625);
CreateObject(1419, 1349.0646972656, -665.05584716797, 108.66660308838, 0, 0, 288.54052734375);
CreateObject(1419, 1348.1440429688, -662.33233642578, 108.66660308838, 0, 0, 288.53942871094);
CreateObject(1419, 1360.1861572266, -661.20788574219, 108.66970062256, 0, 0, 292.50744628906);
CreateObject(1419, 1342.1779785156, -662.12042236328, 108.66659545898, 0, 0, 19.848754882813);
CreateObject(1419, 1338.3640136719, -663.42687988281, 108.65660095215, 0, 0, 19.846801757813);
CreateObject(1419, 1334.4716796875, -664.76019287109, 108.66659545898, 0, 0, 17.86181640625);
CreateObject(1419, 1330.5543212891, -666.08233642578, 108.66659545898, 0, 0, 19.84326171875);
CreateObject(1419, 1327.8240966797, -664.72131347656, 108.66659545898, 0, 0, 109.16583251953);
CreateObject(1419, 1326.4423828125, -660.86840820313, 108.66659545898, 0, 0, 109.16561889648);
CreateObject(1419, 1325.1340332031, -656.97088623047, 108.66659545898, 0, 0, 109.16561889648);
CreateObject(1419, 1323.90234375, -653.64178466797, 108.78443908691, 0, 0, 109.16552734375);
CreateObject(1419, 1322.6708984375, -649.84246826172, 108.66659545898, 0, 0, 109.16213989258);
CreateObject(1419, 1312.8934326172, -638.20428466797, 108.66660308838, 0, 0, 109.16015625);
CreateObject(1419, 1311.5952148438, -634.37640380859, 108.66660308838, 0, 0, 109.16015625);
CreateObject(1419, 1310.2740478516, -630.47149658203, 108.66451263428, 0, 0, 109.16015625);
CreateObject(1419, 1308.8725585938, -626.66766357422, 108.66451263428, 0, 0, 111.14514160156);
CreateObject(1419, 1307.392578125, -623.82678222656, 107.24828338623, 0, 0, 111.14321899414);
CreateObject(1419, 1307.4019775391, -623.82452392578, 108.31452941895, 0, 0, 111.14321899414);
CreateObject(1419, 1304.7008056641, -621.43493652344, 106.01198577881, 0, 0, 204.43798828125);
CreateObject(1419, 1306.99609375, -622.60192871094, 106.82674407959, 0, 0, 289.7880859375);
CreateObject(1419, 1307.4625244141, -622.23394775391, 105.67346191406, 0, 0, 289.78637695313);
CreateObject(1419, 1351.6988525391, -666.2822265625, 108.66660308838, 0, 0, 17.864868164063);
CreateObject(1419, 1355.3442382813, -665.04547119141, 108.66970062256, 0, 0, 19.849853515625);
CreateObject(1419, 1359.0875244141, -663.74377441406, 108.66970062256, 0, 0, 19.849853515625);
CreateObject(1419, 1349.0646972656, -665.05584716797, 108.66660308838, 0, 0, 288.54052734375);
CreateObject(1419, 1348.1440429688, -662.33233642578, 108.66660308838, 0, 0, 288.53942871094);
CreateObject(1419, 1360.1861572266, -661.20788574219, 108.66970062256, 0, 0, 292.50744628906);
CreateObject(1446, 1361.6130371094, -607.00244140625, 110.35706329346, 0, 0, 350.07507324219);
CreateObject(1446, 1357.3218994141, -606.01751708984, 110.40287017822, 0, 0, 348.09008789063);
CreateObject(1446, 1353.2868652344, -605.19976806641, 110.36315155029, 0, 0, 348.09008789063);
CreateObject(1446, 1349.7429199219, -604.56439208984, 110.22856903076, 0, 0, 348.09008789063);
CreateObject(1446, 1345.6560058594, -602.80755615234, 109.83149719238, 0, 0, 330.22521972656);
CreateObject(1446, 1343.0537109375, -601.0498046875, 109.50977325439, 0, 0, 328.240234375);
CreateObject(1446, 1339.0043945313, -599.94799804688, 109.37093353271, 0, 0, 1.9830322265625);
CreateObject(1446, 1337.07421875, -600.1240234375, 109.27040863037, 0, 0, 1.9830322265625);
CreateObject(1446, 1334.9312744141, -600.18530273438, 109.40242004395, 0, 0, 1.9775390625);
CreateObject(1446, 1330.8187255859, -601.00952148438, 109.0026473999, 0, 0, 23.81982421875);
CreateObject(1446, 1327.806640625, -602.27258300781, 109.0061416626, 0, 0, 23.81982421875);
CreateObject(1446, 1326.1181640625, -603.0732421875, 108.89626312256, 0, 0, 23.818359375);
CreateObject(1446, 1322.3143310547, -604.93695068359, 108.7795715332, 0, 0, 31.759887695313);
CreateObject(1446, 1318.3193359375, -607.4990234375, 108.58778381348, 0, 0, 33.744506835938);
CreateObject(1446, 1314.3079833984, -609.86260986328, 108.64306640625, 0, 0, 25.804809570313);
CreateObject(1446, 1310.1922607422, -611.96057128906, 108.2981338501, 0, 0, 25.804809570313);
CreateObject(1446, 1306.3502197266, -613.67327880859, 108.20566558838, 0, 0, 23.819885253906);
CreateObject(1446, 1304.7135009766, -614.23590087891, 108.07283782959, 0, 0, 23.81982421875);
CreateObject(1446, 1301.8199462891, -615.45178222656, 107.72753143311, 0, 0, 17.864868164063);
CreateObject(1446, 1298.943359375, -616.30383300781, 107.21862030029, 0, 0, 19.849853515625);
CreateObject(1446, 1297.3704833984, -616.91192626953, 106.58066558838, 0, 0, 15.879943847656);
CreateObject(1446, 1292.1640625, -617.24401855469, 105.90316009521, 0, 0, 0);
CreateObject(1446, 1288.3996582031, -615.64294433594, 105.87882232666, 0, 0, 310.37536621094);
CreateObject(1446, 1287.0437011719, -614.24829101563, 105.82675170898, 0, 0, 310.37536621094);
CreateObject(1446, 1294.0161132813, -617.31201171875, 106.39167022705, 0, 0, 358.01501464844);
CreateObject(1446, 1364.6849365234, -609.46929931641, 110.93952178955, 0, 0, 286.55554199219);
CreateObject(1446, 1365.8094482422, -613.86114501953, 110.92346191406, 0, 0, 284.57055664063);
CreateObject(1446, 1366.9514160156, -618.29364013672, 110.93952178955, 0, 0, 284.57055664063);
CreateObject(1446, 1367.4249267578, -620.15447998047, 110.93952178955, 0, 0, 284.57055664063);
CreateObject(1446, 1365.7015380859, -622.94311523438, 110.93952178955, 0, 0, 15.8798828125);
CreateObject(1446, 1361.2399902344, -624.35650634766, 110.93952178955, 0, 0, 15.8798828125);
CreateObject(1446, 1358.7800292969, -625.03735351563, 110.95027160645, 0, 0, 15.8798828125);
CreateObject(1446, 1279.5727539063, -619.53881835938, 105.86884307861, 0, 0, 141.65148925781);
CreateObject(1446, 1282.8988037109, -621.79016113281, 106.01565551758, 0, 0, 140.93450927734);
CreateObject(1446, 1284.6103515625, -623.2109375, 106.01565551758, 0, 0, 140.9326171875);
CreateObject(1446, 1278.7633056641, -618.44714355469, 105.8529586792, 0, 0, 142.91961669922);
CreateObject(1446, 1288.9678955078, -624.97186279297, 106.01764678955, 0, 0, 174.67944335938);
CreateObject(1446, 1292.0389404297, -625.42828369141, 106.01764678955, 0, 0, 173.41137695313);
CreateObject(1446, 1302.8897705078, -622.47985839844, 106.05969238281, 0, 0, 201.201171875);
CreateObject(1446, 1296.8796386719, -624.94952392578, 106.01764678955, 0, 0, 201.201171875);
CreateObject(1446, 1299.8369140625, -623.77172851563, 106.01764678955, 0, 0, 203.18615722656);
CreateObject(18248, 1635.2585449219, -1799.8233642578, 20.586252212524, 0, 0, 354.04504394531);
CreateObject(3594, 1646.4304199219, -1794.0815429688, 13.163604736328, 0, 0, 0);
CreateObject(3594, 1648.7260742188, -1794.5627441406, 13.166968345642, 0, 0, 0);
CreateObject(3594, 1647.7078857422, -1794.9368896484, 14.244453430176, 0, 0, 0);
CreateObject(3594, 1647.8896484375, -1795.6805419922, 15.175479888916, 0, 0, 0);
CreateObject(3594, 1651.0021972656, -1794.5435791016, 13.170303344727, 0, 0, 0);
CreateObject(3594, 1650.2298583984, -1795.7646484375, 14.087863922119, 0, 0, 0);
CreateObject(3594, 1650.4047851563, -1796.0764160156, 14.998505592346, 0, 0, 0);
CreateObject(3593, 1655.478515625, -1795.4147949219, 13.255853652954, 0, 0, 71.729919433594);
CreateObject(3593, 1655.9940185547, -1792.6584472656, 13.256608963013, 0, 0, 71.729736328125);
CreateObject(3593, 1655.5891113281, -1794.1678466797, 14.373138427734, 0, 0, 71.729736328125);
CreateObject(3593, 1655.2301025391, -1796.9256591797, 14.005391120911, 20, 0, 340.10485839844);
CreateObject(3593, 1638.7237548828, -1800.2529296875, 23.059000015259, 19.9951171875, 0, 340.10375976563);
CreateObject(2890, 1639.0771484375, -1800.4541015625, 12.74001789093, 0, 0, 85.665893554688);
CreateObject(3881, 1628.66015625, -1845.7869873047, 14.3898229599, 0, 0, 0);
CreateObject(3882, 1628.9307861328, -1845.2121582031, 13.53605556488, 0, 0, 89.050567626953);
CreateObject(984, 1627.8892822266, -1804.2351074219, 13.151621818542, 0, 0, 0);
CreateObject(984, 1628.1254882813, -1789.3775634766, 13.495649337769, 0, 0, 0);
CreateObject(984, 1626.9404296875, -1838.26171875, 13.177670478821, 0, 0, 0);
CreateObject(984, 1626.9317626953, -1825.4163818359, 13.169322967529, 0, 0, 0);
CreateObject(984, 1634.318359375, -1810.6552734375, 13.163258552551, 0, 0, 89.742309570313);
CreateObject(984, 1654.2421875, -1811.1743164063, 13.194012641907, 0, 0, 89.500122070313);
CreateObject(3058, 1594.7888183594, -1773.712890625, 15.885828018188, 0, 0, 11.909912109375);
CreateObject(3058, 1599.2911376953, -1774.943359375, 15.901294708252, 0, 0, 11.9091796875);
CreateObject(3058, 1604.8197021484, -1776.3898925781, 16.318296432495, 0, 0, 11.9091796875);
CreateObject(3058, 1610.0969238281, -1777.7978515625, 16.537046432495, 0, 0, 11.9091796875);
CreateObject(3058, 1614.6765136719, -1779.3128662109, 16.243297576904, 0, 0, 9.9241943359375);
CreateObject(3058, 1619.8995361328, -1780.6075439453, 17.357358932495, 0, 0, 15.875610351563);
CreateObject(3058, 1625.4838867188, -1781.9672851563, 15.671421051025, 0, 0, 11.9052734375);
CreateObject(3058, 1630.5008544922, -1783.2512207031, 15.580015182495, 0, 0, 11.903686523438);
CreateObject(3058, 1635.98828125, -1784.7156982422, 15.404270172119, 0, 0, 11.903686523438);
CreateObject(3058, 1657.5473632813, -1790.2945556641, 15.406648635864, 0, 0, 9.918701171875);
CreateObject(3058, 1651.6518554688, -1788.8953857422, 15.408332824707, 0, 0, 9.9151611328125);
CreateObject(3058, 1645.6988525391, -1787.3586425781, 15.402305603027, 0, 0, 9.9151611328125);
CreateObject(3058, 1640.6822509766, -1785.9376220703, 15.292980194092, 0, 0, 9.9151611328125);
CreateObject(16770, 238.46647644043, 142.81753540039, 1003.6140136719, 0, 0, 0);
CreateObject(2035, 242.37889099121, 139.11204528809, 1002.9978637695, 0, 0, 0);
CreateObject(2035, 242.38565063477, 139.42509460449, 1002.9978637695, 0, 0, 0);
CreateObject(2044, 242.70706176758, 139.73602294922, 1003.0009765625, 0, 0, 0);
CreateObject(2044, 242.29203796387, 139.7586517334, 1003.0009765625, 0, 0, 0);
CreateObject(2044, 242.6876373291, 140.03536987305, 1003.0009765625, 0, 0, 0);
CreateObject(2044, 242.30224609375, 140.0440826416, 1003.0009765625, 0, 0, 0);
CreateObject(1672, 242.23805236816, 140.29721069336, 1003.0900268555, 0, 0, 0);
CreateObject(1586, 250.109375, 151.7992401123, 1003.7531738281, 0, 0, 273.15911865234);
CreateObject(1586, 250.109375, 149.87986755371, 1003.6568603516, 0, 0, 273.48718261719);
CreateObject(1586, 250.109375, 148.01518249512, 1003.6770019531, 0, 0, 273.48718261719);
CreateObject(1586, 250.109375, 146.17340087891, 1003.6745605469, 0, 0, 273.48718261719);
CreateObject(1586, 250.109375, 144.31642150879, 1003.7336425781, 0, 0, 273.48718261719);
CreateObject(3550, 244.35858154297, 153.0827331543, 1004.3904418945, 0, 0, 269.05072021484);
CreateObject(979, -2425.919434, -593.602051, 132.083878, 0, 0, -233.671726982);
CreateObject(978, -2436.419678, -601.176331, 132.182129, 0, 0, -56.2500170097);
CreateObject(978, -2790.403076, -495.263519, 7.030417, 0, 0, -33.750021665);
CreateObject(979, -2779.999512, -479.419617, 7.033578, 0, 0, -213.749984423);
CreateObject(979, -2789.366699, -473.472382, 7.02772, 0, 0, -202.499958102);
CreateObject(978, -2800.157227, -487.777649, 7.02772, 0, 0, -44.9999906894);
CreateObject(984, 2304.462891, 1403.056885, 42.456993, 0, 0, -89.1405446852);
CreateObject(984, 2310.851318, 1403.145996, 42.456993, 0, 0, -89.1405446852);
CreateObject(983, 2326.944824, 1403.231689, 42.503868, 0, 0, -89.9999813789);
CreateObject(984, 2343.03125, 1403.223145, 42.456993, 0, 0, -89.9999813789);
CreateObject(984, 2350.955566, 1403.223145, 42.456993, 0, 0, -89.9999813789);
CreateObject(978, 2301.461182, 1403.586548, 36.255817, 0, 0, -179.999962758);
CreateObject(978, 2310.786377, 1403.577881, 36.255821, 0, 0, -179.999962758);
CreateObject(978, 2313.078369, 1502.92334, 29.796448, 0, 0, -359.999982811);
CreateObject(978, 2303.930908, 1503.096313, 29.871447, 0, 0, 0);
CreateObject(978, 2301.472168, 1403.626709, 23.471447, 0, 0, -180.000020054);
CreateObject(978, 2310.844727, 1403.608765, 23.471447, 0, 0, -179.999962758);
CreateObject(978, 2312.871094, 1502.77417, 17.063631, 0, 0, 0);
CreateObject(978, 2303.500977, 1502.783936, 17.063631, 0, 0, 0);
CreateObject(978, 2301.097168, 1401.766235, 10.660533, 0, 0, -202.499958102);
CreateObject(978, 2309.316895, 1397.360474, 10.660533, 0, 0, -213.749927127);
CreateObject(2780, 1018.264160, -918.455017, 36.679688, 0, 0, 11.2500263202);
CreateObject(982, -2416.355469, -578.607727, 133.300735, 0, 0, -55.390580316);
CreateObject(982, -2416.355469, -578.607727, 134.550735, 0, 0, -55.390580316);
CreateObject(982, -2416.355469, -578.607727, 135.800735, 0, 0, -55.390580316);
CreateObject(982, -2416.355469, -578.607727, 137.050735, 0, 0, -55.390580316);
CreateObject(982, -2408.455078, -573.157776, 133.300735, 0, 0, -55.390580316);
CreateObject(982, -2408.455078, -573.157776, 134.550735, 0, 0, -55.390580316);
CreateObject(982, -2408.455078, -573.157776, 135.800735, 0, 0, -55.390580316);
CreateObject(982, -2408.455078, -573.157776, 137.050735, 0, 0, -55.390580316);
CreateObject(983, -2399.234375, -566.809021, 133.300735, 0, 0, -56.2500170097);
CreateObject(983, -2399.234375, -566.809021, 134.550735, 0, 0, -56.2500170097);
CreateObject(983, -2399.234375, -566.809021, 135.800735, 0, 0, -56.2500170097);
CreateObject(983, -2399.234375, -566.809021, 137.050735, 0, 0, -56.2500170097);
CreateObject(983, -2393.572021, -566.131714, 133.300735, 0, 0, -109.921666643);
CreateObject(983, -2393.572021, -566.131714, 134.550735, 0, 0, -109.921666643);
CreateObject(983, -2393.572021, -566.131714, 135.800735, 0, 0, -109.921666643);
CreateObject(983, -2393.572021, -566.131714, 137.050735, 0, 0, -109.921666643);
CreateObject(983, -2387.709473, -568.61554, 132.026047, 0, 0, 64.0622392594);
CreateObject(983, -2387.709473, -568.61554, 133.276047, 0, 0, 64.0622392594);
CreateObject(983, -2387.709473, -568.61554, 134.526047, 0, 0, 64.0622392594);
CreateObject(983, -2387.709473, -568.61554, 135.776047, 0, 0, 64.0622392594);
CreateObject(983, -2387.709473, -568.61554, 137.026047, 0, 0, 64.0622392594);
CreateObject(983, -2382.356201, -572.005798, 131.976059, 0, 0, 51.0160475452);
CreateObject(983, -2382.356201, -572.005798, 133.226059, 0, 0, 51.0160475452);
CreateObject(983, -2382.356201, -572.005798, 134.476059, 0, 0, 51.0160475452);
CreateObject(983, -2382.356201, -572.005798, 135.726059, 0, 0, 51.0160475452);
CreateObject(983, -2382.356201, -572.005798, 136.976059, 0, 0, 51.0160475452);
CreateObject(984, -2376.202148, -579.114929, 131.973816, 0, 0, 35.4688377565);
CreateObject(984, -2376.202148, -579.114929, 133.173828, 0, 0, 35.4688377565);
CreateObject(984, -2376.202148, -579.114929, 134.423828, 0, 0, 35.4688377565);
CreateObject(984, -2376.202148, -579.114929, 135.673828, 0, 0, 35.4688377565);
CreateObject(984, -2376.202148, -579.114929, 136.923828, 0, 0, 35.4688377565);
CreateObject(984, -2371.418945, -590.606201, 131.979172, 0, 0, 9.53115293289);
CreateObject(984, -2371.418945, -590.606201, 133.15419, 0, 0, 9.53115293289);
CreateObject(984, -2371.418945, -590.606201, 134.40419, 0, 0, 9.53115293289);
CreateObject(984, -2371.418945, -590.606201, 135.65419, 0, 0, 9.53115293289);
CreateObject(984, -2371.418945, -590.606201, 136.90419, 0, 0, 9.53115293289);
CreateObject(983, -2371.063721, -600.011292, 133.300735, 0, 0, -12.8142583985);
CreateObject(983, -2371.063721, -600.011292, 134.550735, 0, 0, -12.8142583985);
CreateObject(983, -2371.063721, -600.011292, 135.800735, 0, 0, -12.8142583985);
CreateObject(983, -2371.063721, -600.011292, 137.050735, 0, 0, -12.8142583985);
CreateObject(982, -2387.881104, -614.110962, 133.300735, 0, 0, -54.5311436223);
CreateObject(982, -2387.881104, -614.110962, 134.550735, 0, 0, -54.5311436223);
CreateObject(982, -2387.881104, -614.110962, 135.800735, 0, 0, -54.5311436223);
CreateObject(982, -2387.881104, -614.110962, 137.050735, 0, 0, -54.5311436223);
CreateObject(982, -2382.661865, -610.385742, 137.050735, 0, 0, -54.5311436223);
CreateObject(982, -2382.661865, -610.385742, 135.800735, 0, 0, -54.5311436223);
CreateObject(982, -2382.661865, -610.385742, 134.550735, 0, 0, -54.5311436223);
CreateObject(982, -2382.661865, -610.385742, 133.300735, 0, 0, -54.5311436223);
CreateObject(984, -2403.129639, -616.798889, 132.385849, 0, 0, 44.9999906894);
CreateObject(984, -2403.129639, -616.798889, 133.635849, 0, 0, 44.9999906894);
CreateObject(984, -2407.629639, -612.298889, 133.635849, 0, 0, 44.9999906894);
CreateObject(984, -2407.629639, -612.298889, 132.385849, 0, 0, 44.9999906894);
CreateObject(984, -2423.126953, -591.142517, 132.351334, 0, 0, 35.4688377565);
CreateObject(984, -2423.126953, -591.142517, 133.601334, 0, 0, 35.4688377565);
CreateObject(984, -2422.20166, -592.417542, 133.601334, 0, 0, 35.4688377565);
CreateObject(984, -2422.20166, -592.417542, 132.351334, 0, 0, 35.4688377565);
CreateObject(979, -2467.794189, -482.915619, 101.727783, 0, 15.4698604862, -209.375566243);
CreateObject(979, -2475.960205, -478.687042, 99.374161, 0, 13.7509870989, -205.860527462);
CreateObject(979, -2484.488281, -475.594238, 97.561775, 0, 7.7349302431, -192.968862465);
CreateObject(978, -2613.505615, -509.169556, 71.834129, 0, 0, 0);
CreateObject(978, -2625.486572, -506.929321, 70.966629, 0, 0, -44.9999906894);
CreateObject(978, -2633.370117, -498.481049, 70.10598, 0, 0, -67.4999860342);
CreateObject(978, -2635.090576, -487.789459, 69.739647, 0, 0, -101.250007699);
CreateObject(978, -2630.960449, -477.920105, 69.265305, 0, 0, -134.999972068);
CreateObject(978, -2431.193115, -410.492584, 85.14431, 0, 0, -168.749993733);
CreateObject(978, -2391.57373, -414.51767, 83.558685, 0, 0, -213.749984423);
CreateObject(979, -2332.323242, -468.859161, 79.894859, 0, 0, 22.4999953447);
CreateObject(979, -2323.378906, -463.605133, 79.884895, 0, 0, 44.9999906894);
CreateObject(979, -2316.594238, -454.776947, 79.874626, 0, 0, 78.7500123544);
CreateObject(979, -2314.85083, -443.923248, 79.526741, 0, 0, -258.749917816);
CreateObject(979, -2316.818359, -433.339478, 79.402542, 0, 0, -247.499948792);
CreateObject(979, -2603.58667, -366.940918, 43.172604, 0, 12.0321137115, -165.234954952);
CreateObject(979, -2683.242676, -435.64917, 30.631948, 0, 3.43774677471, -449.99996419);
CreateObject(979, -2683.118164, -446.302246, 29.557819, 0, 6.87549354943, -85.625448608);
CreateObject(982, 1181.934204, -930.204468, 43.594734, 0, -0, -80.468828446);
CreateObject(982, 1197.708984, -927.554565, 43.594734, 0, -0, -80.468828446);
CreateObject(983, 1228.603271, -922.001709, 43.652306, 0, 0, -79.6093917523);
CreateObject(983, 1231.753418, -921.42688, 43.652306, 0, 0, -79.6093917523);
CreateObject(5130, 1180.446655, -907.174316, 44.087334, 0, 0, -217.187788493);
CreateObject(638, 1178.708984, -906.263245, 45.567234, 0, 0, 8.67165894343);
CreateObject(638, 1179.034302, -908.487732, 45.567234, 0, 0, 8.67165894343);
CreateObject(1432, 1190.482544, -898.092651, 47.194302, 0, 0, 0);
CreateObject(1432, 1197.232544, -898.092651, 47.194302, 0, 0, 0);
CreateObject(1432, 1203.482544, -898.092651, 47.194302, 0, 0, 0);
CreateObject(1432, 1194.232544, -901.842651, 47.194302, 0, 0, 0);
CreateObject(1432, 1200.232544, -901.092651, 47.194302, 0, 0, 0);
CreateObject(1723, 1209.686035, -901.227905, 47.053711, 0, -1.71887338736, 7.81222224976);
CreateObject(1723, 1213.760864, -900.653076, 47.053711, 0, -1.71887338736, 6.95278555608);
CreateObject(1723, 1212.585205, -908.002441, 47.053711, 0, -1.71887338736, -172.187740508);
CreateObject(1723, 1216.685303, -907.527466, 47.053711, 0, -1.71887338736, -172.187740508);
CreateObject(1726, 1217.152954, -900.976501, 47.04808, 0, 0, -82.1877018333);
CreateObject(1726, 1217.652954, -904.25177, 47.04808, 0, 0, -82.1877018333);
CreateObject(2245, 1213.616333, -908.033142, 47.364429, 0, 0, 0);
CreateObject(2245, 1212.711182, -900.562622, 47.364429, 0, 0, 0);
CreateObject(2245, 1217.635986, -903.665222, 47.364429, 0, 0, 0);
CreateObject(2251, 1203.441772, -898.134155, 48.652493, 0, 0, 0);
CreateObject(2251, 1200.172974, -901.089539, 48.652493, 0, 0, 0);
CreateObject(2251, 1197.153564, -898.093506, 48.652493, 0, 0, 0);
CreateObject(2251, 1194.214355, -901.811951, 48.652493, 0, 0, 0);
CreateObject(2251, 1190.39502, -898.130066, 48.652493, 0, 0, 0);
CreateObject(2253, 1217.171753, -900.056763, 47.33606, 0, 0, -83.9065752207);
CreateObject(2253, 1217.971558, -907.25647, 47.33606, 0, 0, -83.9065752207);
CreateObject(1516, 1215.05542, -902.289795, 47.23111, 0, 0, 6.0933488624);
CreateObject(1516, 1215.55542, -905.539795, 47.23111, 0, 0, 6.0933488624);
CreateObject(1516, 1211.180786, -906.164673, 47.23111, 0, 0, 6.0933488624);
CreateObject(1516, 1211.03064, -902.86438, 47.23111, 0, 0, 6.0933488624);
CreateObject(1645, 1187.461182, -902.062073, 47.39465, 0, 0, -263.047158581);
CreateObject(1645, 1187.211182, -900.312073, 47.39465, 0, 0, -263.047158581);
CreateObject(1645, 1186.861084, -898.587097, 47.39465, 0, 0, -263.047158581);
CreateObject(1645, 1186.561035, -896.587097, 47.39465, 0, 0, -263.047158581);
CreateObject(16151, 1200.779907, -913.551147, 47.454254, 0, 0, -83.9065752207);
CreateObject(640, 1187.516113, -894.214172, 47.759533, 0, 0, -263.047158581);
CreateObject(640, 1192.841187, -893.564026, 47.759533, 0, 0, -263.047158581);
CreateObject(640, 1198.141968, -892.913879, 47.759533, 0, 0, -263.047158581);
CreateObject(640, 1203.467529, -892.263245, 47.759533, 0, 0, -263.047158581);
CreateObject(640, 1206.765747, -894.144592, 47.759533, 0, 0, 7.81227954554);
CreateObject(640, 1207.265503, -897.743225, 47.759533, 0, 0, 7.81227954554);
CreateObject(640, 1209.878906, -900.247681, 47.752697, 0, 0.859436693678, -82.1877018333);
CreateObject(640, 1215.229248, -899.521973, 47.752697, 0, 0.859436693678, -82.1877018333);
CreateObject(640, 1217.961304, -901.567139, 47.752697, 0, 0, 8.67165894343);
CreateObject(640, 1218.511353, -905.817139, 47.752697, 0, 0, 6.0933488624);
CreateObject(640, 1216.415283, -908.438538, 47.752697, 0, 0, -83.047138527);
CreateObject(640, 1211.790405, -908.989075, 47.752697, 0, 0, -83.047138527);
CreateObject(640, 1186.830933, -910.690491, 47.759533, 0, 0, 6.87549354943);
CreateObject(640, 1187.080688, -912.864929, 47.759533, 0, 0, 6.87549354943);
CreateObject(640, 1209.786377, -911.590454, 47.759533, 0, 0, 6.95278555608);
CreateObject(966, 1211.20105, -924.72522, 41.936424, 0, 0, -170.468867121);
CreateObject(966, 1225.125977, -922.150391, 41.936424, 0, 0, -349.60945048);
CreateObject(968, 1211.19043, -924.791626, 42.995674, 0, -0.859436693678, 10.3905896266);
CreateObject(7520, 1105.363281, -350.061005, 73.295639, 0.0000, 0.0000, 180.0000);
CreateObject(11547, 1063.901733, -310.795105, 75.936844, 0.0000, 0.0000, 270.0000);
CreateObject(11547, 1063.284058, -300.357941, 75.936844, 0.0000, 0.0000, 270.0000);
CreateObject(1676, 1072.276489, -311.288208, 74.775520, 0.0000, 0.0000, 270.0000);
CreateObject(1676, 1066.661743, -311.379974, 74.775520, 0.0000, 0.0000, 270.0000);
CreateObject(1676, 1061.258789, -311.697327, 74.775520, 0.0000, 0.0000, 270.0000);
CreateObject(1676, 1055.649536, -311.461792, 74.775520, 0.0000, 0.0000, 270.0000);
CreateObject(1676, 1071.708984, -300.404968, 74.775520, 0.0000, 0.0000, 270.0000);
CreateObject(1676, 1066.182129, -300.510895, 74.775520, 0.0000, 0.0000, 270.0000);
CreateObject(1676, 1060.435303, -300.441406, 74.775520, 0.0000, 0.0000, 270.0000);
CreateObject(1676, 1055.342896, -300.688049, 74.775520, 0.0000, 0.0000, 270.0000);
CreateObject(17950, 1115.448730, -306.607819, 75.242859, 0.0000, 0.0000, 90.0000);
CreateObject(16151, 1039.474976, -306.894806, 73.384834, 0.0000, 0.0000, 180.0000);
CreateObject(1966, 1045.514771, -285.780396, 75.580002, 0.0000, 0.0000, 0.0000);
CreateObject(1966, 1038.340454, -289.686157, 72.154976, 0.0000, 0.0000, 90.0000);
CreateObject(1966, 1052.807617, -308.686493, 72.954994, 0.0000, 0.0000, 270.0000);
CreateObject(1717, 1052.041382, -298.122589, 72.990280, 0.0000, 0.0000, 225.0000);
CreateObject(1840, 1052.359009, -299.332275, 73.010986, 0.0000, 0.0000, 0.0000);
CreateObject(2028, 1051.604370, -299.443970, 73.076408, 0.0000, 0.0000, 0.0000);
CreateObject(2232, 1039.563599, -299.987061, 73.590958, 0.0000, 0.0000, 90.0000);
CreateObject(1281, 1040.399536, -318.135101, 73.792572, 0.0000, 0.0000, 0.0000);
CreateObject(1281, 1050.086670, -317.422882, 73.792572, 0.0000, 0.0000, 0.0000);
CreateObject(1281, 1035.807617, -314.259491, 73.792572, 0.0000, 0.0000, 270.0000);
CreateObject(1281, 1035.728760, -309.418488, 73.792572, 0.0000, 0.0000, 270.0000);
CreateObject(1281, 1035.603394, -304.239197, 73.792572, 0.0000, 0.0000, 270.0000);
CreateObject(643, 1050.066040, -291.388306, 73.463554, 0.0000, 0.0000, 348.7500);
CreateObject(643, 1041.240967, -289.995026, 73.463554, 0.0000, 0.0000, 348.7500);
CreateObject(643, 1045.914307, -289.549377, 73.463554, 0.0000, 0.0000, 348.7500);
CreateObject(2321, 1049.177856, -299.603271, 72.992065, 0.0000, 0.0000, 270.0000);
CreateObject(1726, 1046.890625, -301.179596, 72.985497, 0.0000, 0.0000, 90.0000);
CreateObject(1726, 1050.005859, -303.988037, 72.985497, 0.0000, 0.0000, 180.0000);
CreateObject(1726, 1048.117065, -297.673248, 72.985497, 0.0000, 0.0000, 0.0000);
CreateObject(2587, 1052.591309, -300.760406, 74.137161, 0.0000, 0.0000, 270.0000);
CreateObject(2714, 1038.482666, -313.220123, 74.455902, 0.0000, 0.0000, 90.0000);
CreateObject(10281, 1045.513306, -316.924011, 80.631378, 0.0000, 0.0000, 348.7500);
CreateObject(1966, 1019.529175, -285.160522, 75.750809, 0.0000, 0.0000, 0.0000);
CreateObject(1966, 1012.113647, -289.964630, 72.155006, 0.0000, 0.0000, 90.0000);
CreateObject(1966, 1026.709595, -308.809937, 72.504906, 0.0000, 0.0000, 90.0000);
CreateObject(956, 1025.616943, -294.381226, 73.397095, 0.0000, 0.0000, 0.0000);
CreateObject(955, 1025.980591, -301.122894, 73.396126, 0.0000, 0.0000, 270.0000);
CreateObject(1209, 1025.997314, -302.348022, 72.993080, 0.0000, 0.0000, 270.0000);
CreateObject(1263, 1015.813110, -315.285889, 73.779381, 0.0000, 0.0000, 90.0001);
CreateObject(1262, 1079.401978, -339.029510, 78.692619, 0.0000, 0.0000, 90.0000);
CreateObject(1298, 1054.614014, -343.215851, 76.386429, 0.0000, 0.0000, 258.7500);
CreateObject(1298, 1059.577026, -342.684082, 76.386429, 0.0000, 0.0000, 258.7500);
CreateObject(1298, 1065.626831, -342.879120, 76.386429, 0.0000, 0.0000, 258.7500);
CreateObject(1298, 1072.943604, -342.691437, 76.386429, 0.0000, 0.0000, 258.7500);
CreateObject(1298, 1032.575684, -341.794128, 76.386429, 0.0000, 0.0000, 258.7500);
CreateObject(1298, 1029.274902, -342.871613, 76.386429, 0.0000, 0.0000, 337.5000);
CreateObject(2602, 1025.916382, -313.512177, 73.516518, 0.0000, 0.0000, 270.0000);
CreateObject(12978, 1041.221313, -351.118469, 73.383766, 0.0000, 0.0000, 270.0000);
CreateObject(13027, 1041.342896, -351.008911, 76.207191, 0.0000, 0.0000, 90.0000);
CreateObject(17950, 1011.617920, -324.630188, 75.242859, 0.0000, 0.0000, 270.0000);
CreateObject(17950, 1011.643127, -331.789948, 75.242859, 0.0000, 0.0000, 270.0000);
CreateObject(17950, 1011.605469, -339.045685, 75.242859, 0.0000, 0.0000, 270.0000);
CreateObject(17950, 1011.629700, -346.079468, 75.242859, 0.0000, 0.0000, 270.0000);
CreateObject(17950, 1011.656860, -353.221649, 75.242859, 0.0000, 0.0000, 270.0000);
CreateObject(10282, 1043.133301, -351.143982, 74.038841, 0.0000, 0.0000, 270.0000);
CreateObject(11393, 1015.765015, -290.392700, 74.518120, 0.0000, 0.0000, 90.0000);
CreateObject(1337, 2506.2416992188, -1659.8283691406, 13.070323944092, 0.000000, 0.000000, 310.375);
CreateObject(1337, 2493.2084960938, -1654.1949462891, 13.018049240112, 0.000000, 0.000000, 0.000000);
CreateObject(1264, 2505.0864257813, -1659.5505371094, 12.884218215942, 0.000000, 0.000000, 0.000000);
CreateObject(1216, 2491.2329101563, -1741.9293212891, 13.238877296448, 0.000000, 0.000000, 181.34997558594);
CreateObject(1257, 2489.2448730469, -1741.4752197266, 13.826066970825, 0.000000, 0.000000, 270.67504882813);
CreateObject(1346, 2503.6447753906, -1724.8782958984, 13.897880554199, 0.000000, 0.000000, 0.000000);
CreateObject(1366, 2506.6589355469, -1738.6198730469, 13.168173789978, 0.000000, 0.000000, 0.000000);
CreateObject(1375, 2485.3012695313, -1739.4874267578, 14.236884117126, 0.000000, 0.000000, 242.88494873047);
CreateObject(1527, 2479.6430664063, -1755.2431640625, 13.527421951294, 0.000000, 0.000000, 0.000000);
CreateObject(8171, 3007.675293, -1994.956299, 1.861952, 0.000000, 0.000000, 0.000000);
CreateObject(8343, 3031.784424, -1877.606812, 1.881622, 0.000000, 0.000000, 0.000000);
CreateObject(8171, 3090.908203, -1897.340088, 1.830196, 0.000000, 0.000000, 0.000000);
CreateObject(8171, 3090.919678, -1995.338135, 1.807117, 0.000000, 0.000000, 0.000000);
CreateObject(8171, 3090.931885, -2113.339600, 1.828412, 0.000000, 0.000000, 0.000000);
CreateObject(8171, 3007.698486, -2113.717529, 1.842735, 0.000000, 0.000000, 0.000000);
CreateObject(8354, 3027.586182, -2052.708008, 1.786963, 0.000000, 0.000000, -360.000039696);
CreateObject(8343, 3066.875732, -2230.363281, 1.859961, 0.000000, 0.000000, -539.999887656);
CreateObject(8171, 3007.713379, -2217.119873, 1.840366, 0.000000, 0.000000, 0.000000);
CreateObject(5005, 2988.344727, -2202.980957, 5.194251, 0.000000, 0.000000, -89.999981276);
CreateObject(5005, 2988.420166, -2040.110840, 5.219252, 0.000000, 0.000000, -89.999981276);
CreateObject(5005, 2988.460449, -1964.384644, 5.213468, 0.000000, 0.000000, -89.999981276);
CreateObject(5007, 3011.265625, -2200.874756, 4.552825, 0.000000, 0.000000, -180.000019848);
CreateObject(5005, 3110.291992, -2072.842773, 5.279928, 0.000000, 0.000000, -270.000001124);
CreateObject(5007, 3087.427734, -1907.221313, 4.617655, 0.000000, 0.000000, -360.000039696);
CreateObject(5005, 3110.240967, -2135.528564, 5.254930, 0.000000, 0.000000, -270.000001124);
CreateObject(3452, 2978.928711, -1980.254272, 6.270012, 0.000000, 0.000000, -89.999981276);
CreateObject(3452, 2978.930664, -2009.799316, 6.282929, 0.000000, 0.000000, -89.999981276);
CreateObject(3452, 2978.942383, -1950.729614, 6.287722, 0.000000, 0.000000, -89.999981276);
CreateObject(3452, 2978.947510, -1921.110840, 6.283676, 0.000000, 0.000000, -89.999981276);
CreateObject(3452, 2978.934082, -1892.041992, 6.275713, 0.000000, 0.000000, -89.999981276);
CreateObject(3452, 2978.941406, -2039.370361, 6.290478, 0.000000, 0.000000, -89.999981276);
CreateObject(3452, 2978.950195, -2068.966309, 6.284935, 0.000000, 0.000000, -89.999981276);
CreateObject(3452, 2978.939697, -2098.557129, 6.284210, 0.000000, 0.000000, -89.999981276);
CreateObject(3452, 2978.916504, -2128.024414, 6.302369, 0.000000, 0.000000, -89.999981276);
CreateObject(3452, 2978.902832, -2157.601563, 6.284748, 0.000000, 0.000000, -89.999981276);
CreateObject(3452, 2978.896729, -2187.180664, 6.291612, 0.000000, 0.000000, -89.999981276);
CreateObject(3452, 2978.888672, -2216.762207, 6.300079, 0.000000, 0.000000, -89.999981276);
CreateObject(8411, 2957.133057, -2200.757568, -53.102680, 0.000000, 0.000000, -89.999981276);
CreateObject(8411, 2957.205566, -2138.551025, -53.082726, 0.000000, 0.000000, -89.999981276);
CreateObject(8411, 2957.201172, -2075.964111, -53.112068, 0.000000, 0.000000, -89.999981276);
CreateObject(8411, 2957.222412, -2013.414185, -53.109497, 0.000000, 0.000000, -89.999981276);
CreateObject(8411, 2957.214600, -1951.066162, -53.103603, 0.000000, 0.000000, -89.999981276);
CreateObject(8411, 2957.208252, -1908.093994, -53.098160, 0.000000, 0.000000, -89.999981276);
CreateObject(7520, 3042.115967, -1993.657593, 2.047555, 0.000000, 0.000000, -89.999981276);
CreateObject(7520, 3042.135498, -2034.078613, 2.047555, 0.000000, 0.000000, -89.999981276);
CreateObject(5005, 3026.005127, -2018.016968, 4.963467, 0.000000, 0.000000, -89.999981276);
CreateObject(8354, 3028.451904, -1972.411865, 1.729675, 0.000000, 0.000000, -360.000039696);
CreateObject(7520, 3042.156006, -1953.044922, 1.990267, 0.000000, 0.000000, -89.999981276);
CreateObject(7520, 3042.156738, -2074.102295, 2.022557, 0.000000, 0.000000, -89.999981276);
CreateObject(8038, 3048.075439, -2140.700195, 17.953617, 0.000000, 0.000000, -180.000019848);
CreateObject(7191, 3025.671631, -2146.163086, 3.742413, 0.000000, 0.000000, 0.000000);
CreateObject(7191, 3025.685303, -2190.280762, 3.742413, 0.000000, 0.000000, 0.000000);
CreateObject(1237, 3025.772949, -2101.277344, 1.638729, 0.000000, 0.000000, 0.000000);
CreateObject(1237, 3026.288574, -2101.277344, 1.672428, 0.000000, 0.000000, 0.000000);
CreateObject(1237, 3025.781006, -2101.252441, 2.213169, 0.000000, 0.000000, 0.000000);
CreateObject(1237, 3026.296631, -2101.288574, 2.208605, 0.000000, 0.000000, 0.000000);
CreateObject(973, 3035.560547, -2110.043457, 2.277182, 0.000000, 0.000000, 55.3905802527);
CreateObject(973, 3028.403320, -2120.389404, 2.308757, 0.000000, 0.000000, 55.3905802527);
CreateObject(973, 3032.332764, -2114.701904, 2.277182, 0.000000, 0.000000, 55.3905802527);
CreateObject(973, 3039.725098, -2102.508545, 2.277182, 0.000000, 0.000000, 66.6405492643);
CreateObject(974, 3029.142334, -2124.037109, 2.967407, 0.000000, 0.000000, 1.71887338539);
CreateObject(974, 3035.666748, -2123.937744, 2.960479, 0.000000, 0.000000, 0.000000);
CreateObject(4113, 3052.178711, -1883.171997, -34.367798, 0.000000, 0.000000, -344.530236523);
CreateObject(4113, 3037.970215, -1882.775146, -34.358898, 0.000000, 0.000000, -346.249109908);
CreateObject(5005, 3072.839844, -1967.037109, 5.231712, 0.000000, 0.000000, -89.999981276);
CreateObject(5005, 3072.766357, -2128.546631, 5.229928, 0.000000, 0.000000, -89.999981276);
CreateObject(3452, 3063.405273, -1914.344116, 6.304095, 0.000000, 0.000000, -89.999981276);
CreateObject(3452, 3063.393555, -1943.905396, 6.304095, 0.000000, 0.000000, -89.999981276);
CreateObject(3452, 3063.363525, -1966.236206, 6.304095, 0.000000, 0.000000, -89.999981276);
CreateObject(3452, 3063.359131, -1995.840698, 6.302119, 0.000000, 0.000000, -89.999981276);
CreateObject(3452, 3063.353760, -2017.680176, 6.311383, 0.000000, 0.000000, -89.999981276);
CreateObject(3452, 3063.345215, -2039.510498, 6.311388, 0.000000, 0.000000, -89.999981276);
CreateObject(3452, 3063.345215, -2061.338135, 6.324775, 0.000000, 0.000000, -89.999981276);
CreateObject(3452, 3063.342773, -2090.938477, 6.308138, 0.000000, 0.000000, -89.999981276);
CreateObject(7191, 3054.200195, -2083.444580, 10.180839, 0.000000, 0.000000, 0.000000);
CreateObject(7191, 3054.265625, -2038.556396, 10.087029, 0.000000, 0.000000, 0.000000);
CreateObject(7191, 3054.304443, -1993.772583, 10.039252, 0.000000, 0.000000, 0.000000);
CreateObject(7191, 3054.291016, -1949.165161, 10.018068, 0.000000, 0.000000, 0.000000);
CreateObject(7191, 3054.298828, -1921.698486, 10.037237, 0.000000, 0.000000, 0.000000);
CreateObject(7191, 3052.925781, -1921.702759, 6.829351, 0.000000, 46.4095241098, 0.000000);
CreateObject(7191, 3050.045898, -1921.691895, 4.104355, 0.000000, 46.4095241098, 0.000000);
CreateObject(7191, 3047.743652, -1921.691040, 1.904352, 0.000000, 46.4095241098, 0.000000);
CreateObject(1686, 3028.592285, -2094.130127, 1.725266, 0.000000, 0.000000, 0.000000);
CreateObject(7191, 3050.161133, -1895.322876, 3.572031, 0.000000, 0.000000, -269.999943828);
CreateObject(7191, 3048.865967, -1917.382446, 2.979355, 0.000000, 46.4095241098, -359.9999824);
CreateObject(7191, 3051.703613, -1917.510132, 5.659934, 0.000000, 46.4095241098, -359.9999824);
CreateObject(7191, 3052.868408, -1917.518799, 6.747816, 0.000000, 46.4095241098, -359.9999824);
CreateObject(7191, 3050.142822, -1895.333252, 7.064250, 0.000000, 0.000000, -270.000001124);
CreateObject(7191, 3075.261230, -1897.281982, 1.038128, 18.0481705466, 89.3813587446, -270.000001124);
CreateObject(7191, 3075.190430, -1898.295166, 1.153628, 18.0481705466, 89.3813587446, -270.000001124);
CreateObject(1686, 3028.853760, -2054.820557, 1.750266, 0.000000, 0.000000, 0.000000);
CreateObject(1686, 3028.548096, -2014.376099, 1.700267, 0.000000, 0.000000, 0.000000);
CreateObject(1686, 3028.696777, -1972.639648, 1.692979, 0.000000, 0.000000, 0.000000);
CreateObject(974, 3059.366455, -1973.808594, 1.455272, 0.000000, 0.000000, 0.000000);
CreateObject(974, 3059.388184, -1926.874268, 1.255271, 0.000000, 0.000000, 0.000000);
CreateObject(974, 3058.588623, -1899.764160, 1.305268, 0.000000, 0.000000, 0.000000);
CreateObject(974, 3060.260010, -1899.741211, 1.305268, 0.000000, 0.000000, 0.000000);
CreateObject(974, 3059.339844, -2008.661499, 1.187556, 0.000000, 0.000000, 0.000000);
CreateObject(974, 3059.276611, -2053.330566, 1.600950, 0.000000, 0.000000, 1.71887338539);
CreateObject(974, 3059.480469, -2097.435547, 1.234315, 0.000000, 0.000000, 1.71887338539);
CreateObject(974, 3057.977051, -2097.470703, 1.209311, 0.000000, 0.000000, 1.71887338539);
CreateObject(974, 3066.194580, -2100.928223, 3.265381, 73.0520615834, 1.71887338539, -90.8594179687);
CreateObject(979, 3040.556885, -1934.306763, 2.294895, 0.000000, 0.000000, 101.250007583);
CreateObject(979, 3038.907959, -1925.956543, 2.294895, 0.000000, 0.000000, 101.250007583);
CreateObject(979, 3037.125977, -1917.072144, 2.294894, 0.000000, 0.000000, 101.250007583);
CreateObject(979, 3032.853760, -1909.789917, 2.319894, 0.000000, 0.000000, 138.437718685);
CreateObject(974, 3028.058594, -1898.760742, 4.507416, 0.000000, 0.000000, -89.999981276);
CreateObject(974, 3028.060547, -1902.014771, 4.507416, 0.000000, 0.000000, -89.999981276);
CreateObject(979, 3031.406494, -1908.516602, 2.319894, 0.000000, 0.000000, 138.437718685);
CreateObject(974, 3025.963623, -1935.247070, 4.364691, 0.000000, 0.000000, -89.999981276);
CreateObject(1237, 3025.716553, -1938.430542, 1.864833, 0.000000, 0.000000, 0.000000);
CreateObject(1237, 3026.281982, -1938.503052, 1.867434, 0.000000, 0.000000, 0.000000);
CreateObject(1237, 3025.968750, -1931.918823, 1.814833, 0.000000, 0.000000, 0.000000);
CreateObject(2792, 3034.417969, -2098.162598, 7.157134, 0.000000, 0.000000, 0.000000);
CreateObject(2793, 3034.996582, -2058.163818, 7.222112, 0.000000, 0.000000, 0.000000);
CreateObject(2794, 3034.830078, -2017.742798, 7.293601, 0.000000, 0.000000, 0.000000);
CreateObject(2795, 3035.241943, -1977.130127, 7.219455, 0.000000, 0.000000, 0.000000);
CreateObject(3526, 3023.146240, -1909.075684, 1.950040, 0.000000, 0.000000, 89.999981276);
CreateObject(3526, 3023.133545, -1928.967407, 1.905370, 0.000000, 0.000000, 89.999981276);
CreateObject(3526, 3023.133301, -2106.440674, 1.911153, 0.000000, 0.000000, 89.999981276);
CreateObject(3526, 3023.092529, -2125.355713, 1.911153, 0.000000, 0.000000, 89.999981276);
CreateObject(8411, 2956.681152, -1872.434326, -53.097809, 0.000000, 0.000000, -180.000019848);
CreateObject(8411, 2990.474365, -1847.788086, -52.776291, 0.000000, 0.859436692696, -119.452762143);
CreateObject(8411, 3015.288574, -1826.595337, -52.321980, 0.000000, 0.859436692696, -141.093320769);
CreateObject(8411, 3052.857910, -1819.176636, -51.780697, 0.000000, 0.859436692696, -171.405538329);
CreateObject(8411, 3094.114990, -1826.715332, -51.215736, 0.000000, 0.859436692696, -201.717755889);
CreateObject(8411, 3115.566895, -1849.023926, -50.778687, 0.000000, 0.859436692696, -235.467777516);
CreateObject(8411, 3122.904297, -1875.317139, -50.401443, 0.000000, 0.859436692696, -268.358362449);
CreateObject(3452, 3119.780762, -1920.822632, 6.342050, 0.000000, 0.000000, -270.000001124);
CreateObject(3452, 3119.781250, -1950.388306, 6.356937, 0.000000, 0.000000, -270.000001124);
CreateObject(3452, 3119.789795, -1979.914307, 6.343851, 0.000000, 0.000000, -270.000001124);
CreateObject(3452, 3119.796631, -2009.477661, 6.350800, 0.000000, 0.000000, -270.000001124);
CreateObject(3452, 3119.792725, -2039.061646, 6.359059, 0.000000, 0.000000, -270.000001124);
CreateObject(3452, 3119.785645, -2068.595215, 6.342967, 0.000000, 0.000000, -270.000001124);
CreateObject(3452, 3119.787354, -2097.993652, 6.344263, 0.000000, 0.000000, -270.000001124);
CreateObject(3452, 3119.786865, -2127.426270, 6.354470, 0.000000, 0.000000, -270.000001124);
CreateObject(3452, 3119.778564, -2156.919434, 6.360141, 0.000000, 0.000000, -270.000001124);
CreateObject(3452, 3119.761475, -2186.403076, 6.347313, 0.000000, 0.000000, -270.000001124);
CreateObject(8411, 3123.615723, -2232.207764, -52.544464, 0.000000, 0.859436692696, -269.217799142);
CreateObject(8411, 3113.525879, -2249.268555, -55.884750, 0.000000, 0.859436692696, -290.935821662);
CreateObject(8411, 3097.866943, -2270.978516, -55.521835, 0.000000, 0.859436692696, -310.857564199);
CreateObject(8411, 3069.449463, -2284.684082, -55.055473, 0.000000, 0.859436692696, -336.872712887);
CreateObject(8411, 3030.497803, -2289.893799, -54.505913, 0.000000, 0.859436692696, -360.232144898);
CreateObject(8411, 2975.235107, -2262.262207, -53.564121, 0.000000, 0.859436692696, -450.23218347);
CreateObject(8411, 2996.260986, -2275.205322, -53.947548, 0.000000, 0.859436692696, -405.232135537);
CreateObject(973, 3072.222412, -2216.693115, 2.700181, 0.000000, 0.000000, -101.250007583);
CreateObject(1237, 3072.906738, -2212.006104, 1.858847, 0.000000, 0.000000, 0.000000);
CreateObject(973, 3069.167969, -2225.358398, 2.700181, 0.000000, 0.000000, -117.656596751);
CreateObject(973, 3063.559570, -2232.341553, 2.700181, 0.000000, 0.000000, -140.15659207);
CreateObject(973, 3055.781982, -2236.889404, 2.675181, 0.000000, 0.000000, -159.141605908);
CreateObject(973, 3046.853027, -2238.332275, 2.625181, 0.000000, 0.000000, -181.641601227);
CreateObject(973, 3025.418701, -2217.954102, 2.630585, 0.000000, 0.000000, -271.641639798);
CreateObject(973, 3027.697998, -2226.464844, 2.630586, 0.000000, 0.000000, -237.891618172);
CreateObject(973, 3033.753418, -2233.091309, 2.619507, 0.000000, 0.000000, -217.110496238);
CreateObject(1237, 3038.081299, -2236.523193, 1.761006, 0.000000, 0.000000, 0.000000);
CreateObject(1237, 3039.829590, -2237.254150, 1.787842, 0.000000, 0.000000, 0.000000);
CreateObject(1237, 3041.462158, -2237.800537, 1.762842, 0.000000, 0.000000, 0.000000);
CreateObject(4602, 3057.031982, -2120.037842, -60.948921, 0.000000, 0.000000, 0.000000);
CreateObject(973, 3028.810303, -1890.697144, 2.355744, 0.000000, 0.000000, 81.3282650467);
CreateObject(973, 3031.916260, -1882.184570, 2.337573, 0.000000, 0.000000, 58.8282697277);
CreateObject(973, 3038.014893, -1875.440186, 2.387573, 0.000000, 0.000000, 36.3282744087);
CreateObject(973, 3046.206543, -1871.576782, 2.387573, 0.000000, 0.000000, 13.8282790897);
CreateObject(973, 3055.235352, -1871.188965, 2.412573, 0.000000, 0.000000, -8.67171622931);
CreateObject(973, 3063.784424, -1874.220215, 2.478672, 0.000000, 0.000000, -31.1717115483);
CreateObject(973, 3070.432617, -1880.260986, 2.503672, 0.000000, 0.000000, -53.6717068673);
CreateObject(973, 3073.082764, -1888.566772, 2.520415, 0.000000, 0.000000, -90.8594179687);
CreateObject(1237, 3073.262939, -1887.126709, 1.838737, 0.000000, 0.000000, 0.000000);
CreateObject(973, 3059.628906, -1831.936768, 2.571842, 0.000000, 0.000000, -181.718835937);
CreateObject(973, 3050.466797, -1832.562866, 2.546841, 0.000000, 0.000000, -170.468866926);
CreateObject(973, 3042.030029, -1833.988647, 2.546841, 0.000000, 0.000000, -170.468866926);
CreateObject(973, 3033.237305, -1836.397583, 2.571841, 0.000000, 0.000000, -159.218840618);
CreateObject(973, 3024.823242, -1839.604370, 2.571841, 0.000000, 0.000000, -159.218840618);
CreateObject(973, 3017.280273, -1843.436035, 2.571841, 0.000000, 0.000000, -147.968814311);
CreateObject(973, 3010.176758, -1848.961182, 2.571841, 0.000000, 0.000000, -136.718845299);
CreateObject(973, 3004.279541, -1855.747437, 2.571841, 0.000000, 0.000000, -125.468818992);
CreateObject(973, 2999.201660, -1862.924683, 2.596842, 0.859436692696, 0.000000, -125.468818992);
CreateObject(973, 2993.936523, -1870.334961, 2.621842, 0.000000, 0.000000, -125.468876288);
CreateObject(1237, 3072.614502, -1887.069824, 1.833077, 0.000000, 0.000000, 0.000000);
CreateObject(1237, 3073.135254, -1887.327515, 2.724143, 0.000000, 0.000000, 0.000000);
CreateObject(1237, 3072.687744, -1887.353027, 2.699569, 0.000000, 0.000000, 0.000000);
CreateObject(973, 3109.038330, -2219.470215, 2.500180, 0.000000, 0.000000, 81.3282650467);
CreateObject(973, 3106.837402, -2228.204590, 2.500180, 0.000000, 0.000000, 70.0782387393);
CreateObject(973, 3103.815918, -2236.444580, 2.550180, 0.000000, 0.000000, 70.0782387393);
CreateObject(973, 3100.008789, -2244.378662, 2.550180, 0.000000, 0.000000, 58.8282697277);
CreateObject(973, 3094.751709, -2251.355469, 2.600181, 0.000000, 0.000000, 47.5782434203);
CreateObject(973, 3088.863770, -2257.702148, 2.650181, 0.000000, 0.000000, 47.5782434203);
CreateObject(973, 3082.007568, -2263.872070, 2.650181, 0.000000, 0.000000, 36.3282744087);
CreateObject(973, 3074.187988, -2268.563232, 2.625181, 0.000000, 0.000000, 25.0782481013);
CreateObject(973, 3066.243896, -2271.985352, 2.610861, 0.000000, 0.000000, 21.6405586263);
CreateObject(973, 3057.660889, -2274.415771, 2.625181, 0.000000, 0.000000, 10.3905323189);
CreateObject(973, 3048.732178, -2275.125488, 2.650181, 0.000000, 0.000000, -0.859436692696);
CreateObject(973, 3039.563477, -2275.872314, 2.575181, 0.859436692696, -0.859436692696, 10.3905323189);
CreateObject(7304, 3025.734375, -2019.715698, 6.567963, 0.000000, 0.000000, 0.000000);
CreateObject(7304, 3025.762207, -2019.718628, 6.550190, 0.000000, 0.000000, 180.000019848);
CreateObject(984, 3000.136230, -2062.701660, 1.873630, 0.000000, -89.3813587446, -89.999981276);
CreateObject(984, 3015.248535, -2062.649902, 1.873630, 0.000000, -89.3813587446, -89.999981276);
CreateObject(4113, 3090.939453, -1884.755371, -34.366211, 0.000000, 0.000000, -346.249109908);
CreateObject(1673, 2998.684814, -2056.858398, 5.909145, 0.000000, 0.000000, -180.000019848);
CreateObject(1673, 3015.765625, -2055.974365, 5.884145, 0.000000, 0.000000, -360.000039696);
CreateObject(1263, 3013.341797, -2056.618896, 8.524136, 0.000000, 0.000000, 89.999981276);
CreateObject(1263, 3020.262695, -2056.626709, 8.529920, 0.000000, 0.000000, 89.999981276);
CreateObject(1263, 3001.466064, -2056.589844, 8.574139, 0.000000, 0.000000, 89.999981276);
CreateObject(1263, 2994.876953, -2056.588623, 8.579926, 0.000000, 0.000000, 89.999981276);
CreateObject(4113, 2984.317383, -1862.543945, -34.177166, 0.000000, 0.000000, -270.696775099);
CreateObject(974, 2985.757568, -1884.786133, 0.917180, 0.000000, 0.000000, 0.936728699259);
CreateObject(973, 2990.535156, -1878.173096, 2.621842, 0.000000, 0.000000, -102.968880969);
CreateObject(973, 2989.090332, -1884.388916, 2.596842, 0.000000, 0.000000, -102.968880969);
CreateObject(974, 3112.927490, -2215.170410, 0.937702, 0.000000, 0.000000, -180.000019848);
CreateObject(1237, 3072.343506, -2212.050537, 1.880831, 0.000000, 0.000000, 0.000000);
CreateObject(1237, 3072.468994, -2211.660156, 2.631188, 0.000000, 0.000000, 0.000000);
CreateObject(1237, 3072.947021, -2211.630615, 2.628147, 0.000000, 0.000000, 0.000000);
CreateObject(8411, 3050.006104, -2225.710449, -63.147194, 0.000000, 0.000000, -359.372708206);
CreateObject(8411, 3041.936035, -2200.363770, -63.149902, 0.000000, 0.000000, -359.372708206);
CreateObject(8411, 3051.411133, -2175.753418, -63.158176, 0.000000, 0.000000, -359.372708206);
CreateObject(8411, 3050.738770, -2150.500488, -63.158115, 0.000000, 0.000000, -359.372708206);
CreateObject(8411, 3050.406494, -2126.211182, -63.224342, 0.000000, 0.000000, -359.372708206);
CreateObject(7191, 3048.747803, -2168.648926, 3.760015, 0.000000, 0.000000, -89.999981276);
CreateObject(7191, 3050.601807, -2168.635010, 3.754474, 0.000000, 0.000000, -89.999981276);
CreateObject(1215, 3102.303955, -2240.499268, 2.856643, 0.000000, 0.000000, 0.000000);
CreateObject(1215, 3097.762695, -2247.911133, 2.931645, 0.000000, 0.000000, 0.000000);
CreateObject(1215, 3085.602295, -2261.125732, 3.006644, 0.000000, 0.000000, 0.000000);
CreateObject(1215, 3078.200439, -2266.614014, 2.956644, 0.000000, 0.000000, 0.000000);
CreateObject(1215, 3062.142822, -2273.546875, 2.981644, 0.000000, 0.000000, 0.000000);
CreateObject(1215, 3053.177734, -2275.178223, 2.956644, 0.000000, 0.000000, 0.000000);
CreateObject(1215, 2991.580811, -1873.687012, 2.953305, 0.000000, 0.000000, 0.000000);
CreateObject(1215, 3006.950684, -1852.117554, 2.903304, 0.000000, 0.000000, 0.000000);
CreateObject(1215, 3013.535889, -1845.896606, 2.903304, 0.000000, 0.000000, 0.000000);
CreateObject(1215, 3021.191650, -1841.081177, 2.903304, 0.000000, 0.000000, 0.000000);
CreateObject(1215, 3037.618408, -1834.832153, 2.895947, 0.000000, 0.000000, 0.000000);
CreateObject(1215, 3055.074951, -1831.895020, 2.878305, 0.000000, 0.000000, 0.000000);
CreateObject(718, 3069.548340, -2186.159912, 1.608710, 0.000000, 0.000000, 0.000000);
CreateObject(718, 3069.740967, -2210.326172, 1.616984, 0.000000, 0.000000, 0.000000);
CreateObject(718, 3028.892822, -2186.153809, 1.608710, 0.000000, 0.000000, 0.000000);
CreateObject(718, 3028.899902, -2210.325439, 1.615818, 0.000000, 0.000000, 0.000000);
CreateObject(8411, 3141.540283, -1935.967041, -49.475712, 0.000000, 0.859436692696, -270.077235835);
CreateObject(8411, 3141.563965, -1994.052612, -48.598419, 0.000000, 0.859436692696, -270.077235835);
CreateObject(8411, 3141.522217, -2053.744873, -48.285172, 0.000000, 0.000000, -270.077235835);
CreateObject(8411, 3141.545166, -2115.935547, -47.837929, 0.000000, 0.859436692696, -270.077235835);
CreateObject(8411, 3141.556152, -2162.195068, -47.353897, 0.000000, 0.000000, -270.077235835);
CreateObject(8411, 3141.533936, -2197.719727, -46.899353, 0.000000, 0.859436692696, -270.077235835);
CreateObject(4729, 3128.806641, -2013.964233, 11.252138, 0.000000, 0.000000, 199.921647793);
CreateObject(7305, 3129.317627, -2059.627930, 12.063894, 0.000000, 0.000000, -44.999990638);
CreateObject(10771, 2117.8544921875, -2999.533203125, 4.5205101966858, 0, 0, 0);
CreateObject(11145, 2054.9230957031, -2999.5417480469, 3.3213114738464, 0, 0, 0);
CreateObject(11146, 2108.8671875, -2998.9287109375, 11.356231689453, 0, 0, 0);
CreateObject(10770, 2121.0810546875, -3007.07421875, 37.727993011475, 0, 0, 0);
CreateObject(11237, 2121.0891113281, -3007.1801757813, 37.71671295166, 0, 0, 0);
CreateObject(10772, 2119.2021484375, -2999.763671875, 16.309572219849, 0, 0, 0);
CreateObject(9819, 2186.994140625, -2990.61328125, 10.11597442627, 0, 0, 0);
CreateObject(16782, 2188.109375, -2998.1845703125, 12.294052124023, 0, 0, 180.10986328125);
CreateObject(9958, 2307.3344726563, -2793.9763183594, 1.6153073310852, 0, 0, 189.42993164063);
CreateObject(11149, 2111.8334960938, -3004.6743164063, 11.010753631592, 0, 0, 0);
CreateObject(11374, 2111.8374023438, -3004.6870117188, 10.95894241333, 0, 0, 0);
CreateObject(1671, 2186.3112792969, -2988.6005859375, 9.7226963043213, 0, 0, 128.19473266602);
CreateObject(1671, 2186.2619628906, -2991.5866699219, 9.7226963043213, 0, 0, 89.504821777344);
CreateObject(1671, 2186.4956054688, -2994.1840820313, 9.7226963043213, 0, 0, 89.500122070313);
CreateObject(2985, 2114.5615234375, -2983.337890625, 9.2472972869873, 0, 0, 64.494903564453);
CreateObject(2985, 2117.5615234375, -2983.337890625, 9.2472972869873, 0, 0, 64.48974609375);
CreateObject(2985, 2120.5615234375, -2983.337890625, 9.2472972869873, 0, 0, 64.48974609375);
CreateObject(2985, 2123.5615234375, -2983.337890625, 9.2472972869873, 0, 0, 64.48974609375);
CreateObject(2985, 2126.5615234375, -2983.337890625, 9.2472972869873, 0, 0, 64.48974609375);
CreateObject(2985, 2129.5615234375, -2983.337890625, 9.2472972869873, 0, 0, 64.48974609375);
CreateObject(2985, 2132.5615234375, -2983.337890625, 9.2472972869873, 0, 0, 64.48974609375);
CreateObject(2985, 2135.5615234375, -2983.337890625, 9.2472972869873, 0, 0, 64.48974609375);
CreateObject(2985, 2138.5615234375, -2983.337890625, 9.2472972869873, 0, 0, 64.48974609375);
CreateObject(2985, 2141.5615234375, -2983.337890625, 9.2472972869873, 0, 0, 64.48974609375);
CreateObject(2985, 2144.5615234375, -2983.337890625, 9.2472972869873, 0, 0, 64.48974609375);
CreateObject(2985, 2147.5615234375, -2983.337890625, 9.2472972869873, 0, 0, 64.48974609375);
CreateObject(1801, 2134.0422363281, -3007.7216796875, 9.2216911315918, 0, 0, 180);
CreateObject(1801, 2131.7919921875, -3007.7612304688, 9.2216911315918, 0, 0, 179.99450683594);
CreateObject(1801, 2129.5419921875, -3007.8002929688, 9.2216911315918, 0, 0, 179.99450683594);
CreateObject(1801, 2127.2397460938, -3007.2719726563, 9.2216911315918, 0, 0, 179.99450683594);
CreateObject(1801, 2134.3234863281, -3003.5783691406, 9.2216911315918, 0, 0, 179.99450683594);
CreateObject(1801, 2132.0961914063, -3003.5795898438, 9.2216911315918, 0, 0, 179.99450683594);
CreateObject(1801, 2129.9543457031, -3003.6569824219, 9.2216911315918, 0, 0, 179.99450683594);
CreateObject(1801, 2127.5024414063, -3003.7719726563, 9.2216911315918, 0, 0, 179.99450683594);
CreateObject(3267, 2090.8415527344, -3007.1799316406, 28.539577484131, 0, 0, 91.444885253906);
CreateObject(3267, 2105.2294921875, -3002.7114257813, 21.89518737793, 0, 0, 336.04174804688);
CreateObject(3267, 2105.5368652344, -3011.1901855469, 21.870187759399, 0, 0, 230.33911132813);
CreateObject(3267, 2143.5463867188, -3011.419921875, 27.542934417725, 0, 0, 230.33386230469);
CreateObject(3267, 2142.8764648438, -3002.6772460938, 27.542934417725, 0, 0, 316.00366210938);
CreateObject(1682, 2151.1994628906, -3004.703125, 25.755847930908, 0, 0, 324.27026367188);
CreateObject(3798, 2055.365234375, -2987.6096191406, 1.1025614738464, 0, 0, 0);
CreateObject(3799, 2055.8259277344, -2990.0849609375, 0.97756159305573, 0, 0, 0);
CreateObject(3796, 2055.5803222656, -2993.4484863281, 1.1025614738464, 0, 0, 270);
CreateObject(11544, 285.84878540039, -1186.525390625, 81.354217529297, 0, 0, 224.30407714844);
CreateObject(3115, 265.32815551758, -1171.2127685547, 81.456077575684, 0, 0, 43.669799804688);
CreateObject(3115, 287.69119262695, -1195.2487792969, 82.08829498291, 0, 0, 43.665191650391);
CreateObject(11544, 268.30313110352, -1179.4696044922, 80.755012512207, 0, 0, 43.665191650391);
CreateObject(3934, 267.07568359375, -1171.4039306641, 81.772262573242, 0, 0, 132.99450683594);
CreateObject(11496, 1386.829, -747.194, 135.123, 0.0, 0.0, 0.0);
CreateObject(11496, 1376.324, -750.602, 135.123, 0.0, 0.0, -90.000);
CreateObject(11496, 1372.941, -747.178, 135.138, 0.0, 0.0, -180.000);
CreateObject(11496, 1382.106, -747.187, 135.129, 0.0, 0.0, -180.000);
CreateObject(11496, 1377.568, -747.212, 135.104, 0.0, 0.0, -180.000);
CreateObject(11496, 1379.158, -739.189, 137.779, 0.0, -91.100, 90.000);
CreateObject(11496, 1376.393, -739.164, 137.804, 0.0, -91.100, 90.000);
CreateObject(11496, 1368.257, -747.131, 137.838, 0.0, -91.100, 180.000);
CreateObject(11496, 1383.375, -755.077, 136.854, 179.623, -90.241, -90.000);
CreateObject(3851, 1374.176, -755.005, 137.338, 0.0, 0.0, 90.000);
CreateObject(11496, 1391.414, -753.473, 137.798, 0.0, -91.100, 0.0);
CreateObject(3851, 1391.370, -744.828, 137.322, 0.0, 0.0, 0.0);
CreateObject(3851, 1385.731, -739.225, 137.323, 0.0, 0.0, -90.000);
CreateObject(11496, 1391.470, -747.171, 141.813, 0.0, -91.100, 0.0);
CreateObject(11496, 1383.473, -739.273, 141.744, 0.0, -91.100, 90.000);
CreateObject(11496, 1376.277, -754.963, 135.122, 0.0, 0.0, -90.000);
CreateObject(970, 1368.436, -757.379, 135.873, 0.0, 0.0, -90.000);
CreateObject(970, 1375.363, -757.369, 135.885, 0.0, 0.0, -90.000);
CreateObject(739, 1378.392, -748.513, 97.223, 0.0, 0.0, 0.0);
CreateObject(690, 1388.609, -721.692, 90.104, 0.0, 0.0, 0.0);
CreateObject(694, 1402.191, -770.125, 95.926, 0.0, 0.0, 0.0);
CreateObject(695, 1427.950, -750.174, 92.493, 0.0, 0.0, 0.0);
CreateObject(696, 1416.990, -742.975, 97.388, 0.0, 0.0, 0.0);
CreateObject(704, 1431.820, -729.433, 85.532, 0.0, 0.0, 0.0);
CreateObject(719, 1428.870, -713.904, 88.413, 0.0, 0.0, 0.0);
CreateObject(720, 1437.331, -761.818, 90.448, 0.0, 0.0, 0.0);
CreateObject(721, 1356.622, -741.752, 96.791, 0.0, 0.0, 0.0);
CreateObject(722, 1447.099, -784.525, 92.663, 0.0, 0.0, 0.0);
CreateObject(723, 1406.318, -737.733, 105.021, 0.0, 0.0, 0.0);
CreateObject(724, 1365.618, -719.505, 94.492, 0.0, 0.0, 0.0);
CreateObject(725, 1345.671875, -788.4423828125, 81.777000427246, 0, 0, 0);
CreateObject(731, 1354.624, -761.356, 97.631, 0.0, 0.0, 0.0);
CreateObject(791, 1408.04296875, -772.35546875, 83, 0, 0, 292.49450683594);
CreateObject(730, 1356.093, -723.556, 100.813, 0.0, 0.0, 0.0);
CreateObject(725, 1361.368, -723.520, 100.698, 0.0, 0.0, 0.0);
CreateObject(724, 1374.615, -734.668, 97.479, 0.0, 0.0, 0.0);
CreateObject(722, 1416.045, -719.869, 88.901, 0.0, 0.0, 0.0);
CreateObject(9339, 1391.779, -751.568, 135.971, 0.0, 0.0, -90.000);
CreateObject(1502, 1378.828, -751.677, 135.320, 0.0, 0.0, -90.000);
CreateObject(1502, 1378.871, -754.719, 135.320, 0.0, 0.0, 90.000);
CreateObject(9339, 1391.798, -751.587, 137.375, 0.0, 0.0, -90.000);
CreateObject(9339, 1391.789, -751.610, 138.779, 0.0, 0.0, -90.000);
CreateObject(1745, 1370.549, -743.759, 135.336, 0.0, 0.0, 0.0);
CreateObject(1828, 1387.680, -742.169, 135.321, 0.0, 0.0, -45.000);
CreateObject(2127, 1390.448, -750.807, 135.322, 0.0, 0.0, -180.000);
CreateObject(2130, 1388.336, -750.837, 135.323, 0.0, 0.0, -180.000);
CreateObject(2131, 1386.227, -750.898, 135.322, 0.0, 0.0, -180.000);
CreateObject(2135, 1384.138, -750.900, 135.328, 0.0, 0.0, -180.000);
CreateObject(2147, 1383.114, -750.944, 135.324, 0.0, 0.0, -180.000);
CreateObject(2224, 1372.034, -749.391, 135.333, 0.0, 0.0, 135.000);
CreateObject(2231, 1368.706, -739.364, 137.829, 0.0, 0.0, 56.250);
CreateObject(2231, 1390.798, -751.465, 138.681, 0.0, 0.0, -135.000);
CreateObject(2296, 1379.471, -739.785, 135.327, 0.0, 0.0, -360.000);
CreateObject(2514, 1390.672, -752.214, 135.322, 0.0, 0.0, -90.000);
CreateObject(2516, 1384.464, -754.252, 135.329, 0.0, 0.0, 0.0);
CreateObject(2517, 1391.260, -753.727, 135.365, 0.0, 0.0, 90.000);
CreateObject(2523, 1382.811, -754.336, 135.329, 0.0, 0.0, -180.000);
CreateObject(2628, 1389.191, -744.207, 135.317, 0.0, 0.0, 146.250);
CreateObject(2629, 1387.610, -740.761, 135.325, 0.0, 0.0, 112.500);
CreateObject(14705, 1369.038, -739.980, 136.187, 0.0, 0.0, 0.0);
CreateObject(14867, 1368.906, -747.665, 136.867, 0.0, 0.0, 270.000);
CreateObject(1481, 1374.984, -756.106, 136.025, 0.0, 0.0, -90.000);
CreateObject(1646, 1369.749, -756.820, 135.659, 0.0, 0.0, 33.750);
CreateObject(1742, 1374.546, -739.823, 135.333, 0.0, 0.0, 0.0);
CreateObject(1726, 1381.612, -750.658, 135.322, 0.0, 0.0, -180.000);
CreateObject(2637, 1389.817, -746.848, 135.728, 0.0, 0.0, -90.000);
CreateObject(2636, 1388.728, -747.593, 135.959, 0.0, 0.0, -157.500);
CreateObject(2636, 1388.473, -746.006, 135.959, 0.0, 0.0, -213.750);
CreateObject(731, 1346.951, -728.625, 100.560, 0.0, 0.0, 0.0);
CreateObject(724, 1342.639, -736.465, 97.102, 0.0, 0.0, 0.0);
CreateObject(11496, 1376.382, -752.647, 139.295, 180.482, 0.0, 90.000);
CreateObject(11496, 1376.416, -745.754, 139.255, 180.482, 0.0, 90.000);
CreateObject(11496, 1376.509, -743.274, 139.201, 180.482, 0.0, 90.000);
CreateObject(11496, 1386.693, -747.279, 139.269, 180.482, 0.0, 0.0);
CreateObject(12957, 2533.388671875, -1704.3758544922, 13.261029243469, 0, 0, 318.31530761719);
CreateObject(12954, 2540.7412109375, -1698.4892578125, 12.419945716858, 0, 0, 3.966064453125);
CreateObject(11292, 2519.875, -1709.8347167969, 13.92193031311, 0, 0, 0);
CreateObject(1721, 2523.3955078125, -1710.6278076172, 12.715912818909, 0, 0, 43.669799804688);
CreateObject(1810, 2522.6516113281, -1708.8449707031, 12.715912818909, 0, 0, 0);
CreateObject(2121, 2521.5107421875, -1709.2623291016, 13.229182243347, 0, 0, 41.684783935547);
CreateObject(2644, 2522.2514648438, -1709.6862792969, 13.120653152466, 0, 0, 7.93994140625);
CreateObject(1650, 2515.7609863281, -1707.7973632813, 13.022575378418, 0, 0, 0);
CreateObject(1650, 2515.7592773438, -1707.9331054688, 13.022575378418, 0, 0, 0);
CreateObject(2044, 2522.0661621094, -1709.9934082031, 13.574588775635, 0, 0, 35.729766845703);
CreateObject(5816, 2521.3010253906, -1714.6876220703, 14.266344070435, 0, 0, 0);
CreateObject(982, 2497.0522460938, -1724.3201904297, 18.265621185303, 0, 0, 89.324493408203);
CreateObject(983, 2484.19140625, -1721.0085449219, 18.265621185303, 0, 0, 0);
CreateObject(983, 2484.2160644531, -1716.3468017578, 18.265621185303, 0, 0, 0);
CreateObject(983, 2487.228515625, -1712.9123535156, 17.981990814209, 0, 0, 270.67565917969);
CreateObject(1413, 2540.71484375, -1717.9541015625, 13.751415252686, 0, 0, 89.324340820313);
CreateObject(1413, 2540.7294921875, -1712.517578125, 13.754775047302, 0, 0, 268.68713378906);
CreateObject(946, 2486.9528808594, -1717.9990234375, 19.78498840332, 0, 0, 266.70568847656);
CreateObject(946, 2510.7690429688, -1718.2218017578, 19.78498840332, 0, 0, 97.264495849609);
CreateObject(2114, 2487.4619140625, -1718.6875, 17.72837638855, 0, 0, 0);
CreateObject(2110, 2513.8422851563, -1721.6752929688, 17.582065582275, 0, 0, 0);
CreateObject(1763, 2494.8762207031, -1722.4829101563, 0.85284209251404, 0, 0, 334.19519042969);
CreateObject(1763, 2493.29296875, -1722.1318359375, 17.582065582275, 0, 0, 334.19311523438);
CreateObject(1763, 2454.7880859375, -1784.7626953125, 12.546875, 0, 0, 314.3388671875);
CreateObject(1958, 2515.0505371094, -1721.626953125, 18.430543899536, 0, 0, 0);
CreateObject(1575, 2514.2744140625, -1721.5404052734, 18.333053588867, 0, 0, 0);
CreateObject(2045, 2513.7932128906, -1721.6987304688, 18.47350692749, 0, 0, 342.13513183594);
CreateObject(2061, 2511.5471191406, -1722.5961914063, 17.873994827271, 0, 0, 0);
CreateObject(1636, 2518.6613769531, -1722.9329833984, 17.695066452026, 0, 0, 0);
CreateObject(1636, 2518.3488769531, -1722.8891601563, 17.695066452026, 0, 0, 0);
CreateObject(1636, 2517.9653320313, -1722.8374023438, 17.695066452026, 0, 0, 0);
CreateObject(1636, 2518.8850097656, -1722.9099121094, 17.78208732605, 0, 0, 0);
CreateObject(1550, 2522.3452148438, -1709.4346923828, 13.940398216248, 0, 0, 0);
CreateObject(3015, 2516.75, -1711.0999755859, 12.715912818909, 0, 0, 0);
CreateObject(3015, 2515.7712402344, -1711.1170654297, 12.715912818909, 0, 0, 0);
CreateObject(3015, 2516.2563476563, -1711.0971679688, 12.715912818909, 0, 0, 0);
CreateObject(3015, 2515.7739257813, -1711.1455078125, 13.314755439758, 0, 0, 0);
CreateObject(3015, 2516.2717285156, -1711.1081542969, 13.314755439758, 0, 0, 0);
CreateObject(3015, 2516.7661132813, -1711.1124267578, 13.314755439758, 0, 0, 0);
CreateObject(964, 2516.2175292969, -1709.26953125, 12.715912818909, 0, 0, 85.3544921875);
CreateObject(1362, 2531.1149902344, -1716.1207275391, 13.094958305359, 0, 0, 0);
CreateObject(2690, 2524.0305175781, -1711.4519042969, 13.334661483765, 0, 0, 0);
CreateObject(1672, 2516.1394042969, -1709.3352050781, 13.637370109558, 0, 0, 0);
CreateObject(2977, 2528.6525878906, -1721.1802978516, 12.543425559998, 0, 0, 0);
CreateObject(2988, 2523.8693847656, -1722.1613769531, 11.296875, 0, 0, 123.78656005859);
CreateObject(17971, 2529.0737304688, -1708.6315917969, 21.651226043701, 0, 0, 0);
CreateObject(2670, 2531.4096679688, -1710.5473632813, 12.560802459717, 0, 0, 0);
CreateObject(2671, 2520.5434570313, -1712.8682861328, 12.572098731995, 0, 0, 0);
CreateObject(2672, 2527.2263183594, -1714.9475097656, 12.775862693787, 0, 0, 0);
CreateObject(2673, 2526.5419921875, -1708.552734375, 12.381940841675, 0, 0, 0);
CreateObject(2673, 2525.9416503906, -1717.9086914063, 12.600893974304, 0, 0, 0);
CreateObject(2674, 2529.0651855469, -1714.0440673828, 12.498944282532, 0, 0, 0);
CreateObject(2675, 2522.4584960938, -1716.8463134766, 12.605874061584, 0, 0, 0);
CreateObject(2676, 2528.0341796875, -1718.2136230469, 12.619219779968, 0, 0, 0);
CreateObject(2676, 2533.2260742188, -1712.3723144531, 12.565014839172, 0, 0, 0);
CreateObject(2677, 2528.4616699219, -1710.9239501953, 12.772227287292, 0, 0, 0);
CreateObject(14840, 2540.5207519531, -1719.2642822266, 13.68671131134, 0, 0, 192.54431152344);
CreateObject(15027, 2529.2658691406, -1711.4365234375, 12.801911354065, 0, 0, 0);
CreateObject(1211, 1832.835571, -2045.847656, 13.157681, 0.0000, 0.0000, 0.0000);
CreateObject(12839, 1569.2211914063, -1636.2456054688, 16.276922225952, 0, 0, 90);
CreateObject(12839, 1568.0002441406, -1635.0701904297, 22.525701522827, 0, 0, 270);
CreateObject(3280, 1572.7990722656, -1635.3037109375, 18.933282852173, 0, 0, 0);
CreateObject(8614, 1569.0943603516, -1636.4029541016, 27.404876708984, 0, 0, 180);
CreateObject(1696, 1570.2749023438, -1639.8000488281, 27.593437194824, 0, 0, 0);
CreateObject(3280, 1564.4204101563, -1636.296875, 25.158514022827, 0, 0, 0);
CreateObject(616, 1810.6628417969, -1683.4248046875, 12.538656234741, 0, 0, 0);
CreateObject(967, 2312.4553222656, -1222.6706542969, 23.134819030762, 0, 0, 5.9549560546875);
CreateObject(3555, 2392.8852539063, -1296.3286132813, 27.260917663574, 0, 0, 90.041625976563);
CreateObject(16779, 765.13500976563, 5.973804473877, 1003.9173583984, 0, 0, 0);
CreateObject(981, 835.96203613281, -2066.5080566406, 11.8671875, 0, 0, 0);
CreateObject(1281, 524.77893066406, -1849.6116943359, 4.397177696228, 0, 0, 0);
CreateObject(1281, 522.09704589844, -1849.8695068359, 4.3233165740967, 0, 0, 0);
CreateObject(1670, 525.00042724609, -1849.4013671875, 4.4048161506653, 0, 0, 0);
CreateObject(1670, 525, -1849.4013671875, 4.4048161506653, 0, 0, 0);
CreateObject(1670, 522.46380615234, -1849.2622070313, 4.4041299819946, 0, 0, 0);
CreateObject(2222, 521.40716552734, -1849.5135498047, 4.4724884033203, 0, 0, 262.73571777344);
CreateObject(2222, 521.40625, -1849.5126953125, 4.4724884033203, 0, 0, 262.73254394531);
CreateObject(2222, 524.08294677734, -1849.5115966797, 4.473174571991, 0, 0, 262.73254394531);
CreateObject(1231, 737.05706787109, -1799.5927734375, 14.760133743286, 0, 0, 0);
CreateObject(1231, 737.056640625, -1799.5927734375, 14.760133743286, 0, 0, 0);
CreateObject(1714, 256.70474243164, 69.850341796875, 1002.640625, 0, 0, 276.63061523438);
CreateObject(1714, 217.53944396973, 69.809532165527, 1004.0390625, 0, 0, 87.339508056641);
CreateObject(1714, 217.4326171875, 67.9482421875, 1004.0466308594, 0, 0, 85.352783203125);
CreateObject(1810, 219.89239501953, 67.944869995117, 1004.0390625, 0, 0, 268.68713378906);
CreateObject(1810, 219.87478637695, 67.354217529297, 1004.0466308594, 0, 0, 266.69860839844);
CreateObject(1810, 219.79431152344, 69.265258789063, 1004.0390625, 0, 0, 268.68713378906);
CreateObject(1810, 219.64195251465, 69.957206726074, 1004.0390625, 0, 0, 268.68713378906);
CreateObject(2165, 218.32716369629, 70.802474975586, 1004.0390625, 0, 0, 272.65869140625);
CreateObject(1738, 217.35038757324, 72.772407531738, 1004.6936645508, 0, 0, 0);
CreateObject(1738, 218.19621276855, 72.8203125, 1004.6936645508, 0, 0, 0);
CreateObject(1738, 218.1953125, 72.8203125, 1004.6936645508, 0, 0, 0);
CreateObject(1738, 218.1953125, 72.8203125, 1004.6936645508, 0, 0, 0);
CreateObject(1738, 218.15786743164, 65.796875, 1004.7012329102, 0, 0, 0);
CreateObject(1738, 217.32153320313, 65.796875, 1004.7012329102, 0, 0, 0);
CreateObject(2186, 221.6761932373, 72.27278137207, 1004.0390625, 0, 0, 272.66064453125);
CreateObject(1808, 221.73025512695, 68.600868225098, 1004.0390625, 0, 0, 272.66064453125);
CreateObject(914, 221.47946166992, 65.796875, 1007.426574707, 0, 0, 0);
CreateObject(2287, 217.59111022949, 69.071586608887, 1005.7413330078, 0, 0, 95.279357910156);
CreateObject(2282, 219.78063964844, 72.070472717285, 1006.164855957, 0, 0, 0);
CreateObject(2263, 217.91412353516, 72.329010009766, 1006.1842651367, 0, 0, 0);
CreateObject(2007, 219.59309387207, 72.30485534668, 1004.0390625, 0, 0, 0);
CreateObject(2000, 217.25735473633, 71.743576049805, 1004.0390625, 0, 0, 89.324493408203);
CreateObject(2164, 220.77944946289, 66.043258666992, 1004.1343994141, 0, 0, 179.36633300781);
CreateObject(2162, 221.49278259277, 66.867637634277, 1004.0390625, 0, 0, 91.309509277344);
CreateObject(2266, 218.93634033203, 66.630096435547, 1005.5022583008, 0, 0, 179.36633300781);
CreateObject(1722, 242.70434570313, 70.837554931641, 1002.640625, 0, 0, 272.65869140625);
CreateObject(1722, 242.68957519531, 69.889343261719, 1002.640625, 0, 0, 272.65869140625);
CreateObject(1722, 242.6936340332, 68.991287231445, 1002.640625, 0, 0, 272.65869140625);
CreateObject(1722, 242.63433837891, 68.123817443848, 1002.640625, 0, 0, 272.65869140625);
CreateObject(1722, 242.64768981934, 71.757141113281, 1002.7154541016, 0, 0, 272.65869140625);
CreateObject(2008, 218.35971069336, 68.968338012695, 1004.0390625, 0, 0, 272.65869140625);
CreateObject(2180, 216.47093200684, 74.390655517578, 1004.0390625, 0, 0, 0);
CreateObject(2180, 214.49609375, 74.3466796875, 1004.0390625, 0, 0, 0);
CreateObject(2180, 214.49609375, 74.3466796875, 1004.0390625, 0, 0, 0);
CreateObject(2222, 217.6531829834, 74.023597717285, 1004.9090576172, 0, 0, 0);
CreateObject(2222, 217.65234375, 74.0234375, 1004.9090576172, 0, 0, 0);
CreateObject(2222, 217.65234375, 74.0234375, 1004.9090576172, 0, 0, 0);
CreateObject(2222, 216.99728393555, 74.086898803711, 1004.9090576172, 0, 0, 0);
CreateObject(2222, 216.18524169922, 74.079681396484, 1004.9090576172, 0, 0, 0);
CreateObject(2342, 215.68174743652, 74.300170898438, 1004.9495239258, 0, 0, 0);
CreateObject(2425, 214.46815490723, 74.140327453613, 1004.8406982422, 0, 0, 175.39636230469);
CreateObject(2647, 216.6123046875, 74.4697265625, 1004.997253418, 0, 0, 0);
CreateObject(2647, 216.6123046875, 74.4697265625, 1004.997253418, 0, 0, 0);
CreateObject(2647, 215.42666625977, 74.731674194336, 0.126220703125, 0, 0, 0);
CreateObject(2647, 215.46063232422, 74.731674194336, 0.0821533203125, 0, 0, 0);
CreateObject(2275, 218.50712585449, 74.815551757813, 1005.6986694336, 0, 0, 187.30627441406);
CreateObject(2270, 221.37420654297, 74.334884643555, 1005.5025024414, 0, 0, 187.30627441406);
CreateObject(2258, 219.05821228027, 82.656921386719, 1006.310546875, 0, 0, 0);
CreateObject(2204, 214.5779876709, 82.876014709473, 1004.0390625, 0, 0, 0);
CreateObject(2210, 217.77435302734, 82.90625, 1004.75, 0, 0, 0);
CreateObject(2167, 222.02745056152, 77.657249450684, 1004.0390625, 0, 0, 270.67565917969);
CreateObject(2164, 213.95281982422, 78.794303894043, 1004.0390625, 0, 0, 91.309509277344);
CreateObject(2606, 213.69589233398, 79.197471618652, 1006.1394042969, 0, 0, 89.324340820313);
CreateObject(1723, 216.0244140625, 79.9599609375, 1004.0390625, 0, 0, 0);
CreateObject(2313, 216.12718200684, 78.59831237793, 1004.0390625, 0, 0, 0);
CreateObject(2342, 216.24681091309, 78.507522583008, 1004.647644043, 0, 0, 0);
CreateObject(2647, 216.75280761719, 78.789222717285, 1004.6953735352, 0, 0, 0);
CreateObject(2768, 217.7953338623, 78.454658508301, 1004.5811157227, 0, 0, 0);
CreateObject(16155, 213.99543762207, 72.851417541504, 1006.2590332031, 0, 0, 7.93994140625);
CreateObject(1742, 220.21875, 73.92163848877, 1004.0390625, 0, 0, 179.36633300781);
CreateObject(2609, 221.83352661133, 81.193214416504, 1004.7707519531, 0, 0, 270.67565917969);
CreateObject(1782, 216.7346496582, 82.393005371094, 1005.908996582, 0, 0, 0);
CreateObject(633, 221.75173950195, 82.358924865723, 1005.0329589844, 0, 0, 0);
CreateObject(1723, 216.0244140625, 79.9599609375, 1004.0390625, 0, 0, 0);
CreateObject(1806, 240.62330627441, 82.083709716797, 1004.0390625, 0, 0, 187.30627441406);
CreateObject(1806, 235.31723022461, 82.198760986328, 1004.0390625, 0, 0, 175.39636230469);
CreateObject(1998, 255.79385375977, 86.435424804688, 1001.4453125, 0, 0, 0);
CreateObject(1998, 255.79296875, 86.4345703125, 1001.4453125, 0, 0, 0);
CreateObject(1998, 257.51614379883, 87.447708129883, 1001.4453125, 0, 0, 270.67565917969);
CreateObject(2165, 255.76614379883, 84.500152587891, 1001.4453125, 0, 0, 89.324493408203);
CreateObject(2165, 255.75494384766, 83.036682128906, 1001.4453125, 0, 0, 89.324340820313);
CreateObject(1714, 257.0954284668, 83.667007446289, 1001.4453125, 0, 0, 274.64562988281);
CreateObject(1714, 257.0947265625, 83.6669921875, 1001.4453125, 0, 0, 274.64172363281);
CreateObject(1714, 257.08764648438, 85.197631835938, 1001.4453125, 0, 0, 274.64172363281);
CreateObject(1714, 256.60641479492, 86.014312744141, 1001.4453125, 0, 0, 189.28723144531);
CreateObject(1714, 257.45602416992, 86.628662109375, 1001.4453125, 0, 0, 94.003845214844);
CreateObject(1808, 251.35433959961, 82.003402709961, 1001.4453125, 0, 0, 183.33630371094);
CreateObject(1721, 255.96983337402, 89.065742492676, 1001.4453125, 0, 0, 181.35131835938);
CreateObject(1721, 253.83380126953, 85.679588317871, 1001.4453125, 0, 0, 268.68701171875);
CreateObject(1721, 253.92071533203, 83.506950378418, 1001.4453125, 0, 0, 268.681640625);
CreateObject(1721, 257.75357055664, 89.276229858398, 1001.4453125, 0, 0, 181.35131835938);
CreateObject(2277, 256.9150390625, 87.0322265625, 1000.9890136719, 0, 0, 0);
CreateObject(2266, 258.36196899414, 85.518272399902, 1003.3870239258, 0, 0, 276.63061523438);
CreateObject(2269, 258.16470336914, 84.175971984863, 1003.1507568359, 0, 0, 276.63061523438);
CreateObject(2277, 258.36346435547, 83.077629089355, 1003.2290039063, 0, 0, 264.720703125);
CreateObject(1738, 258.26782226563, 81.8359375, 1002.1063232422, 0, 0, 0);
CreateObject(1738, 257.34539794922, 81.8359375, 1002.0999145508, 0, 0, 0);
CreateObject(1738, 251.38076782227, 91.8359375, 1002.0999145508, 0, 0, 0);
CreateObject(1738, 252.23294067383, 91.8359375, 1002.0999145508, 0, 0, 0);
CreateObject(2202, 253.35380554199, 91.322906494141, 1001.4453125, 0, 0, 0);
CreateObject(1369, 1177.0207519531, -1319.6312255859, 13.671961784363, 0, 0, 41.684783935547);
CreateObject(1369, 1177.0205078125, -1319.630859375, 13.671961784363, 0, 0, 41.68212890625);
CreateObject(1369, 1177.0278320313, -1328.021484375, 13.672311782837, 0, 0, 121.08178710938);
CreateObject(1228, 1406.0334472656, -1450.0294189453, 12.97581577301, 0, 0, 91.309509277344);
CreateObject(1228, 1403.1373291016, -1450.0972900391, 12.97581577301, 0, 0, 91.307373046875);
CreateObject(1228, 1399.7432861328, -1450.0013427734, 12.97581577301, 0, 0, 91.307373046875);
CreateObject(1228, 1396.7375488281, -1449.9310302734, 12.97581577301, 0, 0, 91.307373046875);
CreateObject(1237, 1404.5361328125, -1450.1815185547, 12.5546875, 0, 0, 0);
CreateObject(1237, 1398.4517822266, -1449.8959960938, 12.5546875, 0, 0, 0);
CreateObject(1237, 1401.2808837891, -1450.0671386719, 12.5546875, 0, 0, 0);
CreateObject(1228, 1355.3205566406, -1619.8342285156, 13.003360748291, 0, 0, 270.27026367188);
CreateObject(1228, 1359.5767822266, -1620.0908203125, 12.995441436768, 0, 0, 270.26904296875);
CreateObject(1228, 1359.576171875, -1620.0908203125, 12.995441436768, 0, 0, 270.263671875);
CreateObject(1228, 1364.0345458984, -1620.0183105469, 12.977780342102, 0, 0, 270.263671875);
CreateObject(1237, 1362.0302734375, -1620.2489013672, 12.562469482422, 0, 0, 0);
CreateObject(1237, 1357.5869140625, -1619.9896240234, 12.575551986694, 0, 0, 0);
CreateObject(1228, 1363.3269042969, -1682.8969726563, 12.977271080017, 0, 0, 270.27026367188);
CreateObject(1228, 1359.6839599609, -1682.6971435547, 12.996294021606, 0, 0, 270.26916503906);
CreateObject(1228, 1355.9147949219, -1682.6577148438, 13.015690803528, 0, 0, 270.26916503906);
CreateObject(1237, 1361.4454345703, -1682.7528076172, 12.56603717804, 0, 0, 0);
CreateObject(1237, 1358.0874023438, -1682.6494140625, 12.583435058594, 0, 0, 0);
CreateObject(1228, 1578.6658935547, -1746.6597900391, 12.96800327301, 0, 0, 0);
CreateObject(1228, 1579.0975341797, -1751.8802490234, 12.96800327301, 0, 0, 0);
CreateObject(1228, 1578.9812011719, -1759.9071044922, 12.957134246826, 0, 0, 0);
CreateObject(1228, 1579.263671875, -1755.82421875, 12.960708618164, 0, 0, 0);
CreateObject(1237, 1579.1518554688, -1749.2457275391, 12.546875, 0, 0, 0);
CreateObject(1237, 1579.3048095703, -1753.7982177734, 12.546875, 0, 0, 0);
CreateObject(1237, 1579.4471435547, -1758.2214355469, 12.53697013855, 0, 0, 0);
CreateObject(7894, 1723.5192871094, -1854.6636962891, 12.974678039551, 0, 0, 262.73571777344);
CreateObject(7894, 1723.5185546875, -1854.6630859375, 12.974678039551, 0, 0, 262.72705078125);
CreateObject(1228, 1355.2243652344, -1723.3304443359, 13.00643825531, 0, 0, 270.26916503906);
CreateObject(1228, 1362.4879150391, -1723.0783691406, 12.960202217102, 0, 0, 270.26916503906);
CreateObject(1228, 1359.0710449219, -1723.0352783203, 12.968864440918, 0, 0, 270.26916503906);
CreateObject(1237, 1357.1776123047, -1723.2941894531, 12.5662317276, 0, 0, 0);
CreateObject(1237, 1360.9827880859, -1722.6619873047, 12.539073944092, 0, 0, 0);
CreateObject(1228, 1367.083984375, -1592.6206054688, 12.96800327301, 0, 0, 256.36877441406);
CreateObject(1228, 1363.0701904297, -1591.4989013672, 12.96800327301, 0, 0, 256.36596679688);
CreateObject(1228, 1358.9644775391, -1590.3542480469, 12.96800327301, 0, 0, 256.36596679688);
CreateObject(1228, 1363.0661621094, -1574.0275878906, 12.96800327301, 0, 0, 256.36596679688);
CreateObject(1228, 1367.8289794922, -1575.1293945313, 12.96800327301, 0, 0, 256.36596679688);
CreateObject(1228, 1372.1928710938, -1576.0953369141, 12.96800327301, 0, 0, 256.36596679688);
CreateObject(1237, 1364.9354248047, -1592.1787109375, 12.546875, 0, 0, 0);
CreateObject(1237, 1360.9736328125, -1590.8039550781, 12.546875, 0, 0, 0);
CreateObject(1237, 1365.4322509766, -1574.4180908203, 12.546875, 0, 0, 0);
CreateObject(1237, 1370.2060546875, -1575.1196289063, 12.546875, 0, 0, 0);
CreateObject(1997, 1182.7219238281, -1319.9833984375, 12.577785491943, 0, 0, 59.549682617188);
CreateObject(1257, 1212.0308837891, -1314.7440185547, 13.836054801941, 0, 0, 0);
CreateObject(1257, 1212.2506103516, -1349.7225341797, 13.852411270142, 0, 0, 0);
CreateObject(1257, 1247.5681152344, -1313.1875, 13.671581268311, 0, 0, 181.35131835938);
CreateObject(1257, 1248.1053466797, -1350.4857177734, 13.67594909668, 0, 0, 181.35131835938);
CreateObject(1346, 1215.3956298828, -1292.6096191406, 13.895927429199, 0, 0, 0);
CreateObject(1349, 1346.5771484375, -1755.1052246094, 12.923557281494, 0, 0, 21.834838867188);
CreateObject(1349, 1354.5424804688, -1755.4686279297, 12.926765441895, 0, 0, 21.829833984375);
CreateObject(1349, 1348.5244140625, -1757.3724365234, 13.078197479248, 0, 0, 55.574645996094);
CreateObject(640, 1201.0860595703, -1382.3482666016, 12.931903839111, 0, 0, 0);
CreateObject(640, 1201.1531982422, -1375.3664550781, 12.960651397705, 0, 0, 0);
CreateObject(640, 1201.1794433594, -1371.4805908203, 12.988828659058, 0, 0, 0);
CreateObject(640, 1201.1735839844, -1366.8433837891, 13.014548301697, 0, 0, 0);
CreateObject(640, 1201.1949462891, -1362.6506347656, 13.037198066711, 0, 0, 0);
CreateObject(640, 1201.1981201172, -1358.2985839844, 13.072381973267, 0, 0, 0);
CreateObject(640, 1201.1700439453, -1353.2976074219, 13.099208831787, 0, 0, 0);
CreateObject(640, 1201.162109375, -1349.8527832031, 13.09836769104, 0, 0, 0);
CreateObject(640, 1201.1636962891, -1345.4885253906, 13.097100257874, 0, 0, 0);
CreateObject(640, 1201.1655273438, -1340.2510986328, 13.096124649048, 0, 0, 0);
CreateObject(640, 1201.115234375, -1377.8211669922, 12.953318595886, 0, 0, 0);
CreateObject(640, 1201.1591796875, -1335.0074462891, 13.095471382141, 0, 0, 0);
CreateObject(640, 1201.1550292969, -1330.8959960938, 13.095471382141, 0, 0, 0);
CreateObject(640, 1201.1173095703, -1327.6379394531, 13.095471382141, 0, 0, 0);
CreateObject(640, 1201.1052246094, -1322.3294677734, 13.095471382141, 0, 0, 0);
CreateObject(640, 1201.1135253906, -1317.2390136719, 13.095471382141, 0, 0, 0);
CreateObject(640, 1201.0853271484, -1312.0030517578, 13.095471382141, 0, 0, 0);
CreateObject(640, 1201.0704345703, -1306.8604736328, 13.088293075562, 0, 0, 0);
CreateObject(640, 1201.0705566406, -1301.7711181641, 13.084393501282, 0, 0, 0);
CreateObject(640, 1201.0877685547, -1297.0084228516, 13.080669403076, 0, 0, 0);
CreateObject(640, 1201.1038818359, -1293.9593505859, 13.078519821167, 0, 0, 0);
CreateObject(982, 1534.8203125, -1694.36328125, 13.066367149353, 0, 0, 0.2471923828125);
CreateObject(638, 1537.8818359375, -1665.8046875, 13.243908882141, 0, 0, 0);
CreateObject(638, 1537.8773193359, -1672.7238769531, 13.243908882141, 0, 0, 0);
CreateObject(638, 1537.8963623047, -1679.7998046875, 13.243908882141, 0, 0, 0);
CreateObject(878, 1546.865234375, -1662.2060546875, 14.715025901794, 0, 0, 0);
CreateObject(1364, 1513.0858154297, -1678.9190673828, 13.830996513367, 0, 0, 131.00952148438);
CreateObject(1364, 1513.0555419922, -1669.3742675781, 13.830996513367, 0, 0, 49.619750976563);
CreateObject(1597, 1495.3583984375, -1749.1187744141, 17.054271697998, 0, 0, 270.67565917969);
CreateObject(1597, 1466.2655029297, -1749.3354492188, 17.029256820679, 0, 0, 90.026458740234);
CreateObject(4882, 1529.4306640625, -1644.5048828125, 17.248348236084, 0, 0, 270.66467285156);
CreateObject(1257, 1523.3485107422, -1676.6818847656, 13.826066970825, 0, 0, 179.36279296875);
CreateObject(1231, 1543.404296875, -1669.2756347656, 15.286781311035, 0, 0, 270.67565917969);
CreateObject(1231, 1543.2532958984, -1682.0213623047, 15.286554336548, 0, 0, 270.67565917969);
CreateObject(1215, 1538.0928955078, -1669.2442626953, 13.111198425293, 0, 0, 0);
CreateObject(1215, 1538.0461425781, -1676.4141845703, 13.111198425293, 0, 0, 0);
CreateObject(7092, 1553.6220703125, -1692.3857421875, 23.843433380127, 0, 0, 358.01147460938);
CreateObject(3657, 1510.5672607422, -1673.9591064453, 13.56508731842, 0, 0, 90.181274414063);
CreateObject(878, 1546.865234375, -1662.2060546875, 14.715025901794, 0, 0, 0);
CreateObject(878, 1546.498046875, -1688.294921875, 14.715006828308, 0, 0, 0);
CreateObject(3115, 1566.9248046875, -1646.2998046875, 28.290950775146, 0, 0, 359.49743652344);
CreateObject(3934, 1566.5711669922, -1646.5231933594, 28.604648590088, 0, 0, 0);
CreateObject(8407, 1517.9366455078, -1664.5113525391, 14.022242546082, 0, 0, 0);
CreateObject(970, 1508.4260253906, -1665.5783691406, 13.098356246948, 0, 0, 0);
CreateObject(970, 1520.8793945313, -1663.5657958984, 13.098356246948, 0, 0, 0);
CreateObject(970, 1516.8815917969, -1665.5224609375, 13.098356246948, 0, 0, 0);
CreateObject(970, 1512.6796875, -1665.560546875, 13.098356246948, 0, 0, 0);
CreateObject(973, 1240.7412109375, -1928.20703125, 31.16166305542, 0, 0, 278.61169433594);
CreateObject(973, 1241.1640625, -1918.0439453125, 31.149658203125, 0, 0, 258.75549316406);
CreateObject(3749, 1291.658203125, -2056.7109375, 63.488792419434, 0, 0, 268.68713378906);
CreateObject(7921, 1283.0065917969, -2004.4693603516, 59.216156005859, 0, 0, 359.99975585938);
CreateObject(7922, 1243.5802001953, -2064.1657714844, 60.472732543945, 0, 0, 89.055450439453);
CreateObject(7191, 1283.3427734375, -2028.1533203125, 59.663383483887, 0, 0, 0);
CreateObject(7191, 1259.1279296875, -2002.93359375, 60.36791229248, 1.1099853515625, 0, 90);
CreateObject(7922, 1239.6728515625, -2003.6298828125, 60.375518798828, 0, 0, 0);
CreateObject(7191, 1194.1396484375, -2071.5830078125, 69.982490539551, 0, 0, 270.18420410156);
CreateObject(7191, 1149.763671875, -2001.6085205078, 69.982490539551, 0, 0, 269.92016601563);
CreateObject(7191, 1149.6350097656, -2071.6030273438, 69.982490539551, 0, 0, 269.93408203125);
CreateObject(7191, 1193.3206787109, -2001.5538330078, 69.982490539551, 0, 0, 270.1796875);
CreateObject(7894, 1244.5533447266, -2055.2485351563, 59.435157775879, 0, 0, 268.70373535156);
CreateObject(7191, 1267.2159423828, -2065.3283691406, 59.80961227417, 359, 1, 268.44067382813);
CreateObject(1215, 1207.8093261719, -2039.9915771484, 68.572135925293, 0, 0, 0);
CreateObject(1215, 1201.2855224609, -2040.0383300781, 68.572135925293, 0, 0, 0);
CreateObject(1215, 1191.9106445313, -2040.0245361328, 68.572135925293, 0, 0, 0);
CreateObject(1215, 1210.4351806641, -2040.8916015625, 68.564933776855, 0, 0, 0);
CreateObject(1215, 1201.4924316406, -2033.9228515625, 68.572135925293, 0, 0, 0);
CreateObject(1215, 1207.8137207031, -2033.9610595703, 68.572135925293, 0, 0, 0);
CreateObject(1215, 1210.337890625, -2033.12109375, 68.572135925293, 0, 0, 0);
CreateObject(1215, 1196.3876953125, -2033.8819580078, 68.572135925293, 0, 0, 0);
CreateObject(1215, 1185.4970703125, -2033.9423828125, 68.572135925293, 0, 0, 0);
CreateObject(1215, 1196.3117675781, -2040.0490722656, 68.572135925293, 0, 0, 0);
CreateObject(1215, 1191.9609375, -2033.90625, 68.572135925293, 0, 0, 0);
CreateObject(1215, 1185.4365234375, -2040.0649414063, 68.572135925293, 0, 0, 0);
CreateObject(1215, 1168.5987548828, -2045.7742919922, 68.572135925293, 0, 0, 0);
CreateObject(1215, 1181.328125, -2028.2080078125, 68.572135925293, 0, 0, 0);
CreateObject(1215, 1181.32421875, -2045.7861328125, 68.572135925293, 0, 0, 0);
CreateObject(1215, 1168.5814208984, -2028.2287597656, 68.564933776855, 0, 0, 0);
CreateObject(1215, 1164.5211181641, -2033.9459228516, 68.572135925293, 0, 0, 0);
CreateObject(1215, 1164.578125, -2040.0794677734, 68.572135925293, 0, 0, 0);
CreateObject(1215, 1156.6826171875, -2033.8735351563, 68.572135925293, 0, 0, 0);
CreateObject(1215, 1137.4006347656, -2033.8533935547, 68.572135925293, 0, 0, 0);
CreateObject(1215, 1149.595703125, -2033.8636474609, 68.572135925293, 0, 0, 0);
CreateObject(1215, 1143.6220703125, -2033.84375, 68.572135925293, 0, 0, 0);
CreateObject(1215, 1130.9527587891, -2030.3491210938, 68.572135925293, 0, 0, 0);
CreateObject(1215, 1137.4296875, -2040.21875, 68.572135925293, 0, 0, 0);
CreateObject(1215, 1130.962890625, -2043.666015625, 68.572135925293, 0, 0, 0);
CreateObject(1215, 1143.6666259766, -2040.1036376953, 68.572135925293, 0, 0, 0);
CreateObject(1215, 1149.6374511719, -2040.0888671875, 68.572135925293, 0, 0, 0);
CreateObject(1215, 1156.7365722656, -2040.0999755859, 68.572135925293, 0, 0, 0);
CreateObject(3506, 1271.7362060547, -2048.1437988281, 58.315093994141, 0, 0, 0);
CreateObject(3506, 1256.3917236328, -2047.5389404297, 58.722290039063, 0, 0, 201.73425292969);
CreateObject(3877, 1237.98046875, -2033.30078125, 61.696990966797, 0, 0, 0);
CreateObject(3877, 1213.4989013672, -2033.3225097656, 69.666603088379, 0, 0, 0);
CreateObject(3877, 1226.7628173828, -2040.7750244141, 65.892303466797, 0, 0, 0);
CreateObject(3877, 1231.376953125, -2040.73828125, 63.790740966797, 0, 0, 0);
CreateObject(3877, 1237.9443359375, -2040.73828125, 61.696990966797, 0, 0, 0);
CreateObject(3877, 1227.1474609375, -2033.7971191406, 1.8244705200195, 0, 0, 0);
CreateObject(3877, 1231.3818359375, -2033.2626953125, 63.790740966797, 0, 0, 0);
CreateObject(3877, 1226.7973632813, -2033.3156738281, 65.892303466797, 0, 0, 0);
CreateObject(3877, 1218.2481689453, -2033.2659912109, 67.986053466797, 0, 0, 0);
CreateObject(3877, 1218.203125, -2040.767578125, 67.986053466797, 0, 0, 0);
CreateObject(3877, 1213.5009765625, -2040.6982421875, 69.673553466797, 0, 0, 0);
CreateObject(3932, 1391.0629882813, -1812.7138671875, 10.872480392456, 0, 0, 179.63232421875);
CreateObject(3932, 1387.1882324219, -1812.7166748047, 10.872480392456, 0, 0, 0.265625);
CreateObject(3932, 1245.2789306641, -2068.2980957031, 60.863983154297, 0, 0, 179.63305664063);
CreateObject(973, 1240.8121337891, -2071.5090332031, 59.836803436279, 0, 0, 359.73974609375);
CreateObject(973, 1288.115234375, -2046.8659667969, 58.736194610596, 0, 2, 359.25146484375);
CreateObject(982, 1534.8216552734, -1651.2001953125, 13.066367149353, 0, 0, 0);
CreateObject(12961, 1021.4283447266, -2161.3503417969, 38.646099090576, 6, 10, 211.12609863281);
CreateObject(4520, 2339.2170410156, -2354.5905761719, 14.380284309387, 0, 0, 136.96447753906);
CreateObject(4520, 2410.6450195313, -2425.6396484375, 14.375, 0, 0, 314.34533691406);
CreateObject(3091, 2332.7839355469, -2344.4816894531, 13.027853965759, 0, 0, 223.03601074219);
CreateObject(3091, 2328.9799804688, -2348.0212402344, 13.027853965759, 0, 0, 223.03601074219);
CreateObject(3057, 2363.599609375, -2370.0588378906, 12.925066947937, 0, 0, 0);
CreateObject(3057, 2362.0932617188, -2370.1203613281, 12.766288757324, 0, 0, 0);
CreateObject(3057, 2360.5048828125, -2370.0300292969, 12.766288757324, 0, 0, 0);
CreateObject(3057, 2358.1206054688, -2369.9702148438, 12.766288757324, 0, 0, 0);
CreateObject(2960, 2393.52734375, -2404.259765625, 12.779927253723, 0, 0, 125.05383300781);
CreateObject(2960, 2389.123046875, -2409.2470703125, 12.779926300049, 0, 0, 221.05041503906);
CreateObject(2960, 2385.4206542969, -2409.3247070313, 12.938705444336, 0, 0, 0);
CreateObject(2960, 2383.4306640625, -2397.23828125, 12.779927253723, 0, 0, 0);
CreateObject(2960, 2373.5144042969, -2394.8403320313, 12.779927253723, 0, 0, 3.969970703125);
CreateObject(3274, 2358.6838378906, -2375.8862304688, 12.380284309387, 0, 0, 43.669799804688);
CreateObject(16092, 2412.6171875, -2427.9174804688, 12.375, 0, 0, 314.34533691406);
CreateObject(4519, 2266.2392578125, -2662.83984375, 14.434345245361, 0, 0, 181.35131835938);
CreateObject(4519, 2380.5693359375, -2662.560546875, 14.498741149902, 0, 0, 0);
CreateObject(16092, 2365.7932128906, -2663.3181152344, 12.500807762146, 0, 0, 358.01501464844);
CreateObject(16092, 2280.3464355469, -2663.3330078125, 12.572898864746, 0, 0, 0);
CreateObject(16132, 2327.5080566406, -2671.7868652344, 15.780487060547, 0, 0, 268.69067382813);
CreateObject(16132, 2321.6723632813, -2654.5773925781, 15.746337890625, 0, 0, 89.324493408203);
CreateObject(16132, 2372.6528320313, -2400.9353027344, 14.380284309387, 0, 0, 225.02099609375);
CreateObject(16132, 2380.5666503906, -2384.0061035156, 14.514866828918, 0, 0, 45.65478515625);
CreateObject(1685, 2776.3674316406, -2407.6318359375, 13.39506816864, 0, 0, 0);
CreateObject(1685, 2778.1450195313, -2407.611328125, 13.396134376526, 0, 0, 0);
CreateObject(1685, 2779.9157714844, -2407.5688476563, 13.385586738586, 0, 0, 0);
CreateObject(1685, 2781.6506347656, -2407.5952148438, 13.385161399841, 0, 0, 0);
CreateObject(1685, 2776.3688964844, -2409.2507324219, 13.40061378479, 0, 0, 0);
CreateObject(1685, 2778.1379394531, -2409.2456054688, 13.3860206604, 0, 0, 0);
CreateObject(1685, 2779.9025878906, -2409.2414550781, 13.385589599609, 0, 0, 0);
CreateObject(1685, 2781.6630859375, -2409.1733398438, 13.385158538818, 0, 0, 0);
CreateObject(1963, 2788.7309570313, -2417.6938476563, 13.036235809326, 0, 0, 270.67565917969);
CreateObject(1279, 2791.9836425781, -2422.9904785156, 13.723635673523, 0, 0, 0);
CreateObject(1279, 2783.7485351563, -2412.3564453125, 12.816630363464, 0, 0, 0);
CreateObject(1279, 2797.1918945313, -2412.4743652344, 12.813347816467, 0, 0, 0);
CreateObject(1279, 2783.9931640625, -2422.9814453125, 13.684573173523, 0, 0, 0);
CreateObject(1279, 2783.8381347656, -2422.9970703125, 14.380410194397, 0, 0, 0);
CreateObject(1279, 2783.6455078125, -2424.5505371094, 15.198198318481, 0, 0, 0);
CreateObject(1279, 2783.435546875, -2424.5534667969, 12.81670665741, 0, 0, 0);
CreateObject(1279, 2792.2573242188, -2412.4982910156, 12.814553260803, 0, 0, 0);
CreateObject(1279, 2788.8740234375, -2416.9978027344, 12.815379142761, 0, 0, 0);
CreateObject(1279, 2788.8388671875, -2417.8835449219, 12.81538772583, 0, 0, 0);
CreateObject(1279, 2788.673828125, -2418.548828125, 13.565428733826, 0, 0, 0);
CreateObject(1671, 2790.0642089844, -2417.5629882813, 13.093322753906, 0, 0, 270.67565917969);
CreateObject(1685, 2776.3156738281, -2428.2954101563, 13.386466026306, 0, 0, 0);
CreateObject(1685, 2778.0727539063, -2428.2902832031, 13.386035919189, 0, 0, 0);
CreateObject(1685, 2779.8332519531, -2428.29296875, 13.385606765747, 0, 0, 0);
CreateObject(1685, 2781.5517578125, -2428.2866210938, 13.385186195374, 0, 0, 0);
CreateObject(1685, 2776.3342285156, -2426.6435546875, 13.38646030426, 0, 0, 0);
CreateObject(1685, 2778.0964355469, -2426.634765625, 13.386030197144, 0, 0, 0);
CreateObject(1685, 2779.8100585938, -2426.6547851563, 13.385612487793, 0, 0, 0);
CreateObject(1685, 2781.5773925781, -2426.5891113281, 13.385179519653, 0, 0, 0);
CreateObject(3886, 2815.3034667969, -2437.1669921875, 11.508083343506, 0, 0, 268.69067382813);
CreateObject(2669, 2845.7416992188, -2504.9982910156, 14.948335647583, 0, 0, 89.324493408203);
CreateObject(3066, 2843.4770507813, -2513.3371582031, 17.559387207031, 0, 0, 89.324493408203);
CreateObject(3052, 2843.6904296875, -2506.2094726563, 13.85698890686, 0, 0, 0);
CreateObject(3052, 2843.6989746094, -2505.8391113281, 13.85698890686, 0, 0, 0);
CreateObject(3052, 2843.7016601563, -2505.45703125, 13.85698890686, 0, 0, 0);
CreateObject(3052, 2843.7026367188, -2505.0690917969, 13.85698890686, 0, 0, 0);
CreateObject(3052, 2843.7067871094, -2504.6911621094, 13.85698890686, 0, 0, 0);
CreateObject(3052, 2843.72265625, -2504.3139648438, 13.85698890686, 0, 0, 0);
CreateObject(3052, 2843.73046875, -2503.9326171875, 13.85698890686, 0, 0, 0);
CreateObject(3015, 2843.7373046875, -2506.1765136719, 14.014999389648, 0, 0, 0);
CreateObject(3015, 2843.7365722656, -2505.7795410156, 14.014999389648, 0, 0, 0);
CreateObject(3015, 2843.7351074219, -2505.3815917969, 14.014999389648, 0, 0, 0);
CreateObject(3015, 2843.6945800781, -2505.0185546875, 14.014999389648, 0, 0, 0);
CreateObject(3015, 2843.6960449219, -2504.6552734375, 14.014999389648, 0, 0, 0);
CreateObject(3015, 2843.736328125, -2504.2768554688, 14.014999389648, 0, 0, 0);
CreateObject(3015, 2843.7741699219, -2503.9033203125, 14.014999389648, 0, 0, 0);
CreateObject(2358, 2844.3728027344, -2505.9357910156, 13.84722328186, 0, 0, 89.324493408203);
CreateObject(2358, 2844.4187011719, -2504.4685058594, 13.84722328186, 0, 0, 87.339508056641);
CreateObject(2173, 2846.2062988281, -2504.3649902344, 13.730688095093, 0, 0, 268.69067382813);
CreateObject(1714, 2845.5576171875, -2504.9040527344, 13.730688095093, 0, 0, 87.339508056641);
CreateObject(2044, 2846.2456054688, -2505.6196289063, 14.559874534607, 0, 0, 0);
CreateObject(2036, 2846.3989257813, -2504.2133789063, 14.566267967224, 0, 0, 0);
CreateObject(2035, 2846.4057617188, -2505.2351074219, 14.556778907776, 0, 0, 0);
CreateObject(1672, 2846.6159667969, -2504.3444824219, 14.738060951233, 0, 0, 0);
CreateObject(2064, 2848.7155761719, -2496.8742675781, 14.237282752991, 0, 0, 0);
CreateObject(2064, 2846.1608886719, -2496.9985351563, 14.237282752991, 0, 0, 0);
CreateObject(2064, 2843.6052246094, -2496.9790039063, 14.237282752991, 0, 0, 0);
CreateObject(2064, 2840.7138671875, -2497.0385742188, 14.237282752991, 0, 0, 0);
CreateObject(2064, 2837.162109375, -2497.0400390625, 14.237282752991, 0, 0, 0);
CreateObject(2957, 2799.3020019531, -2430.2678222656, 14.932285308838, 0, 0, 0);
CreateObject(2957, 2799.2041015625, -2405.4187011719, 14.934110641479, 0, 0, 0);
CreateObject(3091, 2314.2917480469, -2119.6535644531, 13.199343681335, 0, 0, 45.65478515625);
CreateObject(3091, 2322.205078125, -2111.1552734375, 13.184111595154, 0, 0, 47.639770507813);
CreateObject(17065, 2313.0578613281, -2108.4821777344, 16.696804046631, 0, 0, 316.33032226563);
CreateObject(4642, 2314.8359375, -2106.3039550781, 14.057982444763, 0, 0, 136.96447753906);
CreateObject(1616, 2320.6296386719, -2111.802734375, 18.18440246582, 0, 0, 142.91952514648);
CreateObject(1616, 2303.5642089844, -2107.1970214844, 17.564027786255, 0, 0, 334.19519042969);
CreateObject(1245, 2822.857421875, -2436.580078125, 10.82631778717, 0, 0, 0);
CreateObject(987, 1642.7526855469, -1692.0639648438, 20.680618286133, 0, 0, 268.69067382813);
CreateObject(987, 1642.6276855469, -1699.8494873047, 20.680620193481, 0, 0, 270.67565917969);
CreateObject(987, 1643.1708984375, -1722.9370117188, 20.682811737061, 0, 0, 0);
CreateObject(987, 1655.1228027344, -1722.9370117188, 20.682430267334, 0, 0, 0);
CreateObject(987, 1663.5480957031, -1722.9370117188, 20.679977416992, 0, 0, 0);
CreateObject(987, 1675.2336425781, -1703.8896484375, 20.7057056427, 0, 0, 89.324493408203);
CreateObject(987, 1675.1420898438, -1714.5140380859, 20.637603759766, 0, 0, 89.324493408203);
CreateObject(987, 1675.2961425781, -1723.1708984375, 20.7057056427, 0, 0, 91.309509277344);
CreateObject(987, 1676.9559326172, -1693.4061279297, 21.439231872559, 0, 0, 89.324493408203);
CreateObject(987, 1679.3822021484, -1682.2612304688, 20.217002868652, 0, 0, 0);
CreateObject(987, 1687.3487548828, -1681.892578125, 20.211929321289, 0, 0, 0);
CreateObject(987, 1698.9455566406, -1685.3114013672, 20.2109375, 0, 0, 0);
CreateObject(987, 1703.466796875, -1685.173828125, 20.2109375, 0, 0, 0);
CreateObject(987, 1691.7392578125, -1664.3087158203, 20.199611663818, 0, 0, 181.35131835938);
CreateObject(987, 1699.9793701172, -1664.5224609375, 20.205783843994, 0, 0, 179.36633300781);
CreateObject(987, 1680.2166748047, -1664.1091308594, 22.521942138672, 0, 0, 89.324493408203);
CreateObject(987, 1680.2578125, -1652.1118164063, 22.399494171143, 0, 0, 91.309509277344);
CreateObject(987, 1680.1828613281, -1640.4925537109, 22.515625, 0, 0, 89.324493408203);
CreateObject(987, 1680.2578125, -1628.6901855469, 22.428226470947, 0, 0, 89.324493408203);
CreateObject(987, 1680.4226074219, -1621.5489501953, 22.515625, 0, 0, 91.309509277344);
CreateObject(987, 1680.1514892578, -1609.7902832031, 22.515625, 0, 0, 180.63439941406);
CreateObject(987, 1668.2596435547, -1609.9476318359, 22.515625, 0, 0, 180.63439941406);
CreateObject(987, 1656.3638916016, -1609.7578125, 22.515625, 0, 0, 180.63439941406);
CreateObject(987, 1645.2380371094, -1610.2833251953, 18.484329223633, 0, 0, 180.63439941406);
CreateObject(987, 1641.0034179688, -1610.3928222656, 18.265625, 0, 0, 180.63439941406);
CreateObject(987, 1629.3890380859, -1610.099609375, 18.265625, 0, 0, 270.67565917969);
CreateObject(987, 1629.333984375, -1621.7043457031, 19.265625, 0, 0, 270.67565917969);
CreateObject(987, 1629.662109375, -1632.2337646484, 21.515625, 0, 0, 270.67565917969);
CreateObject(987, 1629.6953125, -1644.5738525391, 22.238552093506, 0, 0, 268.69067382813);
CreateObject(987, 1628.9659423828, -1652.1329345703, 22.521944046021, 0, 0, 270.67565917969);
CreateObject(987, 1629.0280761719, -1663.9758300781, 22.517482757568, 0, 0, 0);
CreateObject(987, 1709.3459472656, -1684.794921875, 19.2109375, 0, 0, 0);
CreateObject(1616, 1639.3215332031, -1678.2037353516, 21.052742004395, 0, 0, 0);
CreateObject(1616, 1642.4342041016, -1718.9840087891, 19.204034805298, 0, 0, 0);
CreateObject(1616, 1658.0394287109, -1656.0551757813, 26.074817657471, 0, 0, 87.339508056641);
CreateObject(1616, 1637.2296142578, -1703.9704589844, 19.998441696167, 0, 0, 0);
CreateObject(987, 1633.8583984375, -1660.4577636719, 11.45836353302, 0, 0, 270.67565917969);
CreateObject(987, 1634.5364990234, -1649.6384277344, 11.452704429626, 0, 0, 266.70568847656);
CreateObject(987, 1634.0841064453, -1680.1274414063, 11.543012619019, 0, 0, 314.34533691406);
CreateObject(987, 1633.6630859375, -1668.4827880859, 11.561891555786, 0, 0, 272.66064453125);
CreateObject(2921, 1639.5559082031, -1689.8365478516, 19.05477142334, 0, 0, 0);
CreateObject(2922, 1650.6673583984, -1656.3463134766, 23.428550720215, 0, 0, 176.66015625);
CreateObject(987, 1642.3658447266, -1680.8277587891, 20.937255859375, 0, 0, 270.67565917969);
CreateObject(987, 1642.751953125, -1671.0537109375, 20.711887359619, 0, 0, 268.68713378906);
CreateObject(5821, 2831.8720703125, 983.11114501953, 12.542310714722, 0, 0, 179.47497558594);
CreateObject(9241, 2814.27734375, 994.01287841797, 18.248092651367, 0, 0, 90.275024414063);
CreateObject(16093, 2785.1298828125, 924.35675048828, 9.5808629989624, 0, 0, 359.69519042969);
CreateObject(2921, 1451.5941162109, -1019.7496337891, 28.333118438721, 0, 0, 89.324493408203);
CreateObject(2921, 1472.3773193359, -1019.7496337891, 28.265907287598, 0, 0, 67.489624023438);
CreateObject(2886, 1461.8922119141, -1009.8300170898, 27.658107757568, 0, 0, 0);
CreateObject(954, 1461.3693847656, -1020.4450683594, 32.266250610352, 0, 0, 0);
CreateObject(11245, 1461.6379394531, -1022.94921875, 33.655872344971, 0, 0, 274.64172363281);
CreateObject(3350, 1450.6574707031, -1019.7721557617, 47.140625, 0, 0, 0);
CreateObject(3350, 1472.9875488281, -1019.5892944336, 47.140625, 0, 0, 0);
CreateObject(1337, 1430.5892333984, -1022.4563598633, 23.477350234985, 0, 0, 0);
CreateObject(1337, 1498.4200439453, -1022.626953125, 23.46941947937, 0, 0, 0);
CreateObject(1257, 1505.0972900391, -1028.6379394531, 24.075571060181, 0, 0, 83.369506835938);
CreateObject(1257, 1462.5899658203, -1041.3155517578, 24.107316970825, 0, 0, 270.67565917969);
CreateObject(9314, 1392.1650390625, -1019.4797363281, 42.557060241699, 0, 0, 270.67565917969);
CreateObject(2745, 1406.1245117188, -1021.2518310547, 42.007423400879, 0, 0, 0);
CreateObject(2745, 1411.3905029297, -1021.3289794922, 42.007423400879, 0, 0, 0);
CreateObject(3660, 1441.3502197266, -1022.4242553711, 25.48119354248, 0, 0, 0);
CreateObject(3660, 1482.1162109375, -1022.313293457, 25.48119354248, 0, 0, 0);
CreateObject(3471, 1449.1586914063, -1021.2131958008, 46.9970703125, 0, 0, 268.69067382813);
CreateObject(3471, 1474.9348144531, -1021.4973144531, 46.990837097168, 0, 0, 268.69067382813);
CreateObject(984, 1539.9111328125, -1022.1090087891, 23.714805603027, 0, 0, 336.17614746094);
CreateObject(984, 1544.0354003906, -1012.6645507813, 23.714805603027, 0, 0, 336.17614746094);
CreateObject(984, 1552.9630126953, -1006.3728637695, 23.542930603027, 0, 0, 91.309509277344);
CreateObject(984, 1543.5704345703, -1029.9888916016, 23.66833114624, 0, 0, 73.443603515625);
CreateObject(984, 1555.8552246094, -1033.6396484375, 23.542930603027, 0, 0, 73.443603515625);
CreateObject(6976, 1441.8806152344, -965.01593017578, 38.010768890381, 0, 0, 346.10510253906);
CreateObject(6976, 1487.5869140625, -992.94244384766, 47.9375, 0, 0, 270.67565917969);
CreateObject(10771, 821.21691894531, 2957.826171875, 5.6659030914307, 0, 0, 15.8798828125);
CreateObject(11145, 760.71795654297, 2940.7868652344, 4.4906606674194, 0, 0, 15.894897460938);
CreateObject(11146, 812.41961669922, 2955.9187011719, 12.526651382446, 0, 0, 15.8798828125);
CreateObject(10770, 826.4228515625, 2951.4948730469, 38.8984375, 0, 0, 15.864868164063);
CreateObject(11237, 826.41253662109, 2951.4614257813, 37.830177307129, 0, 0, 15.864868164063);
CreateObject(10772, 822.48114013672, 2958.1677246094, 16.573774337769, 0, 0, 15.970001220703);
CreateObject(11149, 816.76501464844, 2951.2709960938, 12.200719833374, 0, 0, 15.704956054688);
CreateObject(3277, 853.68695068359, 2959.1530761719, 20.46875, 0, 0, 137.20983886719);
CreateObject(10772, 822.49719238281, 2957.982421875, 17.450033187866, 0, 0, 15.864868164063);
CreateObject(3884, 853.74920654297, 2959.103515625, 20.961057662964, 0, 0, 322.28527832031);
CreateObject(3277, 818.30017089844, 2949.150390625, 29.163372039795, 0, 0, 149.92822265625);
CreateObject(3884, 818.23236083984, 2949.2121582031, 29.663372039795, 0, 0, 154.95935058594);
CreateObject(3934, 869.82464599609, 2963.6840820313, 17.454965591431, 0, 0, 286.67028808594);
CreateObject(3051, 2224.3078613281, 1598.2673339844, 1001.9987792969, 316.19500732422, 90.605010986328, 0.4991455078125);
CreateObject(3051, 2146.2026367188, 1603.3017578125, 1002.3298339844, 0, 0, 45.741577148438);
CreateObject(3051, 2146.20703125, 1604.4766845703, 1002.3298339844, 0, 0, 45.741577148438);
CreateObject(3051, 2146.1838378906, 1604.4859619141, 1004.9073486328, 0, 0, 45.991577148438);
CreateObject(3051, 2146.2021484375, 1603.3017578125, 1003.6561279297, 0, 0, 45.741577148438);
CreateObject(3051, 2146.1943359375, 1602.15625, 1004.6551513672, 0, 0, 45.741577148438);
CreateObject(3089, 2146.2668457031, 1603.8620605469, 1002.2575683594, 0, 0, 268.62524414063);
CreateObject(1491, 2160.4577636719, 1603.3172607422, 998.97644042969, 0, 0, 269.62536621094);
CreateObject(3051, 2146.1943359375, 1602.15625, 1002.3298339844, 0, 0, 45.741577148438);
CreateObject(1491, 2168.6008300781, 1619.4421386719, 998.97772216797, 0, 0, 269.81530761719);
CreateObject(3051, 2160.4638671875, 1602.517578125, 1002.0863037109, 316.19201660156, 90.604248046875, 90.17578125);
CreateObject(1491, 2175.6552734375, 1609.2177734375, 999.01531982422, 0, 0, 0);
CreateObject(3051, 2168.53515625, 1618.7236328125, 1002.0654296875, 316.19201660156, 90.604248046875, 90.17578125);
CreateObject(1491, 2175.6640625, 1594.3282470703, 998.96203613281, 0, 0, 0);
CreateObject(3051, 2176.4252929688, 1594.3841552734, 1002.052734375, 316.19201660156, 90.604248046875, 180.34606933594);
CreateObject(1491, 2196.1491699219, 1617.9302978516, 998.9765625, 0, 0, 89.639892578125);
CreateObject(3051, 2176.2099609375, 1609.208984375, 1002.0639648438, 316.19201660156, 90.604248046875, 180.34606933594);
CreateObject(1491, 2223.5690917969, 1598.2590332031, 998.96136474609, 0, 0, 0);
CreateObject(3051, 2196.1142578125, 1618.7021484375, 1002.0404052734, 316.19201660156, 90.604248046875, 271.29638671875);
CreateObject(1491, 2147.5126953125, 1604.7106933594, 1000.9428100586, 0, 0, 0);
CreateObject(3051, 2148.267578125, 1604.6723632813, 1003.9929199219, 316.19201660156, 90.604248046875, 180.36071777344);
CreateObject(2003, 2142.5659179688, 1643.0625, 994.59051513672, 0, 0, 0);
CreateObject(2003, 2143.3374023438, 1643.0700683594, 994.59051513672, 0, 0, 0);
CreateObject(2003, 2144.1345214844, 1643.0709228516, 994.59051513672, 0, 0, 0);
CreateObject(2003, 2144.9555664063, 1643.0662841797, 994.59051513672, 0, 0, 0);
CreateObject(2005, 2144.9729003906, 1642.9886474609, 994.51434326172, 0, 0, 0);
CreateObject(2005, 2144.1245117188, 1642.958984375, 994.51434326172, 0, 0, 0);
CreateObject(2005, 2143.3520507813, 1642.9744873047, 994.51434326172, 0, 0, 0);
CreateObject(2005, 2142.5700683594, 1642.9594726563, 994.51434326172, 0, 0, 0);
CreateObject(2004, 2144.5778808594, 1642.8376464844, 994.59545898438, 0, 0, 303.12536621094);
CreateObject(2004, 2143.80078125, 1642.818359375, 994.59545898438, 0, 0, 270.37353515625);
CreateObject(2004, 2143.0539550781, 1642.7906494141, 994.59545898438, 0, 0, 300.14831542969);
CreateObject(2004, 2142.2036132813, 1642.8234863281, 994.59545898438, 0, 0, 276.56164550781);
CreateObject(1829, 2142.2534179688, 1642.3807373047, 993.04064941406, 0, 0, 0);
CreateObject(1829, 2143.08203125, 1642.3699951172, 993.04064941406, 0, 0, 0);
CreateObject(1829, 2143.88671875, 1642.3916015625, 993.04064941406, 0, 0, 0);
CreateObject(1829, 2144.7084960938, 1642.396484375, 993.04064941406, 0, 0, 0);
CreateObject(1829, 2145.4956054688, 1642.4044189453, 993.04064941406, 0, 0, 0);
CreateObject(3092, 2136.00390625, 1618.1566162109, 993.94555664063, 0, 0, 0);
CreateObject(2922, 2142.5776367188, 1626.7973632813, 993.93688964844, 0, 0, 179.86975097656);
CreateObject(2921, 2130.5239257813, 1606.5756835938, 996.59722900391, 0, 0, 278.34521484375);
CreateObject(1616, 2149.6823730469, 1612.2297363281, 997.2265625, 0, 0, 3.969970703125);
CreateObject(1616, 2141.4777832031, 1627.7666015625, 997.17224121094, 0, 0, 266.31518554688);
CreateObject(2922, 2146.0283203125, 1605.5961914063, 994.02038574219, 0, 0, 89.889892578125);
CreateObject(1419, 1345.6643066406, -660.96343994141, 108.66659545898, 0, 0, 17.864868164063);
CreateObject(1419, 1351.6988525391, -666.2822265625, 108.66660308838, 0, 0, 17.864868164063);
CreateObject(1419, 1355.3442382813, -665.04547119141, 108.66970062256, 0, 0, 19.849853515625);
CreateObject(1419, 1359.0875244141, -663.74377441406, 108.66970062256, 0, 0, 19.849853515625);
CreateObject(1419, 1349.0646972656, -665.05584716797, 108.66660308838, 0, 0, 288.54052734375);
CreateObject(1419, 1348.1440429688, -662.33233642578, 108.66660308838, 0, 0, 288.53942871094);
CreateObject(1419, 1360.1861572266, -661.20788574219, 108.66970062256, 0, 0, 292.50744628906);
CreateObject(1419, 1342.1779785156, -662.12042236328, 108.66659545898, 0, 0, 19.848754882813);
CreateObject(1419, 1338.3640136719, -663.42687988281, 108.65660095215, 0, 0, 19.846801757813);
CreateObject(1419, 1334.4716796875, -664.76019287109, 108.66659545898, 0, 0, 17.86181640625);
CreateObject(1419, 1330.5543212891, -666.08233642578, 108.66659545898, 0, 0, 19.84326171875);
CreateObject(1419, 1327.8240966797, -664.72131347656, 108.66659545898, 0, 0, 109.16583251953);
CreateObject(1419, 1326.4423828125, -660.86840820313, 108.66659545898, 0, 0, 109.16561889648);
CreateObject(1419, 1325.1340332031, -656.97088623047, 108.66659545898, 0, 0, 109.16561889648);
CreateObject(1419, 1323.90234375, -653.64178466797, 108.78443908691, 0, 0, 109.16552734375);
CreateObject(1419, 1322.6708984375, -649.84246826172, 108.66659545898, 0, 0, 109.16213989258);
CreateObject(1419, 1312.8934326172, -638.20428466797, 108.66660308838, 0, 0, 109.16015625);
CreateObject(1419, 1311.5952148438, -634.37640380859, 108.66660308838, 0, 0, 109.16015625);
CreateObject(1419, 1310.2740478516, -630.47149658203, 108.66451263428, 0, 0, 109.16015625);
CreateObject(1419, 1308.8725585938, -626.66766357422, 108.66451263428, 0, 0, 111.14514160156);
CreateObject(1419, 1307.392578125, -623.82678222656, 107.24828338623, 0, 0, 111.14321899414);
CreateObject(1419, 1307.4019775391, -623.82452392578, 108.31452941895, 0, 0, 111.14321899414);
CreateObject(1419, 1304.7008056641, -621.43493652344, 106.01198577881, 0, 0, 204.43798828125);
CreateObject(1419, 1306.99609375, -622.60192871094, 106.82674407959, 0, 0, 289.7880859375);
CreateObject(1419, 1307.4625244141, -622.23394775391, 105.67346191406, 0, 0, 289.78637695313);
CreateObject(1419, 1351.6988525391, -666.2822265625, 108.66660308838, 0, 0, 17.864868164063);
CreateObject(1419, 1355.3442382813, -665.04547119141, 108.66970062256, 0, 0, 19.849853515625);
CreateObject(1419, 1359.0875244141, -663.74377441406, 108.66970062256, 0, 0, 19.849853515625);
CreateObject(1419, 1349.0646972656, -665.05584716797, 108.66660308838, 0, 0, 288.54052734375);
CreateObject(1419, 1348.1440429688, -662.33233642578, 108.66660308838, 0, 0, 288.53942871094);
CreateObject(1419, 1360.1861572266, -661.20788574219, 108.66970062256, 0, 0, 292.50744628906);
CreateObject(1446, 1361.6130371094, -607.00244140625, 110.35706329346, 0, 0, 350.07507324219);
CreateObject(1446, 1357.3218994141, -606.01751708984, 110.40287017822, 0, 0, 348.09008789063);
CreateObject(1446, 1353.2868652344, -605.19976806641, 110.36315155029, 0, 0, 348.09008789063);
CreateObject(1446, 1349.7429199219, -604.56439208984, 110.22856903076, 0, 0, 348.09008789063);
CreateObject(1446, 1345.6560058594, -602.80755615234, 109.83149719238, 0, 0, 330.22521972656);
CreateObject(1446, 1343.0537109375, -601.0498046875, 109.50977325439, 0, 0, 328.240234375);
CreateObject(1446, 1339.0043945313, -599.94799804688, 109.37093353271, 0, 0, 1.9830322265625);
CreateObject(1446, 1337.07421875, -600.1240234375, 109.27040863037, 0, 0, 1.9830322265625);
CreateObject(1446, 1334.9312744141, -600.18530273438, 109.40242004395, 0, 0, 1.9775390625);
CreateObject(1446, 1330.8187255859, -601.00952148438, 109.0026473999, 0, 0, 23.81982421875);
CreateObject(1446, 1327.806640625, -602.27258300781, 109.0061416626, 0, 0, 23.81982421875);
CreateObject(1446, 1326.1181640625, -603.0732421875, 108.89626312256, 0, 0, 23.818359375);
CreateObject(1446, 1322.3143310547, -604.93695068359, 108.7795715332, 0, 0, 31.759887695313);
CreateObject(1446, 1318.3193359375, -607.4990234375, 108.58778381348, 0, 0, 33.744506835938);
CreateObject(1446, 1314.3079833984, -609.86260986328, 108.64306640625, 0, 0, 25.804809570313);
CreateObject(1446, 1310.1922607422, -611.96057128906, 108.2981338501, 0, 0, 25.804809570313);
CreateObject(1446, 1306.3502197266, -613.67327880859, 108.20566558838, 0, 0, 23.819885253906);
CreateObject(1446, 1304.7135009766, -614.23590087891, 108.07283782959, 0, 0, 23.81982421875);
CreateObject(1446, 1301.8199462891, -615.45178222656, 107.72753143311, 0, 0, 17.864868164063);
CreateObject(1446, 1298.943359375, -616.30383300781, 107.21862030029, 0, 0, 19.849853515625);
CreateObject(1446, 1297.3704833984, -616.91192626953, 106.58066558838, 0, 0, 15.879943847656);
CreateObject(1446, 1292.1640625, -617.24401855469, 105.90316009521, 0, 0, 0);
CreateObject(1446, 1288.3996582031, -615.64294433594, 105.87882232666, 0, 0, 310.37536621094);
CreateObject(1446, 1287.0437011719, -614.24829101563, 105.82675170898, 0, 0, 310.37536621094);
CreateObject(1446, 1294.0161132813, -617.31201171875, 106.39167022705, 0, 0, 358.01501464844);
CreateObject(1446, 1364.6849365234, -609.46929931641, 110.93952178955, 0, 0, 286.55554199219);
CreateObject(1446, 1365.8094482422, -613.86114501953, 110.92346191406, 0, 0, 284.57055664063);
CreateObject(1446, 1366.9514160156, -618.29364013672, 110.93952178955, 0, 0, 284.57055664063);
CreateObject(1446, 1367.4249267578, -620.15447998047, 110.93952178955, 0, 0, 284.57055664063);
CreateObject(1446, 1365.7015380859, -622.94311523438, 110.93952178955, 0, 0, 15.8798828125);
CreateObject(1446, 1361.2399902344, -624.35650634766, 110.93952178955, 0, 0, 15.8798828125);
CreateObject(1446, 1358.7800292969, -625.03735351563, 110.95027160645, 0, 0, 15.8798828125);
CreateObject(1446, 1279.5727539063, -619.53881835938, 105.86884307861, 0, 0, 141.65148925781);
CreateObject(1446, 1282.8988037109, -621.79016113281, 106.01565551758, 0, 0, 140.93450927734);
CreateObject(1446, 1284.6103515625, -623.2109375, 106.01565551758, 0, 0, 140.9326171875);
CreateObject(1446, 1278.7633056641, -618.44714355469, 105.8529586792, 0, 0, 142.91961669922);
CreateObject(1446, 1288.9678955078, -624.97186279297, 106.01764678955, 0, 0, 174.67944335938);
CreateObject(1446, 1292.0389404297, -625.42828369141, 106.01764678955, 0, 0, 173.41137695313);
CreateObject(1446, 1302.8897705078, -622.47985839844, 106.05969238281, 0, 0, 201.201171875);
CreateObject(1446, 1296.8796386719, -624.94952392578, 106.01764678955, 0, 0, 201.201171875);
CreateObject(1446, 1299.8369140625, -623.77172851563, 106.01764678955, 0, 0, 203.18615722656);
CreateObject(18248, 1635.2585449219, -1799.8233642578, 20.586252212524, 0, 0, 354.04504394531);
CreateObject(3594, 1646.4304199219, -1794.0815429688, 13.163604736328, 0, 0, 0);
CreateObject(3594, 1648.7260742188, -1794.5627441406, 13.166968345642, 0, 0, 0);
CreateObject(3594, 1647.7078857422, -1794.9368896484, 14.244453430176, 0, 0, 0);
CreateObject(3594, 1647.8896484375, -1795.6805419922, 15.175479888916, 0, 0, 0);
CreateObject(3594, 1651.0021972656, -1794.5435791016, 13.170303344727, 0, 0, 0);
CreateObject(3594, 1650.2298583984, -1795.7646484375, 14.087863922119, 0, 0, 0);
CreateObject(3594, 1650.4047851563, -1796.0764160156, 14.998505592346, 0, 0, 0);
CreateObject(3593, 1655.478515625, -1795.4147949219, 13.255853652954, 0, 0, 71.729919433594);
CreateObject(3593, 1655.9940185547, -1792.6584472656, 13.256608963013, 0, 0, 71.729736328125);
CreateObject(3593, 1655.5891113281, -1794.1678466797, 14.373138427734, 0, 0, 71.729736328125);
CreateObject(3593, 1655.2301025391, -1796.9256591797, 14.005391120911, 20, 0, 340.10485839844);
CreateObject(3593, 1638.7237548828, -1800.2529296875, 23.059000015259, 19.9951171875, 0, 340.10375976563);
CreateObject(2890, 1639.0771484375, -1800.4541015625, 12.74001789093, 0, 0, 85.665893554688);
CreateObject(3881, 1628.66015625, -1845.7869873047, 14.3898229599, 0, 0, 0);
CreateObject(3882, 1628.9307861328, -1845.2121582031, 13.53605556488, 0, 0, 89.050567626953);
CreateObject(984, 1627.8892822266, -1804.2351074219, 13.151621818542, 0, 0, 0);
CreateObject(984, 1628.1254882813, -1789.3775634766, 13.495649337769, 0, 0, 0);
CreateObject(984, 1626.9404296875, -1838.26171875, 13.177670478821, 0, 0, 0);
CreateObject(984, 1626.9317626953, -1825.4163818359, 13.169322967529, 0, 0, 0);
CreateObject(984, 1634.318359375, -1810.6552734375, 13.163258552551, 0, 0, 89.742309570313);
CreateObject(984, 1654.2421875, -1811.1743164063, 13.194012641907, 0, 0, 89.500122070313);
CreateObject(3058, 1594.7888183594, -1773.712890625, 15.885828018188, 0, 0, 11.909912109375);
CreateObject(3058, 1599.2911376953, -1774.943359375, 15.901294708252, 0, 0, 11.9091796875);
CreateObject(3058, 1604.8197021484, -1776.3898925781, 16.318296432495, 0, 0, 11.9091796875);
CreateObject(3058, 1610.0969238281, -1777.7978515625, 16.537046432495, 0, 0, 11.9091796875);
CreateObject(3058, 1614.6765136719, -1779.3128662109, 16.243297576904, 0, 0, 9.9241943359375);
CreateObject(3058, 1619.8995361328, -1780.6075439453, 17.357358932495, 0, 0, 15.875610351563);
CreateObject(3058, 1625.4838867188, -1781.9672851563, 15.671421051025, 0, 0, 11.9052734375);
CreateObject(3058, 1630.5008544922, -1783.2512207031, 15.580015182495, 0, 0, 11.903686523438);
CreateObject(3058, 1635.98828125, -1784.7156982422, 15.404270172119, 0, 0, 11.903686523438);
CreateObject(3058, 1657.5473632813, -1790.2945556641, 15.406648635864, 0, 0, 9.918701171875);
CreateObject(3058, 1651.6518554688, -1788.8953857422, 15.408332824707, 0, 0, 9.9151611328125);
CreateObject(3058, 1645.6988525391, -1787.3586425781, 15.402305603027, 0, 0, 9.9151611328125);
CreateObject(3058, 1640.6822509766, -1785.9376220703, 15.292980194092, 0, 0, 9.9151611328125);
CreateObject(16770, 238.46647644043, 142.81753540039, 1003.6140136719, 0, 0, 0);
CreateObject(2035, 242.37889099121, 139.11204528809, 1002.9978637695, 0, 0, 0);
CreateObject(2035, 242.38565063477, 139.42509460449, 1002.9978637695, 0, 0, 0);
CreateObject(2044, 242.70706176758, 139.73602294922, 1003.0009765625, 0, 0, 0);
CreateObject(2044, 242.29203796387, 139.7586517334, 1003.0009765625, 0, 0, 0);
CreateObject(2044, 242.6876373291, 140.03536987305, 1003.0009765625, 0, 0, 0);
CreateObject(2044, 242.30224609375, 140.0440826416, 1003.0009765625, 0, 0, 0);
CreateObject(1672, 242.23805236816, 140.29721069336, 1003.0900268555, 0, 0, 0);
CreateObject(1586, 250.109375, 151.7992401123, 1003.7531738281, 0, 0, 273.15911865234);
CreateObject(1586, 250.109375, 149.87986755371, 1003.6568603516, 0, 0, 273.48718261719);
CreateObject(1586, 250.109375, 148.01518249512, 1003.6770019531, 0, 0, 273.48718261719);
CreateObject(1586, 250.109375, 146.17340087891, 1003.6745605469, 0, 0, 273.48718261719);
CreateObject(1586, 250.109375, 144.31642150879, 1003.7336425781, 0, 0, 273.48718261719);
CreateObject(3550, 244.35858154297, 153.0827331543, 1004.3904418945, 0, 0, 269.05072021484);
CreateObject(979, -2425.919434, -593.602051, 132.083878, 0, 0, -233.671726982);
CreateObject(978, -2436.419678, -601.176331, 132.182129, 0, 0, -56.2500170097);
CreateObject(978, -2790.403076, -495.263519, 7.030417, 0, 0, -33.750021665);
CreateObject(979, -2779.999512, -479.419617, 7.033578, 0, 0, -213.749984423);
CreateObject(979, -2789.366699, -473.472382, 7.02772, 0, 0, -202.499958102);
CreateObject(978, -2800.157227, -487.777649, 7.02772, 0, 0, -44.9999906894);
CreateObject(984, 2304.462891, 1403.056885, 42.456993, 0, 0, -89.1405446852);
CreateObject(984, 2310.851318, 1403.145996, 42.456993, 0, 0, -89.1405446852);
CreateObject(983, 2326.944824, 1403.231689, 42.503868, 0, 0, -89.9999813789);
CreateObject(984, 2343.03125, 1403.223145, 42.456993, 0, 0, -89.9999813789);
CreateObject(984, 2350.955566, 1403.223145, 42.456993, 0, 0, -89.9999813789);
CreateObject(978, 2301.461182, 1403.586548, 36.255817, 0, 0, -179.999962758);
CreateObject(978, 2310.786377, 1403.577881, 36.255821, 0, 0, -179.999962758);
CreateObject(978, 2313.078369, 1502.92334, 29.796448, 0, 0, -359.999982811);
CreateObject(978, 2303.930908, 1503.096313, 29.871447, 0, 0, 0);
CreateObject(978, 2301.472168, 1403.626709, 23.471447, 0, 0, -180.000020054);
CreateObject(978, 2310.844727, 1403.608765, 23.471447, 0, 0, -179.999962758);
CreateObject(978, 2312.871094, 1502.77417, 17.063631, 0, 0, 0);
CreateObject(978, 2303.500977, 1502.783936, 17.063631, 0, 0, 0);
CreateObject(978, 2301.097168, 1401.766235, 10.660533, 0, 0, -202.499958102);
CreateObject(978, 2309.316895, 1397.360474, 10.660533, 0, 0, -213.749927127);
CreateObject(2780, 1018.264160, -918.455017, 36.679688, 0, 0, 11.2500263202);
CreateObject(982, -2416.355469, -578.607727, 133.300735, 0, 0, -55.390580316);
CreateObject(982, -2416.355469, -578.607727, 134.550735, 0, 0, -55.390580316);
CreateObject(982, -2416.355469, -578.607727, 135.800735, 0, 0, -55.390580316);
CreateObject(982, -2416.355469, -578.607727, 137.050735, 0, 0, -55.390580316);
CreateObject(982, -2408.455078, -573.157776, 133.300735, 0, 0, -55.390580316);
CreateObject(982, -2408.455078, -573.157776, 134.550735, 0, 0, -55.390580316);
CreateObject(982, -2408.455078, -573.157776, 135.800735, 0, 0, -55.390580316);
CreateObject(982, -2408.455078, -573.157776, 137.050735, 0, 0, -55.390580316);
CreateObject(983, -2399.234375, -566.809021, 133.300735, 0, 0, -56.2500170097);
CreateObject(983, -2399.234375, -566.809021, 134.550735, 0, 0, -56.2500170097);
CreateObject(983, -2399.234375, -566.809021, 135.800735, 0, 0, -56.2500170097);
CreateObject(983, -2399.234375, -566.809021, 137.050735, 0, 0, -56.2500170097);
CreateObject(983, -2393.572021, -566.131714, 133.300735, 0, 0, -109.921666643);
CreateObject(983, -2393.572021, -566.131714, 134.550735, 0, 0, -109.921666643);
CreateObject(983, -2393.572021, -566.131714, 135.800735, 0, 0, -109.921666643);
CreateObject(983, -2393.572021, -566.131714, 137.050735, 0, 0, -109.921666643);
CreateObject(983, -2387.709473, -568.61554, 132.026047, 0, 0, 64.0622392594);
CreateObject(983, -2387.709473, -568.61554, 133.276047, 0, 0, 64.0622392594);
CreateObject(983, -2387.709473, -568.61554, 134.526047, 0, 0, 64.0622392594);
CreateObject(983, -2387.709473, -568.61554, 135.776047, 0, 0, 64.0622392594);
CreateObject(983, -2387.709473, -568.61554, 137.026047, 0, 0, 64.0622392594);
CreateObject(983, -2382.356201, -572.005798, 131.976059, 0, 0, 51.0160475452);
CreateObject(983, -2382.356201, -572.005798, 133.226059, 0, 0, 51.0160475452);
CreateObject(983, -2382.356201, -572.005798, 134.476059, 0, 0, 51.0160475452);
CreateObject(983, -2382.356201, -572.005798, 135.726059, 0, 0, 51.0160475452);
CreateObject(983, -2382.356201, -572.005798, 136.976059, 0, 0, 51.0160475452);
CreateObject(984, -2376.202148, -579.114929, 131.973816, 0, 0, 35.4688377565);
CreateObject(984, -2376.202148, -579.114929, 133.173828, 0, 0, 35.4688377565);
CreateObject(984, -2376.202148, -579.114929, 134.423828, 0, 0, 35.4688377565);
CreateObject(984, -2376.202148, -579.114929, 135.673828, 0, 0, 35.4688377565);
CreateObject(984, -2376.202148, -579.114929, 136.923828, 0, 0, 35.4688377565);
CreateObject(984, -2371.418945, -590.606201, 131.979172, 0, 0, 9.53115293289);
CreateObject(984, -2371.418945, -590.606201, 133.15419, 0, 0, 9.53115293289);
CreateObject(984, -2371.418945, -590.606201, 134.40419, 0, 0, 9.53115293289);
CreateObject(984, -2371.418945, -590.606201, 135.65419, 0, 0, 9.53115293289);
CreateObject(984, -2371.418945, -590.606201, 136.90419, 0, 0, 9.53115293289);
CreateObject(983, -2371.063721, -600.011292, 133.300735, 0, 0, -12.8142583985);
CreateObject(983, -2371.063721, -600.011292, 134.550735, 0, 0, -12.8142583985);
CreateObject(983, -2371.063721, -600.011292, 135.800735, 0, 0, -12.8142583985);
CreateObject(983, -2371.063721, -600.011292, 137.050735, 0, 0, -12.8142583985);
CreateObject(982, -2387.881104, -614.110962, 133.300735, 0, 0, -54.5311436223);
CreateObject(982, -2387.881104, -614.110962, 134.550735, 0, 0, -54.5311436223);
CreateObject(982, -2387.881104, -614.110962, 135.800735, 0, 0, -54.5311436223);
CreateObject(982, -2387.881104, -614.110962, 137.050735, 0, 0, -54.5311436223);
CreateObject(982, -2382.661865, -610.385742, 137.050735, 0, 0, -54.5311436223);
CreateObject(982, -2382.661865, -610.385742, 135.800735, 0, 0, -54.5311436223);
CreateObject(982, -2382.661865, -610.385742, 134.550735, 0, 0, -54.5311436223);
CreateObject(982, -2382.661865, -610.385742, 133.300735, 0, 0, -54.5311436223);
CreateObject(984, -2403.129639, -616.798889, 132.385849, 0, 0, 44.9999906894);
CreateObject(984, -2403.129639, -616.798889, 133.635849, 0, 0, 44.9999906894);
CreateObject(984, -2407.629639, -612.298889, 133.635849, 0, 0, 44.9999906894);
CreateObject(984, -2407.629639, -612.298889, 132.385849, 0, 0, 44.9999906894);
CreateObject(984, -2423.126953, -591.142517, 132.351334, 0, 0, 35.4688377565);
CreateObject(984, -2423.126953, -591.142517, 133.601334, 0, 0, 35.4688377565);
CreateObject(984, -2422.20166, -592.417542, 133.601334, 0, 0, 35.4688377565);
CreateObject(984, -2422.20166, -592.417542, 132.351334, 0, 0, 35.4688377565);
CreateObject(979, -2467.794189, -482.915619, 101.727783, 0, 15.4698604862, -209.375566243);
CreateObject(979, -2475.960205, -478.687042, 99.374161, 0, 13.7509870989, -205.860527462);
CreateObject(979, -2484.488281, -475.594238, 97.561775, 0, 7.7349302431, -192.968862465);
CreateObject(978, -2613.505615, -509.169556, 71.834129, 0, 0, 0);
CreateObject(978, -2625.486572, -506.929321, 70.966629, 0, 0, -44.9999906894);
CreateObject(978, -2633.370117, -498.481049, 70.10598, 0, 0, -67.4999860342);
CreateObject(978, -2635.090576, -487.789459, 69.739647, 0, 0, -101.250007699);
CreateObject(978, -2630.960449, -477.920105, 69.265305, 0, 0, -134.999972068);
CreateObject(978, -2431.193115, -410.492584, 85.14431, 0, 0, -168.749993733);
CreateObject(978, -2391.57373, -414.51767, 83.558685, 0, 0, -213.749984423);
CreateObject(979, -2332.323242, -468.859161, 79.894859, 0, 0, 22.4999953447);
CreateObject(979, -2323.378906, -463.605133, 79.884895, 0, 0, 44.9999906894);
CreateObject(979, -2316.594238, -454.776947, 79.874626, 0, 0, 78.7500123544);
CreateObject(979, -2314.85083, -443.923248, 79.526741, 0, 0, -258.749917816);
CreateObject(979, -2316.818359, -433.339478, 79.402542, 0, 0, -247.499948792);
CreateObject(979, -2603.58667, -366.940918, 43.172604, 0, 12.0321137115, -165.234954952);
CreateObject(979, -2683.242676, -435.64917, 30.631948, 0, 3.43774677471, -449.99996419);
CreateObject(979, -2683.118164, -446.302246, 29.557819, 0, 6.87549354943, -85.625448608);
CreateObject(982, 1181.934204, -930.204468, 43.594734, 0, -0, -80.468828446);
CreateObject(982, 1197.708984, -927.554565, 43.594734, 0, -0, -80.468828446);
CreateObject(983, 1228.603271, -922.001709, 43.652306, 0, 0, -79.6093917523);
CreateObject(983, 1231.753418, -921.42688, 43.652306, 0, 0, -79.6093917523);
CreateObject(5130, 1180.446655, -907.174316, 44.087334, 0, 0, -217.187788493);
CreateObject(638, 1178.708984, -906.263245, 45.567234, 0, 0, 8.67165894343);
CreateObject(638, 1179.034302, -908.487732, 45.567234, 0, 0, 8.67165894343);
CreateObject(1432, 1190.482544, -898.092651, 47.194302, 0, 0, 0);
CreateObject(1432, 1197.232544, -898.092651, 47.194302, 0, 0, 0);
CreateObject(1432, 1203.482544, -898.092651, 47.194302, 0, 0, 0);
CreateObject(1432, 1194.232544, -901.842651, 47.194302, 0, 0, 0);
CreateObject(1432, 1200.232544, -901.092651, 47.194302, 0, 0, 0);
CreateObject(1723, 1209.686035, -901.227905, 47.053711, 0, -1.71887338736, 7.81222224976);
CreateObject(1723, 1213.760864, -900.653076, 47.053711, 0, -1.71887338736, 6.95278555608);
CreateObject(1723, 1212.585205, -908.002441, 47.053711, 0, -1.71887338736, -172.187740508);
CreateObject(1723, 1216.685303, -907.527466, 47.053711, 0, -1.71887338736, -172.187740508);
CreateObject(1726, 1217.152954, -900.976501, 47.04808, 0, 0, -82.1877018333);
CreateObject(1726, 1217.652954, -904.25177, 47.04808, 0, 0, -82.1877018333);
CreateObject(2245, 1213.616333, -908.033142, 47.364429, 0, 0, 0);
CreateObject(2245, 1212.711182, -900.562622, 47.364429, 0, 0, 0);
CreateObject(2245, 1217.635986, -903.665222, 47.364429, 0, 0, 0);
CreateObject(2251, 1203.441772, -898.134155, 48.652493, 0, 0, 0);
CreateObject(2251, 1200.172974, -901.089539, 48.652493, 0, 0, 0);
CreateObject(2251, 1197.153564, -898.093506, 48.652493, 0, 0, 0);
CreateObject(2251, 1194.214355, -901.811951, 48.652493, 0, 0, 0);
CreateObject(2251, 1190.39502, -898.130066, 48.652493, 0, 0, 0);
CreateObject(2253, 1217.171753, -900.056763, 47.33606, 0, 0, -83.9065752207);
CreateObject(2253, 1217.971558, -907.25647, 47.33606, 0, 0, -83.9065752207);
CreateObject(1516, 1215.05542, -902.289795, 47.23111, 0, 0, 6.0933488624);
CreateObject(1516, 1215.55542, -905.539795, 47.23111, 0, 0, 6.0933488624);
CreateObject(1516, 1211.180786, -906.164673, 47.23111, 0, 0, 6.0933488624);
CreateObject(1516, 1211.03064, -902.86438, 47.23111, 0, 0, 6.0933488624);
CreateObject(1645, 1187.461182, -902.062073, 47.39465, 0, 0, -263.047158581);
CreateObject(1645, 1187.211182, -900.312073, 47.39465, 0, 0, -263.047158581);
CreateObject(1645, 1186.861084, -898.587097, 47.39465, 0, 0, -263.047158581);
CreateObject(1645, 1186.561035, -896.587097, 47.39465, 0, 0, -263.047158581);
CreateObject(16151, 1200.779907, -913.551147, 47.454254, 0, 0, -83.9065752207);
CreateObject(640, 1187.516113, -894.214172, 47.759533, 0, 0, -263.047158581);
CreateObject(640, 1192.841187, -893.564026, 47.759533, 0, 0, -263.047158581);
CreateObject(640, 1198.141968, -892.913879, 47.759533, 0, 0, -263.047158581);
CreateObject(640, 1203.467529, -892.263245, 47.759533, 0, 0, -263.047158581);
CreateObject(640, 1206.765747, -894.144592, 47.759533, 0, 0, 7.81227954554);
CreateObject(640, 1207.265503, -897.743225, 47.759533, 0, 0, 7.81227954554);
CreateObject(640, 1209.878906, -900.247681, 47.752697, 0, 0.859436693678, -82.1877018333);
CreateObject(640, 1215.229248, -899.521973, 47.752697, 0, 0.859436693678, -82.1877018333);
CreateObject(640, 1217.961304, -901.567139, 47.752697, 0, 0, 8.67165894343);
CreateObject(640, 1218.511353, -905.817139, 47.752697, 0, 0, 6.0933488624);
CreateObject(640, 1216.415283, -908.438538, 47.752697, 0, 0, -83.047138527);
CreateObject(640, 1211.790405, -908.989075, 47.752697, 0, 0, -83.047138527);
CreateObject(640, 1186.830933, -910.690491, 47.759533, 0, 0, 6.87549354943);
CreateObject(640, 1187.080688, -912.864929, 47.759533, 0, 0, 6.87549354943);
CreateObject(640, 1209.786377, -911.590454, 47.759533, 0, 0, 6.95278555608);
CreateObject(966, 1211.20105, -924.72522, 41.936424, 0, 0, -170.468867121);
CreateObject(966, 1225.125977, -922.150391, 41.936424, 0, 0, -349.60945048);
CreateObject(968, 1211.19043, -924.791626, 42.995674, 0, -0.859436693678, 10.3905896266);
CreateObject(7520, 1105.363281, -350.061005, 73.295639, 0.0000, 0.0000, 180.0000);
CreateObject(11547, 1063.901733, -310.795105, 75.936844, 0.0000, 0.0000, 270.0000);
CreateObject(11547, 1063.284058, -300.357941, 75.936844, 0.0000, 0.0000, 270.0000);
CreateObject(1676, 1072.276489, -311.288208, 74.775520, 0.0000, 0.0000, 270.0000);
CreateObject(1676, 1066.661743, -311.379974, 74.775520, 0.0000, 0.0000, 270.0000);
CreateObject(1676, 1061.258789, -311.697327, 74.775520, 0.0000, 0.0000, 270.0000);
CreateObject(1676, 1055.649536, -311.461792, 74.775520, 0.0000, 0.0000, 270.0000);
CreateObject(1676, 1071.708984, -300.404968, 74.775520, 0.0000, 0.0000, 270.0000);
CreateObject(1676, 1066.182129, -300.510895, 74.775520, 0.0000, 0.0000, 270.0000);
CreateObject(1676, 1060.435303, -300.441406, 74.775520, 0.0000, 0.0000, 270.0000);
CreateObject(1676, 1055.342896, -300.688049, 74.775520, 0.0000, 0.0000, 270.0000);
CreateObject(17950, 1115.448730, -306.607819, 75.242859, 0.0000, 0.0000, 90.0000);
CreateObject(16151, 1039.474976, -306.894806, 73.384834, 0.0000, 0.0000, 180.0000);
CreateObject(1966, 1045.514771, -285.780396, 75.580002, 0.0000, 0.0000, 0.0000);
CreateObject(1966, 1038.340454, -289.686157, 72.154976, 0.0000, 0.0000, 90.0000);
CreateObject(1966, 1052.807617, -308.686493, 72.954994, 0.0000, 0.0000, 270.0000);
CreateObject(1717, 1052.041382, -298.122589, 72.990280, 0.0000, 0.0000, 225.0000);
CreateObject(1840, 1052.359009, -299.332275, 73.010986, 0.0000, 0.0000, 0.0000);
CreateObject(2028, 1051.604370, -299.443970, 73.076408, 0.0000, 0.0000, 0.0000);
CreateObject(2232, 1039.563599, -299.987061, 73.590958, 0.0000, 0.0000, 90.0000);
CreateObject(1281, 1040.399536, -318.135101, 73.792572, 0.0000, 0.0000, 0.0000);
CreateObject(1281, 1050.086670, -317.422882, 73.792572, 0.0000, 0.0000, 0.0000);
CreateObject(1281, 1035.807617, -314.259491, 73.792572, 0.0000, 0.0000, 270.0000);
CreateObject(1281, 1035.728760, -309.418488, 73.792572, 0.0000, 0.0000, 270.0000);
CreateObject(1281, 1035.603394, -304.239197, 73.792572, 0.0000, 0.0000, 270.0000);
CreateObject(643, 1050.066040, -291.388306, 73.463554, 0.0000, 0.0000, 348.7500);
CreateObject(643, 1041.240967, -289.995026, 73.463554, 0.0000, 0.0000, 348.7500);
CreateObject(643, 1045.914307, -289.549377, 73.463554, 0.0000, 0.0000, 348.7500);
CreateObject(2321, 1049.177856, -299.603271, 72.992065, 0.0000, 0.0000, 270.0000);
CreateObject(1726, 1046.890625, -301.179596, 72.985497, 0.0000, 0.0000, 90.0000);
CreateObject(1726, 1050.005859, -303.988037, 72.985497, 0.0000, 0.0000, 180.0000);
CreateObject(1726, 1048.117065, -297.673248, 72.985497, 0.0000, 0.0000, 0.0000);
CreateObject(2587, 1052.591309, -300.760406, 74.137161, 0.0000, 0.0000, 270.0000);
CreateObject(2714, 1038.482666, -313.220123, 74.455902, 0.0000, 0.0000, 90.0000);
CreateObject(10281, 1045.513306, -316.924011, 80.631378, 0.0000, 0.0000, 348.7500);
CreateObject(1966, 1019.529175, -285.160522, 75.750809, 0.0000, 0.0000, 0.0000);
CreateObject(1966, 1012.113647, -289.964630, 72.155006, 0.0000, 0.0000, 90.0000);
CreateObject(1966, 1026.709595, -308.809937, 72.504906, 0.0000, 0.0000, 90.0000);
CreateObject(956, 1025.616943, -294.381226, 73.397095, 0.0000, 0.0000, 0.0000);
CreateObject(955, 1025.980591, -301.122894, 73.396126, 0.0000, 0.0000, 270.0000);
CreateObject(1209, 1025.997314, -302.348022, 72.993080, 0.0000, 0.0000, 270.0000);
CreateObject(1263, 1015.813110, -315.285889, 73.779381, 0.0000, 0.0000, 90.0001);
CreateObject(1262, 1079.401978, -339.029510, 78.692619, 0.0000, 0.0000, 90.0000);
CreateObject(1298, 1054.614014, -343.215851, 76.386429, 0.0000, 0.0000, 258.7500);
CreateObject(1298, 1059.577026, -342.684082, 76.386429, 0.0000, 0.0000, 258.7500);
CreateObject(1298, 1065.626831, -342.879120, 76.386429, 0.0000, 0.0000, 258.7500);
CreateObject(1298, 1072.943604, -342.691437, 76.386429, 0.0000, 0.0000, 258.7500);
CreateObject(1298, 1032.575684, -341.794128, 76.386429, 0.0000, 0.0000, 258.7500);
CreateObject(1298, 1029.274902, -342.871613, 76.386429, 0.0000, 0.0000, 337.5000);
CreateObject(2602, 1025.916382, -313.512177, 73.516518, 0.0000, 0.0000, 270.0000);
CreateObject(12978, 1041.221313, -351.118469, 73.383766, 0.0000, 0.0000, 270.0000);
CreateObject(13027, 1041.342896, -351.008911, 76.207191, 0.0000, 0.0000, 90.0000);
CreateObject(17950, 1011.617920, -324.630188, 75.242859, 0.0000, 0.0000, 270.0000);
CreateObject(17950, 1011.643127, -331.789948, 75.242859, 0.0000, 0.0000, 270.0000);
CreateObject(17950, 1011.605469, -339.045685, 75.242859, 0.0000, 0.0000, 270.0000);
CreateObject(17950, 1011.629700, -346.079468, 75.242859, 0.0000, 0.0000, 270.0000);
CreateObject(17950, 1011.656860, -353.221649, 75.242859, 0.0000, 0.0000, 270.0000);
CreateObject(10282, 1043.133301, -351.143982, 74.038841, 0.0000, 0.0000, 270.0000);
CreateObject(11393, 1015.765015, -290.392700, 74.518120, 0.0000, 0.0000, 90.0000);
CreateObject(1337, 2506.2416992188, -1659.8283691406, 13.070323944092, 0.000000, 0.000000, 310.375);
CreateObject(1337, 2493.2084960938, -1654.1949462891, 13.018049240112, 0.000000, 0.000000, 0.000000);
CreateObject(1264, 2505.0864257813, -1659.5505371094, 12.884218215942, 0.000000, 0.000000, 0.000000);
CreateObject(1216, 2491.2329101563, -1741.9293212891, 13.238877296448, 0.000000, 0.000000, 181.34997558594);
CreateObject(1257, 2489.2448730469, -1741.4752197266, 13.826066970825, 0.000000, 0.000000, 270.67504882813);
CreateObject(1346, 2503.6447753906, -1724.8782958984, 13.897880554199, 0.000000, 0.000000, 0.000000);
CreateObject(1366, 2506.6589355469, -1738.6198730469, 13.168173789978, 0.000000, 0.000000, 0.000000);
CreateObject(1375, 2485.3012695313, -1739.4874267578, 14.236884117126, 0.000000, 0.000000, 242.88494873047);
CreateObject(1527, 2479.6430664063, -1755.2431640625, 13.527421951294, 0.000000, 0.000000, 0.000000);
CreateObject(8171, 3007.675293, -1994.956299, 1.861952, 0.000000, 0.000000, 0.000000);
CreateObject(8343, 3031.784424, -1877.606812, 1.881622, 0.000000, 0.000000, 0.000000);
CreateObject(8171, 3090.908203, -1897.340088, 1.830196, 0.000000, 0.000000, 0.000000);
CreateObject(8171, 3090.919678, -1995.338135, 1.807117, 0.000000, 0.000000, 0.000000);
CreateObject(8171, 3090.931885, -2113.339600, 1.828412, 0.000000, 0.000000, 0.000000);
CreateObject(8171, 3007.698486, -2113.717529, 1.842735, 0.000000, 0.000000, 0.000000);
CreateObject(8354, 3027.586182, -2052.708008, 1.786963, 0.000000, 0.000000, -360.000039696);
CreateObject(8343, 3066.875732, -2230.363281, 1.859961, 0.000000, 0.000000, -539.999887656);
CreateObject(8171, 3007.713379, -2217.119873, 1.840366, 0.000000, 0.000000, 0.000000);
CreateObject(5005, 2988.344727, -2202.980957, 5.194251, 0.000000, 0.000000, -89.999981276);
CreateObject(5005, 2988.420166, -2040.110840, 5.219252, 0.000000, 0.000000, -89.999981276);
CreateObject(5005, 2988.460449, -1964.384644, 5.213468, 0.000000, 0.000000, -89.999981276);
CreateObject(5007, 3011.265625, -2200.874756, 4.552825, 0.000000, 0.000000, -180.000019848);
CreateObject(5005, 3110.291992, -2072.842773, 5.279928, 0.000000, 0.000000, -270.000001124);
CreateObject(5007, 3087.427734, -1907.221313, 4.617655, 0.000000, 0.000000, -360.000039696);
CreateObject(5005, 3110.240967, -2135.528564, 5.254930, 0.000000, 0.000000, -270.000001124);
CreateObject(3452, 2978.928711, -1980.254272, 6.270012, 0.000000, 0.000000, -89.999981276);
CreateObject(3452, 2978.930664, -2009.799316, 6.282929, 0.000000, 0.000000, -89.999981276);
CreateObject(3452, 2978.942383, -1950.729614, 6.287722, 0.000000, 0.000000, -89.999981276);
CreateObject(3452, 2978.947510, -1921.110840, 6.283676, 0.000000, 0.000000, -89.999981276);
CreateObject(3452, 2978.934082, -1892.041992, 6.275713, 0.000000, 0.000000, -89.999981276);
CreateObject(3452, 2978.941406, -2039.370361, 6.290478, 0.000000, 0.000000, -89.999981276);
CreateObject(3452, 2978.950195, -2068.966309, 6.284935, 0.000000, 0.000000, -89.999981276);
CreateObject(3452, 2978.939697, -2098.557129, 6.284210, 0.000000, 0.000000, -89.999981276);
CreateObject(3452, 2978.916504, -2128.024414, 6.302369, 0.000000, 0.000000, -89.999981276);
CreateObject(3452, 2978.902832, -2157.601563, 6.284748, 0.000000, 0.000000, -89.999981276);
CreateObject(3452, 2978.896729, -2187.180664, 6.291612, 0.000000, 0.000000, -89.999981276);
CreateObject(3452, 2978.888672, -2216.762207, 6.300079, 0.000000, 0.000000, -89.999981276);
CreateObject(8411, 2957.133057, -2200.757568, -53.102680, 0.000000, 0.000000, -89.999981276);
CreateObject(8411, 2957.205566, -2138.551025, -53.082726, 0.000000, 0.000000, -89.999981276);
CreateObject(8411, 2957.201172, -2075.964111, -53.112068, 0.000000, 0.000000, -89.999981276);
CreateObject(8411, 2957.222412, -2013.414185, -53.109497, 0.000000, 0.000000, -89.999981276);
CreateObject(8411, 2957.214600, -1951.066162, -53.103603, 0.000000, 0.000000, -89.999981276);
CreateObject(8411, 2957.208252, -1908.093994, -53.098160, 0.000000, 0.000000, -89.999981276);
CreateObject(7520, 3042.115967, -1993.657593, 2.047555, 0.000000, 0.000000, -89.999981276);
CreateObject(7520, 3042.135498, -2034.078613, 2.047555, 0.000000, 0.000000, -89.999981276);
CreateObject(5005, 3026.005127, -2018.016968, 4.963467, 0.000000, 0.000000, -89.999981276);
CreateObject(8354, 3028.451904, -1972.411865, 1.729675, 0.000000, 0.000000, -360.000039696);
CreateObject(7520, 3042.156006, -1953.044922, 1.990267, 0.000000, 0.000000, -89.999981276);
CreateObject(7520, 3042.156738, -2074.102295, 2.022557, 0.000000, 0.000000, -89.999981276);
CreateObject(8038, 3048.075439, -2140.700195, 17.953617, 0.000000, 0.000000, -180.000019848);
CreateObject(7191, 3025.671631, -2146.163086, 3.742413, 0.000000, 0.000000, 0.000000);
CreateObject(7191, 3025.685303, -2190.280762, 3.742413, 0.000000, 0.000000, 0.000000);
CreateObject(1237, 3025.772949, -2101.277344, 1.638729, 0.000000, 0.000000, 0.000000);
CreateObject(1237, 3026.288574, -2101.277344, 1.672428, 0.000000, 0.000000, 0.000000);
CreateObject(1237, 3025.781006, -2101.252441, 2.213169, 0.000000, 0.000000, 0.000000);
CreateObject(1237, 3026.296631, -2101.288574, 2.208605, 0.000000, 0.000000, 0.000000);
CreateObject(973, 3035.560547, -2110.043457, 2.277182, 0.000000, 0.000000, 55.3905802527);
CreateObject(973, 3028.403320, -2120.389404, 2.308757, 0.000000, 0.000000, 55.3905802527);
CreateObject(973, 3032.332764, -2114.701904, 2.277182, 0.000000, 0.000000, 55.3905802527);
CreateObject(973, 3039.725098, -2102.508545, 2.277182, 0.000000, 0.000000, 66.6405492643);
CreateObject(974, 3029.142334, -2124.037109, 2.967407, 0.000000, 0.000000, 1.71887338539);
CreateObject(974, 3035.666748, -2123.937744, 2.960479, 0.000000, 0.000000, 0.000000);
CreateObject(4113, 3052.178711, -1883.171997, -34.367798, 0.000000, 0.000000, -344.530236523);
CreateObject(4113, 3037.970215, -1882.775146, -34.358898, 0.000000, 0.000000, -346.249109908);
CreateObject(5005, 3072.839844, -1967.037109, 5.231712, 0.000000, 0.000000, -89.999981276);
CreateObject(5005, 3072.766357, -2128.546631, 5.229928, 0.000000, 0.000000, -89.999981276);
CreateObject(3452, 3063.405273, -1914.344116, 6.304095, 0.000000, 0.000000, -89.999981276);
CreateObject(3452, 3063.393555, -1943.905396, 6.304095, 0.000000, 0.000000, -89.999981276);
CreateObject(3452, 3063.363525, -1966.236206, 6.304095, 0.000000, 0.000000, -89.999981276);
CreateObject(3452, 3063.359131, -1995.840698, 6.302119, 0.000000, 0.000000, -89.999981276);
CreateObject(3452, 3063.353760, -2017.680176, 6.311383, 0.000000, 0.000000, -89.999981276);
CreateObject(3452, 3063.345215, -2039.510498, 6.311388, 0.000000, 0.000000, -89.999981276);
CreateObject(3452, 3063.345215, -2061.338135, 6.324775, 0.000000, 0.000000, -89.999981276);
CreateObject(3452, 3063.342773, -2090.938477, 6.308138, 0.000000, 0.000000, -89.999981276);
CreateObject(7191, 3054.200195, -2083.444580, 10.180839, 0.000000, 0.000000, 0.000000);
CreateObject(7191, 3054.265625, -2038.556396, 10.087029, 0.000000, 0.000000, 0.000000);
CreateObject(7191, 3054.304443, -1993.772583, 10.039252, 0.000000, 0.000000, 0.000000);
CreateObject(7191, 3054.291016, -1949.165161, 10.018068, 0.000000, 0.000000, 0.000000);
CreateObject(7191, 3054.298828, -1921.698486, 10.037237, 0.000000, 0.000000, 0.000000);
CreateObject(7191, 3052.925781, -1921.702759, 6.829351, 0.000000, 46.4095241098, 0.000000);
CreateObject(7191, 3050.045898, -1921.691895, 4.104355, 0.000000, 46.4095241098, 0.000000);
CreateObject(7191, 3047.743652, -1921.691040, 1.904352, 0.000000, 46.4095241098, 0.000000);
CreateObject(1686, 3028.592285, -2094.130127, 1.725266, 0.000000, 0.000000, 0.000000);
CreateObject(7191, 3050.161133, -1895.322876, 3.572031, 0.000000, 0.000000, -269.999943828);
CreateObject(7191, 3048.865967, -1917.382446, 2.979355, 0.000000, 46.4095241098, -359.9999824);
CreateObject(7191, 3051.703613, -1917.510132, 5.659934, 0.000000, 46.4095241098, -359.9999824);
CreateObject(7191, 3052.868408, -1917.518799, 6.747816, 0.000000, 46.4095241098, -359.9999824);
CreateObject(7191, 3050.142822, -1895.333252, 7.064250, 0.000000, 0.000000, -270.000001124);
CreateObject(7191, 3075.261230, -1897.281982, 1.038128, 18.0481705466, 89.3813587446, -270.000001124);
CreateObject(7191, 3075.190430, -1898.295166, 1.153628, 18.0481705466, 89.3813587446, -270.000001124);
CreateObject(1686, 3028.853760, -2054.820557, 1.750266, 0.000000, 0.000000, 0.000000);
CreateObject(1686, 3028.548096, -2014.376099, 1.700267, 0.000000, 0.000000, 0.000000);
CreateObject(1686, 3028.696777, -1972.639648, 1.692979, 0.000000, 0.000000, 0.000000);
CreateObject(974, 3059.366455, -1973.808594, 1.455272, 0.000000, 0.000000, 0.000000);
CreateObject(974, 3059.388184, -1926.874268, 1.255271, 0.000000, 0.000000, 0.000000);
CreateObject(974, 3058.588623, -1899.764160, 1.305268, 0.000000, 0.000000, 0.000000);
CreateObject(974, 3060.260010, -1899.741211, 1.305268, 0.000000, 0.000000, 0.000000);
CreateObject(974, 3059.339844, -2008.661499, 1.187556, 0.000000, 0.000000, 0.000000);
CreateObject(974, 3059.276611, -2053.330566, 1.600950, 0.000000, 0.000000, 1.71887338539);
CreateObject(974, 3059.480469, -2097.435547, 1.234315, 0.000000, 0.000000, 1.71887338539);
CreateObject(974, 3057.977051, -2097.470703, 1.209311, 0.000000, 0.000000, 1.71887338539);
CreateObject(974, 3066.194580, -2100.928223, 3.265381, 73.0520615834, 1.71887338539, -90.8594179687);
CreateObject(979, 3040.556885, -1934.306763, 2.294895, 0.000000, 0.000000, 101.250007583);
CreateObject(979, 3038.907959, -1925.956543, 2.294895, 0.000000, 0.000000, 101.250007583);
CreateObject(979, 3037.125977, -1917.072144, 2.294894, 0.000000, 0.000000, 101.250007583);
CreateObject(979, 3032.853760, -1909.789917, 2.319894, 0.000000, 0.000000, 138.437718685);
CreateObject(974, 3028.058594, -1898.760742, 4.507416, 0.000000, 0.000000, -89.999981276);
CreateObject(974, 3028.060547, -1902.014771, 4.507416, 0.000000, 0.000000, -89.999981276);
CreateObject(979, 3031.406494, -1908.516602, 2.319894, 0.000000, 0.000000, 138.437718685);
CreateObject(974, 3025.963623, -1935.247070, 4.364691, 0.000000, 0.000000, -89.999981276);
CreateObject(1237, 3025.716553, -1938.430542, 1.864833, 0.000000, 0.000000, 0.000000);
CreateObject(1237, 3026.281982, -1938.503052, 1.867434, 0.000000, 0.000000, 0.000000);
CreateObject(1237, 3025.968750, -1931.918823, 1.814833, 0.000000, 0.000000, 0.000000);
CreateObject(2792, 3034.417969, -2098.162598, 7.157134, 0.000000, 0.000000, 0.000000);
CreateObject(2793, 3034.996582, -2058.163818, 7.222112, 0.000000, 0.000000, 0.000000);
CreateObject(2794, 3034.830078, -2017.742798, 7.293601, 0.000000, 0.000000, 0.000000);
CreateObject(2795, 3035.241943, -1977.130127, 7.219455, 0.000000, 0.000000, 0.000000);
CreateObject(3526, 3023.146240, -1909.075684, 1.950040, 0.000000, 0.000000, 89.999981276);
CreateObject(3526, 3023.133545, -1928.967407, 1.905370, 0.000000, 0.000000, 89.999981276);
CreateObject(3526, 3023.133301, -2106.440674, 1.911153, 0.000000, 0.000000, 89.999981276);
CreateObject(3526, 3023.092529, -2125.355713, 1.911153, 0.000000, 0.000000, 89.999981276);
CreateObject(8411, 2956.681152, -1872.434326, -53.097809, 0.000000, 0.000000, -180.000019848);
CreateObject(8411, 2990.474365, -1847.788086, -52.776291, 0.000000, 0.859436692696, -119.452762143);
CreateObject(8411, 3015.288574, -1826.595337, -52.321980, 0.000000, 0.859436692696, -141.093320769);
CreateObject(8411, 3052.857910, -1819.176636, -51.780697, 0.000000, 0.859436692696, -171.405538329);
CreateObject(8411, 3094.114990, -1826.715332, -51.215736, 0.000000, 0.859436692696, -201.717755889);
CreateObject(8411, 3115.566895, -1849.023926, -50.778687, 0.000000, 0.859436692696, -235.467777516);
CreateObject(8411, 3122.904297, -1875.317139, -50.401443, 0.000000, 0.859436692696, -268.358362449);
CreateObject(3452, 3119.780762, -1920.822632, 6.342050, 0.000000, 0.000000, -270.000001124);
CreateObject(3452, 3119.781250, -1950.388306, 6.356937, 0.000000, 0.000000, -270.000001124);
CreateObject(3452, 3119.789795, -1979.914307, 6.343851, 0.000000, 0.000000, -270.000001124);
CreateObject(3452, 3119.796631, -2009.477661, 6.350800, 0.000000, 0.000000, -270.000001124);
CreateObject(3452, 3119.792725, -2039.061646, 6.359059, 0.000000, 0.000000, -270.000001124);
CreateObject(3452, 3119.785645, -2068.595215, 6.342967, 0.000000, 0.000000, -270.000001124);
CreateObject(3452, 3119.787354, -2097.993652, 6.344263, 0.000000, 0.000000, -270.000001124);
CreateObject(3452, 3119.786865, -2127.426270, 6.354470, 0.000000, 0.000000, -270.000001124);
CreateObject(3452, 3119.778564, -2156.919434, 6.360141, 0.000000, 0.000000, -270.000001124);
CreateObject(3452, 3119.761475, -2186.403076, 6.347313, 0.000000, 0.000000, -270.000001124);
CreateObject(8411, 3123.615723, -2232.207764, -52.544464, 0.000000, 0.859436692696, -269.217799142);
CreateObject(8411, 3113.525879, -2249.268555, -55.884750, 0.000000, 0.859436692696, -290.935821662);
CreateObject(8411, 3097.866943, -2270.978516, -55.521835, 0.000000, 0.859436692696, -310.857564199);
CreateObject(8411, 3069.449463, -2284.684082, -55.055473, 0.000000, 0.859436692696, -336.872712887);
CreateObject(8411, 3030.497803, -2289.893799, -54.505913, 0.000000, 0.859436692696, -360.232144898);
CreateObject(8411, 2975.235107, -2262.262207, -53.564121, 0.000000, 0.859436692696, -450.23218347);
CreateObject(8411, 2996.260986, -2275.205322, -53.947548, 0.000000, 0.859436692696, -405.232135537);
CreateObject(973, 3072.222412, -2216.693115, 2.700181, 0.000000, 0.000000, -101.250007583);
CreateObject(1237, 3072.906738, -2212.006104, 1.858847, 0.000000, 0.000000, 0.000000);
CreateObject(973, 3069.167969, -2225.358398, 2.700181, 0.000000, 0.000000, -117.656596751);
CreateObject(973, 3063.559570, -2232.341553, 2.700181, 0.000000, 0.000000, -140.15659207);
CreateObject(973, 3055.781982, -2236.889404, 2.675181, 0.000000, 0.000000, -159.141605908);
CreateObject(973, 3046.853027, -2238.332275, 2.625181, 0.000000, 0.000000, -181.641601227);
CreateObject(973, 3025.418701, -2217.954102, 2.630585, 0.000000, 0.000000, -271.641639798);
CreateObject(973, 3027.697998, -2226.464844, 2.630586, 0.000000, 0.000000, -237.891618172);
CreateObject(973, 3033.753418, -2233.091309, 2.619507, 0.000000, 0.000000, -217.110496238);
CreateObject(1237, 3038.081299, -2236.523193, 1.761006, 0.000000, 0.000000, 0.000000);
CreateObject(1237, 3039.829590, -2237.254150, 1.787842, 0.000000, 0.000000, 0.000000);
CreateObject(1237, 3041.462158, -2237.800537, 1.762842, 0.000000, 0.000000, 0.000000);
CreateObject(4602, 3057.031982, -2120.037842, -60.948921, 0.000000, 0.000000, 0.000000);
CreateObject(973, 3028.810303, -1890.697144, 2.355744, 0.000000, 0.000000, 81.3282650467);
CreateObject(973, 3031.916260, -1882.184570, 2.337573, 0.000000, 0.000000, 58.8282697277);
CreateObject(973, 3038.014893, -1875.440186, 2.387573, 0.000000, 0.000000, 36.3282744087);
CreateObject(973, 3046.206543, -1871.576782, 2.387573, 0.000000, 0.000000, 13.8282790897);
CreateObject(973, 3055.235352, -1871.188965, 2.412573, 0.000000, 0.000000, -8.67171622931);
CreateObject(973, 3063.784424, -1874.220215, 2.478672, 0.000000, 0.000000, -31.1717115483);
CreateObject(973, 3070.432617, -1880.260986, 2.503672, 0.000000, 0.000000, -53.6717068673);
CreateObject(973, 3073.082764, -1888.566772, 2.520415, 0.000000, 0.000000, -90.8594179687);
CreateObject(1237, 3073.262939, -1887.126709, 1.838737, 0.000000, 0.000000, 0.000000);
CreateObject(973, 3059.628906, -1831.936768, 2.571842, 0.000000, 0.000000, -181.718835937);
CreateObject(973, 3050.466797, -1832.562866, 2.546841, 0.000000, 0.000000, -170.468866926);
CreateObject(973, 3042.030029, -1833.988647, 2.546841, 0.000000, 0.000000, -170.468866926);
CreateObject(973, 3033.237305, -1836.397583, 2.571841, 0.000000, 0.000000, -159.218840618);
CreateObject(973, 3024.823242, -1839.604370, 2.571841, 0.000000, 0.000000, -159.218840618);
CreateObject(973, 3017.280273, -1843.436035, 2.571841, 0.000000, 0.000000, -147.968814311);
CreateObject(973, 3010.176758, -1848.961182, 2.571841, 0.000000, 0.000000, -136.718845299);
CreateObject(973, 3004.279541, -1855.747437, 2.571841, 0.000000, 0.000000, -125.468818992);
CreateObject(973, 2999.201660, -1862.924683, 2.596842, 0.859436692696, 0.000000, -125.468818992);
CreateObject(973, 2993.936523, -1870.334961, 2.621842, 0.000000, 0.000000, -125.468876288);
CreateObject(1237, 3072.614502, -1887.069824, 1.833077, 0.000000, 0.000000, 0.000000);
CreateObject(1237, 3073.135254, -1887.327515, 2.724143, 0.000000, 0.000000, 0.000000);
CreateObject(1237, 3072.687744, -1887.353027, 2.699569, 0.000000, 0.000000, 0.000000);
CreateObject(973, 3109.038330, -2219.470215, 2.500180, 0.000000, 0.000000, 81.3282650467);
CreateObject(973, 3106.837402, -2228.204590, 2.500180, 0.000000, 0.000000, 70.0782387393);
CreateObject(973, 3103.815918, -2236.444580, 2.550180, 0.000000, 0.000000, 70.0782387393);
CreateObject(973, 3100.008789, -2244.378662, 2.550180, 0.000000, 0.000000, 58.8282697277);
CreateObject(973, 3094.751709, -2251.355469, 2.600181, 0.000000, 0.000000, 47.5782434203);
CreateObject(973, 3088.863770, -2257.702148, 2.650181, 0.000000, 0.000000, 47.5782434203);
CreateObject(973, 3082.007568, -2263.872070, 2.650181, 0.000000, 0.000000, 36.3282744087);
CreateObject(973, 3074.187988, -2268.563232, 2.625181, 0.000000, 0.000000, 25.0782481013);
CreateObject(973, 3066.243896, -2271.985352, 2.610861, 0.000000, 0.000000, 21.6405586263);
CreateObject(973, 3057.660889, -2274.415771, 2.625181, 0.000000, 0.000000, 10.3905323189);
CreateObject(973, 3048.732178, -2275.125488, 2.650181, 0.000000, 0.000000, -0.859436692696);
CreateObject(973, 3039.563477, -2275.872314, 2.575181, 0.859436692696, -0.859436692696, 10.3905323189);
CreateObject(7304, 3025.734375, -2019.715698, 6.567963, 0.000000, 0.000000, 0.000000);
CreateObject(7304, 3025.762207, -2019.718628, 6.550190, 0.000000, 0.000000, 180.000019848);
CreateObject(984, 3000.136230, -2062.701660, 1.873630, 0.000000, -89.3813587446, -89.999981276);
CreateObject(984, 3015.248535, -2062.649902, 1.873630, 0.000000, -89.3813587446, -89.999981276);
CreateObject(4113, 3090.939453, -1884.755371, -34.366211, 0.000000, 0.000000, -346.249109908);
CreateObject(1673, 2998.684814, -2056.858398, 5.909145, 0.000000, 0.000000, -180.000019848);
CreateObject(1673, 3015.765625, -2055.974365, 5.884145, 0.000000, 0.000000, -360.000039696);
CreateObject(1263, 3013.341797, -2056.618896, 8.524136, 0.000000, 0.000000, 89.999981276);
CreateObject(1263, 3020.262695, -2056.626709, 8.529920, 0.000000, 0.000000, 89.999981276);
CreateObject(1263, 3001.466064, -2056.589844, 8.574139, 0.000000, 0.000000, 89.999981276);
CreateObject(1263, 2994.876953, -2056.588623, 8.579926, 0.000000, 0.000000, 89.999981276);
CreateObject(4113, 2984.317383, -1862.543945, -34.177166, 0.000000, 0.000000, -270.696775099);
CreateObject(974, 2985.757568, -1884.786133, 0.917180, 0.000000, 0.000000, 0.936728699259);
CreateObject(973, 2990.535156, -1878.173096, 2.621842, 0.000000, 0.000000, -102.968880969);
CreateObject(973, 2989.090332, -1884.388916, 2.596842, 0.000000, 0.000000, -102.968880969);
CreateObject(974, 3112.927490, -2215.170410, 0.937702, 0.000000, 0.000000, -180.000019848);
CreateObject(1237, 3072.343506, -2212.050537, 1.880831, 0.000000, 0.000000, 0.000000);
CreateObject(1237, 3072.468994, -2211.660156, 2.631188, 0.000000, 0.000000, 0.000000);
CreateObject(1237, 3072.947021, -2211.630615, 2.628147, 0.000000, 0.000000, 0.000000);
CreateObject(8411, 3050.006104, -2225.710449, -63.147194, 0.000000, 0.000000, -359.372708206);
CreateObject(8411, 3041.936035, -2200.363770, -63.149902, 0.000000, 0.000000, -359.372708206);
CreateObject(8411, 3051.411133, -2175.753418, -63.158176, 0.000000, 0.000000, -359.372708206);
CreateObject(8411, 3050.738770, -2150.500488, -63.158115, 0.000000, 0.000000, -359.372708206);
CreateObject(8411, 3050.406494, -2126.211182, -63.224342, 0.000000, 0.000000, -359.372708206);
CreateObject(7191, 3048.747803, -2168.648926, 3.760015, 0.000000, 0.000000, -89.999981276);
CreateObject(7191, 3050.601807, -2168.635010, 3.754474, 0.000000, 0.000000, -89.999981276);
CreateObject(1215, 3102.303955, -2240.499268, 2.856643, 0.000000, 0.000000, 0.000000);
CreateObject(1215, 3097.762695, -2247.911133, 2.931645, 0.000000, 0.000000, 0.000000);
CreateObject(1215, 3085.602295, -2261.125732, 3.006644, 0.000000, 0.000000, 0.000000);
CreateObject(1215, 3078.200439, -2266.614014, 2.956644, 0.000000, 0.000000, 0.000000);
CreateObject(1215, 3062.142822, -2273.546875, 2.981644, 0.000000, 0.000000, 0.000000);
CreateObject(1215, 3053.177734, -2275.178223, 2.956644, 0.000000, 0.000000, 0.000000);
CreateObject(1215, 2991.580811, -1873.687012, 2.953305, 0.000000, 0.000000, 0.000000);
CreateObject(1215, 3006.950684, -1852.117554, 2.903304, 0.000000, 0.000000, 0.000000);
CreateObject(1215, 3013.535889, -1845.896606, 2.903304, 0.000000, 0.000000, 0.000000);
CreateObject(1215, 3021.191650, -1841.081177, 2.903304, 0.000000, 0.000000, 0.000000);
CreateObject(1215, 3037.618408, -1834.832153, 2.895947, 0.000000, 0.000000, 0.000000);
CreateObject(1215, 3055.074951, -1831.895020, 2.878305, 0.000000, 0.000000, 0.000000);
CreateObject(718, 3069.548340, -2186.159912, 1.608710, 0.000000, 0.000000, 0.000000);
CreateObject(718, 3069.740967, -2210.326172, 1.616984, 0.000000, 0.000000, 0.000000);
CreateObject(718, 3028.892822, -2186.153809, 1.608710, 0.000000, 0.000000, 0.000000);
CreateObject(718, 3028.899902, -2210.325439, 1.615818, 0.000000, 0.000000, 0.000000);
CreateObject(8411, 3141.540283, -1935.967041, -49.475712, 0.000000, 0.859436692696, -270.077235835);
CreateObject(8411, 3141.563965, -1994.052612, -48.598419, 0.000000, 0.859436692696, -270.077235835);
CreateObject(8411, 3141.522217, -2053.744873, -48.285172, 0.000000, 0.000000, -270.077235835);
CreateObject(8411, 3141.545166, -2115.935547, -47.837929, 0.000000, 0.859436692696, -270.077235835);
CreateObject(8411, 3141.556152, -2162.195068, -47.353897, 0.000000, 0.000000, -270.077235835);
CreateObject(8411, 3141.533936, -2197.719727, -46.899353, 0.000000, 0.859436692696, -270.077235835);
CreateObject(4729, 3128.806641, -2013.964233, 11.252138, 0.000000, 0.000000, 199.921647793);
CreateObject(7305, 3129.317627, -2059.627930, 12.063894, 0.000000, 0.000000, -44.999990638);
CreateObject(10771, 2117.8544921875, -2999.533203125, 4.5205101966858, 0, 0, 0);
CreateObject(11145, 2054.9230957031, -2999.5417480469, 3.3213114738464, 0, 0, 0);
CreateObject(11146, 2108.8671875, -2998.9287109375, 11.356231689453, 0, 0, 0);
CreateObject(10770, 2121.0810546875, -3007.07421875, 37.727993011475, 0, 0, 0);
CreateObject(11237, 2121.0891113281, -3007.1801757813, 37.71671295166, 0, 0, 0);
CreateObject(10772, 2119.2021484375, -2999.763671875, 16.309572219849, 0, 0, 0);
CreateObject(9819, 2186.994140625, -2990.61328125, 10.11597442627, 0, 0, 0);
CreateObject(16782, 2188.109375, -2998.1845703125, 12.294052124023, 0, 0, 180.10986328125);
CreateObject(9958, 2307.3344726563, -2793.9763183594, 1.6153073310852, 0, 0, 189.42993164063);
CreateObject(11149, 2111.8334960938, -3004.6743164063, 11.010753631592, 0, 0, 0);
CreateObject(11374, 2111.8374023438, -3004.6870117188, 10.95894241333, 0, 0, 0);
CreateObject(1671, 2186.3112792969, -2988.6005859375, 9.7226963043213, 0, 0, 128.19473266602);
CreateObject(1671, 2186.2619628906, -2991.5866699219, 9.7226963043213, 0, 0, 89.504821777344);
CreateObject(1671, 2186.4956054688, -2994.1840820313, 9.7226963043213, 0, 0, 89.500122070313);
CreateObject(2985, 2114.5615234375, -2983.337890625, 9.2472972869873, 0, 0, 64.494903564453);
CreateObject(2985, 2117.5615234375, -2983.337890625, 9.2472972869873, 0, 0, 64.48974609375);
CreateObject(2985, 2120.5615234375, -2983.337890625, 9.2472972869873, 0, 0, 64.48974609375);
CreateObject(2985, 2123.5615234375, -2983.337890625, 9.2472972869873, 0, 0, 64.48974609375);
CreateObject(2985, 2126.5615234375, -2983.337890625, 9.2472972869873, 0, 0, 64.48974609375);
CreateObject(2985, 2129.5615234375, -2983.337890625, 9.2472972869873, 0, 0, 64.48974609375);
CreateObject(2985, 2132.5615234375, -2983.337890625, 9.2472972869873, 0, 0, 64.48974609375);
CreateObject(2985, 2135.5615234375, -2983.337890625, 9.2472972869873, 0, 0, 64.48974609375);
CreateObject(2985, 2138.5615234375, -2983.337890625, 9.2472972869873, 0, 0, 64.48974609375);
CreateObject(2985, 2141.5615234375, -2983.337890625, 9.2472972869873, 0, 0, 64.48974609375);
CreateObject(2985, 2144.5615234375, -2983.337890625, 9.2472972869873, 0, 0, 64.48974609375);
CreateObject(2985, 2147.5615234375, -2983.337890625, 9.2472972869873, 0, 0, 64.48974609375);
CreateObject(1801, 2134.0422363281, -3007.7216796875, 9.2216911315918, 0, 0, 180);
CreateObject(1801, 2131.7919921875, -3007.7612304688, 9.2216911315918, 0, 0, 179.99450683594);
CreateObject(1801, 2129.5419921875, -3007.8002929688, 9.2216911315918, 0, 0, 179.99450683594);
CreateObject(1801, 2127.2397460938, -3007.2719726563, 9.2216911315918, 0, 0, 179.99450683594);
CreateObject(1801, 2134.3234863281, -3003.5783691406, 9.2216911315918, 0, 0, 179.99450683594);
CreateObject(1801, 2132.0961914063, -3003.5795898438, 9.2216911315918, 0, 0, 179.99450683594);
CreateObject(1801, 2129.9543457031, -3003.6569824219, 9.2216911315918, 0, 0, 179.99450683594);
CreateObject(1801, 2127.5024414063, -3003.7719726563, 9.2216911315918, 0, 0, 179.99450683594);
CreateObject(3267, 2090.8415527344, -3007.1799316406, 28.539577484131, 0, 0, 91.444885253906);
CreateObject(3267, 2105.2294921875, -3002.7114257813, 21.89518737793, 0, 0, 336.04174804688);
CreateObject(3267, 2105.5368652344, -3011.1901855469, 21.870187759399, 0, 0, 230.33911132813);
CreateObject(3267, 2143.5463867188, -3011.419921875, 27.542934417725, 0, 0, 230.33386230469);
CreateObject(3267, 2142.8764648438, -3002.6772460938, 27.542934417725, 0, 0, 316.00366210938);
CreateObject(1682, 2151.1994628906, -3004.703125, 25.755847930908, 0, 0, 324.27026367188);
CreateObject(3798, 2055.365234375, -2987.6096191406, 1.1025614738464, 0, 0, 0);
CreateObject(3799, 2055.8259277344, -2990.0849609375, 0.97756159305573, 0, 0, 0);
CreateObject(3796, 2055.5803222656, -2993.4484863281, 1.1025614738464, 0, 0, 270);
CreateObject(11544, 285.84878540039, -1186.525390625, 81.354217529297, 0, 0, 224.30407714844);
CreateObject(3115, 265.32815551758, -1171.2127685547, 81.456077575684, 0, 0, 43.669799804688);
CreateObject(3115, 287.69119262695, -1195.2487792969, 82.08829498291, 0, 0, 43.665191650391);
CreateObject(11544, 268.30313110352, -1179.4696044922, 80.755012512207, 0, 0, 43.665191650391);
CreateObject(3934, 267.07568359375, -1171.4039306641, 81.772262573242, 0, 0, 132.99450683594);
CreateObject(11496, 1386.829, -747.194, 135.123, 0.0, 0.0, 0.0);
CreateObject(11496, 1376.324, -750.602, 135.123, 0.0, 0.0, -90.000);
CreateObject(11496, 1372.941, -747.178, 135.138, 0.0, 0.0, -180.000);
CreateObject(11496, 1382.106, -747.187, 135.129, 0.0, 0.0, -180.000);
CreateObject(11496, 1377.568, -747.212, 135.104, 0.0, 0.0, -180.000);
CreateObject(11496, 1379.158, -739.189, 137.779, 0.0, -91.100, 90.000);
CreateObject(11496, 1376.393, -739.164, 137.804, 0.0, -91.100, 90.000);
CreateObject(11496, 1368.257, -747.131, 137.838, 0.0, -91.100, 180.000);
CreateObject(11496, 1383.375, -755.077, 136.854, 179.623, -90.241, -90.000);
CreateObject(3851, 1374.176, -755.005, 137.338, 0.0, 0.0, 90.000);
CreateObject(11496, 1391.414, -753.473, 137.798, 0.0, -91.100, 0.0);
CreateObject(3851, 1391.370, -744.828, 137.322, 0.0, 0.0, 0.0);
CreateObject(3851, 1385.731, -739.225, 137.323, 0.0, 0.0, -90.000);
CreateObject(11496, 1391.470, -747.171, 141.813, 0.0, -91.100, 0.0);
CreateObject(11496, 1383.473, -739.273, 141.744, 0.0, -91.100, 90.000);
CreateObject(11496, 1376.277, -754.963, 135.122, 0.0, 0.0, -90.000);
CreateObject(970, 1368.436, -757.379, 135.873, 0.0, 0.0, -90.000);
CreateObject(970, 1375.363, -757.369, 135.885, 0.0, 0.0, -90.000);
CreateObject(739, 1378.392, -748.513, 97.223, 0.0, 0.0, 0.0);
CreateObject(690, 1388.609, -721.692, 90.104, 0.0, 0.0, 0.0);
CreateObject(694, 1402.191, -770.125, 95.926, 0.0, 0.0, 0.0);
CreateObject(695, 1427.950, -750.174, 92.493, 0.0, 0.0, 0.0);
CreateObject(696, 1416.990, -742.975, 97.388, 0.0, 0.0, 0.0);
CreateObject(704, 1431.820, -729.433, 85.532, 0.0, 0.0, 0.0);
CreateObject(719, 1428.870, -713.904, 88.413, 0.0, 0.0, 0.0);
CreateObject(720, 1437.331, -761.818, 90.448, 0.0, 0.0, 0.0);
CreateObject(721, 1356.622, -741.752, 96.791, 0.0, 0.0, 0.0);
CreateObject(722, 1447.099, -784.525, 92.663, 0.0, 0.0, 0.0);
CreateObject(723, 1406.318, -737.733, 105.021, 0.0, 0.0, 0.0);
CreateObject(724, 1365.618, -719.505, 94.492, 0.0, 0.0, 0.0);
CreateObject(725, 1345.671875, -788.4423828125, 81.777000427246, 0, 0, 0);
CreateObject(731, 1354.624, -761.356, 97.631, 0.0, 0.0, 0.0);
CreateObject(791, 1408.04296875, -772.35546875, 83, 0, 0, 292.49450683594);
CreateObject(730, 1356.093, -723.556, 100.813, 0.0, 0.0, 0.0);
CreateObject(725, 1361.368, -723.520, 100.698, 0.0, 0.0, 0.0);
CreateObject(724, 1374.615, -734.668, 97.479, 0.0, 0.0, 0.0);
CreateObject(722, 1416.045, -719.869, 88.901, 0.0, 0.0, 0.0);
CreateObject(9339, 1391.779, -751.568, 135.971, 0.0, 0.0, -90.000);
CreateObject(1502, 1378.828, -751.677, 135.320, 0.0, 0.0, -90.000);
CreateObject(1502, 1378.871, -754.719, 135.320, 0.0, 0.0, 90.000);
CreateObject(9339, 1391.798, -751.587, 137.375, 0.0, 0.0, -90.000);
CreateObject(9339, 1391.789, -751.610, 138.779, 0.0, 0.0, -90.000);
CreateObject(1745, 1370.549, -743.759, 135.336, 0.0, 0.0, 0.0);
CreateObject(1828, 1387.680, -742.169, 135.321, 0.0, 0.0, -45.000);
CreateObject(2127, 1390.448, -750.807, 135.322, 0.0, 0.0, -180.000);
CreateObject(2130, 1388.336, -750.837, 135.323, 0.0, 0.0, -180.000);
CreateObject(2131, 1386.227, -750.898, 135.322, 0.0, 0.0, -180.000);
CreateObject(2135, 1384.138, -750.900, 135.328, 0.0, 0.0, -180.000);
CreateObject(2147, 1383.114, -750.944, 135.324, 0.0, 0.0, -180.000);
CreateObject(2224, 1372.034, -749.391, 135.333, 0.0, 0.0, 135.000);
CreateObject(2231, 1368.706, -739.364, 137.829, 0.0, 0.0, 56.250);
CreateObject(2231, 1390.798, -751.465, 138.681, 0.0, 0.0, -135.000);
CreateObject(2296, 1379.471, -739.785, 135.327, 0.0, 0.0, -360.000);
CreateObject(2514, 1390.672, -752.214, 135.322, 0.0, 0.0, -90.000);
CreateObject(2516, 1384.464, -754.252, 135.329, 0.0, 0.0, 0.0);
CreateObject(2517, 1391.260, -753.727, 135.365, 0.0, 0.0, 90.000);
CreateObject(2523, 1382.811, -754.336, 135.329, 0.0, 0.0, -180.000);
CreateObject(2628, 1389.191, -744.207, 135.317, 0.0, 0.0, 146.250);
CreateObject(2629, 1387.610, -740.761, 135.325, 0.0, 0.0, 112.500);
CreateObject(14705, 1369.038, -739.980, 136.187, 0.0, 0.0, 0.0);
CreateObject(14867, 1368.906, -747.665, 136.867, 0.0, 0.0, 270.000);
CreateObject(1481, 1374.984, -756.106, 136.025, 0.0, 0.0, -90.000);
CreateObject(1646, 1369.749, -756.820, 135.659, 0.0, 0.0, 33.750);
CreateObject(1742, 1374.546, -739.823, 135.333, 0.0, 0.0, 0.0);
CreateObject(1726, 1381.612, -750.658, 135.322, 0.0, 0.0, -180.000);
CreateObject(2637, 1389.817, -746.848, 135.728, 0.0, 0.0, -90.000);
CreateObject(2636, 1388.728, -747.593, 135.959, 0.0, 0.0, -157.500);
CreateObject(2636, 1388.473, -746.006, 135.959, 0.0, 0.0, -213.750);
CreateObject(731, 1346.951, -728.625, 100.560, 0.0, 0.0, 0.0);
CreateObject(724, 1342.639, -736.465, 97.102, 0.0, 0.0, 0.0);
CreateObject(11496, 1376.382, -752.647, 139.295, 180.482, 0.0, 90.000);
CreateObject(11496, 1376.416, -745.754, 139.255, 180.482, 0.0, 90.000);
CreateObject(11496, 1376.509, -743.274, 139.201, 180.482, 0.0, 90.000);
CreateObject(11496, 1386.693, -747.279, 139.269, 180.482, 0.0, 0.0);
CreateObject(12957, 2533.388671875, -1704.3758544922, 13.261029243469, 0, 0, 318.31530761719);
CreateObject(12954, 2540.7412109375, -1698.4892578125, 12.419945716858, 0, 0, 3.966064453125);
CreateObject(11292, 2519.875, -1709.8347167969, 13.92193031311, 0, 0, 0);
CreateObject(1721, 2523.3955078125, -1710.6278076172, 12.715912818909, 0, 0, 43.669799804688);
CreateObject(1810, 2522.6516113281, -1708.8449707031, 12.715912818909, 0, 0, 0);
CreateObject(2121, 2521.5107421875, -1709.2623291016, 13.229182243347, 0, 0, 41.684783935547);
CreateObject(2644, 2522.2514648438, -1709.6862792969, 13.120653152466, 0, 0, 7.93994140625);
CreateObject(1650, 2515.7609863281, -1707.7973632813, 13.022575378418, 0, 0, 0);
CreateObject(1650, 2515.7592773438, -1707.9331054688, 13.022575378418, 0, 0, 0);
CreateObject(2044, 2522.0661621094, -1709.9934082031, 13.574588775635, 0, 0, 35.729766845703);
CreateObject(5816, 2521.3010253906, -1714.6876220703, 14.266344070435, 0, 0, 0);
CreateObject(982, 2497.0522460938, -1724.3201904297, 18.265621185303, 0, 0, 89.324493408203);
CreateObject(983, 2484.19140625, -1721.0085449219, 18.265621185303, 0, 0, 0);
CreateObject(983, 2484.2160644531, -1716.3468017578, 18.265621185303, 0, 0, 0);
CreateObject(983, 2487.228515625, -1712.9123535156, 17.981990814209, 0, 0, 270.67565917969);
CreateObject(1413, 2540.71484375, -1717.9541015625, 13.751415252686, 0, 0, 89.324340820313);
CreateObject(1413, 2540.7294921875, -1712.517578125, 13.754775047302, 0, 0, 268.68713378906);
CreateObject(946, 2486.9528808594, -1717.9990234375, 19.78498840332, 0, 0, 266.70568847656);
CreateObject(946, 2510.7690429688, -1718.2218017578, 19.78498840332, 0, 0, 97.264495849609);
CreateObject(2114, 2487.4619140625, -1718.6875, 17.72837638855, 0, 0, 0);
CreateObject(2110, 2513.8422851563, -1721.6752929688, 17.582065582275, 0, 0, 0);
CreateObject(1763, 2494.8762207031, -1722.4829101563, 0.85284209251404, 0, 0, 334.19519042969);
CreateObject(1763, 2493.29296875, -1722.1318359375, 17.582065582275, 0, 0, 334.19311523438);
CreateObject(1763, 2454.7880859375, -1784.7626953125, 12.546875, 0, 0, 314.3388671875);
CreateObject(1958, 2515.0505371094, -1721.626953125, 18.430543899536, 0, 0, 0);
CreateObject(1575, 2514.2744140625, -1721.5404052734, 18.333053588867, 0, 0, 0);
CreateObject(2045, 2513.7932128906, -1721.6987304688, 18.47350692749, 0, 0, 342.13513183594);
CreateObject(2061, 2511.5471191406, -1722.5961914063, 17.873994827271, 0, 0, 0);
CreateObject(1636, 2518.6613769531, -1722.9329833984, 17.695066452026, 0, 0, 0);
CreateObject(1636, 2518.3488769531, -1722.8891601563, 17.695066452026, 0, 0, 0);
CreateObject(1636, 2517.9653320313, -1722.8374023438, 17.695066452026, 0, 0, 0);
CreateObject(1636, 2518.8850097656, -1722.9099121094, 17.78208732605, 0, 0, 0);
CreateObject(1550, 2522.3452148438, -1709.4346923828, 13.940398216248, 0, 0, 0);
CreateObject(3015, 2516.75, -1711.0999755859, 12.715912818909, 0, 0, 0);
CreateObject(3015, 2515.7712402344, -1711.1170654297, 12.715912818909, 0, 0, 0);
CreateObject(3015, 2516.2563476563, -1711.0971679688, 12.715912818909, 0, 0, 0);
CreateObject(3015, 2515.7739257813, -1711.1455078125, 13.314755439758, 0, 0, 0);
CreateObject(3015, 2516.2717285156, -1711.1081542969, 13.314755439758, 0, 0, 0);
CreateObject(3015, 2516.7661132813, -1711.1124267578, 13.314755439758, 0, 0, 0);
CreateObject(964, 2516.2175292969, -1709.26953125, 12.715912818909, 0, 0, 85.3544921875);
CreateObject(1362, 2531.1149902344, -1716.1207275391, 13.094958305359, 0, 0, 0);
CreateObject(2690, 2524.0305175781, -1711.4519042969, 13.334661483765, 0, 0, 0);
CreateObject(1672, 2516.1394042969, -1709.3352050781, 13.637370109558, 0, 0, 0);
CreateObject(2977, 2528.6525878906, -1721.1802978516, 12.543425559998, 0, 0, 0);
CreateObject(2988, 2523.8693847656, -1722.1613769531, 11.296875, 0, 0, 123.78656005859);
CreateObject(17971, 2529.0737304688, -1708.6315917969, 21.651226043701, 0, 0, 0);
CreateObject(2670, 2531.4096679688, -1710.5473632813, 12.560802459717, 0, 0, 0);
CreateObject(2671, 2520.5434570313, -1712.8682861328, 12.572098731995, 0, 0, 0);
CreateObject(2672, 2527.2263183594, -1714.9475097656, 12.775862693787, 0, 0, 0);
CreateObject(2673, 2526.5419921875, -1708.552734375, 12.381940841675, 0, 0, 0);
CreateObject(2673, 2525.9416503906, -1717.9086914063, 12.600893974304, 0, 0, 0);
CreateObject(2674, 2529.0651855469, -1714.0440673828, 12.498944282532, 0, 0, 0);
CreateObject(2675, 2522.4584960938, -1716.8463134766, 12.605874061584, 0, 0, 0);
CreateObject(2676, 2528.0341796875, -1718.2136230469, 12.619219779968, 0, 0, 0);
CreateObject(2676, 2533.2260742188, -1712.3723144531, 12.565014839172, 0, 0, 0);
CreateObject(2677, 2528.4616699219, -1710.9239501953, 12.772227287292, 0, 0, 0);
CreateObject(14840, 2540.5207519531, -1719.2642822266, 13.68671131134, 0, 0, 192.54431152344);
CreateObject(15027, 2529.2658691406, -1711.4365234375, 12.801911354065, 0, 0, 0);
CreateObject(1211, 1832.835571, -2045.847656, 13.157681, 0.0000, 0.0000, 0.0000);
CreateObject(12839, 1569.2211914063, -1636.2456054688, 16.276922225952, 0, 0, 90);
CreateObject(12839, 1568.0002441406, -1635.0701904297, 22.525701522827, 0, 0, 270);
CreateObject(3280, 1572.7990722656, -1635.3037109375, 18.933282852173, 0, 0, 0);
CreateObject(8614, 1569.0943603516, -1636.4029541016, 27.404876708984, 0, 0, 180);
CreateObject(1696, 1570.2749023438, -1639.8000488281, 27.593437194824, 0, 0, 0);
CreateObject(3280, 1564.4204101563, -1636.296875, 25.158514022827, 0, 0, 0);
CreateObject(616, 1810.6628417969, -1683.4248046875, 12.538656234741, 0, 0, 0);
CreateObject(967, 2312.4553222656, -1222.6706542969, 23.134819030762, 0, 0, 5.9549560546875);
CreateObject(3555, 2392.8852539063, -1296.3286132813, 27.260917663574, 0, 0, 90.041625976563);
CreateObject(16779, 765.13500976563, 5.973804473877, 1003.9173583984, 0, 0, 0);
CreateObject(981, 835.96203613281, -2066.5080566406, 11.8671875, 0, 0, 0);
CreateObject(1281, 524.77893066406, -1849.6116943359, 4.397177696228, 0, 0, 0);
CreateObject(1281, 522.09704589844, -1849.8695068359, 4.3233165740967, 0, 0, 0);
CreateObject(1670, 525.00042724609, -1849.4013671875, 4.4048161506653, 0, 0, 0);
CreateObject(1670, 525, -1849.4013671875, 4.4048161506653, 0, 0, 0);
CreateObject(1670, 522.46380615234, -1849.2622070313, 4.4041299819946, 0, 0, 0);
CreateObject(2222, 521.40716552734, -1849.5135498047, 4.4724884033203, 0, 0, 262.73571777344);
CreateObject(2222, 521.40625, -1849.5126953125, 4.4724884033203, 0, 0, 262.73254394531);
CreateObject(2222, 524.08294677734, -1849.5115966797, 4.473174571991, 0, 0, 262.73254394531);
CreateObject(1231, 737.05706787109, -1799.5927734375, 14.760133743286, 0, 0, 0);
CreateObject(1231, 737.056640625, -1799.5927734375, 14.760133743286, 0, 0, 0);
CreateObject(1714, 256.70474243164, 69.850341796875, 1002.640625, 0, 0, 276.63061523438);
CreateObject(1714, 217.53944396973, 69.809532165527, 1004.0390625, 0, 0, 87.339508056641);
CreateObject(1714, 217.4326171875, 67.9482421875, 1004.0466308594, 0, 0, 85.352783203125);
CreateObject(1810, 219.89239501953, 67.944869995117, 1004.0390625, 0, 0, 268.68713378906);
CreateObject(1810, 219.87478637695, 67.354217529297, 1004.0466308594, 0, 0, 266.69860839844);
CreateObject(1810, 219.79431152344, 69.265258789063, 1004.0390625, 0, 0, 268.68713378906);
CreateObject(1810, 219.64195251465, 69.957206726074, 1004.0390625, 0, 0, 268.68713378906);
CreateObject(2165, 218.32716369629, 70.802474975586, 1004.0390625, 0, 0, 272.65869140625);
CreateObject(1738, 217.35038757324, 72.772407531738, 1004.6936645508, 0, 0, 0);
CreateObject(1738, 218.19621276855, 72.8203125, 1004.6936645508, 0, 0, 0);
CreateObject(1738, 218.1953125, 72.8203125, 1004.6936645508, 0, 0, 0);
CreateObject(1738, 218.1953125, 72.8203125, 1004.6936645508, 0, 0, 0);
CreateObject(1738, 218.15786743164, 65.796875, 1004.7012329102, 0, 0, 0);
CreateObject(1738, 217.32153320313, 65.796875, 1004.7012329102, 0, 0, 0);
CreateObject(2186, 221.6761932373, 72.27278137207, 1004.0390625, 0, 0, 272.66064453125);
CreateObject(1808, 221.73025512695, 68.600868225098, 1004.0390625, 0, 0, 272.66064453125);
CreateObject(914, 221.47946166992, 65.796875, 1007.426574707, 0, 0, 0);
CreateObject(2287, 217.59111022949, 69.071586608887, 1005.7413330078, 0, 0, 95.279357910156);
CreateObject(2282, 219.78063964844, 72.070472717285, 1006.164855957, 0, 0, 0);
CreateObject(2263, 217.91412353516, 72.329010009766, 1006.1842651367, 0, 0, 0);
CreateObject(2007, 219.59309387207, 72.30485534668, 1004.0390625, 0, 0, 0);
CreateObject(2000, 217.25735473633, 71.743576049805, 1004.0390625, 0, 0, 89.324493408203);
CreateObject(2164, 220.77944946289, 66.043258666992, 1004.1343994141, 0, 0, 179.36633300781);
CreateObject(2162, 221.49278259277, 66.867637634277, 1004.0390625, 0, 0, 91.309509277344);
CreateObject(2266, 218.93634033203, 66.630096435547, 1005.5022583008, 0, 0, 179.36633300781);
CreateObject(1722, 242.70434570313, 70.837554931641, 1002.640625, 0, 0, 272.65869140625);
CreateObject(1722, 242.68957519531, 69.889343261719, 1002.640625, 0, 0, 272.65869140625);
CreateObject(1722, 242.6936340332, 68.991287231445, 1002.640625, 0, 0, 272.65869140625);
CreateObject(1722, 242.63433837891, 68.123817443848, 1002.640625, 0, 0, 272.65869140625);
CreateObject(1722, 242.64768981934, 71.757141113281, 1002.7154541016, 0, 0, 272.65869140625);
CreateObject(2008, 218.35971069336, 68.968338012695, 1004.0390625, 0, 0, 272.65869140625);
CreateObject(2180, 216.47093200684, 74.390655517578, 1004.0390625, 0, 0, 0);
CreateObject(2180, 214.49609375, 74.3466796875, 1004.0390625, 0, 0, 0);
CreateObject(2180, 214.49609375, 74.3466796875, 1004.0390625, 0, 0, 0);
CreateObject(2222, 217.6531829834, 74.023597717285, 1004.9090576172, 0, 0, 0);
CreateObject(2222, 217.65234375, 74.0234375, 1004.9090576172, 0, 0, 0);
CreateObject(2222, 217.65234375, 74.0234375, 1004.9090576172, 0, 0, 0);
CreateObject(2222, 216.99728393555, 74.086898803711, 1004.9090576172, 0, 0, 0);
CreateObject(2222, 216.18524169922, 74.079681396484, 1004.9090576172, 0, 0, 0);
CreateObject(2342, 215.68174743652, 74.300170898438, 1004.9495239258, 0, 0, 0);
CreateObject(2425, 214.46815490723, 74.140327453613, 1004.8406982422, 0, 0, 175.39636230469);
CreateObject(2647, 216.6123046875, 74.4697265625, 1004.997253418, 0, 0, 0);
CreateObject(2647, 216.6123046875, 74.4697265625, 1004.997253418, 0, 0, 0);
CreateObject(2647, 215.42666625977, 74.731674194336, 0.126220703125, 0, 0, 0);
CreateObject(2647, 215.46063232422, 74.731674194336, 0.0821533203125, 0, 0, 0);
CreateObject(2275, 218.50712585449, 74.815551757813, 1005.6986694336, 0, 0, 187.30627441406);
CreateObject(2270, 221.37420654297, 74.334884643555, 1005.5025024414, 0, 0, 187.30627441406);
CreateObject(2258, 219.05821228027, 82.656921386719, 1006.310546875, 0, 0, 0);
CreateObject(2204, 214.5779876709, 82.876014709473, 1004.0390625, 0, 0, 0);
CreateObject(2210, 217.77435302734, 82.90625, 1004.75, 0, 0, 0);
CreateObject(2167, 222.02745056152, 77.657249450684, 1004.0390625, 0, 0, 270.67565917969);
CreateObject(2164, 213.95281982422, 78.794303894043, 1004.0390625, 0, 0, 91.309509277344);
CreateObject(2606, 213.69589233398, 79.197471618652, 1006.1394042969, 0, 0, 89.324340820313);
CreateObject(1723, 216.0244140625, 79.9599609375, 1004.0390625, 0, 0, 0);
CreateObject(2313, 216.12718200684, 78.59831237793, 1004.0390625, 0, 0, 0);
CreateObject(2342, 216.24681091309, 78.507522583008, 1004.647644043, 0, 0, 0);
CreateObject(2647, 216.75280761719, 78.789222717285, 1004.6953735352, 0, 0, 0);
CreateObject(2768, 217.7953338623, 78.454658508301, 1004.5811157227, 0, 0, 0);
CreateObject(16155, 213.99543762207, 72.851417541504, 1006.2590332031, 0, 0, 7.93994140625);
CreateObject(1742, 220.21875, 73.92163848877, 1004.0390625, 0, 0, 179.36633300781);
CreateObject(2609, 221.83352661133, 81.193214416504, 1004.7707519531, 0, 0, 270.67565917969);
CreateObject(1782, 216.7346496582, 82.393005371094, 1005.908996582, 0, 0, 0);
CreateObject(633, 221.75173950195, 82.358924865723, 1005.0329589844, 0, 0, 0);
CreateObject(1723, 216.0244140625, 79.9599609375, 1004.0390625, 0, 0, 0);
CreateObject(1806, 240.62330627441, 82.083709716797, 1004.0390625, 0, 0, 187.30627441406);
CreateObject(1806, 235.31723022461, 82.198760986328, 1004.0390625, 0, 0, 175.39636230469);
CreateObject(1998, 255.79385375977, 86.435424804688, 1001.4453125, 0, 0, 0);
CreateObject(1998, 255.79296875, 86.4345703125, 1001.4453125, 0, 0, 0);
CreateObject(1998, 257.51614379883, 87.447708129883, 1001.4453125, 0, 0, 270.67565917969);
CreateObject(2165, 255.76614379883, 84.500152587891, 1001.4453125, 0, 0, 89.324493408203);
CreateObject(2165, 255.75494384766, 83.036682128906, 1001.4453125, 0, 0, 89.324340820313);
CreateObject(1714, 257.0954284668, 83.667007446289, 1001.4453125, 0, 0, 274.64562988281);
CreateObject(1714, 257.0947265625, 83.6669921875, 1001.4453125, 0, 0, 274.64172363281);
CreateObject(1714, 257.08764648438, 85.197631835938, 1001.4453125, 0, 0, 274.64172363281);
CreateObject(1714, 256.60641479492, 86.014312744141, 1001.4453125, 0, 0, 189.28723144531);
CreateObject(1714, 257.45602416992, 86.628662109375, 1001.4453125, 0, 0, 94.003845214844);
CreateObject(1808, 251.35433959961, 82.003402709961, 1001.4453125, 0, 0, 183.33630371094);
CreateObject(1721, 255.96983337402, 89.065742492676, 1001.4453125, 0, 0, 181.35131835938);
CreateObject(1721, 253.83380126953, 85.679588317871, 1001.4453125, 0, 0, 268.68701171875);
CreateObject(1721, 253.92071533203, 83.506950378418, 1001.4453125, 0, 0, 268.681640625);
CreateObject(1721, 257.75357055664, 89.276229858398, 1001.4453125, 0, 0, 181.35131835938);
CreateObject(2277, 256.9150390625, 87.0322265625, 1000.9890136719, 0, 0, 0);
CreateObject(2266, 258.36196899414, 85.518272399902, 1003.3870239258, 0, 0, 276.63061523438);
CreateObject(2269, 258.16470336914, 84.175971984863, 1003.1507568359, 0, 0, 276.63061523438);
CreateObject(2277, 258.36346435547, 83.077629089355, 1003.2290039063, 0, 0, 264.720703125);
CreateObject(1738, 258.26782226563, 81.8359375, 1002.1063232422, 0, 0, 0);
CreateObject(1738, 257.34539794922, 81.8359375, 1002.0999145508, 0, 0, 0);
CreateObject(1738, 251.38076782227, 91.8359375, 1002.0999145508, 0, 0, 0);
CreateObject(1738, 252.23294067383, 91.8359375, 1002.0999145508, 0, 0, 0);
CreateObject(2202, 253.35380554199, 91.322906494141, 1001.4453125, 0, 0, 0);
CreateObject(1369, 1177.0207519531, -1319.6312255859, 13.671961784363, 0, 0, 41.684783935547);
CreateObject(1369, 1177.0205078125, -1319.630859375, 13.671961784363, 0, 0, 41.68212890625);
CreateObject(1369, 1177.0278320313, -1328.021484375, 13.672311782837, 0, 0, 121.08178710938);
CreateObject(1228, 1406.0334472656, -1450.0294189453, 12.97581577301, 0, 0, 91.309509277344);
CreateObject(1228, 1403.1373291016, -1450.0972900391, 12.97581577301, 0, 0, 91.307373046875);
CreateObject(1228, 1399.7432861328, -1450.0013427734, 12.97581577301, 0, 0, 91.307373046875);
CreateObject(1228, 1396.7375488281, -1449.9310302734, 12.97581577301, 0, 0, 91.307373046875);
CreateObject(1237, 1404.5361328125, -1450.1815185547, 12.5546875, 0, 0, 0);
CreateObject(1237, 1398.4517822266, -1449.8959960938, 12.5546875, 0, 0, 0);
CreateObject(1237, 1401.2808837891, -1450.0671386719, 12.5546875, 0, 0, 0);
CreateObject(1228, 1355.3205566406, -1619.8342285156, 13.003360748291, 0, 0, 270.27026367188);
CreateObject(1228, 1359.5767822266, -1620.0908203125, 12.995441436768, 0, 0, 270.26904296875);
CreateObject(1228, 1359.576171875, -1620.0908203125, 12.995441436768, 0, 0, 270.263671875);
CreateObject(1228, 1364.0345458984, -1620.0183105469, 12.977780342102, 0, 0, 270.263671875);
CreateObject(1237, 1362.0302734375, -1620.2489013672, 12.562469482422, 0, 0, 0);
CreateObject(1237, 1357.5869140625, -1619.9896240234, 12.575551986694, 0, 0, 0);
CreateObject(1228, 1363.3269042969, -1682.8969726563, 12.977271080017, 0, 0, 270.27026367188);
CreateObject(1228, 1359.6839599609, -1682.6971435547, 12.996294021606, 0, 0, 270.26916503906);
CreateObject(1228, 1355.9147949219, -1682.6577148438, 13.015690803528, 0, 0, 270.26916503906);
CreateObject(1237, 1361.4454345703, -1682.7528076172, 12.56603717804, 0, 0, 0);
CreateObject(1237, 1358.0874023438, -1682.6494140625, 12.583435058594, 0, 0, 0);
CreateObject(1228, 1578.6658935547, -1746.6597900391, 12.96800327301, 0, 0, 0);
CreateObject(1228, 1579.0975341797, -1751.8802490234, 12.96800327301, 0, 0, 0);
CreateObject(1228, 1578.9812011719, -1759.9071044922, 12.957134246826, 0, 0, 0);
CreateObject(1228, 1579.263671875, -1755.82421875, 12.960708618164, 0, 0, 0);
CreateObject(1237, 1579.1518554688, -1749.2457275391, 12.546875, 0, 0, 0);
CreateObject(1237, 1579.3048095703, -1753.7982177734, 12.546875, 0, 0, 0);
CreateObject(1237, 1579.4471435547, -1758.2214355469, 12.53697013855, 0, 0, 0);
CreateObject(7894, 1723.5192871094, -1854.6636962891, 12.974678039551, 0, 0, 262.73571777344);
CreateObject(7894, 1723.5185546875, -1854.6630859375, 12.974678039551, 0, 0, 262.72705078125);
CreateObject(1228, 1355.2243652344, -1723.3304443359, 13.00643825531, 0, 0, 270.26916503906);
CreateObject(1228, 1362.4879150391, -1723.0783691406, 12.960202217102, 0, 0, 270.26916503906);
CreateObject(1228, 1359.0710449219, -1723.0352783203, 12.968864440918, 0, 0, 270.26916503906);
CreateObject(1237, 1357.1776123047, -1723.2941894531, 12.5662317276, 0, 0, 0);
CreateObject(1237, 1360.9827880859, -1722.6619873047, 12.539073944092, 0, 0, 0);
CreateObject(1228, 1367.083984375, -1592.6206054688, 12.96800327301, 0, 0, 256.36877441406);
CreateObject(1228, 1363.0701904297, -1591.4989013672, 12.96800327301, 0, 0, 256.36596679688);
CreateObject(1228, 1358.9644775391, -1590.3542480469, 12.96800327301, 0, 0, 256.36596679688);
CreateObject(1228, 1363.0661621094, -1574.0275878906, 12.96800327301, 0, 0, 256.36596679688);
CreateObject(1228, 1367.8289794922, -1575.1293945313, 12.96800327301, 0, 0, 256.36596679688);
CreateObject(1228, 1372.1928710938, -1576.0953369141, 12.96800327301, 0, 0, 256.36596679688);
CreateObject(1237, 1364.9354248047, -1592.1787109375, 12.546875, 0, 0, 0);
CreateObject(1237, 1360.9736328125, -1590.8039550781, 12.546875, 0, 0, 0);
CreateObject(1237, 1365.4322509766, -1574.4180908203, 12.546875, 0, 0, 0);
CreateObject(1237, 1370.2060546875, -1575.1196289063, 12.546875, 0, 0, 0);
CreateObject(1997, 1182.7219238281, -1319.9833984375, 12.577785491943, 0, 0, 59.549682617188);
CreateObject(1257, 1212.0308837891, -1314.7440185547, 13.836054801941, 0, 0, 0);
CreateObject(1257, 1212.2506103516, -1349.7225341797, 13.852411270142, 0, 0, 0);
CreateObject(1257, 1247.5681152344, -1313.1875, 13.671581268311, 0, 0, 181.35131835938);
CreateObject(1257, 1248.1053466797, -1350.4857177734, 13.67594909668, 0, 0, 181.35131835938);
CreateObject(1346, 1215.3956298828, -1292.6096191406, 13.895927429199, 0, 0, 0);
CreateObject(1349, 1346.5771484375, -1755.1052246094, 12.923557281494, 0, 0, 21.834838867188);
CreateObject(1349, 1354.5424804688, -1755.4686279297, 12.926765441895, 0, 0, 21.829833984375);
CreateObject(1349, 1348.5244140625, -1757.3724365234, 13.078197479248, 0, 0, 55.574645996094);
CreateObject(640, 1201.0860595703, -1382.3482666016, 12.931903839111, 0, 0, 0);
CreateObject(640, 1201.1531982422, -1375.3664550781, 12.960651397705, 0, 0, 0);
CreateObject(640, 1201.1794433594, -1371.4805908203, 12.988828659058, 0, 0, 0);
CreateObject(640, 1201.1735839844, -1366.8433837891, 13.014548301697, 0, 0, 0);
CreateObject(640, 1201.1949462891, -1362.6506347656, 13.037198066711, 0, 0, 0);
CreateObject(640, 1201.1981201172, -1358.2985839844, 13.072381973267, 0, 0, 0);
CreateObject(640, 1201.1700439453, -1353.2976074219, 13.099208831787, 0, 0, 0);
CreateObject(640, 1201.162109375, -1349.8527832031, 13.09836769104, 0, 0, 0);
CreateObject(640, 1201.1636962891, -1345.4885253906, 13.097100257874, 0, 0, 0);
CreateObject(640, 1201.1655273438, -1340.2510986328, 13.096124649048, 0, 0, 0);
CreateObject(640, 1201.115234375, -1377.8211669922, 12.953318595886, 0, 0, 0);
CreateObject(640, 1201.1591796875, -1335.0074462891, 13.095471382141, 0, 0, 0);
CreateObject(640, 1201.1550292969, -1330.8959960938, 13.095471382141, 0, 0, 0);
CreateObject(640, 1201.1173095703, -1327.6379394531, 13.095471382141, 0, 0, 0);
CreateObject(640, 1201.1052246094, -1322.3294677734, 13.095471382141, 0, 0, 0);
CreateObject(640, 1201.1135253906, -1317.2390136719, 13.095471382141, 0, 0, 0);
CreateObject(640, 1201.0853271484, -1312.0030517578, 13.095471382141, 0, 0, 0);
CreateObject(640, 1201.0704345703, -1306.8604736328, 13.088293075562, 0, 0, 0);
CreateObject(640, 1201.0705566406, -1301.7711181641, 13.084393501282, 0, 0, 0);
CreateObject(640, 1201.0877685547, -1297.0084228516, 13.080669403076, 0, 0, 0);
CreateObject(640, 1201.1038818359, -1293.9593505859, 13.078519821167, 0, 0, 0);
CreateObject(982, 1534.8203125, -1694.36328125, 13.066367149353, 0, 0, 0.2471923828125);
CreateObject(638, 1537.8818359375, -1665.8046875, 13.243908882141, 0, 0, 0);
CreateObject(638, 1537.8773193359, -1672.7238769531, 13.243908882141, 0, 0, 0);
CreateObject(638, 1537.8963623047, -1679.7998046875, 13.243908882141, 0, 0, 0);
CreateObject(878, 1546.865234375, -1662.2060546875, 14.715025901794, 0, 0, 0);
CreateObject(1364, 1513.0858154297, -1678.9190673828, 13.830996513367, 0, 0, 131.00952148438);
CreateObject(1364, 1513.0555419922, -1669.3742675781, 13.830996513367, 0, 0, 49.619750976563);
CreateObject(1597, 1495.3583984375, -1749.1187744141, 17.054271697998, 0, 0, 270.67565917969);
CreateObject(1597, 1466.2655029297, -1749.3354492188, 17.029256820679, 0, 0, 90.026458740234);
CreateObject(4882, 1529.4306640625, -1644.5048828125, 17.248348236084, 0, 0, 270.66467285156);
CreateObject(1257, 1523.3485107422, -1676.6818847656, 13.826066970825, 0, 0, 179.36279296875);
CreateObject(1231, 1543.404296875, -1669.2756347656, 15.286781311035, 0, 0, 270.67565917969);
CreateObject(1231, 1543.2532958984, -1682.0213623047, 15.286554336548, 0, 0, 270.67565917969);
CreateObject(1215, 1538.0928955078, -1669.2442626953, 13.111198425293, 0, 0, 0);
CreateObject(1215, 1538.0461425781, -1676.4141845703, 13.111198425293, 0, 0, 0);
CreateObject(7092, 1553.6220703125, -1692.3857421875, 23.843433380127, 0, 0, 358.01147460938);
CreateObject(3657, 1510.5672607422, -1673.9591064453, 13.56508731842, 0, 0, 90.181274414063);
CreateObject(878, 1546.865234375, -1662.2060546875, 14.715025901794, 0, 0, 0);
CreateObject(878, 1546.498046875, -1688.294921875, 14.715006828308, 0, 0, 0);
CreateObject(3115, 1566.9248046875, -1646.2998046875, 28.290950775146, 0, 0, 359.49743652344);
CreateObject(3934, 1566.5711669922, -1646.5231933594, 28.604648590088, 0, 0, 0);
CreateObject(8407, 1517.9366455078, -1664.5113525391, 14.022242546082, 0, 0, 0);
CreateObject(970, 1508.4260253906, -1665.5783691406, 13.098356246948, 0, 0, 0);
CreateObject(970, 1520.8793945313, -1663.5657958984, 13.098356246948, 0, 0, 0);
CreateObject(970, 1516.8815917969, -1665.5224609375, 13.098356246948, 0, 0, 0);
CreateObject(970, 1512.6796875, -1665.560546875, 13.098356246948, 0, 0, 0);
CreateObject(973, 1240.7412109375, -1928.20703125, 31.16166305542, 0, 0, 278.61169433594);
CreateObject(973, 1241.1640625, -1918.0439453125, 31.149658203125, 0, 0, 258.75549316406);
CreateObject(3749, 1291.658203125, -2056.7109375, 63.488792419434, 0, 0, 268.68713378906);
CreateObject(7921, 1283.0065917969, -2004.4693603516, 59.216156005859, 0, 0, 359.99975585938);
CreateObject(7922, 1243.5802001953, -2064.1657714844, 60.472732543945, 0, 0, 89.055450439453);
CreateObject(7191, 1283.3427734375, -2028.1533203125, 59.663383483887, 0, 0, 0);
CreateObject(7191, 1259.1279296875, -2002.93359375, 60.36791229248, 1.1099853515625, 0, 90);
CreateObject(7922, 1239.6728515625, -2003.6298828125, 60.375518798828, 0, 0, 0);
CreateObject(7191, 1194.1396484375, -2071.5830078125, 69.982490539551, 0, 0, 270.18420410156);
CreateObject(7191, 1149.763671875, -2001.6085205078, 69.982490539551, 0, 0, 269.92016601563);
CreateObject(7191, 1149.6350097656, -2071.6030273438, 69.982490539551, 0, 0, 269.93408203125);
CreateObject(7191, 1193.3206787109, -2001.5538330078, 69.982490539551, 0, 0, 270.1796875);
CreateObject(7894, 1244.5533447266, -2055.2485351563, 59.435157775879, 0, 0, 268.70373535156);
CreateObject(7191, 1267.2159423828, -2065.3283691406, 59.80961227417, 359, 1, 268.44067382813);
CreateObject(1215, 1207.8093261719, -2039.9915771484, 68.572135925293, 0, 0, 0);
CreateObject(1215, 1201.2855224609, -2040.0383300781, 68.572135925293, 0, 0, 0);
CreateObject(1215, 1191.9106445313, -2040.0245361328, 68.572135925293, 0, 0, 0);
CreateObject(1215, 1210.4351806641, -2040.8916015625, 68.564933776855, 0, 0, 0);
CreateObject(1215, 1201.4924316406, -2033.9228515625, 68.572135925293, 0, 0, 0);
CreateObject(1215, 1207.8137207031, -2033.9610595703, 68.572135925293, 0, 0, 0);
CreateObject(1215, 1210.337890625, -2033.12109375, 68.572135925293, 0, 0, 0);
CreateObject(1215, 1196.3876953125, -2033.8819580078, 68.572135925293, 0, 0, 0);
CreateObject(1215, 1185.4970703125, -2033.9423828125, 68.572135925293, 0, 0, 0);
CreateObject(1215, 1196.3117675781, -2040.0490722656, 68.572135925293, 0, 0, 0);
CreateObject(1215, 1191.9609375, -2033.90625, 68.572135925293, 0, 0, 0);
CreateObject(1215, 1185.4365234375, -2040.0649414063, 68.572135925293, 0, 0, 0);
CreateObject(1215, 1168.5987548828, -2045.7742919922, 68.572135925293, 0, 0, 0);
CreateObject(1215, 1181.328125, -2028.2080078125, 68.572135925293, 0, 0, 0);
CreateObject(1215, 1181.32421875, -2045.7861328125, 68.572135925293, 0, 0, 0);
CreateObject(1215, 1168.5814208984, -2028.2287597656, 68.564933776855, 0, 0, 0);
CreateObject(1215, 1164.5211181641, -2033.9459228516, 68.572135925293, 0, 0, 0);
CreateObject(1215, 1164.578125, -2040.0794677734, 68.572135925293, 0, 0, 0);
CreateObject(1215, 1156.6826171875, -2033.8735351563, 68.572135925293, 0, 0, 0);
CreateObject(1215, 1137.4006347656, -2033.8533935547, 68.572135925293, 0, 0, 0);
CreateObject(1215, 1149.595703125, -2033.8636474609, 68.572135925293, 0, 0, 0);
CreateObject(1215, 1143.6220703125, -2033.84375, 68.572135925293, 0, 0, 0);
CreateObject(1215, 1130.9527587891, -2030.3491210938, 68.572135925293, 0, 0, 0);
CreateObject(1215, 1137.4296875, -2040.21875, 68.572135925293, 0, 0, 0);
CreateObject(1215, 1130.962890625, -2043.666015625, 68.572135925293, 0, 0, 0);
CreateObject(1215, 1143.6666259766, -2040.1036376953, 68.572135925293, 0, 0, 0);
CreateObject(1215, 1149.6374511719, -2040.0888671875, 68.572135925293, 0, 0, 0);
CreateObject(1215, 1156.7365722656, -2040.0999755859, 68.572135925293, 0, 0, 0);
CreateObject(3506, 1271.7362060547, -2048.1437988281, 58.315093994141, 0, 0, 0);
CreateObject(3506, 1256.3917236328, -2047.5389404297, 58.722290039063, 0, 0, 201.73425292969);
CreateObject(3877, 1237.98046875, -2033.30078125, 61.696990966797, 0, 0, 0);
CreateObject(3877, 1213.4989013672, -2033.3225097656, 69.666603088379, 0, 0, 0);
CreateObject(3877, 1226.7628173828, -2040.7750244141, 65.892303466797, 0, 0, 0);
CreateObject(3877, 1231.376953125, -2040.73828125, 63.790740966797, 0, 0, 0);
CreateObject(3877, 1237.9443359375, -2040.73828125, 61.696990966797, 0, 0, 0);
CreateObject(3877, 1227.1474609375, -2033.7971191406, 1.8244705200195, 0, 0, 0);
CreateObject(3877, 1231.3818359375, -2033.2626953125, 63.790740966797, 0, 0, 0);
CreateObject(3877, 1226.7973632813, -2033.3156738281, 65.892303466797, 0, 0, 0);
CreateObject(3877, 1218.2481689453, -2033.2659912109, 67.986053466797, 0, 0, 0);
CreateObject(3877, 1218.203125, -2040.767578125, 67.986053466797, 0, 0, 0);
CreateObject(3877, 1213.5009765625, -2040.6982421875, 69.673553466797, 0, 0, 0);
CreateObject(3932, 1391.0629882813, -1812.7138671875, 10.872480392456, 0, 0, 179.63232421875);
CreateObject(3932, 1387.1882324219, -1812.7166748047, 10.872480392456, 0, 0, 0.265625);
CreateObject(3932, 1245.2789306641, -2068.2980957031, 60.863983154297, 0, 0, 179.63305664063);
CreateObject(973, 1240.8121337891, -2071.5090332031, 59.836803436279, 0, 0, 359.73974609375);
CreateObject(973, 1288.115234375, -2046.8659667969, 58.736194610596, 0, 2, 359.25146484375);
CreateObject(982, 1534.8216552734, -1651.2001953125, 13.066367149353, 0, 0, 0);
CreateObject(12961, 1021.4283447266, -2161.3503417969, 38.646099090576, 6, 10, 211.12609863281);
CreateObject(9339, 1700.6420898438, -1882.5798339844, 13.26927947998, 0, 0, 0.9849853515625);
CreateObject(9339, 1700.4422607422, -1856.5289306641, 13.261086463928, 0, 0, 0);
CreateObject(970, 1699.6048583984, -1838.5030517578, 13.095963478088, 0, 0, 89.324493408203);
CreateObject(997, 1965.5336914063, -2244.330078125, 12.546875, 0, 0, 0);
CreateObject(997, 1962.4943847656, -2207.1391601563, 12.546875, 0, 0, 0);


//--------------------------[FBI Objects]---------------------------------------
    CreateStreamObject(2634,253.1996,125.2256,1003.2200,0,0,90);//vault
    CreateStreamObject(1649,215.4664,122.5168,1003.2250,0,0,0);//Glass Wall A1
    CreateStreamObject(1649,215.4664,122.5168,1003.2250,0,0,180);//Glass Wall B1
    CreateStreamObject(1649,215.4664,122.5168,1003.2250,0,0,180);//Glass Wall B2
    CreateStreamObject(1649,215.4664,122.5168,1003.2250,0,0,180);//Glass Wall B3
    CreateStreamObject(1649,215.4664,122.5168,1003.2250,0,0,180);//Glass Wall B4
    CreateStreamObject(1649,215.4664,122.5168,1003.2250,0,0,180);//Glass Wall B5
//------------------------------------------------------------------------------
    CreateStreamObject(975,2521.9355,-1301.7913,1048.2891,0,0,90); //gate behind a door
    CreateStreamObject(975,2577.7200,-1305.5848,1037.7734,0,0,90); //gate behind a door
    CreateStreamObject(975,2577.3125,-1284.8556,1054.6406,0,0,90); //gate behind a door
    CreateStreamObject(975,2561.1111,-1290.5244,1054.6406,0,0,0); //gate behind a door
    CreateStreamObject(975,2543.9431,-1304.9346,1054.6406,0,0,90); //gate behind a door
    CreateStreamObject(975,2521.9053,-1285.9021,1054.6406,0,0,90); //gate behind a door
    CreateStreamObject(1500,2278.8599,-1140.4896,1049.7884,0,0,90); //Toilet Door
    CreateStreamObject(14819,2278.5599,-1138.8896,1050.9984,0,0,90); //Toilet Door
    CreateStreamObject(3968,-1827.924560,5.411730,1061.143554,0.000000,0.000000,179.354736); //INSIDE SFPD 5
    CreateStreamObject(7927,1240.6016,-833.6031,1084.2678,0.000000,0.000000,0);//Surrenos HQ
    CreateStreamObject(7927,1280.4507,-789.1681,1084.2578,0.000000,0.000000,0);//Madd dog crib
    //CreateStreamObject(971,1025.2795,-1029.2299,32.1016,-0.00000,0.000000,0); // Pay & Spray
    //CreateStreamObject(971,488.2341,-1735.4591,11.1416,-0.00000,0.000000,174); // Pay & Spray
    //CreateStreamObject(971,2071.5410,-1831.4143,13.5469,-0.00000,0.000000,90); // Pay & Spray
    //CreateStreamObject(971,719.8199,-462.4768,16.3359,-0.00000,0.000000,0); // Pay & Spray
    //CreateStreamObject(971,-1904.4561,277.8578,41.0469,-0.00000,0.000000,0); // Pay & Spray
	CreateStreamObject(7927,1251.8077,-789.1934,1084.2578,0.000000,0.000000,180);//Madd dog crib
    CreateStreamObject(982,1306.9628,-1698.1549,13.2616,0.000000,0.000000,0);
    CreateStreamObject(982,1306.9628,-1723.6549,13.2616,0.000000,0.000000,0);
    CreateStreamObject(982,1306.9628,-1749.1549,13.2616,0.000000,0.000000,0);
    CreateStreamObject(982,1306.9628,-1774.6549,13.2616,0.000000,0.000000,0);
    CreateStreamObject(982,1306.9628,-1800.1549,13.2616,0.000000,0.000000,0);
    CreateStreamObject(982,1306.9628,-1825.6549,13.2616,0.000000,0.000000,0);
    CreateStreamObject(982,1302.9628,-1698.1549,13.2616,0.000000,0.000000,0);
    CreateStreamObject(982,1302.9628,-1723.6549,13.2616,0.000000,0.000000,0);
    CreateStreamObject(982,1302.9628,-1749.1549,13.2616,0.000000,0.000000,0);
    CreateStreamObject(982,1302.9628,-1774.6549,13.2616,0.000000,0.000000,0);
    CreateStreamObject(982,1302.9628,-1800.1549,13.2616,0.000000,0.000000,0);
    CreateStreamObject(982,1302.9628,-1825.6549,13.2616,0.000000,0.000000,0);
    CreateStreamObject(982,1843.7987,-1060.0609,24.6233,0.000000,0.000000,0);
    CreateStreamObject(982,1843.7987,-1034.5609,24.6233,0.000000,0.000000,0);
    CreateStreamObject(982,1843.7987,-1060.0609,25.9233,0.000000,0.000000,0);
    CreateStreamObject(982,1843.7987,-1034.5609,25.9233,0.000000,0.000000,0);
    CreateStreamObject(982,2195.1638,-1675.1587,14.1281,-2.40000,0.000000,167.2);
    CreateStreamObject(982,2191.3289,-1700.5039,13.3520,-0.80000,0.000000,175.2);
    CreateStreamObject(982,2218.1638,-1675.1587,14.3281,-2.60000,0.000000,167.2);
    CreateStreamObject(982,2213.5789,-1700.0039,13.5520,-0.80000,0.000000,172.3);
    CreateStreamObject(7927,366.4987,189.7234,1008.6103,-0.00000,0.000000,90); // ABC Studio
    CreateStreamObject(7927,371.6472,179.1361,1014.4075,-0.00000,0.000000,270); // LA Yellow Cab Co.
    CreateStreamObject(994,1544.4385,-1617.5925,12.5046,-0.00000,0.000000,270);
    CreateStreamObject(994,1544.4385,-1632.7525,12.5046,-0.00000,0.000000,270);
    CreateStreamObject(982,2390.9143,-1742.1371,13.0469,0.000000,0.000000,90);
    CreateStreamObject(982,2365.4143,-1742.1371,13.0469,0.000000,0.000000,90);
    CreateStreamObject(982,2339.9143,-1742.1371,13.0469,0.000000,0.000000,90);
    CreateStreamObject(1798,346.7344,165.5153,1013.1875,0.000000,0.000000,270); // Bed
    CreateStreamObject(1798,346.7344,163.0153,1013.1875,0.000000,0.000000,270); // Bed
    CreateStreamObject(1798,346.7344,160.5153,1013.1875,0.000000,0.000000,270); // Bed
    CreateStreamObject(7927,345.7073,157.3066,1014.4075,-0.00000,0.000000,90); // Wound hospital
    CreateStreamObject(1676,1007.3336,-936.4127,42.7581,-0.00000,0.000000,5); // Gas tank in Vinewood
    CreateStreamObject(1676,1000.6406,-937.1027,42.7581,-0.00000,0.000000,5); // Gas tank in Vinewood

// -----------------------------------
    CreateStreamObject(868,2129.989746,-1874.795410,13.030902,0.000000,0.000000,441.567535);
    CreateStreamObject(2913,2137.463378,-1871.320678,12.667078,0.000000,-90.000000,178.302536);
    CreateStreamObject(2628,2135.050537,-1871.424682,12.609012,0.000000,0.000000,179.394439);
    CreateStreamObject(2629,2137.531250,-1868.603637,12.555583,0.000000,0.000000,268.795959);
    CreateStreamObject(2915,2133.901123,-1868.338378,12.625775,0.000000,0.000000,267.210601);
    CreateStreamObject(2916,2137.316650,-1867.199707,12.626094,0.000000,0.000000,235.606948);
    CreateStreamObject(1462,2108.080566,-1869.768676,12.519778,0.000000,0.000000,89.775222);
    CreateStreamObject(1433,2145.340087,-1871.202148,12.731196,0.000000,0.000000,178.470077);
    CreateStreamObject(2804,2145.519775,-1871.188964,13.296928,0.000000,0.000000,157.182952);
    CreateStreamObject(1484,2145.078857,-1871.115478,13.405392,-12.000000,29.000000,177.657424);
    CreateStreamObject(1486,2145.220458,-1871.405395,13.381085,0.000000,0.000000,195.867065);
    CreateStreamObject(1546,2145.007568,-1871.349243,13.313018,0.000000,0.000000,200.086166);
    CreateStreamObject(1334,2125.281982,-1874.196289,13.367449,0.000000,0.000000,361.174499);
    CreateStreamObject(955,2142.303710,-1863.819458,13.058805,0.000000,-90.000000,0.950527);
    CreateStreamObject(1302,2143.300292,-1863.505859,12.486577,-15.000000,0.000000,357.529937);
    CreateStreamObject(923,2107.990966,-1872.676635,13.425848,0.000000,0.000000,89.753120);
    CreateStreamObject(933,2115.851562,-1869.437255,12.523773,0.000000,0.000000,77.710197);//
    CreateStreamObject(933,2122.397460,-1869.411132,12.532304,0.000000,0.000000,186.313583);
    CreateStreamObject(944,2159.270996,-1864.647583,13.419299,0.000000,0.000000,269.439758);
    CreateStreamObject(944,2159.235595,-1867.675781,13.419299,0.000000,0.000000,269.439758);
    CreateStreamObject(944,2159.192626,-1870.772338,13.419299,0.000000,0.000000,269.439758);
    CreateStreamObject(1372,2100.133544,-1867.964233,12.661389,0.000000,0.000000,180.357421);
    CreateStreamObject(1315,2119.266601,-1874.093994,15.627696,0.000000,0.000000,271.771362);
    CreateStreamObject(1315,2103.990478,-1868.730468,16.095603,0.000000,0.000000,6.734466);
    CreateStreamObject(1303,2151.112548,-1865.054931,13.553890,0.000000,0.000000,95.638008);
    CreateStreamObject(1451,2129.070800,-1863.248413,13.375560,0.000000,0.000000,0.254714);
    CreateStreamObject(2114,2141.250732,-1863.694946,13.787945,0.000000,0.000000,52.141628);
    CreateStreamObject(1460,2129.525390,-1876.668457,16.324026,-55.000000,-91.000000,269.034912);
    CreateStreamObject(5269,2112.052246,-1866.301879,13.546875,0.000000,0.000000,2.508964);
    CreateStreamObject(5269,2112.485351,-1876.406616,13.546875,0.000000,0.000000,2.508964);
    CreateStreamObject(3265,2091.543212,-1868.913330,12.466016,0.000000,0.000000,265.756835);
    CreateStreamObject(1473,2095.457763,-1863.866088,13.425724,36.000000,0.000000,0.879031);
    CreateStreamObject(1497,2110.984130,-1864.980834,13.914264,-22.000000,90.000000,269.521881);
    CreateStreamObject(1295,2141.174804,-1872.536743,13.553890,0.000000,0.000000,48.962463);
    CreateStreamObject(1492,2091.812011,-1863.636474,12.488705,0.000000,0.000000,267.749847);
    CreateStreamObject(969,2091.745605,-1873.954101,11.835894,0.000000,0.000000,89.181465);
	//autre
    CreateStreamObject(2942,-32.276363,-57.995586,1003.139953,0.000000,0.000000,179.915054);//247atm
	//ATMs
	CreateStreamObject(2781,1346.3905,-1759.6039,13.5156,90.000000,0.000000,180);
	CreateStreamObject(2781,1592.4655,-2335.9408,13.5401,90.000000,0.000000,180);
	CreateStreamObject(2781,2308.8717,-1634.4462,14.8270,90.000000,0.000000,270);
	CreateStreamObject(2781,2865.3170,-1415.3429,11.0010,90.000000,0.000000,90);
	CreateStreamObject(2781,2403.9879,-1229.8441,23.8288,90.000000,0.000000,90);
	CreateStreamObject(2781,1172.4888,-1328.9683,15.4048,90.000000,0.000000,180);


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    CreateStreamObject(1237, 617.835083, -1400.201538, 12.393687, 0.0000, 0.0000, 0.0000);
    CreateStreamObject(1237, 632.592957, -1415.122559, 12.388738, 0.0000, 0.0000, 0.0000);
    CreateStreamObject(1237, 647.684326, -1400.452881, 12.401650, 0.0000, 0.0000, 0.0000);
    CreateStreamObject(1237, 632.515259, -1384.692505, 12.564062, 0.0000, 0.0000, 0.0000);
    CreateStreamObject(1237, 643.945435, -1388.439819, 12.512034, 0.0000, 0.0000, 0.0000);
    CreateStreamObject(1237, 644.166687, -1412.008911, 12.506663, 0.0000, 0.0000, 0.0000);
    CreateStreamObject(1237, 620.475586, -1411.237427, 12.341917, 0.0000, 0.0000, 0.0000);
    CreateStreamObject(1237, 621.401550, -1388.294067, 12.370151, 0.0000, 0.0000, 11.2520);
    CreateStreamObject(11484, 632.357849, -1400.902588, -16.579361, 0.0000, 0.0000, 0.0000);
    CreateStreamObject(3515, 632.411560, -1401.009766, 17.074978, 0.0000, 0.0000, 0.0000);
    CreateStreamObject(1318, 624.195557, -1403.588257, 12.269607, 0.0000, 269.7591, 292.4998);
    CreateStreamObject(1318, 624.415588, -1398.014648, 12.280883, 0.0000, 269.7591, 247.4997);
    CreateStreamObject(1318, 627.032959, -1394.341919, 12.269988, 0.0000, 269.7591, 213.7525);
    CreateStreamObject(1318, 632.175537, -1392.596436, 12.260584, 0.0000, 269.7591, 179.9996);
    CreateStreamObject(1318, 637.007324, -1393.903687, 12.369095, 0.0000, 269.7591, 146.2524);
    CreateStreamObject(1318, 640.428223, -1398.612183, 12.387256, 0.0000, 269.7591, 112.4994);
    CreateStreamObject(1318, 640.346924, -1404.024658, 12.419621, 0.0000, 269.7591, 67.4993);
    CreateStreamObject(1318, 637.568970, -1407.637573, 12.399887, 0.0000, 269.7591, 44.9993);
    CreateStreamObject(1318, 632.098145, -1409.084351, 12.294910, 0.0000, 269.7591, 0.0000);
    CreateStreamObject(1318, 626.897583, -1407.864258, 12.307085, 0.0000, 269.7591, 326.2528);

 ///////////////////////////////////RALENTISSEUR A GLEN PARK/////////////////////////////////////////
 CreateStreamObject(3594, 1871.7536621094, -1094.5729980469, 23.287425994873, 0, 0, 0);
CreateStreamObject(1238, 1871.5430908203, -1084.4625244141, 22.981781005859, 0, 0, 0);
CreateStreamObject(1238, 1870.1130371094, -1087.3361816406, 22.979677200317, 0, 0, 0);
CreateStreamObject(1238, 1871.2158203125, -1085.0810546875, 22.981327056885, 0, 0, 0);
CreateStreamObject(1238, 1870.73828125, -1085.9853515625, 22.980665206909, 0, 0, 0);
CreateStreamObject(1238, 1869.2980957031, -1089.0598144531, 22.978414535522, 0, 0, 0);
CreateStreamObject(1238, 1868.8251953125, -1090.4544677734, 22.977392196655, 0, 0, 0);
CreateStreamObject(1238, 1868.5954589844, -1095.8743896484, 22.974430084229, 0, 0, 0);
CreateStreamObject(1238, 1868.6401367188, -1091.7279052734, 22.974430084229, 0, 0, 0);
CreateStreamObject(1238, 1868.6748046875, -1093.162109375, 22.974430084229, 0, 0, 0);
CreateStreamObject(1238, 1868.626953125, -1094.6416015625, 22.974430084229, 0, 0, 0);
CreateStreamObject(1238, 1869.4523925781, -1099.7384033203, 22.974430084229, 0, 0, 0);
CreateStreamObject(1238, 1868.6322021484, -1097.1649169922, 22.974430084229, 0, 0, 0);
CreateStreamObject(1238, 1870.0219726563, -1100.5960693359, 22.974430084229, 0, 0, 0);
CreateStreamObject(1238, 1871.6909179688, -1102.517578125, 22.974430084229, 0, 0, 0);
CreateStreamObject(1238, 1870.6937255859, -1101.373046875, 22.974430084229, 0, 0, 0);
CreateStreamObject(1238, 1868.6918945313, -1098.3143310547, 22.974430084229, 0, 0, 0);
CreateStreamObject(1238, 1869.0837402344, -1098.9401855469, 22.974430084229, 0, 0, 0);
CreateStreamObject(1265, 1870.1962890625, -1096.2048339844, 23.125293731689, 0, 0, 332.21020507813);
CreateStreamObject(1265, 1870.44921875, -1090.0791015625, 23.128530502319, 0, 0, 0);
CreateStreamObject(1230, 1869.7890625, -1092.1318359375, 23.073017120361, 0, 0, 344.1201171875);
CreateStreamObject(1425, 1869.7072753906, -1082.6964111328, 23.117393493652, 0, 0, 181.35131835938);
CreateStreamObject(1422, 1869.705078125, -1083.4309082031, 23.07488822937, 0, 0, 1.9849853515625);
CreateStreamObject(1427, 1868.5867919922, -1082.9542236328, 23.211851119995, 0, 0, 0);
CreateStreamObject(1427, 1870.6667480469, -1082.8209228516, 23.211948394775, 0, 0, 179.36633300781);

///////////////////RALENTISSEUR A GROOVE STREET///////////////////
CreateStreamObject(1365,2136.773,-1627.329,13.533,0.0,0.0,-21.486);
CreateStreamObject(1424,2126.277,-1623.777,12.896,0.0,0.0,-137.510);
CreateStreamObject(1424,2128.585,-1622.946,12.904,0.0,0.0,-180.482);
CreateStreamObject(1424,2133.719,-1624.156,12.896,0.0,0.0,-201.968);
CreateStreamObject(1427,2127.329,-1623.194,12.938,0.0,0.0,20.627);
CreateStreamObject(1427,2129.842,-1623.179,12.930,0.0,0.0,-4.297);
CreateStreamObject(1424,2131.111,-1623.310,12.896,0.0,0.0,-190.795);
CreateStreamObject(1427,2125.250,-1624.745,13.067,0.0,0.0,-116.024);
CreateStreamObject(1427,2132.455,-1623.622,12.930,0.0,0.0,169.309);
CreateStreamObject(1282,2125.033,-1622.700,13.079,0.0,0.0,-30.080);
CreateStreamObject(1427,2135.013,-1624.774,12.930,0.0,0.0,149.542);
CreateStreamObject(1238,2140.692,-1627.277,12.709,0.0,0.0,0.0);
CreateStreamObject(1238,2141.556,-1628.166,12.709,0.0,0.0,0.0);
CreateStreamObject(1238,2144.390,-1631.251,12.709,0.0,0.0,0.0);
CreateStreamObject(1238,2143.412,-1630.492,12.709,0.0,0.0,0.0);
CreateStreamObject(1238,2142.429,-1629.456,12.709,0.0,0.0,0.0);
CreateStreamObject(1238,2139.651,-1626.494,12.701,0.0,0.0,0.0);
CreateStreamObject(1238,2145.434,-1631.963,12.709,0.0,0.0,0.0);
CreateStreamObject(1424,2136.302,-1625.251,12.896,0.0,0.0,-201.968);
CreateStreamObject(1424,2138.289,-1625.970,12.896,0.0,0.0,-201.968);
CreateStreamObject(924,2137.951,-1629.948,13.350,0.0,0.0,-8.594);
CreateStreamObject(926,2135.892,-1629.629,12.807,0.0,0.0,0.0);
CreateStreamObject(928,2136.099,-1628.928,12.816,0.0,0.0,-45.550);
CreateStreamObject(1221,2135.244,-1628.829,13.020,0.0,0.0,-22.500);
CreateStreamObject(1220,2134.299,-1628.414,12.910,0.0,0.0,0.0);
CreateStreamObject(926,2134.568,-1628.428,13.498,0.0,0.0,0.0);
CreateStreamObject(1264,2136.853,-1629.568,13.030,0.0,0.0,-135.000);
CreateStreamObject(1338,2137.971,-1629.949,12.743,0.0,0.0,-33.750);
CreateStreamObject(2674,2136.618,-1629.845,12.580,0.0,0.0,-45.000);

//------------------casse vitesseplus objet autoecole----------
//(((,8.759)Bonne hauteur des casse vitesse)
CreateStreamObject(994,2045.049,-1922.294,12.597,0.0,0.0,0.0);//barriere autoecole
CreateStreamObject(994,2058.787,-1922.284,12.572,0.0,0.0,0.0);//barriere autoecole
CreateStreamObject(994,2065.365,-1922.271,12.613,0.0,0.0,0.0);//barriere autoecole
CreateStreamObject(994,2071.639,-1922.020,12.647,0.0,0.0,90.000);//barriere autoecole
CreateStreamObject(994,2071.634,-1903.487,12.622,0.0,0.0,90.000);//barriere autoecole
CreateStreamObject(994,2071.677,-1910.175,12.647,0.0,0.0,90.000);//barriere autoecole
CreateStreamObject(16095,1973.998,-1934.740,8.778,0.0,0.0,0.0);//casse vitesse autoecole
CreateStreamObject(16095,1973.975,-1929.767,8.759,0.0,0.0,0.0);//casse vitesse autoecole
CreateStreamObject(16095,2079.137,-1904.360,8.759,0.0,0.0,90.000);//casse vitesse autoecole
CreateStreamObject(16095,2083.949,-1904.352,8.759,0.0,0.0,90.000);//casse vitesse autoecole
CreateStreamObject(7423, 1481.211792, -1747.483398, 12.544969, 0.0000, 0.0000, 90.2408); // Barriere Mairie
CreateStreamObject(7665, 1440.762573, -1765.945679, 14.091862, 0.0000, 0.0000, 90.2408); // Barriere Mairie
CreateStreamObject(997, 1472.591431, -1742.125977, 12.647193, 0.0000, 0.0000, 0.0000);//Grille Mairie
CreateStreamObject(997, 1486.452637, -1742.136841, 12.647193, 0.0000, 0.0000, 0.0000);//Grille Mairie
CreateStreamObject(997, 1479.514160, -1742.229126, 12.647193, 0.0000, 0.0000, 0.0000);//Grille Mairie
CreateStreamObject(997, 1475.967651, -1740.843384, 12.647193, 0.0000, 0.0000, 0.0000);//Grille Mairie
CreateStreamObject(997, 1483.000651, -1740.843384, 12.647193, 0.0000, 0.0000, 0.0000);//Grille Mairie

//------------------casse vitesse----------
CreateStreamObject(16095,1360.172,-1267.139,8.759,0.0,0.0,-90.000);//casse vitesse
CreateStreamObject(16095,1355.233,-1267.126,8.759,0.0,0.0,-90.000);//casse vitesse
CreateStreamObject(16095,1345.024,-1266.823,8.759,0.0,0.0,-90.000);//casse vitesse
CreateStreamObject(16095,1340.072,-1266.847,8.759,0.0,0.0,-90.000);//casse vitesse
CreateStreamObject(16095,1532.044,-1709.459,8.759,0.0,0.0,90.000);//casse vitesse
CreateStreamObject(16095,1527.184,-1709.478,8.759,0.0,0.0,90.000);//casse vitesse
CreateStreamObject(16095,2104.215,-1107.414,8.759,0.0,0.0,-22.500);//casse vitesse
CreateStreamObject(16095,2106.096,-1102.866,8.759,0.0,0.0,-22.500);//casse vitesse
CreateStreamObject(970,1951.638,-1775.357,13.073,0.0,0.0,-90.000);
CreateStreamObject(970,1951.642,-1771.180,13.073,0.0,0.0,-90.000);
CreateStreamObject(970,1951.636,-1767.046,13.069,0.0,0.0,-90.000);
CreateStreamObject(970,1951.629,-1764.449,13.055,0.0,0.0,-90.000);
CreateStreamObject(7933,1593.490,-1735.527,12.493,0.0,0.0,180.000);
CreateStreamObject(7933,1581.734,-1728.959,12.443,0.0,0.0,0.0);
CreateStreamObject(7933,1366.052,-1735.601,12.493,0.0,0.0,180.000);
CreateStreamObject(7933,1380.229,-1728.974,12.476,0.0,0.0,0.0);
CreateStreamObject(16095,1532.093,-1611.242,8.684,0.0,0.0,90.000);
CreateStreamObject(16095,1527.141,-1611.215,8.698,0.0,0.0,90.000);
CreateStreamObject(7894,1354.199,-1583.688,12.493,0.0,0.0,-191.250);
CreateStreamObject(7894,1365.759,-1579.414,12.484,0.0,0.0,-11.250);
CreateStreamObject(7894,1571.568,-1595.604,12.493,0.0,0.0,180.000);
CreateStreamObject(7894,1583.299,-1589.025,12.443,0.0,0.0,-360.000);
CreateStreamObject(7894,1407.273,-1030.828,23.392,0.0,0.0,-360.000);
CreateStreamObject(7894,1419.707,-1037.177,22.742,0.0,0.0,180.000);
CreateStreamObject(7894,1571.156,-1111.552,22.569,0.0,0.0,101.250);
CreateStreamObject(7894,1573.999,-1095.064,22.518,0.0,0.0,281.250);
CreateStreamObject(1271,1107.457,-314.814,73.117,0.0,0.0,0.0);
CreateStreamObject(1271,1106.796,-314.832,73.108,0.0,0.0,0.0);
CreateStreamObject(1271,1106.128,-314.829,73.092,0.0,0.0,0.0);
//------------------casse vitesse----------------------------

//-----------------ralentisseur (près centre ville)----------
CreateStreamObject(1238, 1824.156494, -1555.817749, 12.688010, 0.0000, 0.0000, 0.0000);
CreateStreamObject(1238, 1825.235107, -1555.160034, 12.688492, 0.0000, 0.0000, 0.0000);
CreateStreamObject(1238, 1830.398804, -1543.652832, 12.700993, 0.0000, 0.0000, 0.0000);
CreateStreamObject(1238, 1830.639771, -1544.652222, 12.700993, 0.0000, 0.0000, 0.0000);
CreateStreamObject(1238, 1830.743408, -1545.500244, 12.700993, 0.0000, 0.0000, 0.0000);
CreateStreamObject(1238, 1830.639404, -1546.568970, 12.694786, 0.0000, 0.0000, 0.0000);
CreateStreamObject(1238, 1830.619873, -1547.592407, 12.694036, 0.0000, 0.0000, 0.0000);
CreateStreamObject(1238, 1830.404419, -1548.477051, 12.693388, 0.0000, 0.0000, 0.0000);
CreateStreamObject(1238, 1830.241089, -1549.223389, 12.692841, 0.0000, 0.0000, 0.0000);
CreateStreamObject(1238, 1830.125854, -1549.928345, 12.692325, 0.0000, 0.0000, 0.0000);
CreateStreamObject(1238, 1830.038208, -1550.605225, 12.691829, 0.0000, 0.0000, 0.0000);
CreateStreamObject(1238, 1829.626953, -1551.347046, 12.691285, 0.0000, 0.0000, 0.0000);
CreateStreamObject(1238, 1829.006592, -1551.996704, 12.690809, 0.0000, 0.0000, 0.0000);
CreateStreamObject(1238, 1828.401367, -1552.745850, 12.690260, 0.0000, 0.0000, 0.0000);
CreateStreamObject(1238, 1827.770874, -1553.442627, 12.689751, 0.0000, 0.0000, 0.0000);
CreateStreamObject(1238, 1827.033691, -1554.098267, 12.689270, 0.0000, 0.0000, 0.0000);
CreateStreamObject(1238, 1826.158203, -1554.643188, 12.688869, 0.0000, 0.0000, 0.0000);
CreateStreamObject(1238, 1829.645630, -1542.623047, 12.700993, 0.0000, 0.0000, 0.0000);
CreateStreamObject(1238, 1828.636353, -1541.788574, 12.700993, 0.0000, 0.0000, 0.0000);
CreateStreamObject(1346, 1816.190796, -1556.002075, 13.850768, 0.0000, 0.0000, 78.7500);
CreateStreamObject(933, 1836.147339, -1552.573120, 12.536227, 0.0000, 0.0000, 0.0000);
CreateStreamObject(1262, 1835.692627, -1553.128540, 14.209078, 0.0000, 0.0000, 135.0000);
CreateStreamObject(1344, 1814.320313, -1560.807373, 13.291710, 0.0000, 0.0000, 67.5000);
CreateStreamObject(852, 1828.234863, -1544.575195, 12.346648, 0.0000, 0.0000, 0.0000);
CreateStreamObject(850, 1827.060181, -1551.265015, 12.484658, 0.0000, 0.0000, 0.0000);
CreateStreamObject(853, 1828.057007, -1547.644165, 12.776492, 0.0000, 0.0000, 0.0000);
CreateStreamObject(849, 1827.060547, -1549.523560, 12.674195, 0.0000, 0.0000, 0.0000);
CreateStreamObject(1264, 1827.905518, -1546.028564, 12.849145, 0.0000, 0.0000, 0.0000);
CreateStreamObject(917, 1828.900269, -1545.978271, 12.509753, 0.0000, 0.0000, 0.0000);
CreateStreamObject(1215, 1852.500000, -1577.020386, 26.766048, 0.0000, 0.0000, 0.0000);
CreateStreamObject(3666, 1822.402832, -1559.467163, 13.053881, 0.0000, 0.0000, 0.0000);
CreateStreamObject(3666, 1829.348145, -1535.646729, 13.053881, 0.0000, 0.0000, 0.0000);
CreateStreamObject(3666, 1829.546631, -1549.177246, 12.888380, 0.0000, 0.0000, 0.0000);
CreateStreamObject(3666, 1838.220215, -1544.321167, 13.060560, 0.0000, 0.0000, 0.0000);
CreateStreamObject(1225, 1828.917969, -1549.704956, 12.780063, 0.0000, 0.0000, 348.7500);
CreateStreamObject(1225, 1827.840210, -1550.223267, 12.779683, 0.0000, 91.9597, 28.3614);
CreateStreamObject(1218, 1829.102539, -1546.170654, 12.868589, 0.0000, 0.0000, 0.0000);
CreateStreamObject(1222, 1829.341064, -1547.782471, 12.851784, 0.0000, 81.6464, 96.3341);
CreateStreamObject(3057, 1827.019775, -1546.767090, 12.762465, 0.0000, 0.0000, 0.0000);
CreateStreamObject(970, 1822.376953, -1554.476440, 13.091677, 0.0000, 0.0000, 326.2500);
CreateStreamObject(970, 1818.598511, -1553.354858, 13.089466, 0.0000, 0.0000, 0.0000);
CreateStreamObject(970, 1826.014648, -1536.290161, 13.098356, 0.0000, 0.0000, 315.0000);
CreateStreamObject(970, 1827.851196, -1539.827637, 13.091677, 0.0000, 0.0000, 101.2500);
CreateStreamObject(1233, 1823.529175, -1555.073608, 14.873107, 0.0000, 0.0000, 0.0000);
CreateStreamObject(1234, 1822.953491, -1558.965698, 14.099875, 0.0000, 0.0000, 101.2500);
//------------------------------------------------------------------------------------

//--- STATION ESSENCE-----
CreateStreamObject(996, 1971.4217529297, -1781.2215576172, 13.295630455017, 0, 0, 268.69067382813);
CreateStreamObject(997, 2016.5141601563, -1762.388671875, 12.553680419922, 0, 0, 0);
CreateStreamObject(994, 2051.0881347656, -1762.6300048828, 12.55158996582, 0, 0, 1.9849853515625);
CreateStreamObject(3850, 1942.3494873047, -1778.1820068359, 13.186533927917, 0, 0, 0);
CreateStreamObject(3850, 1942.3488769531, -1774.7161865234, 13.186533927917, 0, 0, 0);
CreateStreamObject(3850, 1942.3519287109, -1771.2551269531, 13.186533927917, 0, 0, 0);
CreateStreamObject(3850, 1942.3597412109, -1767.7976074219, 13.186533927917, 0, 0, 0);
CreateStreamObject(3850, 1940.9675292969, -1778.1330566406, 13.186533927917, 0, 0, 0);
CreateStreamObject(3850, 1940.9605712891, -1774.7043457031, 13.186533927917, 0, 0, 0);
CreateStreamObject(3850, 1940.9508056641, -1771.2453613281, 13.186533927917, 0, 0, 0);
CreateStreamObject(3850, 1940.9521484375, -1767.7884521484, 13.186533927917, 0, 0, 0);
/*CreateStreamObject(970, 1951.7135009766, -1764.4776611328, 13.098356246948, 0, 0, 89.324493408203); // déja présent
CreateStreamObject(970, 1951.6370849609, -1769.6488037109, 13.098356246948, 0, 0, 89.324493408203); // déja présent
CreateStreamObject(970, 1951.6689453125, -1775.1354980469, 13.098356246948, 0, 0, 89.324493408203); // déja présent*/
//----------------------------------------------------------------------------------

//--------map perso---------
CreateStreamObject(3432, 1479.3571777344, -1020.2252197266, 31.846267700195, 0, 0, 0);
CreateStreamObject(6965, 1350.0777587891, -1400.2780761719, 15.919514846802, 0, 0, 0); // fontaine
CreateStreamObject(654, 1409.0899658203, -1420.6722412109, 13.203125, 0, 0, 0);
CreateStreamObject(9339, 1402.4925537109, -1423.2567138672, 13.592967033386, 0, 0, 0);
CreateStreamObject(9339, 1415.2021484375, -1422.3723144531, 13.438116073608, 0, 0, 0);
CreateStreamObject(7933, 1408.8831787109, -1437.3251953125, 13.628214836121, 0, 0, 1.9849853515625);
CreateStreamObject(7933, 1408.7219238281, -1407.6040039063, 13.763740539551, 0, 0, 182.61938476563);
CreateStreamObject(618, 1403.8958740234, -1411.0250244141, 13.038208007813, 0, 0, 29.774780273438);
CreateStreamObject(671, 1407.5651855469, -1430.3902587891, 13.203125, 0, 0, 352.06005859375);
CreateStreamObject(708, 1408.826171875, -1435.2354736328, 13.035135269165, 0, 0, 0);
CreateStreamObject(11391, 1603.19921875, -1836.7869873047, 13.78879737854, 0, 0, 0);
CreateStreamObject(11393, 1612.0944824219, -1833.0618896484, 14.040912628174, 0, 0, 0);
CreateStreamObject(9339, 1615.9769287109, -1836.1427001953, 13.224442481995, 0, 0, 0);
CreateStreamObject(9339, 1616.0109863281, -1836.1567382813, 14.6283826828, 0, 0, 0);
CreateStreamObject(9339, 1606.1004638672, -1812.0943603516, 13.179259300232, 0, 0, 89.324493408203);
CreateStreamObject(9339, 1606.0946044922, -1812.1097412109, 14.583199501038, 0, 0, 89.324493408203);
CreateStreamObject(970, 1618.3802490234, -1823.2122802734, 13.077264785767, 0, 0, 0);
CreateStreamObject(970, 1618.3861083984, -1823.20703125, 14.183365821838, 0, 0, 0);
CreateStreamObject(970, 1620.4298095703, -1821.0357666016, 13.077840805054, 0, 0, 272.66064453125);
CreateStreamObject(6964, 1607.001953125, -1817.2412109375, 10.59557723999, 0, 0, 0);
CreateStreamObject(6964, 1349.3344726563, -1401.7337646484, 11.714429283142, 0, 0, 0);
CreateStreamObject(6964, 1350.1342773438, -1398.9509277344, 11.731498146057, 0, 0, 0);
CreateStreamObject(9339, 1951.9196777344, -1633.0538330078, 13.245951652527, 0, 0, 0);
CreateStreamObject(8674, 1991.5805664063, -1625.1506347656, 14.018126487732, 0, 0, 268.69067382813);
CreateStreamObject(17070, 1565.18359375, -1613.4970703125, 12.220733642578, 0, 0, 0);
CreateStreamObject(10183, 1574.125, -1612.76171875, 12.244611740112, 0, 0, 0);
CreateStreamObject(10183, 1561.7456054688, -1606.4617919922, 12.394755363464, 0, 0, 45.65478515625);
CreateStreamObject(10183, 1591.9901123047, -1606.3978271484, 12.394755363464, 0, 0, 45.65478515625);
//-----------------------------------------------------------------------------


// MAPPING The Originalz Motor'S

CreateStreamObject(8947, 2007.9755859375, -2132.412109375, 15.599655151367, 0, 0, 179.99450683594);
grillegarage = CreateStreamObject(2933, 2007.544921875, -2120.4736328125, 14.262490272522, 0, 0, 0);
CreateStreamObject(14467, 2015.5935058594, -2116.974609375, 15.280668258667, 0, 0, 182);
CreateStreamObject(10281, 2004.3948974609, -2142.021484375, 14.74297618866, 0, 350, 178);
CreateStreamObject(10281, 2010.6226806641, -2142.0532226563, 14.74297618866, 0, 349.99694824219, 177.99499511719);
CreateStreamObject(1998, 2013.1717529297, -2122.4499511719, 12.546875, 0, 0, 91.999938964844);
CreateStreamObject(1690, 2001.5455322266, -2139.4287109375, 13.240704536438, 0, 0, 0);
CreateStreamObject(11393, 2013.3995361328, -2136.06640625, 14.071914672852, 0, 0, 266);
CreateStreamObject(10282, 2014.5048828125, -2139.599609375, 14.539940834045, 0, 0, 0);
CreateStreamObject(1337, 2008.9599609375, -2139.2021484375, 13.046875, 0, 0, 0);

// ANPE By IBOO =DDD
CreateStreamObject(1523, 1730.815186, -1609.142456, 12.534367, 0.0000, 0.0000, 180.0000);
CreateStreamObject(1523, 1727.784424, -1609.192383, 12.534367, 0.0000, 0.0000, 0.0000);
CreateStreamObject(1523, 1713.845337, -1607.383789, 12.534367, 0.0000, 0.0000, 356.5623);
CreateStreamObject(1523, 1716.858276, -1607.591309, 12.534367, 0.0000, 0.0000, 173.9067);
CreateStreamObject(3851, 1738.330566, -1609.767700, 14.546875, 0.0000, 359.1406, 265.6255);
CreateStreamObject(3851, 1722.378418, -1608.391479, 14.546875, 0.0000, 0.8594, 262.1104);
CreateStreamObject(3851, 1705.609863, -1604.376221, 14.546875, 0.0000, 356.5623, 252.6566);
CreateStreamObject(7921, 1732.565430, -1608.605591, 13.944214, 0.0000, 0.0000, 78.7501);
CreateStreamObject(7921, 1712.218018, -1606.434692, 13.944215, 0.0000, 181.3415, 270.0001);
CreateStreamObject(8650, 1726.711060, -1608.999390, 16.156446, 0.0000, 0.0000, 263.9066);
CreateStreamObject(7922, 1709.482666, -1606.545044, 13.944215, 0.0000, 181.3415, 266.7943);
CreateStreamObject(3851, 1743.683838, -1616.156982, 14.546875, 0.0000, 0.0000, 0.0000);
CreateStreamObject(3851, 1743.732300, -1627.443481, 14.554644, 0.0000, 0.0000, 0.0000);
CreateStreamObject(3851, 1738.840942, -1633.169678, 14.554644, 0.0000, 0.0000, 270.0000);
CreateStreamObject(3851, 1699.793213, -1609.068970, 14.554644, 0.0000, 0.0000, 0.0000);
CreateStreamObject(3851, 1700.127563, -1620.548706, 14.546875, 0.0000, 0.0000, 2.5783);

//-------------------[-Mapping ANPE -]-------------------------
CreateStreamObject(4113, -1918.1099853516, 1359.2431640625, 42.012981414795, 0, 0, 14);
CreateStreamObject(4113, -1988.7375488281, 1359.5045166016, 42.192668914795, 0, 0, 14);
CreateStreamObject(4113, -1956.0723876953, 1366.3908691406, 42.192668914795, 0, 0, 281.99658203125);
CreateStreamObject(7091, -1939.4223632813, 1343.3203125, 17.630889892578, 0, 0, 270);
CreateStreamObject(7091, -1969.2926025391, 1343.3203125, 17.824161529541, 0, 0, 270);
CreateStreamObject(3934, -2005.1020507813, 1385.8205566406, 6.1836700439453, 0, 0, 269.99996948242);
CreateStreamObject(3934, -1992.8376464844, 1385.8983154297, 6.183629989624, 0, 0, 272);
CreateStreamObject(1694, -1977.2038574219, 1379.6844482422, 14.973051071167, 0, 0, 56);
CreateStreamObject(4100, -1974.4619140625, 1387.236328125, 7.8841686248779, 0, 0, 50);
CreateStreamObject(4100, -1974.4357910156, 1373.3605957031, 7.885814666748, 0, 0, 49.998779296875);
CreateStreamObject(8646, -1978.1596679688, 1321.2899169922, 7.1294989585876, 0, 0, 90);
CreateStreamObject(8646, -1944.7181396484, 1336.25, 7.0449690818787, 0, 0, 179.99951171875);
CreateStreamObject(8646, -2004.7712402344, 1335.9467773438, 7.0390658378601, 0, 0, 181.99951171875);
CreateStreamObject(4639, -2002.3696289063, 1323.0469970703, 7.8792581558228, 0, 0, 90);
CreateStreamObject(966, -2000.4895019531, 1321.5992431641, 6.2048377990723, 0, 0, 178);
CreateStreamObject(968, -2000.4982910156, 1321.6281738281, 7.2048377990723, 0, 6, 0);
CreateStreamObject(8646, -1963.771484375, 1335.828125, 7.0416140556335, 0, 0, 181.99951171875);
CreateStreamObject(638, -1963.2172851563, 1342.1802978516, 6.881178855896, 0, 0, 2);
CreateStreamObject(638, -1963.0482177734, 1338.3024902344, 6.881178855896, 0, 0, 2);
CreateStreamObject(638, -1962.9455566406, 1334.7623291016, 6.8845338821411, 0, 0, 2);
CreateStreamObject(638, -1962.7646484375, 1330.3387451172, 6.8845338821411, 0, 0, 2);
CreateStreamObject(638, -1962.6719970703, 1326.8602294922, 6.8942499160767, 0, 0, 0);
CreateStreamObject(638, -1962.6243896484, 1322.4479980469, 6.9535093307495, 0, 0, 0);
CreateStreamObject(638, -1945.6580810547, 1322.7808837891, 6.9490404129028, 0, 0, 0);
CreateStreamObject(638, -1945.6165771484, 1327.5544433594, 6.8849248886108, 0, 0, 0);
CreateStreamObject(638, -1945.5814208984, 1330.7884521484, 6.8845338821411, 0, 0, 0);
CreateStreamObject(638, -1945.5695800781, 1335.2849121094, 6.8845338821411, 0, 0, 0);
CreateStreamObject(638, -1945.5681152344, 1338.5875244141, 6.8845338821411, 0, 0, 0);
CreateStreamObject(638, -1945.5541992188, 1342.1948242188, 6.8845338821411, 0, 0, 0);
CreateStreamObject(743, -1960.8647460938, 1344.1971435547, 6.6691083908081, 0, 0, 0);
CreateStreamObject(743, -1947.5288085938, 1344.3310546875, 6.6724634170532, 0, 0, 0);
CreateStreamObject(650, -1947.4182128906, 1344.3109130859, 7.154999256134, 0, 0, 0);
CreateStreamObject(650, -1960.6900634766, 1344.0882568359, 7.1184773445129, 0, 0, 310);
CreateStreamObject(1361, -1963.0181884766, 1319.6011962891, 6.9931077957153, 0, 0, 0);
CreateStreamObject(1361, -1944.8740234375, 1319.7042236328, 6.9926929473877, 0, 0, 0);
CreateStreamObject(3861, -1942.5200195313, 1340.5103759766, 7.3598308563232, 0, 0, 90);
CreateStreamObject(3862, -1942.2939453125, 1334.4802246094, 7.3598308563232, 0, 0, 90);
CreateStreamObject(1363, -1936.1516113281, 1331.9879150391, 7.0238628387451, 0, 0, 0);
CreateStreamObject(1363, -1925.3076171875, 1332.3353271484, 7.0382595062256, 0, 0, 0);
CreateStreamObject(1340, -1931.5274658203, 1338.4753417969, 7.311731338501, 0, 0, 304);
CreateStreamObject(1341, -1934.5476074219, 1327.3507080078, 7.1963386535645, 0, 0, 44);
CreateStreamObject(1342, -1920.3479003906, 1341.2764892578, 7.2211937904358, 0, 0, 242);
CreateStreamObject(1285, -1964.6799316406, 1316.8654785156, 6.7780618667603, 0, 0, 180);
CreateStreamObject(1286, -1965.2766113281, 1316.8767089844, 6.7782702445984, 0, 0, 178);
CreateStreamObject(1288, -1965.9313964844, 1316.9057617188, 6.7788095474243, 0, 0, 180);
CreateStreamObject(1257, -1975.5537109375, 1317.7452392578, 7.4945106506348, 0, 0, 90);
CreateStreamObject(1258, -1968.4296875, 1316.8560791016, 6.860538482666, 0, 0, 184);
CreateStreamObject(1232, -1945.6245117188, 1325.1890869141, 8.8563041687012, 0, 0, 0);
CreateStreamObject(1232, -1945.640625, 1333.0535888672, 8.8241424560547, 0, 0, 0);
CreateStreamObject(1232, -1962.6442871094, 1324.7259521484, 8.8625221252441, 0, 0, 0);
CreateStreamObject(1232, -1962.9150390625, 1332.7305908203, 8.8241424560547, 0, 0, 0);
CreateStreamObject(1232, -1932.3469238281, 1335.3259277344, 8.8241424560547, 0, 0, 0);
CreateStreamObject(1232, -1925.4117431641, 1335.5163574219, 8.8241424560547, 0, 0, 0);
CreateStreamObject(1232, -1932.3553466797, 1328.1560058594, 8.8311710357666, 0, 0, 0);
CreateStreamObject(1232, -1918.3194580078, 1336.2392578125, 8.8546600341797, 0, 0, 0);
CreateStreamObject(1232, -1932.3973388672, 1323.2260742188, 8.910270690918, 0, 0, 0);
CreateStreamObject(1215, -1992.8293457031, 1321.1591796875, 8.5565118789673, 0, 0, 0);
CreateStreamObject(1215, -1985.2543945313, 1321.1025390625, 8.5565118789673, 0, 0, 0);
CreateStreamObject(1215, -1977.5837402344, 1321.1793212891, 8.5565118789673, 0, 0, 0);
CreateStreamObject(1215, -1969.7982177734, 1321.2067871094, 8.5565118789673, 0, 0, 0);
CreateStreamObject(1215, -1963.2897949219, 1321.1838378906, 8.4686269760132, 0, 0, 0);
CreateStreamObject(1215, -1963.6064453125, 1328.7139892578, 8.4686269760132, 0, 0, 0);
CreateStreamObject(1215, -1963.7862548828, 1336.4344482422, 8.4686269760132, 0, 0, 0);
CreateStreamObject(1215, -2005.0141601563, 1344.3045654297, 8.4660787582397, 0, 0, 0);
CreateStreamObject(1215, -2004.6636962891, 1336.5935058594, 8.4660787582397, 0, 0, 0);
CreateStreamObject(1215, -2004.4990234375, 1328.8811035156, 8.4660787582397, 0, 0, 0);
CreateStreamObject(1215, -2004.267578125, 1321.2780761719, 8.4660787582397, 0, 0, 0);
CreateStreamObject(1211, -1945.0427246094, 1317.041015625, 6.8111410140991, 0, 0, 0);
CreateStreamObject(1280, -1928.0517578125, 1338.0477294922, 6.5855002403259, 0, 0, 0);
CreateStreamObject(1280, -1918.7685546875, 1338.3277587891, 6.5997633934021, 0, 0, 0);
CreateStreamObject(1280, -1939.8175048828, 1326.0383300781, 6.6096091270447, 0, 0, 0);
CreateStreamObject(1280, -1929.7091064453, 1331.0152587891, 6.5860514640808, 0, 0, 182);
CreateStreamObject(1280, -1925.2380371094, 1338.2008056641, 6.5855002403259, 0, 0, 181.99951171875);
CreateStreamObject(1280, -1936.8917236328, 1326.1634521484, 6.6108317375183, 0, 0, 181.99951171875);
CreateStreamObject(1280, -1936.8620605469, 1337.7628173828, 6.588855266571, 0, 0, 181.99951171875);
CreateStreamObject(1280, -1915.8060302734, 1338.3562011719, 6.6212458610535, 0, 0, 181.99951171875);
CreateStreamObject(8856, -1954.2254638672, 1331.1840820313, 6.4278154373169, 0, 0, 0);
CreateStreamObject(2745, -1954.1904296875, 1321.6368408203, 7.6389541625977, 0, 0, 0);
CreateStreamObject(2745, -1954.1939697266, 1340.8367919922, 7.6389541625977, 0, 0, 179.99993896484);
CreateStreamObject(737, -1954.0891113281, 1333.6333007813, 6.430335521698, 0, 0, 0);
CreateStreamObject(737, -1954.0791015625, 1328.0278320313, 6.430335521698, 0, 0, 0);
CreateStreamObject(1214, -1961.2497558594, 1321.1712646484, 6.273624420166, 0, 0, 0);
CreateStreamObject(1214, -1959.5692138672, 1321.2413330078, 6.2726821899414, 0, 0, 0);
CreateStreamObject(1214, -1957.9221191406, 1321.287109375, 6.2720680236816, 0, 0, 0);
CreateStreamObject(1214, -1956.4020996094, 1321.2766113281, 6.2722091674805, 0, 0, 0);
CreateStreamObject(1214, -1952.1507568359, 1321.1859130859, 6.2734279632568, 0, 0, 0);
CreateStreamObject(1214, -1950.4129638672, 1321.2535400391, 6.272518157959, 0, 0, 0);
CreateStreamObject(1214, -1948.7517089844, 1321.2487792969, 6.2725830078125, 0, 0, 0);
CreateStreamObject(1214, -1947.2984619141, 1321.1694335938, 6.2736473083496, 0, 0, 0);
CreateStreamObject(737, -2009.3660888672, 1339.2316894531, 6.3979358673096, 0, 0, 0);
CreateStreamObject(737, -1938.1389160156, 1338.2534179688, 6.4375, 0, 0, 0);
CreateStreamObject(737, -1931.4577636719, 1331.2609863281, 6.4375, 0, 0, 0);
CreateStreamObject(737, -1926.8098144531, 1338.4149169922, 6.4341430664063, 0, 0, 0);
CreateStreamObject(737, -1917.2152099609, 1338.8122558594, 6.455997467041, 0, 0, 0);
CreateStreamObject(737, -1938.7607421875, 1326.248046875, 6.455436706543, 0, 0, 0);
CreateStreamObject(737, -1938.7607421875, 1326.248046875, 6.455436706543, 0, 0, 0);
CreateStreamObject(737, -2009.4187011719, 1332.2307128906, 6.3975486755371, 0, 0, 0);
CreateStreamObject(737, -2009.4287109375, 1325.2156982422, 6.4375, 0, 0, 0);

//--------seconde map perso---------
CreateStreamObject(3550, 668.00018310547, -1217.1956787109, 18.316516876221, 0, 0, 320.30029296875);
CreateStreamObject(980, 786.11181640625, -1152.4207763672, 25.370460510254, 0, 0, 270.67565917969);
CreateStreamObject(980, 658.17083740234, -1226.3668212891, 17.616645812988, 0, 0, 61.534545898438);
CreateStreamObject(18014, 1328.1097412109, -1400.3679199219, 12.78330039978, 0, 0, 89.324493408203);
CreateStreamObject(18014, 1315.9942626953, -1400.5151367188, 12.726984977722, 0, 0, 91.309509277344);
CreateStreamObject(18014, 1304.6871337891, -1400.5770263672, 12.682996749878, 0, 0, 91.309509277344);
CreateStreamObject(18014, 1292.3532714844, -1400.5860595703, 12.59920501709, 0, 0, 89.324493408203);
CreateStreamObject(18014, 1280.3059082031, -1400.4074707031, 12.515944480896, 0, 0, 89.324493408203);
CreateStreamObject(18014, 1371.4711914063, -1400.5921630859, 12.815015792847, 0, 0, 89.324493408203);
CreateStreamObject(18014, 1383.5166015625, -1400.6606445313, 12.815015792847, 0, 0, 91.309509277344);
CreateStreamObject(18014, 1394.7823486328, -1400.568359375, 12.815015792847, 0, 0, 89.324493408203);
CreateStreamObject(18014, 1241.4554443359, -1400.5548095703, 12.465458869934, 0, 0, 89.324493408203);
CreateStreamObject(18014, 1219.9827880859, -1400.4246826172, 12.622647285461, 0, 0, 89.324493408203);
CreateStreamObject(18014, 1230.7830810547, -1400.5205078125, 12.553641319275, 0, 0, 89.324493408203);
CreateStreamObject(8991, 1227.9871826172, -1342.9959716797, 13.731981277466, 0, 0, 89.324493408203);
CreateStreamObject(8991, 1236.2296142578, -1342.1976318359, 13.763486862183, 0, 0, 91.309509277344);
CreateStreamObject(8623, 1231.8028564453, -1341.6700439453, 13.881627082825, 0, 0, 272.66064453125);
CreateStreamObject(3532, 1231.7529296875, -1359.0327148438, 13.823941230774, 0, 0, 55.579711914063);
CreateStreamObject(3532, 1233.3714599609, -1356.8671875, 13.808426856995, 0, 0, 0);
CreateStreamObject(3532, 1231.6749267578, -1353.7742919922, 13.819359779358, 0, 0, 65.504638671875);
CreateStreamObject(3520, 1229.9864501953, -1355.2893066406, 13.155651092529, 0, 0, 0);
CreateStreamObject(3532, 1231.8109130859, -1325.5678710938, 13.817890167236, 0, 0, 69.474426269531);
CreateStreamObject(3520, 1229.6174316406, -1326.8439941406, 13.145793914795, 0, 0, 0);
CreateStreamObject(3532, 1231.3006591797, -1330.2104492188, 13.826542854309, 0, 0, 87.339508056641);
CreateStreamObject(3532, 1233.1954345703, -1328.3967285156, 13.802041053772, 0, 0, 354.04504394531);
CreateStreamObject(856, 1231.2553710938, -1318.1215820313, 13.133160591125, 0, 0, 0);
CreateStreamObject(813, 1231.6318359375, -1350.4665527344, 15.311208724976, 0, 0, 0);
CreateStreamObject(808, 1230.8631591797, -1334.3515625, 14.94296169281, 0, 0, 0);
CreateStreamObject(682, 1232.2214355469, -1357.3896484375, 13.138189315796, 0, 0, 0);
CreateStreamObject(647, 1234.3752441406, -1363.1595458984, 14.945910453796, 0, 0, 0);
CreateStreamObject(647, 1229.1701660156, -1362.9759521484, 14.944450378418, 0, 0, 0);
CreateStreamObject(800, 1219.59765625, -1381.9176025391, 14.776173400879, 0, 0, 0); //
CreateStreamObject(800, 1238.0843505859, -1381.7506103516, 14.756411361694, 0, 0, 0); //
CreateStreamObject(800, 1238.4097900391, -1296.94140625, 14.707160186768, 0, 0, 0); //
CreateStreamObject(800, 1219.8872070313, -1297.1799316406, 14.716413116455, 0, 0, 0); //
CreateStreamObject(892, 651.99731445313, -1293.7143554688, 14.047877311707, 0, 0, 0);
CreateStreamObject(882, 651.55017089844, -1268.0825195313, 14.110136985779, 0, 0, 0);
CreateStreamObject(770, 780.67944335938, -1174.2906494141, 19.990785598755, 0, 0, 0);
CreateStreamObject(3850, 688.32208251953, -1279.2423095703, 13.106128692627, 0, 0, 87.339508056641);
CreateStreamObject(3850, 674.36602783203, -1279.2048339844, 13.18009185791, 0, 0, 89.324493408203);
CreateStreamObject(3850, 674.47058105469, -1272.4715576172, 13.178509712219, 0, 0, 89.324493408203);
CreateStreamObject(3850, 688.32958984375, -1272.4545898438, 13.104533195496, 0, 0, 91.309509277344);
CreateStreamObject(3850, 677.86328125, -1279.2091064453, 13.160351753235, 0, 0, 89.324493408203);
CreateStreamObject(3850, 678.05584716797, -1272.552734375, 13.154505729675, 0, 0, 89.324493408203);
CreateStreamObject(1432, 674.67791748047, -1277.4831542969, 12.633808135986, 0, 0, 0);
CreateStreamObject(1670, 674.64202880859, -1277.8779296875, 13.249146461487, 0, 0, 0);
CreateStreamObject(1280, 672.89556884766, -1274.0692138672, 13.034374237061, 0, 0, 180.63439941406);
CreateStreamObject(15038, 690.60034179688, -1273.3526611328, 13.177209854126, 0, 0, 0);
CreateStreamObject(15038, 690.49145507813, -1278.4389648438, 13.177129745483, 0, 0, 0);
CreateStreamObject(2811, 673.05657958984, -1275.7899169922, 12.633395195007, 0, 0, 0);
CreateStreamObject(2894, 674.458984375, -1277.353515625, 13.077004432678, 0, 0, 0);
CreateStreamObject(2816, 674.62432861328, -1277.2989501953, 13.249146461487, 0, 0, 0);
CreateStreamObject(4724, 2794.8442382813, -1603.2037353516, 11.955779075623, 0, 0, 19.849853515625);
CreateStreamObject(4724, 2795.8327636719, -1601.9859619141, 11.948851585388, 0, 0, 198.49926757813);
CreateStreamObject(640, 2794.9409179688, -1595.2869873047, 10.62198638916, 0, 0, 328.240234375);
CreateStreamObject(640, 2800.7709960938, -1598.1262207031, 10.626931190491, 0, 0, 158.79956054688);
CreateStreamObject(647, 2793.6577148438, -1593.6540527344, 11.757371902466, 0, 0, 0);
CreateStreamObject(803, 2803.3608398438, -1599.5495605469, 10.851039886475, 0, 0, 55.579711914063); //
CreateStreamObject(792, 2800.7495117188, -1600.1838378906, 9.9291744232178, 0, 0, 0);
CreateStreamObject(669, 2791.349609375, -1599.9865722656, 10.09375, 0, 0, 275.91369628906);
CreateStreamObject(672, 2799.4367675781, -1604.6903076172, 10.09375, 0, 0, 119.09942626953);
CreateStreamObject(3850, 2792.1657714844, -1602.5860595703, 10.467783927917, 0, 0, 332.21020507813);
CreateStreamObject(3850, 2793.4677734375, -1599.4079589844, 10.473719596863, 0, 0, 344.1201171875);
CreateStreamObject(3850, 2798.1828613281, -1602.4608154297, 10.475274085999, 0, 0, 330.22521972656);
CreateStreamObject(3850, 2796.9462890625, -1605.7398681641, 10.476036071777, 0, 0, 346.10510253906);

//--------3eme map perso---------
CreateStreamObject(647, 1352.0904541016, -1399.9383544922, 14.13761138916, 0, 0, 0);
CreateStreamObject(647, 1350.0822753906, -1398.3544921875, 14.160431861877, 0, 0, 69.474609375);
CreateStreamObject(647, 1348.6644287109, -1400.6180419922, 14.140351295471, 0, 0, 97.264495849609);
CreateStreamObject(647, 1350.4171142578, -1401.7803955078, 14.146595954895, 0, 0, 0);
CreateStreamObject(629, 1361.1595458984, -1400.0090332031, 12.404968261719, 0, 0, 0);
CreateStreamObject(629, 1352.0310058594, -1390.9377441406, 12.435376167297, 0, 0, 0);
CreateStreamObject(629, 1394.6802978516, -1332.7830810547, 1.20285987854, 0, 0, 0);
CreateStreamObject(629, 1342.1376953125, -1400.2705078125, 12.299479484558, 0, 0, 0);
CreateStreamObject(629, 1351.8890380859, -1409.7104492188, 12.357283592224, 0, 0, 0);
CreateStreamObject(615, 773.54907226563, -1304.3453369141, 12.559171676636, 0, 0, 0);
CreateStreamObject(616, 732.34210205078, -1304.9387207031, 12.574563980103, 0, 0, 0);
CreateStreamObject(618, 754.14453125, -1305.2674560547, 12.5625, 0, 0, 0);
CreateStreamObject(655, 766.58911132813, -1303.3868408203, 12.561574935913, 0, 0, 0);
CreateStreamObject(656, 781.18182373047, -1292.4521484375, 12.5625, 0, 0, 0);
CreateStreamObject(661, 779.80914306641, -1285.1394042969, 12.5625, 0, 0, 0);
CreateStreamObject(661, 738.70239257813, -1306.326171875, 12.571584701538, 0, 0, 0);
CreateStreamObject(669, 782.28033447266, -1271.3670654297, 12.574792861938, 0, 0, 0);
CreateStreamObject(671, 785.52227783203, -1307.9104003906, 12.553637504578, 0, 0, 0);
CreateStreamObject(673, 722.12469482422, -1305.3305664063, 12.570278167725, 0, 0, 0);
CreateStreamObject(687, 749.08404541016, -1304.4964599609, 12.569215774536, 0, 0, 0);
CreateStreamObject(690, 778.16009521484, -1260.1352539063, 12.569759368896, 0, 0, 0);
CreateStreamObject(690, 776.48120117188, -1195.0642089844, 16.067920684814, 0, 0, 0);
CreateStreamObject(694, 774.40093994141, -1178.8315429688, 12.890380859375, 0, 0, 306.40539550781);
CreateStreamObject(697, 774.61145019531, -1178.9592285156, 18.516004562378, 0, 0, 0);
CreateStreamObject(700, 782.69909667969, -1238.8438720703, 12.750317573547, 0, 0, 0);
CreateStreamObject(726, 781.98950195313, -1227.7036132813, 13.1315574646, 0, 0, 0);
CreateStreamObject(763, 780.25518798828, -1168.6430664063, 21.031955718994, 0, 0, 0);
CreateStreamObject(889, 732.56268310547, -1164.3255615234, 20.0934715271, 0, 0, 0);
CreateStreamObject(892, 757.43402099609, -1146.4479980469, 21.64552116394, 0, 0, 0);
CreateStreamObject(889, 675.52087402344, -1304.5205078125, 12.625909805298, 0, 0, 0);
CreateStreamObject(726, 653.216796875, -1300.3996582031, 13.410837173462, 0, 0, 43.669738769531);
CreateStreamObject(737, 682.68389892578, -1306.7353515625, 12.617324829102, 0, 0, 0);
CreateStreamObject(738, 714.85180664063, -1306.2918701172, 12.570514678955, 0, 0, 0);
CreateStreamObject(803, 780.91235351563, -1215.4881591797, 14.340038299561, 0, 0, 0);
CreateStreamObject(824, 779.95135498047, -1249.5764160156, 14.589053153992, 0, 0, 0);
CreateStreamObject(824, 759.90124511719, -1302.9699707031, 14.604678153992, 0, 0, 0);
CreateStreamObject(827, 782.86328125, -1297.4133300781, 16.352630615234, 0, 0, 0);
CreateStreamObject(870, 726.4150390625, -1295.2512207031, 12.813401222229, 0, 0, 0);
CreateStreamObject(870, 726.41033935547, -1298.1821289063, 12.810654640198, 0, 0, 0);
CreateStreamObject(654, 651.47528076172, -1265.1848144531, 14.076570510864, 0, 0, 0);
//-----------------------------------------------------------------------------

//------------------------------------------------  CORRECTION BUG HQ Vercetti -----------------------------------------------
CreateStreamObject(3055, 968.26568603516, -54.168674468994, 1002.3226928711, 0, 0, 89.324493408203);
CreateStreamObject(1569, 968.26171875, -52.425601959229, 1000.1245727539, 0, 0, 266.70568847656);
//----------------------------------------------------------------------------------------------------------------------------

//------------------------------------------------  MAP PERSO: Fouriere ------------------------------------------------------
CreateStreamObject(8041, 2202.0239257813, -1977.4539794922, 18.374237060547, 0, 0, 0);
CreateStreamObject(8229, 2167.0209960938, -1984.9929199219, 15.255917549133, 0, 0, 81.384521484375);
CreateStreamObject(8674, 2198.3544921875, -1968.1296386719, 14.01379108429, 0, 0, 0);
CreateStreamObject(8674, 2188.1020507813, -1968.2512207031, 14.027582168579, 0, 0, 1.9849853515625);
CreateStreamObject(8674, 2192.6723632813, -2004.7719726563, 14.01379108429, 0, 0, 23.81982421875);
CreateStreamObject(3749, 2203.3186035156, -1977.1187744141, 18.405288696289, 0, 0, 89.324493408203);
CreateStreamObject(1432, 2199.6535644531, -1970.3411865234, 12.78413105011, 0, 0, 0);
CreateStreamObject(2008, 2194.2116699219, -1970.1173095703, 12.78413105011, 0, 0, 91.309509277344);
CreateStreamObject(1806, 2195.1142578125, -1969.177734375, 12.78413105011, 0, 0, 89.324493408203);
CreateStreamObject(1418, 2201.1184082031, -1970.2846679688, 13.175352096558, 0, 0, 91.309509277344);
CreateStreamObject(1418, 2201.1005859375, -1970.2860107422, 14.482565879822, 0, 0, 91.309509277344);
//------------------------------------------------------------------------------------------------------------------------------

//------------------------------------------------  MAP PERSO: Correction Bug Maisons ------------------------------------------------------
CreateObject(983, 2525.6381835938, -1681.1848144531, 1015.1821289063, 0, 0, 91.309509277344);
CreateObject(983, 2525.5295410156, -1681.1109619141, 1016.6821289063, 0, 0, 89.324493408203);
CreateObject(983, 2527.7954101563, -1684.4554443359, 1016.9321289063, 0, 0, 0);
CreateObject(983, 2530.6157226563, -1685.8415527344, 1015.0050048828, 0, 0, 268.69067382813);
CreateObject(983, 2529.703125, -1685.9949951172, 1016.5050048828, 0, 0, 270.67565917969);
CreateObject(983, 2527.78515625, -1684.4721679688, 1015.0050048828, 0, 0, 0);
CreateObject(983, 2533.3881835938, -1684.3305664063, 1014.8409423828, 0, 0, 0);
CreateObject(983, 2533.1843261719, -1684.5328369141, 1016.5050048828, 0, 0, 0);
CreateObject(3260, 2532.0075683594, -1681.1047363281, 1015.4909667969, 0, 0, 0);
CreateObject(4647, -1.9811880588531, -0.47215270996094, 998.478515625, 0, 0, 0);
CreateObject(4100, 2.3036360740662, 7.5760226249695, 1000.1020507813, 0, 0, 320.30029296875);
CreateObject(983, 0.98475593328476, -6.378143787384, 999.11193847656, 0, 0, 89.324493408203);
CreateObject(983, 1.2333929538727, -6.4532108306885, 1000.3339233398, 0, 0, 270.67565917969);
CreateObject(983, -1.8645957708359, 2.4239845275879, 999.09173583984, 0, 0, 0);
CreateObject(983, -0.81712198257446, 8.8331937789917, 999.15667724609, 0, 0, 0);
CreateObject(983, -2.0385460853577, -3.7567749023438, 999.08392333984, 0, 0, 0);
CreateObject(983, -2.1320352554321, -3.3910837173462, 1000.7329711914, 0, 0, 0);
CreateObject(983, -1.9386627674103, 3.5482912063599, 1000.8417358398, 0, 0, 0);
CreateObject(983, -0.85945522785187, 8.782374382019, 1000.3619384766, 0, 0, 0);
CreateObject(983, -4.1978468894958, 5.5400314331055, 999.08392333984, 0, 0, 268.69067382813);
CreateObject(983, -4.1255292892456, 5.4879894256592, 1000.3339233398, 0, 0, 91.309509277344);
CreateObject(983, 2.596423625946, 4.3798794746399, 1000.8619384766, 0, 0, 0);
CreateObject(983, 2.5600297451019, 4.3690605163574, 999.08392333984, 0, 0, 0);
CreateObject(983, 2.5323350429535, -2.1819734573364, 999.11193847656, 0, 0, 0);
CreateObject(983, 2.584837436676, -2.72016954422, 1000.8599853516, 0, 0, 0);
//------------------------------------------------------------------------------------------------------------------------------



//--------------------------------------------- Ecole De Langues ---------------------------------------------
CreateObject(14603, 1208.751953125, -899.2578125, 1094.8896484375, 0, 0, 0);
CreateObject(2959, 1207.1124267578, -904.07604980469, 1093.1083984375, 0, 0, 270.67565917969);
CreateObject(2207, 1212.7336425781, -901.54016113281, 1093.1083984375, 0, 0, 272.65869140625);
CreateObject(1714, 1214.7939453125, -902.56158447266, 1093.1083984375, 0, 0, 274.64172363281);
CreateObject(2165, 1215.6853027344, -897.90222167969, 1093.1083984375, 0, 0, 269.95861816406);
CreateObject(1806, 1214.451171875, -899.49761962891, 1093.1083984375, 0, 0, 299.7314453125);
CreateObject(2205, 1213.1148681641, -899.09722900391, 1093.1083984375, 0, 0, 91.309509277344);
CreateObject(2310, 1214.2371826172, -898.16711425781, 1093.6076660156, 0, 0, 7.93994140625);
CreateObject(2310, 1208.400390625, -897.97210693359, 1093.6015625, 0, 0, 180.62622070313);
CreateObject(2310, 1208.4301757813, -899.22418212891, 1093.6070556641, 0, 0, 177.37426757813);
CreateObject(2205, 1210.2690429688, -901.88714599609, 1093.1083984375, 0, 0, 270.67565917969);
CreateObject(2309, 1208.7204589844, -903.11889648438, 1093.1083984375, 0, 0, 276.63024902344);
CreateObject(2309, 1208.6931152344, -901.85540771484, 1093.1083984375, 0, 0, 270.67565917969);
CreateObject(2205, 1209.7027587891, -897.88604736328, 1093.1068115234, 0, 0, 274.64562988281);
CreateObject(1280, 1201.7655029297, -898.58526611328, 1093.509765625, 0, 0, 177.37976074219);
CreateObject(1280, 1203.0948486328, -898.53527832031, 1093.509765625, 0, 0, 177.37976074219);
CreateObject(1280, 1204.3837890625, -898.52252197266, 1093.509765625, 0, 0, 177.37976074219);
CreateObject(2596, 1216.3946533203, -902.92016601563, 1094.8796386719, 0, 0, 270.67565917969);
CreateObject(1787, 1213.5187988281, -903.37951660156, 1093.9564208984, 0, 0, 103.9365234375);
CreateObject(1808, 1201.345703125, -901.86279296875, 1093.2352294922, 0, 0, 91.309509277344);
CreateObject(1809, 1213.1520996094, -901.46844482422, 1093.8857421875, 0, 0, 284.57055664063);
CreateObject(1359, 1201.7955322266, -903.21038818359, 1093.8143310547, 0, 0, 0);
CreateObject(2202, 1203.9592285156, -903.52600097656, 1093.1157226563, 0, 0, 0);
CreateObject(2201, 1213.2250976563, -897.86993408203, 1094.044921875, 0, 0, 270.67565917969);
CreateObject(2150, 1201.3737792969, -900.87512207031, 1094.0482177734, 0, 0, 87.339508056641);
CreateObject(1738, 1206.1040039063, -903.41436767578, 1093.7630615234, 0, 0, 0);
CreateObject(1280, 1205.7121582031, -898.53833007813, 1093.5170898438, 0, 0, 181.3513183593);
//--------------------------------------------- Ecole De Langues: Fin ---------------------------------------------

//--------------------------------------------- Gare ---------------------------------------------
CreateObject(1597, 1752.7575683594, -1849.1064453125, 15.237245559692, 0, 0, 90);
CreateObject(1597, 1762.8834228516, -1848.6842041016, 15.235507011414, 0, 0, 270);
CreateObject(1597, 1772.9910888672, -1849.0549316406, 15.321444511414, 0, 0, 90);
CreateObject(1597, 1782.927734375, -1848.7565917969, 15.235507011414, 0, 0, 270);
CreateObject(1597, 1792.9372558594, -1848.7711181641, 15.235507011414, 0, 0, 270);
CreateObject(1597, 1803.5343017578, -1848.7000732422, 15.235507011414, 0, 0, 270);
CreateObject(1361, 1809.994140625, -1848.8488769531, 13.321468353271, 0, 0, 0);
CreateObject(877, 1765.3502197266, -1842.5611572266, 14.363299369812, 0, 0, 80);
CreateObject(808, 1798.7803955078, -1845.0234375, 14.380066871643, 0, 0, 94);
CreateObject(997, 1830.4201660156, -1850.6652832031, 12.578125, 0, 0, 0);
CreateObject(997, 1830.3999023438, -1834.5455322266, 12.578125, 0, 0, 0);
CreateObject(994, 1830.265625, -1834.5515136719, 12.578125, 0, 0, 270);
CreateObject(994, 1830.2424316406, -1850.7166748047, 12.578125, 0, 0, 90);
//--------------------------------------------- Gare: Fin ---------------------------------------------

//--------------------------------------------- Casino ---------------------------------------------
CreateObject(2714, 1217.1162109375, -1692.4888916016, 23.010057449341, 0, 0, 90);
CreateObject(2745, 1243.0924072266, -1699.6097412109, 15.075806617737, 0, 0, 0);
//CreateObject(3471, 1237.005859375, -1703.2900390625, 13.82141494751, 0, 0, 270);
//CreateObject(3471, 1249.2622070313, -1703.3405761719, 13.82141494751, 0, 0, 270);
CreateObject(3554, 1279.1817626953, -1677.1567382813, 44.076244354248, 0, 0, 230);
CreateObject(6986, 1273.7606201172, -1705.2175292969, 60.596656799316, 0, 0, 270);
CreateObject(7315, 1281.4304199219, -1675.9461669922, 46.618942260742, 0, 0, 0);
CreateObject(7666, 1223.6802978516, -1702.7498779297, 30.646873474121, 0, 0, 298); //
CreateObject(7666, 1257.1669921875, -1702.6239013672, 30.620574951172, 0, 0, 297.99865722656);
CreateObject(8618, 1216.8260498047, -1703.3439941406, 25.552778244019, 0, 0, 0);
CreateObject(8618, 1263.78515625, -1703.619140625, 25.552778244019, 0, 0, 0); //
CreateObject(7288, 1240.4030761719, -1702.5142822266, 30.830974578857, 0, 0, 90);
CreateObject(974, 1286.3283691406, -1656.7772216797, 15.324615478516, 0, 0, 270);
CreateObject(974, 1286.4072265625, -1647.5903320313, 15.324615478516, 0, 0, 270);
CreateObject(1251, 1247.2145996094, -1732.8704833984, 12.694139480591, 0, 0, 0); //
CreateObject(1251, 1243.2381591797, -1732.8375244141, 12.69211769104, 0, 0, 0);
CreateObject(1251, 1239.5920410156, -1732.8172607422, 12.690286636353, 0, 0, 0);
CreateObject(1251, 1235.8666992188, -1732.7946777344, 12.688411712646, 0, 0, 0);
CreateObject(1251, 1230.4948730469, -1725.6364746094, 12.670921325684, 0, 0, 0);
CreateObject(1251, 1226.9030761719, -1725.6138916016, 12.670850753784, 0, 0, 0);
CreateObject(1251, 1223.2504882813, -1725.638671875, 12.670928955078, 0, 0, 0);
CreateObject(1251, 1219.7019042969, -1725.5963134766, 12.670793533325, 0, 0, 0);
CreateObject(1251, 1216.2634277344, -1725.6480712891, 12.671014785767, 0, 0, 0);
CreateObject(1251, 1212.6423339844, -1725.642578125, 12.67094039917, 0, 0, 0);
CreateObject(1251, 1208.5859375, -1725.7150878906, 12.671171188354, 0, 0, 0);
CreateObject(1251, 1198.3197021484, -1730.0495605469, 12.674522399902, 0, 0, 0);
CreateObject(1251, 1202.0339355469, -1729.9696044922, 12.674444198608, 0, 0, 0);
CreateObject(1251, 1206.2368164063, -1729.8081054688, 12.677122116089, 0, 0, 0);
CreateObject(1468, 1247.4398193359, -1735.3845214844, 13.864614486694, 0, 0, 90);
CreateObject(1468, 1247.431640625, -1730.2268066406, 13.852012634277, 0, 0, 90); //
CreateObject(1468, 1225.3610839844, -1722.1828613281, 13.815784454346, 0, 0, 179.99450683594);
CreateObject(1468, 1220.1296386719, -1722.2033691406, 13.815784454346, 0, 0, 179.99450683594);
CreateObject(1468, 1214.8217773438, -1722.1948242188, 13.815784454346, 0, 0, 179.99450683594);
CreateObject(1468, 1210.2635498047, -1722.2266845703, 13.815784454346, 0, 0, 179.99450683594);
CreateObject(1468, 1205.0799560547, -1722.1750488281, 13.815784454346, 0, 0, 179.99450683594);
CreateObject(1468, 1199.8464355469, -1722.1644287109, 13.815784454346, 0, 0, 179.99450683594);
CreateObject(1468, 1194.611328125, -1722.1904296875, 13.815784454346, 0, 0, 179.99450683594);
CreateObject(1468, 1192.5247802734, -1722.1936035156, 13.815784454346, 0, 0, 179.99450683594);
CreateObject(1468, 1189.9530029297, -1724.8774414063, 13.823847770691, 0, 0, 269.99450683594);
CreateObject(1468, 1189.9559326172, -1730.1059570313, 13.830231666565, 0, 0, 269.98901367188);
CreateObject(1468, 1189.9605712891, -1735.4353027344, 13.8367395401, 0, 0, 269.98901367188);
CreateObject(1468, 1189.9594726563, -1740.6569824219, 13.843114852905, 0, 0, 269.98901367188);
CreateObject(1468, 1192.5844726563, -1743.3479003906, 13.850431442261, 0, 0, 359.98901367188);
CreateObject(1468, 1197.8540039063, -1743.3464355469, 13.859693527222, 0, 0, 359.98400878906);
CreateObject(1468, 1203.0847167969, -1743.3516845703, 13.860971450806, 0, 0, 359.98352050781);
CreateObject(1468, 1208.3404541016, -1743.3608398438, 13.862255096436, 0, 0, 359.98352050781);
CreateObject(1468, 1213.5964355469, -1743.3620605469, 13.863538742065, 0, 0, 359.98352050781);
CreateObject(1468, 1218.8225097656, -1743.3450927734, 13.864814758301, 0, 0, 359.98352050781);
CreateObject(1468, 1224.0692138672, -1743.3203125, 13.866096496582, 0, 0, 359.98352050781);
CreateObject(1468, 1229.3435058594, -1743.3128662109, 13.867383956909, 0, 0, 359.98352050781);
CreateObject(1468, 1247.4250488281, -1724.9481201172, 13.836675643921, 0, 0, 269.99450683594);
CreateObject(10236, 1247.1591796875, -1736.880859375, 30.206302642822, 0, 0, 179.99450683594);
CreateObject(1251, 1198.1864013672, -1740.1702880859, 12.688020706177, 0, 0, 0);
CreateObject(1251, 1202.1676025391, -1740.0749511719, 12.6897315979, 0, 0, 0);
CreateObject(1251, 1206.3951416016, -1739.9388427734, 12.691465377808, 0, 0, 0);
CreateObject(1251, 1210.4204101563, -1739.8605957031, 12.693241119385, 0, 0, 0);
CreateObject(1251, 1212.7470703125, -1739.8665771484, 12.699106216431, 0, 0, 0);
CreateObject(1251, 1216.3996582031, -1739.9173583984, 12.699998855591, 0, 0, 0);
CreateObject(1251, 1219.9112548828, -1739.8977050781, 12.700857162476, 0, 0, 0);
CreateObject(1251, 1223.4416503906, -1740.0654296875, 12.701719284058, 0, 0, 0);
CreateObject(1251, 1226.6169433594, -1740.0395507813, 12.702493667603, 0, 0, 0);
CreateObject(1468, 1230.5740966797, -1722.1978759766, 13.815784454346, 0, 0, 179.99450683594);
CreateObject(1468, 1244.7994384766, -1722.3271484375, 13.823875427246, 0, 0, 179.99450683594);
CreateObject(1468, 1242.5833740234, -1722.4150390625, 13.823844909668, 0, 0, 179.99450683594);
CreateObject(7586, 1248.0751953125, -1680.7744140625, 40.243709564209, 0, 0, 0);
CreateObject(14628, 1256.8023681641, -1737.0552978516, 26.062938690186, 0, 0, 0);
CreateObject(3528, 1264.1701660156, -1737.94921875, 30.264820098877, 0, 0, 86);
CreateObject(3528, 1251.3715820313, -1737.47265625, 30.327159881592, 0, 0, 85.995483398438); //

CreateObject(7315,1258.046,-1682.765,38.050,0.0,0.0,90.000);
	CreateObject(8618,1243.448,-1689.881,10.753,0.0,0.0,0.0);
	CreateObject(14637,1242.970,-1690.198,23.830,0.0,0.0,-90.000);
	CreateObject(1536,1216.816,-1694.584,18.705,0.0,0.0,90.000);
	CreateObject(1536,1216.773,-1691.620,18.702,0.0,0.0,270.000);
	CreateObject(1980,1216.733,-1692.426,20.371,0.0,0.0,0.0);
	CreateObject(14624,1261.703,-1611.219,-3.889,0.0,0.0,-78.750);
	CreateObject(14606,1253.721,-1619.840,-5.206,0.0,0.0,11.250);
	CreateObject(16773,1265.483,-1603.386,-6.031,0.0,0.0,191.250);
	CreateObject(16773,1241.495,-1608.384,-3.901,0.0,0.0,191.250);
	CreateObject(16773,1289.838,-1598.714,-5.776,0.0,0.0,191.250);
	CreateObject(16773,1289.058,-1598.900,0.927,0.0,0.0,191.250);
	CreateObject(16773,1273.676,-1601.759,-6.031,0.0,0.0,191.250);
	CreateObject(1895,1281.131,-1600.739,-7.700,0.0,0.0,11.250);
	CreateObject(1895,1277.633,-1601.414,-7.750,0.0,0.0,11.250);
	CreateObject(1978,1273.999,-1614.803,-8.848,0.0,0.0,11.250);
	CreateObject(1978,1277.692,-1613.925,-8.854,0.0,0.0,191.250);
	CreateObject(1978,1274.819,-1609.220,-8.854,0.0,0.0,281.250);
	CreateObject(1979,1278.130,-1615.242,-8.856,0.0,0.0,219.261);
	CreateObject(1979,1273.538,-1613.526,-8.874,0.0,0.0,219.261);
	CreateObject(1979,1276.102,-1608.757,-8.906,0.0,0.0,219.261);
	CreateObject(2188,1279.167,-1626.528,-8.919,0.0,0.0,11.250);
	CreateObject(2188,1278.824,-1624.033,-8.919,0.0,0.0,191.250);
	CreateObject(2188,1276.265,-1624.541,-8.919,0.0,0.0,191.250);
	CreateObject(2188,1276.611,-1627.007,-8.919,0.0,0.0,11.250);
	CreateObject(2754,1286.512,-1607.670,-9.007,0.0,0.0,11.250);
	CreateObject(2754,1286.670,-1608.467,-9.007,0.0,0.0,11.250);
	CreateObject(2754,1286.812,-1609.266,-9.007,0.0,0.0,11.250);
	CreateObject(2754,1286.940,-1610.062,-9.007,0.0,0.0,11.250);
	CreateObject(2785,1285.923,-1632.415,-9.062,0.0,0.0,191.250);
	CreateObject(2785,1279.308,-1633.521,-9.060,0.0,0.0,191.250);
	CreateObject(1491,1252.997,-1617.071,-9.917,0.0,0.0,11.250);
	CreateObject(1506,1249.969,-1618.715,-9.913,0.0,0.0,11.250);
	CreateObject(1536,1265.151,-1603.535,-9.987,0.0,0.0,11.250);
	CreateObject(1536,1268.038,-1602.913,-9.984,0.0,0.0,191.250);
	CreateObject(2773,1279.987,-1625.202,-9.388,0.0,0.0,11.250);
	CreateObject(2773,1276.312,-1602.699,-9.381,0.0,0.0,11.250);
	CreateObject(2773,1276.683,-1604.581,-9.388,0.0,0.0,11.250);
	CreateObject(2773,6.912,18.945,3.056,0.0,0.0,11.250);
	CreateObject(2773,1277.058,-1606.467,-9.388,0.0,0.0,11.250);
	CreateObject(2773,1278.246,-1607.224,-9.388,0.0,0.0,101.250);
	CreateObject(2773,1277.078,-1610.971,-9.388,0.0,0.0,11.250);
	CreateObject(2773,1274.057,-1611.462,-9.381,0.0,0.0,191.250);
	CreateObject(2773,1287.125,-1614.546,-9.390,0.0,0.0,101.250);
	CreateObject(2773,1285.244,-1614.916,-9.388,0.0,0.0,101.250);
	CreateObject(2773,1280.324,-1615.904,-9.388,0.0,0.0,101.250);
	CreateObject(2773,1278.457,-1616.323,-9.381,0.0,0.0,101.250);
	CreateObject(14537,1265.011,-1636.259,-7.983,0.0,0.0,11.250);
	CreateObject(1455,1268.763,-1632.788,-8.742,0.0,0.0,0.0);
	CreateObject(1455,1265.000,-1631.469,-8.742,0.0,0.0,0.0);
	CreateObject(1455,1267.841,-1631.160,-8.742,0.0,0.0,0.0);
	CreateObject(1455,1267.748,-1630.987,-8.742,0.0,0.0,45.000);
	CreateObject(1455,1260.089,-1633.345,-8.742,0.0,0.0,45.000);
	CreateObject(1455,1259.943,-1632.877,-8.742,0.0,0.0,78.750);
	CreateObject(1486,1263.296,-1631.664,-8.669,0.0,0.0,0.0);
	CreateObject(1486,1263.693,-1631.492,-8.669,0.0,0.0,22.500);
	CreateObject(1486,1263.339,-1631.297,-8.669,0.0,0.0,56.250);
	CreateObject(1486,1268.742,-1632.230,-8.669,0.0,0.0,90.000);
	CreateObject(1509,1268.575,-1632.100,-8.616,0.0,0.0,33.750);
	CreateObject(1509,1267.220,-1631.121,-8.616,0.0,0.0,56.250);
	CreateObject(1517,1267.449,-1631.245,-8.614,0.0,0.0,56.250);
	CreateObject(1517,1260.414,-1632.841,-8.614,0.0,0.0,56.250);
	CreateObject(1517,1264.570,-1631.016,-8.614,0.0,0.0,78.750);
	CreateObject(1517,1270.114,-1634.392,-8.614,0.0,0.0,90.000);
	CreateObject(1520,1267.829,-1631.410,-8.754,0.0,0.0,0.0);
	CreateObject(1520,1269.786,-1634.310,-8.754,0.0,0.0,67.500);
	CreateObject(1520,1269.214,-1633.933,-8.754,0.0,0.0,101.250);
	CreateObject(1520,1261.930,-1632.395,-8.754,0.0,0.0,101.250);
	CreateObject(1543,1269.050,-1633.489,-8.818,0.0,0.0,0.0);
	CreateObject(1543,1269.498,-1634.318,-8.818,0.0,0.0,11.250);
	CreateObject(1543,1266.008,-1631.474,-8.818,0.0,0.0,11.250);
	CreateObject(1664,1269.103,-1633.750,-8.647,0.0,0.0,56.250);
	CreateObject(1516,1277.827,-1602.943,-9.729,0.0,0.0,11.250);
	CreateObject(1516,1281.414,-1602.229,-9.729,0.0,0.0,11.250);
	CreateObject(1711,1293.763,-1600.345,-7.728,0.0,0.0,281.250);
	CreateObject(1724,1287.468,-1601.430,-7.727,0.0,0.0,101.250);
	CreateObject(1723,1289.662,-1599.769,-7.752,0.0,0.0,11.250);
	CreateObject(1805,1276.655,-1614.630,-9.649,0.0,0.0,11.250);
	CreateObject(1896,1277.835,-1602.945,-8.923,0.0,0.0,11.250);
	CreateObject(1896,1281.242,-1602.144,-8.917,0.0,0.0,11.250);
	CreateObject(1433,1290.466,-1602.490,-7.545,0.0,0.0,101.250);
	CreateObject(1433,1291.526,-1602.268,-7.545,0.0,0.0,101.250);
	CreateObject(1723,1288.244,-1606.337,-7.752,0.0,0.0,101.250);
	CreateObject(1433,1291.535,-1605.172,-7.545,0.0,0.0,101.250);
	CreateObject(1724,1294.338,-1603.007,-7.727,0.0,0.0,281.250);
	CreateObject(1724,1294.828,-1605.011,-7.727,0.0,0.0,281.250);
	CreateObject(2374,1254.087,-1622.177,-8.431,0.0,0.0,101.250);
	CreateObject(2374,1254.001,-1622.899,-8.356,0.0,0.0,101.250);
	CreateObject(2396,1253.960,-1623.057,-9.434,0.0,0.0,101.250);
	CreateObject(2396,1253.631,-1621.589,-8.358,0.0,0.0,101.250);
	CreateObject(2399,1253.654,-1621.693,-9.402,0.0,0.0,101.250);
	CreateObject(1711,1256.130,-1626.898,-9.908,0.0,0.0,191.250);
	CreateObject(1433,1255.366,-1624.223,-9.725,0.0,0.0,101.250);
	CreateObject(1724,1258.230,-1625.288,-9.907,0.0,0.0,247.500);
	CreateObject(1724,1258.338,-1623.040,-9.907,0.0,0.0,281.250);
	CreateObject(15053,1260.093,-1615.195,-20.155,0.0,0.0,11.250);
	CreateObject(1506,1262.402,-1630.764,-21.411,0.0,0.0,11.250);
	CreateObject(1506,1260.028,-1618.710,-21.410,0.0,0.0,11.250);
	CreateObject(1491,1264.620,-1626.848,-21.426,0.0,0.0,101.250);
	CreateObject(1523,1259.687,-1623.771,-21.418,0.0,0.0,101.250);
	CreateObject(1523,1260.009,-1626.196,-21.443,0.0,0.0,-78.750);
	CreateObject(17566,1257.125,-1625.589,-21.535,0.0,0.0,-78.750);
	CreateObject(17566,1255.998,-1625.829,-21.527,0.0,0.0,-78.750);
	CreateObject(13187,1256.071,-1625.670,-18.800,0.0,0.0,101.250);
	CreateObject(13188,1253.194,-1624.610,-20.108,0.0,0.0,101.250);
	CreateObject(13188,1252.953,-1623.007,-20.245,0.0,0.0,101.250);
	CreateObject(13188,1252.597,-1621.495,-20.208,0.0,0.0,101.250);
	CreateObject(1523,1255.458,-1624.106,-21.438,0.0,0.0,101.250);
	CreateObject(1523,1255.312,-1622.507,-21.436,0.0,0.0,101.250);
	CreateObject(1523,1255.791,-1625.689,-21.418,0.0,0.0,101.250);
	CreateObject(1523,1255.800,-1625.810,-21.439,0.0,0.0,281.250);
	CreateObject(1523,1256.121,-1627.436,-21.435,0.0,0.0,281.250);
	CreateObject(1523,1256.462,-1629.032,-21.468,0.0,0.0,281.250);
	CreateObject(13188,1253.857,-1627.827,-20.108,0.0,0.0,101.250);
	CreateObject(13188,1254.219,-1629.438,-20.108,0.0,0.0,101.250);
	CreateObject(13188,1254.524,-1631.029,-20.108,0.0,0.0,101.250);
	CreateObject(2514,1254.732,-1628.562,-21.406,0.0,0.0,101.250);
	CreateObject(2514,1255.040,-1630.037,-21.406,0.0,0.0,101.250);
	CreateObject(2514,1254.363,-1626.899,-21.399,0.0,0.0,101.250);
	CreateObject(2514,1253.510,-1622.039,-21.406,0.0,0.0,101.250);
	CreateObject(2514,1253.758,-1623.667,-21.406,0.0,0.0,101.250);
	CreateObject(2514,1254.130,-1625.352,-21.406,0.0,0.0,101.250);
	CreateObject(2518,1258.442,-1621.110,-21.317,0.0,0.0,-78.750);
	CreateObject(2518,1258.235,-1620.203,-21.367,0.0,0.0,-78.750);
	CreateObject(2518,1260.026,-1629.078,-21.467,0.0,0.0,-78.750);
	CreateObject(2518,1260.180,-1630.116,-21.517,0.0,0.0,-78.750);
	CreateObject(2518,1260.433,-1631.191,-21.542,0.0,0.0,-78.750);
	CreateObject(2632,1257.734,-1634.521,-21.359,0.0,0.0,11.250);
	CreateObject(2631,1257.368,-1632.724,-21.359,0.0,0.0,11.250);
	CreateObject(2685,1256.701,-1619.527,-19.973,0.0,0.0,11.250);
	CreateObject(1254,1259.610,-1623.019,-18.659,0.0,0.0,101.250);
	CreateObject(1314,1264.307,-1626.227,-18.645,0.0,0.0,112.500);
	CreateObject(1240,1264.345,-1626.222,-18.320,0.0,0.0,101.250);
	CreateObject(1247,1260.345,-1626.961,-18.626,0.0,0.0,101.250);
//--------------------------------------------- Casino : Fin ---------------------------------------------


// ---------------- Gare --------------------
CreateObject(970, 1843.682861, -1873.925903, 12.941229, 0.0000, 0.0000, 179.9996);
CreateObject(970, 1845.736938, -1871.851929, 12.934294, 0.0000, 0.0000, 89.9994);
CreateObject(970, 1845.729980, -1867.710083, 12.934294, 0.0000, 0.0000, 89.9994);
CreateObject(970, 1845.718506, -1863.595825, 12.934294, 0.0000, 0.0000, 89.9994);
CreateObject(970, 1845.686768, -1859.451050, 12.931114, 0.0000, 0.0000, 89.9994);
CreateObject(971, 1843.645874, -1855.435791, 11.627811, 0.0000, 0.0000, 89.9994);
CreateObject(970, 1839.557251, -1873.931152, 12.941229, 0.0000, 0.0000, 0.0000);
CreateObject(970, 1835.428467, -1873.946411, 12.941229, 0.0000, 0.0000, 0.0000);
CreateObject(970, 1833.323120, -1873.953369, 12.934989, 0.0000, 0.0000, 0.0000);
CreateObject(970, 1833.707764, -1849.773315, 12.879610, 0.0000, 0.0000, 89.9994);
CreateObject(970, 1833.709717, -1853.880981, 12.891230, 0.0000, 0.0000, 89.9994);
CreateObject(970, 1833.734009, -1857.984741, 12.866230, 0.0000, 0.0000, 89.9994);
CreateObject(970, 1835.830078, -1850.833984, 12.941229, 0.0000, 0.0000, 0.0000);
CreateObject(970, 1839.949829, -1850.850830, 12.941229, 0.0000, 0.0000, 0.0000);
CreateObject(970, 1844.085205, -1850.837280, 12.937073, 0.0000, 0.0000, 0.0000);
CreateObject(1251, 1835.085449, -1854.333862, 12.494432, 0.0000, 0.0000, 0.0000);
CreateObject(1251, 1838.265625, -1854.295410, 12.494432, 0.0000, 0.0000, 0.0000);
CreateObject(1251, 1841.468750, -1854.347412, 12.487497, 0.0000, 0.0000, 0.0000); // Bande rouge/blanches
CreateObject(1251, 1842.862915, -1870.611694, 12.494433, 0.0000, 0.0000, 0.0000);
CreateObject(1251, 1839.661011, -1870.534790, 12.494433, 0.0000, 0.0000, 0.0000);
CreateObject(1251, 1836.473022, -1870.388184, 12.494431, 0.0000, 0.0000, 0.0000);
CreateObject(1251, 1833.252563, -1870.440186, 12.487497, 0.0000, 0.0000, 0.0000);
CreateObject(970, 1829.255737, -1873.975830, 12.888783, 0.0000, 0.0000, 0.0000);
CreateObject(970, 1826.610718, -1846.894531, 12.965544, 0.0000, 0.0000, 89.9994);
CreateObject(970, 1826.648926, -1838.408325, 12.965544, 0.0000, 0.0000, 89.9994);
CreateObject(970, 1826.595215, -1851.006836, 12.965544, 0.0000, 0.0000, 89.9994);
CreateObject(970, 1826.645264, -1834.312866, 12.965544, 0.0000, 0.0000, 89.9994);
CreateObject(1697, 1853.995483, -1847.581421, 17.679916, 0.0000, 0.0000, 269.9998);
//CreateObject(4859, 1893.140503, -1836.173096, 13.444027, 0.0000, 0.0000, 0.0000); // Sol au dessus égouts (peu etre remplacé par "county" ?)
//CreateObject(4859, 1874.980103, -1823.744019, 13.555065, 0.0000, 0.0000, 179.9996); // Sol au dessus égouts
CreateObject(646, 1826.557861, -1844.492920, 13.830586, 0.0000, 0.0000, 0.0000);
CreateObject(646, 1826.574951, -1840.565186, 13.830586, 0.0000, 0.0000, 0.0000);
//CreateObject(683, 1896.169434, -1871.027466, 12.666733, 0.0000, 0.0000, 0.0000);
//CreateObject(683, 1892.539551, -1853.026123, 12.695969, 0.0000, 0.0000, 157.0011);
//CreateObject(13132, 1888.153320, -1860.818359, 15.825153, 0.0000, 0.0000, 0.0000);
//CreateObject(9833, 1881.968262, -1873.005737, 15.725832, 0.0000, 0.0000, 0.0000);
//CreateObject(9833, 1883.807495, -1849.497559, 15.776485, 0.0000, 0.0000, 0.0000);
CreateObject(3472, 1826.650513, -1853.418945, 12.783222, 0.0000, 0.0000, 112.0009);
CreateObject(3472, 1826.744019, -1831.978638, 12.947285, 0.0000, 0.0000, 0.0000);
CreateObject(970, 1826.595337, -1855.801880, 12.965544, 0.0000, 0.0000, 89.9994);
CreateObject(970, 1826.596436, -1857.897827, 12.965544, 0.0000, 0.0000, 89.9994);
CreateObject(970, 1826.646484, -1829.668579, 12.965544, 0.0000, 0.0000, 89.9994);
//CreateObject(3877, 1826.828369, -1860.497070, 14.084163, 0.0000, 0.0000, 269.9998);
//CreateObject(3877, 1826.891846, -1873.409058, 13.973882, 0.0000, 0.0000, 0.0000);
CreateObject(1215, 1826.818359, -1860.520142, 15.643494, 0.0000, 0.0000, 0.0000);
CreateObject(1215, 1826.855591, -1873.413086, 15.533213, 0.0000, 0.0000, 0.0000);
CreateObject(3471, 1833.668701, -1689.479248, 13.738222, 0.0000, 0.0000, 179.9996);
CreateObject(3471, 1833.627563, -1675.175903, 13.736799, 0.0000, 0.0000, 179.9996);
CreateObject(996, 1831.199219, -1693.839478, 13.295630, 0.0000, 0.0000, 89.9994);
CreateObject(996, 1831.329346, -1677.392944, 13.295630, 0.0000, 0.0000, 89.9994);
CreateObject(997, 1831.257080, -1678.148438, 12.647193, 0.0000, 0.0000, 0.0000);
CreateObject(997, 1831.132813, -1686.245117, 12.647193, 0.0000, 0.0000, 0.0000);
CreateObject(983, 1865.035522, -1862.977661, 13.265372, 0.0000, 0.0000, 89.9994);
CreateObject(983, 1865.061401, -1858.176270, 13.264194, 0.0000, 0.0000, 269.9998);
CreateObject(983, 1864.939209, -1852.605469, 13.262809, 0.0000, 0.0000, 269.9998);
CreateObject(983, 1864.975464, -1846.938477, 13.261382, 0.0000, 0.0000, 89.9994);
CreateObject(984, 1861.790161, -1853.300415, 13.216927, 0.0000, 0.0000, 0.0000);
CreateObject(983, 1861.784912, -1859.742920, 13.265376, 0.0000, 0.0000, 0.0000);
CreateObject(1270, 1868.396851, -1858.178101, 13.426922, 0.0000, 0.0000, 89.9994);
CreateObject(1270, 1868.290649, -1852.605713, 13.425611, 0.0000, 0.0000, 269.9998);
CreateObject(1270, 1868.330566, -1846.932861, 13.424187, 0.0000, 0.0000, 269.9998);
CreateObject(1238, 1862.236328, -1862.361206, 12.900561, 0.0000, 0.0000, 44.9993);
CreateObject(1238, 1862.249390, -1860.752686, 12.900160, 0.0000, 0.0000, 0.0000);
CreateObject(1238, 1862.259033, -1859.137939, 12.899720, 0.0000, 0.0000, 0.0000);
CreateObject(1238, 1862.220337, -1857.345703, 12.899292, 0.0000, 0.0000, 44.9993);
CreateObject(1238, 1862.212646, -1855.707397, 12.898912, 0.0000, 0.0000, 0.0000);
CreateObject(1238, 1862.290283, -1853.839722, 12.898517, 0.0000, 0.0000, 0.0000);
CreateObject(1238, 1862.297241, -1851.467285, 12.897886, 0.0000, 0.0000, 0.0000);
CreateObject(1238, 1862.338257, -1849.769653, 12.897456, 0.0000, 0.0000, 0.0000);
CreateObject(1238, 1862.336670, -1848.062500, 12.897051, 0.0000, 0.0000, 0.0000);
CreateObject(3877, 1880.816406, -1860.011230, 14.242981, 0.0000, 0.0000, 0.0000);
CreateObject(3877, 1880.705200, -1865.512573, 14.239635, 0.0000, 0.0000, 0.0000);
CreateObject(3877, 1833.001099, -1691.758301, 14.157318, 0.0000, 0.0000, 269.9998);
CreateObject(3877, 1833.093384, -1672.891846, 14.160784, 0.0000, 0.0000, 0.0000);
CreateObject(910, 1502.337891, -1647.742798, 14.288593, 0.0000, 0.0000, 146.0003);
CreateObject(928, 1500.092163, -1646.085327, 13.294972, 0.0000, 0.0000, 0.0000);
CreateObject(928, 1499.984131, -1646.563965, 13.295978, 0.0000, 0.0000, 0.0000);
CreateObject(1264, 1501.884033, -1644.544067, 13.497151, 0.0000, 0.0000, 0.0000);
CreateObject(1332, 1498.589111, -1638.755737, 14.109568, 0.0000, 0.0000, 89.9994);
CreateObject(4724, 1509.424194, -1637.698853, 15.073852, 0.0000, 0.0000, 0.0000);
CreateObject(11496, 1812.149292, -1876.647827, 12.391964, 0.0000, 0.0000, 0.0000);
CreateObject(11496, 1812.087280, -1862.067993, 12.395449, 0.0000, 0.0000, 0.0000);
CreateObject(11496, 1812.080688, -1847.467773, 12.403221, 0.0000, 0.0000, 0.0000);
CreateObject(11496, 1802.229736, -1855.751587, 12.239159, 0.0000, 0.0000, 269.9998);
CreateObject(11496, 1802.251343, -1854.519287, 12.214254, 0.0000, 0.0000, 89.9994);
CreateObject(11496, 1787.655640, -1854.550415, 12.239159, 0.0000, 0.0000, 89.9994);
CreateObject(11496, 1777.836182, -1854.500854, 12.239159, 0.0000, 0.0000, 89.9994);
CreateObject(11496, 1787.624268, -1855.854370, 12.239254, 0.0000, 0.0000, 269.9998);
CreateObject(11496, 1777.808228, -1855.769409, 12.239254, 0.0000, 0.0000, 269.9998);
CreateObject(11496, 1763.212524, -1855.806763, 12.214159, 0.0000, 0.0000, 269.9998);
CreateObject(11496, 1748.667358, -1855.889893, 12.214159, 0.0000, 0.0000, 269.9998);
CreateObject(11496, 1763.252441, -1854.532593, 12.239254, 0.0000, 0.0000, 89.9994);
CreateObject(11496, 1748.641479, -1854.590942, 12.214254, 0.0000, 0.0000, 89.9994);
CreateObject(11496, 1734.051270, -1854.638916, 12.239159, 0.0000, 0.0000, 89.9994);
CreateObject(11496, 1734.052490, -1855.955200, 12.214254, 0.0000, 0.0000, 269.9998);
CreateObject(11496, 1725.306641, -1855.056885, 12.339157, 0.0000, 0.0000, 179.9996);
CreateObject(1223, 1807.066162, -1850.315552, 12.402039, 0.0000, 0.0000, 269.9998);
CreateObject(1223, 1802.250610, -1859.719971, 12.426943, 0.0000, 0.0000, 89.9994);
CreateObject(1223, 1797.812988, -1850.380005, 12.402039, 0.0000, 0.0000, 269.9998);
CreateObject(1223, 1792.452881, -1859.694336, 12.427038, 0.0000, 0.0000, 89.9994);
CreateObject(1223, 1787.583130, -1850.411621, 12.426943, 0.0000, 0.0000, 269.9998);
CreateObject(1223, 1782.706055, -1859.667847, 12.427038, 0.0000, 0.0000, 89.9994);
CreateObject(1223, 1777.703979, -1850.401123, 12.426943, 0.0000, 0.0000, 269.9998);
CreateObject(1223, 1772.909546, -1859.628296, 12.427038, 0.0000, 0.0000, 89.9994);
CreateObject(1223, 1767.695313, -1850.638916, 12.565910, 0.0000, 0.0000, 258.0021);
CreateObject(1223, 1763.166382, -1859.494019, 12.401943, 0.0000, 0.0000, 78.0016);
CreateObject(1223, 1758.275146, -1850.556519, 12.427038, 0.0000, 0.0000, 269.9998);
CreateObject(1223, 1753.735962, -1859.719482, 12.401943, 0.0000, 0.0000, 89.9994);
CreateObject(1223, 1748.643188, -1850.694458, 12.402039, 0.0000, 0.0000, 269.9998);
CreateObject(1223, 1743.748291, -1859.682617, 12.401943, 0.0000, 0.0000, 89.9994);
CreateObject(1223, 1739.120728, -1850.650879, 12.426943, 0.0000, 0.0000, 281.0006);
CreateObject(1223, 1734.366455, -1859.619385, 12.402039, 0.0000, 0.0000, 89.9994);
CreateObject(1223, 1729.145752, -1850.707397, 12.426943, 0.0000, 0.0000, 269.9998);
CreateObject(1223, 1724.766357, -1859.508545, 12.526941, 0.0000, 0.0000, 78.0016);
CreateObject(1432, 1725.586060, -1852.235840, 12.670958, 0.0000, 0.0000, 0.0000);
CreateObject(1432, 1722.795776, -1855.101685, 12.670958, 0.0000, 0.0000, 0.0000);
CreateObject(1432, 1725.737793, -1857.945923, 12.670958, 0.0000, 0.0000, 0.0000);
CreateObject(1256, 1802.242920, -1850.967041, 13.073709, 0.0000, 0.0000, 89.9994);
CreateObject(1256, 1788.052246, -1859.163940, 13.098709, 0.0000, 0.0000, 269.9998);
CreateObject(1256, 1773.234253, -1851.214844, 13.098614, 0.0000, 0.0000, 89.9994);
CreateObject(1256, 1758.286987, -1859.257690, 13.073614, 0.0000, 0.0000, 269.9998);
CreateObject(1256, 1748.499512, -1851.428711, 13.073709, 0.0000, 0.0000, 89.9994);
CreateObject(1256, 1729.126831, -1859.310059, 13.073709, 0.0000, 0.0000, 269.9998);
CreateObject(1223, 1816.213257, -1881.525024, 12.579748, 0.0000, 0.0000, 179.9996);
CreateObject(1223, 1816.230591, -1871.727905, 12.579748, 0.0000, 0.0000, 179.9996);
CreateObject(1223, 1816.235474, -1861.870972, 12.583233, 0.0000, 0.0000, 179.9996);
CreateObject(1223, 1816.249390, -1852.220337, 12.591005, 0.0000, 0.0000, 179.9996);
CreateObject(1223, 1816.264648, -1842.268066, 12.591005, 0.0000, 0.0000, 179.9996);
CreateObject(910, 1857.507568, -1836.664063, 13.850544, 0.0000, 0.0000, 89.9994);
CreateObject(923, 1857.604370, -1841.685303, 13.460909, 0.0000, 0.0000, 89.9994);
CreateObject(1264, 1857.698975, -1843.129639, 13.053205, 0.0000, 0.0000, 0.0000);
CreateObject(1439, 1857.430664, -1839.298462, 12.697224, 0.0000, 0.0000, 89.9994);
CreateObject(1413, 1856.771362, -1864.672485, 13.857114, 0.0000, 0.0000, 89.9994);
CreateObject(1413, 1856.793457, -1859.359375, 13.870255, 0.0000, 0.0000, 89.9994);
CreateObject(983, 1354.910645, -1742.565430, 13.230430, 0.0000, 0.0000, 89.9994);
CreateObject(983, 1338.300903, -1742.382935, 13.230430, 0.0000, 0.0000, 89.9994);
CreateObject(3461, 1341.685669, -1742.376099, 13.962377, 0.0000, 0.0000, 0.0000);
CreateObject(3461, 1351.561768, -1742.645264, 13.962464, 0.0000, 0.0000, 0.0000);
CreateObject(1432, 1811.179321, -1842.921021, 12.735022, 0.0000, 0.0000, 22.0007);
CreateObject(1432, 1811.223022, -1848.057617, 12.735022, 0.0000, 0.0000, 269.9998);
CreateObject(1281, 1811.542725, -1866.720703, 13.395830, 0.0000, 0.0000, 326.0007);
CreateObject(1281, 1811.412109, -1862.882935, 13.395830, 0.0000, 0.0000, 326.0007);
CreateObject(1270, 1868.399048, -1862.984863, 13.428108, 0.0000, 0.0000, 101.2500);
//CreateObject(16021, 1871.958984, -1807.070801, 12.344658, 0.0000, 0.0000, 90.0000);
/*CreateObject(6387, 1864.9625244141, -1798.3145751953, 16.113624572754, 0, 0, 89.325012207031);
CreateObject(4641, 1833.2366943359, -1790.7578125, 14.324648857117, 0, 0, 0);
CreateObject(4641, 1897.0069580078, -1790.9080810547, 14.324648857117, 0, 0, 0);*/
CreateObject(2754, 1833.136475, -1847.158691, 13.484954, 0.0000, 0.0000, 359.1406); //cajeros inicio
CreateObject(2754, 1466.777222, -1749.810059, 15.345299, 0.0000, 0.0000, 269.1406); //
CreateObject(2754, 1138.440063, -1863.270264, 13.672905, 0.0000, 0.0000, 269.1406); //
CreateObject(2754, 1269.995850, -1325.437256, 13.424986, 0.0000, 0.0000, 359.1406); //
CreateObject(2754, -1493.195801, 935.275208, 7.112504, 0.0000, 0.0000, 359.1406); //
CreateObject(2754, -1980.716187, 133.170456, 27.587486, 0.0000, 0.0000, 359.1406); //
CreateObject(2754, -2035.546631, -101.942192, 35.066208, 0.0000, 0.0000, 269.1405); //cajeros fin


// ---------------- 24/7 Mairie --------------------
CreateObject(1349, 1361.2702636719, -1758.0704345703, 13.078197479248, 0, 0, 90);
CreateObject(1349, 1360.3469238281, -1757.9672851563, 13.078197479248, 0, 0, 90);
CreateObject(1349, 1359.4320068359, -1757.9609375, 13.078197479248, 0, 0, 90);
CreateObject(1349, 1358.5872802734, -1757.9483642578, 13.078197479248, 0, 0, 90);
CreateObject(1349, 1362.1314697266, -1758.0434570313, 13.078197479248, 0, 0, 90);
CreateObject(1349, 1347.3366699219, -1757.8941650391, 13.078197479248, 0, 0, 90);
CreateObject(1349, 1346.3458251953, -1757.8275146484, 13.085966110229, 0, 0, 90);
CreateObject(1349, 1345.4272460938, -1757.8640136719, 13.085966110229, 0, 0, 90);
CreateObject(1349, 1344.4443359375, -1757.8543701172, 13.085966110229, 0, 0, 90);
CreateObject(1349, 1343.4638671875, -1757.8682861328, 13.085966110229, 0, 0, 90);
CreateObject(2905, 1338.7142333984, -1776.1112060547, 12.631238937378, 0, 0, 306);
CreateObject(2906, 1339.2961425781, -1794.8154296875, 12.628665924072, 0, 0, 0);
CreateObject(2907, 1337.4328613281, -1817.1967773438, 12.706911087036, 0, 0, 0);
CreateObject(2908, 1340.0286865234, -1835.7081298828, 12.641716957092, 0, 0, 0);
CreateObject(3092, 1336.8170166016, -1771.6800537109, 24.169504165649, 0, 0, 268);
CreateObject(1775, 1349.8540039063, -1759.0339355469, 13.604848861694, 0, 0, 180);
CreateObject(1775, 1354.9171142578, -1759.0635986328, 13.604848861694, 0, 0, 179.99450683594);
CreateObject(1346, 1337.3978271484, -1754.2917480469, 13.87828540802, 0, 0, 92);
CreateObject(1346, 1337.3914794922, -1752.9698486328, 13.881190299988, 0, 0, 91.99951171875);
CreateObject(1341, 1357.4536132813, -1744.8513183594, 13.549461364746, 0, 0, 290);
CreateObject(1340, 1360.9197998047, -1744.7028808594, 13.674461364746, 0, 0, 96);
CreateObject(1270, 1359.9471435547, -1737.3172607422, 13.393972396851, 0, 0, 0);
CreateObject(1257, 1360.0021972656, -1726.2012939453, 13.818265914917, 0, 0, 90);
CreateObject(1215, 1354.6793212891, -1742.6818847656, 13.111198425293, 0, 0, 0);
CreateObject(1215, 1341.3900146484, -1742.0743408203, 13.111198425293, 0, 0, 0);
CreateObject(1490, 1364.068359375, -1746.9138183594, 13.994853973389, 0, 0, 0);
CreateObject(1526, 1363.8186035156, -1743.6555175781, 15.348929405212, 0, 0, 0);
CreateObject(1527, 1363.818359375, -1757.5631103516, 15.784368515015, 0, 0, 0);
CreateObject(1528, 1363.818359375, -1752.7680664063, 14.086429595947, 0, 0, 0);
CreateObject(1375, 1357.1181640625, -1727.03515625, 14.240985870361, 0, 0, 0);
CreateObject(3091, 1339.1264648438, -1759.7583007813, 13.149669647217, 0, 0, 0);
CreateObject(792, 1338.0710449219, -1756.7504882813, 12.514197349548, 0, 0, 0);
CreateObject(792, 1339.0050048828, -1741.9061279297, 12.546875, 0, 0, 0);
CreateObject(792, 1362.6326904297, -1744.9329833984, 12.548704147339, 0, 0, 0);
CreateObject(792, 1363.0798339844, -1758.5943603516, 12.5078125, 0, 0, 0);
CreateObject(1616, 1360.4993896484, -1758.8273925781, 17.641481399536, 0, 0, 0);
CreateObject(1616, 1343.5423583984, -1758.8083496094, 17.902700424194, 0, 0, 244);
CreateObject(3042, 1342.2895507813, -1760.2933349609, 16.619338989258, 0, 0, 88);
CreateObject(1892, 1351.8413085938, -1758.7353515625, 12.5078125, 0, 0, 0);
CreateObject(2773, 1353.8018798828, -1757.8256835938, 13.025040626526, 0, 0, 0);
CreateObject(2773, 1350.8498535156, -1757.9581298828, 13.025040626526, 0, 0, 0);
CreateObject(1690, 1345.2601318359, -1760.8186035156, 18.765110015869, 0, 0, 90);
CreateObject(1690, 1360.6428222656, -1760.8249511719, 18.765110015869, 0, 0, 90);
CreateObject(1444, 1356.2662353516, -1759.2658691406, 13.3125, 0, 0, 0);
CreateObject(1443, 1348.5573730469, -1759.2512207031, 13.148393630981, 0, 0, 0);
CreateObject(970, 1358.9349365234, -1756.1629638672, 13.059293746948, 0, 0, 0);
CreateObject(970, 1361.0345458984, -1754.0697021484, 13.070563316345, 0, 0, 90);
CreateObject(970, 1361.0278320313, -1749.7901611328, 13.089418411255, 0, 0, 90);
CreateObject(970, 1347.5050048828, -1756.1215820313, 13.059293746948, 0, 0, 0);
CreateObject(970, 1343.5762939453, -1756.1710205078, 13.059293746948, 0, 0, 0);
CreateObject(970, 1341.4898681641, -1754.0074462891, 13.066368103027, 0, 0, 90);
CreateObject(970, 1341.4802246094, -1749.8735351563, 13.07749080658, 0, 0, 90);
CreateObject(970, 1341.4787597656, -1745.7860107422, 13.088474273682, 0, 0, 90);
CreateObject(970, 1358.8103027344, -1747.2495117188, 13.098356246948, 0, 0, 0);
CreateObject(970, 1354.951171875, -1746.2896728516, 13.098356246948, 0, 0, 332);
CreateObject(970, 1352.4107666016, -1743.3607177734, 13.098356246948, 0, 0, 289.99584960938);
CreateObject(970, 1352.8135986328, -1739.6817626953, 13.098356246948, 0, 0, 235.9951171875);
CreateObject(970, 1360.8842773438, -1749.3433837891, 13.168023109436, 0, 0, 90);
CreateObject(970, 1357.1839599609, -1756.0194091797, 13.138792037964, 0, 0, 0);

// -------------- Cyber Café --------------
CreateObject(12843,1132.14611816,-1652.18518066,17.60958862,0.00000000,0.00000000,90.00000000); //object(cos_liquorshop) (3)
CreateObject(12844,1132.15429688,-1655.16210938,19.58743668,0.00000000,0.00000000,90.00000000); //object(cos_liqinside) (3)
CreateObject(984,1139.89636230,-1655.97253418,18.17630577,0.00000000,0.00000000,0.00000000); //object(fenceshit2) (2)
CreateObject(984,1139.85937500,-1643.20019531,18.17623711,0.00000000,0.00000000,0.00000000); //object(fenceshit2) (3)
CreateObject(1256,1139.45214844,-1660.63671875,18.27361488,0.00000000,0.00000000,0.00000000); //object(stonebench1) (1)
CreateObject(1256,1137.39733887,-1654.64978027,18.27160835,0.00000000,0.00000000,180.00000000); //object(stonebench1) (2)
CreateObject(1281,1132.04589844,-1638.63610840,18.37942314,0.00000000,0.00000000,0.00000000); //object(parktable1) (2)
CreateObject(1281,1131.73803711,-1632.33142090,18.35704422,0.00000000,0.00000000,0.00000000); //object(parktable1) (3)
CreateObject(2700,1136.19799805,-1648.73901367,20.38106728,0.00000000,0.00000000,227.99816895); //object(cj_sex_tv2) (1)
CreateObject(2718,1127.86645508,-1657.29199219,20.67165375,0.00000000,0.00000000,90.00000000); //object(cj_fly_killer) (1)
CreateObject(1689,1131.87695312,-1659.60449219,22.87515450,0.00000000,0.00000000,0.00000000); //object(gen_roofbit3) (1)
CreateObject(1691,1131.60913086,-1652.32043457,22.33559799,0.00000000,0.00000000,0.00000000); //object(gen_roofbit5) (1)
CreateObject(927,1129.93188477,-1647.19335938,19.95214081,0.00000000,0.00000000,0.00000000); //object(piping_detail) (1)
CreateObject(1687,1134.62634277,-1648.67248535,22.72567177,0.00000000,0.00000000,0.00000000); //object(gen_roofbit1) (1)
CreateObject(3851,1136.76184082,-1660.15039062,14.36172676,90.00000000,0.00000000,0.00000000); //object(carshowwin_sfsx) (3)
CreateObject(3851,1131.12548828,-1661.92858887,19.61087418,0.00000000,0.00000000,270.00000000); //object(carshowwin_sfsx) (6)
CreateObject(3851,1136.76184082,-1657.61840820,14.36153030,90.00000000,0.00000000,0.00000000); //object(carshowwin_sfsx) (7)
CreateObject(3851,1136.77832031,-1653.68469238,14.36154747,90.00000000,0.00000000,0.00000000); //object(carshowwin_sfsx) (8)
CreateObject(2954,1127.14941406,-1660.25781250,17.66198540,0.00000000,0.00000000,0.00000000); //object(kmb_ot) (1)
CreateObject(2463,1131.98303223,-1648.48767090,17.61467743,0.00000000,0.00000000,0.00000000); //object(cj_hobby_shelf_2) (1)
CreateObject(2463,1134.47363281,-1648.50585938,17.61687469,0.00000000,0.00000000,0.00000000); //object(cj_hobby_shelf_2) (2)
CreateObject(2356,1135.30859375,-1660.73388672,17.61820602,0.00000000,0.00000000,0.00000000); //object(police_off_chair) (1)
CreateObject(2356,1133.70996094,-1660.68688965,17.61820602,0.00000000,0.00000000,0.00000000); //object(police_off_chair) (2)
CreateObject(2356,1130.85095215,-1655.72717285,17.61820602,0.00000000,0.00000000,0.00000000); //object(police_off_chair) (3)
CreateObject(2356,1129.15576172,-1655.82409668,17.61820602,0.00000000,0.00000000,0.00000000); //object(police_off_chair) (4)
CreateObject(2356,1133.76464844,-1658.37951660,17.61820602,0.00000000,0.00000000,0.00000000); //object(police_off_chair) (5)
CreateObject(2356,1133.68115234,-1655.83496094,17.61087418,0.00000000,0.00000000,0.00000000); //object(police_off_chair) (6)
CreateObject(2356,1135.71643066,-1655.82629395,17.61087418,0.00000000,0.00000000,19.99575806); //object(police_off_chair) (7)
CreateObject(2356,1135.65368652,-1658.31176758,17.61087418,0.00000000,0.00000000,29.99267578); //object(police_off_chair) (8)
CreateObject(2356,1131.26696777,-1660.72082520,17.61820602,0.00000000,0.00000000,21.99575806); //object(police_off_chair) (9)
CreateObject(1714,1128.51367188,-1649.26269531,17.61156845,0.00000000,0.00000000,49.99877930); //object(kb_swivelchair1) (1)
CreateObject(2496,1131.81982422,-1648.75085449,18.40769577,0.00000000,0.00000000,0.00000000); //object(vice_toy2_2) (1)
CreateObject(2489,1132.56262207,-1648.75085449,19.66928673,0.00000000,0.00000000,0.00000000); //object(manhunt_toy_2) (1)
CreateObject(2495,1131.92114258,-1648.72326660,19.65613556,0.00000000,0.00000000,0.00000000); //object(vice_toy_2) (1)
CreateObject(2496,1132.74157715,-1648.72326660,18.37088013,0.00000000,0.00000000,0.00000000); //object(vice_toy2_2) (2)
CreateObject(2508,1132.39550781,-1648.72363281,18.53326416,0.00000000,0.00000000,0.00000000); //object(model_toy_4) (1)
CreateObject(2490,1132.30981445,-1648.72265625,19.35093880,0.00000000,0.00000000,0.00000000); //object(vice_toy_1) (1)
CreateObject(2485,1133.50683594,-1648.68139648,17.61616516,0.00000000,0.00000000,0.00000000); //object(model_car_1) (1)
CreateObject(2486,1131.75036621,-1649.10290527,17.61445045,0.00000000,0.00000000,0.00000000); //object(model_car) (1)
CreateObject(2486,1134.19543457,-1649.01159668,17.61683846,0.00000000,0.00000000,0.00000000); //object(model_car) (2)
CreateObject(2488,1134.34106445,-1648.74121094,19.67167473,0.00000000,0.00000000,0.00000000); //object(manhunt_toy_1) (1)
CreateObject(2489,1135.10156250,-1648.74121094,19.66833115,0.00000000,0.00000000,0.00000000); //object(manhunt_toy_2) (2)
CreateObject(2492,1135.13574219,-1648.74121094,18.41484833,0.00000000,0.00000000,0.00000000); //object(manhunt_toy2_1) (2)
CreateObject(2494,1134.26843262,-1648.74108887,18.42692757,0.00000000,0.00000000,0.00000000); //object(manhunt_toy2_2) (2)
CreateObject(2690,1130.64318848,-1648.44934082,19.39097786,0.00000000,0.00000000,0.00000000); //object(cj_fire_ext) (1)
CreateObject(2714,1137.18664551,-1652.24914551,19.37492180,0.00000000,0.00000000,90.00000000); //object(cj_open_sign_2) (3)
CreateObject(2688,1136.08691406,-1648.32617188,19.74990845,0.00000000,0.00000000,0.00000000); //object(cj_food_post4) (1)
CreateObject(1808,1136.10668945,-1648.48266602,17.61089134,0.00000000,0.00000000,0.00000000); //object(cj_watercooler2) (1)
CreateObject(2202,1128.39294434,-1652.64721680,17.61820602,0.00000000,0.00000000,89.99450684); //object(photocopier_2) (1)
CreateObject(2229,1133.69360352,-1648.32336426,19.68436241,0.00000000,0.00000000,0.00000000); //object(swank_speaker) (1)
CreateObject(2229,1127.63867188,-1654.79394531,19.35495186,0.00000000,0.00000000,90.00000000); //object(swank_speaker) (2)
CreateObject(2604,1129.79003906,-1654.33105469,18.41508102,0.00000000,0.00000000,0.00000000); //object(cj_police_counter) (1)
CreateObject(2942,1135.65368652,-1646.84033203,18.26116180,0.00000000,0.00000000,179.99450684); //object(kmb_atm1) (1)
CreateObject(11245,1137.14941406,-1647.70019531,22.37945557,0.00000000,0.00000000,0.00000000); //object(sfsefirehseflag) (1)
CreateObject(11245,1137.14941406,-1661.72973633,22.23664093,0.00000000,0.00000000,0.00000000); //object(sfsefirehseflag) (2)
CreateObject(1514,1129.33654785,-1650.68432617,18.93914223,0.00000000,0.00000000,21.99499512); //object(dyn_ff_till) (1)
CreateObject(1886,1136.29663086,-1648.68432617,21.59947205,0.00000000,0.00000000,320.00000000); //object(shop_sec_cam) (1)
CreateObject(1886,1128.21765137,-1661.15563965,21.70072746,0.00000000,0.00000000,145.99572754); //object(shop_sec_cam) (2)
CreateObject(2362,1133.73754883,-1648.32739258,18.12133026,0.00000000,0.00000000,0.00000000); //object(cj_sweetie_tray_1) (1)
CreateObject(2412,1137.12109375,-1649.97558594,17.61183357,0.00000000,0.00000000,270.00000000); //object(cj_detector) (1)
CreateObject(2412,1137.10827637,-1651.70361328,17.61213112,0.00000000,0.00000000,269.99597168); //object(cj_detector) (2)
CreateObject(2435,1128.02539062,-1650.75585938,17.61820602,0.00000000,0.00000000,0.00000000); //object(cj_ff_conter_2) (5)
CreateObject(2435,1128.96484375,-1650.75390625,17.61820602,0.00000000,0.00000000,0.00000000); //object(cj_ff_conter_2) (6)
CreateObject(2434,1129.84082031,-1650.76562500,17.61258698,0.00000000,0.00000000,0.00000000); //object(cj_ff_conter_2b) (5)
CreateObject(2435,1130.00292969,-1649.67382812,17.61306190,0.00000000,0.00000000,90.00000000); //object(cj_ff_conter_2) (8)
CreateObject(2435,1130.00195312,-1648.83300781,17.61315918,0.00000000,0.00000000,90.00000000); //object(cj_ff_conter_2) (9)
CreateObject(2604,1134.45703125,-1654.31152344,18.40774918,0.00000000,0.00000000,0.00000000); //object(cj_police_counter) (2)
CreateObject(2621,1131.15136719,-1648.67004395,18.38305855,0.00000000,0.00000000,0.00000000); //object(cj_trainer_heat) (1)
CreateObject(2190,1130.00756836,-1650.34423828,18.66863060,0.00000000,0.00000000,233.99497986); //object(pc_1) (2)
CreateObject(1441,1130.54357910,-1646.69262695,18.26449585,0.00000000,0.00000000,182.00000000); //object(dyn_box_pile_4) (1)
CreateObject(1415,1128.18029785,-1646.62915039,17.61098480,0.00000000,0.00000000,178.00000000); //object(dyn_dumpster) (1)
CreateObject(2860,1129.98706055,-1649.06835938,18.66872787,0.00000000,0.00000000,0.00000000); //object(gb_kitchtakeway05) (1)
CreateObject(2663,1129.96203613,-1648.50939941,18.87354279,0.00000000,0.00000000,0.00000000); //object(cj_bs_bag) (1)
CreateObject(2222,1128.17211914,-1650.68884277,18.74213409,0.00000000,0.00000000,0.00000000); //object(rustyhigh) (1)
CreateObject(1346,1134.02941895,-1646.54174805,18.96785355,0.00000000,0.00000000,181.99996948); //object(cj_phone_kiosk2) (1)
CreateObject(3876,1128.81176758,-1652.54125977,21.91427612,0.00000000,0.00000000,0.00000000); //object(sf_roofmast) (1)
CreateObject(2604,1129.78247070,-1656.79089355,18.41508102,0.00000000,0.00000000,0.00000000); //object(cj_police_counter) (1)
CreateObject(2604,1134.45080566,-1656.80017090,18.40774918,0.00000000,0.00000000,0.00000000); //object(cj_police_counter) (2)
CreateObject(2604,1129.74914551,-1659.34008789,18.41508102,0.00000000,0.00000000,0.00000000); //object(cj_police_counter) (2)
CreateObject(2356,1129.44543457,-1660.83581543,17.61087418,0.00000000,0.00000000,21.99575806); //object(police_off_chair) (9)
CreateObject(346,1128.04235840,-1650.31921387,18.38284683,0.00000000,0.00000000,0.00000000); //object(2)
CreateObject(359,1128.52233887,-1650.31726074,17.98554611,0.00000000,0.00000000,0.00000000); //object(3)
CreateObject(350,1128.50012207,-1650.31726074,18.34880257,0.00000000,0.00000000,0.00000000); //object(4)
CreateObject(2047,1132.00061035,-1648.32324219,20.77752304,0.00000000,0.00000000,0.00000000); //object(cj_flag1) (1)
CreateObject(18066,1136.26452637,-1662.18457031,21.64040947,0.00000000,0.00000000,0.00000000); //object(posterv) (1)
CreateObject(5066,1127.07263184,-1641.11376953,19.20364571,0.00000000,0.00000000,0.00000000); //object(mondoshave_las) (1)
CreateObject(2604,1134.47180176,-1659.32055664,18.41508102,0.00000000,0.00000000,0.00000000); //object(cj_police_counter) (2)
CreateObject(2356,1129.38916016,-1658.27709961,17.61820602,0.00000000,0.00000000,0.00000000); //object(police_off_chair) (4)
CreateObject(2356,1131.06640625,-1658.24499512,17.61820602,0.00000000,0.00000000,0.00000000); //object(police_off_chair) (4)
CreateObject(983,1139.86230469,-1635.19458008,18.24110031,0.00000000,0.00000000,0.00000000); //object(fenceshit3) (1)
CreateObject(984,1133.52966309,-1662.31506348,18.19949722,0.00000000,0.00000000,269.99996948); //object(fenceshit2) (6)
CreateObject(3808,1137.14550781,-1660.92297363,21.37370682,0.00000000,0.00000000,0.00000000); //object(sfx_alarms04) (1)
CreateObject(323,1129.17224121,-1650.31726074,18.04191589,0.00000000,0.00000000,0.00000000); //object(5)

// ------------------------ Bureau San News ------------------------------ par triple15 (GTA Online)
CreateObject(1523, 1794.197265625, -1286.8017578125, 12.624760627747, 0, 0, 39.995727539063); // 200 objets
CreateObject(1523, 1796.5068359375, -1284.7822265625, 12.624868392944, 0, 0, 219.99572753906);
CreateObject(2957, 1805.0623779297, -1281.8321533203, 14.050000190735, 0, 0, 297.99267578125);
CreateObject(2957, 1810.0427246094, -1290.9998779297, 14.050000190735, 0, 0, 297.98767089844);
CreateObject(2957, 1805.1154785156, -1281.7885742188, 17.304317474365, 0, 0, 297.98767089844);
CreateObject(2957, 1807.2247314453, -1285.6693115234, 17.304317474365, 0, 0, 297.98767089844);
CreateObject(2957, 1810.09375, -1290.98828125, 17.304317474365, 0, 0, 297.98767089844);
CreateObject(2957, 1808.6979980469, -1288.4656982422, 16.722246170044, 0, 0, 297.98767089844);
CreateObject(2957, 1809.2546386719, -1289.6396484375, 17.304317474365, 0, 0, 297.98767089844);
CreateObject(2395, 1803.7836914063, -1280.1352539063, 12.375, 0, 0, 29.99267578125);
CreateObject(2395, 1804.1564941406, -1280.3818359375, 12.375, 0, 0, 297.99267578125);
CreateObject(2395, 1805.859375, -1283.6864013672, 12.375, 0, 0, 297.98767089844);
CreateObject(2395, 1806.560546875, -1284.9345703125, 12.375, 0, 0, 297.98767089844);
CreateObject(2395, 1809.0502929688, -1289.58203125, 12.375, 0, 0, 297.98767089844);
CreateObject(2395, 1809.5283203125, -1290.5908203125, 12.375, 0, 0, 297.98767089844);
CreateObject(2395, 1803.7841796875, -1280.1044921875, 15.123343467712, 0, 0, 29.987182617188);
CreateObject(2395, 1804.1617431641, -1280.359375, 15.123343467712, 0, 0, 297.98767089844);
CreateObject(2395, 1805.888671875, -1283.6484375, 15.123343467712, 0, 0, 297.98767089844);
CreateObject(2395, 1807.666015625, -1286.9208984375, 15.123343467712, 0, 0, 297.98767089844);
CreateObject(2395, 1809.3740234375, -1290.2333984375, 15.123343467712, 0, 0, 297.98767089844);
CreateObject(2395, 1803.7841796875, -1280.1044921875, 16.200000762939, 0, 0, 29.99267578125);
CreateObject(2395, 1804.1611328125, -1280.359375, 16.200000762939, 0, 0, 297.98767089844);
CreateObject(2395, 1805.888671875, -1283.6484375, 16.200000762939, 0, 0, 297.98767089844);
CreateObject(2395, 1807.666015625, -1286.9208984375, 16.200000762939, 0, 0, 297.98767089844);
CreateObject(2395, 1807.392578125, -1285.7802734375, 12.375, 0, 0, 117.98220825195);
CreateObject(2395, 1808.1943359375, -1287.1845703125, 12.39999961853, 0, 0, 117.98217773438);
CreateObject(2395, 1805.7613525391, -1282.7095947266, 12.375, 0, 0, 117.98217773438);
CreateObject(2961, 1798.392578125, -1295.6015625, 13.556823730469, 0, 0, 179.99450683594);
CreateObject(1886, 1807.03515625, -1289.3544921875, 19.154449462891, 29.99267578125, 0, 257.99194335938);
CreateObject(2568, 1807.888671875, -1294.447265625, 12.588537216187, 0, 0, 221.99523925781);
CreateObject(2108, 1802.8330078125, -1298.8671875, 12.487029075623, 0, 0, 0);
CreateObject(1726, 1804.3139648438, -1297.1392822266, 12.510719299316, 0, 0, 178);
CreateObject(1726, 1808.9990234375, -1291.6788330078, 12.625253677368, 0, 0, 255.99499511719);
CreateObject(1727, 1808.31640625, -1289.8896484375, 12.626068115234, 0, 0, 295.99914550781);
CreateObject(1210, 1806.7165527344, -1295.4703369141, 13.589418411255, 90, 0, 246);
CreateObject(2424, 1799.7696533203, -1283.1175537109, 12.655368804932, 0, 0, 306);
CreateObject(2424, 1800.2971191406, -1283.8414306641, 12.653933525085, 0, 0, 305.99670410156);
CreateObject(2424, 1800.8493652344, -1284.5814208984, 12.652410507202, 0, 0, 305.99670410156);
CreateObject(2424, 1801.3920898438, -1285.30859375, 12.650912284851, 0, 0, 305.99670410156);
CreateObject(2424, 1801.9147949219, -1286.0385742188, 12.649505615234, 0, 0, 305.99670410156);
CreateObject(2424, 1802.4312744141, -1286.7508544922, 12.648105621338, 0, 0, 305.99670410156);
CreateObject(2424, 1802.9342041016, -1287.4476318359, 12.652280807495, 0, 0, 305.99670410156);
CreateObject(2423, 1803.4365234375, -1288.1553955078, 12.644852638245, 0, 0, 306);
CreateObject(2424, 1804.3175048828, -1287.6240234375, 12.640880584717, 0, 0, 33.996704101563);
CreateObject(2424, 1805.0677490234, -1287.1048583984, 12.63694858551, 0, 0, 33.99169921875);
CreateObject(2424, 1806.58203125, -1286.0087890625, 12.628953933716, 0, 0, 33.986206054688);
CreateObject(2190, 1802.3729248047, -1287.1602783203, 13.703674316406, 0, 0, 134);
CreateObject(2190, 1800.1323242188, -1283.6159667969, 13.709502220154, 0, 0, 61.994750976563);
CreateObject(2885, 1799.1350097656, -1282.7259521484, 19.207460403442, 270, 0, 36.496704101563);
CreateObject(2885, 1783.1258544922, -1293.1192626953, 19.119606018066, 270, 0, 25.99365234375);
CreateObject(2885, 1805.283203125, -1284.0625, 19.119606018066, 270, 0, 37.99072265625);
CreateObject(2885, 1784.3269042969, -1300.0363769531, 19.206460952759, 90, 0, 26.249633789063);
CreateObject(2885, 1793.8215332031, -1294.6687011719, 19.207460403442, 90, 179.99450683594, 212.99670410156);
CreateObject(2885, 1802.8402099609, -1288.4631347656, 19.207460403442, 90, 0, 35.996704101563);
CreateObject(2885, 1814.8251953125, -1281.2459716797, 19.207460403442, 90, 0, 17.99267578125);
CreateObject(2885, 1809.5109863281, -1287.9572753906, 19.207460403442, 90, 0, 35.99267578125);
CreateObject(2885, 1801.5037841797, -1295.4794921875, 19.207460403442, 90, 0, 35.999633789063);
CreateObject(2885, 1795.802734375, -1291.3193359375, 19.119606018066, 270, 0, 37.979736328125);
CreateObject(3437, 1803.7568359375, -1280.71484375, 13.512777328491, 0, 0, 0);
CreateObject(1649, 1796.076171875, -1296.9580078125, 14.064339637756, 0, 0, 282.49145507813);
CreateObject(3498, 1795.6335449219, -1294.7041015625, 11.227310180664, 0, 0, 0);
CreateObject(3498, 1796.4489746094, -1298.9197998047, 15.89999961853, 90, 0, 190.98913574219);
CreateObject(3498, 1795, -1291.5869140625, 15.89999961853, 90, 0, 191.24462890625);
CreateObject(1649, 1794.64453125, -1289.3134765625, 14.040741920471, 0, 0, 102.99136352539);
CreateObject(3498, 1794.9833984375, -1291.5546875, 11.317317962646, 0, 0, 0);
CreateObject(2001, 1793.7777099609, -1287.4803466797, 12.61510848999, 0, 0, 0);
CreateObject(15038, 1780.4270019531, -1296.376953125, 12.9921875, 0, 0, 0);
CreateObject(2253, 1802.2194824219, -1286.5784912109, 13.984070777893, 0, 0, 0);
CreateObject(2252, 1800.5998535156, -1284.6285400391, 14.030409812927, 0, 0, 0);
CreateObject(1549, 1794.6551513672, -1287.3098144531, 12.603384017944, 0, 0, 257.99194335938);
CreateObject(3498, 1790.859375, -1293.4150390625, 15.89999961853, 90, 0, 111.99462890625);
CreateObject(3498, 1782.6007080078, -1296.42578125, 15.89999961853, 90, 0, 107.99459838867);
CreateObject(3498, 1786.8723144531, -1295.0434570313, 11.227310180664, 0, 0, 0);
CreateObject(1491, 1787.1796875, -1294.98046875, 12.477584838867, 0, 0, 21.99462890625);
CreateObject(3498, 1788.7900390625, -1294.203125, 11.227310180664, 0, 0, 0);
CreateObject(1649, 1790.8544921875, -1293.3779296875, 14.059239387512, 0, 0, 22.241821289063);
CreateObject(1649, 1793.1298828125, -1292.4501953125, 14.059239387512, 0, 0, 22.494506835938);
CreateObject(1726, 1793.513671875, -1288.4072265625, 12.599601745605, 0, 0, 283.99462890625);
CreateObject(1726, 1793.4831542969, -1291.4802246094, 12.533333778381, 0, 0, 203.994140625);
CreateObject(1726, 1791.0659179688, -1292.5457763672, 12.552709579468, 0, 0, 203.994140625);
CreateObject(1232, 1794.2658691406, -1291.0073242188, 10.781339645386, 0, 0, 0);
CreateObject(2186, 1805.6984863281, -1284.2126464844, 12.630645751953, 0, 0, 296);
CreateObject(2836, 1791.8215332031, -1290.8251953125, 12.583474159241, 0, 0, 21.99462890625);
CreateObject(2836, 1789.6417236328, -1291.8511962891, 12.599593162537, 0, 0, 27.998657226563);
CreateObject(2167, 1804.7514648438, -1281.5228271484, 12.645005226135, 0, 0, 298);
CreateObject(2164, 1805.1817626953, -1282.3736572266, 12.639691352844, 0, 0, 296);
CreateObject(1549, 1795.4372558594, -1295.1956787109, 12.422473907471, 0, 0, 257.99194335938);
CreateObject(2606, 1801.6033935547, -1285.3746337891, 13.407989501953, 0, 0, 126);
CreateObject(2957, 1813.3186035156, -1287.2550048828, 14.050000190735, 0, 0, 127.98376464844);
CreateObject(2957, 1810.7788085938, -1287.654296875, 14.050000190735, 0, 0, 39.980712890625);
CreateObject(1491, 1811.1127929688, -1284.1665039063, 12.612442970276, 0, 0, 305.9912109375);
CreateObject(2957, 1809.6865234375, -1282.4703369141, 14.050000190735, 0, 0, 127.97973632813);
CreateObject(2957, 1808.9448242188, -1284.0283203125, 14.050000190735, 0, 0, 31.979736328125);
CreateObject(2957, 1812.6678466797, -1281.705078125, 14.050000190735, 0, 0, 31.975708007813);
CreateObject(2957, 1816.4327392578, -1279.3747558594, 14.050000190735, 0, 0, 31.975708007813);
CreateObject(2395, 1808.162109375, -1287.22265625, 15.123343467712, 0, 0, 117.98217773438);
CreateObject(2395, 1808.162109375, -1287.1226806641, 15.123343467712, 0, 0, 117.98217773438);
CreateObject(2395, 1814.1044921875, -1287.8876953125, 12.375, 0, 0, 129.97973632813);
CreateObject(2395, 1809.0126953125, -1288.7028808594, 15.123343467712, 0, 0, 117.98217773438);
CreateObject(2395, 1814.4951171875, -1288.3984375, 12.375, 0, 0, 129.97424316406);
CreateObject(2395, 1815.759765625, -1287.7548828125, 12.375, 0, 0, 221.97875976563);
CreateObject(2395, 1816.9912109375, -1286.666015625, 12.375, 0, 0, 221.97875976563);
CreateObject(2395, 1816.9694824219, -1283.1613769531, 12.375, 0, 0, 275.97875976563);
CreateObject(2395, 1816.5743408203, -1279.4921875, 12.375, 0, 0, 275.9765625);
CreateObject(2395, 1814.0811767578, -1280.9930419922, 12.375, 0, 0, 31.9765625);
CreateObject(2395, 1810.9318847656, -1282.9606933594, 12.375, 0, 0, 31.975708007813);
CreateObject(2395, 1810.9224853516, -1283.7126464844, 12.375, 0, 0, 125.97570800781);
CreateObject(2395, 1814.1044921875, -1287.8876953125, 15.123343467712, 0, 0, 129.97424316406);
CreateObject(2395, 1814.4951171875, -1288.3984375, 15.123343467712, 0, 0, 129.97424316406);
CreateObject(2395, 1815.759765625, -1287.7548828125, 15.123343467712, 0, 0, 221.97875976563);
CreateObject(2395, 1816.9912109375, -1286.666015625, 15.123343467712, 0, 0, 221.97875976563);
CreateObject(2395, 1816.96875, -1283.1611328125, 15.123343467712, 0, 0, 275.9765625);
CreateObject(2395, 1816.57421875, -1279.4921875, 15.123343467712, 0, 0, 275.9765625);
CreateObject(2395, 1814.0810546875, -1280.9921875, 15.123343467712, 0, 0, 31.975708007813);
CreateObject(2395, 1810.931640625, -1282.9599609375, 15.123343467712, 0, 0, 31.975708007813);
CreateObject(2395, 1812.2180175781, -1285.5676269531, 15.123343467712, 0, 0, 125.97473144531);
CreateObject(2395, 1807.4189453125, -1285.1728515625, 12.39999961853, 0, 0, 31.981201171875);
CreateObject(2395, 1808.7619628906, -1281.9138183594, 12.39999961853, 0, 0, 311.97924804688);
CreateObject(2395, 1807.6203613281, -1285.0247802734, 12.375, 0, 0, 31.981201171875);
CreateObject(2395, 1812.119140625, -1285.9248046875, 12.375, 0, 0, 307.97424316406);
CreateObject(2395, 1811.9678955078, -1286.4388427734, 12.375, 0, 0, 219.97424316406);
CreateObject(2395, 1811.4041748047, -1286.904296875, 12.375, 0, 0, 219.97375488281);
CreateObject(2395, 1808.7341308594, -1281.7811279297, 15.123343467712, 0, 0, 309.97375488281);
CreateObject(2395, 1807.4189453125, -1285.1728515625, 15.123343467712, 0, 0, 31.981201171875);
CreateObject(2395, 1811.4033203125, -1286.904296875, 15.123343467712, 0, 0, 219.97375488281);
CreateObject(2395, 1811.9677734375, -1286.4384765625, 15.123343467712, 0, 0, 219.97375488281);
CreateObject(2395, 1812.119140625, -1285.9248046875, 15.123343467712, 0, 0, 307.97424316406);
CreateObject(2395, 1810.8765869141, -1284.3287353516, 15.123343467712, 0, 0, 307.97924804688);
CreateObject(1491, 1808.2196044922, -1287.7502441406, 12.623882293701, 0, 0, 299.9912109375);
CreateObject(2885, 1810.5598144531, -1280.6733398438, 16.944604873657, 270, 0, 29.996215820313);
CreateObject(2885, 1812.6552734375, -1284.3681640625, 16.944604873657, 270, 0, 29.99267578125);
CreateObject(2205, 1814.6627197266, -1286.0544433594, 12.593490600586, 0, 0, 34);
CreateObject(1671, 1815.9631347656, -1286.8220214844, 13.048926353455, 0, 0, 214);
CreateObject(1727, 1814.5307617188, -1283.8984375, 12.602937698364, 0, 0, 10);
CreateObject(1727, 1813.2983398438, -1285.0084228516, 12.601699829102, 0, 0, 45.99755859375);
CreateObject(2190, 1815.9760742188, -1285.1104736328, 13.52995300293, 0, 0, 342);
CreateObject(2256, 1815.9683837891, -1287.5885009766, 14.859687805176, 0, 0, 220);
CreateObject(2067, 1814.6730957031, -1288.4807128906, 12.596406936646, 0, 0, 0);
CreateObject(2167, 1816.2569580078, -1280.0191650391, 12.644534111023, 0, 0, 338);
CreateObject(2894, 1815.86328125, -1280.5205078125, 12.468351364136, 0, 0, 0);
CreateObject(2894, 1814.623046875, -1286.1015625, 13.357810974121, 0, 0, 0);
CreateObject(2611, 1813.2318115234, -1281.5798339844, 14.218338012695, 0, 0, 32);
CreateObject(1510, 1814.5625, -1285.6710205078, 13.559952735901, 0, 0, 0);
CreateObject(1232, 1811.271484375, -1283.2886962891, 12.002756118774, 0, 0, 0);
CreateObject(1727, 1808.6986083984, -1286.9025878906, 12.620740890503, 0, 0, 117.99914550781);
CreateObject(1727, 1808.4243164063, -1285.2513427734, 12.619932174683, 0, 0, 29.998657226563);
CreateObject(2644, 1807.6979980469, -1285.4630126953, 12.728122711182, 0, 0, 300);
CreateObject(2105, 1807.4645996094, -1285.4240722656, 13.603013038635, 0, 0, 0);
CreateObject(2826, 1807.9001464844, -1285.3786621094, 13.154525756836, 0, 0, 0);
CreateObject(3498, 1793.9271240234, -1286.8385009766, 14.381324768066, 0, 0, 0);
CreateObject(1649, 1791.9755859375, -1288.037109375, 14.059239387512, 0, 0, 211.98669433594);
CreateObject(1649, 1788.3120117188, -1290.3605957031, 14.059239387512, 0, 0, 211.98669433594);
CreateObject(1649, 1784.6887207031, -1292.6560058594, 14.059239387512, 0, 0, 204.23669433594);
CreateObject(1649, 1780.7563476563, -1294.5678710938, 14.059239387512, 0, 0, 207.73620605469);
CreateObject(1649, 1791.9729003906, -1288.0401611328, 17.326749801636, 0, 0, 212.23669433594);
CreateObject(1649, 1788.2697753906, -1290.3674316406, 17.314113616943, 0, 0, 212.24011230469);
CreateObject(1649, 1784.6916503906, -1292.6672363281, 17.284187316895, 0, 0, 203.98376464844);
CreateObject(1649, 1780.7697753906, -1294.5921630859, 17.303098678589, 0, 0, 207.98620605469);
CreateObject(3498, 1790.2288818359, -1289.3560791016, 18.769695281982, 90, 0, 303.25);
CreateObject(3498, 1782.7618408203, -1293.7244873047, 18.770715713501, 90, 0, 297.24462890625);
CreateObject(3498, 1786.6168212891, -1291.6485595703, 14.500017166138, 0, 0, 0);
CreateObject(3095, 1812.1755371094, -1275.9321289063, 14.552441596985, 270, 0, 13);
CreateObject(3095, 1804.3630371094, -1279.4880371094, 14.556706428528, 270, 0, 35.994873046875);
CreateObject(3095, 1800.6357421875, -1282.1867675781, 14.556706428528, 270, 0, 35.992065429688);
CreateObject(3498, 1796.8017578125, -1284.720703125, 14.584831237793, 0, 0, 0);
CreateObject(2395, 1797.5037841797, -1284.5238037109, 12.375, 0, 0, 35.987670898438);
CreateObject(2395, 1800.5163574219, -1282.3436279297, 12.375, 0, 0, 35.985717773438);
CreateObject(2395, 1797.5029296875, -1284.5234375, 15.123343467712, 0, 0, 35.985717773438);
CreateObject(2395, 1800.515625, -1282.3427734375, 15.123343467712, 0, 0, 35.985717773438);
CreateObject(2395, 1797.5029296875, -1284.5234375, 16.200000762939, 0, 0, 35.985717773438);
CreateObject(2395, 1800.515625, -1282.3427734375, 16.200000762939, 0, 0, 35.985717773438);
CreateObject(1649, 1795.650390625, -1285.5087890625, 16.848516464233, 0, 0, 217.23266601563);
CreateObject(3498, 1797.4152832031, -1284.3442382813, 18.769695281982, 90, 0, 306.24462890625);
CreateObject(3498, 1799.0140380859, -1283.2984619141, 18.769695281982, 90, 0, 304.74389648438);
CreateObject(2885, 1807.2506103516, -1285.1142578125, 19.207460403442, 90, 0, 36.240112304688);
CreateObject(2885, 1798.7880859375, -1282.9794921875, 19.119606018066, 270, 0, 36.49658203125);
CreateObject(2885, 1797.435546875, -1289.7529296875, 19.119606018066, 270, 0, 37.985229492188);
CreateObject(970, 1791.87890625, -1288.0087890625, 13.118897438049, 0, 0, 32.49755859375);
CreateObject(970, 1788.2861328125, -1290.3095703125, 13.118897438049, 0, 0, 32.997436523438);
CreateObject(970, 1784.4323730469, -1292.4468994141, 13.106278419495, 0, 0, 21.99267578125);
CreateObject(970, 1780.7059326172, -1294.203125, 13.124257087708, 0, 0, 28.73974609375);
CreateObject(1649, 1795.7557373047, -1285.4287109375, 16.784015655518, 0, 0, 37.232666015625);
CreateObject(1649, 1795.9996337891, -1296.6123046875, 14.0641040802, 0, 0, 102.49145507813);
CreateObject(1649, 1794.6213378906, -1289.2130126953, 14.228346824646, 0, 0, 284.99133300781);
CreateObject(1649, 1792.9499511719, -1292.5246582031, 14.185749053955, 0, 0, 200.99133300781);
CreateObject(1649, 1790.8123779297, -1293.3951416016, 14.217329025269, 0, 0, 200.98937988281);
CreateObject(1649, 1784.7150878906, -1295.8267822266, 14.085296630859, 0, 0, 18.241821289063);
CreateObject(1649, 1780.4914550781, -1297.1966552734, 14.040741920471, 0, 0, 18.2373046875);
CreateObject(1649, 1785.0831298828, -1295.7054443359, 14.093755722046, 0, 0, 200.2373046875);
CreateObject(1649, 1780.9309082031, -1297.0518798828, 14.040741920471, 0, 0, 196.2373046875);
CreateObject(2885, 1790.1462402344, -1289.4998779297, 19.119606018066, 270, 0, 36.74658203125);
CreateObject(1649, 1791.8245849609, -1288.2241210938, 14.059239387512, 0, 0, 30.990844726563);
CreateObject(1649, 1788.07421875, -1290.5169677734, 14.059239387512, 0, 0, 32.236938476563);
CreateObject(1649, 1791.82421875, -1288.2236328125, 17.359237670898, 0, 0, 30.986938476563);
CreateObject(1649, 1788.07421875, -1290.5166015625, 17.384225845337, 0, 0, 32.23388671875);
CreateObject(1649, 1784.4885253906, -1292.8282470703, 14.20797252655, 0, 0, 24.228759765625);
CreateObject(970, 1777.4196777344, -1296.5596923828, 13.080759048462, 0, 0, 40.984741210938);
CreateObject(1649, 1780.5180664063, -1294.7894287109, 14.146101951599, 0, 0, 28.974609375);
CreateObject(1649, 1784.48828125, -1292.828125, 17.48292350769, 0, 0, 24.224853515625);
CreateObject(1649, 1780.517578125, -1294.7890625, 17.446094512939, 0, 0, 28.970947265625);


// Eglise (CrucixTM)
CreateObject(9931,1947.54003906,-368.51269531,1108.01086426,0.00000000,0.00000000,90.00000000); //object(church_sfe) (1)
CreateObject(3976,1970.65722656,-341.23883057,1100.22949219,0.00000000,0.00000000,0.00000000); //object(policest02_lan) (1)
CreateObject(9931,1980.55761719,-368.51562500,1108.01086426,0.00000000,0.00000000,90.00000000); //object(church_sfe) (2)
CreateObject(3976,1962.70117188,-400.46679688,1109.52941895,0.00000000,0.00000000,90.00000000); //object(policest02_lan) (2)
CreateObject(11472,1964.78710938,-372.02050781,1089.22351074,0.00000000,0.00000000,0.00000000); //object(des_swtstairs1) (1)
CreateObject(11472,1963.28967285,-372.02139282,1089.22351074,0.00000000,0.00000000,0.00000000); //object(des_swtstairs1) (2)
CreateObject(11472,1964.04479980,-372.98049927,1089.46386719,0.00000000,0.00000000,0.00000000); //object(des_swtstairs1) (3)
CreateObject(2896,1959.29248047,-370.91723633,1093.34313965,0.00000000,0.00000000,90.00000000); //object(casket_law) (1)
CreateObject(11472,1962.66918945,-373.82989502,1087.66955566,90.00000000,180.00000000,270.00000000); //object(des_swtstairs1) (4)
CreateObject(11472,1965.41259766,-373.81991577,1087.66992188,90.00000000,180.00000000,90.00000000); //object(des_swtstairs1) (5)
CreateObject(970,1970.61437988,-368.20404053,1093.28039551,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (1)
CreateObject(970,1968.51074219,-368.20703125,1093.28039551,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (2)
CreateObject(970,1957.52185059,-368.25833130,1093.28039551,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (3)
CreateObject(970,1959.61914062,-368.25585938,1093.28039551,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (4)
CreateObject(6959,1963.97839355,-368.12149048,1072.75439453,90.00000000,0.00000000,0.25000000); //object(vegasnbball1) (2)
CreateObject(2960,1964.05883789,-348.98986816,1101.36645508,0.00000000,90.00000000,89.99450684); //object(kmb_beam) (1)
CreateObject(2960,1963.98291016,-349.00000000,1101.70666504,90.00000000,0.00000000,179.99450684); //object(kmb_beam) (2)
CreateObject(2960,1964.05871582,-348.99044800,1100.00585938,0.00000000,90.00000000,90.00000000); //object(kmb_beam) (3)
CreateObject(3872,1964.02685547,-346.40850830,1102.33020020,0.00000000,155.25000000,90.27026367); //object(ws_floodbeams) (1)
CreateObject(1667,1962.98828125,-370.41271973,1093.62292480,0.00000000,0.00000000,0.00000000); //object(propwineglass1) (1)
CreateObject(1664,1962.83520508,-370.42520142,1093.70104980,0.00000000,0.00000000,0.00000000); //object(propwinebotl2) (1)
CreateObject(2868,1965.95605469,-370.30142212,1093.53430176,0.00000000,0.00000000,0.00000000); //object(gb_ornament03) (1)
CreateObject(2869,1964.02185059,-373.78527832,1093.66992188,0.00000000,0.00000000,323.75000000); //object(gb_ornament04) (1)
CreateObject(2870,1965.26269531,-373.64062500,1093.66992188,0.00000000,0.00000000,350.03002930); //object(gb_ornament05) (1)
CreateObject(2270,1965.47998047,-352.47622681,1093.48364258,0.00000000,0.00000000,270.00000000); //object(frame_wood_6) (1)
CreateObject(2257,1964.05615234,-373.94995117,1095.86132812,0.00000000,0.00000000,180.00000000); //object(frame_clip_4) (1)
CreateObject(2271,1962.60437012,-352.58059692,1093.48803711,0.00000000,0.00000000,90.00000000); //object(frame_wood_1) (1)
CreateObject(2357,1964.05090332,-370.68905640,1093.12402344,0.00000000,0.00000000,0.00000000); //object(dunc_dinning) (1)
CreateObject(2808,1957.51367188,-364.26171875,1092.59191895,0.00000000,0.00000000,179.99450684); //object(cj_pizza_chair4) (1)
CreateObject(2808,1959.68164062,-364.26171875,1092.59191895,0.00000000,0.00000000,179.99450684); //object(cj_pizza_chair4) (2)
CreateObject(2808,1970.61328125,-364.26171875,1092.59191895,0.00000000,0.00000000,179.99450684); //object(cj_pizza_chair4) (3)
CreateObject(2808,1968.44238281,-364.26171875,1092.59191895,0.00000000,0.00000000,179.99450684); //object(cj_pizza_chair4) (4)
CreateObject(2808,1961.85546875,-364.26171875,1092.59191895,0.00000000,0.00000000,179.99450684); //object(cj_pizza_chair4) (5)
CreateObject(2808,1966.27246094,-364.26171875,1092.59191895,0.00000000,0.00000000,179.99450684); //object(cj_pizza_chair4) (6)
CreateObject(2868,1962.14697266,-370.30624390,1093.53430176,0.00000000,0.00000000,0.00000000); //object(gb_ornament03) (4)
CreateObject(948,1966.09277344,-374.17285156,1092.72888184,0.00000000,0.00000000,0.00000000); //object(plant_pot_10) (1)
CreateObject(948,1961.96313477,-374.22888184,1092.72888184,0.00000000,0.00000000,0.00000000); //object(plant_pot_10) (2)
CreateObject(2894,1963.95080566,-370.94277954,1093.53430176,0.00000000,0.00000000,0.00000000); //object(kmb_rhymesbook) (1)
CreateObject(3462,1959.30407715,-374.06838989,1094.24255371,0.00000000,0.00000000,270.00000000); //object(csrangel_lvs) (1)
CreateObject(3462,1968.78125000,-374.06835938,1094.24255371,0.00000000,0.00000000,270.00000000); //object(csrangel_lvs) (2)
CreateObject(949,1956.02258301,-353.46194458,1095.83190918,0.00000000,0.00000000,0.00000000); //object(plant_pot_4) (1)
CreateObject(2946,1965.59985352,-349.21301270,1091.94543457,0.00000000,0.00000000,90.00000000); //object(cr_door_03) (2)
CreateObject(2946,1962.47033691,-349.19955444,1091.94543457,0.00000000,0.00000000,270.00000000); //object(cr_door_03) (3)
CreateObject(2808,1970.60681152,-360.67248535,1092.59191895,0.00000000,0.00000000,179.99450684); //object(cj_pizza_chair4) (6)
CreateObject(2808,1968.43054199,-360.67248535,1092.59191895,0.00000000,0.00000000,179.99450684); //object(cj_pizza_chair4) (6)
CreateObject(2808,1966.25378418,-360.67248535,1092.59191895,0.00000000,0.00000000,179.99450684); //object(cj_pizza_chair4) (6)
CreateObject(2808,1957.52233887,-360.67248535,1092.59191895,0.00000000,0.00000000,179.99450684); //object(cj_pizza_chair4) (6)
CreateObject(2808,1959.69580078,-360.67248535,1092.59191895,0.00000000,0.00000000,179.99450684); //object(cj_pizza_chair4) (6)
CreateObject(2808,1961.86865234,-360.67248535,1092.59191895,0.00000000,0.00000000,179.99450684); //object(cj_pizza_chair4) (6)
CreateObject(2808,1957.51660156,-357.18194580,1092.59191895,0.00000000,0.00000000,179.99450684); //object(cj_pizza_chair4) (6)
CreateObject(2808,1959.69250488,-357.18194580,1092.59191895,0.00000000,0.00000000,179.99450684); //object(cj_pizza_chair4) (6)
CreateObject(2808,1961.86779785,-357.18194580,1092.59191895,0.00000000,0.00000000,179.99450684); //object(cj_pizza_chair4) (6)
CreateObject(2808,1970.61279297,-357.18194580,1092.59191895,0.00000000,0.00000000,179.99450684); //object(cj_pizza_chair4) (6)
CreateObject(2808,1968.43701172,-357.18194580,1092.59191895,0.00000000,0.00000000,179.99450684); //object(cj_pizza_chair4) (6)
CreateObject(2808,1966.26782227,-357.18194580,1092.59191895,0.00000000,0.00000000,179.99450684); //object(cj_pizza_chair4) (6)
CreateObject(14705,1962.68139648,-373.67498779,1093.91894531,0.00000000,0.00000000,0.00000000); //object(int2vase) (1)
CreateObject(14410,1968.61401367,-349.16000366,1092.01757812,0.00000000,0.00000000,270.00000000); //object(carter-stairs03) (1)
CreateObject(11472,1971.98046875,-351.97091675,1092.19567871,0.00000000,0.00000000,90.00000000); //object(des_swtstairs1) (6)
CreateObject(11472,1971.98046875,-353.19616699,1092.19567871,0.00000000,0.00000000,90.00000000); //object(des_swtstairs1) (7)
CreateObject(14410,1959.47412109,-349.41287231,1092.01660156,0.00000000,0.00000000,90.00000000); //object(carter-stairs03) (2)
CreateObject(11472,1956.10046387,-351.96487427,1092.19567871,0.00000000,0.00000000,270.00000000); //object(des_swtstairs1) (8)
CreateObject(11472,1956.10046387,-353.19616699,1092.19567871,0.00000000,0.00000000,270.00000000); //object(des_swtstairs1) (9)
CreateObject(11472,1965.10974121,-347.94531250,1095.44091797,0.00000000,90.00000000,180.00000000); //object(des_swtstairs1) (10)
CreateObject(11472,1962.98315430,-347.94104004,1095.44018555,0.00000000,270.00000000,179.99450684); //object(des_swtstairs1) (11)
CreateObject(1698,1962.46606445,-352.53399658,1095.31420898,0.00000000,0.00000000,270.27026367); //object(esc_step8) (1)
CreateObject(1698,1962.87316895,-352.53399658,1095.53918457,0.00000000,0.00000000,270.26916504); //object(esc_step8) (2)
CreateObject(1698,1963.24682617,-352.53399658,1095.76416016,0.00000000,0.00000000,270.26916504); //object(esc_step8) (3)
CreateObject(1698,1965.60021973,-352.53399658,1095.31420898,0.00000000,0.00000000,90.00000000); //object(esc_step8) (4)
CreateObject(1698,1965.20434570,-352.53399658,1095.53918457,0.00000000,0.00000000,90.00000000); //object(esc_step8) (5)
CreateObject(1698,1964.72375488,-352.53399658,1095.76416016,0.00000000,0.00000000,270.26916504); //object(esc_step8) (6)
CreateObject(970,1964.05688477,-353.88497925,1096.74243164,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (4)
CreateObject(970,1959.94470215,-353.88497925,1095.74719238,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (4)
CreateObject(970,1955.77246094,-353.88589478,1095.74719238,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (4)
CreateObject(970,1968.17297363,-353.88497925,1095.74719238,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (4)
CreateObject(970,1972.25000000,-353.88589478,1095.74719238,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (4)
CreateObject(970,1959.97607422,-351.29064941,1095.74719238,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (4)
CreateObject(970,1968.10302734,-351.29064941,1095.74719238,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (4)
CreateObject(970,1965.96203613,-349.21618652,1096.74169922,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (4)
CreateObject(970,1962.13757324,-349.21618652,1096.74243164,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (4)
CreateObject(2887,1964.04821777,-349.34906006,1094.78955078,90.00000000,0.00000000,0.00000000); //object(a51_spotbulb) (1)
CreateObject(949,1971.95068359,-353.46038818,1095.83190918,0.00000000,0.00000000,0.00000000); //object(plant_pot_4) (2)
CreateObject(948,1965.68554688,-352.45767212,1091.94543457,0.00000000,0.00000000,0.00000000); //object(plant_pot_10) (1)
CreateObject(948,1962.38427734,-352.45767212,1091.94543457,0.00000000,0.00000000,0.00000000); //object(plant_pot_10) (1)
CreateObject(1742,1955.84399414,-353.83831787,1091.94543457,0.00000000,0.00000000,0.00000000); //object(med_bookshelf) (1)
CreateObject(1742,1957.28173828,-353.83831787,1091.94543457,0.00000000,0.00000000,0.00000000); //object(med_bookshelf) (2)
CreateObject(1742,1958.71166992,-353.83831787,1091.94543457,0.00000000,0.00000000,0.00000000); //object(med_bookshelf) (3)
CreateObject(1742,1960.15112305,-353.83831787,1091.94543457,0.00000000,0.00000000,0.00000000); //object(med_bookshelf) (4)
CreateObject(1742,1971.77673340,-353.83831787,1091.94543457,0.00000000,0.00000000,0.00000000); //object(med_bookshelf) (5)
CreateObject(1742,1970.34277344,-353.83831787,1091.94543457,0.00000000,0.00000000,0.00000000); //object(med_bookshelf) (6)
CreateObject(1742,1968.90930176,-353.83831787,1091.94543457,0.00000000,0.00000000,0.00000000); //object(med_bookshelf) (7)
CreateObject(1742,1967.47534180,-353.83831787,1091.94543457,0.00000000,0.00000000,0.00000000); //object(med_bookshelf) (8)
CreateObject(949,1961.60729980,-354.34103394,1092.58166504,0.00000000,0.00000000,0.00000000); //object(plant_pot_4) (3)
CreateObject(949,1966.46325684,-354.34805298,1092.58166504,0.00000000,0.00000000,0.00000000); //object(plant_pot_4) (4)
CreateObject(1720,1970.09338379,-373.59497070,1092.72888184,0.00000000,0.00000000,180.00000000); //object(rest_chair) (1)
CreateObject(1720,1970.91198730,-373.58316040,1092.72888184,0.00000000,0.00000000,179.99450684); //object(rest_chair) (2)
CreateObject(741,1969.29675293,-369.22723389,1093.71252441,0.00000000,0.00000000,0.00000000); //object(pot_01) (1)
CreateObject(3440,1969.29125977,-370.86264038,1091.08007812,0.00000000,0.00000000,0.00000000); //object(arptpillar01_lvs) (1)
CreateObject(14455,1955.32812500,-348.54144287,1096.87585449,0.00000000,0.00000000,270.00000000); //object(gs_bookcase) (1)
CreateObject(14455,1972.78356934,-352.90487671,1096.86743164,0.00000000,0.00000000,90.00000000); //object(gs_bookcase) (2)
CreateObject(2842,1964.51916504,-365.60891724,1091.94543457,0.00000000,0.00000000,90.00000000); //object(gb_bedrug04) (1)
CreateObject(2842,1964.51843262,-363.77880859,1091.94543457,0.00000000,0.00000000,90.00000000); //object(gb_bedrug04) (2)
CreateObject(2842,1964.51867676,-361.94879150,1091.94543457,0.00000000,0.00000000,90.00000000); //object(gb_bedrug04) (3)
CreateObject(2842,1964.52172852,-360.12713623,1091.94543457,0.00000000,0.00000000,90.00000000); //object(gb_bedrug04) (4)
CreateObject(2842,1964.52636719,-358.30560303,1091.94543457,0.00000000,0.00000000,90.00000000); //object(gb_bedrug04) (5)
CreateObject(2842,1964.52600098,-356.47940063,1091.94543457,0.00000000,0.00000000,90.00000000); //object(gb_bedrug04) (6)
CreateObject(2842,1964.52343750,-354.64611816,1091.94543457,0.00000000,0.00000000,90.00000000); //object(gb_bedrug04) (7)
CreateObject(2842,1964.52136230,-352.82815552,1091.94543457,0.00000000,0.00000000,90.00000000); //object(gb_bedrug04) (8)
CreateObject(2842,1964.51867676,-350.99310303,1091.94543457,0.00000000,0.00000000,90.00000000); //object(gb_bedrug04) (9)
CreateObject(2842,1964.52026367,-349.16046143,1091.94543457,0.00000000,0.00000000,90.00000000); //object(gb_bedrug04) (10)
CreateObject(2833,1963.55749512,-369.65057373,1092.72888184,0.00000000,0.00000000,0.00000000); //object(gb_livingrug02) (1)
CreateObject(2834,1968.81579590,-372.52481079,1092.72888184,0.00000000,0.00000000,0.00000000); //object(gb_livingrug03) (1)
CreateObject(6959,1951.26586914,-360.22650146,1095.56030273,310.00000000,180.00000000,90.00000000); //object(vegasnbball1) (1)
CreateObject(6959,1976.87695312,-356.75421143,1095.51965332,310.00000000,180.00000000,270.00000000); //object(vegasnbball1) (3)
CreateObject(6959,1958.95715332,-378.23306274,1096.33813477,309.99572754,179.99450684,180.00000000); //object(vegasnbball1) (4)

//--------------------------------------------- Hopital ---------------------------------------------
 CreateObject(18030, -3431.134521, 485.900696, 58.980362, 0.0000, 0.0000, 0.0000);
CreateObject(3851, -3414.403076, 481.469910, 58.052380, 0.0000, 0.0000, 0.0000);
CreateObject(16500, -3438.102051, 479.148163, 58.115932, 0.0000, 0.0000, 180.0000);
CreateObject(16500, -3438.109863, 474.212006, 62.046516, 0.0000, 0.0000, 180.0000);
CreateObject(16500, -3438.104980, 479.143646, 62.044415, 0.0000, 0.0000, 180.0000);
CreateObject(16500, -3440.937256, 481.486877, 56.990864, 0.0000, 0.0000, 270.0000);
CreateObject(16500, -3448.051270, 481.455658, 58.615963, 0.0000, 0.0000, 270.0000);
CreateObject(16500, -3453.049316, 481.449829, 58.615963, 0.0000, 0.0000, 270.0000);
CreateObject(16500, -3445.840332, 478.679169, 58.615963, 0.0000, 0.0000, 180.0000);
CreateObject(16500, -3445.845459, 478.682648, 62.585945, 0.0000, 0.0000, 180.0000);
CreateObject(18084, -3415.399170, 481.453278, 58.747929, 0.0000, 0.0000, 90.0000);
CreateObject(16500, -3438.107178, 474.202484, 58.065929, 0.0000, 0.0000, 180.0000);
CreateObject(1537, -3436.934814, 472.305359, 56.440868, 0.0000, 0.0000, 142.1845);
CreateObject(2164, -3416.020508, 476.476715, 56.808903, 0.0000, 0.0000, 180.0000);
CreateObject(2167, -3415.101318, 476.468048, 56.810150, 0.0000, 0.0000, 180.0000);
CreateObject(2604, -3433.258057, 475.004883, 57.350861, 0.0000, 0.0000, 90.0000);
CreateObject(2608, -3431.760010, 472.435791, 58.362087, 0.0000, 0.0000, 180.0000);
CreateObject(2610, -3430.616211, 473.715393, 56.879414, 0.0000, 0.0000, 180.0000);
CreateObject(1797, -3449.090332, 475.390503, 56.565342, 0.0000, 0.0000, 90.0000);
CreateObject(1797, -3448.117920, 477.217743, 56.565342, 0.0000, 0.0000, 0.0000);
CreateObject(1797, -3441.888916, 477.761749, 56.565342, 0.0000, 0.0000, 0.0000);
CreateObject(1797, -3442.086426, 475.485046, 56.565342, 0.0000, 0.0000, 270.0000);
CreateObject(1742, -3438.055908, 477.629730, 56.615780, 0.0000, 0.0000, 270.0000);
CreateObject(1744, -3439.522461, 472.156342, 58.005661, 0.0000, 0.0000, 180.0000);
CreateObject(1738, -3445.596680, 477.881256, 57.226379, 0.0000, 0.0000, 90.0000);
CreateObject(1791, -3440.372070, 472.281311, 58.329323, 0.0000, 0.0000, 180.0000);
CreateObject(2333, -3439.720215, 479.689484, 56.515408, 0.0000, 0.0000, 270.0000);
CreateObject(2812, -3438.664795, 478.772705, 57.484566, 0.0000, 0.0000, 281.2500);
CreateObject(2813, -3439.505371, 472.514404, 58.346287, 0.0000, 0.0000, 202.5000);
CreateObject(1721, -3439.248047, 481.095367, 56.609905, 0.0000, 0.0000, 191.2500);
CreateObject(1721, -3439.868164, 478.843262, 56.609905, 0.0000, 0.0000, 270.0000);
CreateObject(1742, -3453.084473, 478.078491, 56.524128, 0.0000, 0.0000, 88.6589);
CreateObject(1744, -3451.005371, 481.521484, 58.635593, 0.0000, 0.0000, 359.9227);
CreateObject(1791, -3449.949463, 481.421967, 58.953369, 0.0000, 0.0000, 1.2373);
CreateObject(2333, -3451.439941, 479.903198, 56.552795, 0.0000, 0.0000, 0.1371);
CreateObject(1721, -3452.697754, 479.883484, 56.597763, 0.0000, 0.0000, 307.7117);
CreateObject(1721, -3450.933350, 479.483337, 56.610622, 0.0000, 0.0000, 2.7156);
CreateObject(14705, -3452.778564, 478.655365, 58.787151, 0.0000, 0.0000, 0.0000);
CreateObject(2816, -3450.540039, 480.995361, 57.521580, 0.0000, 0.0000, 0.0000);
CreateObject(1500, -3443.361572, 481.483551, 56.574081, 0.0000, 0.0000, 213.7500);
CreateObject(16500, -3445.825928, 471.733978, 58.615963, 0.0000, 0.0000, 180.0000);
CreateObject(16500, -3445.828857, 471.725494, 62.012665, 0.0000, 0.0000, 180.0000);
CreateObject(1500, -3445.729248, 474.182739, 56.574825, 0.0000, 0.0000, 146.2500);
CreateObject(16500, -3445.833496, 473.747070, 61.216061, 0.0000, 0.0000, 180.0000);
CreateObject(16500, -3440.929443, 481.483551, 60.377632, 0.0000, 0.0000, 270.0000);
CreateObject(16500, -3445.893555, 481.436096, 61.216030, 0.0000, 0.0000, 270.8595);
CreateObject(1649, -3421.715088, 472.331299, 58.606609, 0.0000, 0.0000, 180.0000);
CreateObject(1649, -3426.130127, 472.315765, 58.744919, 0.0000, 0.0000, 180.0000);
CreateObject(1649, -3430.572998, 472.335815, 58.613014, 0.0000, 0.0000, 180.0000);
CreateObject(2690, -3433.158203, 472.335815, 58.121151, 0.0000, 0.0000, 180.0000);
CreateObject(2684, -3433.363770, 476.903015, 57.544289, 0.0000, 0.0000, 180.0000);
CreateObject(2687, -3426.413086, 472.790649, 59.531715, 0.0000, 0.0000, 179.9997);
CreateObject(2688, -3430.565918, 472.385803, 58.194000, 0.0000, 0.0000, 180.0000);
CreateObject(16500, -3436.266357, 472.183624, 60.966015, 0.0000, 0.0000, 90.0000);
CreateObject(2162, -3418.316162, 476.917206, 56.761330, 0.0000, 0.0000, 90.0000);
CreateObject(1500, -3415.351074, 479.521912, 56.816780, 0.0000, 0.0000, 224.9999);
CreateObject(1729, -3417.998291, 478.823853, 56.813511, 0.0000, 0.0000, 78.7500);
CreateObject(16500, -3448.625977, 490.762451, 58.615963, 0.0000, 0.0000, 90.0000);
CreateObject(16500, -3455.157471, 490.765350, 58.615963, 0.0000, 0.0000, 90.0000);
CreateObject(16500, -3451.397949, 490.776398, 61.216000, 0.0000, 0.0000, 90.0000);
CreateObject(1500, -3452.708740, 490.693665, 56.581261, 0.0000, 0.0000, 65.6266);
CreateObject(16500, -3445.807861, 493.480042, 58.015926, 0.0000, 0.0000, 180.0000);
CreateObject(16500, -3445.808105, 497.330750, 58.015926, 0.0000, 0.0000, 180.0000);
CreateObject(16500, -3445.810791, 493.474518, 61.420723, 0.0000, 0.0000, 180.0000);
CreateObject(16500, -3445.811035, 498.395142, 61.408611, 0.0000, 0.0000, 180.0000);
CreateObject(1797, -3449.565430, 492.596039, 56.555542, 0.0000, 0.0000, 270.0000);
CreateObject(1797, -3449.555176, 496.229187, 56.557510, 0.0000, 0.0000, 270.0000);
CreateObject(1797, -3452.452148, 496.169617, 56.565342, 0.0000, 0.0000, 359.3814);
CreateObject(1742, -3449.852539, 499.945496, 56.592693, 0.0000, 0.0000, 3.6786);
CreateObject(2333, -3451.374023, 493.654297, 56.522900, 0.0000, 0.0000, 91.1340);
CreateObject(1744, -3448.056152, 500.009369, 58.725933, 0.0000, 0.0000, 0.0000);
CreateObject(1791, -3447.075195, 499.972015, 59.053726, 0.0000, 0.0000, 359.5185);
CreateObject(1721, -3452.690186, 495.670135, 56.588215, 0.0000, 0.0000, 270.3182);
CreateObject(1721, -3451.707520, 493.630859, 56.601074, 0.0000, 0.0000, 352.7206);
CreateObject(1817, -3448.081787, 498.776672, 56.566715, 0.0000, 0.0000, 0.0000);
CreateObject(1819, -3447.332275, 493.354950, 56.571541, 0.0000, 0.0000, 0.0000);
CreateObject(1721, -3446.226807, 498.407898, 56.601074, 0.0000, 0.0000, 94.2377);
CreateObject(1738, -3449.987061, 490.982697, 57.201378, 0.0000, 0.0000, 0.0000);
CreateObject(1738, -3452.862549, 473.974640, 57.176376, 0.0000, 0.0000, 270.0000);
CreateObject(1782, -3448.021240, 499.291351, 57.155022, 0.0000, 0.0000, 0.0000);
CreateObject(2202, -3428.985596, 473.662872, 56.564693, 0.0000, 0.0000, 180.0000);
CreateObject(2855, -3452.366211, 493.585510, 57.491684, 0.0000, 0.0000, 123.7499);
CreateObject(2848, -3446.942139, 493.871826, 57.062328, 0.0000, 0.0000, 22.5000);
CreateObject(16500, -3440.934326, 490.790497, 58.615963, 0.0000, 0.0000, 90.0000);
CreateObject(1500, -3445.592529, 490.674225, 56.515873, 0.0000, 0.0000, 47.5783);
CreateObject(16500, -3444.256348, 490.800537, 61.216015, 0.0000, 0.0000, 90.0000);
CreateObject(16500, -3438.110107, 493.135803, 58.590961, 0.0000, 0.0000, 180.0000);
CreateObject(16500, -3438.112061, 498.095184, 58.590961, 0.0000, 0.0000, 180.0000);
CreateObject(16500, -3438.113037, 493.124756, 62.585213, 0.0000, 0.0000, 180.0000);
CreateObject(16500, -3438.114990, 498.105011, 62.577660, 0.0000, 0.0000, 180.0000);
CreateObject(1797, -3444.691162, 496.334839, 56.580544, 0.0000, 0.0000, 359.3814);
CreateObject(1797, -3441.860107, 492.629791, 56.642399, 0.0000, 0.0000, 270.9634);
CreateObject(1742, -3441.492188, 499.923370, 56.603683, 0.0000, 0.0000, 3.6786);
CreateObject(1819, -3439.431641, 493.252075, 56.586964, 0.0000, 0.0000, 0.0000);
CreateObject(1744, -3440.229492, 500.028778, 58.939453, 0.0000, 0.0000, 0.0000);
CreateObject(1791, -3439.527588, 499.928497, 59.269745, 0.0000, 0.0000, 359.5185);
CreateObject(1817, -3439.362793, 498.105133, 56.566463, 0.0000, 0.0000, 270.6186);
CreateObject(1721, -3438.956543, 495.714783, 56.601074, 0.0000, 0.0000, 358.7364);
CreateObject(1721, -3439.734375, 499.398438, 56.604694, 0.0000, 0.0000, 202.3193);
CreateObject(14705, -3441.540527, 499.608337, 58.866707, 0.0000, 0.0000, 0.0000);
CreateObject(2854, -3438.844727, 497.996643, 56.671379, 0.0000, 0.0000, 270.0000);
CreateObject(2850, -3438.910400, 493.788483, 57.103001, 0.0000, 0.0000, 0.0000);
CreateObject(1738, -3445.584473, 494.370667, 57.245953, 0.0000, 0.0000, 270.6186);
CreateObject(16500, -3434.194092, 497.901703, 58.032349, 0.0000, 0.0000, 0.0000);
CreateObject(16500, -3434.191650, 492.959229, 58.032349, 0.0000, 0.0000, 0.0000);
CreateObject(16500, -3434.187012, 497.220947, 61.932343, 0.0000, 0.0000, 0.0000);
CreateObject(16500, -3434.188721, 492.969238, 61.923931, 0.0000, 0.0000, 0.0000);
CreateObject(16500, -3431.852783, 490.828308, 55.407295, 0.0000, 0.0000, 90.0000);
CreateObject(1649, -3432.182617, 490.781647, 58.305847, 0.0000, 0.0000, 0.0000);
CreateObject(16500, -3427.350098, 490.847107, 55.382248, 0.0000, 0.0000, 90.0000);
CreateObject(16500, -3427.491211, 490.850433, 59.380772, 0.0000, 0.0000, 90.0000);
CreateObject(16500, -3431.449219, 490.856628, 61.920868, 0.0000, 0.0000, 90.0000);
CreateObject(1649, -3432.149170, 490.856873, 58.303780, 0.0000, 0.0000, 180.0000);
CreateObject(16500, -3424.925049, 493.249908, 58.007347, 0.0000, 0.0000, 180.0000);
CreateObject(16500, -3424.927979, 493.267059, 61.925598, 0.0000, 0.0000, 180.0000);
CreateObject(16500, -3424.926270, 499.983459, 58.032349, 0.0000, 0.0000, 180.0000);
CreateObject(16500, -3424.930908, 499.994934, 62.032349, 0.0000, 0.0000, 180.0000);
CreateObject(16500, -3424.950439, 496.570526, 61.182480, 0.0000, 0.0000, 180.0000);
CreateObject(1500, -3424.853271, 495.712738, 56.561943, 0.0000, 0.0000, 135.0000);
CreateObject(1671, -3432.127930, 473.812897, 57.055622, 0.0000, 0.0000, 191.2501);
CreateObject(1671, -3431.948975, 476.075195, 57.030621, 0.0000, 0.0000, 270.0000);
CreateObject(3396, -3425.713379, 493.406006, 56.535950, 0.0000, 0.0000, 0.0000);
CreateObject(3395, -3428.222900, 491.714142, 56.535950, 0.0000, 0.0000, 270.0000);
CreateObject(3388, -3425.559570, 499.124847, 56.363159, 0.0000, 0.0000, 270.0000);
CreateObject(2343, -3430.551025, 491.680328, 57.188637, 0.0000, 0.0000, 87.8172);
CreateObject(1715, -3427.075195, 493.356323, 56.579773, 0.0000, 0.0000, 78.7500);
CreateObject(1738, -3427.542725, 499.670471, 57.192799, 0.0000, 0.0000, 0.0000);
CreateObject(1808, -3428.709473, 499.677643, 56.608017, 0.0000, 0.0000, 0.0000);
CreateObject(2146, -3430.795654, 496.940308, 57.048721, 0.0000, 0.0000, 22.5000);
CreateObject(2133, -3429.549805, 499.348755, 56.587135, 0.0000, 0.0000, 0.0000);
CreateObject(2134, -3433.613281, 492.092712, 56.562134, 0.0000, 0.0000, 90.0000);
CreateObject(2141, -3433.589111, 493.151947, 56.601280, 0.0000, 0.0000, 90.0000);
CreateObject(2197, -3432.609863, 494.996460, 56.580360, 0.0000, 0.0000, 90.0000);
CreateObject(2197, -3432.623535, 494.300476, 56.580360, 0.0000, 0.0000, 90.0000);
CreateObject(1723, -3419.855713, 478.272919, 56.561218, 0.0000, 0.0000, 270.0000);
CreateObject(1723, -3422.946533, 473.705200, 56.536217, 0.0000, 0.0000, 180.0000);
CreateObject(1724, -3420.319092, 474.677429, 56.511177, 0.0000, 0.0000, 226.4098);
CreateObject(2008, -3417.912109, 486.256378, 56.781921, 0.0000, 0.0000, 0.0000);
CreateObject(2311, -3422.593018, 476.790375, 56.580482, 0.0000, 0.0000, 217.8151);
CreateObject(1724, -3423.011475, 479.122925, 56.529652, 0.0000, 0.0000, 2.0967);
CreateObject(1724, -3425.823975, 477.620270, 56.518051, 0.0000, 0.0000, 49.3658);
CreateObject(2854, -3423.770996, 476.014008, 57.086102, 0.0000, 0.0000, 236.2501);
CreateObject(14705, -3422.609619, 476.818726, 57.309940, 0.0000, 0.0000, 0.0000);
CreateObject(16500, -3426.793213, 475.077362, 55.132370, 0.0000, 0.0000, 0.0000);
CreateObject(16500, -3426.793213, 479.284363, 55.132339, 0.0000, 0.0000, 0.0000);
CreateObject(16500, -3429.281982, 481.681793, 55.132324, 0.0000, 0.0000, 90.0000);
CreateObject(2133, -3427.793945, 473.978851, 56.562134, 0.0000, 0.0000, 213.7500);
CreateObject(2604, -3428.789551, 481.079590, 57.285042, 0.0000, 0.0000, 0.0000);
CreateObject(1671, -3429.205811, 480.227325, 57.048386, 0.0000, 0.0000, 270.0000);
CreateObject(2184, -3431.083496, 481.461639, 56.608799, 0.0000, 0.0000, 202.5000);
CreateObject(2180, -3427.508545, 477.707947, 56.535961, 0.0000, 0.0000, 90.0000);
CreateObject(14604, -3427.526855, 476.669037, 57.568817, 0.0000, 0.0000, 90.0000);
CreateObject(2813, -3427.467041, 477.808136, 57.337742, 0.0000, 0.0000, 258.7500);
CreateObject(2131, -3433.772217, 496.696533, 56.437126, 0.0000, 0.0000, 90.0000);
CreateObject(1808, -3427.486572, 475.839020, 56.558014, 0.0000, 0.0000, 270.0000);
CreateObject(1506, -3416.948486, 483.419342, 56.690411, 0.0000, 0.0000, 0.0000);
CreateObject(1671, -3428.119873, 479.636230, 57.048386, 0.0000, 0.0000, 315.0000);
CreateObject(1723, -3449.718994, 482.042450, 56.586220, 0.0000, 0.0000, 180.0000);
CreateObject(1723, -3452.530762, 482.837006, 56.586220, 0.0000, 0.0000, 90.0000);
CreateObject(1724, -3447.379639, 482.028687, 56.586182, 0.0000, 0.0000, 180.0000);
CreateObject(1724, -3452.561035, 486.193298, 56.561180, 0.0000, 0.0000, 90.0000);
CreateObject(1723, -3449.333984, 490.178223, 56.561218, 0.0000, 0.0000, 0.0000);
CreateObject(1723, -3419.809570, 489.638977, 56.561218, 0.0000, 0.0000, 270.0000);
CreateObject(1724, -3419.804443, 486.514709, 56.561180, 0.0000, 0.0000, 269.9999);
CreateObject(2311, -3449.535645, 483.908875, 56.580482, 0.0000, 0.0000, 135.0000);
//--------------------------------------------- Hopital: Fin ---------------------------------------------

//------------------------[Les Voitures]--------------------------------------
	// CreatedCars check
	for(new i = 0; i < sizeof(CreatedCars); i++)
	{
	    CreatedCars[i] = 0;
	}
	// Zones
	for(new i = 0; i < sizeof(TurfInfo); i++)
	{
	    Turfs[i] = GangZoneCreate(TurfInfo[i][zMinX],TurfInfo[i][zMinY],TurfInfo[i][zMaxX],TurfInfo[i][zMaxY]);
	    //surenos = GangZoneCreate(2107.1521,-1091.9614, 1840.1005,-1307.0010);
	    //black_yakuza = GangZoneCreate(891.7503,-989.7183, 1166.8994,-1148.7334);
	    //blanc = GangZoneCreate(797.3204,-1059.4032, 646.6879,-1317.8732);
	    //corleonne = GangZoneCreate(1409.3628,-1034.4958, 1040.0868,-727.9351);
	    //jefferson_saints = GangZoneCreate(2082.62,-1482.82, 2382.62,-1232.82);
	    //Cripz = GangZoneCreate(2538.4878, -1595.8009, 2208.0776, -1799.0363);
	    //Surenos = GangZoneCreate(1683.81, -2179.277, 1961.417, -1962.151);
		//bloods = GangZoneCreate(2082.62,-1482.82, 2382.62,-1232.82);
	}
	// Player Class's
	for(new i = 0; i <= sizeof(Peds)-1; i++)
	{
		AddPlayerClass(Peds[i][0],1958.3783,1343.1572,1100.3746,269.1425,-1,-1,-1,-1,-1,-1);
	}
	// Car Spawns
	/*for(new h = 0; h < sizeof(HouseInfo); h++)
	{
		+aticVehicleEx(HouseInfo[h][hVec], HouseCarSpawns[h][0], HouseCarSpawns[h][1], HouseCarSpawns[h][2], HouseCarSpawns[h][3], HouseInfo[h][hVcol1], HouseInfo[h][hVcol2], 60000);
		gCarLock[h+1] = 1;
	}//34*/
	/*
	AddStaticVehicleEx(520,765.8293,2934.7917,12.1635,105.5184,0,0,30000); // 1 Armée bateau
	AddStaticVehicleEx(520,781.5580,2939.2815,12.1656,104.7748,0,0,30000); // 2
	AddStaticVehicleEx(520,805.8447,2960.2363,12.1562,105.6591,0,0,30000); // 3
	AddStaticVehicleEx(520,822.3945,2964.8977,12.1642,106.7185,0,0,30000); // 4
	AddStaticVehicleEx(520,838.3188,2969.8328,12.1617,104.8087,0,0,30000); // 5
	AddStaticVehicleEx(520,853.6806,2973.9810,12.1515,106.1435,0,0,30000); // 6
	AddStaticVehicleEx(520,878.9930,2982.6887,12.1637,106.5176,0,0,30000); // 7
	AddStaticVehicleEx(520,882.0629,2972.7224,12.1500,107.3801,0,0,30000); // 8
	AddStaticVehicleEx(425,869.6025,2964.2554,19.0280,318.9345,0,0,30000); // 9
	AddStaticVehicleEx(425,885.4484,2969.7744,19.0286,325.8510,0,0,30000); // 10
	AddStaticVehicleEx(433,2817.8406,902.7385,11.0737,359.3256,0,0,30000); // 11
	AddStaticVehicleEx(433,2827.2258,902.6057,11.0545,359.9795,0,0,30000); // 12
	AddStaticVehicleEx(433,2855.1912,902.8317,11.0628,1.4608,16,0,30000); // 13
	AddStaticVehicleEx(470,2842.7507,895.7993,10.7509,1.1645,0,0,30000); // 14
	AddStaticVehicleEx(470,2830.4675,927.6856,10.7591,179.9793,0,0,30000); // 15
	AddStaticVehicleEx(470,2823.7422,927.8027,10.7576,178.5057,0,0,30000); // 16
	AddStaticVehicleEx(470,2817.5869,927.8497,10.7576,179.3740,0,0,30000); // 17
	AddStaticVehicleEx(470,2811.3352,927.9924,10.7583,179.4618,0,0,30000); // 18
	AddStaticVehicleEx(470,2804.7002,928.1704,10.7576,179.3330,0,0,30000); // 19
	AddStaticVehicleEx(411,2804.8667,938.7375,10.4871,0.1897,16,0,30000); // 20
	AddStaticVehicleEx(470,2811.1489,939.0025,10.7603,0.1989,0,0,30000); // 21
	AddStaticVehicleEx(415,2817.6367,938.6624,10.5023,359.8325,16,0,30000); // 22
	AddStaticVehicleEx(470,2823.9180,939.1232,10.7580,1.0771,0,0,30000); // 23
	AddStaticVehicleEx(405,1406.93,-1790.2,13.3,90, 0, 0, 30000); // Mayor security 24
	AddStaticVehicleEx(405,1406.9,-1793.8,13.3,90, 0, 0, 30000); // Mayor security 25
	AddStaticVehicleEx(405,1406.7,-1782.16,13.3,90, 0, 0, 30000); // Mayor security 26
	AddStaticVehicleEx(409,1405.87,-1785.96,13.3,90,1,1,30000); // Mayor stretch 27
	AddStaticVehicleEx(405,1027.3253,1126.8652,10.6879,312.6502,0,0,30000); // 28
	AddStaticVehicleEx(487,1087.1315,1076.8191,11.0323,208.2836,0,1,30000); // Government Helicopter 29
	//-------------------------------------------------------------------------------------------
	AddStaticVehicleEx(599,616.1244,-601.7048,17.4214,271.5325, -1, -1, 30000); // Cop cruiser (Dillimore) 30
	AddStaticVehicleEx(525,1530.3849,-1645.1930,5.7777,179.3521,0,0,30000); // Cop TowTruck 31
	AddStaticVehicleEx(596,1570.1555,-1710.3179,5.6136,358.7748, -1, -1, 30000); // Cop cruiser 32
	AddStaticVehicleEx(596,1574.4703,-1710.9795,5.6115,0.4220, -1, -1, 30000); // Cop cruiser 33
	AddStaticVehicleEx(596,1587.4816,-1710.3594,5.6104,358.9421,-1, -1, 30000); // Cop cruiser 34
	AddStaticVehicleEx(596,1595.6578,-1710.9442,5.6119,359.6335,0,1,30000); // Cop cruiser 35
    AddStaticVehicleEx(596,1545.7845,-1684.4004,5.6342,271.1593,0,1,30000); // Cop cruiser 36
    AddStaticVehicleEx(596,1558.7819,-1710.9503,5.6119,1.1862,0,1,30000); // Cop cruiser 37
    AddStaticVehicleEx(596,1601.8564,-1704.1805,5.6110,88.9959,-1,-1,30000); // Cop cruiser 38
	AddStaticVehicleEx(596,1600.9231,-1691.9321,5.6113,91.6221,-1,-1,30000); // Cop cruiser 39
	AddStaticVehicleEx(596,1600.4153,-1687.9385,5.6118,90.7431,-1,-1,30000); // Cop cruiser 40
	AddStaticVehicleEx(596,1529.6339,-1683.7720,5.6124,270.5692, 29, 29, 30000); // Cop general car 41
	AddStaticVehicleEx(596,1529.5374,-1688.0181,5.6114,270.0886, 29, 29, 30000); // Cop general car 42
	AddStaticVehicleEx(523,1557.9637,-1694.5964,5.4673,226.4766,-1,-1,30000); // Police moto 43
    AddStaticVehicleEx(523,1557.9060,-1697.4153,5.4689,220.9842,-1,-1,30000); // Police moto 44
    AddStaticVehicleEx(523,1558.1632,-1691.8335,5.4596,224.7542,-1,-1,30000); // Police moto 45
	AddStaticVehicleEx(599,1584.6510,-1671.4448,6.0541,271.5708,0,1,30000); // Police ranger 46
    AddStaticVehicleEx(599,1584.7875,-1667.6138,6.0592,272.0818,0,1,30000); // Police ranger 47
	AddStaticVehicleEx(599,1545.3936,-1667.7957,6.0809,87.7152,29,29,30000); // Police tan-white rancher 48
	AddStaticVehicleEx(599,1545.0044,-1671.9329,6.0791,91.5492,29,29,30000); // Police tan-white rancher 49
	AddStaticVehicleEx(427,1544.2870,-1659.3522,5.6119,88.5025,-1,-1,30000);// Police SWAT enforcer 50
	AddStaticVehicleEx(601,1544.6962,-1663.2948,6.0225,88.9357,-1,-1,30000); // Police SWAT APC 51
	AddStaticVehicleEx(497,1566.6628,-1653.8688,28.5752,91.9445,0,1,30000);// Police maverick 52
	//-------------------------------------------------------------------------------------------
	AddStaticVehicleEx(408,2284.0691,-2218.2588,14.0847,227.4736,1,44,30000); // 53 Eboueur 1 (Trashmaster)
	AddStaticVehicleEx(408,2287.7991,-2214.2251,14.0913,226.9102,1,44,30000); // 54 Eboueur 2 (Trashmaster)
	AddStaticVehicleEx(486,825.7841,838.2534,11.3527,19.8301,0,0,30000); // // 55 Dozer 1
	AddStaticVehicleEx(486,837.2274,841.9581,12.3655,19.6693,0,0,30000); // 56 Dozer 2
	AddStaticVehicleEx(601,2298.2410,2451.5183,3.0347,269.0140,1,44,30000); // 57
	AddStaticVehicleEx(427,2279.0239,2445.6763,3.5248,270.6520,1,44,30000); // 58
	AddStaticVehicleEx(528,2303.4697,2431.0403,3.4190,0.6458,1,44,30000); // 59
	AddStaticVehicleEx(528,2298.9124,2431.0339,3.4031,0.7032,1,44,30000); // 60
	AddStaticVehicleEx(528,2286.0632,2431.0823,3.4044,1.5270,1,44,30000); // 61
	AddStaticVehicleEx(528,2277.0344,2430.9592,3.4035,0.3894,1,44,30000); // 62
	AddStaticVehicleEx(490,1671.2300,-1717.1830,20.6155,270.4886,0,0,30000);  //fbi vehicule id 63
	AddStaticVehicleEx(490,1671.1710,-1712.4636,20.6183,271.5067,0,0,30000);  //fbi 64
	AddStaticVehicleEx(426,1655.8638,-1695.3286,20.2015,180.5437,0,0,30000);  //fbi 65
	AddStaticVehicleEx(490,1671.2654,-1704.7764,20.6156,271.8763,0,0,30000);  //fbi 66
	AddStaticVehicleEx(490,1671.3326,-1709.6614,20.5940,273.0372,0,0,30000);  //fbi 67
	AddStaticVehicleEx(426,1662.2960,-1695.2537,20.1992,180.9408,0,0,30000);  //fbi 68
	AddStaticVehicleEx(560,1669.3593,-1708.7505,15.2686,92.3456,0,0,30000);  //fbi Sultan 69
	AddStaticVehicleEx(487,1993.1104,-2326.5894,13.7234,87.5061,0,0,30000); // Avion airport 70
	AddStaticVehicleEx(482,1669.2273,-1702.0549,15.7346,89.8862,0,0,30000);  //fbi 71
	AddStaticVehicleEx(427,1668.0566,-1695.7601,15.7413,93.5822,0,0,30000);  //fbi 72
	AddStaticVehicleEx(415,2290.1143,2430.6514,-7.6810,0.1661,0,0,30000); // HSPD unité special 74
	AddStaticVehicleEx(487,1992.7111,-2302.0740,13.7239,87.3556,0,0,30000);  // avion aerport Vehicule id 73
   	//-------------------------------------------------------------------------------------------
	AddStaticVehicleEx(416,1177.35,-1339.24,13.66,269.58, -1, -1, 30000); // Ambulance 75
	AddStaticVehicleEx(416,1176.98,-1308.65,13.62,269.33, -1, -1, 30000); // Ambulance 76
	AddStaticVehicleEx(416,1189.87,-1357.14,13.21,180.78, -1, -1, 30000); // Ambulance 77
	AddStaticVehicleEx(487,1179.8206,-1376.4108,24.1729,356.8363, 1, 3, 30000); // Medic chopper 78
	//-------------------------------------------------------------------------------------------
	AddStaticVehicleEx(522,2771.1040,-1614.8170,10.6575,270.4165,90,255, 30000); // hitman 79
    AddStaticVehicleEx(560,2771.1782,-1606.0238,10.6610,271.1512,90,255, 30000); // hitman 80
    AddStaticVehicleEx(487,2779.6523,-1609.8367,10.6618,272.0049,90,255, 30000); // hitman helico 81
	//-------------------------------------------------------------------------------------------
	AddStaticVehicleEx(431,1796.5227,-1886.0601,13.5002,270.4550, -1, -1, 30000); // Bus 82
	AddStaticVehicleEx(431,1780.0952,-1886.2471,13.4909,270.2514, -1, -1, 30000); // Bus 83
	//-------------------------------------------------------------------------------------------
	AddStaticVehicleEx(409,1789.4137,-1932.6389,13.1079,357.7568,0,0,30000); // YCAT Co. Limo 84
	AddStaticVehicleEx(421,1803.6373,-1916.4673,13.1141,89.0899,0,0,30000); // YCAT Co. Washington 85
	AddStaticVehicleEx(421,1803.6617,-1925.0874,13.1319,266.7457,0,0,30000); // YCAT Co. Washington 86
	AddStaticVehicleEx(420,1777.7354,-1908.2002,13.1676,268.9460,-1,-1,30000); // YCAT Co.Taxi 87
	AddStaticVehicleEx(420,1777.7156,-1902.5759,13.1662,270.2853,-1,-1,30000); // YCAT Co. Taxi 88
	AddStaticVehicleEx(420,1803.7118,-1906.2510,13.2024,85.1059,-1,-1,30000); // YCAT Co. Taxi 89
	AddStaticVehicleEx(420,1777.3717,-1896.7965,13.1916,270.3214,-1,-1,30000); // YCAT Co. Taxi 90
	AddStaticVehicleEx(420,1796.4906,-1932.9441,13.1914,357.7162,-1,-1,30000); // YCAT Co. Taxi 91
	AddStaticVehicleEx(420,1780.8253,-1931.8109,13.1295,358.2670,-1,-1,30000); // YCAT Co. Taxi 92
	AddStaticVehicleEx(420,1777.6808,-1913.4772,13.1285,267.0958,-1,-1,30000); // YCAT Co. Taxi 93
	//-------------------------------------------------------------------------------------------
	AddStaticVehicleEx(582,1772.1240,-1273.6726,13.6622,126.8975,125,125,30000); // News van 94
	AddStaticVehicleEx(582,1778.5787,-1268.8505,13.6421,127.9192,125,125,30000); // News van 95
	AddStaticVehicleEx(488,1545.4849,-1353.9330,329.6510,185.4584,125,125,30000); // News Chopper 96
	//-------------------------------------------------------------------------------------------
	AddStaticVehicleEx(525,1629.5017,-1828.3021,13.4132,0.3057,0,0,30000); // Towcar 97
	AddStaticVehicleEx(525,1656.4729,-1820.6843,13.4221,89.6995,0,0,30000); // Towcar 98
	AddStaticVehicleEx(525,1655.5881,-1837.4949,13.4260,91.8247,0,0,30000); // Towcar 99
	AddStaticVehicleEx(525,1635.1335,-1845.3354,13.4211,0.2235,0,0,30000); // Towcar 100
	//-------------------------------------------------------------------------------------------
	AddStaticVehicleEx(571,2286.2141,-2354.5000,12.8306,225.8705,-1,-1,30000); // kart 101
	AddStaticVehicleEx(571,2279.9412,-2348.4141,12.8312,225.8585,-1,-1,30000); // kart 102
	AddStaticVehicleEx(571,2291.7932,-2345.5356,12.8305,227.3060,-1,-1,30000); // kart 103
	AddStaticVehicleEx(571,2287.5615,-2341.6433,12.8306,226.5350,-1,-1,30000); // kart 104
	AddStaticVehicleEx(571,2299.6785,-2338.3186,12.8307,224.3563,-1,-1,30000); // kart 105
	AddStaticVehicleEx(571,2295.3887,-2334.9448,12.8307,227.9102,-1,-1,30000); // kart 106
	CreateVehicle(494,-1401.0436,-210.0052,1042.9913,1.6623,1,0,30000); //hotring 107
	CreateVehicle(494,-1400.4019,-219.9365,1043.0348,5.3554,1,3,30000); //hotring 108
	CreateVehicle(494,-1394.4932,-207.7917,1042.9963,3.6872,0,6,30000); //hotring 109
	CreateVehicle(494,-1393.7854,-217.9354,1043.0325,2.9556,1,2,30000); //hotring 110
	CreateVehicle(468,-1445.6392,-592.3033,1055.7831,90.2133,-1,-1,30000); //bike 111
	CreateVehicle(468,-1433.1708,-592.4930,1055.6533,92.4067,-1,-1,30000); //bike 112
	CreateVehicle(468,-1448.5325,-584.4943,1055.4949,95.5400,-1,-1,30000); //bike 113
	CreateVehicle(468,-1434.8973,-585.1266,1055.2488,91.1533,-1,-1,30000); //bike 114
	CreateVehicle(468,-1449.2814,1610.7823,1052.5313,272.9406,-1,-1,30000); // bike 115
	CreateVehicle(468,-1453.8767,1611.2418,1052.5313,89.0355,-1,-1,30000); // bike 116
	CreateVehicle(468,-1454.4746,1614.3342,1052.5313,86.8422,-1,-1,30000); // bike 117
	CreateVehicle(468,-1449.5795,1614.0684,1052.5313,269.2039,-1,-1,30000); // bike 118
	//-------------------------------------------------------------------------------------------
	AddStaticVehicleEx(571,1452.7358,-844.5006,83.8422,179.7695,93,93,30000); // Vagos Quad 2 119
	AddStaticVehicleEx(463,830.0189,-608.9219,16.5311,358.9384,6,6,30000); // la Biker Car 120
	AddStaticVehicleEx(482,819.8817,-608.6214,16.5223,359.7257,6,6,30000); // la Bikers Van 121
	AddStaticVehicleEx(463,856.4737,-582.4958,18.3606,181.0021,6,0,30000); // la Bikers Sport Car 122
	AddStaticVehicleEx(482,1819.1561,-2020.5332,13.0625,179.1689,93,93,3000); // Van Of Vagos 123
	AddStaticVehicleEx(567,1826.7920,-2021.0032,13.0625,180.4209,93,93,3000); // Vagos Car 124
	//-------------------------------------------------------------------------------------------
	AddStaticVehicleEx(448,2122,-1784.1558,12.9844,0.9122,3,6,30000); // PizzaBoy 125
	AddStaticVehicleEx(448,2120,-1784.1558,12.9844,0.9122,3,6,30000); // PizzaBoy 126
	AddStaticVehicleEx(448,2118,-1784.1558,12.9844,0.9122,3,6,30000); // PizzaBoy 127
	AddStaticVehicleEx(448,2116,-1784.1558,12.9844,0.9122,3,6,30000); // PizzaBoy 128
	AddStaticVehicleEx(448,2114,-1784.1558,12.9844,0.9122,3,6,30000); // PizzaBoy 129
	AddStaticVehicleEx(448,2112,-1784.1558,12.9844,0.9122,3,6,30000); // PizzaBoy 130
	//-------------------------------------------------------------------------------------------
	AddStaticVehicleEx(456,2508.9116,-2111.7759,13.7206,0,-1,-1, 30000); // Component Truck Yankee 131
	AddStaticVehicleEx(456,2484.5356,-2111.7759,13.7196,0,-1,-1,30000); // Component Truck Yankee 132
	AddStaticVehicleEx(440,2529.0413,-2085.3999,13.6651,90,-1,-1,30000); // Component Truck Rumpo 133
	AddStaticVehicleEx(440,2528.9482,-2092.6104,13.6631,90,-1,-1,30000); // Component Truck Rumpo 134
	//-------------------------------------------------------------------------------------------
	AddStaticVehicleEx(462,2047.1050,-1915.4995,13.1465,270.1280,39,39,30000); // Faggio 135
	AddStaticVehicleEx(462,2047.1132,-1918.1272,13.1456,272.5655,3,1,30000); // Faggio 136
	AddStaticVehicleEx(462,2047.0245,-1920.4908,13.1377,269.2282,6,6,30000); // Faggio 137
	AddStaticVehicleEx(462,1546.0422,-2362.0017,13.1630,6.6997,5,5,30000); // Faggio 138
	AddStaticVehicleEx(462,1556.9257,-1781.2898,13.1379,270.1688,2,2,30000); // Faggio 139
	AddStaticVehicleEx(462,1556.8872,-1785.3268,13.1397,269.5518,43,43,30000); // Faggio 140
	AddStaticVehicleEx(462,1556.8510,-1789.6389,13.1391,269.4599,46,46,30000); // Faggio 141
	AddStaticVehicleEx(462,1556.8291,-1794.4578,13.1409,269.6167,39,39,30000); // Faggio 142
	AddStaticVehicleEx(462,1451.3268,-1045.7839,23.4226,2.9440,28,28,30000); // Faggio 143
	AddStaticVehicleEx(462,1454.1058,-1046.2123,23.4197,3.2030,1,3,30000); // Faggio 144
	AddStaticVehicleEx(462,1754.7034,-1865.2559,13.1720,3.2105,13,13,30000); // Faggio 145
	AddStaticVehicleEx(462,1757.5580,-1865.3109,13.1760,1.1841,3,1,30000); // Faggio 146
	AddStaticVehicleEx(462,1760.1707,-1865.3007,13.1699,359.7696,10,10,30000); // Faggio 147
	AddStaticVehicleEx(462,1762.8851,-1865.2471,13.1724,1.7406,1,3,30000); // Faggio 148
	AddStaticVehicleEx(462,1765.9869,-1865.3231,13.1672,0.4071,12,12,30000); // Faggio 149
	AddStaticVehicleEx(462,1769.0184,-1865.2574,13.1753,0.1541,1,2,30000); // Faggio 150
	AddStaticVehicleEx(462,1772.5895,-1865.2175,13.1731,358.5161,2,1,30000); // Faggio 151
	AddStaticVehicleEx(462,1775.9954,-1865.1549,13.1714,0.4682,13,13,30000); // Faggio 152
	AddStaticVehicleEx(462,2047.0851,-1913.1503,13.1415,272.3796,14,14,30000); // Faggio 153
	//-------------------------------------------------------------------------------------------
	AddStaticVehicleEx(407,1005.7731,-1459.2805,13.6780,359.2671,-1,-1,30000); // Fire Truck Type [1] 154
	AddStaticVehicleEx(407,1013.3235,-1459.5682,13.6819,1.0221,-1,-1,30000); // Fire Truck Type [1] 155
	AddStaticVehicleEx(544,988.6091,-1453.2679,13.7752,267.6749,-1,-1,30000); // Fire Truck Type [2] 156
	AddStaticVehicleEx(475,2473.4978,-1688.1055,13.2484,359.9376,86,86,30000); // Groove Car 2 157
	//-------------------------------------------------------------------------------------------
	AddStaticVehicleEx(602,1681.5526,-1035.9557,23.6389,180,123,92,30000); // Rent car 158
	AddStaticVehicleEx(602,1685.3273,-1035.4058,23.6409,180,101,101,30000); // Rent car 159
	AddStaticVehicleEx(424,1689.9888,-1035.6348,23.6384,180,83,110,30000); // Rent car 160
	AddStaticVehicleEx(424,1694.3981,-1034.7706,23.6860,180,74,74,30000); // Rent car 161
	AddStaticVehicleEx(518,1703.3409,-1044.8248,23.6857,0,91,91,30000); // Rent car 162
	AddStaticVehicleEx(518,1712.7332,-1034.9132,23.6933,180,41,41,30000); // Rent car 163
	AddStaticVehicleEx(402,1690.2993,-1044.3937,23.5577,0,10,1,30000); // Rent car 164
	AddStaticVehicleEx(402,1681.0250,-1044.6152,23.5528,0,36,1,30000); // Rent car 165
	AddStaticVehicleEx(589,1703.0122,-1035.1486,23.5598,180,45,1,30000); // Rent car 166
	AddStaticVehicleEx(589,1698.9230,-1044.6398,23.9990,0,114,114,30000); // Rent car 167
	AddStaticVehicleEx(585,1707.8655,-1035.1423,24.0034,180,95,95,30000); // Rent car 168
	AddStaticVehicleEx(585,1698.7041,-1034.9835,23.9997,180,61,61,30000); // Rent car 169
	AddStaticVehicleEx(587,1685.3434,-1044.4137,23.9994,0,119,119,30000); // Rent car 170
	AddStaticVehicleEx(587,1694.5468,-1044.4786,23.6760,0,92,1,30000); // Rent car 171
	AddStaticVehicleEx(565,1707.9614,-1044.8055,23.6739,0,109,1,30000); // Rent car 172
	AddStaticVehicleEx(565,1712.5034,-1044.1735,23.6731,0,11,1,30000); // Rent car 173
	AddStaticVehicleEx(579,1709.2091,-1061.1398,23.7847,180,109,1,30000); // Rent car 174
	AddStaticVehicleEx(579,1700.3168,-1060.6760,23.7848,180,4,1,30000); // Rent car 175
	AddStaticVehicleEx(400,1717.9724,-1069.8695,23.7848,0,30,1,30000); // Rent car 176
	AddStaticVehicleEx(400,1691.3545,-1069.6636,23.7849,0,91,1,30000); // Rent car 177
	//-------------------------------------------------------------------------------------------
	AddStaticVehicleEx(532,-387.4058,-1476.6927,26.7035,265.6719,0,0,30000); // Harvest 178
	AddStaticVehicleEx(532,-382.8609,-1465.2964,26.7162,262.4081,0,0,30000); // Harvest 179
	AddStaticVehicleEx(532,-392.8095,-1487.2607,26.3314,268.0157,0,0,30000); // Harvest 180
	AddStaticVehicleEx(532,-399.6307,-1500.4774,25.4502,265.1973,0,0,30000); // Harvest 181
	//-------------------------------------------------------------------------------------------
	AddStaticVehicleEx(532,-54.1143,86.1869,4.0927,246.1964,16,0,30000); // Drug harvest 182
	AddStaticVehicleEx(532,-39.0122,-19.7210,4.0923,66.2487,16,0,30000); // Drug harvest 183
	AddStaticVehicleEx(532,-34.2867,-9.5510,4.0883,62.7305,16,0,30000); // Drug harvest 184
	AddStaticVehicleEx(532,-83.7403,-17.7843,4.0917,340.3535,16,0,30000); // Drug harvest 185
	//-------------------------------------------------------------------------------------------
	AddStaticVehicleEx(442,1097.7876,-1327.8087,13.1820,2.3556,3,13,30000); // Drugs smuggler car 186
	AddStaticVehicleEx(442,1110.4362,-1327.9688,13.1654,1.1852,3,13,30000); // Drugs smuggler car 187
	AddStaticVehicleEx(442,1123.7722,-1327.3230,13.2222,359.7142,3,13,30000); // Drugs smuggler car 188
	//-------------------------------------------------------------------------------------------
	AddStaticVehicleEx(567,1826.8661,-2031.1033,13.0625,180.4212,93,93,30000); // Vagos Car 2 189
	//-------------------------------------------------------------------------------------------
	AddStaticVehicleEx(471,1806.3488,-2009.0200,13.2220,89.1721,93,93,30000); // Vagos Quad 190
	//-------------------------------------------------------------------------------------------
	AddStaticVehicleEx(487,1902.4270,-2628.4958,13.7092,62.7501,0,0,30000); // Government Helicopter 191
	//-------------------------------------------------------------------------------------------
	AddStaticVehicleEx(574,1668.6692,-1896.1118,13.2720,268.0269,26,26,30000); // Street sweeper 192
	AddStaticVehicleEx(574,1668.7383,-1891.4990,13.2720,270.7320,26,26,30000); // Street sweeper 193
	AddStaticVehicleEx(574,1668.7280,-1886.8180,13.2720,268.9658,26,26,30000); // Street sweeper 194
	//-------------------------------------------------------------------------------------------
    AddStaticVehicleEx(482,670.6533,-1299.5035,13.2634,359.6805,0,0,30000); // Gurentai Black Van 195
	AddStaticVehicleEx(575,670.7866,-1290.3920,13.2674,358.9000,1,115,30000); // Gurentai Black Car 196
	AddStaticVehicleEx(477,659.9525,-1268.9526,13.2656,359.2216,1,1,30000); // Gurentai White Car 197
	AddStaticVehicleEx(477,660.0777,-1262.0522,13.2642,358.9796,1,1,30000); // Gurentai White Car 198
	AddStaticVehicleEx(521,672.6432,-1270.8033,13.3458,91.5057,0,0,30000); // Gurentai Bike 199
	AddStaticVehicleEx(463,797.5902,-617.2993,16.5257,0.0787,0,0,30000); // Bikers Bike 2 200
	AddStaticVehicleEx(418,1841.2368,-1871.2235,13.4830,359.8451,114,114,30000); // Civil break 201
	AddStaticVehicleEx(445,1410.4966,-1652.7239,13.3447,270.3167,3,3,30000); // Civil2 202
	AddStaticVehicleEx(466,1220.5658,-1420.9464,13.0119,358.0802,2,76,30000); // Civil3 203
	AddStaticVehicleEx(567,1993.5453,-1130.2598,25.2426,90.5706,5,5,30000); // Bratva Car 1 204
	AddStaticVehicleEx(567,1983.5431,-1130.3042,25.4805,89.4348,5,5,30000); // Bratva Car 2 205
	AddStaticVehicleEx(566,1992.0753,-1141.5469,25.2793,270.3799,5,5,30000); // Bratva Car 3 206
	AddStaticVehicleEx(492,2516.7065,-1672.3196,14.0826,61.1593,86,86,30000); // Groove Van 207
	AddStaticVehicleEx(468,2498.8806,-1687.3312,13.1717,97.9669,86,86,30000); // Groove Bike 208
	AddStaticVehicleEx(567,2509.3254,-1686.1987,13.2979,45.7375,86,86,30000); // Groove car 209                 ( Carinfo = 939) idx min = 605 Max = 841
	//-------------------------------------------------------------------------------------------
	AddStaticVehicleEx(404,2055.9290,-1903.6877,13.2887,179.6004,11,11,30000); // Voiture libre 210
	AddStaticVehicleEx(421,1529.0643,-813.2505,71.5932,87.9818,1,1,30000); // Voiture libre 211
	AddStaticVehicleEx(418,872.9503,-872.7187,77.3582,22.3668,60,60,30000); // Voiture libre 212
	AddStaticVehicleEx(507,350.2772,-1809.7452,4.2557,0.4873,40,40,30000); // Voiture libre 213
	AddStaticVehicleEx(542,782.4791,-1616.1077,13.1246,90.4246,90,90,30000); // Voiture libre 214
	AddStaticVehicleEx(404,1589.4078,-1054.4771,23.7378,308.8223,99,99,30000); // Voiture libre 215           ( Carinfo = 945) idx min = 611 Max = 847
	//-------------------------------------------------------------------------------------------
	AddStaticVehicleEx(490,1294.8954,-981.1871,32.8237,87.6625,0,0,30000); // Voiture C.I.A 216
	AddStaticVehicleEx(560,1294.8707,-985.0069,32.4475,90.6603,0,0,30000); // Voiture C.I.A 217
	AddStaticVehicleEx(560,1295.4569,-990.1396,32.4499,89.4665,0,0,30000); // Voiture C.I.A 218
    //-------------------------------------------------------------------------------------------
	AddStaticVehicleEx(560,1244.2565,-2021.3812,59.5818,181.4079,0,0,30000); // Voiture Corleone 219
	AddStaticVehicleEx(560,1251.1490,-2044.1620,59.3828,269.2389,0,0,30000); // Voiture Corleone 220
	AddStaticVehicleEx(482,1262.0719,-2009.7047,59.4803,180.3634,0,0,30000); // Voiture Corleone 221
	AddStaticVehicleEx(487,1152.6421,-2053.7283,69.1783,0.6800,0,0,30000); // hélico Corleone 222           ( Carinfo = 952) idx min = 618 Max = 854
	//-------------------------------------------------------------------------------------------
	AddStaticVehicleEx(538,1700.7551,-1953.6531,14.8756,200.0,-1,-1, 30000); // Train 223 - 226
    AddStaticVehicleEx(592,1458.8541,-2593.0964,14.7472,270.0704,1,1, 30000); // Androm 227
	AddStaticVehicleEx(553,1434.1561,-2443.6904,14.8855,271.4774,6,6, 30000); // Nevada 228
	//----------------------------------Véhicule pieger----------------------------------------------
	//AddStaticVehicleEx(451,2259.2856,2309.5410,10.5273,179.8041,150,0,30000); // 443
	//-------------------------------------------------------------------------------------------
 	//botcar = AddStaticVehicleEx(577,1478.3447,1803.0488,10.7512,179.1384,3,1,30000); //
	//AddStaticVehicle(594,-755.6730,3404.3660,9.1994,101.6071,7,7);
	*/
	for(new h = 618; h < sizeof(CarInfo); h++)
	{
		AddStaticVehicleEx(CarInfo[h][cModel],CarInfo[h][cLocationx],CarInfo[h][cLocationy],CarInfo[h][cLocationz]+1.0,CarInfo[h][cAngle],CarInfo[h][cColorOne],CarInfo[h][cColorTwo],60000);
	}
	for(new h = 0; h < sizeof(HouseInfo); h++)
	{
		if(HouseInfo[h][hOwned] == 0)
		{
			AddStaticPickup(1273, 2, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]);
			pickups++;
		}
		if(HouseInfo[h][hOwned] == 1)
		{
			AddStaticPickup(1239, 2, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]);
			pickups++;
		}
	}
	for(new h = 0; h < sizeof(BizzInfo); h++)
	{
		if(BizzInfo[h][bOwned] == 0)
		{
			AddStaticPickup(1272, 2, BizzInfo[h][bEntranceX], BizzInfo[h][bEntranceY], BizzInfo[h][bEntranceZ]);
			pickups++;
		}
		if(BizzInfo[h][bOwned] == 1)
		{
			AddStaticPickup(1239, 2, BizzInfo[h][bEntranceX], BizzInfo[h][bEntranceY], BizzInfo[h][bEntranceZ]);
			pickups++;
		}
	}
	for(new h = 0; h < sizeof(SBizzInfo); h++)
	{
		if(SBizzInfo[h][sbOwned] == 0)
		{
			AddStaticPickup(1272, 2, SBizzInfo[h][sbEntranceX], SBizzInfo[h][sbEntranceY], SBizzInfo[h][sbEntranceZ]);
			pickups++;
		}
		if(SBizzInfo[h][sbOwned] == 1)
		{
			AddStaticPickup(1239, 2, SBizzInfo[h][sbEntranceX], SBizzInfo[h][sbEntranceY], SBizzInfo[h][sbEntranceZ]);
			pickups++;
		}
	}
	for(new i = 0; i < sizeof(BurgerDriveIn); i++)
	{
	    BurgerPickUp[i] = CreatePickup(1239, 23, BurgerDriveIn[i][0], BurgerDriveIn[i][1], BurgerDriveIn[i][2]);
		pickups++;
	}
 	for(new i = 0; i < sizeof(ChickenDriveIn); i++)
	{
	    ChickenPickUp[i] = CreatePickup(1239, 23, ChickenDriveIn[i][0], ChickenDriveIn[i][1], ChickenDriveIn[i][2]);
		pickups++;
	}
	
// /ouvrirgrille
Create3DTextLabel("/ouvrirgrille",0xB40100FF, 2335.2158203125, 2443.791015625, 14.350885391235,20,0);
Create3DTextLabel("/ouvrirgrille",0xB40100FF, 2293.8974609375, 2499.078125, 11.395983695984,20,0);
Create3DTextLabel("/ouvrirgrille",0xB40100FF, 2238.205078125,2450.4223632813,10.538173675537,20,0);
Create3DTextLabel("/ouvrirgrille",0xB40100FF, 1012.7029418945, 3286.8498535156, 9.9971599578857,20,0);
Create3DTextLabel("/ouvrirgrille",0xB40100FF, 1534.9020,-1451.5979,14.4882,20,0);
Create3DTextLabel("/ouvrirgrille",0xB40100FF, 1643.3379,-1714.9338,15.3067,20,0);
Create3DTextLabel("/ouvrirgrille",0xB40100FF, 1246.0033,-767.3727,91.1473,20,0);
Create3DTextLabel("/ouvrirgrille",0xB40100FF, 2061.384765625, 2437.7890625, 18.416982650757,20,0);
Create3DTextLabel("/ouvrirgrille",0xB40100FF, 1521.259765625,2773.26171875,17.695266723633,20,0);
Create3DTextLabel("/porte2",0xB40100FF, 222.134,70.876,1003.98,20,0);
Create3DTextLabel("SPAWN",0xB40100FF,1743.1295,-1862.9645,13.5757,20,0);
/*// /ouvrirgrillemaison
Create3DTextLabel("/ouvrirgrillemaison",0xB40100FF, 897.28515625, 2211.326171875, 0.1883735656738,20,0);
Create3DTextLabel("/ouvrirgrillemaison",0xB40100FF, 2786.1454,-1600.2020,10.1297,20,0);*/

Create3DTextLabel("/get drogue",0x00FF00FF,1489.0118,-1720.1245,8.2369, 15, 0, 1);
AddStaticPickup(1239, 1, 1489.0118,-1720.1245,8.2369, 0);

Create3DTextLabel("/apprendrelangue",0x00FF00FF,1211.5039,-898.6489,1094.1084, 15, 0, 1);
AddStaticPickup(1239, 1, 1211.5039,-898.6489,1094.1084, 0);

Create3DTextLabel("Job Eboueur",0x00FF00FF,2281.0352,-2226.3916,13.5469, 15, 0, 1);
AddStaticPickup(1239, 1, 2281.0352,-2226.3916,13.5469, 0);

Create3DTextLabel("Ecole de Langues de Los Santos",0x00FF00FF,1219.2813,-1811.9434,16.5938, 15, 0, 1);
AddStaticPickup(1239, 1, 1219.2813,-1811.9434,16.5938, 0);

Create3DTextLabel("SORTIE",0x00FF00FF,-3436.2354,472.8241,57.6132, 15, 0, 1);
AddStaticPickup(1239, 1, -3436.2354,472.8241,57.6132, 0);

Create3DTextLabel("SORTIE",0x00FF00FF,2157.2434,1596.5140,999.9688, 15, 0, 1);
AddStaticPickup(1239, 1, 2157.2434,1596.5140,999.9688, 0);

Create3DTextLabel("Faites /v acheter pour acheter un véhicule",0x00FF00FF,536.4335,-1282.1498,17.2422, 15, 0, 1);
AddStaticPickup(1239, 1, 536.4335,-1282.1498,17.2422, 0);

Create3DTextLabel("/achetermatos",0x00FF00FF,2230.1196,-2286.3254,14.3751, 15, 0, 1);
AddStaticPickup(1239, 1, 2230.1196,-2286.3254,14.3751, 0);

Create3DTextLabel("Fouriere de Los Santos",0x00FF00FF,2206.9329,-1969.4095,13.5469, 15, 0, 1);
AddStaticPickup(1239, 1, 2206.9329,-1969.4095,13.5469, 0);

Create3DTextLabel("[Cambriolage Mairie] \n /volermairie",0x00FF00FF,358.5919,184.2908,1008.3828, 15, 0, 1);
AddStaticPickup(1239, 1, 358.5919,184.2908,1008.3828, 0);

    AddStaticPickup(1239, 1, 499.6341,-20.3592,1000.6797, 0);
    Create3DTextLabel("[Cambriolage Alhambra] \n /voleralhambra",0x00FF00FF,499.6341,-20.3592,1000.6797, 15, 0, 1);

    AddStaticPickup(1239, 1, 756.5454,5.4325,1000.6992, 0);
    Create3DTextLabel("[Cambriolage Gymnase] \n /volergymnase",0x00FF00FF,756.5454,5.4325,1000.6992, 15, 0, 1);

    AddStaticPickup(1239, 1, 492.0305,-82.4695,998.7578, 0);
    Create3DTextLabel("[Cambriolage Ten Green Bottles] \n /volertgb",0x00FF00FF,492.0305,-82.4695,998.7578, 15, 0, 1);

    AddStaticPickup(1239, 1, 2309.6060,-4.0211,26.7422, 0);
    Create3DTextLabel("[Cambriolage Donut Store] \n /volerdonut",0x00FF00FF,379.1978,-184.1220,1000.6328, 15, 0, 1);

    AddStaticPickup(1239, 1, 371.7011,-6.2796,1001.8589, 9);
    Create3DTextLabel("[Cambriolage Cluckin Bell] \n /volercluckin",0x00FF00FF,371.7011,-6.2796,1001.8589, 15, 2, 1);
    Create3DTextLabel("[Cambriolage Cluckin Bell] \n /volercluckin",0x00FF00FF,371.7011,-6.2796,1001.8589, 15, 1, 1);

    AddStaticPickup(1239, 1, 373.8943,-67.4481,1001.5078, 10);
    Create3DTextLabel("[Cambriolage Burger Store] \n /volerburger",0x00FF00FF,373.8943,-67.4481,1001.5078, 15, 2, 1);
    Create3DTextLabel("[Cambriolage Burger Store] \n /volerburger",0x00FF00FF,373.8943,-67.4481,1001.5078, 15, 1, 1);

    AddStaticPickup(1239, 1, 373.6143,-118.8086,1001.4922, 5);
    Create3DTextLabel("[Cambriolage Pizza Store] \n /volerpizza",0x00FF00FF,373.6143,-118.8086,1001.4922, 15, 0, 1);

// /ofgrille /ffgrille
Create3DTextLabel("/ofgrille",0xB40100FF, 2516.9375,2346.2314453125,5.2402683258057,20,0);
Create3DTextLabel("/ffgrille",0xB40100FF, 2516.9377441406,2346.2319335938,11.640268325806,20,0);

// /ouvrirhangar /fermerhangar
Create3DTextLabel("/ouvrirhangar",0xB40100FF, 977.65704345703, 2076.3278808594, 12.593704223633,20,0);
Create3DTextLabel("/fermerhangar",0xB40100FF, 725.9677734375, 2930.77734375, 10.143821716309,20,0);

// /faelevateur1
Create3DTextLabel("/faelevateur1",0xB40100FF, 725.96807861328, 2930.77734375, 17.168794631958,20,0);
// /aelevateur2
Create3DTextLabel("/aelevateur2",0xB40100FF, 762.46484375, 2956.8955078125, 9.8759651184082,20,0);
// /faelevateur2
Create3DTextLabel("/aelevateur2",0xB40100FF, 762.46508789063, 2956.8962402344, 16.900938034058,20,0);
//secubanque
Create3DTextLabel("/secubanque",0xB40100FF, 2144.1677,1603.0985,993.5684,20,0);
// /ouvrirtunning
//Create3DTextLabel("/ouvrirtunning",0xB40100FF, 1042.2530,-1026.0344,32.1016,20,0);
// /ouvrirporte
Create3DTextLabel("/ouvrirporte",0xB40100FF, 245.0578,72.4314,1002.5406,20,0);
// /swat
Create3DTextLabel("/swat",0xB40100FF, 210.5792,144.4530,1003.0234,20,0);
Create3DTextLabel("/swat",0xB40100FF, 211.1120,151.6898,1003.0234,20,0);
// /tactique
Create3DTextLabel("/tactique",0xB40100FF, 252.4938,73.4559,1003.6406,20,0);
Create3DTextLabel("/tactique",0xB40100FF, 258.6202,79.8815,1003.6406,20,0);
// /duty
Create3DTextLabel("/duty",0xB40100FF, 255.3,77.4,1003.6,20,0);
Create3DTextLabel("/duty",0xB40100FF, -1616.1294,681.1594,7.1875,20,0);
Create3DTextLabel("/duty",0xB40100FF, 244.9195,188.4331,1008.1719,20,0);
// /missile
Create3DTextLabel("/missile",0xB40100FF, 831.0058,2959.2417,18.4550,20,0);
// 8ball Track
Create3DTextLabel("8ball Track",0xB40100FF, 2695.6235,-1704.6960,11.8438,20,0);
// the Dirt Track
Create3DTextLabel("The Dirt Track",0xB40100FF, -2111.5686,-443.9720,38.7344,20,0);
// the Stunting Track
Create3DTextLabel("The Stunting Track",0xB40100FF, -2080.3079,-406.0309,38.7344,20,0);
// /uniforme
Create3DTextLabel("/uniforme",0xB40100FF, -792.9693,500.5572,1367.3672,20,0);
Create3DTextLabel("/uniforme",0xB40100FF, -779.3134,497.8989,1371.7490,20,0);
// /agent
Create3DTextLabel("/agent",0xB40100FF, 246.5625,120.3976,1003.2629,20,0);
// Restroom
Create3DTextLabel("Restroom",0xB40100FF, 488.2531,-82.7632,998.7578,20,0);
// Ten Green Bottles
Create3DTextLabel("Ten Green Bottles",0xB40100FF, 2280.0476,-1139.5413,1050.8984,20,0);
// Eglise
Create3DTextLabel("Eglise",0xB40100FF, 2232.4524,-1333.1495,23.9815,20,0);
// Gym
Create3DTextLabel("Gym",0xB40100FF, 1968.6350,2295.8726,16.4559,20,0);
// Pigpen
Create3DTextLabel("Pigpen",0xB40100FF, 2506.9031,2120.2952,10.8398,20,0);
// /fill
Create3DTextLabel("/v remplir",0xB40100FF, 1004.0070,-939.3102,42.1797,20,0);
Create3DTextLabel("/v remplir",0xB40100FF, 1944.3260,-1772.9254,13.3906,20,0);
Create3DTextLabel("/v remplir",0xB40100FF, -90.5515,-1169.4578,2.4079,20,0);
Create3DTextLabel("/v remplir",0xB40100FF, -1609.7958,-2718.2048,48.5391,20,0);
Create3DTextLabel("/v remplir",0xB40100FF, -2029.4968,156.4366,28.9498,20,0);
Create3DTextLabel("/v remplir",0xB40100FF, -2408.7590,976.0934,45.4175,20,0);
Create3DTextLabel("/v remplir",0xB40100FF, -2243.9629,-2560.6477,31.8841,20,0);
Create3DTextLabel("/v remplir",0xB40100FF, -1676.6323,414.0262,6.9484,20,0);
Create3DTextLabel("/v remplir",0xB40100FF, 2202.2349,2474.3494,10.5258,20,0);
Create3DTextLabel("/v remplir",0xB40100FF, 70.3882,1218.6783,18.5165,20,0);
Create3DTextLabel("/v remplir",0xB40100FF, 2113.7390,920.1079,10.5255,20,0);
Create3DTextLabel("/v remplir",0xB40100FF, -1327.7218,2678.8723,50.0625,20,0);
Create3DTextLabel("/v remplir",0xB40100FF, 2639.2161,1105.7794,10.6959,20,0);
Create3DTextLabel("/v remplir",0xB40100FF, 656.4265,-559.8610,16.5015,20,0);
Create3DTextLabel("/v remplir",0xB40100FF, 656.3797,-570.4138,16.5015,20,0);

//

    Create3DTextLabel("F.B.I",0xB40100FF, 1654.0858,-1655.9982,22.5156,20,0);
    AddStaticPickup(1239, 2, 1654.0858,-1655.9982,22.5156); // HQ FBI icone Entrée
    AddStaticPickup(1239, 2, 288.7287,168.5377,1007.1719); // HQ FBI Sortie 1
    AddStaticPickup(1239, 2, 238.7290,139.4386,1003.0234); // HQ FBI Sortie 2

    Create3DTextLabel("Jefferson Motel",0xB40100FF, 2232.9993,-1159.7517,25.8906,20,0); // Jefferson Motel Entrée
    AddStaticPickup(1239, 2, 2232.9993,-1159.7517,25.8906); // Jefferson Motel icone Entrée
    AddStaticPickup(1239, 2, 2214.8450,-1150.4794,1025.7969); // Jefferson Motel icone Sortie
    Create3DTextLabel("SORTIE",0xB40100FF, 2214.8450,-1150.4794,1025.7969,20,0); // Jefferson Motel Sortie

	AddStaticPickup(1274, 2, 2518.0454,2335.0117,10.8203); // Fouriere
    Create3DTextLabel("Fouriere",0xB40100FF, 2518.0454,2335.0117,10.8203,20,0);

	AddStaticPickup(1274, 2, 2577.5349,1325.1555,10.8203); // Nouvelle Banque
    Create3DTextLabel("Banque",0xB40100FF, 2577.5349,1325.1555,10.8203,20,0);

	AddStaticPickup(1239, 2, 2217.3882,-1146.9778,1025.7969); // Louer chambre
    Create3DTextLabel("/louerchambre",0xB40100FF, 2217.3882,-1146.9778,1025.7969,20,0);

	AddStaticPickup(1239, 2, 2613.6372,2042.0688,10.8203); // QG Bloods
    Create3DTextLabel("QG Bloods",0xB40100FF, 2613.6372,2042.0688,10.8203,20,0);

	AddStaticPickup(1239, 2, 2507.2603,1242.2599,10.8270); //Cripz Pickup
    Create3DTextLabel("QG Cripz",0xB40100FF, 2507.2603,1242.2599,10.8270,20,0);

    AddStaticPickup(1239, 2, 1172.0818,-1325.3009,15.4073); // Hopital ipo
	Create3DTextLabel("L'Hospital",0xB40100FF, 1172.0818,-1325.3009,15.4073,20,0);

	AddStaticPickup(1239, 2, 2017.8821,1007.5283,39.0911); //HQ copter to hq
    Create3DTextLabel("Helicopter au HQ Yakuza",0xB40100FF, 2017.8821,1007.5283,39.0911,20,0);

	AddStaticPickup(1239, 2, -792.9693,500.5572,1367.3672);//serveur uniform list
    Create3DTextLabel("/uniforme",0xB40100FF, -792.9693,500.5572,1367.3672,20,0);

	AddStaticPickup(1239, 2, -779.3134,497.8989,1371.7490);//serveur uniform list 2
    Create3DTextLabel("/uniforme",0xB40100FF, -779.3134,497.8989,1371.7490,20,0);

	AddStaticPickup(1239, 2, 1607.3711,1815.6852,10.8203); //Hospital 1 near Ammu

	AddStaticPickup(1239, 2, 2029.5945,-1404.6426,17.2512); //Hospital 2 near speedway
    Create3DTextLabel("/healme",0xB40100FF, 2029.5945,-1404.6426,17.2512,20,0);

	AddStaticPickup(1239, 2, 253.9280,69.6094,1003.6406); //Clear icon in Police Station
    Create3DTextLabel("/mdc",0xB40100FF,253.9280,69.6094,1003.6406,20,0);

	AddStaticPickup(1239, 2, 1042.8492,1011.1059,11.0000); //City Hall
    Create3DTextLabel("Mairie",0xB40100FF, 1042.8492,1011.1059,11.0000,20,0);

	AddStaticPickup(1239, 2, 2144.0420,1638.5311,993.5761);
    Create3DTextLabel("/braquer",0xB40100FF, 2144.0420,1638.5311,993.5761,20,0);

	AddStaticPickup(1239, 2, 2447.2183,2376.1445,12.1635); // Tribunal entrer
    Create3DTextLabel("Tribunal Entrer",0xB40100FF, 2447.2183,2376.1445,12.1635,20,0);

	AddStaticPickup(1239, 2, 208.4958,-229.6796,1.7786); //Black Market
    Create3DTextLabel("/creerarme",0xB40100FF, 208.4958,-229.6796,1.7786,20,0);

	AddStaticPickup(1239, 2, 1381.0413,-1088.8511,27.3906); //Bill Board (old Job Department)
    Create3DTextLabel("/mission",0xB40100FF, 1381.0413,-1088.8511,27.3906,20,0);

	AddStaticPickup(1239, 2, 2142.5330,1625.7997,993.6882); // Mot de passe banque
    Create3DTextLabel("/decoder",0xB40100FF, 2142.5330,1625.7997,993.6882,20,0);

	AddStaticPickup(1239, 2, 2019.8147,1008.0146,10.8203); //yakuza Agency entrance
    Create3DTextLabel("Yakuza Agency",0xB40100FF, 2019.8147,1008.0146,10.8203,20,0);

	AddStaticPickup(1239, 2, 2019.9419,1027.6105,10.8203); // Pickup Arme
    Create3DTextLabel("Yakuza Agency Arme",0xB40100FF, 2019.9419,1027.6105,10.8203,20,0);

	AddStaticPickup(1242, 2, 1527.5,-12.1,1002.0); // binco armor
    Create3DTextLabel("Police Armoury",0xB40100FF, 1527.5,-12.1,1002.0,20,0);

	AddStaticPickup(1240, 2, 279.3000,1853.5619,8.7649); // area51 health
    Create3DTextLabel("Health",0xB40100FF, 279.3000,1853.5619,8.7649,20,0);

	AddStaticPickup(1239, 2, 2364.8733,2382.9822,10.8203); //[/pjournal] Livreur de Journals + news reporter
    Create3DTextLabel("/pjournal",0xB40100FF,2364.8733,2382.9822,10.8203,20,0);

	AddStaticPickup(1239, 2, 1174.9100,-1365.7330,13.9876); // Elevator 1
    Create3DTextLabel("Ascenseur1",0xB40100FF, 1174.9100,-1365.7330,13.9876,20,0);

	AddStaticPickup(1239, 2, 1174.9591,-1369.8761,23.9736); // Elevator 2
    Create3DTextLabel("Ascenseur2",0xB40100FF, 1174.9591,-1369.8761,23.9736,20,0);

	AddStaticPickup(1239, 2, 379.1396,-114.2661,1001.4922); // Pizza Ramassage
    Create3DTextLabel("Pizza Ramassage",0xB40100FF, 379.1396,-114.2661,1001.4922,20,0);

	AddStaticPickup(1240, 2, 263.1702,76.4346,1001.0391); // Jail health
    Create3DTextLabel("Health",0xB40100FF, 263.1702,76.4346,1001.0391,20,0);

	AddStaticPickup(1239, 2, 359.6820,207.0294,1008.3828); // AD
    Create3DTextLabel("/publicite",0xB40100FF, 359.6820,207.0294,1008.3828,20,0);

	AddStaticPickup(1239, 2, 2798.5601,-2416.6804,13.6310); // Drugs for smugglers
    Create3DTextLabel("/contrebandedrogue",0xB40100FF, 2798.5601,-2416.6804,13.6310,20,0);

	AddStaticPickup(1318, 2, 2151.3706,-2255.7769,13.2986); //Faussaire get
    Create3DTextLabel("/mats",0xB40100FF, 2151.3706,-2255.7769,13.2986,20,0);

	AddStaticPickup(1318, 2, 764.7709,-1350.1090,13.5168); //Faussaire deliver
    Create3DTextLabel("/mats",0xB40100FF, 764.7709,-1350.1090,13.5168,20,0);

	AddStaticPickup(1239, 2, 2849.3208,1246.0183,11.3906); // Drugs Smuggler pickup
    Create3DTextLabel("Job : Contrebandier de drogue /prendrejob",0xB40100FF, 2849.3208,1246.0183,11.3906,20,0);

	AddStaticPickup(1239, 2, 1856.3259,2368.5259,10.9799); // Drugs Dealer reg /prendrejob
    Create3DTextLabel("Job : Dealer de drogue /prendrejob",0xB40100FF, 856.3259,2368.5259,10.9799,20,0);

	AddStaticPickup(1239, 2, 2826.6938,1632.9011,10.8203); // Materials smuggler reg
    Create3DTextLabel("Job : Contrebandier d'arme /prendrejob",0xB40100FF, 2826.6938,1632.9011,10.8203,20,0);

	AddStaticPickup(1239, 2, 2397.8171,962.2006,10.8130); // Drugs Farmer reg /prendrejob
    Create3DTextLabel("Job : Cultivateur de drogue /prendrejob",0xB40100FF, 2397.8171,962.2006,10.8130,20,0);

	AddStaticPickup(1239, 2, 2493.2258,1874.6377,10.8203); // Gun Maker reg
    Create3DTextLabel("Job : Fabricant d'arme /prendrejob",0xB40100FF, 2493.2258,1874.6377,10.8203,20,0);

	AddStaticPickup(1239, 2, 1215.1304,-11.8431,1000.9219); // Pute /prendrejob
    Create3DTextLabel("Job : Prosituer /prendrejob",0xB40100FF, 1215.1304,-11.8431,1000.9219,20,0);

	AddStaticPickup(1239, 2, 2566.3870,2252.6050,2.189); // Voleur de voiture
    Create3DTextLabel("Job : Voleur de voiture /prendrejob",0xB40100FF, 2566.3870,2252.6050,2.189,20,0);

	AddStaticPickup(1239, 2, 2268.6116,1388.8862,42.8203); // Job faussaire
    Create3DTextLabel("Job : Faussaire /prendrejob",0xB40100FF, 2268.6116,1388.8862,42.8203,20,0);

	AddStaticPickup(1314, 2, 2292.0945,2452.4775,10.8203); // arrest
    Create3DTextLabel("/arreter",0xB40100FF, 2292.0945,2452.4775,10.8203,20,0);

	AddStaticPickup(1314, 2, 2293.1460,2467.8892,10.8203); // arret
    Create3DTextLabel("/arreter",0xB40100FF, 2293.1460,2467.8892,10.8203,20,0);

	// Entrances and exits start
	AddStaticPickup(1239, 2, 2315.4529,0.3478,26.7422); // Banque pick up
    Create3DTextLabel("Banque: Salle des Coffres",0xB40100FF, 2315.4529,0.3478,26.7422,20,0);

	AddStaticPickup(1239, 2, 2085.1211,2074.0354,11.0547); // Sex shop 1
    Create3DTextLabel("Sex Shop 1",0xB40100FF, 2085.1211,2074.0354,11.0547,20,0);

	AddStaticPickup(1239, 2, 2515.3142,2297.2288,10.8203); // Sex Shop 2
    Create3DTextLabel("Sex Shop 2",0xB40100FF, 2515.3142,2297.2288,10.8203,20,0);

	AddStaticPickup(1239, 2, 2268.3552,2448.8892,3.5313);//PD Building
    Create3DTextLabel("Police Ascenseur",0xB40100FF, 2268.3552,2448.8892,3.5313,20,0);

	AddStaticPickup(1239, 2, 2268.0820,2448.3660,-7.1953);//PD Building
    Create3DTextLabel("Police Ascenseur",0xB40100FF, 2268.0820,2448.3660,-7.1953,20,0);

	AddStaticPickup(1239, 2, 2297.0366,2451.4780,10.8203);//PD Building
    Create3DTextLabel("Police Ascenseur",0xB40100FF, 2297.0366,2451.4780,10.8203,20,0);

	AddStaticPickup(1239, 2, 2454.7717,1499.6946,11.6174);//Alhabra
    Create3DTextLabel("Alhambra",0xB40100FF, 2454.7717,1499.6946,11.6174,20,0);

	AddStaticPickup(1239, 2, 2310.0183,-1643.4669,14.8270);//10 green
    Create3DTextLabel("Ten Green Bottles",0xB40100FF, 2310.0183,-1643.4669,14.8270,20,0);

	AddStaticPickup(1239, 2, 1968.6350,2295.8726,16.4559);//Ganton gym
    Create3DTextLabel("Gym",0xB40100FF, 1968.6350,2295.8726,16.4559,20,0);

	AddStaticPickup(1239, 2, 2506.9031,2120.2952,10.8398);//Pig Pen
    Create3DTextLabel("Pig Pen",0xB40100FF, 2506.9031,2120.2952,10.8398,20,0);

	AddStaticPickup(1239, 2, 2638.5872,1671.7445,11.0234);//Cluckin bell under it
    Create3DTextLabel("Cluckin Bell",0xB40100FF, 2638.5872,1671.7445,11.0234,20,0);

	AddStaticPickup(1239, 2, 2393.1328,2041.5737,10.8203);//Cluckin bell next to 10 green
    Create3DTextLabel("Cluckin Bell",0xB40100FF, 2393.1328,2041.5737,10.8203,20,0);

	AddStaticPickup(1239, 2, 2472.8655,2034.0881,11.0625);//Marina burger Burger shot
    Create3DTextLabel("Burger shot",0xB40100FF, 2472.8655,2034.0881,11.0625,20,0);

	AddStaticPickup(1239, 2, 2102.3000,2228.8362,11.0234);//Cluckin above it
    Create3DTextLabel("Cluckin bell",0xB40100FF, 2102.3000,2228.8362,11.0234,20,0);

	AddStaticPickup(1239, 2, 1872.2670,2071.7517,11.0625);//Vinewood burger
    Create3DTextLabel("Burger shot",0xB40100FF, 1872.2670,2071.7517,11.0625,20,0);

	AddStaticPickup(1239, 2, 2546.5952,1972.3506,10.8203);//24/7 gas station vinewood
    Create3DTextLabel("24/7",0xB40100FF, 1557.6044,990.6632,10.8203,20,0);

	AddStaticPickup(1239, 2, 1557.6044,990.6632,10.8203);//24/7 vinewood
    Create3DTextLabel("24/7",0xB40100FF, 1557.6044,990.6632,10.8203,20,0);

	AddStaticPickup(1239, 2, 2638.7871,1849.7618,11.0234);//Pizzaboy
    Create3DTextLabel("Pizzaboy",0xB40100FF, 2638.7871,1849.7618,11.0234,20,0);

	AddStaticPickup(1239, 2, 2083.3252,2224.6978,11.0234);//Pizzaboy
    Create3DTextLabel("Pizzaboy",0xB40100FF, 2083.3252,2224.6978,11.0234,20,0);

	AddStaticPickup(1239, 2, 2194.9373,1991.0553,12.2969); // 24-7 Entrance
    Create3DTextLabel("24/7",0xB40100FF, 2194.9373,1991.0553,12.2969,20,0);

	AddStaticPickup(1239, 2, -25.1326,-141.0670,1003.5469); // 24-7 Exit
    Create3DTextLabel("24/7",0xB40100FF, -25.1326,-141.0670,1003.5469,20,0);

	AddStaticPickup(1239, 2, 2247.7297,2396.1682,10.8203); // 24/7 devant comi
    Create3DTextLabel("24/7",0xB40100FF, 2247.7297,2396.1682,10.8203,20,0);

	AddStaticPickup(1239, 2, 2452.4722,2065.1846,10.8203);//24/7 Near DMV
    Create3DTextLabel("24/7",0xB40100FF, 2452.4722,2065.1846,10.8203,20,0);

	AddStaticPickup(1239, 2, 2637.2947,1129.6770,11.1797);//24/7 Near 8-Ball
    Create3DTextLabel("24/7",0xB40100FF, 2637.2947,1129.6770,11.1797,20,0);

	AddStaticPickup(1239, 2, 2638.0869,2352.1033,10.8203);//Madd dog crib
    Create3DTextLabel("QG de La Famille RiderZ",0xB40100FF, 2638.0869,2352.1033,10.8203,20,0);

 	AddStaticPickup(1239, 2, 2388.8228,2465.9277,10.8203);//FBI
    Create3DTextLabel("FBI",0xB40100FF, 2388.8228,2465.9277,10.8203,20,0);

	AddStaticPickup(1239, 2, 2448.8418,1722.8167,10.8203);//Jim's sticky ring
    Create3DTextLabel("Jim' sticky ring",0xB40100FF, 2448.8418,1722.8167,10.8203,20,0);

	AddStaticPickup(1239, 2, 349.5560,161.6693,1019.9912); //Heal me
    Create3DTextLabel("/healme",0xB40100FF, 349.5560,161.6693,1019.9912,20,0);

	AddStaticPickup(1239, 2, 2581.3052,1060.5470,11.7828); //Vagos HQ
    Create3DTextLabel("/Surenos HQ",0xB40100FF, 2581.3052,1060.5470,11.7828,20,0);

	/*AddStaticPickup(1239, 2, 2364.8940,2377.4761,10.8203); //ABC studio
    Create3DTextLabel("ABC Studio",0xB40100FF, 1784.58,-1297.52,13.37,20,0);*/

	AddStaticPickup(1239, 2, 1752.8452,-1894.1328,13.5573); //LA Yellow Cab Co.
    Create3DTextLabel("LA Yellow Cab Co.",0xB40100FF, 1752.8452,-1894.1328,13.5573,20,0);

	AddStaticPickup(1239, 2, 2445.5481,-1758.8947,13.5919); //Top Shottas HQ
    Create3DTextLabel("Top Shottas HQ",0xB40100FF, 2445.5481,-1758.8947,13.5919,20,0);

	AddStaticPickup(1239, 2, 1165.5927,1346.5027,10.9219); //DMW
    Create3DTextLabel("Centre D'exercice",0xB40100FF, 1165.5927,1346.5027,10.9219,20,0);

	AddStaticPickup(1239, 2, 203.5140,-202.2578,1.5781); //Pizza stack at BlueBerry
    //Create3DTextLabel("Centre D'exercice",0xB40100FF, 2029.5945,-1404.6426,17.2512,20,0);

	AddStaticPickup(1247, 2, 2290.1006,2430.7295,10.8203); // Comissaria Police Station
    Create3DTextLabel("Commissariat de police",0xB40100FF, 2290.1006,2430.7295,10.8203,20,0);

	AddStaticPickup(1239, 2, 1570.3828,-1333.8882,16.4844); // Building next ABC
    Create3DTextLabel("Building ABC Studio",0xB40100FF, 1570.3828,-1333.8882,16.4844,20,0);

	AddStaticPickup(1239, 2, 1456.6678,2773.4307,10.8203); // Yamaguchi HQ
    Create3DTextLabel("HQ MS 13 ",0xB40100FF, 1456.6678,2773.4307,10.8203,20,0);

	AddStaticPickup(1239, 2, 1505.2416,-1694.5597,14.0469); // Journal
    Create3DTextLabel("/journal",0xB40100FF, 1505.2416,-1694.5597,14.0469,20,0);
    
       	AddStaticPickup(1239, 2, 1749.0442,-1861.8928,13.5770); // Journal
    Create3DTextLabel("/guide",0x0000FFFF, 1749.0442,-1861.8928,13.5770,20,0);

	AddStaticPickup(1239, 2, 2127.5474,2378.6277,10.8203); // Chornaya Bratva HQ
    Create3DTextLabel("HQ Ruskovf",0xB40100FF, 2127.5474,2378.6277,10.8203,20,0);

	AddStaticPickup(1239, 2, 2276.9663,2458.7051,38.6837); // Helico lvpd
	Create3DTextLabel("Toit du Commissariat de LA",0xB40100FF, 2276.9663,2458.7051,38.6837,20,0);

	AddStaticPickup(1318, 2, 2007.7874,1167.5256,10.8203); // Boite de nuit
	Create3DTextLabel("The Sun",0xB40100FF, 2007.7874,1167.5256,10.8203,20,0);
    //2576.7900,-1284.8854,1054.6406
    //LS

	AddStaticPickup(1239, 2, 2046.5029,-1907.9750,13.5469); // AUTO ECOLE !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    Create3DTextLabel("Auto-Ecole",0xB40100FF, 2046.5029,-1907.9750,13.5469,20,0);

    AddStaticPickup(1239, 2, 1490.3195,1305.6976,1093.2964); // Licenses Menu/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//AddStaticPickup(1239, 2, 1087.6921,-922.4852,43.3906); // sex shop LS
	AddStaticPickup(1239, 2, 1309.8829,-1367.7006,13.5390); // TRibunal LS
	AddStaticPickup(1239, 2, 2179.0415,-1660.6899,14.9431); // Appartement dealer 1
	AddStaticPickup(1239, 2, 2164.4695,-1703.0287,15.0818); // Appartement dealer déchargement 1
	AddStaticPickup(1239, 2, 2366.4331,-2015.1521,13.7715); //Emplacement n°1 camion ( chargement )
	AddStaticPickup(1279, 2, 2442.5442,-1425.7607,24.0000); //Emplacement n°2 camion ( déchargement )
	AddStaticPickup(1239, 2, 1173.2563,-1323.3102,15.3943); //Hospital 1 near Ammu
	AddStaticPickup(1239, 2, 2029.5945,-1404.6426,17.2512); //Hospital 2 near speedway
	AddStaticPickup(1239, 2, 1366.4325,-1275.2096,13.5469); //ArmsDealer Registration
	AddStaticPickup(1239, 2, 2072.5486,-1582.8029,13.4741); //JOB être Drugs dealer
	AddStaticPickup(1239, 2, 1215.1304,-11.8431,1000.9219); //JOB Etre pute
	AddStaticPickup(1239, 2, -86.1251,2.6412,3.1172); //Drugs Farmer
	AddStaticPickup(1239, 2, 2847.4922,-2504.8691,14.6081); //materials deliver
    AddStaticPickup(1239, 2, 349.5560,161.6693,1019.9912); //healme
	AddStaticPickup(1239, 2, -792.9693,500.5572,1367.3672);//Waiter uniform list
	AddStaticPickup(1239, 2, -779.3134,497.8989,1371.7490);//Waiter uniform list 2
	AddStaticPickup(1239, 2, 242.7591,66.4315,1003.6406); // Inside PD elevator
	AddStaticPickup(1239, 2, 1481.0206,-1771.1138,18.7958); //City Hall
	AddStaticPickup(1239, 2, 1381.0413,-1088.8511,27.3906); //Bill Board (old Job Department) <- "mission"
    AddStaticPickup(1239, 2, 1793.02,-1296.56,13.44); //[/paper] paper boy + news reporter
    Create3DTextLabel("/journal",0xB40100FF,1793.02,-1296.56,13.44,10,0);
    //AddStaticPickup(1239, 2, 1073.0619,-344.5148,73.9922); //Calviconi Agency entrance
    AddStaticPickup(1242, 2, 1527.5,-12.1,1002.0); // binco armor
    AddStaticPickup(1240, 2, 279.3000,1853.5619,8.7649); // area51 health
	AddStaticPickup(1239, 2, 2101.7620,-1812.5922,13.5547); // PizzaBoy JobLocations
    AddStaticPickup(1239, 2, 1174.9100,-1365.7330,13.9876); // Elevator 1
	AddStaticPickup(1239, 2, 1174.9591,-1369.8761,23.9736); // Elevator 2
	AddStaticPickup(1239, 2, 379.1396,-114.2661,1001.4922); // Pizza Pickup
	AddStaticPickup(1239, 2, 359.6820,207.0294,1008.3828); // AD (/pub)
    AddStaticPickup(1239, 2, -382.6660,-1426.5121,26.2410); // Fermier l'emploi (Locations)
	AddStaticPickup(1239, 2, 1611.5129,-1893.6997,13.5469); // Balayeur de rue (Locations)
	// Entrances and exits start
	AddStaticPickup(1247, 2, 1554.9537,-1675.6584,16.1953);//Police Departmen enter
	Create3DTextLabel("LSPD",0xB40100FF,1554.9537,-1675.6584,17.1953,10,0);
    AddStaticPickup(1240, 2, 263.1702,76.4346,1001.0391); // Jail health
	AddStaticPickup(1239, 2, 1836.4064,-1682.4403,13.3493);//Alhabra
	AddStaticPickup(1239, 2, 2310.0183,-1643.4669,14.8270);//10 green
	AddStaticPickup(1239, 2, 2244.3423,-1665.5542,15.4766);//binco next to it
	AddStaticPickup(1239, 2, 2229.9011,-1721.2582,13.5613);//Ganton gym (Boxeur l'emploi)
	AddStaticPickup(1239, 2, 2421.4998,-1219.2438,25.5617);//Pig Pen (Prostituer emploi)
	AddStaticPickup(1239, 2, 2419.9941,-1509.5865,24.0000);//Cluckin bell under it
	AddStaticPickup(1239, 2, 2398.6240,-1899.2014,13.5469);//Cluckin bell next to 10 green
	AddStaticPickup(1239, 2, 810.4849,-1616.2451,13.5469);//Marina burger
	AddStaticPickup(1239, 2, 928.9110,-1352.9958,13.3438);//Cluckin above it
	AddStaticPickup(1239, 2, 1199.2477,-918.1447,43.1233);//Vinewood burger
	AddStaticPickup(1239, 2, 1000.5861,-919.8832,42.3281);//24/7 gas station vinewood
	AddStaticPickup(1239, 2, 1315.4581,-897.6843,39.5781);//24/7 vinewood
    AddStaticPickup(1239, 2, 2105.4858,-1806.4725,13.5547);//Pizzaboy
	AddStaticPickup(1239, 2, -2441.9749,754.0135,35.1786); // 24-7 Entrance
	AddStaticPickup(1239, 2, -25.1326,-141.0670,1003.5469); // 24-7 Exit
	AddStaticPickup(1239, 2, 1352.1194,-1759.2534,13.5078);//24/7 Near DMV enter
	AddStaticPickup(1239, 2, 1833.6124,-1842.4968,13.5781);//24/7 Near 8-Ball enter
	AddStaticPickup(1239, 2, 1298.7075,-798.5981,84.1406);//Madd dog crib
	//AddStaticPickup(1239, 2, 1518.5179,-1452.9224,14.2031);//FBI
	AddStaticPickup(1239, 2, 1038.0298,-1339.9967,13.7361);//Jim's sticky ring
    AddStaticPickup(1239, 2, 2495.9155,-1692.2400,1014.7422); // Gang Groove Street exit
	//AddStaticPickup(1239, 2, 2495.6208,-1690.9980,14.7656); //Gang Groove Street enter
	//AddStaticPickup(1239, 2, 1784.58,-1297.52,13.37); //ABC studio
	AddStaticPickup(1239, 2, 1752.8452,-1894.1328,13.5573); //LA Yellow Cab Co.
	AddStaticPickup(1239, 2, 203.5140,-202.2578,1.5781); //Pizza stack at BlueBerry
	AddStaticPickup(1239, 2, 1570.3828,-1333.8882,16.4844); // Building next ABC
	AddStaticPickup(1239, 2, 1122.7406,-2037.0421,69.8942); // Chornaya Bratva HQ
    AddStaticPickup(1314, 2, 1528.779,-1678.113,5.890625); //Arrest Place police
    AddStaticPickup(1314, 2, 1658.6390,-1691.3785,15.6094); //Arrest Place FBI //1658.6390,-1691.3785,15.6094 1510.5193,-1467.4611,9.5000
	AddStaticPickup(1239, 2, 1524.5724,-1677.8043,6.2188); // PD Tunnel
    AddStaticPickup(1239, 2, 1557.7257,-1675.2711,28.3955); // PD roof
	AddStaticPickup(1254, 2, 1424.1024,-1317.6764,13.5547); // Materials get
    AddStaticPickup(1239, 2, 2022.1492,-1108.7837,26.2031); // Drugs Smuggler pickup
    AddStaticPickup(1239, 2, 362.1231,173.6424,1008.3828); // /Legal Job Menu
    AddStaticPickup(1239, 2, 1490.3195,1305.6976,1093.2964); // Licenses Menu
	// Entrances and exits ends
    AddStaticPickup(1314, 2, 1528.779,-1678.113,5.890625); //Arrest Place
	//AddStaticPickup(1239, 2, 1043.4530,-1028.0344,32.1016); //Fernandez tuning
    //AddStaticPickup(1239, 2, 2073.2979,-1831.1228,13.5469); // Pay & Spray
    //AddStaticPickup(1239, 2, 1024.9756,-1030.7930,32.0257); // Pay & Spray
    //AddStaticPickup(1239, 2, 488.3819,-1733.0563,11.1752); // Pay & Spray
    //AddStaticPickup(1239, 2, 719.8940,-464.8272,16.3359); // Pay & Spray
    AddStaticPickup(1239, 2, 242.7591,66.4315,1003.6406); // Inside PD elevator
    //Create3DTextLabel("/+1",0xB40100FF, 2007.7874,1167.5256,10.8203,20,0);
	AddStaticPickup(1239, 2, 1524.5724,-1677.8043,6.2188); // PD Tunnel
    AddStaticPickup(1239, 2, 1557.7257,-1675.2711,28.3955); // PD roof

     AddStaticPickup(1239, 2, 2000.0508,-1114.0536,27.1250); // Ballas HQ
   	Create3DTextLabel("Ballas HQ",0xB40100FF, 2000.0508,-1114.0536,27.1250,20,0);

	AddStaticPickup(1239, 2, 2770.6982,-1628.7228,12.1775); // Hitman HQ
	Create3DTextLabel("Ballas HQ",0xB40100FF, 2000.0508,-1114.0536,27.1250,20,0);

	//AddStaticPickup(1239, 2, 826.6191,-613.4954,16.3359); // GARAGE Bikers HQ
	//Create3DTextLabel("Garage Bikers",0xB40100FF, 826.6191,-613.4954,16.3359,20,0);
	//AddStaticPickup(1239, 2, 854.5645,-605.0123,18.4219); // Bikers HQ
	//Create3DTextLabel("Bikers HQ",0xB40100FF, 854.5645,-605.0123,18.4219,20,0);

	AddStaticPickup(1239, 2, 2495.3254,-1691.1366,14.7656); //Groove HQ
	Create3DTextLabel("Groove HQ",0xB40100FF, 2495.3254,-1691.1366,14.7656,20,0);

	AddStaticPickup(1239, 2, 1828.1594,-1980.4380,13.5469); //Vagos HQ
	Create3DTextLabel("Vagos HQ",0xB40100FF, 1828.1594,-1980.4380,13.5469,20,0);

	AddStaticPickup(1239, 2, 659.0,-626.2,16.3); //Hitman Agency entrance
	Create3DTextLabel("Hitman HQ",0xB40100FF, 659.0,-626.2,16.3,20,0);

	AddStaticPickup(1239, 2, 1303.1649,-980.2634,38.3527); //CIA HQ Entrée
	Create3DTextLabel("CIA HQ",0xB40100FF, 1303.1649,-980.2634,38.3527,20,0);
	AddStaticPickup(1239, 2, 246.4302,107.4845,1003.2188); //CIA HQ Sortie
	Create3DTextLabel("SORTIE",0xB40100FF, 246.4302,107.4845,1003.2188,20,0);


    AddStaticPickup(1254, 2, 2408.5229,1837.7008,6.0156); // Materials pickup /contrebandematos
    Create3DTextLabel("/contrebandematos",0xB40100FF, 2408.5229,1837.7008,6.0156,20,0);

	AddStaticPickup(1254, 2, 930.4985,2150.1475,10.8203); // Materials bank /achetermatos
    Create3DTextLabel("/achetermatos",0xB40100FF, 930.4985,2150.1475,10.8203,20,0);

	AddStaticPickup(1279, 2, 1424.1729,-1317.9955,13.5547); // Get Drugs Pickup 2 /prendre drogue
    Create3DTextLabel("/prendre drogue",0xB40100FF, 1424.1729,-1317.9955,13.5547,20,0);

//	AddStaticPickup(1239, 2, 362.1231,173.6424,1008.3828); // Legal Job Menu /legaljobs
  //  Create3DTextLabel("[Vous cherchez du travail ? Faites /aideanpe]",0x0000FFFF, 362.1231,173.6424,1008.3828,20,0);
    
    AddStaticPickup(1239, 2, 362.1231,173.6424,1008.3828); // Illegal Jobs Menu /jobsillegaux
    Create3DTextLabel("/jobsillegaux",0xB40100FF, 2062.4106,-1556.5736,13.4482,20,0);

	pickups=pickups+71;
	printf("Loading %d pickups... Loaded successfuly !",pickups);
	/*new randa = random(sizeof(RandCars));
	randa = random(sizeof(RandCars));carselect[0] = RandCars[randa][0];
	randa = random(sizeof(RandCars));carselect[1] = RandCars[randa][0];
	randa = random(sizeof(RandCars));carselect[2] = RandCars[randa][0];
	randa = random(sizeof(RandCars));carselect[3] = RandCars[randa][0];
	randa = random(sizeof(RandCars));carselect[4] = RandCars[randa][0];
	randa = random(sizeof(RandCars));carselect[5] = RandCars[randa][0];
	randa = random(sizeof(RandCars));carselect[6] = RandCars[randa][0];
	randa = random(sizeof(RandCars));carselect[7] = RandCars[randa][0];
	randa = random(sizeof(RandCars));carselect[8] = RandCars[randa][0];
	randa = random(sizeof(RandCars));carselect[9] = RandCars[randa][0];
	randa = random(sizeof(RandCars));carselect[10] = RandCars[randa][0];
	randa = random(sizeof(RandCars));carselect[11] = RandCars[randa][0];
	randa = random(sizeof(RandCars));carselect[12] = RandCars[randa][0];
	randa = random(sizeof(RandCars));carselect[13] = RandCars[randa][0];
	randa = random(sizeof(RandLCars));carselect[14] = RandLCars[randa][0];
	AddStaticVehicleEx(carselect[14], 1279.4,-1337.0,13.5,1.0,-1, -1, -1);//long*/
	/*if (realtime)
	{
		new tmphour;
		new tmpminute;
		new tmpsecond;
		gettime(tmphour, tmpminute, tmpsecond);
		SetWorldTime(tmphour);
	}*/
	SetTimer("RemiX_Time_Tools", 1000, true);
	synctimer = SetTimer("SyncUp", 60000, 1);
	hackchecktimer = SetTimer("GlobalHackCheck", 1000, 1);
	braquagetimer = SetTimer("RobTimer", 1000, 1);
	Canrobagaintimer = SetTimer("CanRobAgain", 1000, 1);
	unjailtimer = SetTimer("SetPlayerUnjail", 1000, 1);
	othtimer = SetTimer("OtherTimer", 1000, 1);
	spdovoiture = SetTimer("SpeedoVoiture", 50, 1);
	cartimer = SetTimer("CarCheck", 30000, 1);
	pickuptimer = SetTimer("CustomPickups", 1000, 1);
	spectatetimer = SetTimer("Spectator", 2000, 1);
	idletimer = SetTimer("IdleKick", idletime, 1);
	productiontimer = SetTimer("Production", 300000, 1); //5 mins (300000)
	accountstimer = SetTimer("SaveAccounts", 900000, 1); //15 mins every account saved
	checkgastimer = SetTimer("CheckGas", RunOutTime, 1);
    stoppedvehtimer = SetTimer("StoppedVehicle", RunOutTime, 1);
    checkcarhealthtimer = SetTimer("CheckCarHealth", 10000, 1);
    burgertimer = SetTimer("UpdateBurgerPositions", 1000, 1);
	chickentimer = SetTimer("UpdateChickenPositions", 1000, 1);
	tracetimer = SetTimer("TraceLastCall", 300000, 1);
    //updateplayerpos = SetTimer("UpdatePlayerPosition", 3000, 1);
	//for(new i = 0; i < sizeof(CarSpawns); i++)
/*	for(new i = 0; i < 165; i++)
	{
		AddCar(i);
	}
	CarInit();*/
	//buszonewest = GangZoneCreate(1722.3599, 2901.8652, -2694.5417, -904.3515); // West Bus Route Zone
	//buszoneeast = GangZoneCreate(127.4722, 1722.3599, -2694.5417, -904.3515);  // East Bus Route Zone
	return 1;
}

public SyncUp()
{
	//SyncTime();
	DollahScoreUpdate();
}

/*public SyncTime()
{
	//new string[64];
	new tmphour;
	new tmpminute;
	new tmpsecond;
	gettime(tmphour, tmpminute, tmpsecond);
	tmphour = shifthour;
	if ((tmphour > ghour) || (tmphour == 0 && ghour == 23))
	{
		format(string, sizeof(string), "SERVER: The time is now %d:00 hours",tmphour);
		BroadCast(COLOR_WHITE,string);
		ghour = tmphour;
		PayDay();
		if (realtime)
		{
			SetWorldTime(tmphour);
		}
	}
}*/

public RemiX_Time_Tools()
{
	//News
	new ServerHour, ServerMinute, ServerSecond;
	new Year, Month, Day;

	//Gets
	gettime(ServerHour,ServerMinute,ServerSecond);
	getdate(Year, Month, Day);

	for(new i = 0; i < GetMaxPlayers(); i++){SetPlayerTime(i, ServerHour, ServerMinute);}

	//Meteo Changer
	if(ServerMinute == 0 && ServerSecond == 1) //When a new hour starts. The one second is to prevent a bug.
	{
		new string[256];
		format(string, sizeof(string), "Information de Los Santos : il est maintenant, %02dh.",ServerHour);
		SendClientMessageToAll(COLOR_WHITE, string);
		printf("[%02d:%02d:%02d]",ServerHour, ServerMinute, ServerSecond);
		PayDay();

		switch(Month)
		{
		    case 1:{
			TextDrawSetString(TextdrawMonth, " Janvier");
			//SetWeather(WinterWeather[winterrand]);
			}

		    case 2:{
			TextDrawSetString(TextdrawMonth, " Fevrier");
			//SetWeather(WinterWeather[winterrand]);
			}

		    case 3:{
			TextDrawSetString(TextdrawMonth, " Mars");
			/*if(Day <21){SetWeather(WinterWeather[winterrand]);}
			else{SetWeather(SpringWeather[springrand]);}*/
			}

		    case 4:{
			TextDrawSetString(TextdrawMonth, " Avril");
			//SetWeather(SpringWeather[springrand]);
			}

		    case 5:{
			TextDrawSetString(TextdrawMonth, " Mai");
			//SetWeather(SpringWeather[springrand]);
			}

		    case 6:{
			TextDrawSetString(TextdrawMonth, " Juin");
			/*if(Day <21){SetWeather(SpringWeather[springrand]);}
			else{SetWeather(SummerWeather[summerrand]);}*/
			}

		    case 7:{
			TextDrawSetString(TextdrawMonth, " Juiller");
			//SetWeather(SummerWeather[summerrand]);
			}

		    case 8:{
			TextDrawSetString(TextdrawMonth, " Aout");
			//SetWeather(SummerWeather[summerrand]);
			}

		    case 9:{
			TextDrawSetString(TextdrawMonth, " Septembre");
			/*if(Day <21){SetWeather(SummerWeather[summerrand]);}
			else{SetWeather(AutumnWeather[autumnrand]);}*/
			}

		    case 10:{
			TextDrawSetString(TextdrawMonth, " Octobre");
			//SetWeather(AutumnWeather[autumnrand]);
			}

		    case 11:{
			TextDrawSetString(TextdrawMonth, " Novembre");
			//SetWeather(AutumnWeather[autumnrand]);
			}

		    case 12:{
			TextDrawSetString(TextdrawMonth, " Decembre");
			/*if(Day <21){SetWeather(AutumnWeather[autumnrand]);}
			else{SetWeather(WinterWeather[winterrand]);}*/
			}
		}
	}
	return 1;
}

//==================================[HEURE & DATES]==========================

stock CreateRXTT()
{
    //Hours
	TextdrawHour = TextDrawCreate(546.000000,22.000000,"--");
	TextDrawAlignment(TextdrawHour,0);
	TextDrawBackgroundColor(TextdrawHour,BLACK);
	TextDrawFont(TextdrawHour,3);
	TextDrawLetterSize(TextdrawHour,0.634,2.4);
	TextDrawColor(TextdrawHour,WHITE);
	TextDrawSetOutline(TextdrawHour,1);
	TextDrawSetProportional(TextdrawHour,1);
	TextDrawSetShadow(TextdrawHour,1);

	//Minutes
	TextdrawMinute = TextDrawCreate(570.200000,22.000000,"--");
	TextDrawAlignment(TextdrawMinute,0);
	TextDrawBackgroundColor(TextdrawMinute,BLACK);
	TextDrawFont(TextdrawMinute,3);
	TextDrawLetterSize(TextdrawMinute,0.634,2.4);
	TextDrawColor(TextdrawMinute,WHITE);
	TextDrawSetOutline(TextdrawMinute,1);
	TextDrawSetProportional(TextdrawMinute,1);
	TextDrawSetShadow(TextdrawMinute,1);

	//Seconds
	TextdrawSeconds = TextDrawCreate(606.500000,33.000000,"--");
	TextDrawAlignment(TextdrawSeconds,0);
	TextDrawBackgroundColor(TextdrawSeconds,BLACK);
	TextDrawFont(TextdrawSeconds,3);
	TextDrawLetterSize(TextdrawSeconds,0.3,1.0);
	TextDrawColor(TextdrawSeconds,WHITE);
	TextDrawSetOutline(TextdrawSeconds,1);
	TextDrawSetProportional(TextdrawSeconds,1);
	TextDrawSetShadow(TextdrawSeconds,1);

	//Day
	TextdrawDay = TextDrawCreate(500.000000,10.000000,"--");
	TextDrawAlignment(TextdrawDay,0);
	TextDrawBackgroundColor(TextdrawDay,BLACK);
	TextDrawFont(TextdrawDay,3);
	TextDrawLetterSize(TextdrawDay,0.44,1.2);
	TextDrawColor(TextdrawDay,WHITE);
	TextDrawSetOutline(TextdrawDay,1);
	TextDrawSetProportional(TextdrawDay,1);
	TextDrawSetShadow(TextdrawDay,1);

	//Month
	TextdrawMonth = TextDrawCreate(515.000000,10.000000,"---------");
	TextDrawAlignment(TextdrawMonth,0);
	TextDrawBackgroundColor(TextdrawMonth,BLACK);
	TextDrawFont(TextdrawMonth,3);
	TextDrawLetterSize(TextdrawMonth,0.44,1.2);
	TextDrawColor(TextdrawMonth,WHITE);
	TextDrawSetOutline(TextdrawMonth,1);
	TextDrawSetProportional(TextdrawMonth,1);
	TextDrawSetShadow(TextdrawMonth,1);
}

stock HideRXTT(playerid)
{
	TextDrawHideForPlayer(playerid,TextdrawHour);
	TextDrawHideForPlayer(playerid,TextdrawMinute);
	TextDrawHideForPlayer(playerid,TextdrawSeconds);
	TextDrawHideForPlayer(playerid,TextdrawDay);
	TextDrawHideForPlayer(playerid,TextdrawMonth);
}

stock ShowRXTT(playerid)
{
	TextDrawShowForPlayer(playerid,TextdrawHour);
	TextDrawShowForPlayer(playerid,TextdrawMinute);
	TextDrawShowForPlayer(playerid,TextdrawSeconds);
	TextDrawShowForPlayer(playerid,TextdrawDay);
	TextDrawShowForPlayer(playerid,TextdrawMonth);
}



public SaveAccounts()
{
    for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			OnPlayerUpdate(i);
			if(PlayerInfo[i][pJob] > 0)
	    	{
	    	    if(PlayerInfo[i][pContractTime] < 25)
	    	    {
					PlayerInfo[i][pContractTime] ++;
				}
	    	}
		}
	}
}


public IsPlayerInTurf(playerid, turfid)
{
	if(IsPlayerConnected(playerid))
	{
		if(turfid == -1)
		{
			return 0;
		}
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid,x,y,z);
		if(x >= TurfInfo[turfid][zMinX] && x < TurfInfo[turfid][zMaxX] && y >= TurfInfo[turfid][zMinY] && y < TurfInfo[turfid][zMaxY])
		{
	 		return 1;
		}
	}
	return 0;
}

public GetClosestPlayer(p1)
{
	new x,Float:dis,Float:dis2,player;
	player = -1;
	dis = 99999.99;
	for (x=0;x<MAX_PLAYERS;x++)
	{
		if(IsPlayerConnected(x))
		{
			if(x != p1)
			{
				dis2 = GetDistanceBetweenPlayers(x,p1);
				if(dis2 < dis && dis2 != -1.00)
				{
					dis = dis2;
					player = x;
				}
			}
		}
	}
	return player;
}

public Production()
{
	new string[256];
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pFishes] >= 5) { if(FishCount[i] >= 3) { PlayerInfo[i][pFishes] = 0; } else { FishCount[i] += 1; } }
		    if(PlayerDrunk[i] > 0) { PlayerDrunk[i] = 0; PlayerDrunkTime[i] = 0; GameTextForPlayer(i, "~p~Vous n'etes plus bouré~n~~w~Super", 3500, 1); }
		    if(PlayerInfo[i][pPayDay] < 6) { PlayerInfo[i][pPayDay] += 1; } //+ 5 min to PayDay anti-abuse
		    for(new k = 0; k < MAX_PLAYERS; k++)
			{
				if(IsPlayerConnected(k))
				{
				    if(gTeam[k] == 2 && CrimInRange(80.0, i,k))
				    {
					}
					else
					{
					    WantedPoints[i] -= 0;
					    if(WantedPoints[i] < 0) { WantedPoints[i] = 0; }
					    new points = WantedPoints[i];
					    new wlevel;
					    if(points > 0)
						{
						    new yesno;
							if(points == 3) { if(WantedLevel[i] != 1) { WantedLevel[i] = 1; wlevel = 1; yesno = 1; } }
							else if(points >= 4 && points <= 5) { if(WantedLevel[i] != 2) { WantedLevel[i] = 2; wlevel = 2; yesno = 1; } }
							else if(points >= 6 && points <= 7) { if(WantedLevel[i] != 3) { WantedLevel[i] = 3; wlevel = 3; yesno = 1; } }
							else if(points >= 8 && points <= 9) { if(WantedLevel[i] != 4) { WantedLevel[i] = 4; wlevel = 4; yesno = 1; } }
							else if(points >= 10 && points <= 11) { if(WantedLevel[i] != 5) { WantedLevel[i] = 5; wlevel = 5; yesno = 1; } }
							else if(points >= 12 && points <= 13) { if(WantedLevel[i] != 6) { WantedLevel[i] = 6; wlevel = 6; yesno = 1; } }
							else if(points >= 14) { if(WantedLevel[i] != 10) { WantedLevel[i] = 10; wlevel = 10; yesno = 1; } }
							else if(points <= 0) { if(WantedLevel[i] != 0) { ClearCrime(i); WantedLevel[i] = 0; wlevel = 0; yesno = 1;} }
							if(yesno)
							{
								format(string, sizeof(string), "Current Wanted Level: %d", wlevel);
								SendClientMessage(i, COLOR_YELLOW, string);
							}
						}
					}
				}
			}
		}
	}
}

public DateProp(playerid)
{
	new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));
	new curdate = getdate();
	for(new h = 0; h < sizeof(HouseInfo); h++)
	{
		if (strcmp(playername, HouseInfo[h][hOwner], true) == 0)
		{
			HouseInfo[h][hDate] = curdate;
			OnPropUpdate();
		}
	}
	return 1;
}

public Checkprop()
{
	new olddate;
	new string[256];
	new curdate = getdate();
	for(new h = 0; h < sizeof(HouseInfo); h++)
	{
		if(HouseInfo[h][hOwned] == 1 && HouseInfo[h][hDate] > 9)
		{
			olddate = HouseInfo[h][hDate];
			if(curdate-olddate >= 5)
			{
				HouseInfo[h][hHel] = 0;
				HouseInfo[h][hArm] = 0;
				HouseInfo[h][hHealthx] = 0;
				HouseInfo[h][hHealthy] = 0;
				HouseInfo[h][hHealthz] = 0;
				HouseInfo[h][hArmourx] = 0;
				HouseInfo[h][hArmoury] = 0;
				HouseInfo[h][hArmourz] = 0;
				HouseInfo[h][hLock] = 1;
				HouseInfo[h][hOwned] = 0;
				HouseInfo[h][hVec] = 418;
				HouseInfo[h][hVcol1] = -1;
				HouseInfo[h][hVcol2] = -1;
				strmid(HouseInfo[h][hOwner], "The State", 0, strlen("The State"), 255);
				format(string, sizeof(string), "[Pub] Une maison est maintenant disponible au prix de $%d",HouseInfo[h][hValue]);
				SendClientMessageToAll(0x00F6E0F6, string);
				OnPropUpdate();
			}
		}
	}
	return 1;
}

public PayDay()
{
	new string[256];
	new account,interest,tribute;
	new rent = 0;
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pLevel] > 0)
		    {
			    if(MoneyMessage[i]==1)
				{
				    SendClientMessage(i, COLOR_LIGHTRED, "Vous n'avez pas payé vos dettes, vous allez en prison.");
				    SetPlayerInterior(i, 6);
				    PlayerInfo[i][pInt] = 6;
			   		SetPlayerPos(i, 264.6288,77.5742,1001.0391);
		            PlayerInfo[i][pJailed] = 1;
		            SafeResetPlayerWeapons(i);
					WantedPoints[i] = 0;
					PlayerInfo[i][pJailTime] = 240;
					format(string, sizeof(string), "Vous êtes en prisons pour %d secondes.   Caution: Aucune", PlayerInfo[i][pJailTime]);
					SendClientMessage(i, COLOR_WHITE, string);
				}
				new infostring[256];
				new playername2[MAX_PLAYER_NAME];
				GetPlayerName(i, playername2, sizeof(playername2));
				account = PlayerInfo[i][pAccount];
				new key = PlayerInfo[i][pPhousekey];
				if(key != 255)
				{
					rent = HouseInfo[key][hRent];
					if(strcmp(playername2, HouseInfo[key][hOwner], true) == 0)
					{
						rent = 0;
					}
					else if(rent > PlayerInfo[i][pAccount] && GetPlayerMoney(i))
					{
						PlayerInfo[i][pPhousekey] = 255;
						SendClientMessage(i, COLOR_WHITE, "Vous avez été éjecté car vous ne possédiez pas assez d'argent pour payer votre loyer.");
						rent = 0;
					}
					HouseInfo[key][hTakings] = HouseInfo[key][hTakings]+rent;
				}
				new tmpintrate;
				if (key != 255 && strcmp(playername2, HouseInfo[key][hOwner], true) == 0)
				{
				    if(PlayerInfo[i][pDonateRank] > 0) { tmpintrate = intrate+4; }
					else { tmpintrate = intrate+2; }//HouseInfo[key][hLevel]
				}
				else
				{
				    if(PlayerInfo[i][pDonateRank] > 0) { tmpintrate = 3; }
					else { tmpintrate = 1; }
				}
				if(PlayerInfo[i][pPayDay] >= 5)
				{
				    Tax += TaxValue;//Should work for every player online
				    PlayerInfo[i][pAccount] -= TaxValue;
					new checks = PlayerInfo[i][pPayCheck] / 5;
					checks += (random(1)+600) + PlayerInfo[i][pLevel]*(75);
					new member = PlayerInfo[i][pMember],leader = PlayerInfo[i][pLeader],rank = PlayerInfo[i][pRank];
					if(member == 1 || leader == 1) // LSPD
					{
					    if(rank == 1)
					        checks += 575+random(150);
					    else if(rank == 2)
					        checks += 590+random(150);
					    else if(rank == 3)
					        checks += 610+random(150);
					    else if(rank == 4)
					        checks += 640+random(150);
					    else if(rank == 5)
					        checks += 660+random(150);
					    else if(rank == 6)
					        checks += 700+random(150);
					}
					else if(member == 2 || leader == 2) // FBI
					{
					    if(rank == 1)
					        checks += 525+random(150);
					    else if(rank == 2)
					        checks += 530+random(150);
					    else if(rank == 3)
					        checks += 570+random(150);
					    else if(rank == 4)
					        checks += 605+random(150);
					    else if(rank == 5)
					        checks += 635+random(150);
					    else if(rank == 6)
					    	checks += 675+random(150);
					}
					else if(member == 3 || leader == 3)// Armée
					{
					    if(rank == 1 || rank == 2 || rank == 3 || rank == 4)
					        checks += 555+random(150);
					    else if(rank == 5)
					        checks += 605+random(150);
					    else if(rank == 6)
					        checks += 660+random(150);
					}
					else if(member == 4 || leader == 4) // Hospital
					{
					    if(rank == 1)
					        checks += 505+random(150);
					    else if(rank == 2)
					        checks += 555+random(150);
					    else if(rank == 3)
					        checks += 585+random(150);
					    else if(rank == 4)
					        checks += 600+random(150);
					    else if(rank == 5)
					        checks += 650+random(150);
					    else if(rank == 6)
					        checks += 690+random(150);
					}
					else if(member == 7 || leader == 7) // Governement
					{
					    if(rank == 1)
					        checks += 535+random(150);
					    else if(rank == 2)
					        checks += 560+random(150);
					    else if(rank == 3)
					        checks += 590+random(150);
					    else if(rank == 4)
					        checks += 615+random(150);
					    else if(rank == 5)
					        checks += 655+random(150);
					    else if(rank == 6)
					        checks += 735+random(150);
					}
					else if(member == 9 || leader == 9) // News
					{
					    if(rank == 1)
					        checks += 535+random(150);
					    else if(rank == 2)
					        checks += 550+random(150);
					    else if(rank == 3)
					        checks += 580+random(150);
					    else if(rank == 4)
					        checks += 600+random(150);
					    else if(rank == 5)
					        checks += 630+random(150);
					    else if(rank == 6)
					        checks += 660+random(150);
					}
					else if(member == 18 || leader == 18) // CIA
					{
					    if(rank == 1)
					        checks += 525+random(150);
					    else if(rank == 2)
					        checks += 530+random(150);
					    else if(rank == 3)
					        checks += 570+random(150);
					    else if(rank == 4)
					        checks += 605+random(150);
					    else if(rank == 5)
					        checks += 635+random(150);
					    else if(rank == 6)
					    	checks += 675+random(150);
					}
					new job = PlayerInfo[i][pJob];
					if(job != 0)
                    {
	                    if(job == 1 || job == 2) { checks += 600+random(100); }// Bons Jobs : Métiers Libéraux
                    	else if(job == 16 || job == 13) { checks += 550+random(10); }// Jobs pas mal
                    	else if(job == 7 || job == 14 || job == 15) { checks += 525+random(100); } // Jobs normaux
	                    else if(job == 17 || job == 21  || job == 6 || job == 18 || job == 12 || job == 8 || job == 26 || job == 25) { checks += 395+random(200); } // Jobs pas térrible
                    }
					if(PlayerInfo[i][pDonateRank] > 0)
					{
					    new bonus = PlayerInfo[i][pPayCheck] / 10;
					    checks += bonus;
					}
				    new ebill = (PlayerInfo[i][pAccount]/10000)*(PlayerInfo[i][pLevel]);
				    //ConsumingMoney[i] = 1;
				    //SafeGivePlayerMoney(i, checks);
				    account += checks;
				    if(PlayerInfo[i][pAccount] > 0)
				    {
				    	PlayerInfo[i][pAccount] -= ebill;
				    	SBizzInfo[4][sbTill] += ebill;
					}
					else
					{
					    ebill = 0;
					}
					// family tribute
		        	if (PlayerInfo[i][pFMember] < MAX_FAMILY)
					{
					new fam = PlayerInfo[i][pFMember];
					new tax = FamilyInfo[fam][FamilyTax];
					if (tax > 0 && tax <= 25)
					    {
						tribute = checks / (100 / tax);
						PlayerInfo[i][pAccount] -= tribute;
						FamilyInfo[fam][FamilyCash] += tribute;
						}
		            }
					interest = (PlayerInfo[i][pAccount]/1000)*(tmpintrate);
					PlayerInfo[i][pExp]++;
					PlayerPlayMusic(i);
					PlayerInfo[i][pAccount] = account+interest;
					PlayerPlaySound(i, 1097, 0.0, 0.0, 0.0);
					SendClientMessage(i, COLOR_YELLOW, "|________________ Extrait de Compte ________________|");
					format(string, sizeof(string), " Salaire Hors Taxe : $%d   Taxe : -$%d", checks, TaxValue);
					SendClientMessage(i, COLOR_WHITE, string);
					if(PlayerInfo[i][pPhousekey] != 255 || PlayerInfo[i][pPbiskey] != 255)
					{
					    format(string, sizeof(string), " Facture d'Electrécité : -$%d", ebill);
						SendClientMessage(i, COLOR_WHITE, string);
					}
					format(string, sizeof(string), " Argent sur le compte avant la Paye : $%d", account - checks);
					SendClientMessage(i, COLOR_WHITE, string);
					format(string, sizeof(string), " Taux d'înterêt: 0.%d Pourcent => Interêt Gagné : %d$",tmpintrate, interest);
					SendClientMessage(i, COLOR_WHITE, string);
					if (PlayerInfo[i][pFMember] < MAX_FAMILY && FamilyInfo[PlayerInfo[i][pFMember]][FamilySafe] == 1)
				    {
						format(string, sizeof(string), "  FNO Taxe: $%d", tribute);
						SendClientMessage(i, COLOR_WHITE, string);
				    }
					format(string, sizeof(string), " Location: -$%d", rent);
					SendClientMessage(i, COLOR_WHITE, string);
					SendClientMessage(i, COLOR_YELLOW, "|---------------------------------------------------------------------|");
					format(string, sizeof(string), " Argent sur le compte après  la paye : $%d", PlayerInfo[i][pAccount]);
					SendClientMessage(i, COLOR_WHITE, string);
					if(PlayerInfo[i][pHotel] == 1)
					{
                        new hotelcost = BizzInfo[6][bEntranceCost];
					    format(string, sizeof(string), " Hotel: -$%d", hotelcost);
						SendClientMessage(i, COLOR_WHITE, string);
						BizzInfo[6][bTill] += BizzInfo[6][bEntranceCost];
						ExtortionBiz(6, BizzInfo[6][bEntranceCost]);
						BizzInfo[6][bProducts]--;
						PlayerInfo[i][pAccount] -= hotelcost;
						OnPropUpdate();
					}
					if(PlayerInfo[i][pJob] == 0 && PlayerInfo[i][pMember] == 0 && PlayerInfo[i][pLeader] == 0 && PlayerInfo[i][pRank] == 0)
					{
                        SendClientMessage(i, COLOR_WHITE, "Vous n'avez pas de travail. Vous touchez le RSA.");
					}
					format(string, sizeof(string), "~y~PayDay~n~~w~L'argent a ete depose sur votre compte bancaire");
					GameTextForPlayer(i, string, 5000, 1);
					rent = 0;
					Masturber[i] = 0;
					PlayerInfo[i][pPayDay] = 0;
					PlayerInfo[i][pPayCheck] = 0;
					PlayerInfo[i][pConnectTime] += 1;
					PlayerInfo[i][pWork] = 0;
					new nxtlevel = PlayerInfo[i][pLevel]+1;
					new expamount = nxtlevel*levelexp;
					if(PlayerInfo[i][pExp] >= expamount)
					{
						format(string, sizeof(string), "~g~Niveau Superieur Atteint~n~~w~Vous etes maintenant niveau %d", nxtlevel);
						PlayerPlaySound(i, 1052, 0.0, 0.0, 0.0);
						PlayerPlayMusic(i);
						PlayerInfo[i][pLevel]++;
						PlayerInfo[i][pExp] = 0;
						PlayerInfo[i][gPupgrade] = PlayerInfo[i][gPupgrade]+2;
						GameTextForPlayer(i, string, 5000, 1);
						format(infostring, 256, " Niveau supérieur atteint ! Tapez /upgrade");
						SendClientMessage(i, COLOR_GRAD1, infostring);
						format(infostring, 256, "Vous avez %d points d'amélioration non utilisé.",PlayerInfo[i][gPupgrade]);
						SendClientMessage(i, COLOR_GRAD2, infostring);
					}
					if (PlayerInfo[i][pExp] < expamount)
					{
						format(infostring, 256, "Vous avez besoin de %d points de respect pour passer au niveau suivant, vous en avez %d.",expamount,PlayerInfo[i][pExp]);
						SendClientMessage(i, COLOR_GRAD1, infostring);
						return 1;
					}
					if(FarmerVar[i] == 0)
					{
						FarmerPickup[i][0] = 0;
					}
					if(DrugFarmerVar[i] == 0)
					{
						DrugFarmerPickup[i][0] = 0;
					}
					if(SmugglerWork[i] == 0)
					{
						PayDaySecure[i] = 0;
					}
					if(PlayerInfo[i][pDonateRank] > 0)
					{
					    PlayerInfo[i][pPayDayHad] += 1;
					    if(PlayerInfo[i][pPayDayHad] >= 5)
					    {
					        PlayerInfo[i][pExp]++;
					        PlayerInfo[i][pPayDayHad] = 0;
					    }
					}
				}
				else
				{
				    SendClientMessage(i, COLOR_WHITE, "* Vous n'avez pas joué assez longtemps pour obtenir votre paye.");
				}
			}
		}
	}
	SaveFamilies();
	SaveAccounts();
	Checkprop();
	return 1;
}

/*}

strtok(const string[], &index)
{
	new length = strlen(string);
	while ((index < length) && (string[index] <= ' '))
	{
		index++;
	}

	new offset = index;
	new result[20];
	while ((index < length) && (string[index] > ' ') && ((index - offset) < (sizeof(result) - 1)))
	{
		result[index - offset] = string[index];
		index++;
	}
	result[index - offset] = EOS;
	return result;*/

otherstrtok(const string[], &index)
{
	new length = strlen(string);
	while ((index < length) && (string[index] <= ' '))
	{
		index++;
	}

	new offset = index;
	new result[20];
	while ((index < length) && (string[index] > ' ') && ((index - offset) < (sizeof(result) - 1)))
	{
		result[index - offset] = string[index];
		index++;
	}
	result[index - offset] = EOS;
	return result;
}

public split(const strsrc[], strdest[][], delimiter)
{
	new i, li;
	new aNum;
	new len;
	while(i <= strlen(strsrc)){
	    if(strsrc[i]==delimiter || i==strlen(strsrc)){
	        len = strmid(strdest[aNum], strsrc, li, i, 128);
	        strdest[aNum][len] = 0;
	        li = i+1;
	        aNum++;
		}
		i++;
	}
	return 1;
}

public OnPlayerRegister(playerid, password[])
{
	if(IsPlayerConnected(playerid))
	{
			new string3[64];
			new playername3[MAX_PLAYER_NAME];
			GetPlayerName(playerid, playername3, sizeof(playername3));
			format(string3, sizeof(string3), "users/%s.ini", playername3);
			new File: hFile = fopen(string3, io_write);
			if (hFile)
			{
			    strmid(PlayerInfo[playerid][pKey], password, 0, strlen(password), 255);
			    new var[64];
				format(var, 64, "Key=%s\n", PlayerInfo[playerid][pKey]);fwrite(hFile, var);
				PlayerInfo[playerid][pCash] = GetPlayerMoney(playerid);
				format(var, 64, "Level=%d\n",PlayerInfo[playerid][pLevel]);fwrite(hFile, var);
				format(var, 64, "AdminLevel=%d\n",PlayerInfo[playerid][pAdmin]);fwrite(hFile, var);
				format(var, 64, "DonateRank=%d\n",PlayerInfo[playerid][pDonateRank]);fwrite(hFile, var);
				format(var, 64, "UpgradePoints=%d\n",PlayerInfo[playerid][gPupgrade]);fwrite(hFile, var);
				format(var, 64, "ConnectedTime=%d\n",PlayerInfo[playerid][pConnectTime]);fwrite(hFile, var);
				format(var, 64, "Registered=%d\n",PlayerInfo[playerid][pReg]);fwrite(hFile, var);
				format(var, 64, "Sex=%d\n",PlayerInfo[playerid][pSex]);fwrite(hFile, var);
				format(var, 64, "Age=%d\n",PlayerInfo[playerid][pAge]);fwrite(hFile, var);
				format(var, 64, "Origin=%d\n",PlayerInfo[playerid][pOrigin]);fwrite(hFile, var);
				format(var, 64, "CK=%d\n",PlayerInfo[playerid][pCK]);fwrite(hFile, var);
				format(var, 64, "Muted=%d\n",PlayerInfo[playerid][pMuted]);fwrite(hFile, var);
				format(var, 64, "MutedOOC=%d\n",PlayerInfo[playerid][pMutedOOC]);fwrite(hFile, var);
				format(var, 64, "Respect=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
				format(var, 64, "Money=%d\n",PlayerInfo[playerid][pCash]);fwrite(hFile, var);
				format(var, 64, "Bank=%d\n",PlayerInfo[playerid][pAccount]);fwrite(hFile, var);
				format(var, 64, "Crimes=%d\n",PlayerInfo[playerid][pCrimes]);fwrite(hFile, var);
				format(var, 64, "Kills=%d\n",PlayerInfo[playerid][pKills]);fwrite(hFile, var);
				format(var, 64, "Deaths=%d\n",PlayerInfo[playerid][pDeaths]);fwrite(hFile, var);
				format(var, 64, "Arrested=%d\n",PlayerInfo[playerid][pArrested]);fwrite(hFile, var);
				format(var, 64, "WantedDeaths=%d\n",PlayerInfo[playerid][pWantedDeaths]);fwrite(hFile, var);
				format(var, 64, "Phonebook=%d\n",PlayerInfo[playerid][pPhoneBook]);fwrite(hFile, var);
				format(var, 64, "LottoNr=%d\n",PlayerInfo[playerid][pLottoNr]);fwrite(hFile, var);
				format(var, 64, "Fishes=%d\n",PlayerInfo[playerid][pFishes]);fwrite(hFile, var);
				format(var, 64, "BiggestFish=%d\n",PlayerInfo[playerid][pBiggestFish]);fwrite(hFile, var);
				format(var, 64, "Job=%d\n",PlayerInfo[playerid][pJob]);fwrite(hFile, var);
				format(var, 64, "Paycheck=%d\n",PlayerInfo[playerid][pPayCheck]);fwrite(hFile, var);
				format(var, 64, "HeadValue=%d\n",PlayerInfo[playerid][pHeadValue]);fwrite(hFile, var);
				format(var, 64, "Jailed=%d\n",PlayerInfo[playerid][pJailed]);fwrite(hFile, var);
				format(var, 64, "JailTime=%d\n",PlayerInfo[playerid][pJailTime]);fwrite(hFile, var);
				format(var, 64, "Materials=%d\n",PlayerInfo[playerid][pMats]);fwrite(hFile, var);
				format(var, 64, "Materialsf=%d\n",PlayerInfo[playerid][pMatsf]);fwrite(hFile, var);
				format(var, 64, "Drugs=%d\n",PlayerInfo[playerid][pDrugs]);fwrite(hFile, var);
				format(var, 64, "Leader=%d\n",PlayerInfo[playerid][pLeader]);fwrite(hFile, var);
				format(var, 64, "Member=%d\n",PlayerInfo[playerid][pMember]);fwrite(hFile, var);
				format(var, 64, "FMember=%d\n",PlayerInfo[playerid][pFMember]);fwrite(hFile, var);
				format(var, 64, "Rank=%d\n",PlayerInfo[playerid][pRank]);fwrite(hFile, var);
				format(var, 64, "Char=%d\n",PlayerInfo[playerid][pChar]);fwrite(hFile, var);
				format(var, 64, "ContractTime=%d\n",PlayerInfo[playerid][pContractTime]);fwrite(hFile, var);
				format(var, 64, "DetSkill=%d\n",PlayerInfo[playerid][pDetSkill]);fwrite(hFile, var);
				format(var, 64, "SexSkill=%d\n",PlayerInfo[playerid][pSexSkill]);fwrite(hFile, var);
				format(var, 64, "BoxSkill=%d\n",PlayerInfo[playerid][pBoxSkill]);fwrite(hFile, var);
				format(var, 64, "LawSkill=%d\n",PlayerInfo[playerid][pLawSkill]);fwrite(hFile, var);
				format(var, 64, "MechSkill=%d\n",PlayerInfo[playerid][pMechSkill]);fwrite(hFile, var);
				format(var, 64, "JackSkill=%d\n",PlayerInfo[playerid][pJackSkill]);fwrite(hFile, var);
				format(var, 64, "CarSkill=%d\n",PlayerInfo[playerid][pCarSkill]);fwrite(hFile, var);
				format(var, 64, "NewsSkill=%d\n",PlayerInfo[playerid][pNewsSkill]);fwrite(hFile, var);
				format(var, 64, "DrugsSkill=%d\n",PlayerInfo[playerid][pDrugsSkill]);fwrite(hFile, var);
				format(var, 64, "CookSkill=%d\n",PlayerInfo[playerid][pCookSkill]);fwrite(hFile, var);
				format(var, 64, "FishSkill=%d\n",PlayerInfo[playerid][pFishSkill]);fwrite(hFile, var);
				format(var, 64, "pSHealth=%.1f\n",PlayerInfo[playerid][pSHealth]);fwrite(hFile, var);
	            GetPlayerHealth(playerid,PlayerInfo[playerid][pHealth]);
				format(var, 64, "pHealth=%.1f\n",PlayerInfo[playerid][pHealth]);fwrite(hFile, var);
				format(var, 64, "Int=%d\n",PlayerInfo[playerid][pInt]);fwrite(hFile, var);
				format(var, 64, "Local=%d\n",PlayerInfo[playerid][pLocal]);fwrite(hFile, var);
				format(var, 64, "Team=%d\n",PlayerInfo[playerid][pTeam]);fwrite(hFile, var);
				format(var, 64, "Model=%d\n",PlayerInfo[playerid][pModel]);fwrite(hFile, var);
				format(var, 64, "PhoneNr=%d\n",PlayerInfo[playerid][pPnumber]);fwrite(hFile, var);
				format(var, 64, "Car=%d\n",PlayerInfo[playerid][pPcarkey]);fwrite(hFile, var);
				format(var, 64, "Car2=%d\n",PlayerInfo[playerid][pPcarkey2]);fwrite(hFile, var);
				format(var, 64, "Car3=%d\n",PlayerInfo[playerid][pPcarkey3]);fwrite(hFile, var);
				format(var, 64, "House=%d\n",PlayerInfo[playerid][pPhousekey]);fwrite(hFile, var);
				format(var, 64, "Bizz=%d\n",PlayerInfo[playerid][pPbiskey]);fwrite(hFile, var);
				if ((PlayerInfo[playerid][pPos_x]==0.0 && PlayerInfo[playerid][pPos_y]==0.0 && PlayerInfo[playerid][pPos_z]==0.0))
				{
				    PlayerInfo[playerid][pPos_x] = 1684.9;
					PlayerInfo[playerid][pPos_y] = -2244.5;
					PlayerInfo[playerid][pPos_z] = 13.5;
				}
				if(Spectate[playerid] != 255)
				{
					PlayerInfo[playerid][pPos_x] = Unspec[playerid][sPx];
					PlayerInfo[playerid][pPos_y] = Unspec[playerid][sPy];
					PlayerInfo[playerid][pPos_z] = Unspec[playerid][sPz];
					PlayerInfo[playerid][pInt] = Unspec[playerid][sPint];
					PlayerInfo[playerid][pLocal] = Unspec[playerid][sLocal];
				}
				format(var, 64, "Pos_x=%.1f\n",PlayerInfo[playerid][pPos_x]);fwrite(hFile, var);
				format(var, 64, "Pos_y=%.1f\n",PlayerInfo[playerid][pPos_y]);fwrite(hFile, var);
				format(var, 64, "Pos_z=%.1f\n",PlayerInfo[playerid][pPos_z]);fwrite(hFile, var);
				format(var, 64, "CarLic=%d\n",PlayerInfo[playerid][pCarLic]);fwrite(hFile, var);
                format(var, 64, "FlyLic=%d\n",PlayerInfo[playerid][pFlyLic]);fwrite(hFile, var);
                format(var, 64, "FlyLicf=%d\n",PlayerInfo[playerid][pFlyLicf]);fwrite(hFile, var);
                format(var, 64, "FlyLict=%d\n",PlayerInfo[playerid][pFlyLict]);fwrite(hFile, var);
				format(var, 64, "BoatLic=%d\n",PlayerInfo[playerid][pBoatLic]);fwrite(hFile, var);
				format(var, 64, "BoatLicf=%d\n",PlayerInfo[playerid][pBoatLicf]);fwrite(hFile, var);
				format(var, 64, "BoatLict=%d\n",PlayerInfo[playerid][pBoatLict]);fwrite(hFile, var);
				format(var, 64, "FishLic=%d\n",PlayerInfo[playerid][pFishLic]);fwrite(hFile, var);
				format(var, 64, "FishLicf=%d\n",PlayerInfo[playerid][pFishLicf]);fwrite(hFile, var);
				format(var, 64, "FishLict=%d\n",PlayerInfo[playerid][pFishLict]);fwrite(hFile, var);
				format(var, 64, "LourdLic=%d\n",PlayerInfo[playerid][pLourdLic]);fwrite(hFile, var);
				format(var, 64, "LourdLicf=%d\n",PlayerInfo[playerid][pLourdLicf]);fwrite(hFile, var);
				format(var, 64, "LourdLict=%d\n",PlayerInfo[playerid][pLourdLict]);fwrite(hFile, var);
				format(var, 64, "MotoLic=%d\n",PlayerInfo[playerid][pMotoLic]);fwrite(hFile, var);
				format(var, 64, "MotoLicf=%d\n",PlayerInfo[playerid][pMotoLicf]);fwrite(hFile, var);
				format(var, 64, "MotoLict=%d\n",PlayerInfo[playerid][pMotoLict]);fwrite(hFile, var);
				format(var, 64, "GunLic=%d\n",PlayerInfo[playerid][pGunLic]);fwrite(hFile, var);
				format(var, 64, "GunLicf=%d\n",PlayerInfo[playerid][pGunLicf]);fwrite(hFile, var);
				format(var, 64, "GunLict=%d\n",PlayerInfo[playerid][pGunLict]);fwrite(hFile, var);
				format(var, 64, "Gun1=%d\n",PlayerInfo[playerid][pGun1]);fwrite(hFile, var);
				format(var, 64, "Gun2=%d\n",PlayerInfo[playerid][pGun2]);fwrite(hFile, var);
				format(var, 64, "Gun3=%d\n",PlayerInfo[playerid][pGun3]);fwrite(hFile, var);
				format(var, 64, "Gun4=%d\n",PlayerInfo[playerid][pGun4]);fwrite(hFile, var);
				format(var, 64, "skinf=%d\n",PlayerInfo[playerid][pskinf]);fwrite(hFile, var);
				format(var, 64, "skinfm=%d\n",PlayerInfo[playerid][pskinfm]);fwrite(hFile, var);
				format(var, 64, "Ammo1=%d\n",PlayerInfo[playerid][pAmmo1]);fwrite(hFile, var);
				format(var, 64, "Ammo2=%d\n",PlayerInfo[playerid][pAmmo2]);fwrite(hFile, var);
				format(var, 64, "Ammo3=%d\n",PlayerInfo[playerid][pAmmo3]);fwrite(hFile, var);
				format(var, 64, "Ammo4=%d\n",PlayerInfo[playerid][pAmmo4]);fwrite(hFile, var);
				format(var, 64, "CarTime=%d\n",PlayerInfo[playerid][pCarTime]);fwrite(hFile, var);
				format(var, 64, "PayDay=%d\n",PlayerInfo[playerid][pPayDay]);fwrite(hFile, var);
				format(var, 64, "PayDayHad=%d\n",PlayerInfo[playerid][pPayDayHad]);fwrite(hFile, var);
				format(var, 64, "Watch=%d\n",PlayerInfo[playerid][pWatch]);fwrite(hFile, var);
				format(var, 64, "GPS=%d\n",PlayerInfo[playerid][pGPS]);fwrite(hFile, var);
				format(var, 64, "Tante=%d\n",PlayerInfo[playerid][pTante]);fwrite(hFile, var);
				format(var, 64, "Decodeur=%d\n",PlayerInfo[playerid][pDecodeur]);fwrite(hFile, var);
				format(var, 64, "Crashed=%d\n",PlayerInfo[playerid][pCrashed]);fwrite(hFile, var);
				format(var, 64, "Wins=%d\n",PlayerInfo[playerid][pWins]);fwrite(hFile, var);
				format(var, 64, "Loses=%d\n",PlayerInfo[playerid][pLoses]);fwrite(hFile, var);
				format(var, 64, "AlcoholPerk=%d\n",PlayerInfo[playerid][pAlcoholPerk]);fwrite(hFile, var);
				format(var, 64, "DrugPerk=%d\n",PlayerInfo[playerid][pDrugPerk]);fwrite(hFile, var);
				format(var, 64, "MiserPerk=%d\n",PlayerInfo[playerid][pMiserPerk]);fwrite(hFile, var);
				format(var, 64, "PainPerk=%d\n",PlayerInfo[playerid][pPainPerk]);fwrite(hFile, var);
				format(var, 64, "TraderPerk=%d\n",PlayerInfo[playerid][pTraderPerk]);fwrite(hFile, var);
				format(var, 64, "Tutorial=%d\n",PlayerInfo[playerid][pTut]);fwrite(hFile, var);
				format(var, 64, "Robbank=%d\n",PlayerInfo[playerid][probbank]);fwrite(hFile, var);
				//format(var, 64, "Dormir=%d\n",PlayerInfo[playerid][pDormir]);fwrite(hFile, var);
				format(var, 64, "Hotel=%d\n",PlayerInfo[playerid][pHotel]);fwrite(hFile, var);
				format(var, 64, "fpermis=%d\n",PlayerInfo[playerid][pfpermis]);fwrite(hFile, var);
				format(var, 64, "PointPermis=%d\n",PlayerInfo[playerid][pPointPermis]);fwrite(hFile, var);
				format(var, 64, "Mission=%d\n",PlayerInfo[playerid][pMissionNr]);fwrite(hFile, var);
				format(var, 64, "Warnings=%d\n",PlayerInfo[playerid][pWarnings]);fwrite(hFile, var);
				format(var, 64, "VirWorld=%d\n",PlayerInfo[playerid][pVirWorld]);fwrite(hFile, var);
				format(var, 64, "Fuel=%d\n",PlayerInfo[playerid][pFuel]);fwrite(hFile, var);
				format(var, 64, "Married=%d\n",PlayerInfo[playerid][pMarried]);fwrite(hFile, var);
				format(var, 64, "MarriedTo=%s\n",PlayerInfo[playerid][pMarriedTo]);fwrite(hFile, var);
				format(var, 64, "FishTool=%d\n",PlayerInfo[playerid][pFishTool]);fwrite(hFile, var);
    			format(var, 64, "Note1=%s\n",PlayerInfo[playerid][pNote1]);fwrite(hFile, var);
				format(var, 64, "Note1s=%d\n",PlayerInfo[playerid][pNote1s]);fwrite(hFile, var);
				format(var, 64, "Note2=%s\n",PlayerInfo[playerid][pNote2]);fwrite(hFile, var);
				format(var, 64, "Note2s=%d\n",PlayerInfo[playerid][pNote2s]);fwrite(hFile, var);
				format(var, 64, "Note3=%s\n",PlayerInfo[playerid][pNote3]);fwrite(hFile, var);
				format(var, 64, "Note3s=%d\n",PlayerInfo[playerid][pNote3s]);fwrite(hFile, var);
				format(var, 64, "Note4=%s\n",PlayerInfo[playerid][pNote4]);fwrite(hFile, var);
				format(var, 64, "Note4s=%d\n",PlayerInfo[playerid][pNote4s]);fwrite(hFile, var);
				format(var, 64, "Note5=%s\n",PlayerInfo[playerid][pNote5]);fwrite(hFile, var);
				format(var, 64, "Note5s=%d\n",PlayerInfo[playerid][pNote5s]);fwrite(hFile, var);
				format(var, 64, "InvWeapon=%d\n",PlayerInfo[playerid][pInvWeapon]);fwrite(hFile, var);
				format(var, 64, "InvAmmo=%d\n",PlayerInfo[playerid][pInvAmmo]);fwrite(hFile, var);
				format(var, 64, "Lighter=%d\n",PlayerInfo[playerid][pLighter]);fwrite(hFile, var);
				format(var, 64, "Cigarettes=%d\n",PlayerInfo[playerid][pCigarettes]);fwrite(hFile, var);
				format(var, 64, "Mask=%d\n",PlayerInfo[playerid][pMask]);fwrite(hFile, var);
				format(var, 32, "WT=%d\n",PlayerInfo[playerid][pWT]);fwrite(hFile, var);
				format(var, 32, "WTc=%d\n",PlayerInfo[playerid][pWTc]);fwrite(hFile, var);
				format(var, 64, "Lang1=%d\n",PlayerInfo[playerid][pLang1]);fwrite(hFile, var);
				format(var, 64, "Lang2=%d\n",PlayerInfo[playerid][pLang2]);fwrite(hFile, var);
				format(var, 64, "Work=%d\n",PlayerInfo[playerid][pWork]);fwrite(hFile, var);
				format(var, 64, "CanRobTime=%d\n",PlayerInfo[playerid][pRobTime]);fwrite(hFile, var);
				format(var, 64, "Locked=%d\n",PlayerInfo[playerid][pLocked]);fwrite(hFile, var);
				fclose(hFile);
				//SendClientMessage(playerid, COLOR_YELLOW, "Compte enregistré, vous pouvez vous connecté (/ident [motdepasse]).");
				new loginstring[256];
				new loginname[64];
				GetPlayerName(playerid,loginname,sizeof(loginname));
				format(loginstring,sizeof(loginstring),"Bienvenue %s.\n\nVous pouvez maintenant vous connecter en écrivant votre mot de passe ci-dessous :",loginname);
				ShowPlayerDialog(playerid,12346,DIALOG_STYLE_INPUT,"Conexion",loginstring,"Valider","Quitter");
			}
	}
	return 1;
}

public OnPlayerUpdate(playerid)
{
    if(IsPlayerInAnyVehicle(playerid))
    {
        new Float:health = 0.0;
        new vehicleid = GetPlayerVehicleID(playerid);
        new Float:Speed = GetPlayerSpeed(playerid);
        GetVehicleHealth(vehicleid,health);
        if(LastSpeed[playerid] - Speed >= 40 && LastHealth[playerid] - health >= 150)
        {
            if(ceinture[playerid] == 1)
            {
           		SetPlayerDrunkLevel(playerid, 50000);
           		SetTimerEx("StopCameraEffect", 10000, 0, "i", playerid);
			}
		   	else
			{
			    new Float:x,Float:y,Float:z;
	            GetPlayerPos(playerid,x,y,z);
	            SetPlayerPos(playerid,x,y,z + 5);
	            GetVehicleVelocity(vehicleid,x,y,z);
	            SetPlayerVelocity(playerid,x *2,y*2,z + 3);
           		SetPlayerDrunkLevel(playerid, 50000);
           		SetTimerEx("StopCameraEffect", 25000, 0, "i", playerid);
		 	}
        }
        LastHealth[playerid] = health;
        LastSpeed[playerid] = Speed;
	}
	if(IsPlayerConnected(playerid))
	{
		if(gPlayerLogged[playerid])
		{
			new string3[64];
			new playername3[MAX_PLAYER_NAME];
			GetPlayerName(playerid, playername3, sizeof(playername3));
			format(string3, sizeof(string3), "users/%s.ini", playername3);
			new File: hFile = fopen(string3, io_write);
			if (hFile)
			{
				new var[64];
				format(var, 64, "Key=%s\n", PlayerInfo[playerid][pKey]);fwrite(hFile, var);
				PlayerInfo[playerid][pCash] = GetPlayerMoney(playerid);
				format(var, 64, "Level=%d\n",PlayerInfo[playerid][pLevel]);fwrite(hFile, var);
				format(var, 64, "AdminLevel=%d\n",PlayerInfo[playerid][pAdmin]);fwrite(hFile, var);
				format(var, 64, "DonateRank=%d\n",PlayerInfo[playerid][pDonateRank]);fwrite(hFile, var);
				format(var, 64, "UpgradePoints=%d\n",PlayerInfo[playerid][gPupgrade]);fwrite(hFile, var);
				format(var, 64, "ConnectedTime=%d\n",PlayerInfo[playerid][pConnectTime]);fwrite(hFile, var);
				format(var, 64, "Registered=%d\n",PlayerInfo[playerid][pReg]);fwrite(hFile, var);
				format(var, 64, "Sex=%d\n",PlayerInfo[playerid][pSex]);fwrite(hFile, var);
				format(var, 64, "Age=%d\n",PlayerInfo[playerid][pAge]);fwrite(hFile, var);
				format(var, 64, "Origin=%d\n",PlayerInfo[playerid][pOrigin]);fwrite(hFile, var);
				format(var, 64, "CK=%d\n",PlayerInfo[playerid][pCK]);fwrite(hFile, var);
				format(var, 64, "Muted=%d\n",PlayerInfo[playerid][pMuted]);fwrite(hFile, var);
				format(var, 64, "MutedOOC=%d\n",PlayerInfo[playerid][pMutedOOC]);fwrite(hFile, var);
				format(var, 64, "Respect=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
				format(var, 64, "Money=%d\n",PlayerInfo[playerid][pCash]);fwrite(hFile, var);
				format(var, 64, "Bank=%d\n",PlayerInfo[playerid][pAccount]);fwrite(hFile, var);
				format(var, 64, "Crimes=%d\n",PlayerInfo[playerid][pCrimes]);fwrite(hFile, var);
				format(var, 64, "Kills=%d\n",PlayerInfo[playerid][pKills]);fwrite(hFile, var);
				format(var, 64, "Deaths=%d\n",PlayerInfo[playerid][pDeaths]);fwrite(hFile, var);
				format(var, 64, "Arrested=%d\n",PlayerInfo[playerid][pArrested]);fwrite(hFile, var);
				format(var, 64, "WantedDeaths=%d\n",PlayerInfo[playerid][pWantedDeaths]);fwrite(hFile, var);
				format(var, 64, "Phonebook=%d\n",PlayerInfo[playerid][pPhoneBook]);fwrite(hFile, var);
				format(var, 64, "LottoNr=%d\n",PlayerInfo[playerid][pLottoNr]);fwrite(hFile, var);
				format(var, 64, "Fishes=%d\n",PlayerInfo[playerid][pFishes]);fwrite(hFile, var);
				format(var, 64, "BiggestFish=%d\n",PlayerInfo[playerid][pBiggestFish]);fwrite(hFile, var);
				format(var, 64, "Job=%d\n",PlayerInfo[playerid][pJob]);fwrite(hFile, var);
				format(var, 64, "Paycheck=%d\n",PlayerInfo[playerid][pPayCheck]);fwrite(hFile, var);
				format(var, 64, "HeadValue=%d\n",PlayerInfo[playerid][pHeadValue]);fwrite(hFile, var);
				format(var, 64, "Jailed=%d\n",PlayerInfo[playerid][pJailed]);fwrite(hFile, var);
				format(var, 64, "JailTime=%d\n",PlayerInfo[playerid][pJailTime]);fwrite(hFile, var);
				format(var, 64, "Materials=%d\n",PlayerInfo[playerid][pMats]);fwrite(hFile, var);
				format(var, 64, "Drugs=%d\n",PlayerInfo[playerid][pDrugs]);fwrite(hFile, var);
				format(var, 64, "Leader=%d\n",PlayerInfo[playerid][pLeader]);fwrite(hFile, var);
				format(var, 64, "Member=%d\n",PlayerInfo[playerid][pMember]);fwrite(hFile, var);
				format(var, 64, "FMember=%d\n",PlayerInfo[playerid][pFMember]);fwrite(hFile, var);
				format(var, 64, "Rank=%d\n",PlayerInfo[playerid][pRank]);fwrite(hFile, var);
				format(var, 64, "Char=%d\n",PlayerInfo[playerid][pChar]);fwrite(hFile, var);
				format(var, 64, "ContractTime=%d\n",PlayerInfo[playerid][pContractTime]);fwrite(hFile, var);
				format(var, 64, "DetSkill=%d\n",PlayerInfo[playerid][pDetSkill]);fwrite(hFile, var);
				format(var, 64, "SexSkill=%d\n",PlayerInfo[playerid][pSexSkill]);fwrite(hFile, var);
				format(var, 64, "BoxSkill=%d\n",PlayerInfo[playerid][pBoxSkill]);fwrite(hFile, var);
				format(var, 64, "LawSkill=%d\n",PlayerInfo[playerid][pLawSkill]);fwrite(hFile, var);
				format(var, 64, "MechSkill=%d\n",PlayerInfo[playerid][pMechSkill]);fwrite(hFile, var);
				format(var, 64, "JackSkill=%d\n",PlayerInfo[playerid][pJackSkill]);fwrite(hFile, var);
				format(var, 64, "CarSkill=%d\n",PlayerInfo[playerid][pCarSkill]);fwrite(hFile, var);
				format(var, 64, "NewsSkill=%d\n",PlayerInfo[playerid][pNewsSkill]);fwrite(hFile, var);
				format(var, 64, "DrugsSkill=%d\n",PlayerInfo[playerid][pDrugsSkill]);fwrite(hFile, var);
				format(var, 64, "CookSkill=%d\n",PlayerInfo[playerid][pCookSkill]);fwrite(hFile, var);
				format(var, 64, "FishSkill=%d\n",PlayerInfo[playerid][pFishSkill]);fwrite(hFile, var);
				format(var, 64, "pSHealth=%.1f\n",PlayerInfo[playerid][pSHealth]);fwrite(hFile, var);
	            GetPlayerHealth(playerid,PlayerInfo[playerid][pHealth]);
				format(var, 64, "pHealth=%.1f\n",PlayerInfo[playerid][pHealth]);fwrite(hFile, var);
				format(var, 64, "Int=%d\n",PlayerInfo[playerid][pInt]);fwrite(hFile, var);
				format(var, 64, "Local=%d\n",PlayerInfo[playerid][pLocal]);fwrite(hFile, var);
				format(var, 64, "Team=%d\n",PlayerInfo[playerid][pTeam]);fwrite(hFile, var);
				format(var, 64, "Model=%d\n",PlayerInfo[playerid][pModel]);fwrite(hFile, var);
				format(var, 64, "PhoneNr=%d\n",PlayerInfo[playerid][pPnumber]);fwrite(hFile, var);
				format(var, 64, "Car=%d\n",PlayerInfo[playerid][pPcarkey]);fwrite(hFile, var);
				format(var, 64, "Car2=%d\n",PlayerInfo[playerid][pPcarkey2]);fwrite(hFile, var);
				format(var, 64, "Car3=%d\n",PlayerInfo[playerid][pPcarkey3]);fwrite(hFile, var);
				format(var, 64, "House=%d\n",PlayerInfo[playerid][pPhousekey]);fwrite(hFile, var);
				format(var, 64, "Bizz=%d\n",PlayerInfo[playerid][pPbiskey]);fwrite(hFile, var);
				if ((PlayerInfo[playerid][pPos_x]==0.0 && PlayerInfo[playerid][pPos_y]==0.0 && PlayerInfo[playerid][pPos_z]==0.0))
				{
   	                PlayerInfo[playerid][pPos_x] = 1684.9;
					PlayerInfo[playerid][pPos_y] = -2244.5;
					PlayerInfo[playerid][pPos_z] = 13.5;
				}
				if(Spectate[playerid] != 255)
				{
					PlayerInfo[playerid][pPos_x] = Unspec[playerid][sPx];
					PlayerInfo[playerid][pPos_y] = Unspec[playerid][sPy];
					PlayerInfo[playerid][pPos_z] = Unspec[playerid][sPz];
					PlayerInfo[playerid][pInt] = Unspec[playerid][sPint];
					PlayerInfo[playerid][pLocal] = Unspec[playerid][sLocal];
				}
				new Float:x, Float:y, Float:z;
     			GetPlayerPos(playerid,x,y,z);
				PlayerInfo[playerid][pPos_x] = x;
				PlayerInfo[playerid][pPos_y] = y;
				PlayerInfo[playerid][pPos_z] = z;
				format(var, 64, "Pos_x=%.1f\n",PlayerInfo[playerid][pPos_x]);fwrite(hFile, var);
				format(var, 64, "Pos_y=%.1f\n",PlayerInfo[playerid][pPos_y]);fwrite(hFile, var);
				format(var, 64, "Pos_z=%.1f\n",PlayerInfo[playerid][pPos_z]);fwrite(hFile, var);
				format(var, 64, "CarLic=%d\n",PlayerInfo[playerid][pCarLic]);fwrite(hFile, var);
                format(var, 64, "FlyLic=%d\n",PlayerInfo[playerid][pFlyLic]);fwrite(hFile, var);
                format(var, 64, "FlyLicf=%d\n",PlayerInfo[playerid][pFlyLicf]);fwrite(hFile, var);
                format(var, 64, "FlyLict=%d\n",PlayerInfo[playerid][pFlyLict]);fwrite(hFile, var);
				format(var, 64, "BoatLic=%d\n",PlayerInfo[playerid][pBoatLic]);fwrite(hFile, var);
				format(var, 64, "BoatLicf=%d\n",PlayerInfo[playerid][pBoatLicf]);fwrite(hFile, var);
				format(var, 64, "BoatLict=%d\n",PlayerInfo[playerid][pBoatLict]);fwrite(hFile, var);
				format(var, 64, "FishLic=%d\n",PlayerInfo[playerid][pFishLic]);fwrite(hFile, var);
				format(var, 64, "FishLicf=%d\n",PlayerInfo[playerid][pFishLicf]);fwrite(hFile, var);
				format(var, 64, "FishLict=%d\n",PlayerInfo[playerid][pFishLict]);fwrite(hFile, var);
				format(var, 64, "LourdLic=%d\n",PlayerInfo[playerid][pLourdLic]);fwrite(hFile, var);
				format(var, 64, "LourdLicf=%d\n",PlayerInfo[playerid][pLourdLicf]);fwrite(hFile, var);
				format(var, 64, "LourdLict=%d\n",PlayerInfo[playerid][pLourdLict]);fwrite(hFile, var);
				format(var, 64, "MotoLic=%d\n",PlayerInfo[playerid][pMotoLic]);fwrite(hFile, var);
				format(var, 64, "MotoLicf=%d\n",PlayerInfo[playerid][pMotoLicf]);fwrite(hFile, var);
				format(var, 64, "MotoLict=%d\n",PlayerInfo[playerid][pMotoLict]);fwrite(hFile, var);
				format(var, 64, "GunLic=%d\n",PlayerInfo[playerid][pGunLic]);fwrite(hFile, var);
				format(var, 64, "GunLicf=%d\n",PlayerInfo[playerid][pGunLicf]);fwrite(hFile, var);
				format(var, 64, "GunLict=%d\n",PlayerInfo[playerid][pGunLict]);fwrite(hFile, var);
				format(var, 64, "Gun1=%d\n",PlayerInfo[playerid][pGun1]);fwrite(hFile, var);
				format(var, 64, "Gun2=%d\n",PlayerInfo[playerid][pGun2]);fwrite(hFile, var);
				format(var, 64, "Gun3=%d\n",PlayerInfo[playerid][pGun3]);fwrite(hFile, var);
				format(var, 64, "Gun4=%d\n",PlayerInfo[playerid][pGun4]);fwrite(hFile, var);
				format(var, 64, "skinf=%d\n",PlayerInfo[playerid][pskinf]);fwrite(hFile, var);
				format(var, 64, "skinfm=%d\n",PlayerInfo[playerid][pskinfm]);fwrite(hFile, var);
				format(var, 64, "Ammo1=%d\n",PlayerInfo[playerid][pAmmo1]);fwrite(hFile, var);
				format(var, 64, "Ammo2=%d\n",PlayerInfo[playerid][pAmmo2]);fwrite(hFile, var);
				format(var, 64, "Ammo3=%d\n",PlayerInfo[playerid][pAmmo3]);fwrite(hFile, var);
				format(var, 64, "Ammo4=%d\n",PlayerInfo[playerid][pAmmo4]);fwrite(hFile, var);
				format(var, 64, "CarTime=%d\n",PlayerInfo[playerid][pCarTime]);fwrite(hFile, var);
				format(var, 64, "PayDay=%d\n",PlayerInfo[playerid][pPayDay]);fwrite(hFile, var);
				format(var, 64, "PayDayHad=%d\n",PlayerInfo[playerid][pPayDayHad]);fwrite(hFile, var);
				format(var, 64, "Watch=%d\n",PlayerInfo[playerid][pWatch]);fwrite(hFile, var);
				format(var, 64, "GPS=%d\n",PlayerInfo[playerid][pGPS]);fwrite(hFile, var);
				format(var, 64, "Tante=%d\n",PlayerInfo[playerid][pTante]);fwrite(hFile, var);
				format(var, 64, "Decodeur=%d\n",PlayerInfo[playerid][pDecodeur]);fwrite(hFile, var);
				format(var, 64, "Crashed=%d\n",PlayerInfo[playerid][pCrashed]);fwrite(hFile, var);
				format(var, 64, "Wins=%d\n",PlayerInfo[playerid][pWins]);fwrite(hFile, var);
				format(var, 64, "Loses=%d\n",PlayerInfo[playerid][pLoses]);fwrite(hFile, var);
				format(var, 64, "AlcoholPerk=%d\n",PlayerInfo[playerid][pAlcoholPerk]);fwrite(hFile, var);
				format(var, 64, "DrugPerk=%d\n",PlayerInfo[playerid][pDrugPerk]);fwrite(hFile, var);
				format(var, 64, "MiserPerk=%d\n",PlayerInfo[playerid][pMiserPerk]);fwrite(hFile, var);
				format(var, 64, "PainPerk=%d\n",PlayerInfo[playerid][pPainPerk]);fwrite(hFile, var);
				format(var, 64, "TraderPerk=%d\n",PlayerInfo[playerid][pTraderPerk]);fwrite(hFile, var);
				format(var, 64, "Tutorial=%d\n",PlayerInfo[playerid][pTut]);fwrite(hFile, var);
				format(var, 64, "Robbank=%d\n",PlayerInfo[playerid][probbank]);fwrite(hFile, var);
				//format(var, 64, "Dormir=%d\n",PlayerInfo[playerid][pDormir]);fwrite(hFile, var);
				format(var, 64, "Hotel=%d\n",PlayerInfo[playerid][pHotel]);fwrite(hFile, var);
				format(var, 64, "fpermis=%d\n",PlayerInfo[playerid][pfpermis]);fwrite(hFile, var);
				format(var, 64, "PointPermis=%d\n",PlayerInfo[playerid][pPointPermis]);fwrite(hFile, var);
				format(var, 64, "Mission=%d\n",PlayerInfo[playerid][pMissionNr]);fwrite(hFile, var);
				format(var, 64, "Warnings=%d\n",PlayerInfo[playerid][pWarnings]);fwrite(hFile, var);
				format(var, 64, "VirWorld=%d\n",PlayerInfo[playerid][pVirWorld]);fwrite(hFile, var);
				if(PlayerInfo[playerid][pDonateRank] < 1) { PlayerInfo[playerid][pFuel] = 0; }
				format(var, 64, "Fuel=%d\n",PlayerInfo[playerid][pFuel]);fwrite(hFile, var);
				format(var, 64, "Married=%d\n",PlayerInfo[playerid][pMarried]);fwrite(hFile, var);
				format(var, 64, "MarriedTo=%s\n",PlayerInfo[playerid][pMarriedTo]);fwrite(hFile, var);
				format(var, 64, "FishTool=%d\n",PlayerInfo[playerid][pFishTool]);fwrite(hFile, var);
    			format(var, 64, "Note1=%s\n",PlayerInfo[playerid][pNote1]);fwrite(hFile, var);
				format(var, 64, "Note1s=%d\n",PlayerInfo[playerid][pNote1s]);fwrite(hFile, var);
				format(var, 64, "Note2=%s\n",PlayerInfo[playerid][pNote2]);fwrite(hFile, var);
				format(var, 64, "Note2s=%d\n",PlayerInfo[playerid][pNote2s]);fwrite(hFile, var);
				format(var, 64, "Note3=%s\n",PlayerInfo[playerid][pNote3]);fwrite(hFile, var);
				format(var, 64, "Note3s=%d\n",PlayerInfo[playerid][pNote3s]);fwrite(hFile, var);
				format(var, 64, "Note4=%s\n",PlayerInfo[playerid][pNote4]);fwrite(hFile, var);
				format(var, 64, "Note4s=%d\n",PlayerInfo[playerid][pNote4s]);fwrite(hFile, var);
				format(var, 64, "Note5=%s\n",PlayerInfo[playerid][pNote5]);fwrite(hFile, var);
				format(var, 64, "Note5s=%d\n",PlayerInfo[playerid][pNote5s]);fwrite(hFile, var);
				format(var, 64, "InvWeapon=%d\n",PlayerInfo[playerid][pInvWeapon]);fwrite(hFile, var);
				format(var, 64, "InvAmmo=%d\n",PlayerInfo[playerid][pInvAmmo]);fwrite(hFile, var);
				format(var, 64, "Lighter=%d\n",PlayerInfo[playerid][pLighter]);fwrite(hFile, var);
				format(var, 64, "Cigarettes=%d\n",PlayerInfo[playerid][pCigarettes]);fwrite(hFile, var);
				format(var, 64, "Mask=%d\n",PlayerInfo[playerid][pMask]);fwrite(hFile, var);
				format(var, 32, "WT=%d\n",PlayerInfo[playerid][pWT]);fwrite(hFile, var);
				format(var, 32, "WTc=%d\n",PlayerInfo[playerid][pWTc]);fwrite(hFile, var);
				format(var, 64, "Lang1=%d\n",PlayerInfo[playerid][pLang1]);fwrite(hFile, var);
				format(var, 64, "Lang2=%d\n",PlayerInfo[playerid][pLang2]);fwrite(hFile, var);
				format(var, 64, "Work=%d\n",PlayerInfo[playerid][pWork]);fwrite(hFile, var);
				format(var, 64, "CanRobTime=%d\n",PlayerInfo[playerid][pRobTime]);fwrite(hFile, var);
				format(var, 64, "Locked=%d\n",PlayerInfo[playerid][pLocked]);fwrite(hFile, var);
				fclose(hFile);
			}
		}
	}
	return 1;
}

public OnPlayerLogin(playerid,password[])
{
	new tmp2[256];
    new string2[64];
	new playername2[MAX_PLAYER_NAME];
	new playernamesplit[3][MAX_PLAYER_NAME];
    GetPlayerName(playerid, playername2, sizeof(playername2));
	split(playername2, playernamesplit, '_');
	format(string2, sizeof(string2), "users/%s.ini", playername2);
	new File: UserFile = fopen(string2, io_read);
	if ( UserFile )
	{
	    new PassData[256];
	    new keytmp[256], valtmp[256];
	    fread( UserFile , PassData , sizeof( PassData ) );
	    keytmp = ini_GetKey( PassData );
	    if( strcmp( keytmp , "Key" , true ) == 0 )
		{
			valtmp = ini_GetValue( PassData );
			strmid(PlayerInfo[playerid][pKey], valtmp, 0, strlen(valtmp)-1, 255);
		}
		if(strcmp(PlayerInfo[playerid][pKey],password, true ) == 0 )
		{
			    new key[ 256 ] , val[ 256 ];
			    new Data[ 256 ];
			    while ( fread( UserFile , Data , sizeof( Data ) ) )
				{
					key = ini_GetKey( Data );
					if( strcmp( key , "Level" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pLevel] = strval( val ); }
			    	if( strcmp( key , "AdminLevel" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pAdmin] = strval( val ); }
			        if( strcmp( key , "DonateRank" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pDonateRank] = strval( val ); }
			        if( strcmp( key , "UpgradePoints" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][gPupgrade] = strval( val ); }
			        if( strcmp( key , "ConnectedTime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pConnectTime] = strval( val ); }
			        if( strcmp( key , "Registered" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pReg] = strval( val ); }
			        if( strcmp( key , "Sex" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pSex] = strval( val ); }
			        if( strcmp( key , "Age" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pAge] = strval( val ); }
			        if( strcmp( key , "Origin" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pOrigin] = strval( val ); }
			        if( strcmp( key , "CK" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pCK] = strval( val ); }
			        if( strcmp( key , "Muted" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pMuted] = strval( val ); }
			        if( strcmp( key , "MutedOOC" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pMutedOOC] = strval( val ); }
			        if( strcmp( key , "Respect" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pExp] = strval( val ); }
			        if( strcmp( key , "Money" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pCash] = strval( val ); }
			        if( strcmp( key , "Bank" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pAccount] = strval( val ); }
			        if( strcmp( key , "Crimes" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pCrimes] = strval( val ); }
			        if( strcmp( key , "Kills" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pKills] = strval( val ); }
			        if( strcmp( key , "Deaths" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pDeaths] = strval( val ); }
			        if( strcmp( key , "Arrested" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pArrested] = strval( val ); }
			        if( strcmp( key , "WantedDeaths" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pWantedDeaths] = strval( val ); }
			        if( strcmp( key , "Phonebook" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPhoneBook] = strval( val ); }
			        if( strcmp( key , "LottoNr" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pLottoNr] = strval( val ); }
			        if( strcmp( key , "Fishes" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pFishes] = strval( val ); }
			        if( strcmp( key , "BiggestFish" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pBiggestFish] = strval( val ); }
			        if( strcmp( key , "Job" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pJob] = strval( val ); }
			        if( strcmp( key , "Paycheck" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPayCheck] = strval( val ); }
			        if( strcmp( key , "HeadValue" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pHeadValue] = strval( val ); }
			        if( strcmp( key , "Jailed" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pJailed] = strval( val ); }
			        if( strcmp( key , "JailTime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pJailTime] = strval( val ); }
			        if( strcmp( key , "Materials" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pMats] = strval( val ); }
			        if( strcmp( key , "Materialsf" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pMatsf] = strval( val ); }
			        if( strcmp( key , "Drugs" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pDrugs] = strval( val ); }
			        if( strcmp( key , "Leader" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pLeader] = strval( val ); }
			        if( strcmp( key , "Member" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pMember] = strval( val ); }
			        if( strcmp( key , "FMember" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pFMember] = strval( val ); }
			        if( strcmp( key , "Rank" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pRank] = strval( val ); }
			        if( strcmp( key , "Char" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pChar] = strval( val ); }
			        if( strcmp( key , "ContractTime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pContractTime] = strval( val ); }
			        if( strcmp( key , "DetSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pDetSkill] = strval( val ); }
			        if( strcmp( key , "SexSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pSexSkill] = strval( val ); }
			        if( strcmp( key , "BoxSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pBoxSkill] = strval( val ); }
			        if( strcmp( key , "LawSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pLawSkill] = strval( val ); }
			        if( strcmp( key , "MechSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pMechSkill] = strval( val ); }
			        if( strcmp( key , "JackSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pJackSkill] = strval( val ); }
			        if( strcmp( key , "CarSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pCarSkill] = strval( val ); }
			        if( strcmp( key , "NewsSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pNewsSkill] = strval( val ); }
			        if( strcmp( key , "DrugsSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pDrugsSkill] = strval( val ); }
			        if( strcmp( key , "CookSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pCookSkill] = strval( val ); }
			        if( strcmp( key , "FishSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pFishSkill] = strval( val ); }
			        if( strcmp( key , "pSHealth" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pSHealth] = floatstr( val ); }
			        if( strcmp( key , "pHealth" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pHealth] = floatstr( val ); }
			        if( strcmp( key , "Int" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pInt] = strval( val ); }
			        if( strcmp( key , "Local" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pLocal] = strval( val ); }
			        if( strcmp( key , "Team" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pTeam] = strval( val ); }
			        if( strcmp( key , "Model" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pModel] = strval( val ); }
			        if( strcmp( key , "PhoneNr" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPnumber] = strval( val ); }
			        if( strcmp( key , "Car" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPcarkey] = strval( val ); }
			        if( strcmp( key , "Car2" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPcarkey2] = strval( val ); }
			        if( strcmp( key , "Car3" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPcarkey3] = strval( val ); }
			        if( strcmp( key , "House" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPhousekey] = strval( val ); }
			        if( strcmp( key , "Bizz" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPbiskey] = strval( val ); }
			        if( strcmp( key , "Pos_x" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPos_x] = floatstr( val ); }
			        if( strcmp( key , "Pos_y" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPos_y] = floatstr( val ); }
			        if( strcmp( key , "Pos_z" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPos_z] = floatstr( val ); }
			        if( strcmp( key , "CarLic" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pCarLic] = strval( val ); }
                    if( strcmp( key , "FlyLic" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pFlyLic] = strval( val ); }
                    if( strcmp( key , "FlyLicf" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pFlyLicf] = strval( val ); }
                    if( strcmp( key , "skinf" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pskinf] = strval( val ); }
                    if( strcmp( key , "skinfm" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pskinfm] = strval( val ); }
                    if( strcmp( key , "FlyLict" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pFlyLict] = strval( val ); }
					if( strcmp( key , "BoatLic" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pBoatLic] = strval( val ); }
					if( strcmp( key , "BoatLicf" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pBoatLicf] = strval( val ); }
					if( strcmp( key , "BoatLict" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pBoatLict] = strval( val ); }
			        if( strcmp( key , "FishLic" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pFishLic] = strval( val ); }
			        if( strcmp( key , "FishLict" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pFishLict] = strval( val ); }
					if( strcmp( key , "FishLicf" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pFishLicf] = strval( val ); }
					if( strcmp( key , "LourdLic" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pLourdLic] = strval( val ); }
					if( strcmp( key , "LourdLicf" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pLourdLicf] = strval( val ); }
					if( strcmp( key , "LourdLict" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pLourdLict] = strval( val ); }
			        if( strcmp( key , "MotoLic" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pMotoLic] = strval( val ); }
			        if( strcmp( key , "MotoLict" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pMotoLict] = strval( val ); }
					if( strcmp( key , "MotoLicf" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pMotoLicf] = strval( val ); }
			        if( strcmp( key , "GunLic" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pGunLic] = strval( val ); }
			        if( strcmp( key , "GunLicf" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pGunLicf] = strval( val ); }
			        if( strcmp( key , "GunLict" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pGunLict] = strval( val ); }
			        if( strcmp( key , "Gun1" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pGun1] = strval( val ); }
			        if( strcmp( key , "Gun2" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pGun2] = strval( val ); }
			        if( strcmp( key , "Gun3" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pGun3] = strval( val ); }
			        if( strcmp( key , "Gun4" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pGun4] = strval( val ); }
			        if( strcmp( key , "Ammo1" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pAmmo1] = strval( val ); }
			        if( strcmp( key , "Ammo2" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pAmmo2] = strval( val ); }
			        if( strcmp( key , "Ammo3" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pAmmo3] = strval( val ); }
			        if( strcmp( key , "Ammo4" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pAmmo4] = strval( val ); }
			        if( strcmp( key , "CarTime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pCarTime] = strval( val ); }
			        if( strcmp( key , "PayDay" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPayDay] = strval( val ); }
			        if( strcmp( key , "PayDayHad" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPayDayHad] = strval( val ); }
			        if( strcmp( key , "Watch" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pWatch] = strval( val ); }
			        if( strcmp( key , "GPS" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pGPS] = strval( val ); }
			        if( strcmp( key , "Tante" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pTante] = strval( val ); }
			        if( strcmp( key , "Decodeur" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pDecodeur] = strval( val ); }
			        if( strcmp( key , "Crashed" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pCrashed] = strval( val ); }
			        if( strcmp( key , "Wins" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pWins] = strval( val ); }
			        if( strcmp( key , "Loses" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pLoses] = strval( val ); }
			        if( strcmp( key , "AlcoholPerk" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pAlcoholPerk] = strval( val ); }
			        if( strcmp( key , "DrugPerk" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pDrugPerk] = strval( val ); }
			        if( strcmp( key , "MiserPerk" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pMiserPerk] = strval( val ); }
			        if( strcmp( key , "PainPerk" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPainPerk] = strval( val ); }
			        if( strcmp( key , "TraderPerk" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pTraderPerk] = strval( val ); }
			        if( strcmp( key , "Tutorial" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pTut] = strval( val ); }
			        if( strcmp( key , "Robbank" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][probbank] = strval( val ); }
			        //if( strcmp( key , "Dormir" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pDormir] = strval( val ); }
			        if( strcmp( key , "Hotel" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pHotel] = strval( val ); }
			        if( strcmp( key , "fpermis" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pfpermis] = strval( val ); }
			        if( strcmp( key , "PointPermis" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPointPermis] = strval( val ); }
			        if( strcmp( key , "Mission" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pMissionNr] = strval( val ); }
			        if( strcmp( key , "Warnings" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pWarnings] = strval( val ); }
			        if( strcmp( key , "VirWorld" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pVirWorld] = strval( val ); }
			        if( strcmp( key , "Fuel" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pFuel] = strval( val ); }
			        if( strcmp( key , "Married" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pMarried] = strval( val ); }
			        if( strcmp( key , "MarriedTo" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerInfo[playerid][pMarriedTo], val, 0, strlen(val)-1, 255); }
			        if( strcmp( key , "FishTool" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pFishTool] = strval( val ); }
           			if( strcmp( key , "Note1" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerInfo[playerid][pNote1], val, 0, strlen(val)-1, 255); }
			        if( strcmp( key , "Note1s" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pNote1s] = strval( val ); }
			        if( strcmp( key , "Note2" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerInfo[playerid][pNote2], val, 0, strlen(val)-1, 255); }
			        if( strcmp( key , "Note2s" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pNote2s] = strval( val ); }
			        if( strcmp( key , "Note3" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerInfo[playerid][pNote3], val, 0, strlen(val)-1, 255); }
			        if( strcmp( key , "Note3s" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pNote3s] = strval( val ); }
			        if( strcmp( key , "Note4" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerInfo[playerid][pNote4], val, 0, strlen(val)-1, 255); }
			        if( strcmp( key , "Note4s" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pNote4s] = strval( val ); }
			        if( strcmp( key , "Note5" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerInfo[playerid][pNote5], val, 0, strlen(val)-1, 255); }
			        if( strcmp( key , "Note5s" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pNote5s] = strval( val ); }
			        if( strcmp( key , "InvWeapon" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pInvWeapon] = strval( val ); }
			        if( strcmp( key , "InvAmmo" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pInvAmmo] = strval( val ); }
			        if( strcmp( key , "Lighter" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pLighter] = strval( val ); }
			        if( strcmp( key , "Cigarettes" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pCigarettes] = strval( val ); }
			        if( strcmp( key , "Mask" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pMask] = strval( val ); }
			        if( strcmp( key , "WT" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pWT] = strval( val ); }
			        if( strcmp( key , "WTc" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pWTc] = strval( val ); }
			        if( strcmp( key , "Lang1" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pLang1] = strval( val ); }
			        if( strcmp( key , "Lang2" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pLang2] = strval( val ); }
			        if( strcmp( key , "Work" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pWork] = strval( val ); }
			        if( strcmp( key , "CanRobTime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pRobTime] = strval( val ); }
			        if( strcmp( key , "Locked" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pLocked] = strval( val ); }
                }//end while
                fclose(UserFile);//close the file after everything has been read in the while
		}
		else
		{
			new loginstring[128];
			new loginname[64];
			GetPlayerName(playerid,loginname,sizeof(loginname));
            format(loginstring,sizeof(loginstring),"Mauvais mot de passe.\n\nVeuillez entrer le bon mot de passe ci dessous :",loginname);
			ShowPlayerDialog(playerid,12347,DIALOG_STYLE_INPUT,"Conexion",loginstring,"Valider","Quitter");
	        fclose(UserFile);
	        gPlayerLogTries[playerid] += 1;
	        if(gPlayerLogTries[playerid] == 3) { Kick(playerid); }
	        return 1;
		}
		//PlayerInfo[playerid][pAdjustable] = 0;
		SafeResetPlayerMoney(playerid);
		//ConsumingMoney[playerid] = 1;
		SafeGivePlayerMoney(playerid,PlayerInfo[playerid][pCash]);
		CurrentMoney[playerid] = PlayerInfo[playerid][pCash];
		if(PlayerInfo[playerid][pReg] == 0)
		{
			PlayerInfo[playerid][pLevel] = 1;
			PlayerInfo[playerid][pSHealth] = 0.0;
			PlayerInfo[playerid][pHealth] = 50.0;
			PlayerInfo[playerid][pPos_x] = 1743.1295;
			PlayerInfo[playerid][pPos_y] = -1862.9645;
			PlayerInfo[playerid][pPos_z] = 13.5757;
			PlayerInfo[playerid][pInt] = 0;
			PlayerInfo[playerid][pLocal] = 255;
			PlayerInfo[playerid][pTeam] = 3;
			PlayerInfo[playerid][pModel] = 135;
			new randphone = 1000 + random(9999);//minimum 1000  max 9999 //giving one at the start
			PlayerInfo[playerid][pPnumber] = randphone;
			PlayerInfo[playerid][pPhousekey] = 255;
            PlayerInfo[playerid][pPcarkey] = -1;
         	PlayerInfo[playerid][pPcarkey2] = -1;
        	PlayerInfo[playerid][pPcarkey3] = -1;
			PlayerInfo[playerid][pPbiskey] = 255;
			PlayerInfo[playerid][pAccount] = 0;
			PlayerInfo[playerid][pReg] = 1;
			SafeGivePlayerMoney(playerid, 300);
		}
		if(PlayerInfo[playerid][pLocked] == 1) // Auto-kick
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "Votre Compte est Bloqué/Banni ? Allez sur http://u2c-rp.forum-pro.fr");
		    Kick(playerid);
		}
		if(PlayerInfo[playerid][pLevel] == -999) //autoban
		{
			Ban(playerid);
		}
		else if(PlayerInfo[playerid][pCK] > 0)
		{
		    Kick(playerid);
		}
		ClearChatbox(playerid, 8);
		SendClientMessage(playerid, COLOR_WHITE, "=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=");
		format(string2, sizeof(string2), "Bienvenue sur Une 2eme Chance %s.",playernamesplit[0]);
		SendClientMessage(playerid, COLOR_WHITE,string2);
		format(string2, sizeof(string2), "Version du Script: %s",SCRIPT_VERSION);
		SendClientMessage(playerid, COLOR_WHITE, "Forum : http://u2c-rp.forum-pro.fr");
		SendClientMessage(playerid, COLOR_WHITE, string2);
		if (PlayerInfo[playerid][pAdmin] > 0)
		{
			format(string2, sizeof(string2), "SERVEUR: Vous êtes connecté en tant qu'Admin Niveau : %d.",PlayerInfo[playerid][pAdmin]);
			SendClientMessage(playerid, COLOR_WHITE,string2);
		}
		if (PlayerInfo[playerid][pDonateRank] == 1)
		{
			format(string2, sizeof(string2), "SERVEUR: Vous êtes connecté en tant que Membre de Confiance");
			SendClientMessage(playerid, COLOR_WHITE,string2);
		}
		if (PlayerInfo[playerid][pDonateRank] == 2)
		{
			format(string2, sizeof(string2), "SERVEUR: Vous êtes connecté en tant que Membre V.I.P");
			SendClientMessage(playerid, COLOR_WHITE,string2);
		}
		SendClientMessage(playerid, COLOR_WHITE, "=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=");
		SendClientMessage(playerid, COLOR_WHITE, " ");
		printf("%s has logged in.",playername2);

		// Reset the FirstSpawn variable
		SetTimerEx("UnsetFirstSpawn", 5000, false, "i", playerid);

		// Unset Crash
		SetTimerEx("UnsetCrash", 5000, false, "i", playerid);

		SetSpawnInfo(playerid, PlayerInfo[playerid][pTeam], PlayerInfo[playerid][pModel], PlayerInfo[playerid][pPos_x], PlayerInfo[playerid][pPos_y], PlayerInfo[playerid][pPos_z], 1.0, -1, -1, -1, -1, -1, -1);
		if(gTeam[playerid] == 0)
		{
			gTeam[playerid] = 3;
		}
		else
		{
			gTeam[playerid] = PlayerInfo[playerid][pTeam];
		}
		gPlayerLogged[playerid] = 1;
		SpawnPlayer(playerid);
		if(PlayerInfo[playerid][pCrashed] == 0)
		{
			format(tmp2, sizeof(tmp2), "~w~Bienvenue ~n~~y~   %s", playername2);
		}
		else
		{
	    	format(tmp2, sizeof(tmp2), "~p~Crash...~n~~w~Vous retournez la ou vous avez Crash");
		}
		DateProp(playerid);
		GameTextForPlayer(playerid, tmp2, 5000, 1);
		SendClientMessage(playerid, COLOR_YELLOW, motd);
		if(PlayerInfo[playerid][pFMember] < 255)
		{
		    format(tmp2, sizeof(tmp2), "Message du Jour de la FNO: %s.", FamilyInfo[PlayerInfo[playerid][pFMember]][FamilyMOTD]);
		    SendClientMessage(playerid, COLOR_YELLOW, tmp2);
		}
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
	    	if(IsPlayerConnected(i))
	    	{
	        	if(PlayerInfo[i][pMaskuse] == 1)
	        	{
	            	ShowPlayerNameTagForPlayer(playerid, i, 0);
	        	}
	    	}
		}
	}
	return 1;
}

stock ini_GetKey( line[] )
{
	new keyRes[256];
	keyRes[0] = 0;
    if ( strfind( line , "=" , true ) == -1 ) return keyRes;
    strmid( keyRes , line , 0 , strfind( line , "=" , true ) , sizeof( keyRes) );
    return keyRes;
}

stock ini_GetValue( line[] )
{
	new valRes[256];
	valRes[0]=0;
	if ( strfind( line , "=" , true ) == -1 ) return valRes;
	strmid( valRes , line , strfind( line , "=" , true )+1 , strlen( line ) , sizeof( valRes ) );
	return valRes;
}

public OnPropUpdate()
{
	new idx;
	new File: file2;
	while (idx < sizeof(HouseInfo))
	{
		new coordsstring[256];
		format(coordsstring, sizeof(coordsstring), "%f,%f,%f,%f,%f,%f,%d,%d,%d,%d,%d,%d,%s,%s,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n",
		HouseInfo[idx][hEntrancex],
		HouseInfo[idx][hEntrancey],
		HouseInfo[idx][hEntrancez],
		HouseInfo[idx][hExitx],
		HouseInfo[idx][hExity],
		HouseInfo[idx][hExitz],
		HouseInfo[idx][hHealthx],
		HouseInfo[idx][hHealthy],
		HouseInfo[idx][hHealthz],
		HouseInfo[idx][hArmourx],
		HouseInfo[idx][hArmoury],
		HouseInfo[idx][hArmourz],
		HouseInfo[idx][hOwner],
		HouseInfo[idx][hDiscription],
		HouseInfo[idx][hValue],
		HouseInfo[idx][hHel],
		HouseInfo[idx][hArm],
		HouseInfo[idx][hInt],
		HouseInfo[idx][hLock],
		HouseInfo[idx][hOwned],
		HouseInfo[idx][hRooms],
		HouseInfo[idx][hRent],
		HouseInfo[idx][hRentabil],
		HouseInfo[idx][hTakings],
		HouseInfo[idx][hVec],
		HouseInfo[idx][hVcol1],
		HouseInfo[idx][hVcol2],
		HouseInfo[idx][hDate],
		HouseInfo[idx][hLevel],
		HouseInfo[idx][hWorld]);

		HouseInfo[idx][hWorld] = idx;
		if(idx == 0)
		{
			file2 = fopen("property.cfg", io_write);
		}
		else
		{
			file2 = fopen("property.cfg", io_append);
		}
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	idx = 0;
	while (idx < sizeof(BizzInfo))
	{
		new coordsstring[256];
		format(coordsstring, sizeof(coordsstring), "%d|%s|%s|%s|%f|%f|%f|%f|%f|%f|%d|%d|%d|%d|%d|%d|%d|%d|%d\n",
		BizzInfo[idx][bOwned],
		BizzInfo[idx][bOwner],
		BizzInfo[idx][bMessage],
		BizzInfo[idx][bExtortion],
		BizzInfo[idx][bEntranceX],
		BizzInfo[idx][bEntranceY],
		BizzInfo[idx][bEntranceZ],
		BizzInfo[idx][bExitX],
		BizzInfo[idx][bExitY],
		BizzInfo[idx][bExitZ],
		BizzInfo[idx][bLevelNeeded],
		BizzInfo[idx][bBuyPrice],
		BizzInfo[idx][bEntranceCost],
		BizzInfo[idx][bTill],
		BizzInfo[idx][bLocked],
		BizzInfo[idx][bInterior],
		BizzInfo[idx][bProducts],
		BizzInfo[idx][bMaxProducts],
		BizzInfo[idx][bPriceProd]);
		if(idx == 0)
		{
			file2 = fopen("bizz.cfg", io_write);
		}
		else
		{
			file2 = fopen("bizz.cfg", io_append);
		}
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	idx = 0;
	while (idx < sizeof(SBizzInfo))
	{
		new coordsstring[256];
		format(coordsstring, sizeof(coordsstring), "%d|%s|%s|%s|%f|%f|%f|%d|%d|%d|%d|%d|%d|%d|%d|%d\n",
		SBizzInfo[idx][sbOwned],
		SBizzInfo[idx][sbOwner],
		SBizzInfo[idx][sbMessage],
		SBizzInfo[idx][sbExtortion],
		SBizzInfo[idx][sbEntranceX],
		SBizzInfo[idx][sbEntranceY],
		SBizzInfo[idx][sbEntranceZ],
		SBizzInfo[idx][sbLevelNeeded],
		SBizzInfo[idx][sbBuyPrice],
		SBizzInfo[idx][sbEntranceCost],
		SBizzInfo[idx][sbTill],
		SBizzInfo[idx][sbLocked],
		SBizzInfo[idx][sbInterior],
		SBizzInfo[idx][sbProducts],
		SBizzInfo[idx][sbMaxProducts],
		SBizzInfo[idx][sbPriceProd]);
		if(idx == 0)
		{
			file2 = fopen("sbizz.cfg", io_write);
		}
		else
		{
			file2 = fopen("sbizz.cfg", io_append);
		}
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
    idx = carsonserver;
 	while (idx < sizeof(CarInfo))
	{
		new coordsstring[256];
		format(coordsstring, sizeof(coordsstring), "%d,%f,%f,%f,%f,%d,%d,%s,%s,%d,%s,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n",
		CarInfo[idx][cModel],
		CarInfo[idx][cLocationx],
		CarInfo[idx][cLocationy],
		CarInfo[idx][cLocationz],
		CarInfo[idx][cAngle],
		CarInfo[idx][cColorOne],
		CarInfo[idx][cColorTwo],
		CarInfo[idx][cOwner],
		CarInfo[idx][cDescription],
		CarInfo[idx][cValue],
		CarInfo[idx][cLicense],
		CarInfo[idx][cOwned],
		CarInfo[idx][cLock],
		CarInfo[idx][mod1],
		CarInfo[idx][mod2],
		CarInfo[idx][mod3],
		CarInfo[idx][mod4],
		CarInfo[idx][mod5],
		CarInfo[idx][mod6],
		CarInfo[idx][mod7],
		CarInfo[idx][mod8],
		CarInfo[idx][mod9],
		CarInfo[idx][mod10],
		CarInfo[idx][mod11],
		CarInfo[idx][mod12],
		CarInfo[idx][mod13],
		CarInfo[idx][mod14],
		CarInfo[idx][mod15],
		CarInfo[idx][mod16],
		CarInfo[idx][mod17],
		CarInfo[idx][paintjob]);
		if(idx == carsonserver)
		{
			file2 = fopen("vehinfofuck.cfg", io_write);
		}
		else
		{
			file2 = fopen("vehinfofuck.cfg", io_append);
		}
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	return 1;
}

public BroadCast(color,const string[])
{
	SendClientMessageToAll(color, string);
	return 1;
}

public ABroadCast(color,const string[],level)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if (PlayerInfo[i][pAdmin] >= level)
			{
				SendClientMessage(i, color, string);
				printf("%s", string);
			}
		}
	}
	return 1;
}

public OOCOff(color,const string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(!gOoc[i])
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}

public OOCNews(color,const string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(!gNews[i])
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}

public SendTeamMessage(team, color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(gTeam[i] == team)
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}

public SendRadioMessage(member, color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pMember] == member || PlayerInfo[i][pLeader] == member)
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}

public SendJobMessage(job, color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pJob] == job)
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}

public SendNewFamilyMessage(family, color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pFMember] == family)
		    {
                if(!gFam[i])
                {
					SendClientMessage(i, color, string);
				}
			}
		}
	}
}

public SendFamilyMessage(family, color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pMember] == family || PlayerInfo[i][pLeader] == family)
		    {
                if(!gFam[i])
                {
					SendClientMessage(i, color, string);
				}
			}
		}
	}
}

public SendIRCMessage(channel, color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayersChannel[i] == channel)
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}

public SendTeamBeepMessage(team, color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(gTeam[i] == team)
		    {
				SendClientMessage(i, color, string);
				RingTone[i] = 20;
			}
		}
	}
}

public SendEnemyMessage(color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(gTeam[i] >= 3)
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}


public SendAdminMessage(color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pAdmin] >= 1)
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}



/*public AddCar(carcoords)
{
	new randcol = random(126);
	new randcol2 = 1;
	if (rccounter == 14)
	{
		rccounter = 0;
	}
	AddStaticVehicleEx(carselect[rccounter], CarSpawns[carcoords][pos_x], CarSpawns[carcoords][pos_y], CarSpawns[carcoords][pos_z], CarSpawns[carcoords][z_angle], randcol, randcol2, 60000);
	rccounter++;
	return 1;
}*/

public PlayerPlayMusic(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		SetTimer("StopMusic", 5000, 0);
		PlayerPlaySound(playerid, 1068, 0.0, 0.0, 0.0);
	}
}

public StopMusic()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			PlayerPlaySound(i, 1069, 0.0, 0.0, 0.0);
		}
	}
}

public PlayerFixRadio(playerid)
{
    if(IsPlayerConnected(playerid))
	{
	    SetTimer("PlayerFixRadio2", 1000, 0);
		PlayerPlaySound(playerid, 1068, 0.0, 0.0, 0.0);
		Fixr[playerid] = 1;
	}
}

public PlayerFixRadio2()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(Fixr[i])
			{
				PlayerPlaySound(i, 1069, 0.0, 0.0, 0.0);
				Fixr[i] = 0;
			}
		}
	}
}

//---------------------------[DCMD Commands!!]--------------------------------------------
dcmd_xgoto(playerid, params[])
{
	new Float:x, Float:y, Float:z;
	new string[100];
	if(PlayerInfo[playerid][pAdmin] < 1)
    {
       SendClientMessage(playerid, COLOR_GRAD1, "Vous ne pouvez pas utiliser cette commande.");
       return 1;
    }
	if (sscanf(params, "fff", x, y, z)) SendClientMessage(playerid, 0xFF0000AA, "Usage: \"/xgoto <X Float> <Y Float> <Z Float>\"");
	else
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        SetVehiclePos(GetPlayerVehicleID(playerid), x,y,z);
		}
		else
		{
	    	SetPlayerPos(playerid, x, y, z);
		}
	    format(string, sizeof(string), "Vos coordonnées actuels sont maintenant : %f, %f, %f", x, y, z);
	    SendClientMessage(playerid, 0xBBBBBBAA, string);
 	}
 	return 1;
}

//==============================================================================
dcmd_racecmds(playerid, params[])
{
    #pragma unused params
	SendClientMessage(playerid, COLOR_LIGHTGREEN, "|____________________Racing Commands____________________|");
	SendClientMessage(playerid, COLOR_WHITE, "[General:] /join - /ready - /leave");
	SendClientMessage(playerid, COLOR_WHITE, "[General:] /endrace - /bestlap - /bestrace");
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		SendClientMessage(playerid, COLOR_WHITE, "[Administrator:] /racelist - /loadrace - /startrace - /endrace - /raceadmin");
		SendClientMessage(playerid, COLOR_WHITE, "[Administrator:] /racemode - /setprize - /prizemode - /setlaps - /airrace - /cpsize");
	}
	SendClientMessage(playerid, COLOR_LIGHTGREEN, "______________________________________________________________________________________");
	return 1;
}

dcmd_racelist(playerid, params[])
{
    #pragma unused params
	if (PlayerInfo[playerid][pAdmin] >= 1)
	{
		SendClientMessage(playerid, COLOR_LIGHTGREEN, "|____________________Race List____________________|");
		SendClientMessage(playerid, COLOR_WHITE, "[Races:] annoying - backstreetbang - countrycruise - chilliad - fastlane - fleethecity");
		SendClientMessage(playerid, COLOR_WHITE, "[Races:] flyingfree - lostinsmoke - monstertruck - mullholland - murderhorn");
		SendClientMessage(playerid, COLOR_WHITE, "[Races:] riversiderun - roundwego - striptease - thegrove - thestrip");
		SendClientMessage(playerid, COLOR_LIGHTGREEN, "______________________________________________________________________________________");
	}
	return 1;
}

dcmd_buildcmds(playerid, params[])
{
    #pragma unused params
	if (PlayerInfo[playerid][pAdmin] >= 1)
	{
		SendClientMessage(playerid, COLOR_LIGHTGREEN, "|____________________Building Commands____________________|");
		SendClientMessage(playerid, COLOR_WHITE, "[Administrator:] /buildrace - /cp - /scp - /dcp - /mcp - /rcp");
		SendClientMessage(playerid, COLOR_WHITE, "[Administrator:] /deleterace - /clearrace - /editrace - /saverace");
		SendClientMessage(playerid, COLOR_WHITE, "[Administrator:] /buildmenu - /raceadmin");
		SendClientMessage(playerid, COLOR_LIGHTGREEN, "______________________________________________________________________________________");
	}
	return 1;
}

dcmd_buildrace(playerid, params[])
{
    #pragma unused params
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		if(RaceBuilders[playerid] != 0)
		{
			SendClientMessage(playerid, COLOR_GREY, "[Error:] You are already building a race");
		}
		else if(RaceParticipant[playerid]>0)
		{
	    	SendClientMessage(playerid, COLOR_GREY, "[Error:] You are participating in a race, can not build a race");
		}
		else
		{
			new slot;
			slot=GetBuilderSlot(playerid);
			if(slot == 0)
			{
				SendClientMessage(playerid, COLOR_GREY, "[Error:] No builderslots available");
				return 1;
			}
			format(ystring,sizeof(ystring),"[Info:] You are now building a race (Slot: %d)",slot);
			SendClientMessage(playerid, COLOR_WHITE, ystring);
			RaceBuilders[playerid]=slot;
			BCurrentCheckpoints[b(playerid)]=0;
			Bracemode[b(playerid)]=0;
			Blaps[b(playerid)]=0;
			BAirrace[b(playerid)] = 0;
			BCPsize[b(playerid)] = 8.0;
		}
		return 1;
	}
	return 1;
}

dcmd_cp(playerid, params[])
{
	#pragma unused params
	if(RaceBuilders[playerid] != 0 && BCurrentCheckpoints[b(playerid)] < MAX_RACECHECKPOINTS)
	{
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid,x,y,z);
		format(ystring,sizeof(ystring),"[Info:] Checkpoint %d created: %f,%f,%f",BCurrentCheckpoints[b(playerid)],x,y,z);
		SendClientMessage(playerid, COLOR_WHITE, ystring);
		BRaceCheckpoints[b(playerid)][BCurrentCheckpoints[b(playerid)]][0]=x;
		BRaceCheckpoints[b(playerid)][BCurrentCheckpoints[b(playerid)]][1]=y;
		BRaceCheckpoints[b(playerid)][BCurrentCheckpoints[b(playerid)]][2]=z;
		BSelectedCheckpoint[b(playerid)]=BCurrentCheckpoints[b(playerid)];
		SetBRaceCheckpoint(playerid,BCurrentCheckpoints[b(playerid)],-1);
		BCurrentCheckpoints[b(playerid)]++;
	}
	else if(RaceBuilders[playerid] != 0 && BCurrentCheckpoints[b(playerid)] == MAX_RACECHECKPOINTS)
	{
		format(ystring,sizeof(ystring),"[Error:] Maximum amount of checkpoints reached (%d)",MAX_RACECHECKPOINTS);
		SendClientMessage(playerid, COLOR_GREY, ystring);
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "[Error:] You are not building a race");
	}
	return 1;
}

dcmd_scp(playerid, params[])
{
	new sele, tmp[256], idx;
    tmp = otherstrtok(params, idx);
    if(!strlen(tmp))
	{
		SendClientMessage(playerid, COLOR_WHITE, "[Usage:] /scp [checkpoint]");
		return 1;
    }
    sele = strval(tmp);
	if(RaceBuilders[playerid] != 0)
	{
		if(sele>BCurrentCheckpoints[b(playerid)]-1 || BCurrentCheckpoints[b(playerid)] < 1 || sele < 0)
		{
			SendClientMessage(playerid, COLOR_GREY, "[Error:] Invalid checkpoint");
			return 1;
		}
		format(ystring,sizeof(ystring),"[Info:] Selected checkpoint %d",sele);
		SendClientMessage(playerid, COLOR_WHITE, ystring);
		BActiveCP(playerid,sele);
		BSelectedCheckpoint[b(playerid)]=sele;
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "[Error:] You are not building a race");
	}
	return 1;
}

dcmd_rcp(playerid, params[])
{
	#pragma unused params
	if(RaceBuilders[playerid] == 0)
	{
		SendClientMessage(playerid, COLOR_GREY, "[Error:] You are not building a race");
		return 1;
	}
	else if(BCurrentCheckpoints[b(playerid)] < 1)
	{
		SendClientMessage(playerid, COLOR_GREY, "[Error:] No checkpoint to replace");
		return 1;
	}
	new Float:x,Float:y,Float:z;
	GetPlayerPos(playerid,x,y,z);
	format(ystring,sizeof(ystring),"[Info:] Checkpoint %d replaced: %f,%f,%f",BSelectedCheckpoint[b(playerid)],x,y,z);
	SendClientMessage(playerid, COLOR_WHITE, ystring);
	BRaceCheckpoints[b(playerid)][BSelectedCheckpoint[b(playerid)]][0]=x;
	BRaceCheckpoints[b(playerid)][BSelectedCheckpoint[b(playerid)]][1]=y;
	BRaceCheckpoints[b(playerid)][BSelectedCheckpoint[b(playerid)]][2]=z;
	BActiveCP(playerid,BSelectedCheckpoint[b(playerid)]);
    return 1;
}

dcmd_mcp(playerid, params[])
{
	if(RaceBuilders[playerid] == 0)
	{
		SendClientMessage(playerid, COLOR_GREY, "[Error:] You are not building a race");
		return 1;
	}
	else if(BCurrentCheckpoints[b(playerid)] < 1)
	{
		SendClientMessage(playerid, COLOR_GREY, "[Error:] No checkpoint to move");
		return 1;
	}
	new idx, direction, dir[32];
	dir=otherstrtok(params, idx);
	new Float:amount=floatstr(otherstrtok(params,idx));
	if(amount == 0.0 || (dir[0] != 'x' && dir[0]!='y' && dir[0]!='z'))
	{
		SendClientMessage(playerid, COLOR_WHITE, "[Usage:] /mcp [x,y or z] [amount]");
		return 1;
	}
    if(dir[0] == 'x') direction=0;
    else if (dir[0] == 'y') direction=1;
    else if (dir[0] == 'z') direction=2;
    BRaceCheckpoints[b(playerid)][BSelectedCheckpoint[b(playerid)]][direction]=BRaceCheckpoints[b(playerid)][BSelectedCheckpoint[b(playerid)]][direction]+amount;
	BActiveCP(playerid,BSelectedCheckpoint[b(playerid)]);
	return 1;
}

dcmd_dcp(playerid, params[])
{
	#pragma unused params
	if(RaceBuilders[playerid] == 0)
	{
		SendClientMessage(playerid, COLOR_GREY, "[Error:] You are not building a race");
		return 1;
	}
	else if(BCurrentCheckpoints[b(playerid)] < 1)
	{
		SendClientMessage(playerid, COLOR_GREY, "[Error:] No checkpoint to delete");
		return 1;
	}
	for(new i=BSelectedCheckpoint[b(playerid)];i<BCurrentCheckpoints[b(playerid)];i++)
	{
		BRaceCheckpoints[b(playerid)][i][0]=BRaceCheckpoints[b(playerid)][i+1][0];
		BRaceCheckpoints[b(playerid)][i][1]=BRaceCheckpoints[b(playerid)][i+1][1];
		BRaceCheckpoints[b(playerid)][i][2]=BRaceCheckpoints[b(playerid)][i+1][2];
	}
	BCurrentCheckpoints[b(playerid)]--;
	BSelectedCheckpoint[b(playerid)]--;
	if(BCurrentCheckpoints[b(playerid)] < 1)
	{
	    DisablePlayerRaceCheckpoint(playerid);
	    BSelectedCheckpoint[b(playerid)]=0;
		return 1;
	}
	else if(BSelectedCheckpoint[b(playerid)] < 0)
	{
	    BSelectedCheckpoint[b(playerid)]=0;
	}
	BActiveCP(playerid,BSelectedCheckpoint[b(playerid)]);
	SendClientMessage(playerid, COLOR_WHITE, "[Info:] Checkpoint deleted");
	return 1;
}

dcmd_clearrace(playerid,params[])
{
	#pragma unused params
	if(RaceBuilders[playerid] != 0) clearrace(playerid);
	else SendClientMessage(playerid, COLOR_GREY, "[Error:] You are not building a race");
	return 1;
}

dcmd_editrace(playerid,params[])
{
	if(RaceBuilders[playerid] == 0)
	{
		SendClientMessage(playerid, COLOR_GREY, "[Error:] You are not building a race");
		return 1;
	}
	if(BCurrentCheckpoints[b(playerid)]>0)
	{
		for(new i=0;i<BCurrentCheckpoints[b(playerid)];i++)
		{
			BRaceCheckpoints[b(playerid)][i][0]=0.0;
			BRaceCheckpoints[b(playerid)][i][1]=0.0;
			BRaceCheckpoints[b(playerid)][i][2]=0.0;
		}
		BCurrentCheckpoints[b(playerid)]=0;
	}
	new tmp[256],idx;
    tmp = otherstrtok(params, idx);
    if(!strlen(tmp))
	{
		SendClientMessage(playerid, COLOR_WHITE, "[Usage:] /editrace [name]");
		return 1;
    }
	new race_name[32],templine[42];
 	format(race_name,sizeof(race_name), "Race/%s.yr",tmp);
	if(!fexist(race_name))
	{
		format(ystring,sizeof(ystring), "[Error:] Race \"%s\" does not exist",tmp);
		SendClientMessage(playerid, COLOR_GREY, ystring);
		return 1;
	}
    BCurrentCheckpoints[b(playerid)]=-1;
	new File:f, i;
	f = fopen(race_name, io_read);
	fread(f,templine,sizeof(templine));
	if(templine[0] == 'Y')
	{
		new fileversion;
	    otherstrtok(templine,i);
		fileversion = strval(otherstrtok(templine,i));
		if(fileversion > RACEFILE_VERSION)
		{
		    format(ystring,128,"[Error:] Race \"%s\" is created with a newer version, unable to load",tmp);
		    SendClientMessage(playerid,COLOR_GREY,ystring);
		    return 1;
		}
		otherstrtok(templine,i);
		Bracemode[b(playerid)] = strval(otherstrtok(templine,i));
		Blaps[b(playerid)] = strval(otherstrtok(templine,i));
		if(fileversion >= 2)
		{
		    BAirrace[b(playerid)] = strval(otherstrtok(templine,i));
		    BCPsize[b(playerid)] = floatstr(otherstrtok(templine,i));
		}
		else
		{
			BAirrace[b(playerid)] = 0;
			BCPsize[b(playerid)] = 8.0;
		}
		fread(f,templine,sizeof(templine));
		fread(f,templine,sizeof(templine));
	}
	else
	{
		BCurrentCheckpoints[b(playerid)]++;
		BRaceCheckpoints[b(playerid)][BCurrentCheckpoints[b(playerid)]][0] = floatstr(otherstrtok(templine,i));
		BRaceCheckpoints[b(playerid)][BCurrentCheckpoints[b(playerid)]][1] = floatstr(otherstrtok(templine,i));
		BRaceCheckpoints[b(playerid)][BCurrentCheckpoints[b(playerid)]][2] = floatstr(otherstrtok(templine,i));
	}
	while(fread(f,templine,sizeof(templine),false))
	{
		BCurrentCheckpoints[b(playerid)]++;
		i=0;
		BRaceCheckpoints[b(playerid)][BCurrentCheckpoints[b(playerid)]][0] = floatstr(otherstrtok(templine,i));
		BRaceCheckpoints[b(playerid)][BCurrentCheckpoints[b(playerid)]][1] = floatstr(otherstrtok(templine,i));
		BRaceCheckpoints[b(playerid)][BCurrentCheckpoints[b(playerid)]][2] = floatstr(otherstrtok(templine,i));
	}
	fclose(f);
	BCurrentCheckpoints[b(playerid)]++;
	format(ystring,sizeof(ystring),"[Info:] Race \"%s\" has been loaded for editing (%d checkpoints)",tmp,BCurrentCheckpoints[b(playerid)]);
	SendClientMessage(playerid, COLOR_WHITE,ystring);
    return 1;
}

dcmd_saverace(playerid, params[])
{
	if(RaceBuilders[playerid] != 0)
	{
		new tmp[256], idx;
	    tmp = otherstrtok(params, idx);
	    if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_WHITE, "[Usage:] /saverace [name]");
			return 1;
	    }
	    if(BCurrentCheckpoints[b(playerid)] < 2)
	    {
	        SendClientMessage(playerid, COLOR_GREY, "[Error:] You need atleast 2 checkpoints to save");
	        return 1;
	    }
		new race_name[32],templine[42];
		format(race_name, 32, "Race/%s.yr",tmp);
		if(fexist(race_name))
		{
			format(ystring,sizeof(ystring), "[Error:] Race \"%s\" already exists",tmp);
			SendClientMessage(playerid, COLOR_GREY, ystring);
			return 1;
		}
		new File:f,Float:x,Float:y,Float:z, Bcreator[MAX_PLAYER_NAME];
		GetPlayerName(playerid, Bcreator, MAX_PLAYER_NAME);
		f = fopen(race_name,io_write);
		format(templine,sizeof(templine),"YRACE %d %s %d %d %d %f\n", RACEFILE_VERSION, Bcreator, Bracemode[b(playerid)], Blaps[b(playerid)], BAirrace[b(playerid)], BCPsize[b(playerid)]);
		fwrite(f,templine);
		format(templine,sizeof(templine),"A 0 A 0 A 0 A 0 A 0\n");
		fwrite(f,templine);
		format(templine,sizeof(templine),"A 0 A 0 A 0 A 0 A 0\n");
		fwrite(f,templine);
		for(new i = 0; i < BCurrentCheckpoints[b(playerid)];i++)
		{
			x=BRaceCheckpoints[b(playerid)][i][0];
			y=BRaceCheckpoints[b(playerid)][i][1];
			z=BRaceCheckpoints[b(playerid)][i][2];
			format(templine,sizeof(templine),"%f %f %f\n",x,y,z);
			fwrite(f,templine);
		}
		fclose(f);
		format(ystring,sizeof(ystring),"[Info:] Race \"%s\" has been saved",tmp);
   		SendClientMessage(playerid, COLOR_WHITE, ystring);
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "[Error:] You are not building a race");
	}
	return 1;
}

dcmd_setlaps(playerid,params[])
{
	new tmp[256], idx;
    tmp = otherstrtok(params, idx);
    if(!strlen(tmp) || strval(tmp) <= 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "[Usage:] /setlaps [amount of laps (min: 1)]");
		return 1;
   	}
	if(RaceBuilders[playerid] != 0)
    {
		Blaps[b(playerid)] = strval(tmp);
		format(tmp,sizeof(tmp),"[Info:] Amount of laps set to %d", Blaps[b(playerid)]);
		SendClientMessage(playerid, COLOR_WHITE, tmp);
        return 1;
    }
	if(RaceAdmin == 1 && IsNotAdmin(playerid)) return 1;
	if(RaceActive == 1 || RaceStart == 1) SendClientMessage(playerid, COLOR_GREY, "[Error:] Race already in progress");
	else if(LCurrentCheckpoint == 0) SendClientMessage(playerid, COLOR_GREY, "[Error:] No race loaded");
	else
	{
	    Racelaps=strval(tmp);
		format(tmp,sizeof(tmp),"[Info:] Amount of laps set to %d for current race", Racelaps);
		SendClientMessage(playerid, COLOR_WHITE, tmp);
	}
	return 1;
}

dcmd_racemode(playerid,params[])
{
	new tmp[256], idx, tempmode;
    tmp = otherstrtok(params, idx);
    if(!strlen(tmp))
	{
		SendClientMessage(playerid, COLOR_WHITE, "[Usage:] /racemode [0/1/2/3]");
		return 1;
   	}
	if(tmp[0] == 'd') tempmode=0;
	else if(tmp[0] == 'r') tempmode=1;
	else if(tmp[0] == 'y') tempmode=2;
	else if(tmp[0] == 'm') tempmode=3;
	else tempmode=strval(tmp);

	if (0 > tempmode || tempmode > 3)
   	{
   	    SendClientMessage(playerid, COLOR_GREY, "[Error:] Invalid racemode");
		return 1;
   	}
	if(RaceBuilders[playerid] != 0)
    {
		if(tempmode == 2 && BCurrentCheckpoints[b(playerid)] < 3)
		{
		    SendClientMessage(playerid, COLOR_GREY, "[Error:] You can not set racemode 2 on races with only 2 CPs. Changing to mode 1");
		    Bracemode[b(playerid)] = 1;
		    return 1;
		}
		Bracemode[b(playerid)] = tempmode;
		format(tmp,sizeof(tmp),"[Info:] Racemode set to %d", Bracemode[b(playerid)]);
		SendClientMessage(playerid, COLOR_WHITE, tmp);
        return 1;
    }
	if(RaceAdmin == 1 && IsNotAdmin(playerid)) return 1;
	if(RaceActive == 1 || RaceStart == 1) SendClientMessage(playerid, COLOR_GREY, "[Error:] Race already in progress");
	else if(LCurrentCheckpoint == 0) SendClientMessage(playerid, COLOR_GREY, "[Error:] No race loaded");
	else
	{
		if(tempmode == 2 && LCurrentCheckpoint < 2)
		{
		    SendClientMessage(playerid, COLOR_GREY, "[Error:] You can not set racemode 2 on races with only 2 CPs. Changing to mode 1");
		    Racemode = 1;
		    return 1;
		}
	    Racemode=tempmode;
		format(tmp,sizeof(tmp),"[Info:] Racemode set to %d", Racemode);
		SendClientMessage(playerid, COLOR_WHITE, tmp);
	}
	return 1;
}

dcmd_loadrace(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		Racemode = 0; Racelaps = 1;
		new tmp[128], idx, fback;
    	tmp = otherstrtok(params, idx);
    	if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_WHITE, "[Usage:] /loadrace [name]");
			return 1;
    	}
    	if(RaceActive == 1)
    	{
			SendClientMessage(playerid, COLOR_GREY, "[Error:] A race is already active");
			return 1;
    	}
		fback=LoadRace(tmp);
		if(fback == -1) format(ystring,sizeof(ystring),"[Error:] Race \"%s\" does not exist",tmp);
		else if (fback == -2) format(ystring,sizeof(ystring),"[Error:] Race \"%s\" is created with a newer version, unable to load",tmp);
		if(fback < 0)
		{
	    	SendClientMessage(playerid,COLOR_GREY,ystring);
	    	return 1;
		}
		format(ystring,sizeof(ystring),"[Info:] Race \"%s\" loaded",CRaceName);
		SendClientMessage(playerid,COLOR_WHITE,ystring);
		if(LCurrentCheckpoint<2 && Racemode == 2)
		{
	    	Racemode = 1;
		}
		if(!IsValidMenu(MRace)) CreateRaceMenus();
		if(Airrace == 0) SetMenuColumnHeader(MRace,0,"Air race: Off");
		else SetMenuColumnHeader(MRace,0,"Air race: On");
		TogglePlayerControllable(playerid,0);
		ShowMenuForPlayer(MRace,playerid);
		return 1;
	}
	return 1;
}

dcmd_startrace(playerid, params[])
{
	#pragma unused params
    if(PlayerInfo[playerid][pAdmin] >= 1)
    {
		if(LCurrentCheckpoint == 0) SendClientMessage(playerid, COLOR_GREY, "[Error:] No race loaded");
		else if (RaceActive == 1) SendClientMessage(playerid, COLOR_GREY, "[Error:] Race is already active");
		else startrace();
		return 1;
	}
	return 1;
}


dcmd_deleterace(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		new filename[128], idx;
		filename = otherstrtok(params,idx);
		if(!(strlen(filename)))
		{
	    	SendClientMessage(playerid, COLOR_WHITE, "[Usage:] /deleterace [race]");
	    	return 1;
		}
		format(filename,sizeof(filename),"Race/%s.yr",filename);
		if(!fexist(filename))
		{
			format(ystring,sizeof(ystring), "[Error:] Race \"%s\" does not exist",filename);
			SendClientMessage(playerid, COLOR_GREY, ystring);
			return 1;
		}
		fremove(filename);
		format(ystring,sizeof(ystring), "[Info:] Race \"%s\" has been deleted",filename);
		SendClientMessage(playerid, COLOR_WHITE, ystring);
		return 1;
	}
	return 1;
}

dcmd_join(playerid,params[])
{
	#pragma unused params
	if(RaceBuilders[playerid] != 0)
	{
	    SendClientMessage(playerid, COLOR_GREY, "[Error:] You are currently building a race, use /clearrace to exit build mode");
	    return 1;
	}
	if(RaceParticipant[playerid]>0)
	{
	    SendClientMessage(playerid, COLOR_GREY, "[Error:] You have already joined the race");
	}
	else if(RaceActive==1 && RaceStart==0)
	{
		if(PrizeMode >= 2 && GetPlayerMoney(playerid) < JoinFee)
		{
			format(ystring,sizeof(ystring),"[Error:] You do not have enough money to join the race (Join fee: %d$)",JoinFee);
			SendClientMessage(playerid, COLOR_GREY, ystring);
			return 1;
		}
		else if (PrizeMode >= 2)
		{
			new tempval;
			tempval=(-1)*JoinFee;
		    SafeGivePlayerMoney(playerid,tempval);
		    Pot+=JoinFee;
		}
		CurrentCheckpoint[playerid]=0;
		if(Racemode == 3)
		{
			SetRaceCheckpoint(playerid,LCurrentCheckpoint,LCurrentCheckpoint-1);
			CurrentCheckpoint[playerid]=LCurrentCheckpoint;
		}
		else SetRaceCheckpoint(playerid,0,1);
		RaceParticipant[playerid]=1;
		CurrentLap[playerid]=0;
		SendClientMessage(playerid, COLOR_WHITE, "[Info:] You have joined the race, go to the start");
		Participants++;
	}
	else if(RaceActive==1 && RaceStart==1)
	{
	    SendClientMessage(playerid, COLOR_GREY, "[Error:] The race has already started, can not join");
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GREY, "[Error:] There is no race you can join");
	}
	return 1;
}

dcmd_leave(playerid,params[])
{
	#pragma unused params
	if(RaceParticipant[playerid] > 0)
	{
       	if(RaceParticipant[playerid]==3 && RaceStart == 1)
		{
			SendClientMessage(playerid, COLOR_GREY, "[Error:] Unable to leave at this time, countdown in progress");
			return 1;
		}
		DisablePlayerRaceCheckpoint(playerid);
		RaceParticipant[playerid]=0;
		Participants--;
		SendClientMessage(playerid, COLOR_WHITE, "[Info:] You have left the race");
		if(PrizeMode >= 2 && RaceStart == 0)
		{
		    SafeGivePlayerMoney(playerid,JoinFee/2);
		    Pot-=JoinFee/2;
		}
        if(Participants == 0) endrace();
		else if(RaceStart == 0)ReadyRefresh();
	}
	else SendClientMessage(playerid, COLOR_GREY, "[Error:] You are not in a race");
    return 1;
}

dcmd_endrace(playerid, params[])
{
	#pragma unused params
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
    	if(RaceActive==0)
    	{
        	SendClientMessage(playerid, COLOR_GREY, "[Error:] There is no race active");
			return 1;
    	}
    	endrace();
		return 1;
	}
	return 1;
}

dcmd_ready(playerid, params[])
{
	#pragma unused params
	new PState=GetPlayerState(playerid);
	if(RaceParticipant[playerid]==2 && PState != PLAYER_STATE_PASSENGER)
	{
		SendClientMessage(playerid, COLOR_WHITE, "[Info:] You are now ready, type /ready again to cancel");
		RaceParticipant[playerid]=3;
		ReadyRefresh();
	}
	else if (RaceParticipant[playerid]==3 && RaceStart==0)
	{
	    SendClientMessage(playerid, COLOR_WHITE, "[Info:] You are not ready, type /ready and get into position");
	    RaceParticipant[playerid]=2;
	}
	else if (PState == PLAYER_STATE_PASSENGER) SendClientMessage(playerid, COLOR_GREY, "[Error:] You must be driving for yourself");
	else if(RaceParticipant[playerid] == 1) SendClientMessage(playerid, COLOR_GREY, "[Error:] You must have visited the starting CP to /ready");
	else SendClientMessage(playerid, COLOR_GREY, "[Error:] You have not participated in a race");
    return 1;
}

dcmd_bestlap(playerid,params[])
{
	new tmp[64], idx;
    tmp = otherstrtok(params, idx);
	if(LoadTimes(playerid,1,tmp)) return 1;
	if(TopLapTimes[0] == 0)
	{
	    SendClientMessage(playerid, COLOR_WHITE, "[Info:] No scores available");
		return 1;
	}
	else if(ORacemode == 0)
	{
	    SendClientMessage(playerid, COLOR_GREY, "[Error:] This race does not have any laps");
		return 1;
	}
	format(ystring,sizeof(ystring),"[Info:] %s by %s - Best Laps:",CRaceName,CBuilder);
	SendClientMessage(playerid,COLOR_WHITE,ystring);
	for(new i;i<5;i++)
	{
		if(TopLapTimes[i] == 0)
		{
		    format(ystring,sizeof(ystring),"%d. None yet",i+1);
			i=6;
		}
		else
		{
	 	   format(ystring,sizeof(ystring),"%d. %s - %s",i+1,BeHuman(TopLapTimes[i]),TopLappers[i]);
	    }
	    SendClientMessage(playerid,COLOR_WHITE,ystring);
	}
    return 1;
}

dcmd_bestrace(playerid,params[])
{
	new tmp[64], idx;
    tmp = otherstrtok(params, idx);
	if(LoadTimes(playerid,0,tmp)) return 1;
	if(TopRacerTimes[0] == 0)
	{
	    SendClientMessage(playerid, COLOR_WHITE, "[Info:] No scores available");
		return 1;
	}
	format(ystring,sizeof(ystring),"[Info:] %s by %s - Best Race times:",CRaceName,CBuilder);
	SendClientMessage(playerid,COLOR_WHITE,ystring);
	for(new i;i<5;i++)
	{
		if(TopRacerTimes[i] == 0)
		{
		    format(ystring,sizeof(ystring),"[Info:] %d. None yet",i+1);
			i=6;
		}
		else
		{
	 	   format(ystring,sizeof(ystring),"[Info:] %d. %s - %s",i+1,BeHuman(TopRacerTimes[i]),TopRacers[i]);
	    }
	    SendClientMessage(playerid,COLOR_WHITE,ystring);
	}
    return 1;
}

dcmd_airrace(playerid,params[])
{
	#pragma unused params
	if(RaceBuilders[playerid] != 0)
	{
	    if(BAirrace[b(playerid)] == 0)
	    {
	        SendClientMessage(playerid, COLOR_WHITE, "[Info:] Air race enabled");
			BAirrace[b(playerid)]=1;
	    }
	    else
	    {
	        SendClientMessage(playerid, COLOR_WHITE, "[Info:] Air race disabled");
			BAirrace[b(playerid)]=0;
	    }
		return 1;
	}
	if(RaceAdmin == 1 && IsNotAdmin(playerid)) return 1;
	if(RaceActive == 1 || RaceStart == 1) SendClientMessage(playerid, COLOR_GREY, "[Error:] Race is already in progress");
	else if(LCurrentCheckpoint == 0) SendClientMessage(playerid, COLOR_GREY, "[Error:] No race loaded");
	else if(Airrace == 0)
    {
        SendClientMessage(playerid, COLOR_WHITE, "[Info:] Air race enabled");
		Airrace = 1;
    }
    else if(Airrace == 1)
    {
        SendClientMessage(playerid, COLOR_WHITE, "[Info:] Air race disabled");
		Airrace = 0;
    }
    else printf("Error in /airrace detected. RaceActive: %d, RaceStart: %d LCurrentCheckpoint: %d, Airrace: %d", RaceActive,RaceStart,LCurrentCheckpoint,Airrace);
	return 1;
}

dcmd_cpsize(playerid,params[])
{
	new idx, tmp[32];
	tmp = otherstrtok(params,idx);
	if(!(strlen(tmp)) || floatstr(tmp) <= 0.0)
	{
	    SendClientMessage(playerid, COLOR_WHITE, "[Usage:] /cpsize [size]");
	    return 1;
	}
	if(RaceBuilders[playerid] != 0)
	{
	    BCPsize[b(playerid)] = floatstr(tmp);
	    format(ystring,sizeof(ystring),"[Info:] Checkpoint size set to %f",floatstr(tmp));
		SendClientMessage(playerid,COLOR_WHITE,ystring);
	    return 1;
	}
	if(RaceAdmin == 1 && IsNotAdmin(playerid)) return 1;
	if(RaceActive == 1) SendClientMessage(playerid, COLOR_GREY, "[Error:] Race has already been activated");
	else if(LCurrentCheckpoint == 0) SendClientMessage(playerid, COLOR_GREY, "[Error:] No race loaded");
	else
	{
	    CPsize = floatstr(tmp);
	    format(ystring,sizeof(ystring),"[Info:] Checkpoint size set to %f",floatstr(tmp));
		SendClientMessage(playerid,COLOR_WHITE,ystring);
	}
	return 1;
}

dcmd_prizemode(playerid,params[])
{
	if(IsNotAdmin(playerid)) return 1;
	new idx, tmp;
	tmp=strval(otherstrtok(params,idx));
    if(tmp < 0 || tmp > 4) SendClientMessage(playerid, COLOR_WHITE, "[Usage:] /prizemode [0-4]");
	else if(RaceActive == 1) SendClientMessage(playerid, COLOR_GREY, "[Error:] Race is already active");
    else
    {
        PrizeMode = tmp;
        format(ystring,sizeof(ystring),"[Info:] Prizemode set to %d",PrizeMode);
		SendClientMessage(playerid,COLOR_WHITE,ystring);
    }
	return 1;
}

dcmd_setprize(playerid,params[])
{
	if(IsNotAdmin(playerid)) return 1;
	new idx, tmp;
    tmp = strval(otherstrtok(params, idx));
    if(0 >= tmp) SendClientMessage(playerid, COLOR_WHITE, "[Usage:] /setprize [amount]");
	else if(RaceActive == 1) SendClientMessage(playerid, COLOR_GREY, "[Error:] Race is already active");
    else
    {
        Prize = tmp;
        format(ystring,sizeof(ystring),"[Info:] Prize set to %d",Prize);
		SendClientMessage(playerid,COLOR_WHITE,ystring);
    }
	return 1;
}

dcmd_raceadmin(playerid,params[])
{
	#pragma unused params
 	if(PlayerInfo[playerid][pAdmin] >= 1)
    {
		if(!IsValidMenu(MAdmin)) CreateRaceMenus();
		TogglePlayerControllable(playerid,0);
		ShowMenuForPlayer(MAdmin,playerid);
		return 1;
	}
	return 1;
}

dcmd_buildmenu(playerid,params[])
{
	#pragma unused params
	if(PlayerInfo[playerid][pAdmin] >= 1)
 	{
		if(RaceBuilders[playerid] == 0)
		{
			SendClientMessage(playerid, COLOR_GREY, "[Error:] You are not building a race");
			return 1;
		}
		if(BAirrace[b(playerid)] == 0) SetMenuColumnHeader(MBuild,0,"Air race: Off");
		else SetMenuColumnHeader(MBuild,0,"Air race: On");
		if(!IsValidMenu(MBuild)) CreateRaceMenus();
		TogglePlayerControllable(playerid,0);
		ShowMenuForPlayer(MBuild,playerid);
		return 1;
	}
	return 1;
}
//==============================================================================
dcmd_surveiller(playerid, params[])
{
	new Giveplayerid, Name[256], String[256], Name2[256];
	if (PlayerInfo[playerid][pAdmin] >= 1)
	{
	if (sscanf(params, "d", Giveplayerid)) SendClientMessage(playerid,COLOR_WHITE, "[INFO] : /surveiller [Playerid]");
	else if (!IsPlayerConnected(Giveplayerid)) SendClientMessage(playerid,COLOR_PURPLE,"Joueur non connecté");
	else
	{
	if ( Specing[Giveplayerid] == 1 )
	{
	SendClientMessage(playerid, COLOR_RED, "La personne que vous essayez de surviller surveille déjà quelqu'un d'autre.");
	}
	else
	{
    GetPlayerName(playerid, Name, 256);
	GetPlayerName(Giveplayerid, Name2, 256);
	format(String, 256, "[%i] %s est en train de surveiller [%i] %s",playerid, Name,Giveplayerid, Name2);
	CallLocalFunction("ircRemoteSay", "iss", 1, "#FSE", String);
	Specing[playerid] = 1;
	}
	if ( !IsPlayerInAnyVehicle(Giveplayerid) )
	{
	TogglePlayerSpectating(playerid, 1);
	PlayerSpectatePlayer(playerid, Giveplayerid);
	SetPlayerInterior(playerid,GetPlayerInterior(Giveplayerid));
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(Giveplayerid));
	return 1;
	}
	else
	{
	TogglePlayerSpectating(playerid, 1);
	PlayerSpectateVehicle(playerid, GetPlayerVehicleID(Giveplayerid));
	SetPlayerInterior(playerid,GetPlayerInterior(Giveplayerid));
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(Giveplayerid));
	return 1;
	}
 	}
	}
	return 1;
}

dcmd_specoff(playerid, params[])
{
	#pragma unused params
	TogglePlayerSpectating(playerid, 0);
	Specing[playerid] = 0;
	return 1;
}
//---------------------------<[ OnPlayerCommandText ]>--------------------------------------------------------

public OnPlayerCommandText(playerid, cmdtext[])
{
    dcmd(racecmds,8,cmdtext);
   	dcmd(racelist,8,cmdtext);
	dcmd(buildcmds,9,cmdtext);
	dcmd(buildrace,9,cmdtext);
	dcmd(cp,2,cmdtext);
	dcmd(scp,3,cmdtext);
	dcmd(rcp,3,cmdtext);
	dcmd(mcp,3,cmdtext);
	dcmd(dcp,3,cmdtext);
	dcmd(clearrace,9,cmdtext);
	dcmd(editrace,8,cmdtext);
	dcmd(saverace,8,cmdtext);
	dcmd(setlaps,7,cmdtext);
	dcmd(racemode,8,cmdtext);
	dcmd(loadrace,8,cmdtext);
	dcmd(startrace,9,cmdtext);
	dcmd(join,4,cmdtext);
	dcmd(leave,5,cmdtext);
	dcmd(endrace,7,cmdtext);
	dcmd(ready,5,cmdtext);
	dcmd(bestlap,7,cmdtext);
	dcmd(bestrace,8,cmdtext);
	dcmd(deleterace,10,cmdtext);
	dcmd(airrace,7,cmdtext);
	dcmd(cpsize,6,cmdtext);
	dcmd(prizemode,9,cmdtext);
	dcmd(setprize,8,cmdtext);
	dcmd(raceadmin,9,cmdtext);
	dcmd(buildmenu,9,cmdtext);
    CheckTextForBadWords(playerid, cmdtext);
    assert( AntiFlood_Check( playerid ) );
    dcmd(xgoto, 5, cmdtext);
    dcmd(surveiller, 10, cmdtext);
    dcmd(specoff, 7, cmdtext);
	new string[256];
	new playermoney;
	new dancestyle;
	new sendername[MAX_PLAYER_NAME];
	new giveplayer[MAX_PLAYER_NAME];
	new playername[MAX_PLAYER_NAME];
	new cmd[256];
	new tmp[256];
	new giveplayerid, moneys, idx;
	new idcar = GetPlayerVehicleID(playerid);
	new pveh = GetVehicleModel(GetPlayerVehicleID(playerid));
	//new Message[256];
	//new gMessage[256];
	//new pName[MAX_PLAYER_NAME+1];
	//new iName[MAX_PLAYER_NAME+1];
   	new vehid;
	vehid = GetPlayerVehicleID(playerid);
	cmd = strtok(cmdtext, idx);
	if(strcmp(cmdtext,"/gps",true)==0)
	{
	    if(ilsweep[playerid] == 1)
	    {
	        SendClientMessage(playerid, COLOR_RED, "Finis ton boulot avant de pouvoir utiliser le GPS");
	    }
	    else if(PlayerInfo[playerid][pGPS] == 1)
	    {
	    	ShowPlayerDialog(playerid,GPSD,DIALOG_STYLE_LIST,"Los Santos GPS :","Alhambra\nPig Pen\nAztecas Club\nBinco\nMairie\nDillimore Club\nDillimore\nJefferson\nGanton Gym\nGrove ST\nHospital\nTen Green Bottles\nSkate Park\nBanque\nCommissariat\nUnity Station(Gare)\nA.N.P.E","Activer","Eteindre");
		}
		else
		{
			SendClientMessage(playerid, COLOR_RED, "VOus n'avez pas de GPS, allez en acheter un au 24-7");
		}
	    return 1;
	}
		if(strcmp(cmd, "/credits", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
            SendClientMessage(playerid, COLOR_RED, "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Credits~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
            SendClientMessage(playerid, COLOR_GREEN,"-> The Godfather (FeaR)");
            SendClientMessage(playerid, COLOR_GREEN,"-> Los Santos RolePlay (Scorcher)");
            SendClientMessage(playerid, COLOR_GREEN,"-> SA-MP");
            SendClientMessage(playerid, COLOR_GREEN,"-> LordMan");
            SendClientMessage(playerid, COLOR_GREEN,"-> Foo / FullDrive");
			SendClientMessage(playerid, COLOR_RED, "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		}
        return 1;
	}
	if(strcmp(cmdtext,"/decoder",true)==0)
	{
	    if(PlayerInfo[playerid][pDecodeur] == 1)
	    {
    		if(PlayerToPoint(3, playerid,2142.5330,1625.7997,993.6882))
			{
			    SendClientMessage(playerid, COLOR_GREEN, "Tu prends ton decodeur et tu tentes de decoder (30 secondes)");
			    SetTimerEx("Decodage",30000,0,"d",playerid);
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY,"Tu ne te trouves pas devant le panneau !");
			}
	  	}
		else
		{
			SendClientMessage(playerid, COLOR_RED, "Tu n'as pas de Decodeur");
		}
		if(PlayerInfo[playerid][pLevel] < 3)
        {
            return SendClientMessage(playerid, COLOR_GRAD1, "Vous devez être minimum Level 3 pour pouvoir braquer la Banque.");
        }
	    return 1;
	}

    if(!strcmp("/cachemoi", cmdtext, true, 10))
	{
	    if(Objet[playerid] == -1)
	    {
	        if(!IsPlayerInAnyVehicle(playerid))
	        {
				if(PlayerInfo[playerid][pMember] == 16 || PlayerInfo[playerid][pLeader] == 16)
				{
   					CreerObjetJoueur (playerid, 647);
				}
				else
				{
				    SendClientMessage(playerid, COLOR_RED, "Tu n'es pas un pauvre clodo");
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_RED, "Déjà que se cacher dans un buisson c'est abusé, mais en plus dans une caisse.");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_RED, "Tu as deja un buisson créé");
		}
		return 1;
	}
	if(!strcmp("/stopcache", cmdtext, true, 10))
	{
	    if(Objet[playerid] != -1)
	    {
		    if(PlayerInfo[playerid][pMember] == 16 || PlayerInfo[playerid][pLeader] == 16)
			{
				DestroyStreamObject (Objet[playerid]);
				Objet[playerid] = -1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_RED, "Tu n'es pas un pauvre clodo");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_RED, "Tu n'as pas de buisson créé");
		}
		return 1;
    }

///////////////////////////////////////////////////////////////BRAQUAGE (Mairie, etc...)//////////////////////////////////////////////////////////////////////
    if(strcmp(cmd, "/cambriolagemairie", true) == 0 || strcmp(cmd, "/volermairie", true) == 0 || strcmp(cmd, "/cambriolermairie", true) == 0)
	{
	    new success = random(2);
	    if(CityHallRobbedRecently == 1)
		{
		    SendClientMessage(playerid, COLOR_GREY, " La Mairie a été récemment cambriolée, essayez plus tard !");
		    return 1;
		}
		if(braquageencours == 1)
    	{
     	return SendClientMessage(playerid, COLOR_YELLOW, "Un endroit est déjà en train d'être braqué.");
      	}
		if(PlayerInfo[playerid][pLevel] < 2)
        {
            return SendClientMessage(playerid, COLOR_GRAD1, "Vous devez être minimum Level 2 pour pouvoir cambrioler la Mairie.");
        }
        if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2)
        {
            return SendClientMessage(playerid, COLOR_GRAD1, "Vous êtes répésentant de la Loi ! Vous ne pouvez pas cambrioler la Mairie !");
        }
		if(PlayerInfo[playerid][pRobTime] >= 1)
		{
		    SendClientMessage(playerid, COLOR_GREY, " Vous avez déja essayé ou cambriolé un lieu récemment, attendez encore un moment s'il vous plait.");
		    return 1;
		}
	    if(IsPlayerInRangeOfPoint(playerid, 6, 358.5919,184.2908,1008.3828))
	    {
			{
		        if(success == 1)
				{
			        SendClientMessage(playerid, COLOR_ORANGE, " Vous êtes maintenant en train de cambrioler la Mairie, restez içi pendant 60 Secondes!");
			        SendClientMessage(playerid, COLOR_ORANGE, " Si vous partez de ce lieu, le cambriolage sera automatiquement terminé.");
                    RobbingTime[playerid] = 60;
					RobCityHallTimer = SetTimerEx("RobCityHall",1000,true,"i",playerid);
		            WantedPoints[playerid] = 5;
		            SetPlayerCriminal(playerid,255, "Cambriolage de la Mairie");
		            PlayerInfo[playerid][pRobTime] = 900;
		            CityHallRobbedRecently = 1;
					SetTimer("UnsetCityHallRob",1500000,false);
					ApplyAnimation(playerid, "SHOP", "ROB_Shifty", 4.0, 0, 0, 0, 0, 0); // Rob Lookout
					braquageencours = 1;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_ORANGE, " Vous avez échoué a votre tentative de cambriolage de la Mairie.");
				    WantedPoints[playerid] = 2;
		            SetPlayerCriminal(playerid,255, "Tentative de Cambriolage de la Mairie");
					PlayerInfo[playerid][pRobTime] = 500;
				}
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GREY, " Vous n'êtes pas a la Mairie ou pas assez proche du point de Braquage.");
		    return 1;
		}
		return 1;
	}
    if(strcmp(cmd, "/volergymnase", true) == 0 || strcmp(cmd, "/cambriolergymnase", true) == 0 || strcmp(cmd, "/cambriolagegymnase", true) == 0)
	{
	    new success = random(2);
	    if(GymRobbedRecently == 1)
		{
		    SendClientMessage(playerid, COLOR_GREY, " Le Gymnase a été récemment cambriolé, essayez plus tard !");
		    return 1;
		}
		if(braquageencours == 1)
    	{
     	return SendClientMessage(playerid, COLOR_YELLOW, "Un endroit est déjà en train d'être braqué.");
      	}
		if(PlayerInfo[playerid][pLevel] < 2)
        {
            return SendClientMessage(playerid, COLOR_GRAD1, "Vous devez être minimum Level 2 pour pouvoir cambrioler le Gymnase.");
        }
		if(PlayerInfo[playerid][pRobTime] >= 1)
		{
		    SendClientMessage(playerid, COLOR_GREY, " Vous avez déja essayé ou cambriolé un lieu récemment, attendez encore un moment s'il vous plait.");
		    return 1;
		}
	    if(IsPlayerInRangeOfPoint(playerid, 2, 756.5454,5.4325,1000.6992))
	    {
			{
		        if(success == 1)
				{
			        SendClientMessage(playerid, COLOR_ORANGE, " Vous êtes maintenant en train de cambrioler le Gymnase, restez içi pendant 60 Secondes!");
			        SendClientMessage(playerid, COLOR_ORANGE, " Si vous partez de ce lieu, le cambriolage sera automatiquement terminé.");
                    RobbingTime[playerid] = 60;
					RobGymTimer = SetTimerEx("RobGym",1000,true,"i",playerid);
		            WantedPoints[playerid] = 5;
		            SetPlayerCriminal(playerid,255, "Cambriolage du Gymnase");
		            PlayerInfo[playerid][pRobTime] = 900;
		            GymRobbedRecently = 1;
					SetTimer("UnsetGymRob",1500000,false);
					ApplyAnimation(playerid, "SHOP", "ROB_Shifty", 4.0, 0, 0, 0, 0, 0); // Rob Lookout
					braquageencours = 1;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_ORANGE, " Vous avez échoué a votre tentative de cambriolage du Gymnase.");
				    WantedPoints[playerid] = 2;
		            SetPlayerCriminal(playerid,255, "Tentative de Cambriolage du Gymnase");
					PlayerInfo[playerid][pRobTime] = 500;
				}
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GREY, " Vous n'etes pas au Gymnase ou pas assez proche du point de Braquage.");
		    return 1;
		}
		return 1;
	}

	if(strcmp(cmd, "/volerdonut", true) == 0 || strcmp(cmd, "/cambriolerdonut", true) == 0 || strcmp(cmd, "/cambriolagedonut", true) == 0)
	{
	    new success = random(2);
	    if(DonutRobbedRecently == 1)
		{
		    SendClientMessage(playerid, COLOR_GREY, " Le Donut's Store a été récemment cambriolé, essayez plus tard !");
		    return 1;
		}
		if(braquageencours == 1)
    	{
     	return SendClientMessage(playerid, COLOR_YELLOW, "Un endroit est déjà en train d'être braqué.");
      	}
		if(PlayerInfo[playerid][pLevel] < 2)
        {
            return SendClientMessage(playerid, COLOR_GRAD1, "Vous devez être minimum Level 2 pour pouvoir cambrioler le Donut's Store.");
        }
		if(PlayerInfo[playerid][pRobTime] >= 1)
		{
		    SendClientMessage(playerid, COLOR_GREY, " Vous avez déja essayé ou cambriolé un lieu récemment, attendez encore un moment s'il vous plait.");
		    return 1;
		}
	    if(IsPlayerInRangeOfPoint(playerid, 2, 379.1978,-184.1220,1000.6328))
	    {
			{
		        if(success == 1)
				{
				    SendClientMessage(playerid, COLOR_ORANGE, " Vous êtes maintenant en train de cambrioler le Donut's Store, restez içi pendant 60 Secondes!");
			        SendClientMessage(playerid, COLOR_ORANGE, " Si vous partez de ce lieu, le cambriolage sera automatiquement terminé.");
                    RobbingTime[playerid] = 60;
					RobDonutTimer = SetTimerEx("RobDonut",1000,true,"i",playerid);
		            WantedPoints[playerid] = 5;
		            SetPlayerCriminal(playerid,255, "Cambriolage du Donut Store");
		            PlayerInfo[playerid][pRobTime] = 900;
		            DonutRobbedRecently = 1;
					SetTimer("UnsetDonutRob",1500000,false);
					ApplyAnimation(playerid, "SHOP", "ROB_Shifty", 4.0, 0, 0, 0, 0, 0); // Rob Lookout
					braquageencours = 1;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_ORANGE, " Vous avez échoué a votre tentative de cambriolage du Gymnase.");
				    WantedPoints[playerid] = 2;
		            SetPlayerCriminal(playerid,255, "Tentative de Cambriolage du Donut Store");
					PlayerInfo[playerid][pRobTime] = 500;
				}
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GREY, " Vous n'etes pas au Donut Store ou pas assez proche du point de Braquage.");
		    return 1;
		}
		return 1;
	}

	if(strcmp(cmd, "/voleralhambra", true) == 0 || strcmp(cmd, "/cambrioleralhambra", true) == 0 || strcmp(cmd, "/cambriolagealhambra", true) == 0)
	{
	    new success = random(2);
	    if(AlhambraRobbedRecently == 1)
		{
		    SendClientMessage(playerid, COLOR_GREY, " L'Alhambra a été récemment cambriolée, essayez plus tard !");
		    return 1;
		}
		if(braquageencours == 1)
    	{
     	return SendClientMessage(playerid, COLOR_YELLOW, "Un endroit est déjà en train d'être braqué.");
      	}
		if(PlayerInfo[playerid][pLevel] < 2)
        {
            return SendClientMessage(playerid, COLOR_GRAD1, "Vous devez être minimum Level 2 pour pouvoir cambrioler l'Alhambra.");
        }
		if(PlayerInfo[playerid][pRobTime] >= 1)
		{
		    SendClientMessage(playerid, COLOR_GREY, " Vous avez déja essayé ou cambriolé un lieu récemment, attendez encore un moment s'il vous plait.");
		    return 1;
		}
	    if(IsPlayerInRangeOfPoint(playerid, 2, 499.6341,-20.3592,1000.6797))
	    {
			{
		        if(success == 1)
				{
				    SendClientMessage(playerid, COLOR_ORANGE, " Vous êtes maintenant en train de cambrioler le Donut's Store, restez içi pendant 60 Secondes!");
			        SendClientMessage(playerid, COLOR_ORANGE, " Si vous partez de ce lieu, le cambriolage sera automatiquement terminé.");
                    RobbingTime[playerid] = 60;
					RobAlhambraTimer = SetTimerEx("RobAlhambra",1000,true,"i",playerid);
		            WantedPoints[playerid] = 5;
		            SetPlayerCriminal(playerid,255, "Cambriolage de l'Alhambra");
		            PlayerInfo[playerid][pRobTime] = 900;
		            AlhambraRobbedRecently = 1;
					SetTimer("UnsetAlhambraRob",1500000,false);
					ApplyAnimation(playerid, "SHOP", "ROB_Shifty", 4.0, 0, 0, 0, 0, 0); // Rob Lookout
					braquageencours = 1;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_ORANGE, " Vous avez échoué a votre tentative de cambriolage de l'Alhambra.");
				    WantedPoints[playerid] = 2;
		            SetPlayerCriminal(playerid,255, "Tentative de Cambriolage de l'Alhambra");
					PlayerInfo[playerid][pRobTime] = 500;
				}
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GREY, " Vous n'etes pas a l'Alhambra ou pas assez proche du point de Braquage.");
		    return 1;
		}
		return 1;
	}

	if(strcmp(cmd, "/volertgb", true) == 0 || strcmp(cmd, "/cambriolertgb", true) == 0 || strcmp(cmd, "/cambriolagetgb", true) == 0)
	{
	    new success = random(2);
	    if(BarRobbedRecently == 1)
		{
		    SendClientMessage(playerid, COLOR_GREY, " Le Bar Ten Green Bottles a été récemment cambriolé, essayez plus tard !");
		    return 1;
		}
		if(braquageencours == 1)
    	{
     	return SendClientMessage(playerid, COLOR_YELLOW, "Un endroit est déjà en train d'être braqué.");
      	}
		if(PlayerInfo[playerid][pLevel] < 2)
        {
            return SendClientMessage(playerid, COLOR_GRAD1, "Vous devez être minimum Level 2 pour pouvoir cambrioler le Bar Ten Green Bottles.");
        }
		if(PlayerInfo[playerid][pRobTime] >= 1)
		{
		    SendClientMessage(playerid, COLOR_GREY, " Vous avez déja essayé ou cambriolé un lieu récemment, attendez encore un moment s'il vous plait.");
		    return 1;
		}
	    if(IsPlayerInRangeOfPoint(playerid, 2, 492.0305,-82.4695,998.7578))
	    {
			{
		        if(success == 1)
				{
				    SendClientMessage(playerid, COLOR_ORANGE, " Vous êtes maintenant en train de cambrioler le Ten Green Bottles, restez içi pendant 60 Secondes!");
			        SendClientMessage(playerid, COLOR_ORANGE, " Si vous partez de ce lieu, le cambriolage sera automatiquement terminé.");
                    RobbingTime[playerid] = 60;
					RobBarTimer = SetTimerEx("RobBar",1000,true,"i",playerid);
		            WantedPoints[playerid] = 5;
		            SetPlayerCriminal(playerid,255, "Cambriolage du Ten Green Bottles");
		            PlayerInfo[playerid][pRobTime] = 900;
		            BarRobbedRecently = 1;
					SetTimer("UnsetBarRob",1500000,false);
					ApplyAnimation(playerid, "SHOP", "ROB_Shifty", 4.0, 0, 0, 0, 0, 0); // Rob Lookout
					braquageencours = 1;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_ORANGE, " Vous avez échoué a votre tentative de cambriolage du Ten Green Bottles.");
				    WantedPoints[playerid] = 2;
		            SetPlayerCriminal(playerid,255, "Tentative de Cambriolage du Ten Green Bottles");
					PlayerInfo[playerid][pRobTime] = 500;
				}
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GREY, " Vous n'etes pas au Ten Green Bottles ou pas assez proche du point de Braquage.");
		    return 1;
		}
		return 1;
	}

	if(strcmp(cmd, "/volerpizza", true) == 0 || strcmp(cmd, "/cambriolerpizza", true) == 0 || strcmp(cmd, "/cambriolagepizza", true) == 0)
	{
	    new success = random(2);
	    if(PizzaRobbedRecently == 1)
		{
		    SendClientMessage(playerid, COLOR_GREY, " Le Pizza Store a été récemment cambriolé, essayez plus tard !");
		    return 1;
		}
		if(braquageencours == 1)
    	{
     	return SendClientMessage(playerid, COLOR_YELLOW, "Un endroit est déjà en train d'être braqué.");
      	}
		if(PlayerInfo[playerid][pLevel] < 2)
        {
            return SendClientMessage(playerid, COLOR_GRAD1, "Vous devez être minimum Level 2 pour pouvoir cambrioler le Pizza Store.");
        }
		if(PlayerInfo[playerid][pRobTime] >= 1)
		{
		    SendClientMessage(playerid, COLOR_GREY, " Vous avez déja essayé ou cambriolé un lieu récemment, attendez encore un moment s'il vous plait.");
		    return 1;
		}
	    if(IsPlayerInRangeOfPoint(playerid, 2, 373.6143,-118.8086,1001.4922))
	    {
			{
		        if(success == 1)
				{
				    SendClientMessage(playerid, COLOR_ORANGE, " Vous êtes maintenant en train de cambrioler le Pizza Store, restez içi pendant 60 Secondes!");
			        SendClientMessage(playerid, COLOR_ORANGE, " Si vous partez de ce lieu, le cambriolage sera automatiquement terminé.");
                    RobbingTime[playerid] = 60;
					RobPizzaTimer = SetTimerEx("RobPizza",1000,true,"i",playerid);
		            WantedPoints[playerid] = 5;
		            SetPlayerCriminal(playerid,255, "Cambriolage du Pizza Store");
		            PlayerInfo[playerid][pRobTime] = 900;
		            PizzaRobbedRecently = 1;
					SetTimer("UnsetPizzaRob",1500000,false);
					ApplyAnimation(playerid, "SHOP", "ROB_Shifty", 4.0, 0, 0, 0, 0, 0); // Rob Lookout
					braquageencours = 1;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_ORANGE, " Vous avez échoué a votre tentative de cambriolage du Pizza Store.");
				    WantedPoints[playerid] = 2;
		            SetPlayerCriminal(playerid,255, "Tentative de Cambriolage du Pizza Store");
					PlayerInfo[playerid][pRobTime] = 500;
				}
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GREY, " Vous n'etes pas au Pizza Store ou pas assez proche du point de Braquage.");
		    return 1;
		}
		return 1;
	}

	if(strcmp(cmd, "/volerburger", true) == 0 || strcmp(cmd, "/cambriolerburger", true) == 0 || strcmp(cmd, "/cambriolageburger", true) == 0)
	{
	    new success = random(2);
		if(PlayerInfo[playerid][pRobTime] >= 1)
		{
		    SendClientMessage(playerid, COLOR_GREY, " Vous avez déja essayé ou cambriolé un lieu récemment, attendez encore un moment s'il vous plait.");
		    return 1;
		}
		if(braquageencours == 1)
    	{
     	return SendClientMessage(playerid, COLOR_YELLOW, "Un endroit est déjà en train d'être braqué.");
      	}
        if(PlayerInfo[playerid][pLevel] < 2)
        {
            return SendClientMessage(playerid, COLOR_GRAD1, "Vous devez être minimum Level 2 pour pouvoir cambrioler le Burger Store.");
        }
	    if(IsPlayerInRangeOfPoint(playerid, 2, 373.8943,-67.4481,1001.5078))
	    {
	    	if(GetPlayerVirtualWorld(playerid) == 1 && Burger1RobbedRecently == 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, " Le Burger Store a été récemment cambriolé, essayez plus tard !");
			    return 1;
			}
			else if(GetPlayerVirtualWorld(playerid) == 2 && Burger2RobbedRecently == 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, " Le Burger Store a été récemment cambriolé, essayez plus tard !");
			    return 1;
			}
	        //if(PlayerInfo[playerid][pDuty] == 0)
			{
		        if(success == 1)
				{
				    SendClientMessage(playerid, COLOR_ORANGE, " Vous êtes maintenant en train de cambrioler le Pizza Store, restez içi pendant 60 Secondes!");
			        SendClientMessage(playerid, COLOR_ORANGE, " Si vous partez de ce lieu, le cambriolage sera automatiquement terminé.");
                    RobbingTime[playerid] = 60;
					RobBurgerTimer = SetTimerEx("RobBurger",1000,true,"i",playerid);
		            WantedPoints[playerid] = 5;
		            SetPlayerCriminal(playerid,255, "Cambriolage du Burger Store");
		            PlayerInfo[playerid][pRobTime] = 900;
					if(GetPlayerVirtualWorld(playerid) == 1) { Burger1RobbedRecently = 1; SetTimer("UnsetBurger1Rob",1500000,false); }
					else if(GetPlayerVirtualWorld(playerid) == 2) { Burger2RobbedRecently = 1; SetTimer("UnsetBurger2Rob",1500000,false); }
					ApplyAnimation(playerid, "SHOP", "ROB_Shifty", 4.0, 0, 0, 0, 0, 0); // Rob Lookout
					braquageencours = 1;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_ORANGE, " Vous avez échoué a votre tentative de cambriolage du Burger Store!");
				    WantedPoints[playerid] = 2;
		            SetPlayerCriminal(playerid,255, "Tentative de Cambriolage du Burger Store");
					PlayerInfo[playerid][pRobTime] = 500;
				}
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GREY, " Vous n'etes pas au Burger Store ou pas assez proche du point de Braquage.");
		    return 1;
		}
		return 1;
	}

	if(strcmp(cmd, "/volercluckin", true) == 0 || strcmp(cmd, "/cambriolercluckin", true) == 0 || strcmp(cmd, "/cambriolagecluckin", true) == 0)
	{
	    new success = random(2);
		if(PlayerInfo[playerid][pRobTime] >= 1)
		{
		    SendClientMessage(playerid, COLOR_GREY, " Vous avez déja essayé ou cambriolé un lieu récemment, attendez encore un moment s'il vous plait.");
		    return 1;
		}
		if(braquageencours == 1)
    	{
     	return SendClientMessage(playerid, COLOR_YELLOW, "Un endroit est déjà en train d'être braqué.");
      	}
		if(PlayerInfo[playerid][pLevel] < 2)
        {
            return SendClientMessage(playerid, COLOR_GRAD1, "Vous devez être minimum Level 2 pour pouvoir cambrioler le Cluckin Bell.");
        }
	    if(IsPlayerInRangeOfPoint(playerid, 2, 371.7011,-6.2796,1001.8589))
	    {
	    	if(GetPlayerVirtualWorld(playerid) == 1 && Cluckin1RobbedRecently == 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, " Le Cluckin Bell a été récemment cambriolé, essayez plus tard !");
			    return 1;
			}
			else if(GetPlayerVirtualWorld(playerid) == 2 && Cluckin2RobbedRecently == 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, " Le Cluckin Bell a été récemment cambriolé, essayez plus tard !");
			    return 1;
			}
	        //if(PlayerInfo[playerid][pDuty] == 0)
			{
		        if(success == 1)
				{
				    SendClientMessage(playerid, COLOR_ORANGE, " Vous êtes maintenant en train de cambrioler le Pizza Store, restez içi pendant 60 Secondes!");
			        SendClientMessage(playerid, COLOR_ORANGE, " Si vous partez de ce lieu, le cambriolage sera automatiquement terminé.");
                    RobbingTime[playerid] = 60;
					RobCluckinTimer = SetTimerEx("RobCluckin",1000,true,"i",playerid);
		            WantedPoints[playerid] = 5;
		            SetPlayerCriminal(playerid,255, "Cambriolage du Cluckin' Bell");
		            PlayerInfo[playerid][pRobTime] = 900;
					if(GetPlayerVirtualWorld(playerid) == 1) { Cluckin1RobbedRecently = 1; SetTimer("UnsetCluckin1Rob",1500000,false); }
					else if(GetPlayerVirtualWorld(playerid) == 2) { Cluckin2RobbedRecently = 1; SetTimer("UnsetCluckin2Rob",1500000,false); }
					ApplyAnimation(playerid, "SHOP", "ROB_Shifty", 4.0, 0, 0, 0, 0, 0); // Rob Lookout
					braquageencours = 1;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_ORANGE, " Vous avez échoué a votre tentative de cambriolage du Cluckin' Bell!");
				    WantedPoints[playerid] = 2;
		            SetPlayerCriminal(playerid,255, "Tentative de Cambriolage du Cluckin' Bell!");
					PlayerInfo[playerid][pRobTime] = 500;
				}
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GREY, " Vous n'etes pas au Cluckin' Bell ou pas assez proche du point de Braquage.");
		    return 1;
		}
		return 1;
	}

    if(strcmp(cmd, "/phareon",true) == 0)
    {
        new engine,lights,alarm,doors,bonnet,boot,objective;
        new vid = GetPlayerVehicleID(playerid);
        if(vid != INVALID_VEHICLE_ID) {
        GetVehicleParamsEx(vid,engine,lights,alarm,doors,bonnet,boot,objective);
        SetVehicleParamsEx(vid,engine,VEHICLE_PARAMS_ON,alarm,doors,bonnet,boot,objective);
    }
    return 1;
    }
    if(strcmp(cmd, "/phareoff",true) == 0)
    {
        new engine,lights,alarm,doors,bonnet,boot,objective;
        new vid = GetPlayerVehicleID(playerid);
        if(vid != INVALID_VEHICLE_ID) {
        GetVehicleParamsEx(vid,engine,lights,alarm,doors,bonnet,boot,objective);
        SetVehicleParamsEx(vid,engine,VEHICLE_PARAMS_OFF,alarm,doors,bonnet,boot,objective);
    }
    return 1;
    }
    if(strcmp(cmd, "/ocapot",true) == 0 || strcmp(cmd, "/ouvrircapot",true) == 0) { // capot
        new engine,lights,alarm,doors,bonnet,boot,objective;
        new vid = GetPlayerVehicleID(playerid);
        if(vid != INVALID_VEHICLE_ID) {
            GetVehicleParamsEx(vid,engine,lights,alarm,doors,bonnet,boot,objective);
            SetVehicleParamsEx(vid,engine,lights,alarm,doors,VEHICLE_PARAMS_ON,boot,objective);

        }
        return 1;
    }
    if(strcmp(cmd, "/fcapot",true) == 0 || strcmp(cmd, "/fermercapot",true) == 0) {
        new engine,lights,alarm,doors,bonnet,boot,objective;
        new vid = GetPlayerVehicleID(playerid);
        if(vid != INVALID_VEHICLE_ID) {
            GetVehicleParamsEx(vid,engine,lights,alarm,doors,bonnet,boot,objective);
            SetVehicleParamsEx(vid,engine,lights,alarm,doors,VEHICLE_PARAMS_OFF,boot,objective);
        }
        return 1;
    }
    if(strcmp(cmd, "/ocoffre",true) == 0 || strcmp(cmd, "/ouvrircoffre",true) == 0) { // coffre
        new engine,lights,alarm,doors,bonnet,boot,objective;
        new vid = GetPlayerVehicleID(playerid);
        if(vid != INVALID_VEHICLE_ID) {
            GetVehicleParamsEx(vid,engine,lights,alarm,doors,bonnet,boot,objective);
            SetVehicleParamsEx(vid,engine,lights,alarm,doors,bonnet,VEHICLE_PARAMS_ON,objective);

        }
        return 1;
    }
    if(strcmp(cmd, "/fcoffre",true) == 0 || strcmp(cmd, "/fermercoffre",true) == 0) {
        new engine,lights,alarm,doors,bonnet,boot,objective;
        new vid = GetPlayerVehicleID(playerid);
        if(vid != INVALID_VEHICLE_ID) {
            GetVehicleParamsEx(vid,engine,lights,alarm,doors,bonnet,boot,objective);
            SetVehicleParamsEx(vid,engine,lights,alarm,doors,bonnet,VEHICLE_PARAMS_OFF,objective);
        }
        return 1;
    }
//----------------------------------[Matos Faussaire]-----------------------------------------------------------
	if(strcmp(cmd,"/mats",true)==0) // Faussaire
    {
        if(IsPlayerConnected(playerid))
	    {
		    if (PlayerInfo[playerid][pJob] != 24)
			{
			    SendClientMessage(playerid,COLOR_GREY,"   Vous n'êtes pas Faussaire !");
			    return 1;
			}
			new x_nr[256];
			x_nr = strtok(cmdtext, idx);
			if(!strlen(x_nr)) {
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /mats [nom]");
				SendClientMessage(playerid, COLOR_WHITE, "Choix disponnible: prendre, livrer.");
				return 1;
			}
			if(strcmp(x_nr,"prendre",true) == 0)
			{
			    if(PlayerToPoint(3.0,playerid,2151.3706,-2255.7769,13.2986))
			    {
			        if(MatsHolding[playerid] >= 10)
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   Vous ne pouvez pas prendre plus de Pack sur vous !");
				        return 1;
			        }
			        tmp = strtok(cmdtext, idx);
			        if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "USAGE: /mats get [Nombre]");
						return 1;
					}
					moneys = strval(tmp);
					if(moneys < 1 || moneys > 10) { SendClientMessage(playerid, COLOR_GREY, "  Min = 1 Max = 10 !"); return 1; }
					new price = moneys * 5000;
					if(GetPlayerMoney(playerid) > price)
					{
					    format(string, sizeof(string), " Vous avez acheté %d Pack pour $%d.", moneys, price);
					    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					    SafeGivePlayerMoney(playerid, - price);
					    MatsHolding[playerid] = moneys;
				    	//SetPlayerCheckpoint(playerid,0,1200.7249,245.5873,19.5547);
					}
					else
					{
					    format(string, sizeof(string), "   Vous ne pouvez pas prendre : $%d !", price);
					    SendClientMessage(playerid, COLOR_GREY, string);
					}
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas à l'entrepot de récupération des matèriaux !");
			        //SetPlayerCheckpoint(playerid,0,597.1277,-1248.6479,18.2734);
			        return 1;
			    }
			}
			else if(strcmp(x_nr,"livrer",true) == 0)
			{
			    if(PlayerToPoint(3.0,playerid,764.7709,-1350.1090,13.5168))
			    {
			        if(MatsHolding[playerid] > 0)
			        {
			            new payout = (1)*(MatsHolding[playerid]);
			            format(string, sizeof(string), " L'usine vous a donné %d Materiaux en echange de vos %d Pack.", payout, MatsHolding[playerid]);
					    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			            PlayerInfo[playerid][pMatsf] += payout;
			            MatsHolding[playerid] = 0;
		            	DisablePlayerCheckpoint(playerid);
			        }
			        else
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   Vous n'avez aucun Pack sur vous, allez en recuperer !");
			            //SetPlayerCheckpoint(playerid,0,597.1277,-1248.6479,18.2734);
				        return 1;
			        }
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas à l'Entrepot de matèriaux !");
			        SetPlayerCheckpoint(playerid,0,764.7709,-1350.1090,13.5168);
			        return 1;
			    }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Choix selectionné invalide !");
			    return 1;
			}
		}
		return 1;
	}
//-------------------------------------------Permis---------------------------------------------------
	if(strcmp(cmdtext, "/listepermis", true) == 0) // by LordMan
	{
	    if (PlayerToPoint(4, playerid,1490.3195,1305.6976,1093.2964))
	    {
	    	TogglePlayerControllable(playerid, 0);
  			ShowMenuForPlayer(Licenses, playerid);
			return 1;
		}
		else { SendClientMessage(playerid, COLOR_GREY,"Vous n'êtes pas a l'auto école."); }
	}
//----------------------------------[Faussaire : Créer un Permis]-----------------------------------------------
	if(strcmp(cmd, "/creerpermis", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if (PlayerInfo[playerid][pJob] == 24)
	        {
	            new x_nr[256];
				x_nr = strtok(cmdtext, idx);
				if(!strlen(x_nr)) {
				    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /creerpermis [name] [playerid/PartOfName]");
				    SendClientMessage(playerid, COLOR_WHITE, "Permis dispos: avion, bateau, peche, arme, moto, poidlourd.");
					return 1;
				}
				if(strcmp(x_nr,"avion",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /creerpermis avion [playerid/PartOfName]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(GetDistanceBetweenPlayers(playerid,giveplayerid) <= 2 && PlayerInfo[playerid][pMatsf] >= 2)
					    {
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            format(string, sizeof(string), " Vous avez crée le permis avion pour %s.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), " %s vous à donné le permis avion (Utilisable pendant 2h de jeu seulement).",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pFlyLicf] = 1;
					        PlayerInfo[giveplayerid][pfpermis] = 1;
					        PlayerInfo[giveplayerid][pFlyLict] = 7200;
					        PlayerInfo[playerid][pMatsf] -= 2;
					        return 1;
						}
					}
                      else if(GetDistanceBetweenPlayers(playerid,giveplayerid) > 2 && PlayerInfo[playerid][pMatsf] < 2)
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Ce joueur est trop loin / Vous n'avez pas assez de materiaux !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"bateau",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /creerpermis bateau [playerid/PartOfName]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(GetDistanceBetweenPlayers(playerid,giveplayerid) <= 2 && PlayerInfo[playerid][pMatsf] >= 2)
					    {
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            format(string, sizeof(string), " Vous avez crée le permis bateau pour %s.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), " %s vous à donné le permis bateau (Utilisable pendant 2h de jeu seulement).",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pBoatLicf] = 1;
					        PlayerInfo[giveplayerid][pfpermis] = 1;
					        PlayerInfo[giveplayerid][pBoatLict] = 7200;
					        PlayerInfo[playerid][pMatsf] -= 2;
					        return 1;
						}
					}
					else if(GetDistanceBetweenPlayers(playerid,giveplayerid) > 2 && PlayerInfo[playerid][pMatsf] < 2)
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Ce joueur est trop loin / Vous n'avez pas assez de materiaux !");
					    return 1;
					}
				}
                else if(strcmp(x_nr,"peche",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /creerpermis peche [playerid/PartOfName]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(GetDistanceBetweenPlayers(playerid,giveplayerid) <= 2 && PlayerInfo[playerid][pMatsf] >= 2)
					    {
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            format(string, sizeof(string), " Vous avez crée le permis de pêche pour %s.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), " %s vous à donné le permis de pêche (Utilisable pendant 2h de jeu seulement).",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pFishLicf] = 1;
					        PlayerInfo[giveplayerid][pfpermis] = 1;
					        PlayerInfo[giveplayerid][pFishLict] = 7200;
					        PlayerInfo[playerid][pMatsf] -= 2;
					        return 1;
						}
					}
					else if(GetDistanceBetweenPlayers(playerid,giveplayerid) > 2 && PlayerInfo[playerid][pMatsf] < 2)
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Ce joueur est trop loin / Vous n'avez pas assez de materiaux !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"poidlourd",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /creerpermis poidlourd [playerid/PartOfName]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(GetDistanceBetweenPlayers(playerid,giveplayerid) <= 2 && PlayerInfo[playerid][pMatsf] >= 2)
					    {
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            format(string, sizeof(string), " Vous avez crée le permis poird lourd pour %s.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), " %s vous à donné le permis poid lourd (Utilisable pendant 2h de jeu seulement).",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pLourdLicf] = 1;
					        PlayerInfo[giveplayerid][pfpermis] = 1;
					        PlayerInfo[giveplayerid][pLourdLict] = 7200;
					        PlayerInfo[playerid][pMatsf] -= 2;
					        return 1;
						}
					}
					else if(GetDistanceBetweenPlayers(playerid,giveplayerid) > 2 && PlayerInfo[playerid][pMatsf] < 2)
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Ce joueur est trop loin / Vous n'avez pas assez de materiaux !");
					    return 1;
					}
				}
                else if(strcmp(x_nr,"moto",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /creerpermis moto [playerid/PartOfName]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(GetDistanceBetweenPlayers(playerid,giveplayerid) <= 2 && PlayerInfo[playerid][pMatsf] >= 2)
					    {
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            format(string, sizeof(string), " Vous avez crée le permis de moto pour %s.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), " %s vous à donné le permis de moto (Utilisable pendant 2h de jeu seulement).",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pMotoLicf] = 1;
					        PlayerInfo[giveplayerid][pfpermis] = 1;
					        PlayerInfo[giveplayerid][pMotoLict] = 7200;
					        PlayerInfo[playerid][pMatsf] -= 2;
					        return 1;
						}
					}
					else if(GetDistanceBetweenPlayers(playerid,giveplayerid) > 2 && PlayerInfo[playerid][pMatsf] < 2)
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Ce joueur est trop loin / Vous n'avez pas assez de materiaux !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"arme",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /creerpermis arme [playerid/PartOfName]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(GetDistanceBetweenPlayers(playerid,giveplayerid) <= 2 && PlayerInfo[playerid][pMatsf] >= 2)
					    {
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            format(string, sizeof(string), " Vous avez crée le permis d'arme pour %s.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), " %s vous à donné le permis d'arme (Utilisable pendant 2h de jeu seulement).",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pGunLicf] = 1;
					        PlayerInfo[giveplayerid][pfpermis] = 1;
					        PlayerInfo[giveplayerid][pGunLict] = 7200;
					        PlayerInfo[playerid][pMatsf] -= 2;
					        return 1;
						}
					}
					else if(GetDistanceBetweenPlayers(playerid,giveplayerid) > 2 && PlayerInfo[playerid][pMatsf] < 2)
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Ce joueur est trop loin / Vous n'avez pas assez de materiaux !");
					    return 1;
					}
				}
	        }
	        else if(PlayerInfo[playerid][pJob] != 24)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "  Vous n'êtes pas faussaire");
	            return 1;
	        }
	    }
	    return 1;
 	}
//----------------------------------[Faussaire : Créer un faux costume]-----------------------------------------------
	if(strcmp(cmd, "/creercostume", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pJob] == 24)
	        {
	            new x_nr[256];
				x_nr = strtok(cmdtext, idx);
				if(!strlen(x_nr)) {
				    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /creercostume [name] [playerid/PartOfName]");
				    SendClientMessage(playerid, COLOR_WHITE, "Permis dispos: LSPD, ambulancier, fbi.");
					return 1;
				}
				if(strcmp(x_nr,"LSPD",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /creercostume LSPD [playerid/PartOfName]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(GetDistanceBetweenPlayers(playerid,giveplayerid) <= 5 && PlayerInfo[playerid][pMatsf] >= 4)
					    {
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            format(string, sizeof(string), " Vous avez crée un costume du LSPD pour %s.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), " %s vous à donné le costume du LSPD (Utilisable pendant 1h de jeu seulement).",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						    SetPlayerSkin(giveplayerid, 280);
					        PlayerInfo[giveplayerid][pskinf] = 3600;
					        PlayerInfo[playerid][pMatsf] -= 4;
					        return 1;
						}
					}
					else if(GetDistanceBetweenPlayers(playerid,giveplayerid) > 5 && PlayerInfo[playerid][pMatsf] < 4)
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Ce joueur est trop loin / Vous n'avez pas assez de materiaux !");
					    return 1;
					}
				}
                 else if(strcmp(x_nr,"fbi",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /creercostume fbi [playerid/PartOfName]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(GetDistanceBetweenPlayers(playerid,giveplayerid) <= 5 && PlayerInfo[playerid][pMatsf] >= 4)
					    {
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            format(string, sizeof(string), " Vous avez crée un costume du FBI pour %s.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), " %s vous à donné le costume du FBI (Utilisable pendant 1h de jeu seulement).",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        SetPlayerSkin(giveplayerid, 286);
					        PlayerInfo[giveplayerid][pskinf] = 3600;
					        PlayerInfo[playerid][pMatsf] -= 4;
					        return 1;
						}
					}
					else if(GetDistanceBetweenPlayers(playerid,giveplayerid) > 5 && PlayerInfo[playerid][pMatsf] < 4)
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Ce joueur est trop loin / Vous n'avez pas assez de materiaux !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"ambulancier",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /creercostume ambulancier [playerid/PartOfName]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(GetDistanceBetweenPlayers(playerid,giveplayerid) <= 5 && PlayerInfo[playerid][pMatsf] >= 4)
					    {
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            format(string, sizeof(string), " Vous avez crée un costume d'ambuliancier pour %s.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), " %s vous à donné le costume d'ambulancier (Utilisable pendant 1h de jeu seulement).",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						    SetPlayerSkin(giveplayerid, 274);
					        PlayerInfo[giveplayerid][pskinfm] = 3600;
					        PlayerInfo[playerid][pMatsf] -= 4;
					        return 1;
						}
					}
					else if(GetDistanceBetweenPlayers(playerid,giveplayerid) > 5 && PlayerInfo[playerid][pMatsf] < 4)
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Ce joueur est trop loin / Vous n'avez pas assez de materiaux !");
					    return 1;
					}
				}
	        }
	        else if(PlayerInfo[playerid][pJob] != 24)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "  Vous n'êtes pas faussaire");
	            return 1;
	        }
	    }
	    return 1;
 	}
 	////////////// FAUSSAIRE

	if(strcmp(cmd, "/rapport", true) == 0 || strcmp(cmd, "/report", true) == 0 || strcmp(cmd, "/repport", true) == 0)
	{
    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/re)port [playerid/PartOfName du joueur que vous voulez rapporté] [texte]");
				return 1;
			}
			giveplayerid = strval(tmp);
			GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
           			new length = strlen(cmdtext);
					while ((idx < length) && (cmdtext[idx] <= ' '))
					{
						idx++;
					}
					new offset = idx;
					new result[128];
					while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
					{
						result[idx - offset] = cmdtext[idx];
						idx++;
					}
					result[idx - offset] = EOS;
					if(!strlen(result))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/re)port [playerid/PartOfName du joueur que vous voulez rapporté] [texte]");
						return 1;
					}
		         	format(string, sizeof(string), "%s (%d) a rapporté %s (%d): %s",sendername, playerid, giveplayer, giveplayerid, (result));
		        	ABroadCast(COLOR_LIGHTRED,string,1);
		        	SendClientMessage(playerid, COLOR_YELLOW, "Votre message a été transmis aux Admins connectés.");
	        	}
	       	}
	       	else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté !");
	            return 1;
	        }
	    }
	    return 1;
	}
	if(strcmp(cmd, "/help", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			SendClientMessage(playerid, COLOR_GREEN,"____________________Liste des Commandes Utiles________________________");
			SendClientMessage(playerid, COLOR_WHITE,"** Comprendre le RolePlay : /aiderp /metagame /powergame");
			SendClientMessage(playerid, COLOR_WHITE,"** Général : /regles /changerpass /report /question /stats /vetements /atm /retirer /deposer /compte");
			SendClientMessage(playerid, COLOR_WHITE,"** Autre : /aidetel /aide /aidemaison /aidevehicule /aidelocation /aidebiz /aidechef /aidepeche /aidecuisine /aideirc");
			SendClientMessage(playerid, COLOR_WHITE,"** Autre : /aidechat /aidekidnaping");
			SendClientMessage(playerid, COLOR_WHITE,"** Autre : Pour plus d'informations : http://u2c-rp.forum-pro.fr");
		}
		return 1;
    }

	if (strcmp("/aide", cmdtext, true, 10) == 0) // Menu aide
	{
		ShowPlayerDialog(playerid,menuaide,DIALOG_STYLE_LIST,"Aide","Géneral\nFaction\nJob\nMaison\nVoiture\nComprendre le RolePlay\nAutre\n","Ouvrir","Fermer");
		return 1;
	}
	if(strcmp(cmd, "/braquageon", true) == 0 || strcmp(cmd, "/activerbraquage", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
			    if(braquerauto == 0)
			    {
                    braquageencours = 0;
			        braquerauto = 1;
			    	Flicservice += 2;
			    	SendClientMessage(playerid, COLOR_GRAD1, "Vous avez permis les braquages !");
			      	format(string, sizeof(string), "%s à autorisé la permission de braquer.", sendername);
					ABroadCast(COLOR_YELLOW,string,1);
			    }
			    else if(braquerauto == 1)
			    {
                    braquageencours = 1;
       				braquerauto = 0;
			        Flicservice -= 2;
			        SendClientMessage(playerid, COLOR_GRAD1, "Vous avez retiré la permission de braquer !");
			      	format(string, sizeof(string), "%s à retiré la permission de braquer.", sendername);
					ABroadCast(COLOR_YELLOW,string,1);
			    }
			}
			else
			{
				SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé à utiliser cette commande!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/resetrobtimer", true) == 0 || strcmp(cmd, "/razbraquagetemps", true) == 0 || strcmp(cmd, "/razbraquagetemp", true) == 0) // Bye Mehtab
	{
		if (PlayerInfo[playerid][pAdmin] < 1337)
	    {
		    SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas autorisé a utiliser cette commande");
		    return 1;
	    }
		tmp = strtok(cmdtext,idx);
		if (!strlen(tmp))
	    {
		    SendClientMessage(playerid, COLOR_GREY, "USAGE: /resetrobtimer [playerid/partOfName]");
		    return 1;
	    }
		giveplayerid = ReturnUser(tmp);
		if (giveplayerid == INVALID_PLAYER_ID)
	    {
		    SendClientMessage(playerid, COLOR_GREY, "Ce joueur est hors-ligne.");
		    return 1;
	    }
	    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
		PlayerInfo[giveplayerid][pRobTime] = 0;
		PlayerInfo[giveplayerid][probbank] = 0;
		format(string, sizeof(string), "[ADMIN]: L'Admin %s a remis a 0 le temps d'attente de %s (%d) pour pouvoir braquer", sendername,giveplayer, giveplayerid);
		ABroadCast(COLOR_YELLOW, string, 5);
	    format(string, sizeof(string), "Vous avez mis a 0 le temps d'attente de %s (%d) pour pouvoir braquer.", giveplayer,giveplayerid);
	    SendClientMessage(playerid, COLOR_LIGHTRED, string);
	    SendClientMessage(giveplayerid, TEAM_GROVE_COLOR, "** Un Admin vous a remis votre temps d'attente pour pouvoir braquer a 0.");
	    SendClientMessage(giveplayerid, TEAM_GROVE_COLOR, "** Vous pouvez a nouveau braquer.");
		return 1;
	}
	if(strcmp(cmd, "/braquer", true) == 0 || strcmp(cmd, "/braquage", true) ==0) // By Anthony Spark (Foo/FullDrive)
	 {
	    if(!(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pLeader] == 3))
	    {
			if(PlayerToPoint(3, playerid, 2144.0420,1638.5311,993.5761))// Coordonnées de la banque
			{
                if(Braqueur[playerid] != 0)
                {
                    SendClientMessage(playerid,COLOR_GREEN,"Tu es déjà en train de braquer !");
                    return 1;
                }
                if(PlayerInfo[playerid][pLevel] < 3)
                {
                    return SendClientMessage(playerid, COLOR_GRAD1, "Vous devez être minimum Level 3 pour pouvoir braquer la Banque.");
                }
                if(braquageencours == 1)
				{
					return SendClientMessage(playerid, COLOR_YELLOW, "Un endroit est déjà en train d'être braqué.");
				}
                NombreBraqueur ++;
                Braqueur[playerid] = NombreBraqueur
                if(NombreBraqueur < 2)
                {
                    new string1[128];
                    format(string1,sizeof(string1),"Il ne manque plus que %d braqueur(s) pour pouvoir commencer le braquage.",2 - NombreBraqueur);
                    SendClientMessage(playerid,COLOR_GREEN,string1);
                    return 1;
                }
           		if(PlayerInfo[playerid][pRobTime] >= 1)
	          	{
		            SendClientMessage(playerid, COLOR_GREY, " Vous avez déja essayé ou cambriolé un lieu récemment, attendez encore un moment s'il vous plait.");
	        	    return 1;
	        	}
				if(!(Flicservice >= 2))
				{
				    return SendClientMessage(playerid,COLOR_RED,"[BRAQUEURS]: Il faut au moins 2 policiers en service pour pouvoir braquer la Banque.");
				}
                if (GetPlayerWeapon(playerid) <= 1)
              	{
                  	SendClientMessage(playerid, COLOR_LIGHTRED, "Vous devez être armé. (et tenir votre arme en main)");
                 	return 1;
            	}
				if(PlayerInfo[playerid][probbank] >= 1)// Ceux qui ne peuvent pas braquer
				{
					return SendClientMessage(playerid, COLOR_YELLOW, "Vous avez déjà braqué la banque récemment ! Veuillez patienter encore un moment s'il vous plait.");
				}
				if(PlayerInfo[playerid][probbank] == 0)//Ceux qui peuvent braquer
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					ApplyAnimation(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 0, 0, 0, 0, 0);
					SendClientMessage(playerid, COLOR_RED, " ");
					PlayerInfo[playerid][probbank] += 3600; // 86400 secondes : 24h
					format(string, sizeof(string), "* Infos: Un braquage a lieu à Los Santos ! *", sendername);
					SendClientMessageToAll(COLOR_BLUE, string);
					if(PlayerToPoint(3, playerid,2144.0420,1638.5311,993.5761))
					{
					    format(string, sizeof(string), "* Infos: Alarme déclenchée ! *", sendername);
					}
					else
					{
					    format(string, sizeof(string), "* Infos: Alarme déclenchée ! *", sendername);
					}
					format(string, sizeof(string), "*** A TOUTES LES UNITES : Un braquage à lieu à la banque ! ***");
					SendRadioMessage(1, TEAM_RADIO_COLOR, string);
					SendRadioMessage(2, TEAM_RADIO_COLOR, string);
					SendRadioMessage(18, TEAM_RADIO_COLOR, string);
					SendClientMessageToAll(COLOR_BLUE, string);
				    format(string, 256, "ADMIN WARNING : %s braque la Banque.", sendername);
		            ABroadCast(COLOR_LIGHTRED,string,1);
					WantedPoints[playerid]+=10; SetPlayerCriminal(playerid,255, "Braquage de la Banque");
			    	SendClientMessage(playerid, COLOR_YELLOW, "Il vous faut 6 minutes pour remplir votre sac de billets au complet !");
			     	SendClientMessage(playerid, COLOR_LIGHTBLUE, "Attention ! Durant ce temps imparti, les flics pourront rentrer et vous descendre !");
	     			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Vous devrez donc resister 6 minutes dans la banque tout en agissant RolePlay.");
	     			SendClientMessage(playerid, COLOR_LIGHTRED, "Si vous quittez la zone, le braquage sera échoué.");
					GotoCheck[playerid] = 100;
					lathune = SetTimerEx("DonnerArgentBraquage",5 * 60000,0,"d",playerid);
					SetTimer("Braquage", 10 * 60000, 0);
					braquageencours = 1;
					ilbraque[playerid] = 1;
					format(string, sizeof(string), "* QG: L'uniforme SWAT est maintenant autorisé *", sendername);
			        SendRadioMessage(1, TEAM_BLUE_COLOR, string);
					authorizeswat = 1;
					format(string, sizeof(string), "* QG: L'uniforme tactique est maintenant autorisé *", sendername);
			        SendRadioMessage(2, TEAM_BLUE_COLOR, string);
					authorizetactical = 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_YELLOW, "Vous ne pouvez pas braquer cet endroit!");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_YELLOW, "Vous ne pouvez pas braquer la banque car vous êtes un policier.");
		}
		return 1;
	}
	if(strcmp(cmd, "/braqueur", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous devez être connecté!");
	            return 1;
	        }
			if (PlayerInfo[playerid][probbank] <= 2000)
			{
				SendClientMessage(playerid, COLOR_RED, "Vous ne braquez pas");
				return 1;
			}
			if(!PlayerToPoint(60, playerid,2144.0420,1638.5311,993.5761) || PlayerToPoint(40, playerid,-29.0377,-86.6471,1003.5542) || PlayerToPoint(40, playerid,-27.6196,-53.8779,1003.5469) || PlayerToPoint(40, playerid,-28.5354,-85.5751,1003.5542))// Coordonnées de la banque
			{
			    SendClientMessage(playerid, COLOR_RED, "Vous n'êtes pas au panneau de controle");
				return 1;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /braqueur [Tchat]");
				return 1;
			}
            SendClientMessageToAll(COLOR_RED, "La ligne des hauts parleurs de la banque a été coupéé et vous entendez :");
			format(string, sizeof(string), "[BRAQUEURS] %s: %s " , sendername, result);
			OOCOff(COLOR_GREEN,string);
			printf("%s", string);
		}
		return 1;
	}

	if(strcmp(cmd, "/servicefouriere", true) ==0 || strcmp(cmd, "/serf", true) ==0) // By LordMan
	{
		if(IsPlayerConnected(playerid))
		{
		    if(gPlayerLogged[playerid] == 0)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "Vous devez être connecté!");
				return 1;
		    }
		    if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)
		    {
		        if(fouriereduty[playerid] == 0)
		        {
		            fouriereduty[playerid] = 1;
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "Fouriere ouverte ! Réclamation : [ID:%d]%s", playerid, sendername);
					ABroadCast(COLOR_YELLOW,string,1);
					return 1;
		        }
		        else if(fouriereduty[playerid] == 1)
		        {
		            fouriereduty[playerid] = 0;
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "Fouriere fermée ! Réclamation :[ID:%d]%s", playerid, sendername);
					ABroadCast(COLOR_YELLOW,string,1);
					return 1;
		        }
		    }
		    else
		    {
		        SendClientMessage(playerid, COLOR_GREY, "Tu n'es pas un flic!");
		        return 1;
		    }
		}
	    return 1;
	}

	if(strcmp(cmd, "/pirater", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous devez être connecté !");
	            return 1;
	        }
			if (!(PlayerInfo[playerid][pLeader] == 8 || PlayerInfo[playerid][pMember] == 8))
			{
				SendClientMessage(playerid, COLOR_RED, "Tu ne sais pas pirater !");
				return 1;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /pirater [Tchat]");
				return 1;
			}
            SendClientMessageToAll(COLOR_RED, "Les haut parleurs de San-News s'arêtèrent  vous entendez :");
			format(string, sizeof(string), "[San-News] %s: %s " , sendername, result);
			OOCOff(COLOR_GREEN,string);
			printf("%s", string);
		}
		return 1;
	}
	if(strcmp(cmd, "/camerarusse", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
            if(PlayerInfo[playerid][pMember] == 15 || PlayerInfo[playerid][pLeader] == 15)
            {
                if(!(PlayerToPoint(20.0,playerid,2548.4409,-1284.2688,1060.9844) || PlayerToPoint(3.0,playerid,784.5344,-1144.6193,29.2377) || PlayerToPoint(3.0,playerid,1285.6821,-2048.4080,67.563)))
				{
				    SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas dans votre QG!");
				    return 1;
				}
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /camerarusse [numero 1 - 4]  (4 = OFF)");
					return 1;
				}
				new number = strval(tmp);
				if(number < 1 || number > 45) { SendClientMessage(playerid, COLOR_GREY, "Le numero de camera doit être compris entre 1 et 4 !"); return 1; }
				TogglePlayerControllable(playerid, 0);
				GetPlayerPos(playerid, Unspec[playerid][Coords][0],Unspec[playerid][Coords][1],Unspec[playerid][Coords][2]);
				if(number == 1) { SetPlayerCameraPos(playerid, 1288.7086,-2047.7198,64.7759); SetPlayerInterior(playerid,0); PlayerInfo[playerid][pInt] = 0; SetPlayerPos(playerid, 1285.6821,-2048.4080,67.5637); SetPlayerCameraLookAt(playerid, 1290.0582,-2056.6077,58.5997); }
				if(number == 2) { SetPlayerCameraPos(playerid, 787.8352,-1129.6610,29.6786); SetPlayerInterior(playerid,0); PlayerInfo[playerid][pInt] = 0; SetPlayerPos(playerid, 784.5344,-1144.6193,29.2377); SetPlayerCameraLookAt(playerid, 792.7584,-1138.8623,23.6812); }
				if(number == 3) { SetPlayerCameraPos(playerid, 763.9212,-1087.2712,32.2839); SetPlayerInterior(playerid,0); PlayerInfo[playerid][pInt] = 0; SetPlayerPos(playerid, 784.5344,-1144.6193,29.2377); SetPlayerCameraLookAt(playerid, 745.6546,-1129.1394,24.8726); }
				else if(number == 4)
				{
					TogglePlayerControllable(playerid, 1);
					SetPlayerPos(playerid, 2548.4409,-1284.2688,1060.9844);
					SetPlayerInterior(playerid,2);
					PlayerInfo[playerid][pInt] = 2;
					SetCameraBehindPlayer(playerid);
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Tu n'es pas de la Russkovf!");
			    return 1;
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/piratercam", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
            if(PlayerInfo[playerid][pMember] == 14 || PlayerInfo[playerid][pLeader] == 14)
            {
                if(!(PlayerToPoint(20.0,playerid,962.0352,-53.4519,1001.1246) || PlayerToPoint(3.0,playerid,2572.8728,1303.3295,17.0912)))
				{
				    SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas dans votre QG!");
				    return 1;
				}
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /piratercam [numero 1 - 2]  (2 = OFF)");
					return 1;
				}
				new number = strval(tmp);
				if(number < 1 || number > 2) { SendClientMessage(playerid, COLOR_GREY, "Le numero de camera ne peux pas être en desous de 1 et au desus 2!"); return 1; }
				TogglePlayerControllable(playerid, 0);
				GetPlayerPos(playerid, Unspec[playerid][Coords][0],Unspec[playerid][Coords][1],Unspec[playerid][Coords][2]);
				if(number == 1) { SetPlayerCameraPos(playerid, 2608.6311,1331.5015,21.7452); SetPlayerInterior(playerid,0); PlayerInfo[playerid][pInt] = 0; SetPlayerPos(playerid, 2572.8728,1303.3295,17.0912); SetPlayerCameraLookAt(playerid, 2577.8352,1321.9323,10.8203); }
				else if(number == 2)
				{
					TogglePlayerControllable(playerid, 1);
					SetPlayerPos(playerid, 962.0352,-53.4519,1001.1246);
					SetPlayerInterior(playerid,3);
					PlayerInfo[playerid][pInt] = 3;
					SetCameraBehindPlayer(playerid);
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Tu n'es pas de la MS 13 !");
			    return 1;
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/cameracosa", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
            if(PlayerInfo[playerid][pMember] == 14 || PlayerInfo[playerid][pLeader] == 14)
            {
                if(!(PlayerToPoint(20.0,playerid,962.0352,-53.4519,1001.1246) || PlayerToPoint(3.0,playerid,1440.1735,2776.3992,10.8203)))
				{
				    SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas au QG");
				    return 1;
				}
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /camera [numero 1 - 5]  (5 = OFF)");
					return 1;
				}
				new number = strval(tmp);
				if(number < 1 || number > 5) { SendClientMessage(playerid, COLOR_GREY, "Le numero de camera ne peux pas être en desous de 1 et au desus 5!"); return 1; }
				TogglePlayerControllable(playerid, 0);
				GetPlayerPos(playerid, Unspec[playerid][Coords][0],Unspec[playerid][Coords][1],Unspec[playerid][Coords][2]);
				if(number == 1) { SetPlayerCameraPos(playerid, 1490.5414,2773.5083,17.3198); SetPlayerInterior(playerid,0); PlayerInfo[playerid][pInt] = 0; SetPlayerPos(playerid, 1440.1735,2776.3992,10.8203); SetPlayerCameraLookAt(playerid, 1511.1946,2772.1790,10.7738); }
				else if(number == 2) { SetPlayerCameraPos(playerid, 1444.6862,2773.0981,30.2495); SetPlayerInterior(playerid,0); PlayerInfo[playerid][pInt] = 0; SetPlayerPos(playerid, 1440.1735,2776.3992,10.8203); SetPlayerCameraLookAt(playerid, 1453.8636,2773.9880,27.6104); }
				else if(number == 3) { SetPlayerCameraPos(playerid, 1435.3160,2789.9360,22.8623); SetPlayerInterior(playerid,0); PlayerInfo[playerid][pInt] = 0; SetPlayerPos(playerid, 1440.1735,2776.3992,10.8203); SetPlayerCameraLookAt(playerid, 1443.0662,2786.8584,27.6104); }
				else if(number == 4) { SetPlayerCameraPos(playerid, 1452.4803,2773.7839,27.4441); SetPlayerInterior(playerid,0); PlayerInfo[playerid][pInt] = 0; SetPlayerPos(playerid, 1440.1735,2776.3992,10.8203); SetPlayerCameraLookAt(playerid, 1437.0314,2796.6201,27.6104); }
				else if(number == 5)
				{
					TogglePlayerControllable(playerid, 1);
					SetPlayerPos(playerid, 962.0352,-53.4519,1001.1246);
					SetPlayerInterior(playerid,3);
					PlayerInfo[playerid][pInt] = 3;
					SetCameraBehindPlayer(playerid);
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas policier!");
			    return 1;
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/pma", true)==0 || strcmp(cmd, "/question", true) == 0 || strcmp(cmd, "/i", true) == 0 || strcmp(cmd, "/irc", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "UTILISATION: /question [text]");
				return 1;
			}
			format(string, sizeof(string), "Question %s(%d): %s", sendername, playerid, (result));
			ABroadCast(COLOR_ASKQ,string,1);
			SendClientMessage(playerid, COLOR_YELLOW, "Vôtre question a été envoyée aux Admins connectés.");
	    }
	    return 1;
	}

	// HANDSUP
 	if(strcmp(cmd, "/levermains", true) == 0) {
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
		    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_HANDSUP);
  	  		return 1;
		}
	}

	#if defined DISALLOW_ANIMS_INVEHICLES
	    if (GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) return SendClientMessage(playerid, RED, "You are not allowed to use animations inside a vehicle");
	#endif

	// carjacked
    if(strcmp(cmd, "/carjacked1", true) == 0) {
		 LoopingAnim(playerid,"PED","CAR_jackedLHS",4.0,0,1,1,1,0);
         return 1;
    }

    // carjacked
    if(strcmp(cmd, "/carjacked2", true) == 0) {
		 LoopingAnim(playerid,"PED","CAR_jackedRHS",4.0,0,1,1,1,0);
         return 1;
    }

	#if defined DISALLOW_ANIMS_INVEHICLES
	    if (GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) return SendClientMessage(playerid, RED, "You are not allowed to use animations inside a vehicle");
	#endif

    // CELLPHONE IN
 	if(strcmp(cmd, "/cellin", true) == 0) {
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
        return 1;
    }

    // CELLPHONE OUT
 	if(strcmp(cmd, "/cellout", true) == 0) {
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
        return 1;
    }

    // Drunk
    if(strcmp(cmd, "/drunk", true) == 0) {
		LoopingAnim(playerid,"PED","WALK_DRUNK",4.1,1,1,1,1,1);
		return 1;
    }

	// Place a Bomb
    if (strcmp("/bomb", cmdtext, true) == 0) {
		ClearAnimations(playerid);
		LoopingAnim(playerid, "BOMBER","BOM_Plant_Loop",4.0,1,0,0,1,0); // Place Bomb
		return 1;
	}
	// Police Arrest
    if (strcmp("/getarrested", cmdtext, true) == 0) {
	      LoopingAnim(playerid,"ped", "ARRESTgun", 4.0, 0, 1, 1, 1, -1); // Gun Arrest
		  return 1;
    }
	// Laugh
    if (strcmp("/rire", cmdtext, true) == 0) {
          LoopingAnim(playerid, "RAPPING", "Laugh_01", 4.0, 0, 0, 0, 0, 0); // Laugh
		  return 1;
	}
	// Laugh
    if (strcmp("/mdr", cmdtext, true) == 0) {
          LoopingAnim(playerid, "RAPPING", "Laugh_01", 4.0, 0, 0, 0, 0, 0); // Laugh
		  return 1;
	}
	// Rob Lookout
    if (strcmp("/lookout", cmdtext, true) == 0) {
          LoopingAnim(playerid, "SHOP", "ROB_Shifty", 4.0, 0, 0, 0, 0, 0); // Rob Lookout
		  return 1;
	}
	// Rob Threat
    if (strcmp("/robman", cmdtext, true) == 0) {
          LoopingAnim(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 1, 0, 0, 0, 0); // Rob
		  return 1;
	}
	// Arms crossed
    if (strcmp("/crossarms", cmdtext, true) == 0) {
          LoopingAnim(playerid, "COP_AMBIENT", "Coplook_loop", 4.0, 0, 1, 1, 1, -1); // Arms crossed
		  return 1;
	}
	// Lay Down
    if (strcmp("/lay", cmdtext, true) == 0) {
          LoopingAnim(playerid,"BEACH", "bather", 4.0, 1, 0, 0, 0, 0); // Lay down
		  return 1;
    }
	// Take Cover
    if (strcmp("/hide", cmdtext, true) == 0) {
          LoopingAnim(playerid, "ped", "cower", 3.0, 1, 0, 0, 0, 0); // Taking Cover
		  return 1;
	}
	// Vomit
    if (strcmp("/vomir", cmdtext, true) == 0) {
	      LoopingAnim(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0); // Vomit BAH!
		  return 1;
	}
	// Eat Burger
    if (strcmp("/eat", cmdtext, true) == 0) {
	      LoopingAnim(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0); // Eat Burger
		  return 1;
	}
	// Wave
    if (strcmp("/vague", cmdtext, true) == 0) {
	      LoopingAnim(playerid, "ON_LOOKERS", "wave_loop", 4.0, 1, 0, 0, 0, 0); // Wave
		  return 1;
	}
	// Wave
    if (strcmp("/wave", cmdtext, true) == 0) {
	      LoopingAnim(playerid, "ON_LOOKERS", "wave_loop", 4.0, 1, 0, 0, 0, 0); // Wave
		  return 1;
	}
	// Slap Ass
    if (strcmp("/slapass", cmdtext, true) == 0) {
   		LoopingAnim(playerid, "SWEET", "sweet_ass_slap", 4.0, 0, 0, 0, 0, 0); // Ass Slapping
 		return 1;
	}
	// Dealer
    if (strcmp("/deal", cmdtext, true) == 0) {
          LoopingAnim(playerid, "DEALER", "DEALER_DEAL", 4.0, 0, 0, 0, 0, 0); // Deal Drugs
		  return 1;
	}
	// Crack Dieing
    if (strcmp("/crack", cmdtext, true) == 0) {
          LoopingAnim(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0); // Dieing of Crack
		  return 1;
	}
	// Smoking animations
	if(strcmp(cmd, "/smokeanim", true) == 0)
    {
        if (!strlen(cmdtext[7])) return SendClientMessage(playerid,0xEFEFF7AA,"USAGE: /smoke [1-4]");
    	switch (cmdtext[7])
    	{
        	case '1': LoopingAnim(playerid,"SMOKING", "M_smklean_loop", 4.0, 1, 0, 0, 0, 0); // male
        	case '2': LoopingAnim(playerid,"SMOKING", "F_smklean_loop", 4.0, 1, 0, 0, 0, 0); //female
        	case '3': LoopingAnim(playerid,"SMOKING","M_smkstnd_loop", 4.0, 1, 0, 0, 0, 0); // standing-fucked
        	case '4': LoopingAnim(playerid,"SMOKING","M_smk_out", 4.0, 1, 0, 0, 0, 0); // standing
        	default: SendClientMessage(playerid,0xEFEFF7AA,"USAGE: /smoke [1-4]");
    	}
    	return 1;
    }
	// Sit
    if (strcmp("/groundsit", cmdtext, true) == 0 || strcmp("/gro", cmdtext, true) == 0) {
          LoopingAnim(playerid,"BEACH", "ParkSit_M_loop", 4.0, 1, 0, 0, 0, 0); // Sit
		  return 1;
    }
    // Idle Chat
    if(strcmp(cmd, "/chat", true) == 0) {
		 LoopingAnim(playerid,"PED","IDLE_CHAT",4.0,1,0,0,1,1);
         return 1;
    }
    // Fucku
    if(strcmp(cmd, "/fucku", true) == 0) {
		 LoopingAnim(playerid,"PED","fucku",4.0,0,0,0,0,0);
         return 1;
    }
    // Fucku
    if(strcmp(cmd, "/fuck", true) == 0) {
		 LoopingAnim(playerid,"PED","fucku",4.0,0,0,0,0,0);
         return 1;
    }
    // TaiChi
    if(strcmp(cmd, "/taichi", true) == 0) {
		 LoopingAnim(playerid,"PARK","Tai_Chi_Loop",4.0,1,0,0,0,0);
         return 1;
    }

    // ChairSit
    if(strcmp(cmd, "/assis", true) == 0) {
		 LoopingAnim(playerid,"PED","SEAT_down",4.1,0,1,1,1,0);
         return 1;
    }

    // Fall on the ground
    if(strcmp(cmd, "/tomber", true) == 0) {
		 LoopingAnim(playerid,"PED","KO_skid_front",4.1,0,1,1,1,0);
         return 1;
    }

    // Fall
    if(strcmp(cmd, "/fallback", true) == 0) {
		 LoopingAnim(playerid, "PED","FLOOR_hit_f", 4.0, 1, 0, 0, 0, 0);
         return 1;
    }

    // kiss
    if(strcmp(cmd, "/kiss", true) == 0) {
		 LoopingAnim(playerid, "KISSING", "Playa_Kiss_02", 3.0, 1, 1, 1, 1, 0);
         return 1;
    }

    // kiss
    if(strcmp(cmd, "/bisous", true) == 0) {
		 LoopingAnim(playerid, "KISSING", "Playa_Kiss_02", 3.0, 1, 1, 1, 1, 0);
         return 1;
    }

    // Injujred
    if(strcmp(cmd, "/blesser", true) == 0) {
		 LoopingAnim(playerid, "SWEET", "Sweet_injuredloop", 4.0, 1, 0, 0, 0, 0);
         return 1;
    }

    // Homie animations
    if(strcmp(cmd, "/sup", true) == 0)
    {
        if (!strlen(cmdtext[5])) return SendClientMessage(playerid,0xEFEFF7AA,"USAGE: /sup [1-3]");
    	switch (cmdtext[5])
    	{
        	case '1': LoopingAnim(playerid,"GANGS","hndshkba",4.0,0,0,0,0,0);
         	case '2': LoopingAnim(playerid,"GANGS","hndshkda",4.0,0,0,0,0,0);
         	case '3': LoopingAnim(playerid,"GANGS","hndshkfa_swt",4.0,0,0,0,0,0);
        	default: SendClientMessage(playerid,0xEFEFF7AA,"USAGE: /sup [1-3]");
    	}
    	return 1;
    }

    // Rap animations
    if(strcmp(cmd, "/rap", true) == 0)
    {
        if (!strlen(cmdtext[5])) return SendClientMessage(playerid,0xEFEFF7AA,"USAGE: /rap [1-4]");
    	switch (cmdtext[5])
    	{
    	    case '1': LoopingAnim(playerid,"RAPPING","RAP_A_Loop",4.0,1,0,0,0,0);
        	case '2': LoopingAnim(playerid,"RAPPING","RAP_C_Loop",4.0,1,0,0,0,0);
        	case '3': LoopingAnim(playerid,"GANGS","prtial_gngtlkD",4.0,1,0,0,0,0);
        	case '4': LoopingAnim(playerid,"GANGS","prtial_gngtlkH",4.0,1,0,0,1,1);
        	default: SendClientMessage(playerid,0xEFEFF7AA,"USAGE: /rap [1-4]");
    	}
    	return 1;
    }

    // Violence animations
    if(strcmp(cmd, "/push", true) == 0) {
		 LoopingAnim(playerid,"GANGS","shake_cara",4.0,0,0,0,0,0);
         return 1;
    }

    if(strcmp(cmd, "/akick", true) == 0) {
		 LoopingAnim(playerid,"POLICE","Door_Kick",4.0,0,0,0,0,0);
         return 1;
    }

    if(strcmp(cmd, "/lowbodypush", true) == 0) {
		 LoopingAnim(playerid,"GANGS","shake_carSH",4.0,0,0,0,0,0);
         return 1;
    }

    // Spray
    if(strcmp(cmd, "/spray", true) == 0) {
		 LoopingAnim(playerid,"SPRAYCAN","spraycan_full",4.0,0,0,0,0,0);
         return 1;
    }

    // Headbutt
    if(strcmp(cmd, "/headbutt", true) == 0) {
		 LoopingAnim(playerid,"WAYFARER","WF_Fwd",4.0,0,0,0,0,0);
         return 1;
    }

    // Medic
    if(strcmp(cmd, "/medic", true) == 0) {
		 LoopingAnim(playerid,"MEDIC","CPR",4.0,0,0,0,0,0);
         return 1;
    }

    // KO Face
    if(strcmp(cmd, "/koface", true) == 0) {
		 LoopingAnim(playerid,"PED","KO_shot_face",4.0,0,1,1,1,0);
         return 1;
    }

    // KO Stomach
    if(strcmp(cmd, "/kostomach", true) == 0) {
		 LoopingAnim(playerid,"PED","KO_shot_stom",4.0,0,1,1,1,0);
         return 1;
    }

    // Jump for your life!
    if(strcmp(cmd, "/lifejump", true) == 0) {
		 LoopingAnim(playerid,"PED","EV_dive",4.0,0,1,1,1,0);
         return 1;
    }

    // Exhausted
    if(strcmp(cmd, "/exhaust", true) == 0) {
		 LoopingAnim(playerid,"PED","IDLE_tired",3.0,1,0,0,0,0);
         return 1;
    }

    if(strcmp(cmd, "/fatiguer", true) == 0) {
		 LoopingAnim(playerid,"PED","IDLE_tired",3.0,1,0,0,0,0);
         return 1;
    }
    // Left big slap
    if(strcmp(cmd, "/leftslap", true) == 0) {
		 LoopingAnim(playerid,"PED","BIKE_elbowL",4.0,0,0,0,0,0);
         return 1;
    }

    // Big fall
    if(strcmp(cmd, "/rollfall", true) == 0) {
		 LoopingAnim(playerid,"PED","BIKE_fallR",4.0,0,1,1,1,0);
         return 1;
    }

    // Locked
    if(strcmp(cmd, "/carlock", true) == 0) {
		 LoopingAnim(playerid,"PED","CAR_doorlocked_LHS",4.0,0,0,0,0,0);
         return 1;
    }

    // carjack
    if(strcmp(cmd, "/rcarjack1", true) == 0) {
		 LoopingAnim(playerid,"PED","CAR_pulloutL_LHS",4.0,0,0,0,0,0);
         return 1;
    }

    // carjack
    if(strcmp(cmd, "/lcarjack1", true) == 0) {
		 LoopingAnim(playerid,"PED","CAR_pulloutL_RHS",4.0,0,0,0,0,0);
         return 1;
    }

    // carjack
    if(strcmp(cmd, "/rcarjack2", true) == 0) {
		 LoopingAnim(playerid,"PED","CAR_pullout_LHS",4.0,0,0,0,0,0);
         return 1;
    }

    // carjack
    if(strcmp(cmd, "/lcarjack2", true) == 0) {
		 LoopingAnim(playerid,"PED","CAR_pullout_RHS",4.0,0,0,0,0,0);
         return 1;
    }

    // Hood frisked
    if(strcmp(cmd, "/hoodfrisked", true) == 0) {
		 LoopingAnim(playerid,"POLICE","crm_drgbst_01",4.0,0,1,1,1,0);
         return 1;
    }

    // Lighting cigarette
    if(strcmp(cmd, "/lightcig", true) == 0) {
		 LoopingAnim(playerid,"SMOKING","M_smk_in",3.0,0,0,0,0,0);
         return 1;
    }

    // Tap cigarette
    if(strcmp(cmd, "/tapcig", true) == 0) {
		 LoopingAnim(playerid,"SMOKING","M_smk_tap",3.0,0,0,0,0,0);
         return 1;
    }

    // Bat stance
    if(strcmp(cmd, "/bat", true) == 0) {
		 LoopingAnim(playerid,"BASEBALL","Bat_IDLE",4.0,1,1,1,1,0);
         return 1;
    }

    // Boxing
    if(strcmp(cmd, "/box", true) == 0) {
		 LoopingAnim(playerid,"GYMNASIUM","GYMshadowbox",4.0,1,1,1,1,0);
         return 1;
    }

    // Lay 2
    if(strcmp(cmd, "/lay2", true) == 0) {
		 LoopingAnim(playerid,"SUNBATHE","Lay_Bac_in",3.0,0,1,1,1,0);
         return 1;
    }

    // Gogogo
    if(strcmp(cmd, "/chant", true) == 0) {
		 LoopingAnim(playerid,"RIOT","RIOT_CHANT",4.0,1,1,1,1,0);
         return 1;
    }

    // Finger
    if(strcmp(cmd, "/doigt", true) == 0) {
		 LoopingAnim(playerid,"RIOT","RIOT_FUKU",2.0,0,0,0,0,0);
         return 1;
    }

    // Shouting
    if(strcmp(cmd, "/shouting", true) == 0) {
		 LoopingAnim(playerid,"RIOT","RIOT_shout",4.0,1,0,0,0,0);
         return 1;
    }

    // Cop stance
    if(strcmp(cmd, "/cop", true) == 0) {
		 LoopingAnim(playerid,"SWORD","sword_block",50.0,0,1,1,1,1);
         return 1;
    }

    // Elbow
    if(strcmp(cmd, "/elbow", true) == 0) {
		 LoopingAnim(playerid,"FIGHT_D","FightD_3",4.0,0,1,1,0,0);
         return 1;
    }

    // Knee kick
    if(strcmp(cmd, "/kneekick", true) == 0) {
		 LoopingAnim(playerid,"FIGHT_D","FightD_2",4.0,0,1,1,0,0);
         return 1;
    }

    // Fight stance
    if(strcmp(cmd, "/fstance", true) == 0) {
		 LoopingAnim(playerid,"FIGHT_D","FightD_IDLE",4.0,1,1,1,1,0);
         return 1;
    }

    // Ground punch
    if(strcmp(cmd, "/gpunch", true) == 0) {
		 LoopingAnim(playerid,"FIGHT_B","FightB_G",4.0,0,0,0,0,0);
         return 1;
    }

    // Air kick
    if(strcmp(cmd, "/airkick", true) == 0) {
		 LoopingAnim(playerid,"FIGHT_C","FightC_M",4.0,0,1,1,0,0);
         return 1;
    }

    // Ground kick
    if(strcmp(cmd, "/gkick", true) == 0) {
		 LoopingAnim(playerid,"FIGHT_D","FightD_G",4.0,0,0,0,0,0);
         return 1;
    }

    // Low throw
    if(strcmp(cmd, "/lowthrow", true) == 0) {
		 LoopingAnim(playerid,"GRENADE","WEAPON_throwu",3.0,0,0,0,0,0);
         return 1;
    }

    // Ground kick
    if(strcmp(cmd, "/highthrow", true) == 0) {
		 LoopingAnim(playerid,"GRENADE","WEAPON_throw",4.0,0,0,0,0,0);
         return 1;
    }

    // Deal stance
    if(strcmp(cmd, "/dealstance", true) == 0) {
		 LoopingAnim(playerid,"DEALER","DEALER_IDLE",4.0,1,0,0,0,0);
         return 1;
    }

    // Deal stance
    if(strcmp(cmd, "/pee", true) == 0) {
		 SetPlayerSpecialAction(playerid, SPECIAL_ACTION_PISSING);
         return 1;
    }
    // Deal stance
    if(strcmp(cmd, "/pisser", true) == 0) {
		 SetPlayerSpecialAction(playerid, SPECIAL_ACTION_PISSING);
         return 1;
    }

    // Knife animations
    if(strcmp(cmd, "/knife", true) == 0)
    {
        if (!strlen(cmdtext[7])) return SendClientMessage(playerid,0xEFEFF7AA,"USAGE: /knife [1-4]");
    	switch (cmdtext[7])
    	{
    	    case '1': LoopingAnim(playerid,"KNIFE","KILL_Knife_Ped_Damage",4.0,0,1,1,1,0);
        	case '2': LoopingAnim(playerid,"KNIFE","KILL_Knife_Ped_Die",4.0,0,1,1,1,0);
        	case '3': LoopingAnim(playerid,"KNIFE","KILL_Knife_Player",4.0,0,0,0,0,0);
        	case '4': LoopingAnim(playerid,"KNIFE","KILL_Partial",4.0,0,1,1,1,1);
        	default: SendClientMessage(playerid,0xEFEFF7AA,"USAGE: /knife [1-4]");
    	}
    	return 1;
    }

    if(strcmp(cmd, "/couteau", true) == 0)
    {
        if (!strlen(cmdtext[7])) return SendClientMessage(playerid,0xEFEFF7AA,"USAGE: /knife [1-4]");
    	switch (cmdtext[7])
    	{
    	    case '1': LoopingAnim(playerid,"KNIFE","KILL_Knife_Ped_Damage",4.0,0,1,1,1,0);
        	case '2': LoopingAnim(playerid,"KNIFE","KILL_Knife_Ped_Die",4.0,0,1,1,1,0);
        	case '3': LoopingAnim(playerid,"KNIFE","KILL_Knife_Player",4.0,0,0,0,0,0);
        	case '4': LoopingAnim(playerid,"KNIFE","KILL_Partial",4.0,0,1,1,1,1);
        	default: SendClientMessage(playerid,0xEFEFF7AA,"USAGE: /knife [1-4]");
    	}
    	return 1;
    }
    // Basket-ball
    if(strcmp(cmd, "/basket", true) == 0)
    {
        if (!strlen(cmdtext[8])) return SendClientMessage(playerid,0xEFEFF7AA,"USAGE: /basket [1-6]");
    	switch (cmdtext[8])
    	{
        	case '1': LoopingAnim(playerid,"BSKTBALL","BBALL_idleloop",4.0,1,0,0,0,0);
        	case '2': LoopingAnim(playerid,"BSKTBALL","BBALL_Jump_Shot",4.0,0,0,0,0,0);
        	case '3': LoopingAnim(playerid,"BSKTBALL","BBALL_pickup",4.0,0,0,0,0,0);
        	case '4': LoopingAnim(playerid,"BSKTBALL","BBALL_run",4.1,1,1,1,1,1);
        	case '5': LoopingAnim(playerid,"BSKTBALL","BBALL_def_loop",4.0,1,0,0,0,0);
        	case '6': LoopingAnim(playerid,"BSKTBALL","BBALL_Dnk",4.0,1,0,0,0,0);
        	default: SendClientMessage(playerid,0xEFEFF7AA,"USAGE: /basket [1-6]");
    	}
    	return 1;
    }

    // Reloading guns
    if(strcmp(cmd, "/reload", true) == 0)
    {
        if (!strlen(cmdtext[8])) return SendClientMessage(playerid,0xEFEFF7AA,"USAGE: /reload [deagle/smg/ak/m4]");
       	if (strcmp("deagle",cmdtext[8],true) == 0)
   	    {
   			LoopingAnim(playerid,"COLT45","colt45_reload",4.0,0,0,0,0,1);
 	    }
 	    else if (strcmp("smg",cmdtext[8],true) == 0 || strcmp("ak",cmdtext[8],true) == 0 || strcmp("m4",cmdtext[8],true) == 0)
   	    {
   			LoopingAnim(playerid,"UZI","UZI_reload",4.0,0,0,0,0,0);
 	    }
       	else SendClientMessage(playerid,0xEFEFF7AA,"USAGE: /reload [deagle/smg/ak/m4]");
    	return 1;
    }
     // Reloading guns
    if(strcmp(cmd, "/recharger", true) == 0)
    {
        if (!strlen(cmdtext[8])) return SendClientMessage(playerid,0xEFEFF7AA,"USAGE: /reload [deagle/smg/ak/m4]");
       	if (strcmp("deagle",cmdtext[8],true) == 0)
   	    {
   			LoopingAnim(playerid,"COLT45","colt45_reload",4.0,0,0,0,0,1);
 	    }
 	    else if (strcmp("smg",cmdtext[8],true) == 0 || strcmp("ak",cmdtext[8],true) == 0 || strcmp("m4",cmdtext[8],true) == 0)
   	    {
   			LoopingAnim(playerid,"UZI","UZI_reload",4.0,0,0,0,0,0);
 	    }
       	else SendClientMessage(playerid,0xEFEFF7AA,"USAGE: /reload [deagle/smg/ak/m4]");
    	return 1;
    }

    if(strcmp(cmd, "/gwalk", true) == 0)
    {
        if (!strlen(cmdtext[6])) return SendClientMessage(playerid,0xEFEFF7AA,"USAGE: /gwalk [1/2]");
        new style = strval(cmdtext[6]);
       	if (style == 1)
   	    {
   			LoopingAnim(playerid,"PED","WALK_gang1",4.1,1,1,1,1,1);
 	    }
 	    else if (style == 2)
   	    {
   			LoopingAnim(playerid,"PED","WALK_gang2",4.1,1,1,1,1,1);
 	    }
       	else SendClientMessage(playerid,0xEFEFF7AA,"USAGE: /gwalk [1/2]");
    	return 1;
    }

    //Aiming animation
    if(strcmp(cmd, "/aim", true) == 0)
    {
        if (!strlen(cmdtext[5])) return SendClientMessage(playerid,0xEFEFF7AA,"USAGE: /aim [1-.]");
    	switch (cmdtext[5])
    	{
        	case '1': LoopingAnim(playerid,"PED","gang_gunstand",4.0,1,1,1,1,1);
        	case '2': LoopingAnim(playerid,"PED","Driveby_L",4.0,0,1,1,1,1);
        	case '3': LoopingAnim(playerid,"PED","Driveby_R",4.0,0,1,1,1,1);
        	default: SendClientMessage(playerid,0xEFEFF7AA,"USAGE: /aim [1-3]");
    	}
    	return 1;
    }

    // Leaning animation
    if(strcmp(cmd, "/lean", true) == 0)
    {
        if (!strlen(cmdtext[6])) return SendClientMessage(playerid,0xEFEFF7AA,"USAGE: /lean [1-2]");
    	switch (cmdtext[6])
    	{
        	case '1': LoopingAnim(playerid,"GANGS","leanIDLE",4.0,0,1,1,1,0);
        	case '2': LoopingAnim(playerid,"MISC","Plyrlean_loop",4.0,0,1,1,1,0);
        	default: SendClientMessage(playerid,0xEFEFF7AA,"USAGE: /lean [1-2]");
    	}
    	return 1;
    }

    if(strcmp(cmd, "/run", true) == 0)
    {
		LoopingAnim(playerid,"PED","sprint_civi",floatstr(cmdtext[5]),1,1,1,1,1);
		printf("%f",floatstr(cmdtext[5]));
    	return 1;
    }

    // Clear
    if(strcmp(cmd, "/clearanim", true) == 0) {
		 //ClearAnimations(playerid);
		 ApplyAnimation(playerid, "CARRY", "crry_prtial", 1.0, 0, 0, 0, 0, 0);
         return 1;
    }

    // Strip
    if(strcmp(cmd, "/strip", true) == 0)
    {
        if (!strlen(cmdtext[7])) return SendClientMessage(playerid,0xEFEFF7AA,"USAGE: /strip [A-G]");
    	switch (cmdtext[7])
    	{
        	case 'a', 'A': LoopingAnim(playerid,"STRIP", "strip_A", 4.1, 1, 1, 1, 1, 1 );
        	case 'b', 'B': LoopingAnim(playerid,"STRIP", "strip_B", 4.1, 1, 1, 1, 1, 1 );
        	case 'c', 'C': LoopingAnim(playerid,"STRIP", "strip_C", 4.1, 1, 1, 1, 1, 1 );
        	case 'd', 'D': LoopingAnim(playerid,"STRIP", "strip_D", 4.1, 1, 1, 1, 1, 1 );
        	case 'e', 'E': LoopingAnim(playerid,"STRIP", "strip_E", 4.1, 1, 1, 1, 1, 1 );
        	case 'f', 'F': LoopingAnim(playerid,"STRIP", "strip_F", 4.1, 1, 1, 1, 1, 1 );
        	case 'g', 'G': LoopingAnim(playerid,"STRIP", "strip_G", 4.1, 1, 1, 1, 1, 1 );
        	default: SendClientMessage(playerid,0xEFEFF7AA,"USAGE: /strip [A-G]");
    	}
    	return 1;
    }

    // Bed Sleep R
    if(strcmp(cmd, "/inbedright", true) == 0) {
		 LoopingAnim(playerid,"INT_HOUSE","BED_Loop_R",4.0,1,0,0,0,0);
         return 1;
    }
    // Bed Sleep L
    if(strcmp(cmd, "/inbedleft", true) == 0) {
		 LoopingAnim(playerid,"INT_HOUSE","BED_Loop_L",4.0,1,0,0,0,0);
         return 1;
    }


	// START DANCING
 	if(strcmp(cmd, "/dance", true) == 0) {

			// Get the dance style param
      		tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid,0xFF0000FF,"USAGE: /dance [style 1-4]");
				return 1;
			}

			dancestyle = strval(tmp);
			if(dancestyle < 1 || dancestyle > 4) {
			    SendClientMessage(playerid,0xFF0000FF,"USAGE: /dance [style 1-4]");
			    return 1;
			}

			if(dancestyle == 1) {
			    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE1);
			} else if(dancestyle == 2) {
			    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE2);
			} else if(dancestyle == 3) {
			    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE3);
			} else if(dancestyle == 4) {
			    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE4);
			}
 	  		return 1;
	}
	if(!strcmp(cmd, "/volervehicule", true))
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(IsPlayerInAnyVehicle(playerid))
			{
	    		if(!engineOn[GetPlayerVehicleID(playerid)])
	    		{
	        		if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
					{
						return 1;
					}
					if(!IsAnOwnableCar(idcar))
					{
						SendClientMessage(playerid, COLOR_RED,"Ce véhicule ne peut pas être volé.");
						return 1;
					}
					if(tempvoiturevoler[playerid] != 0)
					{
					    SendClientMessage(playerid, COLOR_RED,"Tu ne peux pas voler une voiture avant deux minutes.");
						return 1;
					}
					if(VoitureASabot[idcar] == 1)
					{
					    return 1;
					}
					if(gEngine[playerid] == 1) { return 1; }

					new playerveh = GetPlayerVehicleID(playerid);
					PutPlayerInVehicle(playerid, playerveh, 0);
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), " %s raccorde les cables et tente de voler le véhicule.", sendername);
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetTimerEx("StartingTheVehicleVoler",2500,0,"i",playerid);
					GameTextForPlayer(playerid, "~w~Le Vehicule Demarre...",2500,3);
					gEngine[playerid] = 1;
					desactivetext[playerid] = 1;
					SetTimerEx("DesactiverSpeedo", 5000, 0, "i", playerid);
					return 1;
				}
			}
		}
		return 1;
	}

	if(!strcmp(cmd, "/clef", true) || !strcmp(cmd, "/demarrer", true))
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(IsPlayerInAnyVehicle(playerid))
			{
	    		if(!engineOn[GetPlayerVehicleID(playerid)])
	    		{
	        		if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
					{
						return 1;
					}
					/*if(pveh == 510 || pveh == 481 || pveh == 509) // Vélos
					{
						return 1;
					}
					if(pveh == 462) // Scooter
					{
						return 1;
					}*/
					if(CarInfo[idcar][cOwned]==0 && IsAnOwnableCar(idcar))
					{
						return 1;
					}
					if(idcar >= 135 && idcar <= 154)
					{
					    if(HireCar[playerid] != idcar)
					    {
							return 1;
						}
					}
					/*if(IsAPlane(idcar))
					{
					    return 1;
					}*/
					if(IsAHarvest(idcar))
					{
					    return 1;
					}
					if(IsADrugHarvest(idcar))
					{
					    return 1;
					}
					if(IsASweeper(idcar))
					{
					    return 1;
					}
					if(gEngine[playerid] == 1) { return 1; }

					new Float:health;
                    GetVehicleHealth(GetPlayerVehicleID(playerid),health);
                    new newcar = GetPlayerVehicleID(playerid);
                    if (health <= 500 && !IsABoat(newcar) && !IsABike(newcar) && !IsAPlane(newcar) && !IsAHarvest(newcar) && !IsADrugHarvest(newcar) && !IsASweeper(newcar))
                    {
                       if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
                            {
                        	new enginem, lights, alarm, doors, bonnet, boot, objective;
					    	GetVehicleParamsEx(GetPlayerVehicleID(playerid),enginem, lights, alarm, doors, bonnet, boot, objective);
                        	SetVehicleParamsEx(GetPlayerVehicleID(playerid), VEHICLE_PARAMS_OFF, lights, alarm, doors, bonnet, boot, objective);
                 	    	SendClientMessage(playerid, COLOR_LIGHT_BLUE, "Votre véhicule est HS, appeler un mécanicien pour qu'il répare votre moteur.");
                 	    	engineOn[GetPlayerVehicleID(playerid)] = false;
					    	return 1;
					        }
   	                }
					new playerveh = GetPlayerVehicleID(playerid);
					PutPlayerInVehicle(playerid, playerveh, 0);
					GetPlayerName(playerid, sendername, sizeof(sendername));
			        format(string, sizeof(string), "%s tourne ses clefs et essaye de démarrer le moteur de son véhicule.", sendername);
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SendClientMessage(playerid, COLOR_WHITE, "Clef tournée...");
					GameTextForPlayer(playerid, "~w~Le Moteur demarre...",2500,3);
					SetTimerEx("StartingTheVehicle",2500,0,"i",playerid);
					gEngine[playerid] = 1;
					return 1;
				}
				if(engineOn[GetPlayerVehicleID(playerid)])
	    		{
	        		if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
					{
						return 1;
					}
					/*if(pveh == 510 || pveh == 481 || pveh == 509) // Vélos
					{
						return 1;
					}*/
				    if(pveh == 462) // Scooter
					{
						return 1;
					}
					if(CarInfo[idcar][cOwned]==0 && IsAnOwnableCar(idcar))
					{
						return 1;
					}
					if(idcar >= 135 && idcar <= 154)
					{
					    if(HireCar[playerid] != idcar)
					    {
							return 1;
						}
					}
					if(IsAHarvest(idcar))
					{
					    return 1;
					}
					if(IsADrugHarvest(idcar))
					{
					    return 1;
					}
					/*if(IsAPlane(idcar))
					{
					    return 1;
					}*/
					if(IsASweeper(idcar))
					{
					    return 1;
					}
					engineOn[GetPlayerVehicleID(playerid)] = false;
					//RemovePlayerFromVehicle(playerid);
					//TogglePlayerControllable(playerid, 1);
					GetPlayerName(playerid, sendername, sizeof(sendername));
					SendClientMessage(playerid, COLOR_WHITE, "Moteur éteint !");
					format(string, sizeof(string), " %s éteint le moteur de son véhicule.", sendername);
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			        new engine,lights,alarm,doors,bonnet,boot,objective;
					GetVehicleParamsEx(idcar,engine, lights, alarm, doors, bonnet, boot, objective);
                  	SetVehicleParamsEx(idcar, VEHICLE_PARAMS_OFF, lights, alarm, doors, bonnet, boot, objective);
					gEngine[playerid] = 0;
/*					new keycar = PlayerInfo[playerid][pPcarkey];
					new keycar2 = PlayerInfo[playerid][pPcarkey2];
					new keycar3 = PlayerInfo[playerid][pPcarkey3];
					if(IsAnOwnableCar(idcar))
					{
	   					if(keycar == idcar)
						{
	   						for(new i = 0; i < MAX_PLAYERS; i++)
							{
			    				if (IsPlayerConnected(i))
			    				{
			       					SetVehicleParamsForPlayer(keycar,i,0,1);
			    				}
								GameTextForPlayer(playerid, "~w~Vehicle~n~~r~Auto-Locked", 10000, 3);
								CarInfo[keycar][cLock] = 1;
   							}
						}
						else if(keycar2 == idcar)
						{
	   						for(new i = 0; i < MAX_PLAYERS; i++)
							{
			    				if (IsPlayerConnected(i))
			    				{
			       					SetVehicleParamsForPlayer(keycar2,i,0,1);
			    				}
								GameTextForPlayer(playerid, "~w~Vehicle~n~~r~Auto-Locked", 10000, 3);
								CarInfo[keycar2][cLock] = 1;
   							}
						}
						else if(keycar3 == idcar)
						{
	   						for(new i = 0; i < MAX_PLAYERS; i++)
							{
			    				if (IsPlayerConnected(i))
			    				{
			       					SetVehicleParamsForPlayer(keycar3,i,0,1);
			    				}
								GameTextForPlayer(playerid, "~w~Vehicle~n~~r~Auto-Locked", 10000, 3);
								CarInfo[keycar3][cLock] = 1;
   							}
						}
					}*/
					return 1;
				}
			}
	    }
	    return 1;
	}
	if(!strcmp(cmd, "/aclef", true) || !strcmp(cmd, "/ademarrer", true))
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(IsPlayerInAnyVehicle(playerid))
			{
	    		if(!engineOn[GetPlayerVehicleID(playerid)])
	    		{
	        		if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
					{
						return 1;
					}
					if(PlayerInfo[playerid][pAdmin] < 2 )
	           		{
		        	    SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé a utiliser cette commande!");
	    	       	    return 1;
		        	}
					if(gEngine[playerid] == 1) { return 1; }

					new Float:health;
                    GetVehicleHealth(GetPlayerVehicleID(playerid),health);
                    new newcar = GetPlayerVehicleID(playerid);
                    if (health <= 500 && !IsABoat(newcar) && !IsABike(newcar) && !IsAPlane(newcar) && !IsAHarvest(newcar) && !IsADrugHarvest(newcar) && !IsASweeper(newcar))
                    {
                       if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
                            {
                        	new enginem, lights, alarm, doors, bonnet, boot, objective;
					    	GetVehicleParamsEx(GetPlayerVehicleID(playerid),enginem, lights, alarm, doors, bonnet, boot, objective);
                        	SetVehicleParamsEx(GetPlayerVehicleID(playerid), VEHICLE_PARAMS_OFF, lights, alarm, doors, bonnet, boot, objective);
                 	    	SendClientMessage(playerid, COLOR_LIGHT_BLUE, "Votre véhicule est HS, appeler un mécanicien pour qu'il répare votre moteur.");
                 	    	engineOn[GetPlayerVehicleID(playerid)] = false;
					    	return 1;
					        }
   	                }
					new playerveh = GetPlayerVehicleID(playerid);
					PutPlayerInVehicle(playerid, playerveh, 0);
					GetPlayerName(playerid, sendername, sizeof(sendername));
			        format(string, sizeof(string), "%s tourne ses clefs et essaye de démarrer le moteur de son véhicule.", sendername);
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SendClientMessage(playerid, COLOR_WHITE, "Clef tournée...");
					GameTextForPlayer(playerid, "~w~Le Moteur demarre...",2500,3);
					SetTimerEx("StartingTheVehicle",2500,0,"i",playerid);
					gEngine[playerid] = 1;
					return 1;
				}
				if(engineOn[GetPlayerVehicleID(playerid)])
	    		{
	        		if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
					{
						return 1;
					}
					if(PlayerInfo[playerid][pAdmin] < 2 )
	           		{
		        	    SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé a utiliser cette commande!");
	    	       	    return 1;
		        	}
					engineOn[GetPlayerVehicleID(playerid)] = false;
					//RemovePlayerFromVehicle(playerid);
					//TogglePlayerControllable(playerid, 1);
					GetPlayerName(playerid, sendername, sizeof(sendername));
					SendClientMessage(playerid, COLOR_WHITE, "Moteur éteint !");
					format(string, sizeof(string), " %s éteint le moteur de son véhicule.", sendername);
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			        new engine,lights,alarm,doors,bonnet,boot,objective;
					GetVehicleParamsEx(idcar,engine, lights, alarm, doors, bonnet, boot, objective);
                  	SetVehicleParamsEx(idcar, VEHICLE_PARAMS_OFF, lights, alarm, doors, bonnet, boot, objective);
					gEngine[playerid] = 0;
					return 1;
				}
			}
	    }
	    return 1;
	}
    if(strcmp(cmd,"/sortira",true)==0)
    {
                    GetPlayerName(playerid, sendername, sizeof(sendername));
                    format(string, sizeof(string), "%s baisse sa main et sort son arme.", sendername);
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 30.0, 5000);

					return 1;
	}
	if(strcmp(cmd,"/rangera",true)==0)
    {
                    GetPlayerName(playerid, sendername, sizeof(sendername));
                    format(string, sizeof(string), "%s baisse son arme et la range.", sendername);
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 30.0, 5000);

					return 1;
	}
//---------------------getip------------------
	if(strcmp(cmd, "/ip", true) == 0)
	{
		if (PlayerInfo[playerid][pAdmin] >= 2)
		{
			tmp = strtok(cmdtext,idx);
			new playersip[256];
			if(!strlen(tmp))
			{
  				SendClientMessage(playerid,COLOR_GRAD1,"USAGE: /ip [playerid/PartOfName]");
		        return 1;
			}
 			giveplayerid = ReturnUser(tmp);
 			GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			GetPlayerIp( giveplayerid,playersip,sizeof(playersip));
 			format(string, sizeof(string), "Joueur: %s IP: %s",giveplayer,playersip);
			SendClientMessage(playerid,COLOR_GRAD2,string);
		}
		return 1;
    }
	if (strcmp(cmd, "/momounban", true)==0 || strcmp(cmd, "/unban", true) == 0)
	{
	    if((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >=4)
	    {
	        tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp))
			{
		        SendClientMessage(playerid, COLOR_WHITE, "USAGE: /unban [PlayerName_PlayerLastName]");
	            return 1;
		 	}
		 	GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
		 	GetPlayerName(playerid, sendername, sizeof(giveplayer));
		 	format(string, 256, "%s a débanni %s", sendername, tmp);
		 	ABroadCast(COLOR_YELLOW,string,1);
			format(string, 256, "%s a débanni %s", sendername, tmp);
			printf(string);
			format(string,sizeof(string),"%s.ini",tmp);
			fremove(string);
			SendClientMessage(playerid, COLOR_WHITE, "Joueur Unban");
			SendRconCommand(string);
			SendRconCommand("reloadbans");
   			GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			GetPlayerName(playerid, sendername, sizeof(sendername));
		}
		return 1;
	}

//----------------------/momounbanip--------------
	if(strcmp(cmd,"/momounbanip",true)==0 || strcmp(cmd, "/unbanip", true) == 0)
	{
		if(PlayerInfo[playerid][pAdmin] >= 4)
		{
		    tmp = strtok(cmdtext,idx);
		    if(!strlen(tmp))
		    {
		        SendClientMessage(playerid,COLOR_GRAD1,"USAGE: /unbanip [playerid/PartOfName]");
		        return 1;
   			}

			format(string,sizeof(string),"unbanip %s",tmp);
			SendRconCommand(string);
			SendRconCommand("reloadbans");
   			GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, 256, " [ADMIN] %s à débanni l'IP %s", sendername,tmp);
			ABroadCast(COLOR_YELLOW,string,1);
		}
		return 1;
	}
//---------------------GIVE MATS-----------------
if(strcmp(cmd, "/donnermateriaux", true) ==0 || strcmp(cmd, "/givemats", true) == 0 || strcmp(cmd, "/vendremateriel", true) == 0)
	{
		if (PlayerInfo[playerid][pAdmin] >= 4)
		{
	    	if(IsPlayerConnected(playerid))
	    	{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /donnermatos [playerid/PartOfName] [montant]");
					return 1;
				}
				//giveplayerid = strval(tmp);
	        	giveplayerid = ReturnUser(tmp);
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /donnermatos [playerid/PartOfName] [montant]");
					return 1;
				}
				new playa;
				GetPlayerName(playa, sendername, sizeof(sendername));
				playa = ReturnUser(tmp);
				moneys = strval(tmp);
		    	PlayerInfo[giveplayerid][pMats] = moneys;
			    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), " %s donne un ensemble de matériaux à %s", sendername, giveplayer);
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				format(string, 256, "%s à donné %d materiaux à %s.", sendername,moneys,giveplayer);
				ABroadCast(COLOR_YELLOW,string,1);
			}
		}
		return 1;
	}
	//---------------------GIVE Faussaire MATS-----------------
	if(strcmp(cmd, "/donnerfmatos", true) == 0 || strcmp(cmd, "/vendrefmateriel", true) == 0 || strcmp(cmd, "/donnerfmateriel", true) == 0)
	{
		if (PlayerInfo[playerid][pAdmin] >= 4)
		{
	    	if(IsPlayerConnected(playerid))
	    	{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /donnerfmatos [playerid/PartOfName] [montant]");
					return 1;
				}
				//giveplayerid = strval(tmp);
	        	giveplayerid = ReturnUser(tmp);
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /donnerfmatos [playerid/PartOfName] [montant]");
					return 1;
				}
				new playa;
				GetPlayerName(playa, sendername, sizeof(sendername));
				playa = ReturnUser(tmp);
				moneys = strval(tmp);
		    	PlayerInfo[giveplayerid][pMatsf] = moneys;
			    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), " %s donne un ensemble de matériaux à %s", sendername, giveplayer);
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				format(string, 256, "%s à donné %d fmaterials à %s.", sendername,moneys,giveplayer);
				ABroadCast(COLOR_YELLOW,string,1);
			}
		}
		return 1;
	}
//-----------------------------------------------------------------------------
    if(strcmp(cmd, "/crash", true) == 0)
	{
	if(IsPlayerConnected(playerid))
	{
	tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
	{
    SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /crash [playerid/PartOfName]");
    return 1;
	}
	giveplayerid = ReturnUser(tmp);
	if (PlayerInfo[playerid][pAdmin] >= 1339)
	{
    if(IsPlayerConnected(giveplayerid))
    {
        if(giveplayerid != INVALID_PLAYER_ID)
        {
        CrashPlayer(playerid);

		format(string, sizeof(string), "Vous avez fait crashé \"%s's\" ", giveplayer);
  		SendClientMessage(playerid,COLOR_DBLUE, string);
		return 1;
	}
	}
	}
	else
	{
    format(string, sizeof(string), "   %d n'est pas connecté.", giveplayerid);
    SendClientMessage(playerid, COLOR_GRAD1, string);
	}
	}
	return 1;
	}

//--------------------------------[Explode]---------------------------------------------------------------------
	if(strcmp(cmd, "/explose", true) == 0 || strcmp(cmd, "/explode", true) == 0 || strcmp(cmd, "/exploser", true) == 0)
	{
	    GetPlayerName(playerid, sendername, sizeof(sendername));
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp) && PlayerInfo[playerid][pAdmin] >= 4)
		{
			SendClientMessage(playerid, COLOR_GREY, "/exploser [Playerid]");
			return 1;
		}
		giveplayerid = strval(tmp);
		GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[playerid][pAdmin] >= 3)
			{
			    if(IsPlayerConnected(giveplayerid))
			    {
					format(string, sizeof(string), "%s à explosé %s",sendername, giveplayer);
					//ABroadCast(COLOR_LIGHTRED,string,1);
					SendClientMessageToAll(COLOR_LIGHTRED, string);
					SetPlayerHealth(giveplayerid, 10);
					new Float:boomx, Float:boomy, Float:boomz;
					GetPlayerPos(giveplayerid,boomx, boomy, boomz);
					CreateExplosion(boomx, boomy , boomz, 7, 10);
					new PlayerName[30];
					GetPlayerName(playerid, PlayerName, 30);
					printf("%s à utilisé /exploser pour exploser %s", PlayerName, giveplayer);
				}
				else
				{
				    format(string, sizeof(string), "%d n'est pas connecté.", giveplayerid);
					SendClientMessage(playerid, COLOR_RED, string);
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_RED, "Vous n'êtes pas autorisé a utiliser cette commande!");
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_RED, "Vous devez être connecté pour utiliser cette commande!");
		}
		return 1;
	}
	if(strcmp(cmd, "/superexploser", true) == 0)
	{
	    GetPlayerName(playerid, sendername, sizeof(sendername));
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp) && PlayerInfo[playerid][pAdmin] >= 4)
		{
			SendClientMessage(playerid, COLOR_GREY, "/superexploser [Playerid]");
			return 1;
		}
		giveplayerid = strval(tmp);
		GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[playerid][pAdmin] >= 4)
			{
			    if(IsPlayerConnected(giveplayerid))
			    {
					format(string, sizeof(string), "%s à super explosé %s",sendername, giveplayer);
					//ABroadCast(COLOR_LIGHTRED,string,1);
					SendClientMessageToAll(COLOR_LIGHTRED, string);
		        	new Float:px, Float:py, Float:pz;
        	        GetPlayerPos(giveplayerid, px, py, pz);
		           	CreateExplosion(px+10, py, pz, 7, 100.0);
		           	CreateExplosion(px, py+10, pz, 7, 100.0);
		           	CreateExplosion(px-10, py, pz, 7, 100.0);
		         	CreateExplosion(px, py-10, pz, 7, 100.0);
		         	CreateExplosion(px, py, pz, 7, 100.0);
					new PlayerName[30];
					GetPlayerName(playerid, PlayerName, 30);
					printf("%s à utilisé /superexploser pour super exploser %s", PlayerName, giveplayer);
				}
				else
				{
				    format(string, sizeof(string), "%d n'est pas connecté.", giveplayerid);
					SendClientMessage(playerid, COLOR_RED, string);
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_RED, "Vous n'êtes pas autorisé a utiliser cette commande!");
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_RED, "Vous devez être connecté pour utiliser cette commande!");
		}
		return 1;
	}
//---------------------------------------------------------------------------------------------------------------
    if(strcmp(cmd, "/givedrugs", true) == 0 || strcmp(cmd, "/donnerdrogue", true) == 0 || strcmp(cmd, "/donnerdrogues", true) == 0)
	//if(strcmp(cmd, "/givedrugs", true) == 0)
	{
		if (PlayerInfo[playerid][pAdmin] >= 4)
		{
	    	if(IsPlayerConnected(playerid))
	    	{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /donnerdrogues [playerid/PartOfName] [montant]");
					return 1;
				}
				//giveplayerid = strval(tmp);
	        	giveplayerid = ReturnUser(tmp);
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /donnerdrogues [playerid/PartOfName] [montant]");
					return 1;
				}
				new playa;
				GetPlayerName(playa, sendername, sizeof(sendername));
				playa = ReturnUser(tmp);
				moneys = strval(tmp);
		    	PlayerInfo[giveplayerid][pDrugs] = moneys;
			    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, 256, "%s à donné %d de drogues à %s.", sendername,moneys,giveplayer);
				ABroadCast(COLOR_YELLOW,string,1);
				printf("%s à donné %d de drogues à %s.", sendername, moneys, giveplayer);
			}
		}
		return 1;
	}

	if(strcmp(cmdtext, "/guide", true) == 0) // by LordMan
	{
	    if (PlayerToPoint(4, playerid,1505.2416,-1694.5597,14.0469) || PlayerToPoint(4, playerid,1749.0442,-1861.8928,13.5770))
	    {
	    	TogglePlayerControllable(playerid, 0);
  			ShowMenuForPlayer(Guide, playerid);
			return 1;
		}
		else { SendClientMessage(playerid, COLOR_GREY,"Vous n'êtes pas au bon endroit."); }
	}

	/*if(strcmp(cmdtext, "/permi", true) == 0) // by LordMan
	{
	    if (PlayerToPoint(4, playerid,1490.3195,1305.6976,1093.2964))
	    {
	    	TogglePlayerControllable(playerid, 0);
  			ShowMenuForPlayer(Licenses, playerid);
			return 1;
		}
		else { SendClientMessage(playerid, COLOR_GREY,"Vous n'êtes pas a l'auto ecole."); }
	}*/
	 if(strcmp(cmdtext, "/aideanpe", true) == 0) // by LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pJob] == 0)
			{
				if (PlayerToPoint(4, playerid,362.1231,173.6424,1008.3828))
 				{
                    SendClientMessage(playerid, COLOR_YELLOW, "La secrétaire de la mairie vous tend un document :");
                    SendClientMessage(playerid, COLOR_GREEN, "L'A.N.P.E est l'endroit ou vous trouverez du travail.");
                    SendClientMessage(playerid, COLOR_GREEN, "Elle a été marquée sur votre map (Marqueur Rouge).");
	                SendClientMessage(playerid, COLOR_WHITE, "Info: Seulement des jobs légaux vous y seront proposés.");
	                SetPlayerCheckpoint(playerid,1722.7952,-1603.5991,15.1365,5.0);
					return 1;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY,"Vous n'êtes pas a la Mairie.");
 				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_RED, "Vous avez déjà un travail, utilisez /quitterjob avant.");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/jobsillegaux", true) == 0 || strcmp(cmd, "/illegaljobs", true) == 0 || strcmp(cmd, "/jobsillegal", true) == 0)
	//if(strcmp(cmd, "/jobslegal", true) == 0) // by LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pJob] == 0)
			{
				if (PlayerToPoint(4, playerid,2062.4106,-1556.5736,13.4482))
 				{
 					TogglePlayerControllable(playerid, 0);
 					ShowMenuForPlayer(IlegalJobs, playerid);
					return 1;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY,"Vous n'êtes pas au bon endroit.");
 				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_RED, "Vous avez déjà un travail, utilisez /quitterjob avant.");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/respawnthiscar", true) == 0 || strcmp(cmd, "/rtc", true) == 0) // by LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] < 2 )
			{
			    SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé a utiliser cette commande!");
			    return 1;
			}
			if(IsPlayerInAnyVehicle(playerid))
			{
			    GetPlayerName(playerid, sendername, sizeof(sendername));
			    format(string, 256, "%s vient de respawn ce véhicule %d (ID).",sendername,GetPlayerVehicleID(playerid));
				ABroadCast(COLOR_YELLOW,string,1);
				engineOn[GetPlayerVehicleID(playerid)] = false;
				gEngine[playerid] = 0;
			    new vehiculeid = GetPlayerVehicleID(playerid);
		    	SetVehicleToRespawn(vehiculeid);
   				RemovePlayerFromVehicle(playerid);
			    SendClientMessage(playerid, COLOR_GREY, "Véhicule Respawn !");
   			}
		}
		return 1;
	}
	if(strcmp(cmd, "/respawnallcars", true) == 0 || strcmp(cmd, "/rac", true) == 0) // by LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] < 3)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "   Vous n'êtes pas autorisé a utiliser cette commande!");
			    return 1;
			}
			new bool:unwanted[CAR_AMOUNT];
			for(new player=0; player<MAX_PLAYERS; player++)
     		{
            	if(IsPlayerInAnyVehicle(player)) { unwanted[GetPlayerVehicleID(player)]=true; }
     		}
			for(new car = 1; car <= 632; car++)
			{
				if(!unwanted[car])
				engineOn[car] = false;
				SetVehicleToRespawn(car);
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "[INFO] : Tous les véhicules inutilisées on été respawn par %s.", sendername);
			BroadCast(COLOR_WHITE,string);
		}
		return 1;
	}

	if(strcmp(cmd, "/respawnrentcars", true) == 0) // by LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] < 2)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "   Vous n'êtes pas autorisé a utiliser cette commande!");
			    return 1;
			}
			new bool:unwanted[CAR_AMOUNT];
			for(new player=0; player<MAX_PLAYERS; player++)
     		{
            	if(IsPlayerInAnyVehicle(player)) { unwanted[GetPlayerVehicleID(player)]=true; }
     		}
			for(new v = 158; v <= 177; v++)
			{
				if(!unwanted[v])
				engineOn[v] = false;
				SetVehicleToRespawn(v);
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "[INFO] : Toutes les Voitures de location inutilisées on été respawn par %s.", sendername);
			BroadCast(COLOR_WHITE,string);
		}
		return 1;
	}

	if(strcmp(cmd, "/respawnrentbikes", true) == 0) // by LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] < 2)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "   Vous n'êtes pas autorisé a utiliser cette commande!");
			    return 1;
			}
			new bool:unwanted[CAR_AMOUNT];
			for(new player=0; player<MAX_PLAYERS; player++)
     		{
            	if(IsPlayerInAnyVehicle(player)) { unwanted[GetPlayerVehicleID(player)]=true; }
     		}
			for(new v = 145; v <= 153; v++)
			{
				if(!unwanted[v])
				engineOn[v] = false;
			    SetVehicleToRespawn(v);
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "SERVER: Toutes les Motos de location inutilisées on été respawn par %s.", sendername);
			BroadCast(COLOR_WHITE,string);
		}
		return 1;
	}
	if(strcmp(cmd, "/forcer", true) == 0 || strcmp(cmd, "/detain", true) == 0 || strcmp(cmd, "/tirer", true) == 0)
	//if(strcmp(cmd, "/tirer", true) == 0) // by LordMan
	{
	    new suspect = GetClosestPlayer(playerid);
	    if(gTeam[playerid] == 2 || IsACop(playerid))
      {
				    if(GetDistanceBetweenPlayers(playerid,suspect) < 5)
					{
            tmp = strtok(cmdtext, idx);
             if (!strlen(tmp))
                 return SendClientMessage(playerid, COLOR_YELLOW, "UTILISATION: /forcer [ID] [Place : 1,2,3]");
             new person = strval(tmp);
             tmp = strtok(cmdtext, idx);
             if (!strlen(tmp))
                 return SendClientMessage(playerid, COLOR_YELLOW, "UTILISATION: /detain [ID] [1,2,3]");
             new seat = strval(tmp);
             new Float:pos[6];
             GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
             GetPlayerPos(person, pos[3], pos[4], pos[5]);
             format(string, sizeof(string), " L'Officier embarque le suspect dans le véhicule.");
             ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			 if (floatcmp(floatabs(floatsub(pos[0], pos[3])), 10.0) != -1 &&
             floatcmp(floatabs(floatsub(pos[1], pos[4])), 10.0) != -1 &&
             floatcmp(floatabs(floatsub(pos[2], pos[5])), 10.0) != -1) return false;

             PutPlayerInVehicle(person, GetPlayerVehicleID(playerid), seat);
          }
          else
          {
              SendClientMessage(playerid, COLOR_GREY, "Vous êtes trop loin du joueur pour pouvoir l'embarquer !");
           }
      }
      else
      {
           SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas un policier !");
        }

   return 1;
	}
//------------------------------[Vehicle Slap]---------------------------------------------------
	if(strcmp(cmd, "/vehslap", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "SYNTAX: /vehslap [playerid/PartOfName]");
				return 1;
			}
			new playa;
			new Float:shealth;
			giveplayerid = ReturnUser(tmp);
			new Float:slx, Float:sly, Float:slz;
			playa = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >=3)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
				        GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						GetPlayerHealth(playa, shealth);
						SetPlayerHealth(playa, shealth-0);
						GetVehiclePos(GetPlayerVehicleID(giveplayerid), slx, sly, slz);
						SetVehiclePos(GetPlayerVehicleID(giveplayerid), slx, sly, slz+550);
						PlayerPlaySound(playa, 1130, slx, sly, slz+5);
						printf("%s à slappé le véhicule de %s",sendername,  giveplayer);
						format(string, sizeof(string), "%s à slappé le véhicule de %s",sendername ,giveplayer);
						ABroadCast(COLOR_LIGHTRED,string,1);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "* Vous n'êtes pas autorisé a utiliser cette commande.");
			}
		}
		return 1;
	}
//------------------------------[super vehslap]--------------------------------------------------
	if(strcmp(cmd, "/supervehslap", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "SYNTAX: /supervehslap [playerid/PartOfName]");
				return 1;
			}
			new playa;
			new Float:shealth;
			giveplayerid = ReturnUser(tmp);
			new Float:slx, Float:sly, Float:slz;
			playa = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >=4)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
				        GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						GetPlayerHealth(playa, shealth);
						SetPlayerHealth(playa, shealth-0);
						GetVehiclePos(GetPlayerVehicleID(giveplayerid), slx, sly, slz);
						SetVehiclePos(GetPlayerVehicleID(giveplayerid), slx, sly, slz+1000);
						PlayerPlaySound(playa, 1130, slx, sly, slz+5);
						printf("%s à super slappé le véhicule de %s",sendername,  giveplayer);
						format(string, sizeof(string), "%s à super slappé le véhicule de %s",sendername ,giveplayer);
						ABroadCast(COLOR_LIGHTRED,string,1);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "* Vous n'êtes pas autorisé a utiliser cette commande.");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/cagoule", true) == 0 || strcmp(cmd, "/nomoff", true) == 0) // by LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	if(PlayerInfo[playerid][pMask] == 0)
	   	 	{
	   		     SendClientMessage(playerid, COLOR_GRAD1, "   Vous n'avez pas de Cagoule");
	   		     return 1;
	   		}
	   		if(PlayerInfo[playerid][pLevel] < 5)
	    	{
	       		SendClientMessage(playerid, COLOR_GRAD1, "  Vous devez être niveau 5 pour pouvoir mettre un ecagoule.");
	        	return 1;
	    	}
			for(new i = 0; i < MAX_PLAYERS; i++)
   			{
   		    	if(IsPlayerConnected(i))
   		    	{
		   			ShowPlayerNameTagForPlayer(i, playerid, 0);
				}
			}
			PlayerInfo[playerid][pMaskuse] = 1;
			SendClientMessage(playerid, COLOR_WHITE, "   Vous avez mis votre cagoule [Pour l'enlever /enlevercagoule ].");
			GetPlayerName(playerid, sendername, sizeof(sendername));
      		format(string, sizeof(string), " %s à mis sa cagoule.", sendername);
      		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		return 1;
	}

	if(strcmp(cmd, "/enlevercagoule", true) == 0 || strcmp(cmd, "/nomon", true) == 0) // by LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	if(PlayerInfo[playerid][pMask] == 0)
	    	{
	       		SendClientMessage(playerid, COLOR_GRAD1, "   Vous n'avez pas de cagoule");
	        	return 1;
	    	}
	    	if(PlayerInfo[playerid][pLevel] < 5)
	    	{
	        	SendClientMessage(playerid, COLOR_GRAD1, "   Vous devez être niveau 5 pour pouvoir mettre un ecagoule.");
	        	return 1;
	    	}
	    	for(new i = 0; i < MAX_PLAYERS; i++)
   			{
   		    	if(IsPlayerConnected(i))
   		    	{
		   			ShowPlayerNameTagForPlayer(i, playerid, 1);
				}
			}
			PlayerInfo[playerid][pMaskuse] = 0;
			SendClientMessage(playerid, COLOR_WHITE, "Vous avez enlever votre cagoule [Pour la mettre /Cagoule].");
			GetPlayerName(playerid, sendername, sizeof(sendername));
      		format(string, sizeof(string), " %s à enlevé sa cagoule.", sendername);
      		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		return 1;
	}
	if(!strcmp(cmdtext, "/cachernum", true) || !strcmp(cmd, "/masquernumero", true) || !strcmp(cmd, "/listerouge", true))
	//if(!strcmp(cmdtext, "/cachernum", true)) // by LordMan
	{
		if(IsPlayerConnected(playerid))
		{
		    if(PlayerInfo[playerid][pPnumber] == 0)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   Vous n'avez pas de numéro de telephone.");
		        return 1;
		    }
			if(PlayerInfo[playerid][pDonateRank] == 0)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Pour cacher votre numéro de telephone vous devez être donnateur bronze.");
			    return 1;
			}
			if(PlayerInfo[playerid][pHideNumber] == 0)
			{
				SendClientMessage(playerid, COLOR_WHITE, "   Votre numéro est dès à présent caché.");
				PlayerInfo[playerid][pHideNumber] = 1;
				return 1;
			}
			if(PlayerInfo[playerid][pHideNumber] == 1)
			{
				SendClientMessage(playerid, COLOR_WHITE, "   Votre numéro est dès à présent public.");
				PlayerInfo[playerid][pHideNumber] = 0;
				return 1;
			}
		}
		return 1;
	}
	/*if(strcmp(cmd, "/lunettes", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	if(PlayerInfo[playerid][pMask] == 0)
	   	 	{
	   		     SendClientMessage(playerid, COLOR_GRAD1, "   Vous n'avez pas de lunettes (cagoule)");
	   		     return 1;
	   		}
	   		if(PlayerInfo[playerid][pLevel] < 14)
	    	{
	       		SendClientMessage(playerid, COLOR_GRAD1, "  Vous devez être niveau 14 pour pouvoir mettre des lunettes.");
	        	return 1;
	    	}
			for(new i = 0; i < MAX_PLAYERS; i++)
   			{
   		    	if(IsPlayerConnected(i))
   		    	{
		   			ShowPlayerNameTagForPlayer(i, playerid, 0);
				}
			}
			PlayerInfo[playerid][pMaskuse] = 1;
			SendClientMessage(playerid, COLOR_WHITE, "   Vous avez mis vos lunettes [Pour l'enlever /enleverlunettes ].");
			GetPlayerName(playerid, sendername, sizeof(sendername));
      		format(string, sizeof(string), " %s à mis ses lunettes.", sendername);
      		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		return 1;
	}
	if(strcmp(cmd, "/enleverlunettes", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	if(PlayerInfo[playerid][pMask] == 0)
	    	{
	       		SendClientMessage(playerid, COLOR_GRAD1, "   Vous n'avez pas de lunettes sur vous");
	        	return 1;
	    	}
	    	if(PlayerInfo[playerid][pLevel] < 14)
	    	{
	        	SendClientMessage(playerid, COLOR_GRAD1, "   Vous devez être niveau 14 pour pouvoir mettre des lunettes.");
	        	return 1;
	    	}
	    	for(new i = 0; i < MAX_PLAYERS; i++)
   			{
   		    	if(IsPlayerConnected(i))
   		    	{
		   			ShowPlayerNameTagForPlayer(i, playerid, 1);
				}
			}
			PlayerInfo[playerid][pMaskuse] = 0;
			SendClientMessage(playerid, COLOR_WHITE, "Vous avez enlever vos lunettes [Pour les mettres /lunettes].");
			GetPlayerName(playerid, sendername, sizeof(sendername));
      		format(string, sizeof(string), " %s à enlever ses lunettes.", sendername);
      		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		return 1;
	}*/
	if(!strcmp("/lunettes",cmd,true) || !strcmp("/lunette",cmd,true))
	{
	    new glasseid, skin, id;
		tmp = strtok(cmdtext, idx);
		skin = GetPlayerSkin(playerid);
		id = strval(tmp);
		
        if(PlayerInfo[playerid][pLevel] < 10)
	   	{
	       	SendClientMessage(playerid, COLOR_GRAD1, "   Vous devez être niveau 10 pour pouvoir mettre des lunettes.");
	       	return 1;
	   	}
		if(!id || id > 33) return SendClientMessage(playerid, 0xFFFFFFAA, "(Erreur) : /lunette [1 - 33]");

		for(new i = 0; i < MAX_PLAYERS; i++)
   		{
   		   	if(IsPlayerConnected(i))
   		   	{
				ShowPlayerNameTagForPlayer(i, playerid, 0);
			}
		}
		PlayerInfo[playerid][pMaskuse] = 1;
		SendClientMessage(playerid, COLOR_WHITE, "   Vous avez mis vos lunettes [Pour les enlever, faites /enleverlunettes ].");
		GetPlayerName(playerid, sendername, sizeof(sendername));
      	format(string, sizeof(string), " %s à mis ses lunettes.", sendername);
      	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      	if(id > 30) goto PutPoliceGlasses;
		else
		{
		    id--;
		    glasseid =  CommonRed + id;
			SetPlayerHoldingObject(playerid, glasseid, 2, SkinOffSet[skin][0], SkinOffSet[skin][1], SkinOffSet[skin][2], SkinOffSet[skin][3], SkinOffSet[skin][4], SkinOffSet[skin][5]);
			return 1;
		}

		PutPoliceGlasses:

		glasseid = CopGlassesBlack + (id - 31);
        SetPlayerHoldingObject(playerid, glasseid, 2, SkinOffSet[skin][0], floatadd(SkinOffSet[skin][1], 0.004500), SkinOffSet[skin][2], SkinOffSet[skin][3], SkinOffSet[skin][4], SkinOffSet[skin][5]);
		return 1;
	}
	if(!strcmp("/enleverlunettes",cmd,true) || !strcmp("/enleverlunette",cmd,true))
	{
		if(PlayerInfo[playerid][pMaskuse] == 0)
	  	{
	   		SendClientMessage(playerid, COLOR_GRAD1, "   Vous n'avez pas de lunettes sur vous");
	       	return 1;
	   	}
	    StopPlayerHoldingObject(playerid);
        for(new i = 0; i < MAX_PLAYERS; i++)
   		{
   		   	if(IsPlayerConnected(i))
   		   	{
		  		ShowPlayerNameTagForPlayer(i, playerid, 1);
			}
		}
		PlayerInfo[playerid][pMaskuse] = 0;
		SendClientMessage(playerid, COLOR_WHITE, "Vous avez enlevé vos lunettes.");
		GetPlayerName(playerid, sendername, sizeof(sendername));
      	format(string, sizeof(string), " %s à enlevé ses lunettes.", sendername);
      	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	    return 1;
	}
	if(!strcmp(cmdtext, "/hautparleur", true) || !strcmp(cmd, "/speaker", true))
	//if(!strcmp(cmdtext, "/speaker", true)) // by LordMan
	{
		if(IsPlayerConnected(playerid))
		{
		    if(PlayerInfo[playerid][pPnumber] == 0)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   Vous n'avez pas de numéro de telephone.");
		        return 1;
		    }
		    if(Mobile[playerid] == 255)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas en appel.");
		        return 1;
		    }
			if(PlayerInfo[playerid][pSpeaker] == 0)
			{
				SendClientMessage(playerid, COLOR_YELLOW2, " Beep * Le Speaker est on.");
				PlayerInfo[playerid][pSpeaker] = 1;
				return 1;
			}
			if(PlayerInfo[playerid][pSpeaker] == 1)
			{
				SendClientMessage(playerid, COLOR_YELLOW2, " Beep * Le Speaker est off.");
				PlayerInfo[playerid][pSpeaker] = 0;
				return 1;
			}
		}
		return 1;
	}
//-----------------------------------------------------[Moving house CMDS]---------------------------------------
    if(strcmp(cmd, "/entrermaison", true) == 0 || strcmp(cmd, "/entreehouse", true) == 0)
	//if(strcmp(cmd, "/entrermaison", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
            if (PlayerInfo[playerid][pAdmin] <= 1337)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Vous n'êtes pas autorisé a utiliser cette commande !");
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "SYNTAX: /entrermaison [houseid] - Change la position de l'entrée du biz a la votre");
				return 1;
			}
			new proplev = strval(tmp);
			if(proplev > sizeof(HouseInfo) || proplev < 0)
			{
			    SendClientMessage(playerid,COLOR_WHITE,"Mauvaise Id de Maison");
			    return 1;
			}
			else
   			{
			    new Float:X,Float:Y,Float:Z;
			    GetPlayerPos(playerid,X,Y,Z);
			    format(string,sizeof(string),"L'Entrée de La Maison %d à été déplacée à %f - %f - %f",proplev,X,Y,Z);
       			ABroadCast(COLOR_YELLOW,string,5);
				HouseInfo[proplev][hEntrancex] = X;
				HouseInfo[proplev][hEntrancey] = Y;
				HouseInfo[proplev][hEntrancez] = Z;
				OnPropUpdate();
				return 1;
			}
		}
	}
    if(strcmp(cmd, "/sortiemaison", true) == 0 || strcmp(cmd, "/houseexit", true) == 0)
	//if(strcmp(cmd, "/sortiemaison", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if (PlayerInfo[playerid][pAdmin] <= 1337)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Vous n'êtes pas autorisé a utiliser cette commande !");
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "SYNTAX: /sortiemaison [houseid] - Change la position sortie de la maison a la votre.");
				return 1;
			}
			new proplev = strval(tmp);
			if(proplev > sizeof(HouseInfo) || proplev < 0)
			{
			    SendClientMessage(playerid,COLOR_WHITE,"Mauvais Id de Maison");
			    return 1;
			}
			else
   			{
			    new Float:X,Float:Y,Float:Z;
			    GetPlayerPos(playerid,X,Y,Z);
			    format(string,sizeof(string),"La Sortie de La Maison %d à été déplacée à %f - %f - %f",proplev,X,Y,Z);
       			ABroadCast(COLOR_YELLOW,string,5);
				HouseInfo[proplev][hExitx] = X;
				HouseInfo[proplev][hExity] = Y;
				HouseInfo[proplev][hExitz] = Z;
				HouseInfo[proplev][hInt] = GetPlayerInterior(playerid);
				OnPropUpdate();
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/entreebiz", true) == 0 || strcmp(cmd, "/bizentrance", true) == 0)
	//if(strcmp(cmd, "/entreebiz", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if (PlayerInfo[playerid][pAdmin] <= 1337)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Vous n'êtes pas autorisé a utiliser cette commande !");
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "SYNTAX: /entreebiz [bizid] - Change la position de l'entrée du biz a la votre");
				return 1;
			}
			new proplev = strval(tmp);
			if(proplev > sizeof(BizzInfo) || proplev < 0)
			{
			    SendClientMessage(playerid,COLOR_WHITE,"Mauvais Id de biz (5 biz)");
			    return 1;
			}
			else
   			{
			    new Float:X,Float:Y,Float:Z;
			    GetPlayerPos(playerid,X,Y,Z);
			    format(string,sizeof(string),"L'Entree du Biz %d à été déplacé à %f - %f - %f",proplev,X,Y,Z);
			    ABroadCast(COLOR_YELLOW,string,1);
				BizzInfo[proplev][bEntranceX] = X;
				BizzInfo[proplev][bEntranceY] = Y;
				BizzInfo[proplev][bEntranceZ] = Z;
				OnPropUpdate();
				return 1;
			}
		}
		return 1;
	}
    if(strcmp(cmd, "/entreesbiz", true) == 0 || strcmp(cmd, "/sbizentrance", true) == 0 || strcmp(cmd, "/entrersuperbiz", true) == 0)
	//if(strcmp(cmd, "/entreesbiz", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if (PlayerInfo[playerid][pAdmin] <= 1337)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Vous n'êtes pas autorisé a utiliser cette commande !");
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "SYNTAX: /entreesbiz [sbizid] - Change la position de l'entrée du sbiz a la votre");
				return 1;
			}
			new proplev = strval(tmp);
			if(proplev > sizeof(SBizzInfo) || proplev < 0)
			{
			    SendClientMessage(playerid,COLOR_WHITE,"Mauvais Id de Sbiz ");
			    return 1;
			}
			else
			{
			    new Float:X,Float:Y,Float:Z;
			    GetPlayerPos(playerid,X,Y,Z);
			    format(string,sizeof(string),"Entree du Sbiz %d à été déplacée à %f - %f - %f",proplev,X,Y,Z);
			    ABroadCast(COLOR_YELLOW,string,1);
				SBizzInfo[proplev][sbEntranceX] = X;
				SBizzInfo[proplev][sbEntranceY] = Y;
				SBizzInfo[proplev][sbEntranceZ] = Z;
				OnPropUpdate();
				return 1;
   			}
		}
		return 1;
	}
//------------------------------------------------[Job shit]---------------------------------------------------
    if(!strcmp(cmdtext, "/commencerrecolte", true) || !strcmp(cmd, "/startharvest", true) || !strcmp(cmd, "/startrecolte", true))
	//if(!strcmp(cmdtext, "/commencerrecolte", true)) // by LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(!IsAHarvest(idcar))
			{
			    SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas à la ferme.");
			    return 1;
			}
			if(FarmerVar[playerid] == 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "Vous avez déjà un travail.");
			    return 1;
			}
			if(FarmerPickup[playerid][0] >= 22)
			{
			    SendClientMessage(playerid, COLOR_WHITE, "C'est assez pour aujourd'hui(revenez après le prochain payday).");
			    return 1;
			}
	        if(PlayerInfo[playerid][pJob] == 18)
	        {
	            JustStarted[playerid] = 1;
	            FarmerVar[playerid] = 1;
	            TogglePlayerControllable(playerid, 1);
	            new engine,lights,alarm,doors,bonnet,boot,objective;
	           	GetVehicleParamsEx(idcar,engine, lights, alarm, doors, bonnet, boot, objective);
              	SetVehicleParamsEx(idcar, VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, boot, objective);
              	gEngine[playerid] = 1;
	            OnPlayerEnterCheckpoint(playerid);
	            SendClientMessage(playerid, COLOR_YELLOW, "Propriétaire: Vous heures de travail sont en place, allez au marqueur rouge.");
	        }
	    }
	    return 1;
	}
	if(!strcmp(cmdtext, "/stoprecolte", true) || !strcmp(cmd, "/arreterrecolte", true) || !strcmp(cmd, "/arreterrecoltes", true))
	//if(!strcmp(cmdtext, "/arreterrecolte", true)) // by LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(FarmerVar[playerid] == 0)
			{
			    SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas commencé la récolte.");
			    return 1;
			}
			if(PlayerInfo[playerid][pJob] == 18)
			{
			    if(IsAHarvest(idcar))
			    {
			        TogglePlayerControllable(playerid, 1);
			        RemovePlayerFromVehicle(playerid);
			    }
			    if(FarmerPickup[playerid][0] >= 1 && FarmerPickup[playerid][0] <= 22)
				{
					FarmerPickup[playerid][0]--;
				}
				JustStarted[playerid] = 0;
			    FarmerVar[playerid] = 0;
			    DisablePlayerCheckpoint(playerid);
			}
	    }
	    return 1;
	}
	if(!strcmp(cmdtext, "/commencerrecoltedrogue", true) || !strcmp(cmd, "/startrecoltededrogue", true) || !strcmp(cmd, "/crd", true))
	//if(!strcmp(cmdtext, "/commencerrecoltedrogue", true)) // by LordMan
	{
		if(IsPlayerConnected(playerid))
		{
			if(!IsADrugHarvest(idcar))
			{
			    SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas dans une Moisonneuse pour Drogue.");
			    return 1;
			}
			if(DrugFarmerVar[playerid] == 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "Vous avez déjà un travail.");
			    return 1;
			}
			if(DrugFarmerPickup[playerid][0] >= 37)
			{
			    SendClientMessage(playerid, COLOR_WHITE, "C'est assez pour aujourd'hui(revenez après le prochain payday).");
			    return 1;
			}
			if(PlayerInfo[playerid][pJob] == 19)
			{
			    JustStarted[playerid] = 1;
			    TogglePlayerControllable(playerid, 1);
		        new engine,lights,alarm,doors,bonnet,boot,objective;
				GetVehicleParamsEx(idcar,engine, lights, alarm, doors, bonnet, boot, objective);
              	SetVehicleParamsEx(idcar, VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, boot, objective);
              	gEngine[playerid] = 1;
			    DrugFarmerVar[playerid] = 1;
			    OnPlayerEnterCheckpoint(playerid);
			    SendClientMessage(playerid, COLOR_YELLOW, "Propriétaire: Vous heures de travail sont en place, allez au marqueur rouge.");
			}
		}
		return 1;
	}
	if(!strcmp(cmdtext, "/arreterrecoltedrogue", true) || !strcmp(cmd, "/ard", true) || !strcmp(cmd, "/stoprecoltededrogues", true))
	//if(!strcmp(cmdtext, "/arreterrecoltedrogue", true)) // by LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(DrugFarmerVar[playerid] == 0)
			{
			    SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas commencé la récolte.");
			    return 1;
			}
			if(PlayerInfo[playerid][pJob] == 19)
			{
			    if(IsADrugHarvest(idcar))
			    {
			        TogglePlayerControllable(playerid, 1);
			        RemovePlayerFromVehicle(playerid);
			    }
			    if(DrugFarmerPickup[playerid][0] >= 1 && DrugFarmerPickup[playerid][0] <= 37)
				{
					DrugFarmerPickup[playerid][0]--;
				}
				JustStarted[playerid] = 0;
				DrugFarmerVar[playerid] = 0;
			    DisablePlayerCheckpoint(playerid);
			}
	    }
	    return 1;
	}
     if(!strcmp(cmdtext, "/contrebandedrogue", true) || !strcmp(cmd, "/smuggledrogue", true) || !strcmp(cmd, "/smuggledrogues", true))
	//if(!strcmp(cmdtext, "/contrebandedrogue", true) || !strcmp(cmdtext, "/cd", true))
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pJob] != 20)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas contrebandier de drogue.");
	            return 1;
	        }
	        if(SmugglerWork[playerid] != 0)
			{
			    SendClientMessage(playerid, COLOR_GREY, "Vous faites déjà de la contrebande.");
			    return 1;
			}
			if(GetPlayerMoney(playerid) < 299)
			{
		    	SendClientMessage(playerid, COLOR_GREY, "Avant de pouvoir commencer, il vous faut 300$.");
		    	return 1;
			}
			if(PayDaySecure[playerid] == 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Vous avez vendu trop de drogue, revenez au prochain PayDay.");
			    return 1;
			}
			if(!PlayerToPoint(5.0,playerid,2798.5601,-2416.6804,13.6310))
			{
			    SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas dans à la ferme de drogue.");
			    return 1;
			}
			if(IsASmuggleCar(idcar) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
			    TogglePlayerControllable(playerid, 0);
			    SmugglerWork[playerid] = 1;
			    PayDaySecure[playerid] = 1;
			    GameTextForPlayer(playerid, "~w~Vous chargez la drogue...", 5000, 1);
			    SetTimerEx("LoadingDrugsForSmugglers", 5000, false, "i", playerid);
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas dans un véhicule de contrebandié.");
			    return 1;
			}
	    }
	    return 1;
	}
    if(strcmp(cmd, "/changerpass", true) == 0 || strcmp(cmd, "/changermdp", true) == 0 || strcmp(cmd, "/changepass", true) == 0)
	//if(strcmp(cmd, "/changerpass", true) == 0) // by LordMan
	{
		if(IsPlayerConnected(playerid))
		{
		    if(gPlayerLogged[playerid] == 0)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "Vous devez d'abord vous connectez.");
		        return 1;
		    }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GREEN, "USAGE: /changerpass [motdepasse]");
				return 1;
			}
			strmid(PlayerInfo[playerid][pKey], tmp, 0, strlen(cmdtext), 255);
			OnPlayerUpdate(playerid);
			SendClientMessage(playerid, COLOR_YELLOW, "Mot de Passe changé avec succès");
		}
		return 1;
	}
	if(!strcmp(cmdtext, "/openhq", true) || !strcmp(cmd, "/ouvrirhq", true) || !strcmp(cmd, "/ouvrirqg", true))
	//if(!strcmp(cmdtext, "/ouvrirqg", true)) // by LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas logué.");
		        return 1;
	        }
	        else
	        {
	            if(PlayerInfo[playerid][pLeader] == 5)
	            {
	                if(hqlock[surlock] == 0)
	                {
	                    hqlock[surlock] = 1;
	                    SaveHQLocks();
	                    SendClientMessage(playerid, COLOR_GREY, "Vagos HQ Fermé.");
	                }
	                else if(hqlock[surlock] == 1)
	                {
	                    hqlock[surlock] = 0;
	                    SaveHQLocks();
	                    SendClientMessage(playerid, COLOR_GREY, "Vagos HQ Déverrouillé.");
					}
	            }
	            else if(PlayerInfo[playerid][pLeader] == 6)
	            {
	                if(hqlock[luclock] == 0)
	                {
	                    hqlock[luclock] = 1;
	                    SaveHQLocks();
	                    SendClientMessage(playerid, COLOR_GREY, "La Famiglia Vercetti HQ Fermé.");
	                }
	                else if(hqlock[luclock] == 1)
	                {
	                    hqlock[luclock] = 0;
	                    SaveHQLocks();
	                    SendClientMessage(playerid, COLOR_GREY, "La Famiglia Vercetti HQ Déverrouillé.");
	                }
	            }
	            else if(PlayerInfo[playerid][pLeader] == 14)
	            {
	                if(hqlock[guclock] == 0)
	                {
	                    hqlock[guclock] = 1;
	                    SaveHQLocks();
	                    SendClientMessage(playerid, COLOR_GREY, "Bikers HQ Fermé.");
	                }
	                else if(hqlock[guclock] == 1)
	                {
	                    hqlock[guclock] = 0;
	                    SaveHQLocks();
	                    SendClientMessage(playerid, COLOR_GREY, "Bikers HQ Déverrouillé.");
	                }
                }
	            else if(PlayerInfo[playerid][pLeader] == 16)
	            {
	                if(hqlock[stlock] == 0)
	                {
	                    hqlock[stlock] = 1;
	                    SaveHQLocks();
	                    SendClientMessage(playerid, COLOR_GREY, "Groove Street HQ Fermé.");
	                }
	                else if(hqlock[stlock] == 1)
	                {
	                    hqlock[stlock] = 0;
	                    SaveHQLocks();
	                    SendClientMessage(playerid, COLOR_GREY, "Groove Street HQ Déverrouillé.");
	                }
				}
	            else if(PlayerInfo[playerid][pLeader] == 15)
	            {
	                if(hqlock[stlock] == 0)
	                {
	                    hqlock[stlock] = 1;
	                    SaveHQLocks();
	                    SendClientMessage(playerid, COLOR_GREY, "Ballas HQ Fermé.");
	                }
	                else if(hqlock[stlock] == 1)
	                {
	                    hqlock[stlock] = 0;
	                    SaveHQLocks();
	                    SendClientMessage(playerid, COLOR_GREY, "Ballas HQ Déverrouillé.");
	                }
                }
	            else if(PlayerInfo[playerid][pLeader] == 8)
	            {
	                if(hqlock[iolock] == 0)
	                {
	                    hqlock[iolock] = 1;
	                    SaveHQLocks();
	                    SendClientMessage(playerid, COLOR_GREY, "Hitman HQ Fermé.");
	                }
	                else if(hqlock[iolock] == 1)
	                {
	                    hqlock[iolock] = 0;
	                    SaveHQLocks();
	                    SendClientMessage(playerid, COLOR_GREY, "Hitman HQ Déverrouillé.");
	                }
				}
	            else
	            {
	                SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas les clées du HQ.");
	                return 1;
	            }
	        }
	    }
	    return 1;
	}

	if(strcmp(cmd,"/coffreqg",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        if(!(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pLeader] == 3))
	    {
	        tmp = strtok(cmdtext, idx);
	        new gunid[256];
	            if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /coffreqg [Action] [montant]");
					SendClientMessage(playerid, COLOR_BLUE, "|____________ Coffre QG ___________|");
					SendClientMessage(playerid, COLOR_WHITE, "| Action : retirer / deposer");
					SendClientMessage(playerid, COLOR_BLUE, "|__________________________________|");
					format(string, sizeof(string), "Il reste %d $ Dans le coffre.",coffrehq[cosacoffre]);
					SendClientMessage(playerid, COLOR_WHITE, string);
					return 1;
				}
				strmid(gunid, tmp, 0, strlen(cmdtext), 255);
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					format(string, sizeof(string), "USAGE: /coffreqg [action] [montant]");
					return 1;
				}
				new ammo = strval(tmp);
				if(ammo > GetPlayerMoney(playerid)) { SendClientMessage(playerid, COLOR_GREY, "Desoler vous n'avez pas assez d'argent"); return 1; }
				if (strcmp(gunid, "retirer", true, strlen(gunid)) == 0)
				{
                    if(ammo < coffrehq[cosacoffre])
					{
					 	format(string, sizeof(string), "Vous sortez $%d du coffre de la cosa.",ammo);
						SendClientMessage(playerid, COLOR_WHITE, string);
						SafeGivePlayerMoney(playerid, ammo);
						coffrehq[cosacoffre] -= ammo;
						SaveCoffreHQ();
						format(string, sizeof(string), "Il reste %d $ Dans le coffre.",coffrehq[cosacoffre]);
						SendClientMessage(playerid, COLOR_WHITE, string);
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Il n'y a plus sassez d'argent dans le coffre!");
						return 1;
					}
				}
                else if (strcmp(gunid, "deposer", true, strlen(gunid)) == 0)
				{
				    if(ammo < GetPlayerMoney(playerid))
					{
					 	format(string, sizeof(string), "Vous deposer $%d dans le coffre de la cosa.",ammo);
						SendClientMessage(playerid, COLOR_WHITE, string);
						SafeGivePlayerMoney(playerid, -ammo);
						coffrehq[cosacoffre] += ammo;
						SaveCoffreHQ();
						format(string, sizeof(string), "Il reste %d $ Dans le coffre.",coffrehq[cosacoffre]);
						SendClientMessage(playerid, COLOR_WHITE, string);
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas assez d'argent!");
						return 1;
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Vous ne faite pas partit de cette mafia!");
				return 1;
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/ko", true) == 0) // by LordMan
	{
		if(IsPlayerConnected(playerid))
		{
		    if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous devez d'abord vous connectez.");
		        return 1;
	        }
	        if(PlayerInfo[playerid][pLevel] < 3)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous devez être au moin sniveau 3 pour utiliser cette commande.");
	            return 1;
	        }
	        if(KnockedDown[playerid] == 1)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez pas frapper quand vous êtes à terre.");
	            return 1;
	        }
            if(PlayerInfo[playerid][pSex] == 2)
            {
                SendClientMessage(playerid, COLOR_GREY, "Vous êtes trop faible pour frapper quelqu'un.");
	            return 1;
            }
            if(PlayerBoxing[playerid] != 0)
            {
                SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez pas utiliser cette commande quand vous boxer.");
                return 1;
            }
	        tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /ko [Playerid/PartOfName]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if (ProxDetectorS(1.0, playerid, giveplayerid))
			        {
           				if(KnockedDown[giveplayerid] != 1)
			        	{
			        	    if(giveplayerid == playerid)
			        	    {
			        	        SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez pas vous frappez vous même.");
			        	        return 1;
			        	    }
			        	    if(PlayerInfo[giveplayerid][pSex] == 2)
			        	    {
			        	        SendClientMessage(playerid, COLOR_GREY, "Quel Honte, frapper un femme.");
			        	        return 1;
			        	    }
			        	    if(IsPlayerInAnyVehicle(giveplayerid))
			        	    {
			        	        return 1;
			        	    }
			            	new giveplayername[MAX_PLAYER_NAME];
			            	GetPlayerName(playerid, sendername, sizeof(sendername));
			            	GetPlayerName(giveplayerid, giveplayername, sizeof(giveplayername));
			            	new rands = random(2)+1;
							format(string, sizeof(string), " %s frappe %s et essaye de le mettre KO.", sendername, giveplayername);
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                            ApplyAnimation(playerid,"FIGHT_D","FightD_3",4.0,0,1,1,0,0);
							if(rands == 1)
							{
							    TogglePlayerControllable(giveplayerid, 0);
								ApplyAnimation(giveplayerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
								SetTimerEx("ClearKnock", 20000, false, "i", giveplayerid);
								KnockedDown[giveplayerid] = 1;
								format(string, sizeof(string), " %s a réussi à le mettre KO.", sendername);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							}
							else
							{
							    format(string, sizeof(string), " %s ne là pas bien frappez, et ne l'à pas mis KO.", sendername);
                                ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							}
							return 1;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "Ce joueur est déjà KO.");
						}
			        }
			        else
			        {
			            SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas près de vous.");
			        }
			    }
			}

		}
		return 1;
	}

	/*if(strcmp(cmd, "/carcolor", true) == 0) // by LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pPvehkey] == 999)
	        {
	            SendClientMessage(playerid, COLOR_GREY,"   You don't have a car to respray.");
	            return 1;
	        }
	        if(GetPlayerMoney(playerid) < 1000)
	        {
	            SendClientMessage(playerid, COLOR_GREY,"   You don't have enough money for car respray.");
	            return 1;
	        }
	        tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /carcolor [ColorOneID] [ColorTwoID]");
				return 1;
			}
			new color1;
			color1 = strval(tmp);
			if(color1 < 0 && color1 > 126)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Wrong color id!");
			    return 1;
			}
			tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /carcolor [ColorOneID] [ColorTwoID]");
				return 1;
			}
			new color2;
			color2 = strval(tmp);
			if(color2 < 0 && color2 > 126)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Wrong color id!");
			    return 1;
			}
	        if(IsPlayerInAnyVehicle(playerid))
	        {
	            if(PlayerInfo[playerid][pPvehkey] == idcar)
	            {
	                CarInfo[idcar][cColorOne] = color1;
	                CarInfo[idcar][cColorTwo] = color2;
	                SafeGivePlayerMoney(playerid, -1000);
	                GameTextForPlayer(playerid, "~w~Bill for a Paint Respray~n~~r~-$1000", 5000, 1);
	                ChangeVehicleColor(idcar, color1, color2);
	                OnPropUpdate();
					OnPlayerUpdate(playerid);
	            }
	            else
	            {
	                SendClientMessage(playerid, COLOR_GREY,"   This is not your car.");
	            	return 1;
	            }
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY,"   You are not in vehicle.");
	            return 1;
	        }
	    }
	    return 1;
	}*/

	if(strcmp(cmd, "/donner", true) ==0 || strcmp(cmd, "/give", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new x_nr[256];
			x_nr = strtok(cmdtext, idx);
			if(!strlen(x_nr))
			{
			    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /donner [nom] [playerid/PartOfName] ([montant])");
				SendClientMessage(playerid, COLOR_WHITE, "Noms Disponibles: drogues,  materiaux, arme, cleflocation, corde, clef(1-3)");
				SendClientMessage(playerid, COLOR_WHITE, "Noms Disponibles: decodeur, montre, canneapeche, briquet, ciggarette");
				return 1;
			}
			if(strcmp(x_nr,"mats",true) == 0 || strcmp(x_nr,"materiaux",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /donner mats [playerid/PartOfName] [montant]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        new Float:x, Float:y, Float:z;
			            GetPlayerPos(giveplayerid,x,y,z);
			            if(!IsPlayerInRangeOfPoint(playerid, 5, x, y, z))
			            {
			                SendClientMessage(playerid, COLOR_GRAD1, "Ce joueur n'est pas près de vous!");
			                return 1;
			            }
						tmp = strtok(cmdtext, idx);
						if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /donner mats [playerid/PartOfName] [montant]");
							return 1;
						}
						new mammount;
						mammount = strval(tmp);
						if(mammount > PlayerInfo[playerid][pMats]) { SendClientMessage(playerid, COLOR_GREY, "   Vous n'avez pas suffisament de matériaux."); return 1; }
                        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						PlayerInfo[playerid][pMats] -= mammount;
						PlayerInfo[giveplayerid][pMats] += mammount;
						if(PlayerInfo[playerid][pSex] == 1) { format(string, sizeof(string), "* %s prend du Matos et le donne à %s.", sendername, giveplayer); }
						else { format(string, sizeof(string), "* %s prend du Matos et le donne à %s.", sendername, giveplayer); }
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "Ce joueur n'est pas connecté!");
				    return 1;
				}
			}
			if(strcmp(x_nr,"briquet",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /donner briquet [playerid/PartOfName] [montant]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        new Float:x, Float:y, Float:z;
			            GetPlayerPos(giveplayerid,x,y,z);
			            if(!IsPlayerInRangeOfPoint(playerid, 5, x, y, z))
			            {
			                SendClientMessage(playerid, COLOR_GRAD1, "Ce joueur n'est pas près de vous!");
			                return 1;
			            }
						tmp = strtok(cmdtext, idx);
						if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /donner briquet [playerid/PartOfName] [montant]");
							return 1;
						}
						new liammount;
						liammount = strval(tmp);
						if(liammount > PlayerInfo[playerid][pLighter]) { SendClientMessage(playerid, COLOR_GREY, "   Vous n'avez pas de Briquet."); return 1; }
                        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						PlayerInfo[playerid][pLighter] -= liammount;
						PlayerInfo[giveplayerid][pLighter] += liammount;
						if(PlayerInfo[playerid][pSex] == 1) { format(string, sizeof(string), "* %s prend un Briquet et la donne à %s.", sendername, giveplayer); }
						else { format(string, sizeof(string), "* %s prend un Briquet et la donne à %s.", sendername, giveplayer); }
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "Ce joueur n'est pas connecté!");
				    return 1;
				}
			}
			if(strcmp(x_nr,"canneapeche",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /donner canneapeche [playerid/PartOfName] [montant]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        new Float:x, Float:y, Float:z;
			            GetPlayerPos(giveplayerid,x,y,z);
			            if(!IsPlayerInRangeOfPoint(playerid, 5, x, y, z))
			            {
			                SendClientMessage(playerid, COLOR_GRAD1, "Ce joueur n'est pas près de vous!");
			                return 1;
			            }
						tmp = strtok(cmdtext, idx);
						if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /donner canneapeche [playerid/PartOfName] [montant]");
							return 1;
						}
						new fammount;
						fammount = strval(tmp);
						if(fammount > PlayerInfo[playerid][pFishTool]) { SendClientMessage(playerid, COLOR_GREY, "   Vous n'avez pas de Canne a Pêche."); return 1; }
                        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						PlayerInfo[playerid][pFishTool] -= fammount;
						PlayerInfo[giveplayerid][pFishTool] += fammount;
						if(PlayerInfo[playerid][pSex] == 1) { format(string, sizeof(string), "* %s prend sa Canne a Pêche et la donne à %s.", sendername, giveplayer); }
						else { format(string, sizeof(string), "* %s prend sa Canne a Pêche et la donne à %s.", sendername, giveplayer); }
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "Ce joueur n'est pas connecté!");
				    return 1;
				}
			}
			if(strcmp(x_nr,"montre",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /donner montre [playerid/PartOfName] [montant]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        new Float:x, Float:y, Float:z;
			            GetPlayerPos(giveplayerid,x,y,z);
			            if(!IsPlayerInRangeOfPoint(playerid, 5, x, y, z))
			            {
			                SendClientMessage(playerid, COLOR_GRAD1, "Ce joueur n'est pas près de vous!");
			                return 1;
			            }
						tmp = strtok(cmdtext, idx);
						if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /donner montre [playerid/PartOfName] [montant]");
							return 1;
						}
						new wammount;
						wammount = strval(tmp);
						if(wammount > PlayerInfo[playerid][pWatch]) { SendClientMessage(playerid, COLOR_GREY, "   Vous n'avez pas de montre."); return 1; }
                        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						PlayerInfo[playerid][pWatch] -= wammount;
						PlayerInfo[giveplayerid][pWatch] += wammount;
						if(PlayerInfo[playerid][pSex] == 1) { format(string, sizeof(string), "* %s prend sa Montre et la donne à %s.", sendername, giveplayer); }
						else { format(string, sizeof(string), "* %s prend sa Montre et la donne à %s.", sendername, giveplayer); }
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "Ce joueur n'est pas connecté!");
				    return 1;
				}
			}
			if(strcmp(x_nr,"decodeur",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /donner decodeur [playerid/PartOfName] [montant]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        new Float:x, Float:y, Float:z;
			            GetPlayerPos(giveplayerid,x,y,z);
			            if(!IsPlayerInRangeOfPoint(playerid, 5, x, y, z))
			            {
			                SendClientMessage(playerid, COLOR_GRAD1, "Ce joueur n'est pas près de vous!");
			                return 1;
			            }
						tmp = strtok(cmdtext, idx);
						if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /donner decodeur [playerid/PartOfName] [montant]");
							return 1;
						}
						new deammount;
						deammount = strval(tmp);
						if(deammount > PlayerInfo[playerid][pDecodeur]) { SendClientMessage(playerid, COLOR_GREY, "   Vous n'avez pas de décodeur."); return 1; }
                        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						PlayerInfo[playerid][pDecodeur] -= deammount;
						PlayerInfo[giveplayerid][pDecodeur] += deammount;
						if(PlayerInfo[playerid][pSex] == 1) { format(string, sizeof(string), "* %s prend un Décodeur et la donne à %s.", sendername, giveplayer); }
						else { format(string, sizeof(string), "* %s prend un Décodeur et la donne à %s.", sendername, giveplayer); }
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "Ce joueur n'est pas connecté!");
				    return 1;
				}
			}
			if(strcmp(x_nr,"ciggarette",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /donner ciggarette [playerid/PartOfName] [montant]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        new Float:x, Float:y, Float:z;
			            GetPlayerPos(giveplayerid,x,y,z);
			            if(!IsPlayerInRangeOfPoint(playerid, 5, x, y, z))
			            {
			                SendClientMessage(playerid, COLOR_GRAD1, "Ce joueur n'est pas près de vous!");
			                return 1;
			            }
						tmp = strtok(cmdtext, idx);
						if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /donner ciggarette [playerid/PartOfName] [montant]");
							return 1;
						}
						new ciammount;
						ciammount = strval(tmp);
						if(ciammount > PlayerInfo[playerid][pCigarettes]) { SendClientMessage(playerid, COLOR_GREY, "   Vous n'avez plus de ciggarette."); return 1; }
                        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						PlayerInfo[playerid][pCigarettes] -= ciammount;
						PlayerInfo[giveplayerid][pCigarettes] += ciammount;
						if(PlayerInfo[playerid][pSex] == 1) { format(string, sizeof(string), "* %s prend une ciggarette et la donne à %s.", sendername, giveplayer); }
						else { format(string, sizeof(string), "* %s prend une ciggarette et la donne à %s.", sendername, giveplayer); }
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "Ce joueur n'est pas connecté!");
				    return 1;
				}
			}
			if(strcmp(x_nr,"drogues",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /donner drogues [playerid/PartOfName] [montant]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        new Float:x, Float:y, Float:z;
			            GetPlayerPos(giveplayerid,x,y,z);
			            if(!PlayerToPoint(5, playerid, x, y, z))
			            {
			                SendClientMessage(playerid, COLOR_GRAD1, "Ce joueur n'est pas près de vous!");
			                return 1;
			            }
						tmp = strtok(cmdtext, idx);
						if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /donner drogues [playerid/PartOfName] [montant]");
							return 1;
						}
						new dammount;
						dammount = strval(tmp);
						if(dammount > PlayerInfo[playerid][pDrugs]) { SendClientMessage(playerid, COLOR_GREY, "   Vous n'avez pas assez."); return 1; }
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						PlayerInfo[playerid][pDrugs] -= dammount;
						PlayerInfo[giveplayerid][pDrugs] += dammount;
						if(PlayerInfo[playerid][pSex] == 1) { format(string, sizeof(string), " %s sort de la drogue et la donne à %s.", sendername, giveplayer); }
						else { format(string, sizeof(string), " %s prend un sachet de drogue de sa poche et le donne à %s.", sendername, giveplayer); }
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "Ce joueur n'est pas connecté!");
				    return 1;
				}
			}
			else if(strcmp(x_nr,"arme",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /donner arme [playerid/PartOfName]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
						if(ProxDetectorS(5.0, playerid, giveplayerid))
						{
						    new gunID = GetPlayerWeapon(playerid);
            				new gunAmmo = GetPlayerAmmo(playerid);

						    GetPlayerName(playerid, sendername, sizeof(sendername));
						    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));

						    if(gunID != 0 && gunAmmo != 0)
						    {
						        SafeGivePlayerWeapon(giveplayerid, gunID, gunAmmo);
						        RemovePlayerWeapon(playerid, gunID);
						        format(string, sizeof(string), " %s sort une arme et la donne à %s.", sendername, giveplayer);
						        ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		            			return 1;
						    }
						    else
						    {
						        SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas d'arme a donner!");
						        return 1;
						    }
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas près de vous! ");
						    return 1;
						}
				    }
				}
			}
			else if(strcmp(x_nr,"clef1",true) == 0)
			{
			    if(PlayerInfo[playerid][pPcarkey] == 9999)
			    {
			        SendClientMessage(playerid, COLOR_GRAD1, "Vous n'avez pas de clef a donner!");
			        return 1;
			    }
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /donner clef1 [playerid/PartOfName]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
						if(PlayerInfo[giveplayerid][pPcarkey] != 9999 && PlayerInfo[giveplayerid][pPcarkey2] != 9999 && PlayerInfo[giveplayerid][pPcarkey3] != 9999)
			    		{
			        		SendClientMessage(playerid, COLOR_GRAD1, "Ce joueur a déjà 4 clefs!");
			        		return 1;
			    		}
			    		new Float:x, Float:y, Float:z;
			            GetPlayerPos(giveplayerid,x,y,z);
			            if(PlayerToPoint(15, playerid, x, y, z))
			            {
			                if(PlayerInfo[giveplayerid][pPcarkey] == 9999)
			                {
			    				PlayerInfo[giveplayerid][pPcarkey] = PlayerInfo[playerid][pPcarkey];
			    				PlayerInfo[playerid][pPcarkey] = 9999;
			    				GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* %s prend la clef de son véhicule et la jette à %s.", sendername ,giveplayer);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
								OnPlayerUpdate(playerid);
								OnPlayerUpdate(giveplayerid);
							}
							else if(PlayerInfo[giveplayerid][pPcarkey2] == 9999)
			                {
			    				PlayerInfo[giveplayerid][pPcarkey2] = PlayerInfo[playerid][pPcarkey];
			    				PlayerInfo[playerid][pPcarkey] = 9999;
			    				GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* %s prend la clef de son véhicule et la jette à %s.", sendername ,giveplayer);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
								OnPlayerUpdate(playerid);
								OnPlayerUpdate(giveplayerid);
							}
							else if(PlayerInfo[giveplayerid][pPcarkey3] == 9999)
			                {
			    				PlayerInfo[giveplayerid][pPcarkey3] = PlayerInfo[playerid][pPcarkey];
			    				PlayerInfo[playerid][pPcarkey] = 9999;
			    				GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* %s prend la clef de son véhicule et la jette à %s.", sendername ,giveplayer);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
								OnPlayerUpdate(playerid);
								OnPlayerUpdate(giveplayerid);
							}
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GRAD1, "Ce joueur n'est pas près de vous!");
						    return 1;
						}

					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "Ce joueur n'est pas connecté!");
				    return 1;
				}

			}
			else if(strcmp(x_nr,"clef2",true) == 0)
			{
			    if(PlayerInfo[playerid][pPcarkey2] == 9999)
			    {
			        SendClientMessage(playerid, COLOR_GRAD1, "Vous n'avez pas de clef2 sur votre porte clef a donner!");
			        return 1;
			    }
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /donner clef2 [playerid/PartOfName]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
						if(PlayerInfo[giveplayerid][pPcarkey] != 9999 && PlayerInfo[giveplayerid][pPcarkey2] != 9999 && PlayerInfo[giveplayerid][pPcarkey3] != 9999)
			    		{
			        		SendClientMessage(playerid, COLOR_GRAD1, "Ce joueur a déjà 4 clefs!");
			        		return 1;
			    		}
			    		new Float:x, Float:y, Float:z;
			            GetPlayerPos(giveplayerid,x,y,z);
			            if(PlayerToPoint(15, playerid, x, y, z))
			            {
			                if(PlayerInfo[giveplayerid][pPcarkey] == 9999)
			                {
			    				PlayerInfo[giveplayerid][pPcarkey] = PlayerInfo[playerid][pPcarkey2];
			    				PlayerInfo[playerid][pPcarkey2] = 9999;
			    				GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* %s prend la clef de son véhicule et la jette à %s.", sendername ,giveplayer);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
								OnPlayerUpdate(playerid);
								OnPlayerUpdate(giveplayerid);
							}
							else if(PlayerInfo[giveplayerid][pPcarkey2] == 9999)
			                {
			    				PlayerInfo[giveplayerid][pPcarkey2] = PlayerInfo[playerid][pPcarkey2];
			    				PlayerInfo[playerid][pPcarkey2] = 9999;
			    				GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* %s prend la clef de son véhicule et la jette à %s.", sendername ,giveplayer);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
								OnPlayerUpdate(playerid);
								OnPlayerUpdate(giveplayerid);
							}
							else if(PlayerInfo[giveplayerid][pPcarkey3] == 9999)
			                {
			    				PlayerInfo[giveplayerid][pPcarkey3] = PlayerInfo[playerid][pPcarkey2];
			    				PlayerInfo[playerid][pPcarkey2] = 9999;
			    				GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* %s prend la clef de son véhicule et la jette à %s.", sendername ,giveplayer);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
								OnPlayerUpdate(playerid);
								OnPlayerUpdate(giveplayerid);
							}
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GRAD1, "Ce joueur n'est pas près de vous!");
						    return 1;
						}

					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "Ce joueur n'est pas connecté!");
				    return 1;
				}

			}
			else if(strcmp(x_nr,"clef3",true) == 0)
			{
			    if(PlayerInfo[playerid][pPcarkey3] == 9999)
			    {
			        SendClientMessage(playerid, COLOR_GRAD1, "Vous n'avez pas de clef3 sur votre porte clef a donner!");
			        return 1;
			    }
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /donner clef3 [playerid/PartOfName]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
						if(PlayerInfo[giveplayerid][pPcarkey] != 9999 && PlayerInfo[giveplayerid][pPcarkey2] != 9999 && PlayerInfo[giveplayerid][pPcarkey3] != 9999)
			    		{
			        		SendClientMessage(playerid, COLOR_GRAD1, "Ce joueur a déjà 4 clefs!");
			        		return 1;
			    		}
			    		new Float:x, Float:y, Float:z;
			            GetPlayerPos(giveplayerid,x,y,z);
			            if(PlayerToPoint(15, playerid, x, y, z))
			            {
			                if(PlayerInfo[giveplayerid][pPcarkey] == 9999)
			                {
			    				PlayerInfo[giveplayerid][pPcarkey] = PlayerInfo[playerid][pPcarkey3];
			    				PlayerInfo[playerid][pPcarkey3] = 9999;
			    				GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* %s prend la clef de son véhicule et la jette à %s.", sendername ,giveplayer);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
								OnPlayerUpdate(playerid);
								OnPlayerUpdate(giveplayerid);
							}
							else if(PlayerInfo[giveplayerid][pPcarkey2] == 9999)
			                {
			    				PlayerInfo[giveplayerid][pPcarkey2] = PlayerInfo[playerid][pPcarkey3];
			    				PlayerInfo[playerid][pPcarkey3] = 9999;
			    				GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* %s prend la clef de son véhicule et la jette à %s.", sendername ,giveplayer);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
								OnPlayerUpdate(playerid);
								OnPlayerUpdate(giveplayerid);
							}
							else if(PlayerInfo[giveplayerid][pPcarkey3] == 9999)
			                {
			    				PlayerInfo[giveplayerid][pPcarkey3] = PlayerInfo[playerid][pPcarkey3];
			    				PlayerInfo[playerid][pPcarkey3] = 9999;
			    				GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* %s prend la clef de son véhicule et la jette à %s.", sendername ,giveplayer);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
								OnPlayerUpdate(playerid);
								OnPlayerUpdate(giveplayerid);
							}
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GRAD1, "Ce joueur n'est pas près de vous!");
						    return 1;
						}

					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "Ce joueur n'est pas connecté!");
				    return 1;
				}

			}
			else if(strcmp(x_nr,"cleflocation",true) == 0)
			{
			    if(HireCar[playerid] == 299)
			    {
			        SendClientMessage(playerid, COLOR_GRAD1, "Vous n'avez pas de clef de véhicule de location à donner!");
			        return 1;
			    }
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp))
			    {
			        SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /donner cleflocation [playerid/PartOfName]");
			        return 1;
			    }
			    giveplayerid = ReturnUser(tmp);
       			if(IsPlayerConnected(giveplayerid))
			    {
			        if(giveplayerid != INVALID_PLAYER_ID)
			        {
			            new Float:x, Float:y, Float:z;
			            GetPlayerPos(giveplayerid,x,y,z);
			            if(!PlayerToPoint(15, playerid, x, y, z))
			            {
			                SendClientMessage(playerid, COLOR_GRAD1, "Ce joueur n'est pas près de vous!");
			                return 1;
			            }
			    		if(HireCar[giveplayerid] != 299)
			    		{
			        		SendClientMessage(playerid, COLOR_GRAD1, "Ce joueur a déjà une clef de véhicule de location!");
			        		return 1;
			    		}
			    		HireCar[giveplayerid] = HireCar[playerid];
			    		HireCar[playerid] = 299;
			    		GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), " %s prend la clef de son véhicule de location et la jette à %s.", sendername ,giveplayer);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}
			}
			else if(strcmp(x_nr,"corde",true) == 0)
			{
			    if(Rope[playerid] == 0)
			    {
			        SendClientMessage(playerid, COLOR_GRAD1, "Vous n'avez pas de corde a donner!");
			        return 1;
			    }
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp))
			    {
			        SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /donner corde [playerid/PartOfName]");
			        return 1;
			    }
			    giveplayerid = ReturnUser(tmp);
			    if(IsPlayerConnected(giveplayerid))
			    {
			        if(giveplayerid != INVALID_PLAYER_ID)
			        {
			            if(ProxDetectorS(5, playerid, giveplayerid))
			            {
			                if(Rope[giveplayerid] > 4)
			                {
			                    SendClientMessage(playerid, COLOR_GREY, "Ce joueur a déjà assez une corde!");
			                    return 1;
			                }
			                Rope[playerid]--;
			                Rope[giveplayerid]++;
			                GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), " %s prend sa corde et la donne à %s.", sendername ,giveplayer);
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			            }
			            else
			            {
			                SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas près de vous!");
							return 1;
			            }
			        }
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /donner [nom] [playerid/PartOfName] ([montant])");
				SendClientMessage(playerid, COLOR_WHITE, "Noms Disponibles: drogues, arme, clef(1-3), cleflocation, corde");
				return 1;
			}

	    }
	    return 1;
	}

    if(strcmp(cmd, "/banderyeux", true) == 0 || strcmp(cmd, "/bailloner", true) == 0 || strcmp(cmd, "/bander", true) == 0)
	//if(strcmp(cmd, "/banderyeux", true) == 0) // by LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
	        tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp))
	        {
	        	SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /banderyeux [playerid/PartOfName]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(giveplayerid == playerid) { return 1; }
			        if(BlindFold[giveplayerid] == 0)
			        {
			        	if(PlayerTied[giveplayerid] == 1)
			        	{
			            	if(GetPlayerVehicleID(playerid) != GetPlayerVehicleID(giveplayerid))
	        				{
               					SendClientMessage(playerid, COLOR_GREY, "Vous devez être dans le même véhicule pour bander les yeux de quelqu'un!");
        						return 1;
	        				}
	        				GetPlayerName(playerid, sendername, sizeof(sendername));
	        				GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
	        				SetPlayerCameraPos(giveplayerid, 2000,-2000,2000);
							SetPlayerCameraLookAt(giveplayerid, 2000,-2000,2000);
			            	BlindFold[giveplayerid] = 1;
			            	format(string, sizeof(string), " %s met un bandeau sur les yeux de %s", sendername, giveplayer);
			            	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			        	}
			        	else
			        	{
			            	SendClientMessage(playerid, COLOR_GREY, "Le joueur doit être ligotté avant!");
							return 1;
						}
					}
					else
					{
					    new Float:x, Float:y, Float:z;
					    GetPlayerPos(giveplayerid,x,y,z);
					    if(PlayerToPoint(5, playerid, x, y, z))
					    {
					        GetPlayerName(playerid, sendername, sizeof(sendername));
	        				GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					        SetCameraBehindPlayer(giveplayerid);
					    	BlindFold[giveplayerid] = 0;
					    	format(string, sizeof(string), " %s enleve le foulard des yeux de %s", sendername, giveplayer);
			            	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas près de vous!");
						    return 1;
						}
					}
			    }
			}
	    }
	    return 1;
	}

	if(strcmp(cmd,"/montrerbadge",true)==0 || strcmp(cmd, "/mb", true) == 0)
    {
        if(IsPlayerConnected(playerid))
	    {
		    	if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)
				{
	        	tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /montrerbadge [playerid/PartOfName]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
					if(giveplayerid != INVALID_PLAYER_ID)
					{
				    	if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
					    	if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez pas vous montrez votre badge à vous même!"); return 1; }
					    	GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), " %s prend son Badge de sa poche.", sendername);
							SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					    	if(PlayerInfo[playerid][pRank] == 8) { format(string, sizeof(string), "* Chef %s", sendername); }
				        	else if(PlayerInfo[playerid][pRank] == 7) { format(string, sizeof(string), "* Chef Adjoint %s", sendername); }
				        	else if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "* Capitaine %s", sendername); }
				        	else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "* Lieutenant %s", sendername); }
				        	else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "* Sergeant %s", sendername); }
				        	else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "* Corporal %s", sendername); }
				        	else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "* Officier %s", sendername); }
				        	else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "* Cadet %s", sendername); }
							SendClientMessage(giveplayerid, COLOR_GREY, string);
				        	format(string, sizeof(string), " %svous montre son badge.", sendername);
							SendClientMessage(giveplayerid, COLOR_GREY, string);
							format(string, sizeof(string), " Vous avez montré votre badge à %s.", giveplayer);
							SendClientMessage(playerid, COLOR_GREY, string);
						}
						else
						{
					    	SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas près de vous!");
					    	return 1;
						}
					}
				}
	        	else
	        	{
	            	SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté!");
	            	return 1;
	        	}
	        }
		}
	    return 1;
 	}

 	if(strcmp(cmd,"/montrerid",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
		    if(PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2)
			{
	        	tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /montrerid [playerid/PartOfName]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
					if(giveplayerid != INVALID_PLAYER_ID)
					{
					    if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
						    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez pas vous montrez votre ID à vous même!"); return 1; }
						    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), " %s prend son ID de sa poche.", sendername);
							SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "* || Directeur %s ||", sendername); }
					        else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "* || Assistant du Directeur %s ||", sendername); }
					        else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "* || Groupe d'intervention %s ||", sendername); }
					        else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "* || Agent Spécial %s* ||", sendername); }
					        else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "* || Agent %s ||", sendername); }
					        else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "* || Interne %s ||", sendername); }
							SendClientMessage(giveplayerid, COLOR_GREY, string);
					        format(string, sizeof(string), " %s vous montre son ID.", sendername);
							SendClientMessage(giveplayerid, COLOR_GREY, string);
							format(string, sizeof(string), " Vous avez montré votre ID %s.", giveplayer);
							SendClientMessage(playerid, COLOR_GREY, string);
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas près de vous!");
						    return 1;
						}
					}
				}
			}
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté!");
	            return 1;
	        }
		}
	    return 1;
}

 	if(!strcmp(cmdtext, "/+1", true))
 	{
		if(IsPlayerConnected(playerid))
		{
		    if(GetPlayerState(playerid) == 1)
		    {
		        if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)
		        {
		            if(PlayerToPoint(1.0,playerid,242.7591,66.4315,1003.6406))
		            {
		            	SetPlayerPos(playerid, 1556.1990,-1671.6530,28.3956);
		            	GameTextForPlayer(playerid, "~w~Toit du Commisariat",5000,1);
						SetPlayerInterior(playerid,0);
						PlayerInfo[playerid][pInt] = 0;
					}
		        }
		    }
		}
		return 1;
 	}

 	if(!strcmp(cmdtext, "/-1", true))
 	{
 	    if(IsPlayerConnected(playerid))
		{
		    if(GetPlayerState(playerid) == 1)
		    {
		        if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)
		        {
		            if(PlayerToPoint(1.0,playerid,242.7591,66.4315,1003.6406))
		            {
		            	SetPlayerPos(playerid, 1526.5972,-1676.0651,5.8906);
		            	GameTextForPlayer(playerid, "~w~Garage du Commisariat",5000,1);
						SetPlayerInterior(playerid,0);
						PlayerInfo[playerid][pInt] = 0;
					}
		        }
		    }
		}
		return 1;
	 }

 /*	if(!strcmp(cmdtext, "/pdup", true))
 	{
		if(IsPlayerConnected(playerid))
		{
		    if(GetPlayerState(playerid) == 1)
		    {
		        if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)
		        {
		            if(PlayerToPoint(1.0,playerid,242.7591,66.4315,1003.6406))
		            {
		            	SetPlayerPos(playerid, 2280.8179,2461.9648,38.6875);
		            	GameTextForPlayer(playerid, "~w~Toit du Commisariat",5000,1);
						SetPlayerInterior(playerid,0);
						PlayerInfo[playerid][pInt] = 0;
					}
		        }
		    }
		}
		return 1;
 	}

 	if(!strcmp(cmdtext, "/==", true))
 	{
 	    if(IsPlayerConnected(playerid))
		{
		    if(GetPlayerState(playerid) == 1)
		    {
		        if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)
		        {
		            if(PlayerToPoint(1.0,playerid,242.7591,66.4315,1003.6406))
		            {
		            	SetPlayerPos(playerid, 2289.3633,2451.5344,10.8203);
		            	GameTextForPlayer(playerid, "~w~Garage du Commisariat",5000,1);
						SetPlayerInterior(playerid,0);
						PlayerInfo[playerid][pInt] = 0;
					}
		        }
		    }
		}
		return 1;
  	}

 	if(!strcmp(cmdtext, "/pddown", true))
 	{
 	    if(IsPlayerConnected(playerid))
		{
		    if(GetPlayerState(playerid) == 1)
		    {
		        if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)
		        {
		            if(PlayerToPoint(1.0,playerid,242.7591,66.4315,1003.6406))
		            {
		            	SetPlayerPos(playerid, 2267.9255,2447.2571,3.5313);
		            	GameTextForPlayer(playerid, "~w~Garage du Commisariat",5000,1);
						SetPlayerInterior(playerid,0);
						PlayerInfo[playerid][pInt] = 0;
					}
		        }
		    }
		}
		return 1;
  	}

 	if(!strcmp(cmdtext, "/-2", true))
 	{
 	    if(IsPlayerConnected(playerid))
		{
		    if(GetPlayerState(playerid) == 1)
		    {
		        if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)
		        {
		            if(PlayerToPoint(1.0,playerid,242.7591,66.4315,1003.6406))
		            {
		            	SetPlayerPos(playerid, 2268.2280,2446.7395,-7.1953);
		            	GameTextForPlayer(playerid, "~w~Garage du Commisariat",5000,1);
						SetPlayerInterior(playerid,0);
						PlayerInfo[playerid][pInt] = 0;
					}
		        }
		    }
		}
		return 1;
 	}*/

    if(!strcmp(cmdtext, "/montrernotes", true)) // By LordMan
    {
        if(IsPlayerConnected(playerid))
        {
            if(gPlayerLogged[playerid] == 0)
            {
                SendClientMessage(playerid, COLOR_GREY, "Vous devez être connecté! ");
                return 1;
            }
            SendClientMessage(playerid, COLOR_LIGHT_BLUE, "_____________Calpin_____________");
            format(string, sizeof(string), "1| %s", PlayerInfo[playerid][pNote1]);
            SendClientMessage(playerid, COLOR_WHITE, string);
            format(string, sizeof(string), "2| %s", PlayerInfo[playerid][pNote2]);
            SendClientMessage(playerid, COLOR_WHITE, string);
            format(string, sizeof(string), "3| %s", PlayerInfo[playerid][pNote3]);
            SendClientMessage(playerid, COLOR_WHITE, string);
            format(string, sizeof(string), "4| %s", PlayerInfo[playerid][pNote4]);
            SendClientMessage(playerid, COLOR_WHITE, string);
            format(string, sizeof(string), "5| %s", PlayerInfo[playerid][pNote5]);
            SendClientMessage(playerid, COLOR_WHITE, string);
            SendClientMessage(playerid, COLOR_LIGHT_BLUE, "___________________________________");
            GetPlayerName(playerid, sendername, sizeof(sendername));
            format(string, sizeof(string), " %s jette un coup d'oeil a son calpin.", sendername);
      		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
        }
        return 1;
    }

    if(strcmp(cmd,"/suprimernote",true)==0) // By LordMan
    {
        if(IsPlayerConnected(playerid))
        {
            if(gPlayerLogged[playerid] == 0)
            {
                SendClientMessage(playerid, COLOR_GREY, "Vous devez être connecté! ");
                return 1;
            }
            new x_nr[256];
            x_nr = strtok(cmdtext, idx);
			if(!strlen(x_nr))
			{
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /suprimernote [slot(1-5)]");
				return 1;
			}
			if(strcmp(x_nr,"1",true) == 0)
			{
			    if(PlayerInfo[playerid][pNote1s] == 1)
			    {
			    	strmid(PlayerInfo[playerid][pNote1], "Aucune", 0, strlen("Aucune"), 255);
			    	PlayerInfo[playerid][pNote1s] = 0;
			    	SendClientMessage(playerid, COLOR_WHITE, "Note (slot1) suprimée.");
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas de note dans ce slot(1)! ");
				}
			}
			else if(strcmp(x_nr,"2",true) == 0)
			{
			    if(PlayerInfo[playerid][pNote2s] == 1)
			    {
			    	strmid(PlayerInfo[playerid][pNote2], "Aucune", 0, strlen("Aucune"), 255);
			    	PlayerInfo[playerid][pNote2s] = 0;
			    	SendClientMessage(playerid, COLOR_WHITE, "Note (slot2) suprimée.");
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas de note dans ce slot(2)! ");
				}
			}
			else if(strcmp(x_nr,"3",true) == 0)
			{
			    if(PlayerInfo[playerid][pNote3s] == 1)
			    {
			    	strmid(PlayerInfo[playerid][pNote3], "Aucune", 0, strlen("Aucune"), 255);
			    	PlayerInfo[playerid][pNote3s] = 0;
			    	SendClientMessage(playerid, COLOR_WHITE, "Note (slot3) suprimée.");
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas de note dans ce slot(3)! ");
				}
			}
			else if(strcmp(x_nr,"4",true) == 0)
			{
			    if(PlayerInfo[playerid][pNote4s] == 1)
			    {
			    	strmid(PlayerInfo[playerid][pNote4], "Aucune", 0, strlen("Aucune"), 255);
			    	PlayerInfo[playerid][pNote4s] = 0;
			    	SendClientMessage(playerid, COLOR_WHITE, "Note (slot4) suprimée.");
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas de note dans ce slot(4)! ");
				}
			}
			else if(strcmp(x_nr,"5",true) == 0)
			{
			    if(PlayerInfo[playerid][pNote5s] == 1)
			    {
			    	strmid(PlayerInfo[playerid][pNote5], "Aucune", 0, strlen("Aucune"), 255);
			    	PlayerInfo[playerid][pNote5s] = 0;
			    	SendClientMessage(playerid, COLOR_WHITE, "Note (slot5) suprimée.");
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas de note dans ce slot(5)! ");
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Mauvais ID de slot! ");
			    return 1;
			}
        }
        return 1;
    }

    if(strcmp(cmd,"/creenote",true) == 0 || strcmp(cmd,"/creernote",true) == 0) // By LordMan
    {
        if(IsPlayerConnected(playerid))
        {
            if(gPlayerLogged[playerid] == 0)
            {
                SendClientMessage(playerid, COLOR_GREY, "Vous devez être connecté! ");
                return 1;
            }
            new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(length > 60)
			{
			    SendClientMessage(playerid, COLOR_GREY, "Note trop longue! ");
			    return 1;
			}
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /creenote [text]");
				return 1;
			}
			if(PlayerInfo[playerid][pNote1s] == 0)
			{
			    strmid(PlayerInfo[playerid][pNote1], result, 0, strlen(result), 255);
			    PlayerInfo[playerid][pNote1s] = 1;
			    SendClientMessage(playerid, COLOR_WHITE, "Note crée.");
			    return 1;
			}
			else if(PlayerInfo[playerid][pNote2s] == 0)
			{
			    strmid(PlayerInfo[playerid][pNote2], result, 0, strlen(result), 255);
			    PlayerInfo[playerid][pNote2s] = 1;
			    SendClientMessage(playerid, COLOR_WHITE, "Note crée.");
			    return 1;
			}
			else if(PlayerInfo[playerid][pNote3s] == 0)
			{
			    strmid(PlayerInfo[playerid][pNote3], result, 0, strlen(result), 255);
			    PlayerInfo[playerid][pNote3s] = 1;
			    SendClientMessage(playerid, COLOR_WHITE, "Note crée.");
			    return 1;
			}
			else if(PlayerInfo[playerid][pNote4s] == 0)
			{
			    strmid(PlayerInfo[playerid][pNote4], result, 0, strlen(result), 255);
			    PlayerInfo[playerid][pNote4s] = 1;
			    SendClientMessage(playerid, COLOR_WHITE, "Note crée.");
			    return 1;
			}
			else if(PlayerInfo[playerid][pNote5s] == 0)
			{
			    strmid(PlayerInfo[playerid][pNote5], result, 0, strlen(result), 255);
			    PlayerInfo[playerid][pNote5s] = 1;
			    SendClientMessage(playerid, COLOR_WHITE, "Note crée.");
			    return 1;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas de page libre, suprimer en! ");
			    return 1;
			}
        }
        return 1;
    }

    if(strcmp(cmd,"/donnernote",true)==0) // By LordMan
    {
        if(IsPlayerConnected(playerid))
        {
            if(gPlayerLogged[playerid] == 0)
            {
                SendClientMessage(playerid, COLOR_GREY, "Vous devez être connecté! ");
                return 1;
            }
            tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /donnernote [playerid/PartOfName] [note id]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        new Float:x, Float:y, Float:z;
           			GetPlayerPos(giveplayerid,x,y,z);
			        if(!PlayerToPoint(5, playerid, x, y, z))
			        {
			            SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas près de vous! ");
			            return 1;
			        }
			        new x_nr[64];
			        x_nr = strtok(cmdtext, idx);
					if(!strlen(x_nr))
					{
						SendClientMessage(playerid, COLOR_WHITE, "USAGE: /donnernote [playerid/PartOfName] [note id]");
						return 1;
					}
					if(strcmp(x_nr,"1",true) == 0)
					{
					    if(PlayerInfo[playerid][pNote1s] == 1)
					    {
					        if(PlayerInfo[giveplayerid][pNote1s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote1], PlayerInfo[playerid][pNote1], 0, strlen(PlayerInfo[playerid][pNote1]), 255);
					            PlayerInfo[giveplayerid][pNote1s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Vous avez donné une page de votre calpin [ID:%d] à %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Vous avez reçus une note de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote2s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote2], PlayerInfo[playerid][pNote1], 0, strlen(PlayerInfo[playerid][pNote1]), 255);
					            PlayerInfo[giveplayerid][pNote2s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Vous avez donné une page de votre calpin [ID:%d] à %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Vous avez reçus une note de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote3s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote3], PlayerInfo[playerid][pNote1], 0, strlen(PlayerInfo[playerid][pNote1]), 255);
					            PlayerInfo[giveplayerid][pNote3s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Vous avez donné une page de votre calpin [ID:%d] à %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Vous avez reçus une note de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote4s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote4], PlayerInfo[playerid][pNote1], 0, strlen(PlayerInfo[playerid][pNote1]), 255);
					            PlayerInfo[giveplayerid][pNote4s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Vous avez donné une page de votre calpin [ID:%d] à %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Vous avez reçus une note de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote5s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote5], PlayerInfo[playerid][pNote1], 0, strlen(PlayerInfo[playerid][pNote1]), 255);
					            PlayerInfo[giveplayerid][pNote5s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Vous avez donné une page de votre calpin [ID:%d] à %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Vous avez reçus une note de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else
					        {
					            SendClientMessage(playerid, COLOR_GREY, "Le calpin de ce joueur est plein! ");
					            return 1;
					        }
					    }
					    else
					    {
					        SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas de note dans le slot 1! ");
					        return 1;
					    }
					}
					else if(strcmp(x_nr,"2",true) == 0)
					{
					    if(PlayerInfo[playerid][pNote2s] == 1)
					    {
					        if(PlayerInfo[giveplayerid][pNote1s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote1], PlayerInfo[playerid][pNote2], 0, strlen(PlayerInfo[playerid][pNote2]), 255);
					            PlayerInfo[giveplayerid][pNote1s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Vous avez donné une page de votre calpin [ID:%d] à %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Vous avez reçus une note de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote2s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote2], PlayerInfo[playerid][pNote2], 0, strlen(PlayerInfo[playerid][pNote2]), 255);
					            PlayerInfo[giveplayerid][pNote2s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Vous avez donné une page de votre calpin [ID:%d] à %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Vous avez reçus une note de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote3s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote3], PlayerInfo[playerid][pNote2], 0, strlen(PlayerInfo[playerid][pNote2]), 255);
					            PlayerInfo[giveplayerid][pNote3s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Vous avez donné une page de votre calpin [ID:%d] à %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Vous avez reçus une note de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote4s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote4], PlayerInfo[playerid][pNote2], 0, strlen(PlayerInfo[playerid][pNote2]), 255);
					            PlayerInfo[giveplayerid][pNote4s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Vous avez donné une page de votre calpin [ID:%d] à %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Vous avez reçus une note de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote5s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote5], PlayerInfo[playerid][pNote2], 0, strlen(PlayerInfo[playerid][pNote2]), 255);
					            PlayerInfo[giveplayerid][pNote5s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Vous avez donné une page de votre calpin [ID:%d] à %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Vous avez reçus une note de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else
					        {
					            SendClientMessage(playerid, COLOR_GREY, "Le calpin de ce joueur est plein! ");
					            return 1;
					        }
					    }
					    else
					    {
					        SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas de note dans le slot2 ! ");
					        return 1;
					    }
					}
					else if(strcmp(x_nr,"3",true) == 0)
					{
					    if(PlayerInfo[playerid][pNote3s] == 1)
					    {
					        if(PlayerInfo[giveplayerid][pNote1s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote1], PlayerInfo[playerid][pNote3], 0, strlen(PlayerInfo[playerid][pNote3]), 255);
					            PlayerInfo[giveplayerid][pNote1s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Vous avez donné une page de votre calpin [ID:%d] à %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Vous avez reçus une note de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote2s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote2], PlayerInfo[playerid][pNote3], 0, strlen(PlayerInfo[playerid][pNote3]), 255);
					            PlayerInfo[giveplayerid][pNote2s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Vous avez donné une page de votre calpin [ID:%d] à %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Vous avez reçus une note de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote3s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote3], PlayerInfo[playerid][pNote3], 0, strlen(PlayerInfo[playerid][pNote3]), 255);
					            PlayerInfo[giveplayerid][pNote3s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Vous avez donné une page de votre calpin [ID:%d] à %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Vous avez reçus une note de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote4s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote4], PlayerInfo[playerid][pNote4], 0, strlen(PlayerInfo[playerid][pNote4]), 255);
					            PlayerInfo[giveplayerid][pNote4s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Vous avez donné une page de votre calpin [ID:%d] à %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Vous avez reçus une note de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote5s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote5], PlayerInfo[playerid][pNote5], 0, strlen(PlayerInfo[playerid][pNote5]), 255);
					            PlayerInfo[giveplayerid][pNote5s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Vous avez donné une page de votre calpin [ID:%d] à %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Vous avez reçus une note de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else
					        {
					            SendClientMessage(playerid, COLOR_GREY, "Le caplin de ce joueur est plein! ");
					            return 1;
					        }
					    }
					    else
					    {
					        SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas de note dans le slot3! ");
					        return 1;
					    }
					}
					else if(strcmp(x_nr,"4",true) == 0)
					{
					    if(PlayerInfo[playerid][pNote4s] == 1)
					    {
					        if(PlayerInfo[giveplayerid][pNote1s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote1], PlayerInfo[playerid][pNote4], 0, strlen(PlayerInfo[playerid][pNote4]), 255);
					            PlayerInfo[giveplayerid][pNote1s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Vous avez donné une page de votre calpin [ID:%d] à %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Vous avez reçus une note de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote2s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote2], PlayerInfo[playerid][pNote4], 0, strlen(PlayerInfo[playerid][pNote4]), 255);
					            PlayerInfo[giveplayerid][pNote2s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Vous avez donné une page de votre calpin [ID:%d] à %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Vous avez reçus une note de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote3s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote3], PlayerInfo[playerid][pNote4], 0, strlen(PlayerInfo[playerid][pNote4]), 255);
					            PlayerInfo[giveplayerid][pNote3s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Vous avez donné une page de votre calpin [ID:%d] à %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Vous avez reçus une note de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote4s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote4], PlayerInfo[playerid][pNote4], 0, strlen(PlayerInfo[playerid][pNote4]), 255);
					            PlayerInfo[giveplayerid][pNote4s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Vous avez donné une page de votre calpin [ID:%d] à %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Vous avez reçus une note de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote5s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote5], PlayerInfo[playerid][pNote4], 0, strlen(PlayerInfo[playerid][pNote4]), 255);
					            PlayerInfo[giveplayerid][pNote5s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Vous avez donné une page de votre calpin [ID:%d] à %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Vous avez reçus une note de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else
					        {
					            SendClientMessage(playerid, COLOR_GREY, "Le calpin de ce joueur est plein! ");
					            return 1;
					        }
					    }
					    else
					    {
					        SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas de note dans le slot4! ");
					        return 1;
					    }
					}
					else if(strcmp(x_nr,"5",true) == 0)
					{
					    if(PlayerInfo[playerid][pNote5s] == 1)
					    {
					        if(PlayerInfo[giveplayerid][pNote1s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote1], PlayerInfo[playerid][pNote5], 0, strlen(PlayerInfo[playerid][pNote5]), 255);
					            PlayerInfo[giveplayerid][pNote1s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Vous avez donné une page de votre calpin [ID:%d] à %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Vous avez reçus une note de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote2s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote2], PlayerInfo[playerid][pNote5], 0, strlen(PlayerInfo[playerid][pNote5]), 255);
					            PlayerInfo[giveplayerid][pNote2s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Vous avez donné une page de votre calpin [ID:%d] à %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Vous avez reçus une note de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote3s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote3], PlayerInfo[playerid][pNote5], 0, strlen(PlayerInfo[playerid][pNote5]), 255);
					            PlayerInfo[giveplayerid][pNote3s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Vous avez donné une page de votre calpin [ID:%d] à %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Vous avez reçus une note de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote4s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote4], PlayerInfo[playerid][pNote5], 0, strlen(PlayerInfo[playerid][pNote5]), 255);
					            PlayerInfo[giveplayerid][pNote4s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Vous avez donné une page de votre calpin [ID:%d] à %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Vous avez reçus une note de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote5s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote5], PlayerInfo[playerid][pNote5], 0, strlen(PlayerInfo[playerid][pNote5]), 255);
					            PlayerInfo[giveplayerid][pNote5s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Vous avez donné une page de votre calpin [ID:%d] à %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Vous avez reçus une note de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else
					        {
					            SendClientMessage(playerid, COLOR_GREY, "Le calpin de ce joueur est plein! ");
					            return 1;
					        }
					    }
					    else
					    {
					        SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas de note dans le slot5! ");
					        return 1;
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Mauvaise Id de note! ");
					    return 1;
					}
			    }
			}
        }
        return 1;
    }
    if(strcmp(cmd, "/virergov", true) == 0)
    //if(strcmp(cmd,"/virergov",true)==0) // By LordMan
    {
		if(IsPlayerConnected(playerid))
		{
		    if(gPlayerLogged[playerid] == 0)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "Vous devez être connecté! ");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 7)
			{
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /virergov [playerid/PartOfName]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        if(PlayerInfo[giveplayerid][pMember] != 7)
				        {
				            SendClientMessage(playerid, COLOR_GREY, "Ce joueur ne fait pas partie du gouvernement! ");
				            return 1;
						}
						PlayerInfo[giveplayerid][pMember] = 0;
						PlayerInfo[giveplayerid][pRank] = 0;
						PlayerInfo[giveplayerid][pTeam] = 3;
						gTeam[giveplayerid] = 3;
						new randomskin;
						if(PlayerInfo[giveplayerid][pSex] == 1) { randomskin = random(sizeof(CivMalePeds)); }
						else if(PlayerInfo[giveplayerid][pSex] == 2) { randomskin = random(sizeof(CivFemalePeds)); }
						else { randomskin = random(sizeof(CivMalePeds)); }
						SetPlayerSkin(giveplayerid, randomskin);
						PlayerInfo[giveplayerid][pChar] = randomskin;
						SendClientMessage(giveplayerid, COLOR_RED, "Vous avez été viré de votre faction par le leader.");
						//SendClientMessage(playerid, COLOR_WHITE, "Vous avez viré ce joueur du gouvernement.");
						format(string, sizeof(string), "Vous avez viré %s de votre faction.", giveplayer);
						SendClientMessage(playerid, COLOR_RED, string);
				    }
				}
			}
			if(PlayerInfo[playerid][pAdmin] >= 3)
			{
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /virergov [playerid/PartOfName]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        if(PlayerInfo[giveplayerid][pMember] != 7)
				        {
				            SendClientMessage(playerid, COLOR_GREY, "Ce joueur ne fait pas partie du gouvernement! ");
				            return 1;
						}
						PlayerInfo[giveplayerid][pMember] = 0;
						PlayerInfo[giveplayerid][pRank] = 0;
						PlayerInfo[giveplayerid][pTeam] = 3;
						gTeam[giveplayerid] = 3;
						new randomskin;
						if(PlayerInfo[giveplayerid][pSex] == 0) { randomskin = random(sizeof(CivMalePeds)); }
						else if(PlayerInfo[giveplayerid][pSex] == 1) { randomskin = random(sizeof(CivFemalePeds)); }
						else { randomskin = random(sizeof(CivMalePeds)); }
						SetPlayerSkin(giveplayerid, randomskin);
						PlayerInfo[giveplayerid][pChar] = randomskin;
						format(string, sizeof(string), " Vous avez été viré de votre faction par l'Admin %s.", sendername);
						SendClientMessage(giveplayerid, COLOR_WHITE, string);
						//SendClientMessage(playerid, COLOR_WHITE, "Vous avez viré ce joueur du gouvernement.");
						format(string, sizeof(string), "Vous avez viré %s de votre faction.", giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
				    }
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas le Maire! ");
			    return 1;
			}
		}
		return 1;
    }
    if(strcmp(cmd, "/rolegov", true) == 0 || strcmp(cmd, "/donnerjobgouv", true) == 0 || strcmp(cmd, "/setrole", true) == 0)
    //if(strcmp(cmd,"/rolegov",true)==0) // By LordMan
    {
        if(IsPlayerConnected(playerid))
        {
            if(gPlayerLogged[playerid] == 0)
            {
                SendClientMessage(playerid, COLOR_GREY, "Vous devez être connecté! ");
                return 1;
            }
            if(PlayerInfo[playerid][pLeader] != 7)
            {
                SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas le Maire! ");
                return 1;
            }
            tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /rolegov [playerid/PartOfName] [role]");
				SendClientMessage(playerid, COLOR_WHITE, "Noms Disponibles: chauffeur, gardeducorp");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(PlayerInfo[giveplayerid][pMember] != 7)
			        {
			            SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas dans le gouvernement! ");
			            return 1;
			        }
			        new x_nr[64];
			        x_nr = strtok(cmdtext, idx);
			        if(!strlen(x_nr))
			        {
			            SendClientMessage(playerid, COLOR_WHITE, "USAGE: /rolegov [playerid/PartOfName] [role]");
			            SendClientMessage(playerid, COLOR_WHITE, "Noms Disponibles: chauffeur, gardeducorp");
						return 1;
			        }
			        if(strcmp(x_nr,"chauffeur",true) == 0)
			        {
			            PlayerInfo[giveplayerid][pRank] = 1;
						SendClientMessage(giveplayerid, COLOR_WHITE, "Le Maire viens de vous désigné comme son chauffeur");
						SendClientMessage(playerid, COLOR_WHITE, "Role has been set successfuly");
						return 1;
			        }
			        else if(strcmp(x_nr,"gardeducorp",true) == 0)
			        {
			            PlayerInfo[giveplayerid][pJob] = 8;
			            PlayerInfo[giveplayerid][pRank] = 2;
			            SendClientMessage(giveplayerid, COLOR_WHITE, "Le Maire viens de vous désigné comme son garde du corp");
						SendClientMessage(playerid, COLOR_WHITE, "Role has been set successfuly");
						return 1;
			        }
			        else
			        {
			            SendClientMessage(playerid, COLOR_WHITE, "USAGE: /rolegov [playerid/PartOfName] [role]");
			            SendClientMessage(playerid, COLOR_WHITE, "Noms Disponibles: chauffeur, gardeducorp");
						return 1;
			        }
			    }
			}
        }
        return 1;
    }
    if(!strcmp(cmdtext, "/visiter", true)) // By Maxence
    {
        if(IsPlayerConnected(playerid))
        {
            GetPlayerName(playerid, sendername, sizeof(sendername));
            for(new i = 0; i < sizeof(HouseInfo); i++)
			{
				if (PlayerToPoint(3, playerid,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]) && HouseInfo[i][hOwned] == 0)
				{
					SendClientMessage(playerid, COLOR_WHITE, "Agence Immobiliere: Bienvenue et Bonne visite. (Pour sortir tapper /finvisite)");
					SetPlayerPos(playerid, HouseInfo[i][hExitx], HouseInfo[i][hExity], HouseInfo[i][hExitz]);
					SetPlayerInterior(playerid,HouseInfo[i][hInt]);
					SetPlayerVirtualWorld(playerid,HouseInfo[i][hWorld]);
				}
				if (PlayerToPoint(3, playerid,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]) && HouseInfo[i][hOwned] == 1)
				{
			    	SendClientMessage(playerid, COLOR_WHITE, "Cette maison n'est pas en vente!");

				}
			}
        }
        return 1;
    }
	if(!strcmp(cmdtext, "/finvisite", true)) // By Maxence
    {
        if(IsPlayerConnected(playerid))
        {
            GetPlayerName(playerid, sendername, sizeof(sendername));
            for(new i = 0; i < sizeof(HouseInfo); i++)
			{
				if (PlayerToPoint(3, playerid,HouseInfo[i][hExitx], HouseInfo[i][hExity], HouseInfo[i][hExitz]) && HouseInfo[i][hOwned] == 0)
				{
					SendClientMessage(playerid, COLOR_WHITE, "Agence Immobiliere: Nous espèrons que la visite vous a plu. Aurevoir !");
			    	SetPlayerPos(playerid,HouseInfo[i][hEntrancex],HouseInfo[i][hEntrancey],HouseInfo[i][hEntrancez]);
			    	SetPlayerInterior(playerid,0);
			    	PlayerInfo[playerid][pInt] = 0;
					PlayerInfo[playerid][pLocal] = 255;
					SetCameraBehindPlayer(playerid);
					SetPlayerVirtualWorld(playerid,0);
					HouseEntered[playerid] = 255;
					return 1;
				}
				else
				{
					return SendClientMessage(playerid, COLOR_RED, "Tu n'es pas au bon endroit pour sortir (/exit en cas de probleme)");
				}
			}
        }
        return 1;
    }
    if(!strcmp(cmdtext, "/defoncer", true)) // By Maxence
    {
        if(IsPlayerConnected(playerid))
        {
            if (PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
			{
            	GetPlayerName(playerid, sendername, sizeof(sendername));
            	for(new i = 0; i < sizeof(HouseInfo); i++)
				{
					if (PlayerToPoint(3, playerid,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]) && HouseInfo[i][hOwned] == 1)
					{
						format(string, sizeof(string), " %s à défoncé la porte.", sendername);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						SetPlayerPos(playerid, HouseInfo[i][hExitx], HouseInfo[i][hExity], HouseInfo[i][hExitz]);
						SetPlayerInterior(playerid,HouseInfo[i][hInt]);
						SetPlayerVirtualWorld(playerid,HouseInfo[i][hWorld]);
						for(new p = 0; p < MAX_PLAYERS; p++)
						{
					    	if(PlayerToPoint(60, p, HouseInfo[i][hExitx], HouseInfo[i][hExity], HouseInfo[i][hExitz]))
					    	{
					        	SendClientMessage(p, COLOR_PURPLE, "Quelqu'un vient de defoncer la porte d'entrée !");
					    	}
						}
					}
					if (PlayerToPoint(3, playerid,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]) && HouseInfo[i][hOwned] == 0)
					{
			    		SendClientMessage(playerid, COLOR_WHITE, "Cette maison n'appartient à personne!");

					}
				}
			}
			else
		    {
   				SendClientMessage(playerid, COLOR_WHITE, "Vous n'êtes pas Policier!");
		    }
        }
        return 1;
    }

    if(!strcmp(cmdtext, "/commencersweep", true)) // By LordMan
    {
		if(IsPlayerConnected(playerid))
		{
		    if(PlayerInfo[playerid][pJob] != 21)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas balayeur de rue! ");
		        return 1;
		    }
		    if(PlayerIsSweeping[playerid] == 1)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "Vous êtes déjà en train de balayer les rues! ");
		        return 1;
		    }
		    if(IsASweeper(idcar))
		    {
		        PlayerIsSweeping[playerid] = 1;
		        TogglePlayerControllable(playerid, 1);
		        new engine,lights,alarm,doors,bonnet,boot,objective;
		   		GetVehicleParamsEx(idcar,engine, lights, alarm, doors, bonnet, boot, objective);
              	SetVehicleParamsEx(idcar, VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, boot, objective);
              	gEngine[playerid] = 1;
		        new randomize;
		        randomize = random(sizeof(gSweeperPoints));
		        SetPlayerCheckpoint(playerid, gSweeperPoints[randomize][0], gSweeperPoints[randomize][1], gSweeperPoints[randomize][2], 5.0);
		        SendClientMessage(playerid, COLOR_WHITE, "Vos heures de travail sont en places, allez au marqueur rouge.");
		        ilsweep[playerid] = 1;
		    }
		}
		return 1;
    }

    if(!strcmp(cmdtext, "/arretersweep", true)) // By LordMan
    {
        if(IsPlayerConnected(playerid))
        {
            if(PlayerIsSweeping[playerid] == 1)
            {
                DisablePlayerCheckpoint(playerid);
                PlayerIsSweeping[playerid] = 0;
                SendClientMessage(playerid, COLOR_WHITE, "Vous avez arreté de balayer les rues.");
                ilsweep[playerid] = 0;
                if(IsASweeper(idcar))
                {
                    RemovePlayerFromVehicle(playerid);
                }
            }
            else
            {
				SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas en train de balayer les rues! ");
				return 1;
            }
        }
        return 1;
    }
    if(!strcmp(cmdtext, "/commencerpoubelle", true))
    {
		if(IsPlayerConnected(playerid))
		{
		    if(PlayerInfo[playerid][pJob] != 25)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas un éboueur ! ");
		        return 1;
		    }
		    if(PlayerOnGarbage[playerid] == 1)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   Vous êtes déja en train de collecter les ordures ! ");
		        return 1;
		    }
		    if(IsAGarbageTruck(idcar))
		    {
		        PlayerOnGarbage[playerid] = 1;
		        TogglePlayerControllable(playerid, 1);
		        new engine,lights,alarm,doors,bonnet,boot,objective;
		       	GetVehicleParamsEx(idcar,engine, lights, alarm, doors, bonnet, boot, objective);
              	SetVehicleParamsEx(idcar, VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, boot, objective);
              	gEngine[playerid] = 1;
		        new randomize;
		        randomize = random(sizeof(gGarbagePoints));
		        SetPlayerCheckpoint(playerid, gGarbagePoints[randomize][0], gGarbagePoints[randomize][1], gGarbagePoints[randomize][2], 5.0);
		        SendClientMessage(playerid, COLOR_WHITE, "Vos heures de travail sont en places, allez au marqueur rouge.");
		    }
		}
		return 1;
    }

    if(!strcmp(cmdtext, "/arreterpoubelle", true))
    {
        if(IsPlayerConnected(playerid))
        {
            if(PlayerOnGarbage[playerid] == 1)
            {
                DisablePlayerCheckpoint(playerid);
                PlayerOnGarbage[playerid] = 0;
                SendClientMessage(playerid, COLOR_WHITE, "Vous avez arreté de collecter les ordures.");
                if(IsAGarbageTruck(idcar))
                {
                    RemovePlayerFromVehicle(playerid);
                }
            }
            else
            {
				SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas en train de collecter les ordures ! ");
				return 1;
            }
        }
        return 1;
    }
    //---------Dozer thing-------------------------
   	if(!strcmp(cmdtext, "/commencerdozer", true)) // By tona
    {
		if(IsPlayerConnected(playerid))
		{
		    if(PlayerInfo[playerid][pJob] != 26)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas Ouvrier ! ");
		        return 1;
		    }
		    if(PlayerIsDozering[playerid] == 1)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   Vous êtes déja en train de travailler ! ");
		        return 1;
		    }
		    if(IsADozer(idcar))
		    {
		        PlayerIsDozering[playerid] = 1;
		        TogglePlayerControllable(playerid, 1);
		        new engine,lights,alarm,doors,bonnet,boot,objective;
		       	GetVehicleParamsEx(idcar,engine, lights, alarm, doors, bonnet, boot, objective);
              	SetVehicleParamsEx(idcar, VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, boot, objective);
              	gEngine[playerid] = 1;
		        new randomize;
		        randomize = random(sizeof(gDozerPoints));
		        SetPlayerCheckpoint(playerid, gDozerPoints[randomize][0], gDozerPoints[randomize][1], gDozerPoints[randomize][2], 5.0);
		        SendClientMessage(playerid, COLOR_WHITE, "Vos heures de travail sont en places, allez au marqueur rouge.");
		    }
		}
		return 1;
    }
	if(!strcmp(cmdtext, "/arreterdozer", true)) // By tona
    {
        if(IsPlayerConnected(playerid))
        {
            if(PlayerIsDozering[playerid] == 1)
            {
                DisablePlayerCheckpoint(playerid);
                PlayerIsDozering[playerid] = 0;
                SendClientMessage(playerid, COLOR_WHITE, "Vous avez arreté de travailler.");
                if(IsADozer(idcar))
                {
                    RemovePlayerFromVehicle(playerid);
	        		SetVehicleToRespawn(GetPlayerVehicleID(playerid));
                }
            }
            else
            {
				SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas en train de travailler ! ");
				return 1;
            }
        }
        return 1;
    }
    // ---------------------------- RUTA AVION --------------------------- //
	if(!strcmp(cmdtext, "/commenceravion", true)) // by CodeMan
	{
		if(IsPlayerConnected(playerid))
		{
			if(!IsAJobPlane(idcar))
			{
			    SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas dans un avion !");
			    return 1;
			}
			if(PlayerInfo[playerid][pWork] >= 4)
			{
			    SendClientMessage(playerid, COLOR_GREY, "Vous avez trop travaillé cette heure ci.");
			    SendClientMessage(playerid, COLOR_GREY, "Revenez au prochain PayDay !");
			    return 1;
			}
			if(AirRoute[playerid] >= 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "Vous avez déja commencé votre trajet !");
			    return 1;
			}
			if(PlayerInfo[playerid][pJob] == 28)
			{
			    AirRoute[playerid] = 1;
			    new playerveh = GetPlayerVehicleID(playerid);
                new engine,lights,alarm,doors,bonnet,boot,objective;
         	    GetVehicleParamsEx(playerveh,engine,lights,alarm,doors,bonnet,boot,objective);
                SetVehicleParamsEx(playerveh,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
			    TogglePlayerControllable(playerid, 1);
			    gEngine[playerid] = 1;
			    gEngine[GetPlayerVehicleID(playerid)] = 1;
			    engineOn[GetPlayerVehicleID(playerid)] = true;
			    OnPlayerEnterCheckpoint(playerid);
			    SendClientMessage(playerid, COLOR_YELLOW, "*** *** LOS SANTOS AIRLINES *** ***");
			    SendClientMessage(playerid, COLOR_WHITE, "Votre trajet :");
			    SendClientMessage(playerid, COLOR_GREEN, "Los Santos 	=> 	Las Venturas");
			    SendClientMessage(playerid, COLOR_GREEN, "Las Venturas 	=> 	San Fierro");
			    SendClientMessage(playerid, COLOR_GREEN, "San Fierro 	=> 	Los Santos");
			    SendClientMessage(playerid, COLOR_YELLOW, "*** *** LOS SANTOS AIRLINES *** ***");
			    SendClientMessage(playerid, COLOR_WHITE, "Dirigez vous sur les CheckPoints ! (Indiqué en rouge sur votre map)");
			}
		}
		return 1;
	}
// ----------------------------- RUTA TREN ----------------------------------- //
if(!strcmp(cmdtext, "/commencertrain", true)) // by CodeMan
	{
		if(IsPlayerConnected(playerid))
		{
			if(!IsATrain(idcar))
			{
			    SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas dans un train !");
			    return 1;
			}
			if(PlayerInfo[playerid][pWork] > 4)
			{
			    SendClientMessage(playerid, COLOR_GREY, "Vous avez trop travaillé cette heure ci.");
			    SendClientMessage(playerid, COLOR_GREY, "Revenez au prochain PayDay !");
			    return 1;
			}
			if(TrainRoute[playerid] >= 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "Vous avez déja commencé votre trajet !");
			    return 1;
			}
			if(PlayerInfo[playerid][pJob] == 27)
			{
			    TrainRoute[playerid] = 1;
			    new playerveh = GetPlayerVehicleID(playerid);
                new engine,lights,alarm,doors,bonnet,boot,objective;
         	    GetVehicleParamsEx(playerveh,engine,lights,alarm,doors,bonnet,boot,objective);
                SetVehicleParamsEx(playerveh,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
			    TogglePlayerControllable(playerid, 1);
			    gEngine[playerid] = 1;
			    gEngine[GetPlayerVehicleID(playerid)] = 1;
			    engineOn[GetPlayerVehicleID(playerid)] = true;
			    OnPlayerEnterCheckpoint(playerid);
			    SendClientMessage(playerid, COLOR_YELLOW, "*** *** Voix Ferrées De Los Santos *** ***");
			    SendClientMessage(playerid, COLOR_WHITE, "Votre trajet :");
			    SendClientMessage(playerid, COLOR_GREEN, "LS > SF > LV > LS");
			    SendClientMessage(playerid, COLOR_YELLOW, "*** *** Voix Ferrées De Los Santos *** ***");
			    SendClientMessage(playerid, COLOR_WHITE, "Dirigez vous sur les CheckPoints ! (Indiqué en rouge sur votre map)");
		     	//GameTextForAll("~r~Ferrocarriles de los santos ~n~~b~Estado: ~g~Saliendo", 5000, 6 );
			}
		}
		return 1;
	}
    if(!strcmp(cmdtext, "/inv", true) || !strcmp(cmd, "/inventaire", true) || !strcmp(cmd, "/inventory", true))
    //if(!strcmp(cmdtext, "/inv", true) || !strcmp(cmdtext, "/inventaire", true)) // By LordMan
    {
        if(IsPlayerConnected(playerid))
        {
            if(gPlayerLogged[playerid] == 0)
            {
                SendClientMessage(playerid, COLOR_GREY, "Vous devez être connecté! ");
                return 1;
            }
            new gunname[100];
            GetWeaponName(PlayerInfo[playerid][pInvWeapon], gunname, sizeof(gunname));
            SendClientMessage(playerid, COLOR_LIGHT_BLUE, "__________ Inventaire __________");
            if(PlayerInfo[playerid][pInvWeapon] != 0 && PlayerInfo[playerid][pInvAmmo] != 0)
            {
            	format(string, sizeof(string), "Arme: %s, Munition: %d", gunname, PlayerInfo[playerid][pInvAmmo]);
            	SendClientMessage(playerid, COLOR_WHITE, string);
			}
			else
			{
			    SendClientMessage(playerid, COLOR_WHITE, "Votre Inventaire est vide.");
			}
            SendClientMessage(playerid, COLOR_LIGHT_BLUE, "_______________________________");
            SendClientMessage(playerid, COLOR_WHITE, "Note: /prendrearme /mettrearme");
        }
        return 1;
    }
    if(!strcmp(cmdtext, "/prendrearme", true) || !strcmp(cmd, "/takegun", true) || !strcmp(cmd, "/retirerarme", true))
    //if(!strcmp(cmdtext, "/prendrearme", true)) // By LordMan
    {
        if(IsPlayerConnected(playerid))
        {
            if(gPlayerLogged[playerid] == 0)
            {
                SendClientMessage(playerid, COLOR_GREY, "Vous devez être connecté! ");
                return 1;
            }
            if(ReduceTime[playerid] == 1)
            {
                SendClientMessage(playerid, COLOR_GREY, "Vous devez attendre 3 secondes avant d'utiliser cette commande!");
                return 1;
            }
            if(PlayerInfo[playerid][pInvWeapon] != 0 && PlayerInfo[playerid][pInvAmmo] != 0)
            {
                ReduceTime[playerid] = 1;
                SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
                new gunname[100];
                GetWeaponName(PlayerInfo[playerid][pInvWeapon], gunname, sizeof(gunname));
                SafeGivePlayerWeapon(playerid, PlayerInfo[playerid][pInvWeapon], PlayerInfo[playerid][pInvAmmo]);
                GetPlayerName(playerid, sendername, sizeof(sendername));
      			format(string, sizeof(string), "Vous avez pris %s de votre inventaire.", gunname);
      			SendClientMessage(playerid, COLOR_GREY, string);
      			PlayerInfo[playerid][pInvWeapon] = 0;
                PlayerInfo[playerid][pInvAmmo] = 0;
            }
            else
            {
                SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas d'arme dans votre inventaire!");
                return 1;
            }
        }
        return 1;
    }
    if(!strcmp(cmdtext, "/mettrearme", true) || !strcmp(cmd, "/deposerarme", true) || !strcmp(cmd, "/poserarme", true))
    //if(!strcmp(cmdtext, "/mettrearme", true)) // By LordMan
    {
        if(IsPlayerConnected(playerid))
        {
            if(gPlayerLogged[playerid] == 0)
            {
                SendClientMessage(playerid, COLOR_GREY, "Vous devez être connecté!");
                return 1;
            }
            if(ReduceTime[playerid] == 1)
            {
                SendClientMessage(playerid, COLOR_GREY, "Vous devez attendre 3 secondes avant d'utiliser cette cpommande!");
                return 1;
            }
            if(PlayerInfo[playerid][pInvWeapon] != 0 || PlayerInfo[playerid][pInvAmmo] != 0)
            {
                SendClientMessage(playerid, COLOR_GREY, "Votre inventaire est plein!");
                return 1;
            }

            new gunID = GetPlayerWeapon(playerid);
            new gunAmmo = GetPlayerAmmo(playerid);

            if(gunID != 0 && gunAmmo != 0)
            {
                ReduceTime[playerid] = 1;
                SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
                PlayerInfo[playerid][pInvWeapon] = gunID;
                PlayerInfo[playerid][pInvAmmo] = gunAmmo;
				RemovePlayerWeapon(playerid, gunID);
                GetPlayerName(playerid, sendername, sizeof(sendername));
				new gunname[100];
				GetWeaponName(gunID, gunname, sizeof(gunname));
                format(string, sizeof(string), "Vous avez mis un %s dans votre inventaire.", gunname);
				SendClientMessage(playerid, COLOR_GREY, string);
                return 1;
            }
            else
            {
                SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas d'arme a mettre dans votre inventaire! ");
                return 1;
            }
        }
        return 1;
    }
    if(strcmp(cmd, "/checkweapons", true) == 0 || strcmp(cmd, "/regarderarmes", true) == 0 || strcmp(cmd, "/verifierarme", true) == 0)
   	//if(strcmp(cmd, "/verifierarme", true) == 0) // Edited by LordMan, orginally from CW-RP
	{
		if (PlayerInfo[playerid][pAdmin] < 1)
	    {
		    SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas autorisé a utiliser cette commande");
		    return 1;
	    }
		tmp = strtok(cmdtext,idx);
		if (!strlen(tmp))
	    {
		    SendClientMessage(playerid, COLOR_GREY, "USAGE: /verifierarme [playerid/partOfName]");
		    return 1;
	    }
		giveplayerid = ReturnUser(tmp);
		if (giveplayerid == INVALID_PLAYER_ID)
	    {
		    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté");
		    return 1;
	    }
		new sweapon, sammo;
	    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
	    format(string, sizeof(string), "Vois les armes de %s:", giveplayer);
	    SendClientMessage(playerid, COLOR_GRAD1, string);
		for (new i=0; i<9; i++)
	    {
		    GetPlayerWeaponData(giveplayerid, i, sweapon, sammo);
		    if(sweapon != 0)
		    {
		        format(string, sizeof(string), "%d: %d (%d)", i, sweapon, sammo);
		    	SendClientMessage(playerid, COLOR_GRAD1, string);
			}
	    }
		return 1;
	}
    if(strcmp(cmd, "/coffre", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new x_nr[64];
			x_nr = strtok(cmdtext, idx);
			if(!strlen(x_nr))
			{
			    SendClientMessage(playerid, COLOR_WHITE, "COMMANDE: /coffre <nom>");
			    SendClientMessage(playerid, COLOR_WHITE, "Noms disponibles: info, deposerarme, retirerarme, deposergilet, retirergilet, entrer, sortir");
			    if(PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pMember] == 2)
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "Vous pouvez ausssi faire /coffre fouiller pour fouiller un coffre.");
			    }
			    return 1;
			}
			if(strcmp(x_nr,"info",true) == 0)
			{
			    new counter = 0;
			    new result;
			    new plyName[MAX_PLAYER_NAME];

			    GetPlayerName(playerid, plyName, MAX_PLAYER_NAME);
			    for(new i; i != MAX_VEHICLES; i++)
			    {
			        new dist = CheckPlayerDistanceToVehicle(3.5, playerid, i);
			        if(dist)
			        {
			            result = i;
			            counter++;
			        }
			    }
			    switch(counter)
			    {
			        case 0:
			        {
			            SendClientMessage(playerid, COLOR_GREY, "Aucune voiture avec un coffre près de vous");
			        }

			        case 1:
			        {
			            if(IsAnOwnableCar(result))
               			{
               			    if(PlayerInfo[playerid][pPcarkey] == result) { }
               			    else if(PlayerInfo[playerid][pPcarkey2] == result) { }
               			    else if(PlayerInfo[playerid][pPcarkey3] == result) { }
               			    else
               			    {
			                	SendClientMessage(playerid, COLOR_GREY, "Coffre vérouillé !");
			            		return 1;
							}
			            }
			            if(IsPlayerInAnyVehicle(playerid))
      					{
			                SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez pas ouvrir le coffre depuis votre voiture");
			            	return 1;
               			}
               			if(IsAPlane(result) || IsABike(result) || IsABoat(result) || IsAPizzabike(result) || IsABus(result) || IsATowcar(result) || IsAHspdCar(result) || IsAHarvest(result) || IsADrugHarvest(result) || IsASweeper(result) || result >=78 && result <= 83 || GetVehicleModel(GetPlayerVehicleID(result)) == 523)
               			{//|| IsAOBike(result)
               			    SendClientMessage(playerid, COLOR_GREY, "Ce vehicule n'a pas de coffre");
               			    return 1;
               			}

						SendClientMessage(playerid, COLOR_LIGHT_BLUE, "|_______ Coffre du Vehicule _______|");
						for(new slot = 1; slot != MAX_TRUNK_SLOTS; slot++)
						{
						    new gunname[100];
						    if(vehTrunk[result][slot] != 0)
						    {
						        GetWeaponName(vehTrunk[result][slot], gunname, sizeof(gunname));
						        format(string, sizeof(string), "| Place %i: %s (Munitions: %i)", slot, gunname, vehTrunkAmmo[result][slot]);
						        SendClientMessage(playerid, COLOR_WHITE, string);
						    }
						    else
						    {
						        format(string, sizeof(string), "| Place %i: Vide", slot);
						        SendClientMessage(playerid, COLOR_WHITE, string);
						    }
						}
						format(string, sizeof(string), "| Armure: %f%", vehTrunkArmour[result]);
						SendClientMessage(playerid, COLOR_WHITE, string);

               			GetPlayerName(playerid, sendername, sizeof(sendername));
                        format(string, sizeof(string), "* %s Ouvre le coffre et regarde ce qu'il y a dedans.", sendername);
                  		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						return 1;
			        }

			        default:
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   Ce véhicule n'a pas de coffre");
			            return 1;
			        }
			    }
			    return 1;
			}
			else if(strcmp(x_nr,"deposerarme",true) == 0)
			{
			    new counter = 0;
			    new result;
			    new plyName[MAX_PLAYER_NAME];

			    GetPlayerName(playerid, plyName, MAX_PLAYER_NAME);
			    for(new i; i != MAX_VEHICLES; i++)
			    {
			        new dist = CheckPlayerDistanceToVehicle(3.5, playerid, i);
			        if(dist)
			        {
			            result = i;
			            counter++;
			        }
			    }
			    switch(counter)
			    {
			        case 0:
			        {
			            SendClientMessage(playerid, COLOR_GREY, "Aucune voiture avec un coffre près de vous");
			        }

			        case 1:
			        {
			            if(vehTrunkCounter[result] != (MAX_TRUNK_SLOTS-1))
			            {
			                if(IsAnOwnableCar(result))
               				{
               			    	if(PlayerInfo[playerid][pPcarkey] == result) { }
               			    	else if(PlayerInfo[playerid][pPcarkey2] == result) { }
               			   		else if(PlayerInfo[playerid][pPcarkey3] == result) { }
               			    	else
               			    	{
			                		SendClientMessage(playerid, COLOR_GREY, "Coffre vérouillé !");
			            			return 1;
								}
			            	}
			            	if(ReduceTime[playerid] == 1)
			            	{
			            	    SendClientMessage(playerid, COLOR_GREY, "Vous devez attendre 3 secondes avant de réutiliser cette commande");
			            	    return 1;
			            	}
			                if(IsPlayerInAnyVehicle(playerid))
			                {
			                    SendClientMessage(playerid, COLOR_GREY, "  Vous ne pouvez pas ouvrir le coffre depuis votre voiture");
			                    return 1;
			                }
			                if(IsAPlane(result) || IsABike(result) || IsABoat(result) || IsAPizzabike(result) || IsABus(result) || IsATowcar(result) || IsAHspdCar(result) || IsAHarvest(result) || IsADrugHarvest(result) || IsASweeper(result) || result >=78 && result <= 83|| GetVehicleModel(GetPlayerVehicleID(result)) == 523)
               				{//IsAOBike(result) ||
               			    	SendClientMessage(playerid, COLOR_GREY, "  Ce vehicule n'a pas de coffre !");
               			    	return 1;
               				}
                            new buffer[512];
                            new gunname[100];
                            new gunID = GetPlayerWeapon(playerid);
                            new gunAmmo = GetPlayerAmmo(playerid);

                            if(gunID != 0 && gunAmmo != 0)
                            {
                                ReduceTime[playerid] = 1;
                				SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
                                GetWeaponName(gunID, gunname, sizeof(gunname));
                                vehTrunkCounter[result]++;
                                vehTrunk[result][vehTrunkCounter[result]] = gunID;
                                vehTrunkAmmo[result][vehTrunkCounter[result]] = gunAmmo;
                                format(buffer, sizeof(buffer), "Vous avez déposé vôtre %s (Munition: %i) dans le coffre de la voiture.", gunname, gunAmmo);
                                SendClientMessage(playerid, COLOR_WHITE, buffer);
                                RemovePlayerWeapon(playerid, gunID);
                                GetPlayerName(playerid, sendername, sizeof(sendername));
                                format(string, sizeof(string), "* %s Ouvre le coffre de sa voiture et dépose une arme.", sendername);
                                ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                                SaveTrunk();
                                return 1;
                            }
			            }
			            else
			            {
			                SendClientMessage(playerid, COLOR_GREY, " Le Coffre de la voiture est plein.");
			                return 1;
			            }
			        }

			        default:
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   Ce véhicule n'a pas de coffre.");
			            return 1;
			        }
			    }
			    return 1;
			}
			else if(strcmp(x_nr,"retirerarme",true) == 0)
			{
			    new counter = 0;
			    new result;
			    new plyName[MAX_PLAYER_NAME];

			    GetPlayerName(playerid, plyName, MAX_PLAYER_NAME);
			    for(new i; i != MAX_VEHICLES; i++)
			    {
			        new dist = CheckPlayerDistanceToVehicle(3.5, playerid, i);
			        if(dist)
			        {
			            result = i;
			            counter++;
			        }
			    }

			    switch(counter)
			    {
			        case 0:
			        {
			            SendClientMessage(playerid, COLOR_GREY, "Aucune voiture avec un coffre près de vous");
			            return 1;
			        }

			        case 1:
			        {
			            if(IsPlayerInAnyVehicle(playerid))
			            {
			                SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez pas ouvrir le coffre depuis votre voiture");
			                return 1;
			            }
			            if(ReduceTime[playerid] == 1)
			            {
			                SendClientMessage(playerid, COLOR_GREY, "Vous devez attendre 3 secondes avant de réutilisé cette commande");
			                return 1;
		            	}
			            if(IsAnOwnableCar(result))
               			{
               			   	if(PlayerInfo[playerid][pPcarkey] == result) { }
               			  	else if(PlayerInfo[playerid][pPcarkey2] == result) { }
               				else if(PlayerInfo[playerid][pPcarkey3] == result) { }
               			   	else
               			   	{
			               		SendClientMessage(playerid, COLOR_GREY, "  Coffre vérouillé !");
			            		return 1;
							}
       					}
			            if(IsAPlane(result) || IsABike(result) || IsABoat(result) || IsAPizzabike(result) || IsABus(result) || IsATowcar(result) || IsAHspdCar(result) || IsAHarvest(result) || IsADrugHarvest(result) || IsASweeper(result) || result >=78 && result <= 83 || GetVehicleModel(GetPlayerVehicleID(result)) == 523)
               			{//IsAOBike(result) ||
               			    SendClientMessage(playerid, COLOR_GREY, "  Ce véhicule n'a pas de coffre!");
               			    return 1;
               			}
			            if(vehTrunkCounter[result] != 0)
			            {
			                ReduceTime[playerid] = 1;
               				SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
			                new buffer[512];
			                new gunName[100];

			                SafeGivePlayerWeapon(playerid, vehTrunk[result][vehTrunkCounter[result]], vehTrunkAmmo[result][vehTrunkCounter[result]]);
			                GetWeaponName(vehTrunk[result][vehTrunkCounter[result]], gunName, sizeof(gunName));
			                format(buffer, sizeof(buffer), "Vous avez pris votre %s (Munitions: %i) dans le coffre de la voiture.", gunName, vehTrunkAmmo[result][vehTrunkCounter[result]]);
			                SendClientMessage(playerid, COLOR_WHITE, buffer);
			                vehTrunk[result][vehTrunkCounter[result]] = '\0';
			                vehTrunkAmmo[result][vehTrunkCounter[result]] = '\0';
			                vehTrunkCounter[result]--;
			                GetPlayerName(playerid, sendername, sizeof(sendername));
			                format(string, sizeof(string), "* %s ouvre le coffre de sa voiture et prend une arme.", sendername);
			                ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			                SaveTrunk();
			                return 1;
			            }
			            else
			            {
			                SendClientMessage(playerid, COLOR_GREY, " Le Coffre de la voiture est vide.");
			                return 1;
			            }
			        }

			        default:
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   Ce véhicule n'a pas de coffre.");
			            return 1;
			        }
			    }
			    return 1;
			}
			else if(strcmp(x_nr,"entrer",true) == 0)
			{
			    new counter = 0;
			    new result;
			    for(new i; i != MAX_VEHICLES; i++)
			    {
			        new dist = CheckPlayerDistanceToVehicle(3.5, playerid, i);
			        if(dist)
			        {
			            result = i;
			            counter++;
			        }
			    }
			    switch(counter)
			    {
			        case 0:
			        {
			            SendClientMessage(playerid, COLOR_GREY, "Pas de voitures avec un coffre près de vous !");
			        }

			        case 1:
			        {
			            if(IsPlayerInAnyVehicle(playerid))
      					{
			                SendClientMessage(playerid, COLOR_GREY, "Tu peut pas entrer dans le coffre si tu es dans le véhicule!");
			            	return 1;
               			}
               			if(IsAPlane(result) || IsABike(result) || IsABoat(result) || IsAHarvest(result) || IsADrugHarvest(result) || IsASweeper(result) || result >=78 && result <= 83 || GetVehicleModel(GetPlayerVehicleID(result)) == 523)
               			{
               			    SendClientMessage(playerid, COLOR_GREY, "Ce véhicule n'a pas de coffre.");
               			    return 1;
               			}
               			if(quelquncoffre[result] == 1)
               			{
               			    SendClientMessage(playerid, COLOR_GREY, "Quelqun est déjà caché dans le coffre.");
               			    return 1;
               			}
						quelquncoffre[result] = 1;
						lemeccoffre[playerid] = 1;
                        PutPlayerInVehicle(playerid,result,6);
                        TogglePlayerControllable(playerid, 0);
               			GetPlayerName(playerid, sendername, sizeof(sendername));
                        format(string, sizeof(string), "* %s ouvre le coffre et s'y cache.", sendername);
                  		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						return 1;
			        }

			        default:
			        {
			            SendClientMessage(playerid, COLOR_GREY, "Il y a plusieurs coffres près de vous !");
			            return 1;
			        }
			    }
			    return 1;
			}
			else if(strcmp(x_nr,"sortir",true) == 0)
			{
                if(IsPlayerInAnyVehicle(playerid))
			    {
			        if(lemeccoffre[playerid] == 1)
			        {
			            new tmpcar = GetPlayerVehicleID(playerid);
						quelquncoffre[tmpcar] = 0;
						lemeccoffre[playerid] = 0;
						new Float:cwx2,Float:cwy2,Float:cwz2;
						GetVehiclePos(tmpcar, cwx2, cwy2, cwz2);
						SetPlayerPos(playerid, cwx2, cwy2, cwz2);
		                TogglePlayerControllable(playerid, 1);
		           		GetPlayerName(playerid, sendername, sizeof(sendername));
		                format(string, sizeof(string), "* %s ouvre le coffre et sort.", sendername);
		           		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		           		return 1;
	           		}
	           		else
	           		{
	           		    SendClientMessage(playerid,COLOR_RED,"Tu n'es pas dans le coffre");
	           		    return 1;
	           		}
           		}
			    return 1;
			}
			else if(strcmp(x_nr,"deposergilet",true) == 0)
			{
			    new counter = 0;
			    new result;
			    new plyName[MAX_PLAYER_NAME];

			    GetPlayerName(playerid, plyName, MAX_PLAYER_NAME);
			    for(new i; i != MAX_VEHICLES; i++)
			    {
			        new dist = CheckPlayerDistanceToVehicle(3.5, playerid, i);
			        if(dist)
			        {
			            result = i;
			            counter++;
			        }
			    }
			    switch(counter)
			    {
			        case 0:
			        {
			            SendClientMessage(playerid, COLOR_GREY, "Aucune voiture avec un coffre près de vous");
			            return 1;
			        }

			        case 1:
			        {
			            if(IsPlayerInAnyVehicle(playerid))
			            {
			                SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez pas ouvrir le coffre depuis votre voiture");
			                return 1;
			            }
			            if(IsAnOwnableCar(result))
               			{
               			   	if(PlayerInfo[playerid][pPcarkey] == result) { }
               			   	else if(PlayerInfo[playerid][pPcarkey2] == result) { }
               				else if(PlayerInfo[playerid][pPcarkey3] == result) { }
               			   	else
               			   	{
			               		SendClientMessage(playerid, COLOR_GREY, "  Coffre vérouillé !");
			            		return 1;
							}
       					}
			            if(IsAPlane(result) || IsABike(result) || IsABoat(result) || IsAPizzabike(result) || IsABus(result) || IsATowcar(result) || IsAHspdCar(result) || IsAHarvest(result) || IsADrugHarvest(result) || IsASweeper(result) || result >=78 && result <= 83 || GetVehicleModel(GetPlayerVehicleID(result)) == 523)
               			{//IsAOBike(result) ||
               			    SendClientMessage(playerid, COLOR_GREY, "  Ce véhicule n'a pas de coffre !");
               			    return 1;
               			}

			            new Float:plyArmour;
			            GetPlayerArmour(playerid, plyArmour);

                        if(plyArmour != 0)
			            {
			                SetPlayerArmour(playerid, 0);
			                vehTrunkArmour[result] = plyArmour;

			                GetPlayerName(playerid, sendername, sizeof(sendername));
			                format(string, sizeof(string), "* %s ouvre le coffre de sa voiture et prend un gillet parballe.", sendername);
			                ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			                SaveTrunk();
			                return 1;
			            }
			            else
			            {
			                SendClientMessage(playerid, COLOR_GREY, "   Vous n'avez pas de gillet.");
			                return 1;
			            }
			        }

			        default:
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   Ce véhicule n'a pas de coffre.");
			            return 1;
			        }
				}
			    return 1;
			}
			else if(strcmp(x_nr,"retirergilet",true) == 0)
			{
			    new counter = 0;
			    new result;
			    new plyName[MAX_PLAYER_NAME];

			    GetPlayerName(playerid, plyName, MAX_PLAYER_NAME);
			    for(new i; i != MAX_VEHICLES; i++)
			    {
			        new dist = CheckPlayerDistanceToVehicle(3.5, playerid, i);
			        if(dist)
			        {
			            result = i;
			            counter++;
			        }
			    }
			    switch(counter)
			    {
			        case 0:
			        {
			            SendClientMessage(playerid, COLOR_GREY, "Aucune voiture avec un coffre près de vous");
			            return 1;
			        }

			        case 1:
			        {
			            if(IsPlayerInAnyVehicle(playerid))
			            {
			                SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez pas ouvrir le coffre depuis votre voiture");
			                return 1;
			            }
			            if(IsAnOwnableCar(result))
               			{
               			   	if(PlayerInfo[playerid][pPcarkey] == result) { }
               			   	else if(PlayerInfo[playerid][pPcarkey2] == result) { }
               				else if(PlayerInfo[playerid][pPcarkey3] == result) { }
               			   	else
               			   	{
			               		SendClientMessage(playerid, COLOR_GREY, "  Coffre vérouillé !");
			            		return 1;
							}
       					}
			            if(IsAPlane(result) || IsABike(result) || IsABoat(result) || IsAPizzabike(result) || IsABus(result) || IsATowcar(result) || IsAHspdCar(result) || IsAHarvest(result) || IsADrugHarvest(result) || IsASweeper(result) || result >=78 && result <= 83 || GetVehicleModel(GetPlayerVehicleID(result)) == 523)
               			{//IsAOBike(result) ||
               			    SendClientMessage(playerid, COLOR_GREY, "  Ce véhicule n'a pas de coffre !");
               			    return 1;
               			}
			            if(vehTrunkArmour[result] != 0)
			            {
			                SetPlayerArmour(playerid, vehTrunkArmour[result]);
			                vehTrunkArmour[result] = 0;

			                GetPlayerName(playerid, sendername, sizeof(sendername));
			                format(string, sizeof(string), "* %s ouvre le coffre de sa voiture et prend son gillet parballe.", sendername);
			                ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			                SaveTrunk();
			                return 1;
			            }
			            else
			            {
			                SendClientMessage(playerid, COLOR_GREY, "   Vous n'avez pas de gillet dans cette voiture ! ");
			                return 1;
			            }
			        }

			        default:
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   Ce véhicule n'a pas de coffre");
			            return 1;
			        }
				}
				return 1;
			}
			else if(strcmp(x_nr,"fouiller",true) == 0)
			{
			    if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2)
			    {
			    	new counter = 0;
			    	new result;
			    	new plyName[MAX_PLAYER_NAME];

				    GetPlayerName(playerid, plyName, MAX_PLAYER_NAME);
				    for(new i; i != MAX_VEHICLES; i++)
				    {
				        new dist = CheckPlayerDistanceToVehicle(3.5, playerid, i);
			    	    if(dist)
			        	{
			           		result = i;
			            	counter++;
			        	}
			    	}
			    	switch(counter)
			    	{
			        	case 0:
			        	{
			            	SendClientMessage(playerid, COLOR_GREY, "Aucune voiture avec un coffre près de vous");
						}

			        	case 1:
			        	{
			            	if(IsPlayerInAnyVehicle(playerid))
      						{
			                	SendClientMessage(playerid, COLOR_GREY, "  Vous ne pouvez pas ouvrir le coffre depuis cette voiture");
			            		return 1;
               				}
               				if(IsAPlane(result) || IsABike(result) || IsABoat(result) || IsAPizzabike(result) || IsABus(result) || IsATowcar(result) || IsAHspdCar(result) || IsAHarvest(result) || IsADrugHarvest(result) || IsASweeper(result) || result >=78 && result <= 83 || GetVehicleModel(GetPlayerVehicleID(result)) == 523)
               				{//IsAOBike(result) ||
               			    	SendClientMessage(playerid, COLOR_GREY, "  Ce véhicule n'a pas de coffre !");
               			    	return 1;
               				}

							SendClientMessage(playerid, COLOR_LIGHT_BLUE, "|_______ Coffre du Vehicule _______|");
							for(new slot = 1; slot != MAX_TRUNK_SLOTS; slot++)
							{
							    new gunname[100];
							    if(vehTrunk[result][slot] != 0)
							    {
							        GetWeaponName(vehTrunk[result][slot], gunname, sizeof(gunname));
						    	    format(string, sizeof(string), "| Place %i: %s (Munitions: %i)", slot, gunname, vehTrunkAmmo[result][slot]);
						        	SendClientMessage(playerid, COLOR_WHITE, string);
						    	}
						    	else
						    	{
						        	format(string, sizeof(string), "|Place %i: Vide ", slot);
						        	SendClientMessage(playerid, COLOR_WHITE, string);
						    	}
							}
							format(string, sizeof(string), "| Armure: %f%", vehTrunkArmour[result]);
							SendClientMessage(playerid, COLOR_WHITE, string);

	               			GetPlayerName(playerid, sendername, sizeof(sendername));
    	                    format(string, sizeof(string), "* %s ouvre le coffre de la voiture et regarde ce qu'il y a dedans.", sendername);
        	          		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							return 1;
			        	}

				        default:
				        {
				            SendClientMessage(playerid, COLOR_GREY, "   Ce véhicule n'a pas de coffre");
				            return 1;
			    	    }
			    	}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "   Vous ne pouvez pas faire cela ! ");
					return 1;
				}
			    return 1;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_WHITE, "COMMANDE: /coffre <nom>");
			    SendClientMessage(playerid, COLOR_WHITE, "Noms disponibles: info, deposerarme, retirerarme, deposergilet, retirergilet, entrer, sortir");
			    if(PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pMember] == 2)
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "Vous pouvez ausssi faire /coffre fouiller pour fouiller un coffre.");
			    }
			    return 1;
			}
	    }
	    return 1;
	}
	if(!strcmp(cmdtext, "/fenetre", true) || !strcmp(cmdtext, "/fe", true)) // By LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous devez être connecté! ");
	            return 1;
	        }
	        if(IsPlayerInAnyVehicle(playerid))
	        {
				new carid = GetPlayerVehicleID(playerid);
				if(IsABike(carid) || IsAOBike(carid) || IsAPizzabike(carid) || IsAPlane(carid) || IsABoat(carid) || IsASweeper(carid) || IsAHarvest(carid) || IsADrugHarvest(carid) || IsATank(carid) || pveh == 523 || pveh == 480 || pveh == 567 || pveh == 533 || pveh == 555 || pveh == 539 || pveh == 572 || pveh == 571 || pveh == 530 || pveh == 457 || pveh == 575 || pveh == 536 || pveh == 424)
				{
				    SendClientMessage(playerid, COLOR_GREY, "Ce véhicule n'a pas de fenetre.");
				    return 1;
				}
	            if(VehicleWindows[GetPlayerVehicleID(playerid)] == 0)
	            {
	            	VehicleWindows[GetPlayerVehicleID(playerid)] = 1;
	            	GetPlayerName(playerid, sendername, sizeof(sendername));
      				format(string, sizeof(string), " %s ouvre la fenêtre.", sendername);
      				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      				return 1;
				}
				else if(VehicleWindows[GetPlayerVehicleID(playerid)] == 1)
				{
				    VehicleWindows[GetPlayerVehicleID(playerid)] = 0;
	            	GetPlayerName(playerid, sendername, sizeof(sendername));
      				format(string, sizeof(string), " %s ferme la fenêtre.", sendername);
      				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      				return 1;
				}
				return 1;
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous devez être dans un véhicule pour pouvoir utiliser cette commande?!");
	            return 1;
	        }
	    }
	    return 1;
	}
	if(strcmp(cmd, "/poserradar", true) == 0)
	{
		if(!(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)) //Si le joueur est un admin
  		    return SendClientMessage(playerid,COLOR_GREY,"Vous ne pouvez pas utiliser cette commande!");

		if(GetPlayerInterior(playerid) != 0) //Si le joueur est dans un interieur
			return SendClientMessage(playerid,COLOR_GREY,"Vous ne pouvez pas utiliser cette commande ici");

   		if(IsPlayerInAnyVehicle(playerid)) //Si le joueur est dans un vehicule
 			return SendClientMessage(playerid,COLOR_GREY,"Vous ne pouvez pas utiliser cette commande dans un vehicule");

		if(!IsPlayerRadarAttach(playerid))//Si le joueur n'a pas un radar attacher a lui
		{
	 		new radarid = GetRadarProxPlayer(playerid,2.0);
    		if(radarid != INVALID_RADAR_ID) //Si ya un radar prêt du joueur
		    {
				AttachRadarToPlayer(radarid,playerid);
				return SendClientMessage(playerid,COLOR_GREY,"Radar attacher vous pouvez le deplacer!");
			}
			if(GetNbRadar() < MAX_RADAR) //On verifie que le nombre maximum de radar na pas été atteint
			{
			    new Float:X,Float:Y,Float:Z,Float:A;
				GetPlayerPos(playerid,X,Y,Z);
				GetPlayerFacingAngle(playerid,A);
				radarid = CreateRadar(X,Y,Z,A);//On cree le radar
				AttachRadarToPlayer(radarid,playerid); //On attache le radar au joueur
				return SendClientMessage(playerid,COLOR_GREY,"Radar cree et attacher a vous!");
			}
			else
				return SendClientMessage(playerid,COLOR_GREY,"Le nombre maximum de radar a été atteint");
		}
		else // Si le joueur a un radar attacher a lui
		{
		    tmp = strtok(cmdtext,idx);
		    if(!strlen(tmp))
		        return SendClientMessage(playerid,COLOR_GREY,"UTILISATION: /poserradar [vitesse]");

			new vitesse = strval(tmp);
			if(vitesse <= 49)
			{
			    return SendClientMessage(playerid, COLOR_RED, "Vitesse minimum autorisée (50)");
			}
			else
			{
				new radarid = GetRadarPlayerAttach(playerid);
  				SetRadarVitesse(radarid,vitesse);
  				DettachRadarToPlayer(playerid);
				return SendClientMessage(playerid,COLOR_GREY,"Radar posé. /radardel pour l'enlever");
			}
		}
	}
	if(strcmp(cmd,"/radardel",true) == 0)
	{
		if(!(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)) //Si le joueur est un admin
  		    return SendClientMessage(playerid,COLOR_GREY,"Vous ne pouvez pas utiliser cette commande!");

		if(GetPlayerInterior(playerid) != 0) //Si le joueur est dans un interieur
			return SendClientMessage(playerid,COLOR_GREY,"Vous ne pouvez pas utiliser cette commande ici");

   		if(IsPlayerInAnyVehicle(playerid)) //Si le joueur est dans un vehicule
 			return SendClientMessage(playerid,COLOR_GREY,"Vous ne pouvez pas utiliser cette commande dans un vehicule");

        if(IsPlayerRadarAttach(playerid))//Si le joueur a un radar attacher a lui
        {
			DestroyRadar(GetRadarPlayerAttach(playerid));
			return SendClientMessage(playerid,COLOR_GREY,"Radar detruit");
        }
        else
        {
            new radarid = INVALID_RADAR_ID;
            if((radarid = GetRadarProxPlayer(playerid)) != INVALID_RADAR_ID)
            {
                DestroyRadar(radarid);
                return SendClientMessage(playerid,COLOR_GREY,"Radar detruit");
            }
            else
				return SendClientMessage(playerid,COLOR_GREY,"Aucun radar prêt de vous ni attacher a vous!");
        }
	}
	if (strcmp(cmd, "/verifierceinture", true) == 0) // Moddded By CuervO_NegrO
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	if(!IsACop(playerid))
		    {
		        SendClientMessage(playerid, COLOR_GREY, "* Vous n'êtes pas policier !");
		    	return 1;
			}
            if(OnDuty[playerid] == 0)
			{
			    SendClientMessage(playerid, COLOR_GREY, "* Vous n'êtes pas en service !");
			    return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /verifierceinture [playerid/PartOfName]");
				return 1;
			}
   			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(IsPlayerInAnyVehicle(giveplayerid))
			        {
			            if (ProxDetectorS(5.0, playerid, giveplayerid))
						{
							if(ceinture[giveplayerid] == 1)
							{
							    format(string, sizeof(string), "%s porte sa ceinture/casque correctement.",sendername);
							}
							else if(ceinture[giveplayerid] == 0)
							{
							    format(string, sizeof(string), "%s ne porte pas sa ceinture/casque.",sendername);
							}
							SendClientMessage(playerid, COLOR_GREY, string);
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, " Vous devez être a proximité de ce joueur!");
						    return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "* Ce joueur n'est pas dans un véhicule !");
		    			return 1;
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "* Mauvais ID !");
		    		return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "* Ce joueur n'est pas connecté !");
	    		return 1;
			}
		}
		return 1;
	}
	if(!strcmp(cmdtext, "/ceinture", true)) // By LordMan
	{
        new carid = GetPlayerVehicleID(playerid);
	    new mdv = GetVehicleModel(carid);
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous devez être connecté! ");
	            return 1;
	        }
	        if(IsPlayerInAnyVehicle(playerid))
	        {
				if(IsABike(carid) || IsAOBike(carid) || IsAPizzabike(carid) || IsABoat(carid) || mdv == 509 || mdv == 481 || mdv == 510 || mdv == 462)
				{
				    SendClientMessage(playerid, COLOR_GREY, "Ce véhicule n'a pas de ceinture.");
				    return 1;
				}
	            if(ceinture[playerid] == 0)
	            {
	            	ceinture[playerid] = 1;
	            	GetPlayerName(playerid, sendername, sizeof(sendername));
      				format(string, sizeof(string), " %s met sa ceinture.", sendername);
      				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      				return 1;
				}
				else if(ceinture[playerid] == 1)
				{
				    ceinture[playerid] = 0;
	            	GetPlayerName(playerid, sendername, sizeof(sendername));
      				format(string, sizeof(string), " %s enleve sa ceinture.", sendername);
      				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      				return 1;
				}
				return 1;
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous devez être dans un véhicule pour pouvoir utiliser cette commande!");
	            return 1;
	        }
	    }
	    return 1;
	}

	if(!strcmp(cmdtext, "/casque", true)) // By LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous devez être connecté! ");
	            return 1;
	        }
	        if(IsPlayerInAnyVehicle(playerid))
	        {
				new carid = GetPlayerVehicleID(playerid);
				new vehmod = GetVehicleModel(carid);
				if(!IsABike(carid) && !IsAOBike(carid) && vehmod != 509 && vehmod != 481 && vehmod != 510 && vehmod != 462 && !IsAPizzabike(carid))
				{
				    SendClientMessage(playerid, COLOR_GREY, "Tu ne peux pas mettre de casque dans ce véhicule");
				    return 1;
				}
	            if(casque[playerid] == 0)
	            {
                    new skin = GetPlayerSkin(playerid);
	            	casque[playerid] = 1;
	            	GetPlayerName(playerid, sendername, sizeof(sendername));
      				format(string, sizeof(string), " %s met son casque.", sendername);
      				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      				SetPlayerAttachedObject(playerid, SLOT, 18645, 2, HelmetPos[skin][0], HelmetPos[skin][1], HelmetPos[skin][2], HelmetPos[skin][3], HelmetPos[skin][4], HelmetPos[skin][5]);
      				return 1;
				}
				else if(casque[playerid] == 1)
				{
				    casque[playerid] = 0;
	            	GetPlayerName(playerid, sendername, sizeof(sendername));
      				format(string, sizeof(string), " %s enleve son casque.", sendername);
      				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      				RemovePlayerAttachedObject(playerid, SLOT);
      				return 1;
				}
				return 1;
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous devez être dans un véhicule pour pouvoir utiliser cette commande!");
	            return 1;
	        }
	    }
	    return 1;
	}

	if(strcmp(cmd, "/mettresabot", true) == 0) // By LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)
	        {
			    new counter = 0;
			    new result;
			    new plyName[MAX_PLAYER_NAME];
			    GetPlayerName(playerid, plyName, MAX_PLAYER_NAME);
			    for(new i; i != MAX_VEHICLES; i++)
			    {
			        new dist = CheckPlayerDistanceToVehicle(3.5, playerid, i);
			        if(dist)
			        {
			            result = i;
			            counter++;
			        }
			    }
			    switch(counter)
			    {
			        case 0:
			        {
			            SendClientMessage(playerid, COLOR_GREY, "Aucun véhicule n'est prêt de vous.");
			        }

			        case 1:
			        {
			            if(IsPlayerInAnyVehicle(playerid))
      					{
			                SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez pas mettre de sabot depuis l'interieur.");
			            	return 1;
               			}
               			if(IsAPlane(result) || IsABike(result) || IsAOBike(result) || IsABoat(result) || IsAPizzabike(result) || IsABus(result) || IsATowcar(result) || IsAHspdCar(result) || IsAHarvest(result) || IsADrugHarvest(result) || IsASweeper(result) || result >=78 && result <= 83 || GetVehicleModel(GetPlayerVehicleID(result)) == 523)
               			{
               			    SendClientMessage(playerid, COLOR_GREY, "Il est impossible de mettre un sabot sur ce véhicule");
               			    return 1;
               			}
						VoitureASabot[result] = 1;
               			GetPlayerName(playerid, sendername, sizeof(sendername));
                        format(string, sizeof(string), " %s met un sabot dans les roues du véhicules.", sendername);
                  		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						return 1;
			        }

			        default:
			        {
			            SendClientMessage(playerid, COLOR_GREY, "Trop de véhicules près de vous.");
			            return 1;
			        }
			    }
			    return 1;
			}
	    }
	    return 1;
	}

	if(strcmp(cmd, "/enleversabot", true) == 0) // By LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)
	        {
			    new counter = 0;
			    new result;
			    new plyName[MAX_PLAYER_NAME];
			    GetPlayerName(playerid, plyName, MAX_PLAYER_NAME);
			    for(new i; i != MAX_VEHICLES; i++)
			    {
			        new dist = CheckPlayerDistanceToVehicle(3.5, playerid, i);
			        if(dist)
			        {
			            result = i;
			            counter++;
			        }
			    }
			    switch(counter)
			    {
			        case 0:
			        {
			            SendClientMessage(playerid, COLOR_GREY, "Aucun véhicule n'est prêt de vous.");
			        }

			        case 1:
			        {
			            if(IsPlayerInAnyVehicle(playerid))
      					{
			                SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez pas enlever le sabot depuis l'interieur.");
			            	return 1;
               			}
               			if(IsAPlane(result) || IsABike(result) || IsAOBike(result) || IsABoat(result) || IsAPizzabike(result) || IsABus(result) || IsATowcar(result) || IsAHspdCar(result) || IsAHarvest(result) || IsADrugHarvest(result) || IsASweeper(result) || result >=78 && result <= 83 || GetVehicleModel(GetPlayerVehicleID(result)) == 523)
               			{
               			    SendClientMessage(playerid, COLOR_GREY, "Il est impossible d'enlever un sabot sur ce véhicule");
               			    return 1;
               			}
						VoitureASabot[result] = 0;
               			GetPlayerName(playerid, sendername, sizeof(sendername));
                        format(string, sizeof(string), " %s enleve le sabot des roues du véhicule.", sendername);
                  		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						return 1;
			        }

			        default:
			        {
			            SendClientMessage(playerid, COLOR_GREY, "Trop de véhicules près de vous.");
			            return 1;
			        }
			    }
			    return 1;
			}
	    }
	    return 1;
	}
    if(strcmp(cmd, "/adminduty", true) == 0 || strcmp(cmd, "/adminservice", true) == 0 || strcmp(cmd, "/adu", true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
		    if(gPlayerLogged[playerid] == 0)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "Vous devez être connecté !");
				return 1;
		    }
		    if(PlayerInfo[playerid][pAdmin] > 0)
		    {
		        if(AdminDuty[playerid] == 0)
		        {
		            AdminDuty[playerid] = 1;
					SetPlayerArmour(playerid, 999);
					SetPlayerHealth(playerid, 999);
					SetPlayerColor(playerid, COLOR_LIGHTRED);
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "[INFO] %s est en Admin service", sendername);
					ABroadCast(COLOR_LIGHTRED,string,1);
					if(PlayerInfo[playerid][pAdmin] >= 1339)
					SafeGivePlayerWeapon(playerid, 38, 11000);
					{
					    for(new i = 0; i < sizeof(CarInfo); i++)
						{
							SetVehicleParamsForPlayer(i,playerid,0,0);
						}
					}
					return 1;
		        }
		        else if(AdminDuty[playerid] == 1)
		        {
		            AdminDuty[playerid] = 0;
		            SetPlayerArmour(playerid, 0);
					SetPlayerHealth(playerid, 100);
                    SafeResetPlayerWeapons(playerid);
					SetPlayerColor(playerid,COLOR_WHITE);
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "[INFO] %s n'est plus en Admin service", sendername);
					ABroadCast(COLOR_LIGHTRED,string,1);
					return 1;
		        }
		    }
		    else
		    {
		        SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé à utiliser cette commande!");
		        return 1;
		    }
		}
	    return 1;
	}
	if(strcmp(cmd, "/chercherportefeuille", true) == 0 || strcmp(cmd, "/cp", true) ==0) // By LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(gPlayerLogged[playerid] == 0)
			{
				SendClientMessage(playerid, COLOR_GREY, "Vous devez être connecté!");
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_WHITE, "Note: /chercherportefeuille (/cp) [playerid/PartOfName]");
			    return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(PlayerTied[giveplayerid] != 1)
			        {
			            SendClientMessage(playerid, COLOR_GREY, "Ce joueur doit être ligotter pour pouvoir chercher son portefeuille! ");
			            return 1;
			        }
			        if(ProxDetectorS(5.0, playerid, giveplayerid))
			        {
			            GetPlayerName(playerid, sendername, sizeof(sendername));
			            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			            format(string, sizeof(string), "%s à %d$ dans son portefeuille.", giveplayer, GetPlayerMoney(giveplayerid));
			            SendClientMessage(playerid, COLOR_WHITE, string);
			            return 1;
			        }
			        else
			        {
			            SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas près de vous!");
			            return 1;
			        }
			    }
			}
	    }
	    return 1;
	}

	if(!strcmp(cmdtext, "/vehid", true)) // By LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(IsPlayerInAnyVehicle(playerid))
	        {
	            format(string, sizeof(string), "ID du Véhicule: %d.", GetPlayerVehicleID(playerid));
	            SendClientMessage(playerid, COLOR_GREY, string);
	            return 1;
	        }
	    }
	    return 1;
   }
   if(!strcmp(cmdtext, "/gotohospital", true)) // By LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] > 1)
	        {
	        	SetPlayerPos(playerid, -3436.2021,476.3759,57.6132);
				GameTextForPlayer(playerid, "~w~Hopital",5000,1);
				SetPlayerInterior(playerid,0);
				SetPlayerFacingAngle(playerid, 0);
				PlayerInfo[playerid][pInt] = 0;
  				return 1;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas autorisé a utilisé cette commande.");
			    return 1;
			}
	    }
	    return 1;
	}
 /*if(!strcmp(cmdtext, "/gotohospital", true)) // By LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] > 1)
	        {
	        	SetPlayerPos(playerid, 1172.1720,-1332.8326,1006.4028);
				GameTextForPlayer(playerid, "~w~Hopital de la Misericorde",5000,1);
				SetPlayerInterior(playerid,6);
				SetPlayerFacingAngle(playerid, 0);
				PlayerInfo[playerid][pInt] = 6;
  				return 1;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas autorisé a utilisé cette commande.");
			    return 1;
			}
	    }
	    return 1;
	}*/

	if(strcmp(cmd, "/identite", true) == 0 || strcmp(cmd, "/carteidentite", true) == 0 || strcmp(cmd, "/identiter", true) == 0)
	//if(strcmp(cmd, "/carteidentite", true) ==0 || strcmp(cmd, "/ci", true) ==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous devez être connecté!");
	            return 1;
	        }
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_WHITE, "Note: /carteidentite [playerid/PartOfName]");
			    return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(ProxDetectorS(8.0, playerid, giveplayerid))
			        {
			            GetPlayerName(playerid, sendername, sizeof(sendername));
			            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
                        format(string, sizeof(string), "   Vous avez montré votre carte d'identité à %s.", giveplayer);
	            		SendClientMessage(playerid, COLOR_WHITE, string);
	            		SendClientMessage(giveplayerid, COLOR_GREEN, "_____________________________");
	            		new atext[20];
	            		if(PlayerInfo[playerid][pSex] == 1) { atext = "Homme"; }
	            		else if(PlayerInfo[playerid][pSex] == 2) { atext = "Femme"; }
         		  		new otext[20];
						if(PlayerInfo[playerid][pOrigin] == 1) { otext = "USA"; }
						else if(PlayerInfo[playerid][pOrigin] == 2) { otext = "Europe"; }
						else if(PlayerInfo[playerid][pOrigin] == 3) { otext = "Asie"; }
						else if(PlayerInfo[playerid][pOrigin] == 4) { otext = "Afrique"; }
						new dtext[20];
						if(STDPlayer[playerid] == 1) { dtext = "SIDA"; }
						else if(STDPlayer[playerid] == 2) { dtext = "Gonorrhée"; }
						else if(STDPlayer[playerid] == 3) { dtext = "Syphilis"; }
						else { dtext = "Aucune"; }
	            		format(string, sizeof(string), "   Nom: %s", sendername);
	            		SendClientMessage(giveplayerid, COLOR_WHITE, string);
	            		format(string, sizeof(string), "   Age: %d",PlayerInfo[playerid][pAge]);
	            		SendClientMessage(giveplayerid, COLOR_WHITE, string);
	            		format(string, sizeof(string), "   Sex: %s",atext);
	            		SendClientMessage(giveplayerid, COLOR_WHITE, string);
	            		format(string, sizeof(string), "   Origine: %s",otext);
	            		SendClientMessage(giveplayerid, COLOR_WHITE, string);
	            		format(string, sizeof(string), "   Tel: %d",PlayerInfo[playerid][pPnumber]);
	            		SendClientMessage(giveplayerid, COLOR_WHITE, string);
	            		format(string, sizeof(string), "   Maladie Connue: %s",dtext);
	            		SendClientMessage(giveplayerid, COLOR_WHITE, string)
	            		SendClientMessage(giveplayerid, COLOR_GREEN, "_____________________________");
	            		format(string, sizeof(string), "   %s vous à montré sa carte d'identité.", sendername);
	            		SendClientMessage(giveplayerid, COLOR_WHITE, string);
	            		return 1;
			        }
			    }
			}
	    }
	    return 1;
	}
	if(!strcmp(cmdtext, "/tracerdernierappel", true) || !strcmp(cmd, "/tda", true) || !strcmp(cmd, "/tlc", true))
	//if(!strcmp(cmdtext, "/tracerdernierappel", true) || !strcmp(cmdtext, "/tda", true)) // By LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous devez être connecté.");
	            return 1;
	        }
	        if(IsAPDMember(playerid))
	        {
	            if(pdtrace == 0 || pdtrace_x == 0 || pdtrace_y == 0 || pdtrace_z == 0)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "Erreur, impossible de tracer l'appel.");
	                return 1;
	            }
	            SendClientMessage(playerid, COLOR_WHITE, "L'endroit ou à été effectué l'appel est marqué sur votre carte (marqueur rouge)");
	            SendClientMessage(playerid, COLOR_WHITE, "Note: /enlevergps pour enlever le marquer rouge");
				SetPlayerCheckpoint(playerid,pdtrace_x,pdtrace_y,pdtrace_z,8.0);
	            return 1;
	        }
	        else if(PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pLeader] == 4)
	        {
	            if(emdtrace == 0 || emdtrace_x == 0 || emdtrace_y == 0 || emdtrace_z == 0)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "Erreur, impossible de tracer l'appel");
	                return 1;
	            }
	            SendClientMessage(playerid, COLOR_WHITE, "L'endroit ou à été effectué l'appel est marqué sur votre carte (marqueur rouge)");
	            SendClientMessage(playerid, COLOR_WHITE, "Note: /enlevergps pour enlever le marquer rouge");
				SetPlayerCheckpoint(playerid,emdtrace_x,emdtrace_y,emdtrace_z,8.0);
	            return 1;
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas policier! ");
	            return 1;
	        }
	    }
	    return 1;
	}

	if(strcmp(cmd, "/accepterrapport", true) == 0) // By LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous devez être connecté!");
	            return 1;
	        }
	        if(PlayerInfo[playerid][pAdmin] > 0)
	        {
	            tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
			    	SendClientMessage(playerid, COLOR_WHITE, "HINT: /accepterrapport [playerid/PartOfName]");
			    	return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        if(PlayerNeedsHelp[giveplayerid] == 1)
				        {
				            PlayerNeedsHelp[giveplayerid] = 0;
				            GetPlayerName(playerid, sendername, sizeof(sendername));
							GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							format(string, sizeof(string), "%s vient d'accepter le rapport de [ID:%d]%s.", sendername, giveplayerid, giveplayer);
							ABroadCast(COLOR_YELLOW, string, 1);
							format(string, sizeof(string), "* L'Admin [ID:%d]%s à accepter votre rapport et va vous aider! Soyez patient.", playerid, sendername);
							SendClientMessage(giveplayerid, 0x4D903DAA, string);
				        }
				        else
				        {
				            SendClientMessage(playerid, COLOR_GREY, "Ce joueur ne vous à pas envoyer de rapport!");
				            return 1;
				        }
				    }
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé à utiliser cette commande! ");
	            return 1;
	        }
	    }
	    return 1;
	}

	if(strcmp(cmd, "/refuserrapport", true) == 0) // By LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous devez être connecté!");
	            return 1;
	        }
	        if(PlayerInfo[playerid][pAdmin] > 0)
	        {
	            tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
			    	SendClientMessage(playerid, COLOR_WHITE, "Note: /refuserrapport [playerid/PartOfName]");
			    	return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        if(PlayerNeedsHelp[giveplayerid] == 1)
				        {
				            PlayerNeedsHelp[giveplayerid] = 0;
				            GetPlayerName(playerid, sendername, sizeof(sendername));
							GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							format(string, sizeof(string), "%s vient de refuser le rapport de [ID:%d]%s.", sendername, giveplayerid, giveplayer);
							ABroadCast(COLOR_YELLOW, string, 1);
							format(string, sizeof(string), "* L'Admin [ID:%d]%s à refuser votre rapport et vous dira surement pourquoi.", playerid, sendername);
							SendClientMessage(giveplayerid, 0xB35959AA, string);
				        }
				        else
				        {
				            SendClientMessage(playerid, COLOR_GREY, "Ce joueur ne vous à pas envoier de rapport!");
				            return 1;
				        }
				    }
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé à utiliser cette commande! ");
	            return 1;
	        }
	    }
	    return 1;
	}

	if(!strcmp(cmdtext, "/asellcar", true)) // By LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous devez êtres connecté!");
	            return 1;
	        }
	        if(PlayerInfo[playerid][pAdmin] >= 1339)
	        {
//	            new vehid = GetPlayerVehicleID(playerid);
	            new Float:x,Float:y,Float:z;
         		new Float:a;
         		CarInfo[vehid][cOwned] = 0;
         		strmid(CarInfo[vehid][cOwner], "Concession", 0, strlen("Concession"), 9999);
         		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
         		GameTextForPlayer(playerid, "~w~Vous avez vendu ce vehicule par commande admin.", 10000, 3);
         		GetVehiclePos(vehid, x, y, z);
         		GetVehicleZAngle(vehid, a);
         		CarInfo[vehid][cLocationx] = x;
         		CarInfo[vehid][cLocationy] = y;
         		CarInfo[vehid][cLocationz] = z;
         		CarInfo[vehid][cAngle] = a;
         		RemovePlayerFromVehicle(playerid);
         		TogglePlayerControllable(playerid, 1);
         		OnPropUpdate();
         		DestroyVehicle(vehid);
				CreateVehicle(CarInfo[vehid][cModel],CarInfo[vehid][cLocationx],CarInfo[vehid][cLocationy],CarInfo[vehid][cLocationz]+1.0,CarInfo[vehid][cAngle],CarInfo[vehid][cColorOne],CarInfo[vehid][cColorTwo],60000);
	            return 1;
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas autorisé à utiliser cette commande!");
	            return 1;
	        }
	    }
	    return 1;
	}

	if(!strcmp(cmdtext, "/fumer", true)) // By LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous devez êtres connecté!");
	            return 1;
	        }
	        if(IsSmoking[playerid] == 0)
	        {
	            if(PlayerInfo[playerid][pLighter] == 0)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas de briquet! ");
	                return 1;
	            }
	            if(PlayerInfo[playerid][pCigarettes] == 0)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas de cigarette! ");
	                return 1;
	            }
	            new randsmoke = random(2)+1;
				if(randsmoke == 1)
				{
				    PlayerInfo[playerid][pLighter] -= 1;
				    PlayerInfo[playerid][pCigarettes] -= 1;
				    GetPlayerName(playerid, sendername, sizeof(sendername));
				    if(PlayerInfo[playerid][pSex] == 1) { format(string, sizeof(string), " %s prend un briquet et une cigarette et allume sa cigarette.", sendername); }
					else { format(string, sizeof(string), " %s prend un briquet et une cigarette et allume sa cigarette.", sendername); }
				    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				    IsSmoking[playerid] = 60;
				    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_SMOKE_CIGGY);
				    SendClientMessage(playerid, COLOR_WHITE, "Conseil: Vous pouvez /jettercigarette quand vous le voulez.");
				    SendClientMessage(playerid, COLOR_WHITE, "Conseil: Vous pouvez /fumeranim si vous voulez.");
				    return 1;
				}
				else
				{
				    PlayerInfo[playerid][pLighter] -= 1;
				    GetPlayerName(playerid, sendername, sizeof(sendername));
				    if(PlayerInfo[playerid][pSex] == 1) { format(string, sizeof(string), " %s prend un briquet et une cigarette et essaye d'allumer sa cigarette mais n'y arrive pas.", sendername); }
					else { format(string, sizeof(string), " %s prend un briquet et une cigarette et essaye d'allumer sa cigarette mais n'y arrive pas.", sendername); }
      				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Vous êtes déjà en train de fumer! ");
			    return 1;
			}
		}
		return 1;
	}

	if(!strcmp(cmdtext, "/jettercigarette", true)) // By LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous devez êtres connecté!");
	            return 1;
	        }
	        if(IsSmoking[playerid] > 0)
	        {
	            IsSmoking[playerid] = 0;
	            GetPlayerName(playerid, sendername, sizeof(sendername));
	            if(PlayerInfo[playerid][pSex] == 1) { format(string, sizeof(string), " %s jette et ecrase son mégot par terre.", sendername); }
	            else { format(string, sizeof(string), " %s jette et ecrase son mégot par terre.", sendername); }
	            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	            if(UsingSmokeAnim[playerid] == 1)
	            {
	                ClearAnimations(playerid);
	            }
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas en train de fumer! ");
	            return 1;
	        }
		}
		return 1;
	}

	if(!strcmp(cmdtext, "/fumeranim", true)) // By LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous devez êtres connecté!");
	            return 1;
	        }
	        if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez utiliser /fumeranim que quand vous êtes à pied!");
	            return 1;
	        }
	        if(IsSmoking[playerid] != 0)
	        {
	            UsingSmokeAnim[playerid] = 1;
	            ApplyAnimation(playerid,"SMOKING", "M_smklean_loop", 4.0, 1, 0, 0, 0, 0);
	            return 1;
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas en train de fumer! ");
	            return 1;
	        }
		}
		return 1;
	 }

	 if(!strcmp(cmdtext, "/contrebandematos", true) || !strcmp(cmdtext, "/cm", true)) // By LordMan
	 {
		if(IsPlayerConnected(playerid))
		{
		    if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous devez êtres connecté!");
	            return 1;
	        }
	        if(PlayerInfo[playerid][pJob] == 22)
	        {
	            if(PlayerToPoint(3.0,playerid,2408.5229,1837.7008,6.0156))
	            {
	                if(GetPlayerMoney(playerid) < 199)
	                {
	                    SendClientMessage(playerid, COLOR_GREY, "Avant de pouvoir commencer, il vous faut 200$");
	                    return 1;
	                }
	                if(MatsHolding[playerid] != 0)
	                {
	                    SendClientMessage(playerid, COLOR_GREY, "Vous êtes déjà en train de faire de la contrebande de Drogue.");
	                    return 1;
	                }
	                SafeGivePlayerMoney(playerid, - 200);
	                MatsHolding[playerid] = 25;
	                SendClientMessage(playerid, COLOR_WHITE, "Vous avez charger le Matos, allez à la banque de matos (marqueur rouge)");
	                GameTextForPlayer(playerid, "~w~Materiels Charger", 5000, 1);
	                SetPlayerCheckpoint(playerid,930.4985,2150.1475,10.8203,1.0);
	                return 1;
	            }
	            else
	            {
	                SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas à l'usine de Blueberry! ")
	                return 1;
	            }
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas contrebandier d'arme!");
	            return 1;
	        }
		}
		return 1;
	 }
	 if(strcmp(cmd, "/creerarme", true) == 0 || strcmp(cmd, "/creategun", true) == 0)
	 //if(strcmp(cmd,"/creerarme",true)==0) // By LordMan
	 {
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous devez êtres connecté!");
	            return 1;
	        }
	        if(PlayerInfo[playerid][pJob] != 23)
			{
			    SendClientMessage(playerid, COLOR_GREY, "Vous devez êtres connecté. ");
			    return 1;
			}
			if(!PlayerToPoint(2.0, playerid, 208.4958,-229.6796,1.7786))
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas au bon endroit !!");
	            return 1;
	        }
			new x_weapon[256];
			x_weapon = strtok(cmdtext, idx);
			if(!strlen(x_weapon))
			{
			    SendClientMessage(playerid, COLOR_GREEN, "________________________________________________");
			    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /creerarme [nom arme]");
			    SendClientMessage(playerid, COLOR_GREY, "Noms Disponibles: Couteau(25) batte(25) sdpistol(100) eagle(200)");
			    SendClientMessage(playerid, COLOR_GREY, "Noms Disponibles: mp5(200) shotgun(200) ak47(600) m4(600) rifle(600)");
			    SendClientMessage(playerid, COLOR_GREEN, "________________________________________________");
			    return 1;
			}
			if(strcmp(x_weapon,"couteau",true) == 0) { if(PlayerInfo[playerid][pMats] > 24) { CreatingGun[playerid] = 4; CreatingGunPrice[playerid] = 25; CreatingGunAmmo[playerid] = 1; } else { SendClientMessage(playerid,COLOR_GREY,"Vous n'avez pas assez de Matériels pour cette arme!"); return 1; } }
			else if(strcmp(x_weapon,"batte",true) == 0) { if(PlayerInfo[playerid][pMats] > 24) { CreatingGun[playerid] = 5; CreatingGunPrice[playerid] = 25; CreatingGunAmmo[playerid] = 1; } else { SendClientMessage(playerid,COLOR_GREY,"Vous n'avez pas assez de Matériels pour cette arme!"); return 1; } }
			else if(strcmp(x_weapon,"sdpistol",true) == 0) { if(PlayerInfo[playerid][pMats] > 99) { CreatingGun[playerid] = 23; CreatingGunPrice[playerid] = 100; CreatingGunAmmo[playerid] = 50; } else { SendClientMessage(playerid,COLOR_GREY,"Vous n'avez pas assez de Matériels pour cette arme!"); return 1; } }
			else if(strcmp(x_weapon,"flowers",true) == 0) { if(PlayerInfo[playerid][pMats] > 24) { CreatingGun[playerid] = 14; CreatingGunPrice[playerid] = 25; CreatingGunAmmo[playerid] = 1; } else { SendClientMessage(playerid,COLOR_GREY,"Vous n'avez pas assez de Matériels pour cette arme!"); return 1; } }
			else if(strcmp(x_weapon,"eagle",true) == 0) { if(PlayerInfo[playerid][pMats] > 199) { CreatingGun[playerid] = 24; CreatingGunPrice[playerid] = 150; CreatingGunAmmo[playerid] = 50; } else { SendClientMessage(playerid,COLOR_GREY,"Vous n'avez pas assez de Matériels pour cette arme!"); return 1; } }
			else if(strcmp(x_weapon,"mp5",true) == 0) { if(PlayerInfo[playerid][pMats] > 199) { CreatingGun[playerid] = 29; CreatingGunPrice[playerid] = 200; CreatingGunAmmo[playerid] = 200; } else { SendClientMessage(playerid,COLOR_GREY,"Vous n'avez pas assez de Matériels pour cette arme!"); return 1; } }
			else if(strcmp(x_weapon,"shotgun",true) == 0) {	if(PlayerInfo[playerid][pMats] > 199) { CreatingGun[playerid] = 25; CreatingGunPrice[playerid] = 200; CreatingGunAmmo[playerid] = 50; } else { SendClientMessage(playerid,COLOR_GREY,"Vous n'avez pas assez de Matériels pour cette arme!"); return 1; } }
   			else if(strcmp(x_weapon,"ak47",true) == 0) { if(PlayerInfo[playerid][pMats] > 599) { CreatingGun[playerid] = 30; CreatingGunPrice[playerid] = 600; CreatingGunAmmo[playerid] = 250; } else { SendClientMessage(playerid,COLOR_GREY,"Vous n'avez pas assez de Matériels pour cette arme!"); return 1; } }
			else if(strcmp(x_weapon,"m4",true) == 0) { if(PlayerInfo[playerid][pMats] > 599) { CreatingGun[playerid] = 31; CreatingGunPrice[playerid] = 600; CreatingGunAmmo[playerid] = 250; } else { SendClientMessage(playerid,COLOR_GREY,"Vous n'avez pas assez de Matériels pour cette arme!"); return 1; } }
			else if(strcmp(x_weapon,"rifle",true) == 0) { if(PlayerInfo[playerid][pMats] > 599) { CreatingGun[playerid] = 33; CreatingGunPrice[playerid] = 600; CreatingGunAmmo[playerid] = 50; } else { SendClientMessage(playerid,COLOR_GREY,"Vous n'avez pas assez de Matériels pour cette arme!"); return 1; } }
			else { SendClientMessage(playerid,COLOR_GREY,"   Invalid Weapon name!"); return 1; }
			SetPlayerCheckpoint(playerid, 208.4958,-229.6796,1.7786, 1.0);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
            IsPuttingMaterials[playerid] = 1;
            SendClientMessage(playerid, COLOR_WHITE, "Aller a cet endroit pour creer l'arme!");
            return 1;
	    }
	    return 1;
	 }
	 if(strcmp(cmd, "/achetermatos", true) == 0 || strcmp(cmd, "/achetermateriaux", true) == 0 || strcmp(cmd, "/buymats", true) == 0)
	 //if(strcmp(cmd,"/achetermatos",true)==0) // By LordMan
	 {
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous devez êtres connecté!");
	            return 1;
	        }
	        if(PlayerInfo[playerid][pJob] != 23)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas vendeur d'arme. ");
			    return 1;
	        }
	        if(!PlayerToPoint(2.0, playerid, 2230.3579,-2286.2107,14.3751))
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas à la banque de matos!");
	            return 1;
	        }
	        tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp))
	        {
	            SendClientMessage(playerid, COLOR_WHITE, "USAGE: /achetermatos [montant]");
	            return 1;
	        }
	        new mammount;
	        mammount = strval(tmp);
	        if(mammount > matssys[MatsAmmount])
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Il n'y a pas assez de matos! ");
	            return 1;
	        }
			if(GetPlayerMoney(playerid) < mammount * 2 - 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas assez d'argent! ");
			    return 1;
			}
			matssys[MatsAmmount] -= mammount;
			PlayerInfo[playerid][pMats] += mammount;
			SafeGivePlayerMoney(playerid, - mammount * 2);
			format(string, sizeof(string), "Vous avez achete %d matériaux pour %d$ !", mammount, mammount * 2);
			SendClientMessage(playerid, COLOR_GREY, string);
			SaveMatsSystem();
			return 1;
	    }
	    return 1;
  }
  if(!strcmp(cmdtext,"/ouvrirgrille", true)||!strcmp(cmd, "/gate", true)||!strcmp(cmd, "/og", true))
{
    if(grilleouverte[playerid] == 0)
	{
		if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
	    {
	        if (PlayerToPoint(15, playerid,1589.053344,-1638.123168,14.122960))
			{
	      		MoveStreamObject(pdgate1,1599.053344,-1638.123168,14.122960, 0.8);
	      		SetTimer("GateClose", 12000, 0);
                SetTimerEx("OuvertureGrille", 25000, 0, "i", playerid);
	            SendClientMessage(playerid, COLOR_BLUE,"Le garage vient de s'ouvrir il se refermera dans 7 secondes.");
	      		GetPlayerName(playerid, sendername, sizeof(sendername));
                grilleouverte[playerid] = 0;
	      		format(string, sizeof(string), " %s prend sa télécommande et ouvre le garage.", sendername);
	      		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	      		PlayerPlaySound(playerid, 1153, 1589.053344,-1638.123168,14.122960);
			}
			else if (PlayerToPoint(15, playerid,1544.700317,-1630.735717,12.924660))
			{
	      		DestroyStreamObject( pdgate2 );
	      		pdgate3 = CreateObject(968,1544.700317,-1630.735717,12.924660,0.000000,0.000000,270.972869);
	      		SetTimer("GateClose5", 6000, 0);
                SetTimerEx("OuvertureGrille", 13000, 0, "i", playerid);
	            SendClientMessage(playerid, COLOR_BLUE,"Le garage vient de s'ouvrir il ce fermera dans 6 secondes.");
	      		GetPlayerName(playerid, sendername, sizeof(sendername));
                grilleouverte[playerid] = 0;
	            format(string, sizeof(string), " %s prend sa télécommande et ouvre le garage.", sendername);
	      		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			/*}
			else if (PlayerToPoint(15, playerid,2720.3772,-2409.7523,12.6))
			{
	      		MoveStreamObject(armygate1,2720.3772, -2401.2523, 12.6, 3.5);
	      		SetTimer("GateClose2", 7000, 0);
                SetTimerEx("OuvertureGrille", 13000, 0, "i", playerid);
	            SendClientMessage(playerid, COLOR_BLUE,"The Army gate Nr. 1 is opened and will close in 7 seconds.");
	      		GetPlayerName(playerid, sendername, sizeof(sendername));
                grilleouverte[playerid] = 1;
	            format(string, sizeof(string), " %s takes his/her remote and opens the army gate #1.", sendername);
	      		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			else if (PlayerToPoint(15, playerid,2720.3772,-2508.3069,12.6))
			{
	      		MoveStreamObject(armygate2,2720.3772, -2499.8069, 12.6, 3.5);
	      		SetTimer("GateClose2", 7000, 0);
                SetTimerEx("OuvertureGrille", 13000, 0, "i", playerid);
	            SendClientMessage(playerid, COLOR_BLUE,"The Army gate Nr. 2 is opened and will close in 7 seconds.");
	      		GetPlayerName(playerid, sendername, sizeof(sendername));
                grilleouverte[playerid] = 1;
	            format(string, sizeof(string), " %s takes his/her remote and opens the army gate #2.", sendername);
	      		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);*/
			}
			else if (PlayerToPoint(15, playerid,1534.9020,-1451.5979,14.4882))
			{
	      		MoveStreamObject(fbigate,1534.9020,-1451.5979,20.4882, 1.5);
	      		SetTimer("GateClose3", 7000, 0);
	      		SetTimerEx("OuvertureGrille", 15000, 0, "i", playerid);
	      		SendClientMessage(playerid, COLOR_BLUE,"La grille du FBI est ouverte, elle se fermera dans 7 secondes.");
	      		GetPlayerName(playerid, sendername, sizeof(sendername));
	      		grilleouverte[playerid] = 0;
	      		format(string, sizeof(string), " %s prend sa télécommande et ouvre la grille.", sendername);
	      		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			else if (PlayerToPoint(15, playerid,1643.3379,-1714.9338,15.3067))
			{
	      		MoveStreamObject(hspdgate,1643.3379,-1705.9338,14.4067, 1.5);
	      		SetTimer("GateClose4", 7000, 0);
	      		SetTimerEx("OuvertureGrille", 15000, 0, "i", playerid);
	      		SendClientMessage(playerid, COLOR_BLUE,"La grille du FBI est ouverte, elle se fermera dans 7 secondes.");
	      		GetPlayerName(playerid, sendername, sizeof(sendername));
	      		grilleouverte[playerid] = 0;
	      		format(string, sizeof(string), " %s prend sa télécommande et ouvre la grille.", sendername);
	      		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			else { SendClientMessage(playerid, COLOR_GREY,"Vous êtes trop loin de la grille."); }
		}
		else if(PlayerInfo[playerid][pMember] == 6 || PlayerInfo[playerid][pLeader] == 6)
		{
		    if (PlayerToPoint(15, playerid,1246.0033,-767.3727,91.1473))
		    {
		        MoveStreamObject(lucianogate,1256.2033,-767.3727,91.1473, 2.2);
		        SetTimer("GateClose6", 7000, 0);
		        SetTimerEx("OuvertureGrille", 15000, 0, "i", playerid);
		        GetPlayerName(playerid, sendername, sizeof(sendername));
		        grilleouverte[playerid] = 0;
		        format(string, sizeof(string), " %s prend sa télécommande et ouvre la grille du Manoir Vercetti.", sendername);
	      		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		    }
		    else { SendClientMessage(playerid, COLOR_GREY,"Vous êtes trop loin de la grille."); }
		}
	 	else
	 	{
		 	//SendClientMessage(playerid, COLOR_GREY,"Vous n'avez pas de télécommande.");
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_RED,"Attendez que la grille soit fermée s'il vous plait.");
	}
	return 1;
}

if(!strcmp(cmdtext,"/ouvrirgarage", true)||!strcmp(cmd, "/ouvrirg", true))
{
    if(grilleouverte[playerid] == 0)
	{
		if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pJob] == 7)
	    {
	        if (PlayerToPoint(15, playerid, 2007.1250,-2118.8650,13.5469))
			{
	      		MoveStreamObject(grillegarage, 1999.111111, -2120.4736328125, 14.262490272522, 0.8);
	      		SendClientMessage(playerid, COLOR_WHITE, "La grille du garage s'ouvre !");
	      		PlayerPlaySound(playerid, 1153, 2007.544921875, -2120.4736328125, 14.262490272522);
	        	}
		        else { SendClientMessage(playerid, COLOR_GREY,"Vous êtes trop loin de la grille."); }
		}
	 	else
	 	{
		 	//SendClientMessage(playerid, COLOR_GREY,"Vous n'avez pas de télécommande.");
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_RED,"Attendez que la grille soit fermée s'il vous plait.");
	}
	return 1;
}
if(!strcmp(cmdtext,"/fermergarage", true)||!strcmp(cmd, "/fermerg", true))
{
    if(grilleouverte[playerid] == 0)
	{
		if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pJob] == 7)
	    {
	        if (PlayerToPoint(15, playerid, 2007.1250,-2118.8650,13.5469))
			{
	      		MoveStreamObject(grillegarage, 2007.235666666, -2120.4736328125, 14.262490272522, 0.8);
	      		SendClientMessage(playerid, COLOR_WHITE, "La grille du garage se ferme !");
	      		PlayerPlaySound(playerid, 1153, 2000.111111, -2120.4736328125, 14.262490272522);
	        	}
		        else { SendClientMessage(playerid, COLOR_GREY,"Vous êtes trop loin de la grille."); }
		}
	 	else
	 	{
		 	//SendClientMessage(playerid, COLOR_GREY,"Vous n'avez pas de télécommande.");
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_RED,"Attendez que la grille soit fermée s'il vous plait.");
	}
	return 1;
}

if(!strcmp(cmdtext,"/ouvrirfouriere", true)||!strcmp(cmd, "/ouvrirf", true))
{
    if(grilleouverte[playerid] == 0)
	{
		if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)
	    {
	        if (PlayerToPoint(15, playerid, 2206.2578,-1976.6577,13.5469))
			{
	      		MoveStreamObject(grillefouriere, 2203.928125, -1977.191040, 8.331029, 0.8);
	      		SetTimer("GrilleFouriere", 12000, 0);
                SetTimerEx("OuvertureGrille", 25000, 0, "i", playerid);
	            SendClientMessage(playerid, COLOR_BLUE,"La grille de la Fouriere vient de s'ouvrir et se refermera dans 7 secondes.");
	      		GetPlayerName(playerid, sendername, sizeof(sendername));
                grilleouverte[playerid] = 0;
	      		format(string, sizeof(string), " %s prend sa télécommande et ouvre la grille.", sendername);
	      		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	      		PlayerPlaySound(playerid, 1153, 2206.2578,-1976.6577,13.5469);
	        	}
		        else { SendClientMessage(playerid, COLOR_GREY,"Vous êtes trop loin de la grille."); }
		}
	 	else
	 	{
		 	//SendClientMessage(playerid, COLOR_GREY,"Vous n'avez pas de télécommande.");
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_RED,"Attendez que la grille soit fermée s'il vous plait.");
	}
	return 1;
}
if(strcmp(cmd, "/mdpbanque", true) == 0) // by LordMan
{
	if(PlayerToPoint(3, playerid,2142.5330,1625.7997,993.6882))
	{
        if(PlayerInfo[playerid][pLevel] < 3)
        {
            return SendClientMessage(playerid, COLOR_GRAD1, "Vous devez être minimum Level 3 pour pouvoir braquer la Banque.");
        }
		tmp = strtok(cmdtext, idx);
		new lemdp = strval(tmp);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Usage: /mdpbanque [mdp]");
			SendClientMessage(playerid, COLOR_RED, "Attention a ce que le mot de passe soit juste !");
			return 1;
	 	}
   		if(lemdp == mdpbanque)
    	{
	   		MoveStreamObject(blindebanque,2146.1977539063, 1626.7004394531, 994.26220703125, 2.0000);
	   		//MoveStreamObject(secubanque,2144.7109375, 1606.787109375, 998.71154785156, 2.5000);
            SetTimerEx("OuvertureGrille", 25000, 0, "i", playerid);
			GetPlayerName(playerid, sendername, sizeof(sendername));
            grilleouverte[playerid] = 1;
		    format(string, sizeof(string), " %s entre le mot de passe et coffre s'ouvre.", sendername);
	   		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else if(lemdp == 118218)
		{
		    MoveStreamObject(blindebanque,2146.1977539063, 1626.7004394531, 994.26220703125, 2.0000);
		    //MoveStreamObject(secubanque,2144.7109375, 1606.787109375, 998.71154785156, 2.5000);
            SetTimerEx("OuvertureGrille", 25000, 0, "i", playerid);
            GetPlayerName(playerid, sendername, sizeof(sendername));
            grilleouverte[playerid] = 1;
            format(string, sizeof(string), " %s entre le mot de passe et le coffre s'ouvre.", sendername);
	   		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else
		{
		    //MoveStreamObject(secubanque,2144.7109375, 1606.787109375, 994.96154785156, 4.5000);
		    //MoveStreamObject(blindebanque,2144.1813964844, 1626.6809082031, 994.26220703125, 4.5000);
	   		GetPlayerName(playerid, sendername, sizeof(sendername));
	   		format(string, sizeof(string), " %s tape le mauvais mot de passe et la grille de securité se ferme.", sendername);
	   		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	   		SendClientMessageToAll(COLOR_BLUE,"Annonce : L'alarme de la banque vient d'être enclenchée.");
		}
	}
	else { SendClientMessage(playerid, COLOR_GREY,"Vous êtes trop loin du tableau de commande."); }
	return 1;
}
if(!strcmp(cmdtext, "/secubanque", true)) // by LordMan
{
    if(PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pMember] == 2)
    {
        if (PlayerToPoint(30, playerid,2144.1813964844, 1626.6809082031, 994.26220703125))
		{
	 		MoveStreamObject(blindebanque,2144.1813964844, 1626.6809082031, 994.26220703125, 4.5000);
            SetTimerEx("OuvertureGrille", 25000, 0, "i", playerid);
		    SendClientMessage(playerid, COLOR_BLUE,"Vous activez la securité.");
            grilleouverte[playerid] = 1;
		    GetPlayerName(playerid, sendername, sizeof(sendername));
      		format(string, sizeof(string), " %s écrit le mot de passe et active la securité de la banque.", sendername);
      		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else { SendClientMessage(playerid, COLOR_GREY,"Vous êtes trop loin de la grille."); }
	}
	else return SendClientMessage(playerid, COLOR_GREY,"Vous n'avez pas la télécommande pour fermer cette grille.");
	return 1;
}
/*if(!strcmp(cmdtext, "/ouvrirtunning", true)) // by LordMan
{
    if(PlayerInfo[playerid][pLeader] == 6)
    {
        if (PlayerToPoint(30, playerid,1042.2530,-1026.0344,32.1016))
		{
      		MoveStreamObject(tugate, 1049.2530,-1026.0344,31.1016, 3.5000);
      		SendClientMessage(playerid, COLOR_BLUE,"La grille du garage tuning est ouverte");
      		GetPlayerName(playerid, sendername, sizeof(sendername));
      		format(string, sizeof(string), " %s prend sa télécommande et ouvre la grille.", sendername);
      		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else { SendClientMessage(playerid, COLOR_GREY,"Vous êtes trop loin de la grille."); }
	}
	else return SendClientMessage(playerid, COLOR_GREY,"Vous n'avez pas la télécommande pour ouvrir cette grille.");
	return 1;
}

if(!strcmp(cmdtext, "/fermertunning", true)) // by LordMan
{
    if(PlayerInfo[playerid][pLeader] == 6 || PlayerInfo[playerid][pMember] == 6)
    {
        if (PlayerToPoint(30, playerid,1042.2530,-1026.0344,32.1016))
		{
      		MoveStreamObject(tugate, 1042.2530,-1026.0344,32.1016, 3.5000);
      		SendClientMessage(playerid, COLOR_BLUE,"La grille du garage tuning est fermée");
      		GetPlayerName(playerid, sendername, sizeof(sendername));
      		format(string, sizeof(string), " %s prend sa télécommande et ferme la grille.", sendername);
      		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else { SendClientMessage(playerid, COLOR_GREY,"Vous êtes trop loin de la grille."); }
	}
    else return SendClientMessage(playerid, COLOR_GREY,"Vous n'avez pas la télécommande pour ouvrir cette grille.");
    return 1;
}*/

//--------------Ouvrir porte couloir commi--------------------------------------
if(strcmp(cmd, "/op", true) == 0 || strcmp(cmd, "/ouvrirporte", true) == 0 || strcmp(cmd, "/porte1", true) == 0)
{
    if(PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pMember] == 3)
    {
        if (PlayerToPoint(5, playerid,245.0578,72.4314,1002.5406))
		{
		    if(PC2 == 0)
		    {
	      		MoveStreamObject(lspddoor1, 244.0578,72.4314,1002.5406, 3.5000);
	      		MoveStreamObject(lspddoor2, 247.1478,72.4314,1002.5406, 3.5000);
	      		SendClientMessage(playerid, COLOR_BLUE,"La porte du commissariat est ouverte, re-fermez la s'il vous plait ! (/fermerporte)");
	      		GetPlayerName(playerid, sendername, sizeof(sendername));
	      		format(string, sizeof(string), "* %s ouvre la porte du commissariat.", sendername);
	      		ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	      		PC2 = 1;
			}
			else
			{
	      		MoveStreamObject(lspddoor1, 245.0578,72.4314,1002.5406, 3.5000);
	      		MoveStreamObject(lspddoor2, 245.9478,72.4314,1002.5406, 3.5000);
	      		SendClientMessage(playerid, COLOR_BLUE,"La porte du commissariat est maintenant fermée. Merci !");
	      		GetPlayerName(playerid, sendername, sizeof(sendername));
	      		format(string, sizeof(string), "* %s ferme la porte du commissariat.", sendername);
	      		ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	      		PC2 = 0;
			}
		}
       	else { SendClientMessage(playerid, COLOR_GREY,"Vous n'êtes pas assez prêt de la porte !"); }
	}
	else return SendClientMessage(playerid, COLOR_GREY,"Vous n'avez pas les clées !");
	return 1;
}
if(strcmp(cmd, "/fermerporte", true) == 0 || strcmp(cmd, "/fp", true) == 0)
{
    if(PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pMember] == 3)
    {
        if (PlayerToPoint(5, playerid,245.0578,72.4314,1002.5406))
		{
		    if(PC2 == 0)
		    {
	      		MoveStreamObject(lspddoor1, 244.0578,72.4314,1002.5406, 3.5000);
	      		MoveStreamObject(lspddoor2, 247.1478,72.4314,1002.5406, 3.5000);
	      		SendClientMessage(playerid, COLOR_BLUE,"La porte du commissariat est ouverte, re-fermez la s'il vous plait ! (/fermerporte)");
	      		GetPlayerName(playerid, sendername, sizeof(sendername));
	      		format(string, sizeof(string), "* %s ouvre la porte du commissariat.", sendername);
	      		ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	      		PC2 = 1;
			}
			else
			{
	      		MoveStreamObject(lspddoor1, 245.0578,72.4314,1002.5406, 3.5000);
	      		MoveStreamObject(lspddoor2, 245.9478,72.4314,1002.5406, 3.5000);
	      		SendClientMessage(playerid, COLOR_BLUE,"La porte du commissariat est maintenant fermée. Merci !");
	      		GetPlayerName(playerid, sendername, sizeof(sendername));
	      		format(string, sizeof(string), "* %s ferme la porte du commissariat.", sendername);
	      		ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	      		PC2 = 0;
			}
		}
       	else { SendClientMessage(playerid, COLOR_GREY,"Vous n'êtes pas assez prêt de la porte !"); }
	}
	else return SendClientMessage(playerid, COLOR_GREY,"Vous n'avez pas les clées !");
	return 1;
}
//----------Ouvrir cellule de garde  a vue commi--------------------------------
if(!strcmp(cmdtext, "/porte2",true)) //by jujuzerg
{
	if(PlayerInfo[playerid][pLeader] == 1 ||PlayerInfo[playerid][pMember] == 1)
	{
	    if(PlayerToPoint(5, playerid, 222.134,70.876,1003.98))
	    {
	        if(PC1 == 0)
	        {
	     		MoveStreamObject(Portecommi, 222.134,67.876,1003.98, 3.5000);
	   	 		SendClientMessage(playerid, COLOR_BLUE,"Vous avez ouvert la porte du bureau du Chef, re-fermez la s'il vous plait ! (/porte2)");
	     		GetPlayerName(playerid, sendername, sizeof(sendername));
	     		format(string, sizeof(string), " %s ouvre la porte du bureau du Chef.", sendername);
	     		ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	     		PC1 = 1;
			}
			else
			{
	     		MoveStreamObject(Portecommi, 222.134,69.276,1003.98, 3.5000);
	   	 		SendClientMessage(playerid, COLOR_BLUE,"Vous avez fermer le bureau du Chef.");
	     		GetPlayerName(playerid, sendername, sizeof(sendername));
	     		format(string, sizeof(string), " %s ferme la porte du bureau du Chef.", sendername);
	     		ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                PC1 = 0;
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY,"Vous n'êtes pas devant la porte !");
		}
	}
	else return SendClientMessage(playerid, COLOR_GREY,"Vous n'avez pas les cléés !");
	return 1;
}
//------------BusDriverStartWest---------------
// By LordMan
if(strcmp(cmd, "/commencerouest", true) == 0 || strcmp(cmd, "/startouest", true) == 0 || strcmp(cmd, "/startouestt", true) == 0)
//if(strcmp(cmd, "/commencerouest", true) == 0)
{
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pJob] == 14)
		{
			if (BusrouteWest[playerid][0] == 12 || BusrouteEast[playerid][0] == 12)
			{
				BusrouteWest[playerid][0] = 0;
				BusrouteEast[playerid][0] = 0;
			}
			if(BusrouteWest[playerid][0] == 0 && BusrouteEast[playerid][0] == 0)
			{
				new playervehicleid = GetPlayerVehicleID(playerid);
				if(IsABus(playervehicleid))
				{
					TogglePlayerControllable(playerid, 1);
				    new engine,lights,alarm,doors,bonnet,boot,objective;
			   		GetVehicleParamsEx(idcar,engine, lights, alarm, doors, bonnet, boot, objective);
                 	SetVehicleParamsEx(idcar, VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, boot, objective);
                 	gEngine[playerid] = 1;
					GameTextForPlayer(playerid, "~g~Le trajet de bus a commence", 5000, 3);
					SendClientMessage(playerid, COLOR_LIGHTRED, "---------Trajet de bus Ouest-----------");
					SendBusRoute(playerid, 1);
					SendClientMessage(playerid, COLOR_RED, " ");
					SendClientMessage(playerid, COLOR_GREEN, "Les marqueurs rouges seront placés tout le long de la route.");
					SendClientMessage(playerid, COLOR_GREEN, "Tous les joueurs se trouvant aux arrêts seront automatiquement prévenu de votre arrivée.");
					BusrouteWest[playerid][0] = 1;
					BusrouteWest[playerid][1] = playervehicleid;
                    SafeGivePlayerMoney(playerid,-50);
					OnPlayerEnterCheckpoint(playerid);
					return 1;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "You are not in a bus!");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "You are already on a route!");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You are not a bus driver!");
		}
	}
	return 1;
}

//------------BusDriverStartEast---------------
// By LordMan
      if(strcmp(cmd, "/commencerest", true) == 0 || strcmp(cmd, "/startest", true) == 0 || strcmp(cmd, "/startestt", true) == 0)
	//if(strcmp(cmd, "/commencerest", true) == 0)
	{
		if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pJob] == 14)
		{
			if (BusrouteWest[playerid][0] == 12 || BusrouteEast[playerid][0] == 12)
			{
				BusrouteWest[playerid][0] = 0;
				BusrouteEast[playerid][0] = 0;
			}
		    if(BusrouteWest[playerid][0] == 0 && BusrouteEast[playerid][0] == 0)
		    {
				new playervehicleid = GetPlayerVehicleID(playerid);
				if(IsABus(playervehicleid))
				{
					TogglePlayerControllable(playerid, 1);
				    new engine,lights,alarm,doors,bonnet,boot,objective;
			 		GetVehicleParamsEx(idcar,engine, lights, alarm, doors, bonnet, boot, objective);
              	    SetVehicleParamsEx(idcar, VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, boot, objective);
              	    gEngine[playerid] = 1;
					GameTextForPlayer(playerid, "~g~Le trajet de bus a commence", 5000, 3);
					SendClientMessage(playerid, COLOR_LIGHTRED, "---------Trajet de bus Est-----------");
					SendBusRoute(playerid, 1);
					SendClientMessage(playerid, COLOR_RED, " ");
					SendClientMessage(playerid, COLOR_GREEN, "Les marqueurs rouges seront placés tout le long de la route.");
					SendClientMessage(playerid, COLOR_GREEN, "Tous les joueurs se trouvant a ces arrêts seront automatiquement prévenu de votre arrivée.");
					BusrouteEast[playerid][0] = 1;
					BusrouteEast[playerid][1] = playervehicleid;
                    SafeGivePlayerMoney(playerid,-50);
					OnPlayerEnterCheckpoint(playerid);
					return 1;
				}
			    else
			    {
				    SendClientMessage(playerid, COLOR_GREY, "You are not in a bus!");
			    }
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "You are already on a route!");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You are not a bus driver!");
		}
	}
	return 1;
	}

	if(strcmp(cmd, "/aunlock", true) == 0)
	{
		if (PlayerInfo[playerid][pAdmin] >= 3)
		{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /aunlock [playerid/PartOfName]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(PlayerInfo[giveplayerid][pLocked] == 1)
			        {
			            PlayerInfo[giveplayerid][pLocked] = 0;
			            TogglePlayerControllable(giveplayerid, 1);
			            SendClientMessage(playerid, COLOR_YELLOW, "Compte débloqué avec succes.");

			        }
			    }
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Vous n'ête pas autorisé a utiliser cette commande.");
		}
		return 1;
	}

	if(strcmp(cmd, "/update", true) == 0)
	{
		if (PlayerInfo[playerid][pAdmin] >= 2)
		{
            SaveFamilies();
			SaveAccounts();
			SendClientMessage(playerid, COLOR_YELLOW, "Tous les comptes on été mis a jour avec succes.");
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Vous n'ête pas autorisé a utiliser cette commande.");
		}
		return 1;
	}

//----------------------------------[ooc]-----------------------------------------------
	if(strcmp(cmd, "/ooc", true) == 0 || strcmp(cmd, "/o", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Vous devez d'abord vous identifiez !");
	            return 1;
	        }
			if ((noooc) && PlayerInfo[playerid][pAdmin] < 1)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Le canal OOC a été désactivé par un Admin !");
				return 1;
			}
			if(PlayerInfo[playerid][pMuted] == 1)
			{
				SendClientMessage(playerid, TEAM_CYAN_COLOR, "   Vous ne pouvez plus parler, Vous avez était silencez !");
				return 1;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[775];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "[Utilisation]: (/o)oc [Ooc Chat]");
				return 1;
			}
			if(FindIP(result)) /// Anti-Pub By Tomy
    		{
        		SendClientMessage(playerid, COLOR_RED, "[Anti-PUB] Vous avez été kick pour avoir fait une pub , si  c'est une erreur veuillez demandé une demande de déban sur le notre forum.");
        		new advertiser[MAX_PLAYER_NAME];
				GetPlayerName(playerid, advertiser, sizeof(advertiser));
				format(string, sizeof(string), "[Anti-PUB] %s a été expulsé de la ville. Raison: Pub",advertiser);
				SendClientMessageToAll(COLOR_LIGHTRED,string);
				format(string, sizeof(string), "[SPEC-PUB]: %s viens de pubé le texte était : '%s' [/o]",sendername, (result));
   	            ABroadCast(COLOR_RED,string,1);
				BanLog(string);
     		   	Ban(playerid);
        		return 1;
 			}
			format(string, sizeof(string), "(( %s : %s ))" , sendername, result);
			OOCOff(COLOR_LIGHTBLUE,string);
			printf("%s", string);
		}
		return 1;
	}
	if(strcmp(cmd, "/noooc", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 2 && (!noooc))
			{
				noooc = 1;
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "Le canal OOC à été désactivé par %s!", sendername);
				ABroadCast(COLOR_RED,string,1);
			}
			else if (PlayerInfo[playerid][pAdmin] >= 2 && (noooc))
			{
				noooc = 0;
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "Le canal OOC à été activé par %s!", sendername);
				ABroadCast(COLOR_RED,string,1);
			}
			else
			{
				SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé a utiliser cette commande!");
			}
		}
		return 1;
	}
    //----------------------------------[aooc]-----------------------------------------------
	if(strcmp(cmd, "/ao", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] < 1) // ou 1338
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Vous n'êtes pas autorisé à utilisez cette commande !");
				return 1;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[920];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "[AIDE] : (/ao)dmin [message]");
				return 1;
			}

         if (PlayerInfo[playerid][pAdmin] == 1)
         {
               format(string, sizeof(string), "Modérateur %s: %s " , sendername, result);
                 OOCOff(0xB82EFFAA,string);
                 printf("Modérateur %s: %s", sendername, result);
         }
         else if (PlayerInfo[playerid][pAdmin] == 2)
         {
               format(string, sizeof(string), "Admin Niveau 2 %s: %s " , sendername, result);
               OOCOff(0xFF9900AA,string);
               printf("»*Admin*« %s: %s", sendername, result);
         }
         else if (PlayerInfo[playerid][pAdmin] == 3)
         {
               format(string, sizeof(string), "Admin Niveau 3 %s: %s " , sendername, result);
               OOCOff(0xFF9900AA,string);
               printf("»*Admin*« %s: %s", sendername, result);
         }
         else if (PlayerInfo[playerid][pAdmin] == 4)
         {
               format(string, sizeof(string), "Admin Niveau 4 %s: %s " , sendername, result);
               OOCOff(0xFF9900AA,string);
               printf("»*Admin*« %s: %s", sendername, result);
         }
         else if (PlayerInfo[playerid][pAdmin] == 1336)
         {
               format(string, sizeof(string), "Admin General %s: %s " , sendername, result);
               OOCOff(0x804040FF,string);
               //printf("~¤|Admin Général|¤~ %s: %s", sendername, result);
         }
         else if (PlayerInfo[playerid][pAdmin] == 1338)
         {
               format(string, sizeof(string), "Co Fondateur %s: %s " , sendername, result);
               OOCOff(COLOR_LIGHTRED,string);
               printf("~¤|Co Fondateur|¤~ %s: %s", sendername, result);
         }
         else if (PlayerInfo[playerid][pAdmin] == 1339)
         {
               format(string, sizeof(string), "Fondateur %s: %s " , sendername, result);
               OOCOff(COLOR_LIGHTRED,string);
               printf("¤|~Fondateur~|¤ %s: %s", sendername, result);

         }
		}
		return 1;
	}

	///////////////////////////////////////////////////////////////////////////////////////
	if(strcmp(cmd, "/mooc", true) == 0 || strcmp(cmd, "/mo", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous devez être connecté!");
	            return 1;
	        }
			if (PlayerInfo[playerid][pAdmin] < 1)
			{
				SendClientMessage(playerid, COLOR_RED, "Vous n'êtes pas Modo!");
				return 1;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			UnderscoreToSpace( sendername );
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/mo)oc [mooc chat]");
				return 1;
			}
			format(string, sizeof(string), "[%i][MOOC] Modérateur %s: %s " ,playerid, sendername, result);
			OOCOff(0x62B382AA,string);
			printf("%s", string);
		}
		return 1;
	}
	if(strcmp(cmd, "/newbie", true) == 0 || strcmp(cmd, "/n", true) == 0 || strcmp(cmd, "/noob", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
            if(PlayerInfo[playerid][pMuted] == 1)
			{
				SendClientMessage(playerid, TEAM_CYAN_COLOR, "   Vous ne pouvez pas parler, vous avez été mute!");
				return 1;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[MAX_STRING];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/n) [chat]");
				return 1;
			}
			new arank[64];
			if(PlayerInfo[playerid][pAdmin] >= 2) { arank = "Admin"; }
            else if(PlayerInfo[playerid][pDonateRank] == 1) { arank = "Membre de Confiance"; }
            else if(PlayerInfo[playerid][pDonateRank] == 2) { arank = "V.I.P"; }
            else if(PlayerInfo[playerid][pLevel] == 1) { arank = "Débutant"; }
			else { arank = "Modo"; }
            if(FindIP(result)) /// Anti-Reclama
			{
				SendClientMessage(playerid, COLOR_RED, "[Anti-PUB] Vous avez été kick pour avoir fait une pub ");
				new advertiser[MAX_PLAYER_NAME];
				GetPlayerName(playerid, advertiser, sizeof(advertiser));
				format(string, sizeof(string), "[Anti-PUB] %s a été expulsé de la ville. Raison: Pub",advertiser);
				SendClientMessageToAll(COLOR_LIGHTRED,string);
				KickLog(string);
 				Kick(playerid);
				return 1;
			}
   			if (PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pDonateRank] > 0 || PlayerInfo[playerid][pLevel] == 1)
			{
			    format(string, sizeof(string), " %s %s : %s ", arank, sendername, result);
				SendNewbieMessage(COLOR_GREEN, string);
			}
			else
   			{
   			    SendClientMessage(playerid, COLOR_GRAD2, "Vous n'êtes pas Level 1 ou Membre de Confiance/V.I.P");
   			    return 1;
			}
		}
		return 1;
	}
	//-------------------------[Dieu Suprême]----------------------------
	if(strcmp(cmd, "/dieu", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous devez être connecté!");
	            return 1;
	        }
			if (PlayerInfo[playerid][pAdmin] < 1339)
			{
				SendClientMessage(playerid, COLOR_RED, "Seul le dieu peut faire ceci!");
				return 1;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			UnderscoreToSpace( sendername );
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /dieu [Text]");
				return 1;
			}
			format(string, sizeof(string), "(( [%i] Dieu Suprême %s: %s ))" ,playerid, sendername, result);
			OOCOff(0xF60000F6,string);
			printf("%s", string);
		}
		return 1;
	}
//-------------------------[SWAT]----------------------------
    if(strcmp(cmd, "/swaton", true) == 0)
	{
		if(PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pRank] >= 4)
		{
			authorizeswat = 1;
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "* QG: Officier %s vous permet de vous changer en  S.W.A.T. *", sendername);
			SendRadioMessage(1, TEAM_BLUE_COLOR, string);
		}
		return 1;
	}

	if(strcmp(cmd, "/sebranler", true) == 0) {
		LoopingAnim(playerid,"PAULNMAC", "wank_loop", 1.800001, 1, 0, 0, 1, 600);
		SendClientMessage(playerid, COLOR_GREEN, "C'est bon ça ? Hein ?");
		return 1;
    }


	if(strcmp(cmd, "/swatoff", true) == 0)
	{
		if(PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pRank] >= 4)
		{
			authorizeswat = 0;
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "* QG: Officier %s vous ne permet plus de vous changer en S.W.A.T.",sendername);
			SendRadioMessage(1, TEAM_BLUE_COLOR, string);
		}
		return 1;
	}
	if(strcmp(cmd, "/swat", true) == 0)
	{
        if(PlayerInfo[playerid][pMember]==1||PlayerInfo[playerid][pLeader] == 1)
		{
			if(swat[playerid] == 0)
            {
				if(authorizeswat == 1)
				{
					if (PlayerToPoint(3, playerid,210.5792,144.4530,1003.0234) || PlayerToPoint(3,playerid,211.1120,151.6898,1003.0234) || PlayerInfo[playerid][pLocal] != 255)
					{

    	 				SafeResetPlayerWeapons(playerid);
						swat[playerid] = 1;
						SetPlayerSkin(playerid, 285);

						SafeGivePlayerWeapon(playerid, 31, 500);
						SafeGivePlayerWeapon(playerid, 34, 150);
						SafeGivePlayerWeapon(playerid, 29, 730);
						SafeGivePlayerWeapon(playerid, 27, 250);

						SetPlayerArmour(playerid, 100);
						SetPlayerHealth(playerid, 100);

						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string,sizeof(string), " %s a mis son uniforme de S.W.A.T.", sendername);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}
				else { SendClientMessage(playerid, COLOR_GREY, "L'équipement S.W.A.T. n'est pas autorisé!"); }
			}
			else
			{
				if(PlayerInfo[playerid][pLeader] == 1) { SetPlayerSkin(playerid, 281); }
				if(PlayerInfo[playerid][pRank]==5) { SetPlayerSkin(playerid, 281); }
				if(PlayerInfo[playerid][pRank]==4) { SetPlayerSkin(playerid, 281); }
				if(PlayerInfo[playerid][pRank]==3) { SetPlayerSkin(playerid, 281); }
				if(PlayerInfo[playerid][pRank]==2) { SetPlayerSkin(playerid, 267); }
				if(PlayerInfo[playerid][pRank]==1) { SetPlayerSkin(playerid, 266); }

				swat[playerid] = 0;
				SafeResetPlayerWeapons(playerid);
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string,sizeof(string), " %s a enlevé son uniforme de S.W.A.T.", sendername);
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

			}
		}
		if(!IsACop(playerid) || PlayerInfo[playerid][pLeader] > 1 || PlayerInfo[playerid][pLeader] < 1)
 		{
	       	SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas policier!");
		}
		return 1;
	}
	//--------------------------------=Police Backup=----------------------------------------------------------------
	//--------------------------------=Backup=----------------------------------------------------------------
	//===Needs Radar Clear
	//by LordMan
	if(strcmp(cmd,"/b",true)==0 || strcmp(cmd,"/b",true)==0)
	//if(strcmp(cmd,"/b",true)==0 || strcmp(cmd,"/b",true)==0)
	{
		if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1)
			{
				if (PlayerInfo[playerid][pRequestingBackup] != 1)
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					UnderscoreToSpace( sendername );
					format(string, sizeof(string), "Urgence : %s a besoin D'aide tout de suite ! (Point Rouge).", sendername);
					PlayerInfo[playerid][pRequestingBackup] = 1;
					for(new i = 0; i < MAX_PLAYERS; i++)
					{
						if(IsPlayerConnected(i))
						{
							if(PlayerInfo[i][pMember] == 1||PlayerInfo[i][pLeader] == 1)
							{
								SetPlayerMarkerForPlayer(i, playerid, 0xFF0000FF);
								SendClientMessage(i, TEAM_BLUE_COLOR, string);
							}
						}
					}
					SendClientMessage(playerid, TEAM_BLUE_COLOR, "Tappez /bc quand vous n'avez plus besoin d'aide.");
					SetTimerEx("BackupClear", 180000, false, "ii", playerid, 1);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Vous avez déjà fait une demande d'aide!");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas dans une faction");
			}
		}
		return 1;
	}

	//-------------------------------------------Ballas-Backup------------------------------//

	//===Needs Radar Clear
	//by LordMan
	if(strcmp(cmd,"/b",true)==0 || strcmp(cmd,"/b",true)==0)
	//if(strcmp(cmd,"/b",true)==0 || strcmp(cmd,"/b",true)==0)
	{
		if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pMember] == 15||PlayerInfo[playerid][pLeader] == 15)
			{
				if (PlayerInfo[playerid][pRequestingBackup] != 15)
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					UnderscoreToSpace( sendername );
					format(string, sizeof(string), "Urgence: %s a besoin D'aide tout de suite! (Point Rouge).", sendername);
					PlayerInfo[playerid][pRequestingBackup] = 15;
					for(new i = 0; i < MAX_PLAYERS; i++)
					{
						if(IsPlayerConnected(i))
						{
							if(PlayerInfo[i][pMember] == 15||PlayerInfo[i][pLeader] == 15)
							{
								SetPlayerMarkerForPlayer(i, playerid, 0xFF0000FF);
								SendClientMessage(i, TEAM_BLUE_COLOR, string);
							}
						}
					}
					SendClientMessage(playerid, TEAM_BLUE_COLOR, "Tappez /bc quand vous n'avez plus besoin d'aide.");
					SetTimerEx("BackupClear", 180000, false, "ii", playerid, 1);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Vous avez déjà fait une demande d'aide!");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas dans une faction");
			}
		}
		return 1;
	}
	//-----------------=Radar Clear=-----------------
	//======Goes with Police Backup
	//by LordMan
	if(strcmp(cmd,"/bc",true)==0 || strcmp(cmd,"/sba",true)==0)
	//if(strcmp(cmd,"/bc",true)==0 || strcmp(cmd,"/sba",true)==0)
	{
		BackupClear(playerid, 0);
		return 1;
	}

//--------------------------------=[Roadblock]=-----------------------------------
	// by LordMan
    if(strcmp(cmd, "/barrage", true) == 0 || strcmp(cmd, "/bar", true) == 0 || strcmp(cmd, "/rb", true) == 0)
	//if(strcmp(cmdtext, "/barrage", true)==0 || strcmp(cmdtext, "/bar", true)==0)
	//if(strcmp(cmdtext, "/barrage", true)==0 || strcmp(cmdtext, "/ba", true) ==0 || strcmp(cmd, "/rb", true) == 0)
	{
		if (PlayerInfo[playerid][pMember] != 1 && PlayerInfo[playerid][pLeader] != 1)
		{
			if(PlayerInfo[playerid][pAdmin] > 1)
			{
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas policier!");
			    return 1;
			}
		}
		if (PlayerInfo[playerid][pRoadblock] != 0)
		{
		    if(PlayerInfo[playerid][pAdmin] > 1)
			{
			}
			else
			{
				return SendClientMessage(playerid, COLOR_GREY, "Vous avez déjà déployé un barrage, Tapez /eb pour enlever votre barrage.");
			}
		}
		//if (roadblocktimer != 0) return SendClientMessage(playerid, COLOR_GREY, "Svp attendez avant de déployé un nouveau barrage!");
		new Float:X, Float:Y, Float:Z, Float:A;
		GetPlayerPos(playerid, X, Y, Z);
		GetPlayerFacingAngle(playerid, A);
		PlayerInfo[playerid][pRoadblock] = CreateStreamObject(981, X, Y, Z, 0.0, 0.0, A+180);
		SetPlayerPos(playerid, X, Y, Z+4);
		GameTextForPlayer(playerid, "~w~Barrage ~r~En Place", 5000, 5);
		SendClientMessage(playerid, COLOR_GREEN, "Barrage déployé avec succes, Tapez /enleverbarrage ou /eb pour l'enlever.");
		roadblocktimer = 1;
		GetPlayerName(playerid, sendername, sizeof(sendername));
		format(string, sizeof(string), "HQ: Un barrage à été déployé par %s, il à été marqué sur votre map (marqueur rouge).", sendername);
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
				if(PlayerInfo[i][pMember] == 1 || PlayerInfo[i][pLeader] == 1)
				{
					SetPlayerCheckpoint(playerid, X, Y, Z-10, 1.0);
					SendClientMessage(i, TEAM_BLUE_COLOR, string);
					if (PlayerInfo[i][pRank] >= 5 && PlayerInfo[i][pMember] || PlayerInfo[i][pLeader] == 1)
					{
						SendClientMessage(i, COLOR_YELLOW, "Vous pouvez enlever tous les barrages, Tapez /ebtous");
					}
				}
			}
		}
		if(PlayerInfo[playerid][pAdmin] > 1)
		{
		}
		else
		{
			SetTimer("ResetRoadblockTimer", 60000, false);
		}
		return 1;
	}

	if(strcmp(cmdtext, "/enleverbarrage", true)==0 || strcmp(cmdtext, "/eb", true)==0 || strcmp(cmdtext, "/stopba", true)==0)
	{
		if (PlayerInfo[playerid][pMember] != 1 && PlayerInfo[playerid][pLeader] != 1)
		{
			SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas policier!");
			return 1;
		}
		if (PlayerInfo[playerid][pRoadblock] == 0)
		{
			SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas déployé de barrage!");
			return 1;
		}
		RemoveRoadblock(playerid);
		SendClientMessage(playerid, COLOR_GREEN, "Barrage enlevé avec succes.");
		return 1;
	}

	if(strcmp(cmdtext, "/stopbarrageall", true)==0 || strcmp(cmdtext, "/sball", true) ==0 || strcmp(cmd, "/ebtous", true) == 0)
	{
		if (PlayerInfo[playerid][pRank] >= 5 && PlayerInfo[playerid][pMember] || PlayerInfo[playerid][pLeader] == 1)
		{
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(PlayerInfo[i][pRoadblock] != 0)
				{
					RemoveRoadblock(i);
				}
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "QG: Tous les barrages routiers de la zone ont été levé sous ordre de %s.", sendername);
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(PlayerInfo[i][pMember] == 1 || PlayerInfo[i][pLeader] == 1)
					{
						SendClientMessage(i, TEAM_BLUE_COLOR, string);
					}
				}
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You have to be rank 5+ or a police leader to remove all roadblocks!");
		}
		return 1;
	}
//-------------------------------[Pay]--------------------------------------------------------------------------
    if(strcmp(cmd, "/payer", true) == 0 || strcmp(cmd, "/pay", true) == 0 || strcmp(cmd, "/paye", true) == 0)
	//if(strcmp(cmd, "/payer", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /payer [playerid/PartOfName] [montant]");
				return 1;
			}
			//giveplayerid = strval(tmp);
	        giveplayerid = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /payer [playerid/PartOfName] [montant]");
				return 1;
			}
			moneys = strval(tmp);
			if(moneys > 1000 && PlayerInfo[playerid][pLevel] < 2)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Vous devez etre niveau 2 ou plus pour donner plus de 1000$");
				return 1;
			}
			if(moneys < 1 || moneys > 1000000)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Vous ne pouvez pas payer moins que 1$ et plus que 1000000$.");
			    return 1;
			}
			if (IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(PlayerInfo[giveplayerid][pLocal] == 106)
					{
						SendClientMessage(playerid, COLOR_GRAD1, "Commande non autorisée a cet endroit");
						return 1;
					}
					if (ProxDetectorS(5.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid)
					    {
					        SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez pas vous payer vous même!");
					        return 1;
					    }
						GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						playermoney = GetPlayerMoney(playerid);
						if (moneys > 0 && playermoney >= moneys)
						{
						    //ConsumingMoney[giveplayerid] = 1;
							SafeGivePlayerMoney(playerid, (0 - moneys));
							SafeGivePlayerMoney(giveplayerid, moneys);
							format(string, sizeof(string), "Vous avez donné $%d(player: %d),à %s.", moneys,giveplayerid, giveplayer);
							PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
							SendClientMessage(playerid, COLOR_GRAD1, string);
							format(string, sizeof(string), "   Vous avez reçus $%d de %s (ID : %d).", moneys, sendername, playerid);
							SendClientMessage(giveplayerid, COLOR_GRAD1, string);
							format(string, sizeof(string), "%s à payé $%d à %s", sendername, moneys, giveplayer);
							PayLog(string);
							if(moneys >= 1000000)
							{
								ABroadCast(COLOR_YELLOW,string,1);
							}
							PlayerPlaySound(giveplayerid, 1052, 0.0, 0.0, 0.0);
							/*format(string, sizeof(string), " %s takes out some cash, and hands it to %s.", sendername ,giveplayer);
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);*/
							ApplyAnimation(playerid,"DEALER","shop_pay",4.1,0,0,0,0,0);
						}
						else
						{
							SendClientMessage(playerid, COLOR_GRAD1, "Montant invalide.");
						}
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD1, "Vous êtes trop loin.");
					}
				}//invalid id
			}
			else
			{
				format(string, sizeof(string), "L'Id %d n'est pas conneté.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/chariter", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /chariter [montant]");
				return 1;
			}
			if(PlayerInfo[playerid][pLocal] == 106)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Commande non autorisée a cet endroit");
				return 1;
			}
			moneys = strval(tmp);
			if(moneys < 0)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Ce n'est pas assez.");
				return 1;
			}
			if(GetPlayerMoney(playerid) < moneys)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Vous n'avez pas cette somme sur vous.");
				return 1;
			}
			SafeGivePlayerMoney(playerid, -moneys);
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "%s Merci pour cette donation de, $%d.",sendername, moneys);
			printf("%s", string);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			SendClientMessage(playerid, COLOR_GRAD1, string);
			PayLog(string);
		}
		return 1;
	}
//-------------------------[AuthorizeTactical]----------------------------
	if(strcmp(cmd, "/tactiqueon", true) == 0)
	{
		if(PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pRank] >= 5)
		{
			authorizetactical = 1;
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "* QG: Le Directeur %s à autorisé l'uniforme tactique *", sendername);
			SendRadioMessage(2, TEAM_BLUE_COLOR, string);
		}
		return 1;
	}


	if(strcmp(cmd, "/tactiqueoff", true) == 0)
    {
		if(PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pRank] >= 5)
		{
        	authorizetactical = 0;
	 		GetPlayerName(playerid, sendername, sizeof(sendername));
        	format(string, sizeof(string), "* QG: Le Directeur %s n'autorise plus l'uniforme tactique",sendername);
			SendRadioMessage(2, TEAM_BLUE_COLOR, string);
		}
		return 1;
	}

	if(strcmp(cmd, "/tactique", true) == 0)
	{
        if(PlayerInfo[playerid][pMember]==2||PlayerInfo[playerid][pLeader] == 2)
		{
			if(tactical[playerid] == 0)
            {
				if(authorizetactical == 1)
				{
					if (PlayerToPoint(3, playerid,252.4938,73.4559,1003.6406) || PlayerToPoint(3,playerid,258.6202,79.8815,1003.6406) || PlayerInfo[playerid][pLocal] != 255)
					{

					    SafeResetPlayerWeapons(playerid);
						tactical[playerid] = 1;
						SetPlayerSkin(playerid, 287);

						SafeGivePlayerWeapon(playerid, 31, 500);
						SafeGivePlayerWeapon(playerid, 23, 150);
						SafeGivePlayerWeapon(playerid, 27, 250);

						SetPlayerArmour(playerid, 100);
						SetPlayerHealth(playerid, 100);

						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string,sizeof(string), " %s prend l'uniforme de tactique dans son casier et l'enfile.", sendername);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}
				else
				{
				SendClientMessage(playerid, COLOR_GREY, "L'équipement tactique n'est pas autorisé!");
				}
			}
			else
			{
				if(PlayerInfo[playerid][pLeader] == 2) { SetPlayerSkin(playerid, 286); }
				if(PlayerInfo[playerid][pRank]==5) { SetPlayerSkin(playerid, 163); }
				if(PlayerInfo[playerid][pRank]==4) { SetPlayerSkin(playerid, 163); }
				if(PlayerInfo[playerid][pRank]==3) { SetPlayerSkin(playerid, 163); }
				if(PlayerInfo[playerid][pRank]==2) { SetPlayerSkin(playerid, 163); }
				if(PlayerInfo[playerid][pRank]==1) { SetPlayerSkin(playerid, 163); }

				tactical[playerid] = 0;
				SafeResetPlayerWeapons(playerid);
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string,sizeof(string), " %s enleve son uniforme tactique et le range dans son casier.", sendername);
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

			}
		}
		if(!IsACop(playerid) || PlayerInfo[playerid][pLeader] > 2 || PlayerInfo[playerid][pLeader] < 2)
		{
   		    SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas du FBI!");
		}
		return 1;
	}
	//------------------------------[Une 2eme Chance Map-Icons]--------------------------------------------------------
	SetPlayerMapIcon(playerid, 27, 2485.2393,1529.5657,10.8481, 31, COLOR_YELLOW);  // Hotel
	SetPlayerMapIcon(playerid, 62, 2495.2979,-1691.1398,14.7656,  62, COLOR_YELLOW);// Crip'Z
	SetPlayerMapIcon(playerid, 11, 1727.0532,-1636.6693,20.2172, 56, COLOR_YELLOW); // ANPE
	SetPlayerMapIcon(playerid, 8, 1175.9119,-1323.1113,13.8264, 40, COLOR_YELLOW);  // Hopital
    SetPlayerMapIcon(playerid, 1, 2055.3540,-1909.3190,13.0945, 55, COLOR_YELLOW);  // Driving School
    SetPlayerMapIcon(playerid, 5, 396.2429, -2074.728, 7.835938, 25, COLOR_YELLOW);  // Fishing School
    SetPlayerMapIcon(playerid, 6, 2290.1006,2430.7295,10.8203, 30, COLOR_YELLOW);  // Police Station
    SetPlayerMapIcon(playerid, 7, 2577.5349,1325.1555,10.8203, 52, COLOR_YELLOW);  // Bank
    SetPlayerMapIcon(playerid, 8, 2385.2095,2464.1843,10.8203, 30, COLOR_YELLOW);  // FBI
    SetPlayerMapIcon(playerid, 9, 1607.3711,1815.6852,10.8203, 22, COLOR_YELLOW);  // Hospital
    SetPlayerMapIcon(playerid, 10, 1042.8492,1011.1059,11.0000, 56, COLOR_YELLOW);	// CITY HALL
    SetPlayerMapIcon(playerid, 11, 2506.9031,2120.2952,10.8398, 49, COLOR_YELLOW);	// Pig Pen
    SetPlayerMapIcon(playerid, 12, 2312.9451,-1645.0206,14.8270, 49, COLOR_YELLOW);	// Ten Green
    SetPlayerMapIcon(playerid, 13, 2454.7717,1499.6946,11.6174, 48, COLOR_YELLOW);	// Alhambra
    SetPlayerMapIcon(playerid, 14, 2008.2853,1167.5508,10.8203, 50, COLOR_YELLOW);	// Restaurant
    SetPlayerMapIcon(playerid, 15, 2362.0745,2749.2783,10.8203, 51, COLOR_YELLOW);	// Truck Place
    SetPlayerMapIcon(playerid, 16, 2236.6321,-2280.0920,13.5469, 23, COLOR_YELLOW);	// Materials Bank
    SetPlayerMapIcon(playerid, 17, 2546.5952,1972.3506,10.8203, 52, COLOR_YELLOW);	// 24/7
    SetPlayerMapIcon(playerid, 18, 2194.9373,1991.0553,12.2969, 52, COLOR_YELLOW);	// 24/7
	SetPlayerMapIcon(playerid, 26, 2247.7297,2396.1682,10.8203, 52, COLOR_YELLOW);	// 24/7
	SetPlayerMapIcon(playerid, 19, 1557.6044,990.6632,10.8203, 52, COLOR_YELLOW);	// 24/7
	SetPlayerMapIcon(playerid, 20, 2448.8418,1722.8167,10.8203, 17, COLOR_YELLOW);	// Jim' sticky ring
	SetPlayerMapIcon(playerid, 21, 2105.4858,-1806.4725,13.5547, 29, COLOR_YELLOW);	// Pizza stack
	SetPlayerMapIcon(playerid, 22, 1968.6350,2295.8726,16.4559, 54, COLOR_YELLOW);	// Gym
	SetPlayerMapIcon(playerid, 23, 1656.5238,1733.2913,10.8281, 45, COLOR_YELLOW);	// Binco
	SetPlayerMapIcon(playerid, 24, 1644.0358,2198.2336,10.8203, 27, COLOR_YELLOW);	// Mechanic Place
	SetPlayerMapIcon(playerid, 25, 2364.8940,2377.4761,10.8203, 53, COLOR_YELLOW);	// A.B.C News Place
	//------------------------------[Une 2eme Chance Map-Icons]--------------------------------------------------------
	SetPlayerMapIcon(playerid, 0, 1612.324, -2330.167, 13.5469, 38, COLOR_YELLOW);  // Spawn Point
    //SetPlayerMapIcon(playerid, 1, 2048.352, -1900.153, 13.5538, 55, COLOR_YELLOW);  // Driving School
    //--------------------------------------------------------------------------
    SetPlayerMapIcon(playerid, 1, 2128.0864,-1135.3912,25.5855, 55, COLOR_YELLOW);  // Concess 1
    SetPlayerMapIcon(playerid, 1, 537.3366,-1293.2140,17.2422, 55, COLOR_YELLOW);  // Concess 2
    SetPlayerMapIcon(playerid, 1, 2521.5544,-1524.4504,23.8365, 55, COLOR_YELLOW);  // Concess 3
    SetPlayerMapIcon(playerid, 1, 2155.0146,-1177.3333,23.8211, 55, COLOR_YELLOW);  // Concess 4
    SetPlayerMapIcon(playerid, 1, 299.1723,-1518.6627,24.6007, 55, COLOR_YELLOW);  // Concess 5
    //--------------------------------------------------------------------------
    SetPlayerMapIcon(playerid, 5, 396.2429, -2074.728, 7.835938, 25, COLOR_YELLOW);  // Fishing School
    SetPlayerMapIcon(playerid, 6, 1528.779, -1678.113, 5.890625, 30, COLOR_YELLOW);  // Police Station
    SetPlayerMapIcon(playerid, 7, 1461.695, -1011.915, 26.84375, 52, COLOR_YELLOW);  // Bank
    SetPlayerMapIcon(playerid, 8, 1518.5179,-1452.9224,14.2031, 30, COLOR_YELLOW);  // FBI
    SetPlayerMapIcon(playerid, 10, 1480.9323,-1767.7324,18.7958, 56, COLOR_YELLOW);	// CITY HALL
    SetPlayerMapIcon(playerid, 11, 2410.1682,-1220.7765,25.2978, 49, COLOR_YELLOW);	// Pig Pen
    SetPlayerMapIcon(playerid, 12, 2312.9451,-1645.0206,14.8270, 49, COLOR_YELLOW);	// Ten Green
    SetPlayerMapIcon(playerid, 13, 1831.4663,-1683.2169,13.2197, 48, COLOR_YELLOW);	// Alhambra
    SetPlayerMapIcon(playerid, 14, 1498.4476,-1582.8242,13.5469, 50, COLOR_YELLOW);	// Restaurant
    SetPlayerMapIcon(playerid, 15, 2468.4919,-2092.9902,13.5469, 51, COLOR_YELLOW);	// Truck Place
    //SetPlayerMapIcon(playerid, 16, 2146.3523,-2267.7498,14.2344, 18, COLOR_YELLOW);	// Gun Dealer Reg.
    SetPlayerMapIcon(playerid, 17, 1312.4210,-898.5630,39.5781, 52, COLOR_YELLOW);	// 24/7
    SetPlayerMapIcon(playerid, 18, 1832.4276,-1838.3896,13.5781, 52, COLOR_YELLOW);	// 24/7
	SetPlayerMapIcon(playerid, 19, 1353.6860,-1757.4297,13.5078, 52, COLOR_YELLOW);	// 24/7
	SetPlayerMapIcon(playerid, 20, 1038.0298,-1339.9967,13.7361, 17, COLOR_YELLOW);	// Jim' sticky ring
	SetPlayerMapIcon(playerid, 21, 2105.4858,-1806.4725,13.5547, 29, COLOR_YELLOW);	// Pizza stack
	SetPlayerMapIcon(playerid, 22, 2229.9011,-1721.2582,13.5613, 54, COLOR_YELLOW);	// Gym
	SetPlayerMapIcon(playerid, 23, 2244.3423,-1665.5542,15.4766, 45, COLOR_YELLOW);	// Binco
    //------------------------------[Map-Icons]--------------------------------------------------------
//-------------------------------[License]--------------------------------------------------------------------------
   if(strcmp(cmd, "/permisconduire", true) == 0)
	{
		if(IsPlayerConnected(playerid))
       	{
			if(PlayerToPoint(3.0,playerid,1490.3195,1305.6976,1093.2964))
          	{
	    		    if(PlayerInfo[playerid][pLevel] > 0)
	    		    {
	    		    	if(PlayerInfo[playerid][pCarLic] < 1)
	    		    	{
	                		if(pTest[playerid] == 0)
	                		{
	    		    			if(GetPlayerMoney(playerid) >= 2499)
	    		    			{
	    		    				SetPlayerInterior(playerid,3);
	    		    				TogglePlayerControllable(playerid, 0);
		        					GameTextForPlayer(playerid, "~r~Suivez les instructions !",5000,3);
									IO1(playerid);
									SetTimerEx("IO2", 20000, 0, "d", playerid);
									SetTimerEx("IO3", 40000, 0, "d", playerid);
									SetTimerEx("IO4", 60000, 0, "d", playerid);
									SetTimerEx("IO5", 80000, 0, "d", playerid);
									SetTimerEx("IO6", 60000, 0, "d", playerid);
									SetTimerEx("IO7", 100000, 0, "d", playerid);
								}
								else
								{
									SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas assez d'argent pour passer le test !");
									return 1;
								}
							}
							else
							{
						    	SendClientMessage(playerid, COLOR_GREY, "Vous êtes déjà en train de le passer !");
								return 1;
							}
						}
	    				else
						{
	    					SendClientMessage(playerid, COLOR_GREY, "Vous avez déjà votre permis de conduire !");
							return 1;
						}
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas le niveau requis.");
						return 1;
					}
	    		}
                return 1;
        }
        return 1;
    }
    if(strcmp(cmd, "/permisnavigation", true) == 0)
	{
		if(IsPlayerConnected(playerid))
       	{
			if(PlayerToPoint(3.0,playerid,1490.3195,1305.6976,1093.2964))
          	{
            	if(PlayerInfo[playerid][pBoatLic] == 0)
				{
				    if(GetPlayerMoney(playerid) < 4999)
				    {
				        SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas assez d'argent pour acheter le permis de navigation.");
				        return 1;
				    }
				    else
				    {
             			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Vous avez acheté le permis de navigation pour $5000");
             			SafeGivePlayerMoney(playerid, - 5000);
             			PlayerInfo[playerid][pBoatLic] = 1;
             			OnPlayerUpdate(playerid);
             		}
				}
				else
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Vous avez déjà le permis de navigation.");
					return 1;
				}
			}
		}
  		return 1;
	}
    if(strcmp(cmd, "/permisvol", true) == 0)
	{
		if(IsPlayerConnected(playerid))
       	{
			if(PlayerToPoint(3.0,playerid,1490.3195,1305.6976,1093.2964))
          	{
            	if(PlayerInfo[playerid][pBoatLic] == 0)
				{
				    if(GetPlayerMoney(playerid) < 29999)
				    {
				        SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas assez d'argent pour acheter le permis vol.");
				        return 1;
				    }
				    else
				    {
             			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Vous avez acheté le permis vol pour $30.000");
             			SafeGivePlayerMoney(playerid, - 30000);
             			PlayerInfo[playerid][pFlyLic] = 1;
             			OnPlayerUpdate(playerid);
             		}
				}
				else
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Vous avez déjà le permis vol.");
					return 1;
				}
			}
		}
  		return 1;
	}

	if(strcmp(cmd, "/permisarme", true) == 0)
	{
		if(IsPlayerConnected(playerid))
       	{
			if(PlayerToPoint(3.0,playerid,250.0484,66.2467,1003.6406))
          	{
            	if(PlayerInfo[playerid][pGunLic] == 0)
				{
				    if(GetPlayerMoney(playerid) < 20000)
				    {
				        SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas assez d'argent pour acheter le permis d'arme");
				        return 1;
				    }
				    else
				    {
             			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Vous avez acheté le permis d'arme pour $20 000");
             			SafeGivePlayerMoney(playerid, - 20000);
             			PlayerInfo[playerid][pGunLic] = 1;
             			OnPlayerUpdate(playerid);
             		}
				}
				else
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Vous avez déjà le permis d'arme");
					return 1;
				}
			}
		}
  		return 1;
	}

/*	if(strcmp(cmd, "/buyfishing", true) == 0)
	{
		if(IsPlayerConnected(playerid))
       	{
			if(PlayerToPoint(3.0,playerid,396.2429,-2074.728,7.835938))
          	{
            	if(PlayerInfo[playerid][pFishLic] == 0)
				{
				    if(GetPlayerMoney(playerid) < 5000)
				    {
				        SendClientMessage(playerid, COLOR_GREY, "You don't have enough money for a fishing license");
				        return 1;
				    }
				    else
				    {
             			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You bought a fishing license for $5, 000");
             			SafeGivePlayerMoney(playerid, - 5000);
             			PlayerInfo[playerid][pFishLic] = 1;
             			OnPlayerUpdate(playerid);
             		}
				}
				else
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, " You already own a fishing license");
					return 1;
				}
			}
		}
  		return 1;
	}*/
//-------------------------------[Stats]--------------------------------------------------------------------------
	if (strcmp(cmd, "/stats", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (gPlayerLogged[playerid] != 0)
			{
				ShowStats(playerid,playerid);
				GetPlayerName(playerid, sendername, sizeof(sendername));
			    format(string, sizeof(string), " %s prend son agenda et verifie ses informations personnelles.", sendername);
			    ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Vous devez être connecté!");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/dn", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
				new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz-2);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé à utiliser cette commande!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/up", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
				new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz+2);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé à utiliser cette commande!");
			}
		}
		return 1;
	}
	if (strcmp(cmd, "/fly", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
				new Float:px, Float:py, Float:pz, Float:pa;
				GetPlayerFacingAngle(playerid,pa);
				if(pa >= 0.0 && pa <= 22.5) //n1
				{
					GetPlayerPos(playerid, px, py, pz);
					SetPlayerPos(playerid, px, py+30, pz+5);
				}
				if(pa >= 332.5 && pa < 0.0) //n2
				{
					GetPlayerPos(playerid, px, py, pz);
					SetPlayerPos(playerid, px, py+30, pz+5);
				}
				if(pa >= 22.5 && pa <= 67.5) //nw
				{
					GetPlayerPos(playerid, px, py, pz);
					SetPlayerPos(playerid, px-15, py+15, pz+5);
				}
				if(pa >= 67.5 && pa <= 112.5) //w
				{
					GetPlayerPos(playerid, px, py, pz);
					SetPlayerPos(playerid, px-30, py, pz+5);
				}
				if(pa >= 112.5 && pa <= 157.5) //sw
				{
					GetPlayerPos(playerid, px, py, pz);
					SetPlayerPos(playerid, px-15, py-15, pz+5);
				}
				if(pa >= 157.5 && pa <= 202.5) //s
				{
					GetPlayerPos(playerid, px, py, pz);
					SetPlayerPos(playerid, px, py-30, pz+5);
				}
				if(pa >= 202.5 && pa <= 247.5)//se
				{
					GetPlayerPos(playerid, px, py, pz);
					SetPlayerPos(playerid, px+15, py-15, pz+5);
				}
				if(pa >= 247.5 && pa <= 292.5)//e
				{
					GetPlayerPos(playerid, px, py, pz);
					SetPlayerPos(playerid, px+30, py, pz+5);
				}
				if(pa >= 292.5 && pa <= 332.5)//e
				{
					GetPlayerPos(playerid, px, py, pz);
					SetPlayerPos(playerid, px+15, py+15, pz+5);
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé à utiliser cette commande!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/lt", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
				new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly+2, slz);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé à utiliser cette commande!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/rt", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
				new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly-2, slz-2);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé à utiliser cette commande!");
			}
		}
		return 1;
	}
//-------------------------------[Check]--------------------------------------------------------------------------
	if(strcmp(cmd, "/verifier", true) == 0 || strcmp(cmd, "/check", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /verifier [playerid/PartOfName]");
					return 1;
				}
				//giveplayerid = strval(tmp);
	            giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
						ShowStats(playerid,giveplayerid);
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Ce joueur n'est pas connecté!");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé à utiliser cette commande!");
			}
		}
		return 1;
	}
    if(strcmp(cmd, "/number", true) ==0 || strcmp(cmd, "/numero", true) == 0 || strcmp(cmd, "/annuaire", true) == 0)
	//if (strcmp(cmd, "/numero", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pPhoneBook] == 1)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /numero [playerid/PartOfName/Nom]");
					SendClientMessage(playerid, COLOR_GRAD1, "/numero urgence, bus, taxi, news, mecanicien, pizza")
					SendClientMessage(playerid, COLOR_GRAD1, "/annuaireservice pour la liste des numéros utiles.");
					return 1;
				}
				//giveplayerid = strval(tmp);
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        if(PlayerInfo[giveplayerid][pHideNumber] == 1)
				        {
							GetPlayerName(giveplayerid, sendername, sizeof(sendername));
							format(string, 256, "Nom: %s, Tel: Caché",sendername);
							SendClientMessage(playerid, COLOR_GRAD1, string);
						}
						else
						{
						    GetPlayerName(giveplayerid, sendername, sizeof(sendername));
							format(string, 256, "Nom: %s, Tel: %d",sendername,PlayerInfo[giveplayerid][pPnumber]);
							SendClientMessage(playerid, COLOR_GRAD1, string);
						}
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Ce joueur n'est pas connecté!");
				}
				if(strcmp(tmp,"taxi", true) == 0)
                {
                    SendClientMessage(playerid, COLOR_GREEN,"Taxi, Ph:444");
                    return 1;
                }
                if(strcmp(tmp,"bus", true) == 0)
                {
                    SendClientMessage(playerid, COLOR_GREEN,"Bus, Ph:222");
                    return 1;
                }
                if(strcmp(tmp,"urgence", true) == 0 || strcmp(tmp,"urgences", true) == 0 || strcmp(tmp,"police", true) == 0)
                {
                    SendClientMessage(playerid, COLOR_GREEN,"Urgences, Ph:911");
                    return 1;
                }
                if(strcmp(tmp,"pizza", true) == 0)
                {
                    SendClientMessage(playerid, COLOR_GREEN,"Urgences, Ph:111");
                    return 1;
                }
                if(strcmp(tmp,"mecanicien", true) == 0 || strcmp(tmp,"mecaniciens", true) == 0)
                {
                    SendClientMessage(playerid, COLOR_GREEN,"Mechanic, Ph:555");
                    return 1;
                }
                if(strcmp(tmp,"news", true) == 0 || strcmp(tmp,"abcstudio", true) == 0)
                {
                    SendClientMessage(playerid, COLOR_GREEN,"ABC Sutio, Ph:3900");
                    return 1;
                }
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Vous n'avez pas d'annuaire!");
			}
		}
		return 1;
	}
//-------------------------------[LevelUp]--------------------------------------------------------------------------
	if (strcmp(cmd, "/levelup", true) == 0 || strcmp(cmd, "/niveausup", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (gPlayerLogged[playerid] != 0)
			{
				/*PlayerInfo[playerid][pCash] = GetPlayerMoney(playerid);*/
				if(PlayerInfo[playerid][pLevel] >= 0)
				{
					new nxtlevel = PlayerInfo[playerid][pLevel]+1;
					/*new costlevel = nxtlevel*levelcost;//10k for testing purposes*/
					new expamount = nxtlevel*levelexp;
					new infostring[256];
					/*if(GetPlayerMoney(playerid) < costlevel)
					{
						format(infostring, 256, "   You do not have enough Cash ($%d)!",costlevel);
						SendClientMessage(playerid, COLOR_GRAD1, infostring);
						return 1;
					}*/
					if (PlayerInfo[playerid][pExp] < expamount)
					{
						format(infostring, 256, "   Vous avez besoin de %d points de respect, vous en avez [%d]",expamount,PlayerInfo[playerid][pExp]);
						SendClientMessage(playerid, COLOR_GRAD1, infostring);
						return 1;
					}
					else
					{
						format(string, sizeof(string), "~g~Niveau Superieur Atteint~n~~w~Vous etes maintenant niveau %d", nxtlevel);
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						PlayerPlayMusic(playerid);
						/*SafeGivePlayerMoney(playerid, (-costlevel));*/
						PlayerInfo[playerid][pLevel]++;
						if(PlayerInfo[playerid][pDonateRank] > 0)
						{
						    PlayerInfo[playerid][pExp] -= expamount;
						    new total = PlayerInfo[playerid][pExp];
						    if(total > 0)
						    {
						        PlayerInfo[playerid][pExp] = total;
						    }
						    else
						    {
						        PlayerInfo[playerid][pExp] = 0;
						    }
						}
						else
						{
							PlayerInfo[playerid][pExp] -= expamount;
						}
						PlayerInfo[playerid][gPupgrade] = PlayerInfo[playerid][gPupgrade]+2;
						GameTextForPlayer(playerid, string, 5000, 1);
						format(infostring, 256, "   Vous avez acheté le Niveau %d. Tapez /upgrade.", nxtlevel);
						SendClientMessage(playerid, COLOR_GRAD1, infostring);
						format(infostring, 256, "   Vous avez %d points d'amélioration inutilisé.",PlayerInfo[playerid][gPupgrade]);
						SendClientMessage(playerid, COLOR_GRAD2, infostring);
					}
				}
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Vous devez être connecté!");
			}
		}
		return 1;
	}
	if (strcmp(cmd, "/resetupgrades", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (gPlayerLogged[playerid] == 0)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Vous devez être connecté!");
				return 1;
			}
			if (GetPlayerMoney(playerid) < 500000)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Vous n'avez pas assez d'argent, il vous faut $50000 !");
				return 1;
			}
			if (PlayerInfo[playerid][pLevel] < 2)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Vous devez êtres niveau 2 pour pouvoir utiliser cette commande!");
				return 1;
			}
			PlayerInfo[playerid][gPupgrade] = (PlayerInfo[playerid][pLevel]-1)*2;
			PlayerInfo[playerid][pSHealth] = 0.0;
			PlayerInfo[playerid][pAlcoholPerk] = 0;
			PlayerInfo[playerid][pDrugPerk] = 0;
			PlayerInfo[playerid][pMiserPerk] = 0;
			PlayerInfo[playerid][pPainPerk] = 0;
			PlayerInfo[playerid][pTraderPerk] = 0;
			SafeGivePlayerMoney(playerid,-50000);
			PlayerPlaySound(giveplayerid, 1052, 0.0, 0.0, 0.0);
			format(string, 256, "   Vous avez %d points d'amélioration inutilisé!",PlayerInfo[playerid][gPupgrade]);
			SendClientMessage(playerid, COLOR_GRAD2, string);
		}
		return 1;
	}
	/*----------------------------------[Areset]----------------------------------*/
	if (strcmp(cmd, "/areset", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /areset [playerid/PartOfName]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
				if(IsPlayerConnected(giveplayerid))
		    	{
					if (gPlayerLogged[giveplayerid] == 0)
					{
						SendClientMessage(playerid, COLOR_GRAD1, "   Player not Logged in !");
						return 1;
					}
					PlayerInfo[giveplayerid][gPupgrade] = (PlayerInfo[giveplayerid][pLevel]-1)*2;
					PlayerInfo[giveplayerid][pSHealth] = 0.0;
					PlayerInfo[giveplayerid][pAlcoholPerk] = 0;
					PlayerInfo[giveplayerid][pDrugPerk] = 0;
					PlayerInfo[giveplayerid][pMiserPerk] = 0;
					PlayerInfo[giveplayerid][pPainPerk] = 0;
					PlayerInfo[giveplayerid][pTraderPerk] = 0;
	                SendClientMessage(giveplayerid, COLOR_GRAD2, " Un admin vous a remis vos points d'upgrade !");
					format(string, 256, "   Vous avez %d points d'amélioration inutilisé",PlayerInfo[giveplayerid][gPupgrade]);
					SendClientMessage(giveplayerid, COLOR_GRAD2, string);
					GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					format(string, 256, "  Vous avez remis a %s ses points d'upgrade !",giveplayer);
					SendClientMessage(playerid, COLOR_GRAD2, string);
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "   You are not authorized to use that command!");
			}
		}
		return 1;
	}
	if (strcmp(cmd, "/acheterarme", true) == 0 || strcmp(cmd, "/acheter arme", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(GetPlayerMoney(playerid) < 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas assez d'argent sur vous!");
			    return 1;
			}
			new gun;
			new gunid[16];
			new gunstring1[256];
			new gunstring2[256];
			new gunstring3[256];
			new gunstring4[256];
			new gunstring5[256];
			new infostring[256];
			new guncharge;
			new ammocharge;
			new location = PlayerInfo[playerid][pLocal];
			if(location == 99 || location == 100 || location == 102)
			{
			    if(BizzInfo[location-99][bProducts] <= 0)
			    {
			        GameTextForPlayer(playerid, "~r~Stock Epuise", 5000, 1);
					return 1;
			    }
				new mod = 100;
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					format(string, sizeof(string), "USAGE: /acheterarme [NuméroArme] [MontantMunition]");
					SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
					SendClientMessage(playerid, COLOR_WHITE,"** Arme & Munition **");
					SendClientMessage(playerid, COLOR_GRAD2,string);
					format(gunstring1, 256, "Armes: parachute ($%d) clubgolf ($%d) baguette ($%d) battebaseball ($%d) pelle ($%d) cannebillard ($%d)",
					GunPrice[0][0]/100*mod,GunPrice[1][0]/100*mod,GunPrice[2][0]/100*mod,GunPrice[3][0]/100*mod,GunPrice[4][0]/100*mod,GunPrice[5][0]/100*mod,GunPrice[6][0]/100*mod);
					SendClientMessage(playerid, COLOR_GRAD3, gunstring1);
					format(gunstring2, 256, "Armes: sextoymauve ($%d) Sextoyblanc ($%d) longsextoyblanc ($%d) sextoyblanc2 ($%d) fleurs ($%d) cane",
					GunPrice[7][0]/100*mod,GunPrice[8][0]/100*mod,GunPrice[9][0]/100*mod,GunPrice[10][0]/100*mod,GunPrice[11][0]/100*mod,GunPrice[12][0]/100*mod);
					SendClientMessage(playerid, COLOR_GRAD3, gunstring2);
					format(gunstring3, 256, "Armes: pistolet ($%d) deagle ($%d) mp5 ($%d)",
					GunPrice[13][0]/100*mod,GunPrice[14][0]/100*mod,GunPrice[15][0]/100*mod,GunPrice[16][0]/100*mod,GunPrice[17][0]/100*mod,GunPrice[18][0]/100*mod);
					SendClientMessage(playerid, COLOR_GRAD3, gunstring3);
					format(gunstring4, 256, "Armes: shotgun ($%d) ak47 ($%d) m4 ($%d) fusilchasse ($%d)",
					GunPrice[19][0]/100*mod,GunPrice[20][0]/100*mod,GunPrice[21][0]/100*mod,GunPrice[22][0]/100*mod,GunPrice[23][0]/100*mod,GunPrice[24][0]/100*mod);
					SendClientMessage(playerid, COLOR_GRAD3, gunstring4);
					format(gunstring5, 256, "Armes: munitionpistolet ($%d) munitionpompe ($%d) munitionsmg ($%d) munitionasaut ($%d) munitionfusil ($%d)",
					GunPrice[25][0],GunPrice[26][0],GunPrice[27][0],GunPrice[28][0],GunPrice[29][0]);
					SendClientMessage(playerid, COLOR_GRAD3, gunstring5);
					SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
					return 1;
				}
				strmid(gunid, tmp, 0, strlen(cmdtext), 255);
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					format(string, sizeof(string), "USAGE: /acheterarme [NuméroArme] [MontantMunition]");
					return 1;
				}
				new ammo = strval(tmp);
				if(ammo < 1 || ammo > 999) { SendClientMessage(playerid, COLOR_GREY, "Munition pas en desous de 1 et au desus de 999!"); return 1; }
				if (strcmp(gunid, "parachute", true, strlen(gunid)) == 0)
				{
					gun = 46;
					guncharge = GunPrice[0][0]/100*mod;
					ammocharge = 0;
				}
				else if (strcmp(gunid, "clubgolf", true, strlen(gunid)) == 0)
				{
					gun = 2; guncharge = GunPrice[1][0]/100*mod; ammocharge = 0;
					//PlayerInfo[playerid][pGun1] = 2; PlayerInfo[playerid][pAmmo1] = 1;
				}
				else if (strcmp(gunid, "baguette", true, strlen(gunid)) == 0)
				{
					gun = 3; guncharge = GunPrice[2][0]/100*mod; ammocharge = 0;
					//PlayerInfo[playerid][pGun1] = 3; PlayerInfo[playerid][pAmmo1] = 1;
				}
				else if (strcmp(gunid, "battebaseball", true, strlen(gunid)) == 0)
				{
					gun = 5; guncharge = GunPrice[4][0]/100*mod; ammocharge = 0;
					//PlayerInfo[playerid][pGun1] = 5; PlayerInfo[playerid][pAmmo1] = 1;
				}
				else if (strcmp(gunid, "pelle", true, strlen(gunid)) == 0)
				{
					gun = 6; guncharge = GunPrice[5][0]/100*mod; ammocharge = 0;
					//PlayerInfo[playerid][pGun1] = 6; PlayerInfo[playerid][pAmmo1] = 1;
				}
				else if (strcmp(gunid, "cannebillard", true, strlen(gunid)) == 0)
				{
					gun = 7; guncharge = GunPrice[6][0]/100*mod; ammocharge = 0;
					//PlayerInfo[playerid][pGun1] = 7; PlayerInfo[playerid][pAmmo1] = 1;
				}
				else if (strcmp(gunid, "sextoymauve", true, strlen(gunid)) == 0)
				{
					gun = 10; guncharge = GunPrice[7][0]/100*mod; ammocharge = 0;
					//PlayerInfo[playerid][pGun1] = 10; PlayerInfo[playerid][pAmmo1] = 1;
				}
				else if (strcmp(gunid, "sextoyblanc", true, strlen(gunid)) == 0)
				{
					gun = 11; guncharge = GunPrice[8][0]/100*mod; ammocharge = 0;
					//PlayerInfo[playerid][pGun1] = 11; PlayerInfo[playerid][pAmmo1] = 1;
				}
				else if (strcmp(gunid, "longsextoyblanc", true, strlen(gunid)) == 0)
				{
					gun = 12; guncharge = GunPrice[9][0]/100*mod; ammocharge = 0;
					//PlayerInfo[playerid][pGun1] = 12; PlayerInfo[playerid][pAmmo1] = 1;
				}
				else if (strcmp(gunid, "sextoyblanc2", true, strlen(gunid)) == 0)
				{
					gun = 13; guncharge = GunPrice[10][0]/100*mod; ammocharge = 0;
					//PlayerInfo[playerid][pGun1] = 13; PlayerInfo[playerid][pAmmo1] = 1;
				}
				else if (strcmp(gunid, "fleurs", true, strlen(gunid)) == 0)
				{
					gun = 14; guncharge = GunPrice[11][0]/100*mod; ammocharge = 0;
					//PlayerInfo[playerid][pGun1] = 14; PlayerInfo[playerid][pAmmo1] = 1;
				}
				else if (strcmp(gunid, "cane", true, strlen(gunid)) == 0)
				{
					gun = 15; guncharge = GunPrice[12][0]/100*mod; ammocharge = 0;
					//PlayerInfo[playerid][pGun1] = 15; PlayerInfo[playerid][pAmmo1] = 1;
				}
				else if (strcmp(gunid, "pistolet", true, strlen(gunid)) == 0)
				{
					gun = 23; guncharge = GunPrice[13][0]/100*mod; ammocharge = GunPrice[25][0]*ammo;
					//PlayerInfo[playerid][pGun2] = 23; PlayerInfo[playerid][pAmmo2] = ammo;
				}
				else if (strcmp(gunid, "deagle", true, strlen(gunid)) == 0)
				{
					gun = 24; guncharge = GunPrice[15][0]/100*mod; ammocharge = GunPrice[25][0]*ammo;
					//PlayerInfo[playerid][pGun2] = 24; PlayerInfo[playerid][pAmmo2] = ammo;
				}
				else if (strcmp(gunid, "mp5", true, strlen(gunid)) == 0)
				{
					gun = 29; guncharge = GunPrice[18][0]/100*mod; ammocharge = GunPrice[27][0]*ammo;
					//PlayerInfo[playerid][pGun3] = 29; PlayerInfo[playerid][pAmmo3] = ammo;
				}
				else if (strcmp(gunid, "shotgun", true, strlen(gunid)) == 0)
				{
					gun = 25; guncharge = GunPrice[19][0]/100*mod; ammocharge = GunPrice[26][0]*ammo;
					//PlayerInfo[playerid][pGun3] = 25; PlayerInfo[playerid][pAmmo3] = ammo;
				}
				else if (strcmp(gunid, "ak47", true, strlen(gunid)) == 0)
				{
					gun = 30; guncharge = GunPrice[22][0]/100*mod; ammocharge = GunPrice[28][0]*ammo;
					//PlayerInfo[playerid][pGun4] = 30; PlayerInfo[playerid][pAmmo4] = ammo;
				}
				else if (strcmp(gunid, "m4", true, strlen(gunid)) == 0)
				{
					gun = 31; guncharge = GunPrice[23][0]/100*mod; ammocharge = GunPrice[28][0]*ammo;
					//PlayerInfo[playerid][pGun4] = 31; PlayerInfo[playerid][pAmmo4] = ammo;
				}
				else if (strcmp(gunid, "fusilchasse", true, strlen(gunid)) == 0)
				{
					gun = 33; guncharge = GunPrice[24][0]/100*mod; ammocharge = GunPrice[29][0]*ammo;
					//PlayerInfo[playerid][pGun4] = 33; PlayerInfo[playerid][pAmmo4] = ammo;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD6, "Cette arme n'existe pas.");
					return 1;
				}
				if((guncharge+ammocharge) > GetPlayerMoney(playerid))
				{
					format(infostring, 256, "Vous n'avez pas $%d !",guncharge+ammocharge);
					SendClientMessage(playerid, COLOR_GRAD3, infostring);
					return 1;
				}
				if(GetPlayerMoney(playerid) < (guncharge+ammocharge))
				{
				    SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez pas achetez ça!");
				    return 1;
				}
				new payout = guncharge + ammocharge;
				format(infostring, 256, "Vous avez acheté un %s avec %d munitions pour $%d",gunid,ammo,payout);
				SendClientMessage(playerid, COLOR_GRAD3, infostring);
				if(location == 102 && IsACop(playerid)) { }
				else { SafeGivePlayerMoney(playerid, - payout); }
				BizzInfo[location-99][bTill] += payout;
				ExtortionBiz(location-99, payout);
				BizzInfo[location-99][bProducts]--;
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				SafeGivePlayerWeapon(playerid, gun, ammo);
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "%s a acheté pour $%d au magasin %d", sendername, payout, location-99);
				printf("%s", string);
				PayLog(string);
			}
			else
			{
			    SendClientMessage(playerid, COLOR_WHITE,"Vous n'êtes pas dans un magasin.");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/louerchambre", true) == 0 || strcmp(cmd, "/finlocationchambre", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(BizzInfo[6][bProducts] == 1)
			{
				GameTextForPlayer(playerid, "~r~Plus de chambre libre", 5000, 1);
				return 1;
			}
			if(GetPlayerMoney(playerid) <  BizzInfo[6][bEntranceCost])
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Vous n'avez pas assez d'argent!");
				return 1;
			}
			if (GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,2217.3882,-1146.9778,1025.7969) && PlayerInfo[playerid][pHotel] == 0)
			{
			    SendClientMessage(playerid, COLOR_WHITE, "Tu viens de louer une chambre !");
			    SendClientMessage(playerid, COLOR_WHITE, "Tu peux toujours delouer ta chambre en faisant /louerchambre.");
			    PlayerInfo[playerid][pHotel] = 1;
			    SafeGivePlayerMoney(playerid,-BizzInfo[6][bEntranceCost]);
				format(string, sizeof(string), "~w~N'oubliez pas ~r~/louerchambre~n~~g~Pour delouer votre chambre");
				GameTextForPlayer(playerid, string, 5000, 3);
				BizzInfo[6][bTill] += BizzInfo[6][bEntranceCost];
				ExtortionSBiz(6, BizzInfo[6][bEntranceCost]);
				BizzInfo[6][bProducts]--;
                OnPropUpdate();
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			}
			else if (GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,2217.3882,-1146.9778,1025.7969) && PlayerInfo[playerid][pHotel] == 1)
			{
			    SendClientMessage(playerid, COLOR_WHITE, "Tu viens de délouer une chambre !");
			    SendClientMessage(playerid, COLOR_WHITE, "Reviens quand tu veux.");
			    PlayerInfo[playerid][pHotel] = 0;
			}
			else
			{
				SendClientMessage(playerid, COLOR_RED, "Tu n'es pas a l'hotel. (/louermaison pour louer une maison)")
			}
		}//not connected
	    return 1;
	}
	if (strcmp(cmd, "/upgrade", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new gunid[16];
			new infostring[256];
			new upgradepoints = PlayerInfo[playerid][gPupgrade] - 1;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				format(string, sizeof(string), "USAGE: /upgrade [nomamelio] (Vous avez %d point d'amelio)",upgradepoints);
				SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
				SendClientMessage(playerid, COLOR_WHITE,"** Ameliorations **");
				SendClientMessage(playerid, COLOR_GRAD2,string);
				if(PlayerInfo[playerid][pLevel] == 2)
				{
					SendClientMessage(playerid, COLOR_GRAD3, "Avantage Niveau 2: alcoolique, dependantdrogue");
				}
				else if(PlayerInfo[playerid][pLevel] == 3)
				{
					SendClientMessage(playerid, COLOR_GRAD3, "Avantage Niveau 3: alcoolique, dependantdrogue, avare");
				}
				else if(PlayerInfo[playerid][pLevel] == 3)
				{
					SendClientMessage(playerid, COLOR_GRAD3, "Avantage Niveau 4: alcoolique, dependantdrogue, avare, commercant");
				}
				else if(PlayerInfo[playerid][pLevel] >= 5)
				{
					SendClientMessage(playerid, COLOR_GRAD3, "Avantage Niveau 5: alcoolique, dependantdrogue, avare, commercant, antidouleurs");
				}
				SendClientMessage(playerid, COLOR_GRAD5, "Santé Supplémentaire: sante");
				SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
				return 1;
			}
			strmid(gunid, tmp, 0, strlen(cmdtext), 255);
			if (PlayerInfo[playerid][gPupgrade] > 1)
			{
				if (PlayerInfo[playerid][pLevel] >= 1 && (strcmp(gunid, "sante", true, strlen(gunid)) == 0))
				{
					if (PlayerInfo[playerid][pSHealth] < 50)
					{
						PlayerInfo[playerid][pSHealth] = PlayerInfo[playerid][pSHealth]+5.0;
						format(infostring, 256, "Nouvelle Amélioration: Vous allez maintenant réaparaitre avec %.2f Vie (+5)",PlayerInfo[playerid][pSHealth]+50);
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD6, "Cette amélioration est au maximum");
						return 1;
					}
				}
				else if (PlayerInfo[playerid][pLevel] >= 2 && (strcmp(gunid, "alcoolique", true, strlen(gunid)) == 0))
				{
					if (PlayerInfo[playerid][pAlcoholPerk] < 3)
					{
						PlayerInfo[playerid][pAlcoholPerk] += 1;
						format(infostring, 256, "Nouvelle Amélioration: Votre niveau d'Alcoolisme est de %d.",PlayerInfo[playerid][pAlcoholPerk]);
						PlayerInfo[playerid][gPupgrade]--;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD6, "Votre Alcoolisme est au maximum!");
						return 1;
					}
				}
				else if (PlayerInfo[playerid][pLevel] >= 2 && (strcmp(gunid, "dependantdrogue", true, strlen(gunid)) == 0))
				{
					if (PlayerInfo[playerid][pDrugPerk] < 3)
					{
						PlayerInfo[playerid][pDrugPerk] += 1;
						format(infostring, 256, "Nouvelle Amélioration: Votre niveau de Dependance à la Drogue est de %d.",PlayerInfo[playerid][pDrugPerk]);
						PlayerInfo[playerid][gPupgrade]--;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD6, "Votre Dépendance à la drogue est au maximum!");
						return 1;
					}
				}
				else if (PlayerInfo[playerid][pLevel] >= 3 && (strcmp(gunid, "avare", true, strlen(gunid)) == 0))
				{
					if (PlayerInfo[playerid][pMiserPerk] < 3)
					{
						PlayerInfo[playerid][pMiserPerk] += 1;
						format(infostring, 256, "Nouvelle Amélioration: Votre niveau d'Avarisse est de %d.",PlayerInfo[playerid][pMiserPerk]);
						PlayerInfo[playerid][gPupgrade]--;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD6, "Votre niveau d'Avarisse est au maximum!");
						return 1;
					}
				}
				else if (PlayerInfo[playerid][pLevel] >= 4 && (strcmp(gunid, "commercant", true, strlen(gunid)) == 0))
				{
					if (PlayerInfo[playerid][pTraderPerk] < 3)
					{
						PlayerInfo[playerid][pTraderPerk] += 1;
						format(infostring, 256, "Nouvelle Amélioration: Votre niveau de Commerçant est de %d.",PlayerInfo[playerid][pTraderPerk]);
						PlayerInfo[playerid][gPupgrade]--;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD6, "Votre niveau de Commerçant est au maximum!");
						return 1;
					}
				}
				else if (PlayerInfo[playerid][pLevel] >= 5 && (strcmp(gunid, "antidouleurs", true, strlen(gunid)) == 0))
				{
					if (PlayerInfo[playerid][pPainPerk] < 3)
					{
						PlayerInfo[playerid][pPainPerk] += 1;
						format(infostring, 256, "Nouvelle Amélioration: Votre niveau de douleur est de %d.",PlayerInfo[playerid][pPainPerk]);
						PlayerInfo[playerid][gPupgrade]--;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD6, "Votre niveau de douleur est au maximum!");
						return 1;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD6, "Amélioration inconnue");
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD6, "Vous avez 0 point d'amélioration");
				return 1;
			}
			SendClientMessage(playerid, COLOR_GRAD6, infostring);
			PlayerInfo[playerid][gPupgrade]--;
		}
		return 1;
	}

//-------------------------------[Login]--------------------------------------------------------------------------
	if (strcmp(cmd, "/ident", true) ==0 || strcmp(cmd, "/i", true) ==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        new tmppass[64];
			if(gPlayerLogged[playerid] == 1)
			{
				SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "SERVER: Vous êtes déjà connecté.");
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "USAGE: (/i)dent [motdepasse]");
				return 1;
			}
			strmid(tmppass, tmp, 0, strlen(cmdtext), 255);
			//Encrypt(tmppass);
			OnPlayerLogin(playerid,tmppass);
		}
		return 1;
	}

	//-----------Register---------------
	if (strcmp(cmd, "/enregistrer", true) ==0 )
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 1)
			{
				SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "SERVER: Vous êtes déjà connecté.");
				return 1;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "users/%s.ini", sendername);
			new File: hFile = fopen(string, io_read);
			if (hFile)
			{
				SendClientMessage(playerid, COLOR_YELLOW, "Ce nom est déjà pris, choisissez en un autre.");
				fclose(hFile);
				return 1;
			}
	        new tmppass[64];
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /enregistrer [motdepasse]");
				return 1;
			}
			strmid(tmppass, tmp, 0, strlen(cmdtext), 255);
			//Encrypt(tmppass);
			OnPlayerRegister(playerid,tmppass);
		}
		return 1;
	}
//----------------------------------[ooc]-----------------------------------------------
	/*if(strcmp(cmd, "/admin", true) == 0 || strcmp(cmd, "/say", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   You havent logged in yet !");
	            return 1;
	        }
			if ((noooc) && PlayerInfo[playerid][pAdmin] < 1)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   The OOC channel has been disabled by an Admin !");
				return 1;
			}
			if(PlayerInfo[playerid][pMuted] == 1)
			{
				SendClientMessage(playerid, TEAM_CYAN_COLOR, "   You can't speak, you have been silenced !");
				return 1;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/o)oc [ooc chat]");
				return 1;
			}
			format(string, sizeof(string), "(( %s: %s ))", sendername, result);
			OOCOff(COLOR_OOC,string);
			printf("%s", string);
		}
		return 1;
	}*/
	if(strcmp(cmd, "/noooc", true) == 0 || strcmp(cmd, "/togooc", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 2 && (!noooc))
			{
				noooc = 1;
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "Le canal OOC a été désactivé par %s!", sendername);
				ABroadCast(COLOR_RED,string,1);
			}
			else if (PlayerInfo[playerid][pAdmin] >= 2 && (noooc))
			{
				noooc = 0;
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "Le canal OOC a été activé par %s!", sendername);
				ABroadCast(COLOR_RED,string,1);
			}
			else
			{
				SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé a utiliser cette commande!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/speedo", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(gSpeedo[playerid] == 1)
			{
		    	gSpeedo[playerid] = 0;
			    SendClientMessage(playerid,COLOR_BLUE,"Speedo désactivé");
			}
			else
			{
			    gSpeedo[playerid] = 1;
			    SendClientMessage(playerid,COLOR_BLUE,"Speedo activé");
			}
		}
		return 1;
	}
    if(strcmp(cmd, "/togtw", true) == 0 || strcmp(cmd, "/togtalkiewalkie", true) == 0 || strcmp(cmd, "/activertalkie", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pWT] == 1)
	    	{
	    	    if(PlayerInfo[playerid][pWTc] == 0) {SendClientMessage(playerid, COLOR_GRAD2, "Votre Talkie Walkie a déja été désactivé !"); return true;}
				PlayerInfo[playerid][pWTc] = 0;
				SendClientMessage(playerid, COLOR_GRAD2, "Talkie Walkie désactivé !");
				SendClientMessage(playerid, COLOR_GRAD2, "Utilisez /freq(uence) pour réactiver votre Talkie Walkie !");
			}
			else {SendClientMessage(playerid, COLOR_GRAD2, "   Vous n'avez pas de Talkie Walkie!");}
		}
		return 1;
	}
	if(strcmp(cmd, "/togphone", true) == 0 || strcmp(cmd, "/activerphone", true) == 0 || strcmp(cmd, "/activertéléphone", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (!PhoneOnline[playerid])
			{
				PhoneOnline[playerid] = 1;
				SendClientMessage(playerid, COLOR_GRAD2, "   Your Phone is Offline !");
			}
			else if (PhoneOnline[playerid])
			{
				PhoneOnline[playerid] = 0;
				SendClientMessage(playerid, COLOR_GRAD2, "   Your Phone is Online !");
			}
		}
		return 1;
	}
	/*if(strcmp(cmd, "/essence", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (gGas[playerid] == 0)
			{
				gGas[playerid] = 1;
				GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~g~Info Essence Activee", 5000, 5);
				PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
			}
			else if (gGas[playerid] == 1)
			{
				gGas[playerid] = 0;
				GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~r~Info Essence Desactivee", 5000, 5);
				PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
			}
		}
		return 1;
	}*/
//----------------------------------[advertise]-----------------------------------------------
    if(strcmp(cmd, "/publicite", true) ==0 || strcmp(cmd, "/pub", true) == 0 || strcmp(cmd, "/ad", true) == 0)
	//if(strcmp(cmd, "/publicite", true) == 0 || strcmp(cmd, "/pub", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous devez être connecté!");
	            return 1;
	        }
	        if(PlayerInfo[playerid][pLevel] < 1)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous devez être niveau 1 pour pouvoir faire une publicité!");
	            return 1;
	        }
	        if(!PlayerToPoint(3.0,playerid,1806.1897,-1294.9735,13.5411))
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas à l'ABC Studio!");
	            return 1;
	        }
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/pub)licite [text]");
				return 1;
			}
			if ((!adds) && (PlayerInfo[playerid][pAdmin] < 1))
			{
				format(string, sizeof(string), "Vous devez attendre %d secondes avant de poster une nouvelle publicité!",  (addtimer/1000));
				SendClientMessage(playerid, COLOR_GRAD2, string);
				return 1;

			}
			new payout = idx * 5;
			if(GetPlayerMoney(playerid) < payout)
	        {
	            format(string, sizeof(string), "Vous avez utilisé %d lettres qui vous coûte $%d. Vous n'avez pas assez d'argent.", offset, payout);
	            SendClientMessage(playerid, COLOR_WHITE, string);
	            return 1;
	        }
			SafeGivePlayerMoney(playerid, - payout);
			SBizzInfo[7][sbTill] += payout;
			ExtortionSBiz(7, payout);
			format(string, sizeof(string), "[PUB] %s [Contact: %s Numéro: %d]", result, sendername, PlayerInfo[playerid][pPnumber]);
			OOCNews(0x00F6E0F6,string);
			format(string, sizeof(string), "Le message contenait: %d lettres. Vous avez payé %d$.", payout, idx);
			SendClientMessage(playerid, COLOR_WHITE, string);
			if (PlayerInfo[playerid][pAdmin] < 1){SetTimer("AddsOn", addtimer, 0);adds = 0;}
		}
		return 1;
	}
	//----------------[ HOSPITAL ]------------------
	if(strcmp(cmd, "/hos", true) == 0 || strcmp(cmd, "/hospital", true) == 0) //db fixed gov/ranks
	{
	    if(IsPlayerConnected(playerid))
	    {
            if (PlayerInfo[playerid][pLeader] == 4 || PlayerInfo[playerid][pMember] == 4)
			{
	   			GetPlayerName(playerid, sendername, sizeof(sendername));
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[64];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/hos)pital [text]");
					return 1;
				}
				SendClientMessageToAll(COLOR_WHITE, "|_____________ Los Santos Hopital _____________|");
				format(string, sizeof(string), "%s: %s", sendername, result);
                if(PlayerInfo[playerid][pLeader] == 4 || PlayerInfo[playerid][pMember] == 4){
					if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "Stagière %s: %s", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string),"Interime %s: %s", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "Secouriste %s: %s", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string),"Infirmier %s: %s", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "Medecin %s: %s", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "Chef %s: %s", sendername, result); }
					SendClientMessageToAll(COLOR_WHITE, string);
				}
			}
			else
			{
	            SendClientMessage(playerid, COLOR_GRAD2, "You are authorised to do that!");
	        }
	        return 1;
		}
	}
//----------------------------------[government]-----------------------------------------------
    if(strcmp(cmd, "/gouvernement", true)==0||strcmp(cmd, "/gouv", true) == 0 || strcmp(cmd, "/gov", true) == 0)
	//if(strcmp(cmd, "/gouvernement", true) == 0 || strcmp(cmd, "/gouv", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(gTeam[playerid] != 2)
			{
			    if(PlayerInfo[playerid][pLeader] != 7)
			    {
			    	SendClientMessage(playerid, COLOR_RED, "Vous ne faîtes pas partis du gouvernement");
			    	return 1;
				}
			}
			if(PlayerInfo[playerid][pRank] < 6)
			{
			    SendClientMessage(playerid, COLOR_RED, "Vous n'avez pas le Rang recquie pour faire /gov!");
			    return 1;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/gouv)ernement [text]");
				return 1;
			}
			SendClientMessageToAll(COLOR_WHITE, "[~....::Annonce du Gouvernement::....~]");
			if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)
			{
				if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "Chef %s: %s", sendername, result); }
			    else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "Capitaine %s: %s", sendername, result); }
			    else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "Lieutenant %s: %s", sendername, result); }
				SendClientMessageToAll(COLOR_BLUE, string);
			}
			else if(PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2)
			{
				format(string, sizeof(string), "Agent %s: %s", sendername, result);
				SendClientMessageToAll(COLOR_GRAD2, string);
			}
			else if(PlayerInfo[playerid][pLeader] == 7 || PlayerInfo[playerid][pMember] == 7)
			{
				if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "Maire %s: %s", sendername, result); }
			    else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "Maire Adjoint %s: %s", sendername, result); }
				SendClientMessageToAll(COLOR_GREY, string);
			}
		}
		return 1;
	}
//----------------------------------[terroriste]-----------------------------------------------
	if(strcmp(cmd, "/terroriste", true) == 0 || strcmp(cmd, "/terro", true) == 0)
	{
			if(PlayerInfo[playerid][pRank] < 4)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Vous devez être rang 4 pour cela!");
			    return 1;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/terro)riste [texte]");
				return 1;
			}
			SendClientMessageToAll(COLOR_RED, "|___________ Annonce Terroriste ___________|");
        if(!(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pLeader] == 3))
	    {
                format(string, sizeof(string), "Terroriste %s: %s", sendername, result);
		    	SendClientMessageToAll(COLOR_RED, string);
			}
			return 1;
	/*}
//----------------------------------[togooc]-----------------------------------------------

	if(strcmp(cmd, "/togooc", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (!gOoc[playerid])
			{
				gOoc[playerid] = 1;
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "Le canal OOC à été désactivé par %s!", sendername);
				ABroadCast(COLOR_RED,string,1);
			}
			else if (gOoc[playerid])
			{
				gOoc[playerid] = 0;
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "Le canal OOC à été activé par %s!", sendername);
				ABroadCast(COLOR_RED,string,1);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/tognews", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (!gNews[playerid])
			{
				gNews[playerid] = 1;
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "Le canal News à été désactivé par %s!", sendername);
				ABroadCast(COLOR_RED,string,1);
			}
			else if (gNews[playerid])
			{
				gNews[playerid] = 0;
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "Le canal News à été activé par %s!", sendername);
				ABroadCast(COLOR_RED,string,1);
			}
		}
		return 1;*/
	}
//----------------------------------[Emote]-----------------------------------------------
    if(strcmp(cmd, "/moi", true) ==0 || strcmp(cmd, "/me", true) == 0)
	//if(strcmp(cmd, "/me", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous devez être connecté!");
	            return 1;
	        }
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /me [action]");
				return 1;
			}
			if(PlayerInfo[playerid][pMaskuse] == 1)
			{
			    format(string, sizeof(string), " Inconnu %s", result);
			}
			else
			{
				format(string, sizeof(string), "%s %s", sendername, result);
			}
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			printf("%s", string);
		}
		return 1;
	}

//----------------------------------[Try]-----------------------------------------------
     if(strcmp(cmd, "/essayer", true) == 0 || strcmp(cmd, "/try", true) == 0 || strcmp(cmd, "/essaye", true) == 0)
    //if(strcmp(cmd, "/faire", true) ==0 || strcmp(cmd, "/try", true) == 0)
	//if(strcmp(cmd, "/essaye", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous devez être connecté!");
	            return 1;
	        }
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /essaye [action]");
				return 1;
			}
			new randa = random(2)+1;
			if(PlayerInfo[playerid][pMaskuse] == 1)
			{
				if(randa == 1) format(string, sizeof(string), "** Inconnu essaye de %s et réussi", result);
				else format(string, sizeof(string), "** Inconnu essaye de %s, mais rate", result);
			}
			else
			{
			    if(randa == 1) format(string, sizeof(string), "** %s essaye de %s et réussi", sendername, result);
				else format(string, sizeof(string), "** %s essaye de %s, mais rate", sendername, result);
			}
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			printf("%s", string);
		}
		return 1;
	}

//----------------------------------[Do]-----------------------------------------------
    if(strcmp(cmd, "/fait", true) == 0 || strcmp(cmd, "/do", true) == 0 || strcmp(cmd, "/faire", true) == 0)
	//if(strcmp(cmd, "/fait", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous devez être connecté !");
	            return 1;
	        }
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /fait [action]");
				return 1;
			}
			if(PlayerInfo[playerid][pMaskuse] == 1)
			{
			    format(string, sizeof(string), "Inconnu %s", result);
			}
			else
			{
				format(string, sizeof(string), "%s (( %s ))", result, sendername);
			}
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			printf("%s", string);
		}
		return 1;
	}
	if(strcmp(cmd, "/forum", true) == 0 || strcmp(cmd, "/forum", true) == 0 || strcmp(cmd, "/info", true) == 0) // By CuervO_NegrO
    {
        if(IsPlayerConnected(playerid))
        {
            if(PlayerInfo[playerid][pAdmin] < 1)
            {
                SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use that command.");
                return 1;
            }
            SendClientMessageToAll(COLOR_YELLOW, "                        .:: Une 2eme Chance Forum ::.");
            SendClientMessageToAll(COLOR_LIGHTBLUE, "                              http://u2c-rp.forum-pro.fr");
		}
		return 1;
	}

//----------------------------------[Local]-----------------------------------------------
    if(strcmp(cmd, "/tme", true) == 0 || strcmp(cmd, "/teteme", true) == 0 || strcmp(cmd, "/tetedit", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous devez être connecté!");
	            return 1;
	        }
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "INFO] : /tme [action]");
				return 1;
			}
			if(!IsPlayerInAnyVehicle(playerid))
			{
				if(PlayerInfo[playerid][pMaskuse] == 1)
				{
					SetPlayerChatBubble(playerid, result, COLOR_FADE1, 20.0, 10000);
				}
				else
			    {
                    UnderscoreToSpace( sendername );
		    		SetPlayerChatBubble(playerid, result, COLOR_FADE1, 20.0, 10000);
				}
			}
			else
			{
		    	new carid = GetPlayerVehicleID(playerid);
		    	if(IsABike(carid) || IsAOBike(carid) || IsAPizzabike(carid) || IsAPlane(carid) || IsABoat(carid) || IsASweeper(carid) || IsAHarvest(carid) || IsADrugHarvest(carid) || IsATank(carid) || pveh == 523 || pveh == 480 || pveh == 567 || pveh == 533 || pveh == 555 || pveh == 539 || pveh == 572 || pveh == 571 || pveh == 530 || pveh == 457 || pveh == 575 || pveh == 536 || pveh == 424)
		    	{
		        	if(PlayerInfo[playerid][pMaskuse] == 1)
					{
						SetPlayerChatBubble(playerid, result, COLOR_FADE1, 20.0, 10000);
					}
					else
					{
                        UnderscoreToSpace( sendername );
		    			SetPlayerChatBubble(playerid, result, COLOR_FADE1, 20.0, 10000);
					}
		    	}
		    	else
		    	{
		    		if(VehicleWindows[GetPlayerVehicleID(playerid)] == 0)
		    		{
		    			if(PlayerInfo[playerid][pMaskuse] == 1)
						{
							SetPlayerChatBubble(playerid, result, COLOR_FADE1, 20.0, 10000);
						}
						else
						{
                            UnderscoreToSpace( sendername );
		    				SetPlayerChatBubble(playerid, result, COLOR_FADE1, 20.0, 10000);
						}
					}
					else
					{
			    		if(PlayerInfo[playerid][pMaskuse] == 1)
						{
							SetPlayerChatBubble(playerid, result, COLOR_FADE1, 20.0, 10000);
						}
						else
						{
                            UnderscoreToSpace( sendername );
		    				SetPlayerChatBubble(playerid, result, COLOR_FADE1, 20.0, 10000);
						}
					}
				}
			}
			printf("%s", string);
		}
		return 1;
	}

//----------------------------------[Local]-----------------------------------------------
    if(strcmp(cmd, "/local", true) == 0 || strcmp(cmd, "/dit", true) == 0 || strcmp(cmd, "/say", true) == 0)
	//if(strcmp(cmd, "/local", true) == 0 || strcmp(cmd, "/dit", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous devez être connecté!");
	            return 1;
	        }
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /local [local chat]");
				return 1;
			}
			if(!IsPlayerInAnyVehicle(playerid))
			{
				if(PlayerInfo[playerid][pMaskuse] == 1)
				{
					format(string, sizeof(string), "Inconnu : %s", result);
					ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
					SetPlayerChatBubble(playerid, result, COLOR_FADE1, 20.0, 10000);
				}
				else
			    {
                    UnderscoreToSpace( sendername );
		    		format(string, sizeof(string), "%s : %s", sendername, result);
		    		ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		    		SetPlayerChatBubble(playerid, result, COLOR_FADE1, 20.0, 10000);
				}
			}
			else
			{
		    	new carid = GetPlayerVehicleID(playerid);
		    	if(IsABike(carid) || IsAOBike(carid) || IsAPizzabike(carid) || IsAPlane(carid) || IsABoat(carid) || IsASweeper(carid) || IsAHarvest(carid) || IsADrugHarvest(carid) || IsATank(carid) || pveh == 523 || pveh == 480 || pveh == 567 || pveh == 533 || pveh == 555 || pveh == 539 || pveh == 572 || pveh == 571 || pveh == 530 || pveh == 457 || pveh == 575 || pveh == 536 || pveh == 424)
		    	{
		        	if(PlayerInfo[playerid][pMaskuse] == 1)
					{
						format(string, sizeof(string), "Inconnu : %s", result);
						ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
						SetPlayerChatBubble(playerid, result, COLOR_FADE1, 20.0, 10000);
					}
					else
					{
                        UnderscoreToSpace( sendername );
		    			format(string, sizeof(string), "%s : %s", sendername, result);
		    			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		    			SetPlayerChatBubble(playerid, result, COLOR_FADE1, 20.0, 10000);
					}
		    	}
		    	else
		    	{
		    		if(VehicleWindows[GetPlayerVehicleID(playerid)] == 0)
		    		{
		    			if(PlayerInfo[playerid][pMaskuse] == 1)
						{
							format(string, sizeof(string), "(Fenêtre Fermée) Inconnu : %s", result);
							ProxDetector(10.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
							SetPlayerChatBubble(playerid, result, COLOR_FADE1, 20.0, 10000);
						}
						else
						{
                            UnderscoreToSpace( sendername );
		    				format(string, sizeof(string), "(Fenêtre Fermée) %s : %s", sendername, result);
		    				ProxDetector(10.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		    				SetPlayerChatBubble(playerid, result, COLOR_FADE1, 20.0, 10000);
						}
					}
					else
					{
			    		if(PlayerInfo[playerid][pMaskuse] == 1)
						{
							format(string, sizeof(string), "(Fenêtre Ouverte) Inconnu : %s", result);
							ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
							SetPlayerChatBubble(playerid, result, COLOR_FADE1, 20.0, 10000);
						}
						else
						{
                            UnderscoreToSpace( sendername );
		    				format(string, sizeof(string), "(Fenêtre Ouverte) %s : %s", sendername, result);
		    				ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		    				SetPlayerChatBubble(playerid, result, COLOR_FADE1, 20.0, 10000);
						}
					}
				}
			}
			printf("%s", string);
		}
		return 1;
	}
    if(strcmp(cmd, "/(", true)==0)//local ooc
	//if(strcmp(cmd, "/b", true) == 0)//local ooc
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous devez être connecté!");
	            return 1;
	        }
	        if(PlayerInfo[playerid][pMutedOOC] == 1)
			{
				SendClientMessage(playerid, TEAM_CYAN_COLOR, "Vous ne pouvez pas parlé, vous avez été muté OOC!");
				return 1;
			}
            GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /( [local ooc chat]");
				return 1;
			}
			if(PlayerInfo[playerid][pMaskuse] == 1)
			{
			    format(string, sizeof(string), "(( Inconnu :  %s ))", result);
			}
			else
			{
                UnderscoreToSpace( sendername );
				format(string, sizeof(string), "(( %s : %s ))", sendername, result);
			}
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			printf("%s", string);
		}
		return 1;
	}
    if(strcmp(cmd, "/close", true) == 0 || strcmp(cmd, "/cl", true) == 0 || strcmp(cmd, "/c", true) == 0)
	//if(strcmp(cmd, "/close", true) == 0 || strcmp(cmd, "/cl", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous devez être connecté!");
	            return 1;
	        }
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /(c)lose [close chat text]");
				return 1;
			}
			if(PlayerInfo[playerid][pMaskuse] == 1)
			{
				format(string, sizeof(string), "Inconnu : %s", result);
				SetPlayerChatBubble(playerid, result, COLOR_FADE1, 20.0, 10000);
			}
			else
			{
                UnderscoreToSpace( sendername );
		   		format(string, sizeof(string), "%s : %s", sendername, result);
		   		SetPlayerChatBubble(playerid, result, COLOR_FADE1, 20.0, 10000);
			}
			ProxDetector(3.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			printf("%s", string);
		}
		return 1;
	}
    if(strcmp(cmd, "/bas", true) == 0)
	//if(strcmp(cmd, "/bas", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous devez êtres connecté!");
	            return 1;
	        }
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /bas [chat text]");
				return 1;
			}
			if(PlayerInfo[playerid][pMaskuse] == 1)
			{
				format(string, sizeof(string), "Inconnu : [BAS] %s", result);
				SetPlayerChatBubble(playerid, result, COLOR_FADE1, 20.0, 10000);
			}
			else
			{
                UnderscoreToSpace( sendername );
		   		format(string, sizeof(string), "%s : [BAS] %s", sendername, result);
		   		SetPlayerChatBubble(playerid, result, COLOR_FADE1, 20.0, 10000);
			}
			ProxDetector(3.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			printf("%s", string);
		}
		return 1;
	}
//----------------------------------[Shout]-----------------------------------------------
    if(strcmp(cmd, "/crier", true)==0||strcmp(cmd, "/c", true)==0||strcmp(cmd, "/s", true) == 0)
	//if(strcmp(cmd, "/crier", true) == 0 || strcmp(cmd, "/c", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous devez être connecté!");
	            return 1;
	        }
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/c)crier [local chat]");
				return 1;
			}
			if(PlayerInfo[playerid][pMaskuse] == 1)
			{
				format(string, sizeof(string), "Inconnu crie: %s!!", result);
			}
			else
			{
                UnderscoreToSpace( sendername );
				format(string, sizeof(string), "%s crie: %s !!", sendername, result);
			}
			ProxDetector(30.0, playerid, string,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_FADE1,COLOR_FADE2);
			printf("%s", string);
		}
		return 1;
	}
//----------------------------------[Shout]-----------------------------------------------
	if(strcmp(cmd, "/megaphone", true) == 0 || strcmp(cmd, "/m", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new tmpcar = GetPlayerVehicleID(playerid);
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/m)egaphone [megaphone chat]");
				return 1;
			}
			if(gTeam[playerid] == 2 || IsACop(playerid) || IsAnFbiCar(playerid))
			{
				if(!IsACopCar(tmpcar) || !IsAnFbiCar(tmpcar))
				{
					if(PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1)
					{
					    new currank[64];
    					if(PlayerInfo[playerid][pRank] == 1) { currank = "Cadet"; }
						else if(PlayerInfo[playerid][pRank] == 2) { currank = "Officier"; }
						else if(PlayerInfo[playerid][pRank] == 3) { currank = "Sergeant"; }
						else if(PlayerInfo[playerid][pRank] == 4) { currank = "Lieutenant"; }
						else if(PlayerInfo[playerid][pRank] == 5) { currank = "Capitaine"; }
						else if(PlayerInfo[playerid][pRank] == 6) { currank = "Shériff"; }
						else { currank = "Cadet"; }
						UnderscoreToSpace( sendername );
						format(string, sizeof(string), "Agent Du LSPD %s: %s", sendername, result);
						ProxDetector(60.0, playerid, string,JAUNE,JAUNE,JAUNE,JAUNE,JAUNE);
					}
					else if(PlayerInfo[playerid][pMember] == 2||PlayerInfo[playerid][pLeader] == 2)
					{
                        UnderscoreToSpace( sendername );
						format(string, sizeof(string), "[Agent %s:o< %s]", sendername, result);
						ProxDetector(60.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
					}
					printf("%s", string);
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GRAD2, "Vous n'êtes pas dans un véhicule de police!");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Vous n'êtes pas policier!");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/jobradio", true)==0||strcmp(cmd, "/jr", true) == 0 || strcmp(cmd, "/tr", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "UTTISATION: /jr [job chat]");
				return 1;
			}
		    if(PlayerInfo[playerid][pJob] == 13)
			{
                UnderscoreToSpace( sendername );
				format(string, sizeof(string), "%s (JobRadio): %s", sendername, result);
	            SendJobMessage(13, COLOR_GREEN, string);
	        }
	        if(PlayerInfo[playerid][pJob] == 5)
			{
                UnderscoreToSpace( sendername );
				format(string, sizeof(string), "%s (JobRadio): %s", sendername, result);
	            SendJobMessage(5, COLOR_GREEN, string);
	        }
	        if(PlayerInfo[playerid][pJob] == 7)
			{
                UnderscoreToSpace( sendername );
				format(string, sizeof(string), "%s (JobRadio): %s", sendername, result);
	            SendJobMessage(7, COLOR_GREEN, string);
	        }
		}
		return 1;
	}
//--------------------------Parler a la radio-----------------------------------
	if(strcmp(cmd, "/radio", true) == 0 || strcmp(cmd, "/r", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			GetPlayerName(playerid, sendername, sizeof(sendername));
			UnderscoreToSpace( sendername );
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/r)adio [radio chat]");
				return 1;
			}
		    if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)
			{
			    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "[Radio]Chef %s : %s, ", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "[Radio]Capitaine %s : %s, ", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "[Radio]Lieutenant %s : %s, ", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "[Radio]Sergent %s : %s, ", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "[Radio]Officier %s : %s, ", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "[Radio]Cadet %s : %s, ", sendername, result); }
				else
				{
					format(string, sizeof(string), "[Radio]%s : %s", sendername, result);
				}
				ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				SendRadioMessage(1, COLOR_DBLUE, string);
				printf("%s", string);
				return 1;
		    }
			else if(PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2)
			{
			    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "[Radio]Chef %s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "[Radio]Sous-Chef %s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "[Radio]Chef de Groupe %s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "[Radio]Agent Spécial %s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "[Radio]Agent %s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "[Radio]Stagière %s: %s", sendername, result); }
				else
				{
					format(string, sizeof(string), "[Radio]%s : %s", sendername, result);
				}
				ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				SendRadioMessage(2, COLOR_DBLUE, string);
				printf("%s", string);
				return 1;
			}
			else if(PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
			{
			    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "[Radio]Général %s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "[Radio]Colonel %s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "[Radio]Capitaine %s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "[Radio]Lieutenant %s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "[Radio]Sergent %s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "[Radio]Soldat %s: %s", sendername, result); }
				else
				{
					format(string, sizeof(string), "[Radio]%s : %s", sendername, result);
				}
				ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				SendRadioMessage(3, COLOR_DBLUE, string);
				printf("%s", string);
				return 1;
			}
			else if(gTeam[playerid] == 1||PlayerInfo[playerid][pMember]==4||PlayerInfo[playerid][pLeader]==4)
			{
				format(string, sizeof(string), "Medecin %s: %s", sendername, result);
				SendRadioMessage(4, COLOR_DBLUE, string);
				printf("%s", string);
				return 1;
			}
			else if(PlayerInfo[playerid][pMember] == 5 || PlayerInfo[playerid][pLeader] == 5)
			{
			    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "[Radio]Top Gangsta %s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "[Radio]Gangsta %s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "[Radio]Soldat %s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "[Radio]Gros Bras %s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "[Radio]Debrouillard %s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "[Radio]Voyou %s: %s", sendername, result); }
				else
				{
					format(string, sizeof(string), "[Radio]%s : %s", sendername, result);
				}
				ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				SendRadioMessage(5, COLOR_DBLUE, string);
				printf("%s", string);
				return 1;
			}
			else if(PlayerInfo[playerid][pMember] == 6 || PlayerInfo[playerid][pLeader] == 6)
			{
			    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "[Radio]Godfather %s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "[Radio]Bras Droit %s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "[Radio]Consiglière %s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "[Radio]Capo %s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "[Radio]Soldato %s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "[Radio]Piccioto %s: %s", sendername, result); }
				else
				{
					format(string, sizeof(string), "[Radio]%s : %s", sendername, result);
				}
				ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				SendRadioMessage(6, COLOR_DBLUE, string);
				printf("%s", string);
				return 1;
			}
			else if(PlayerInfo[playerid][pMember] == 7 || PlayerInfo[playerid][pLeader] == 7)
			{
                if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "[Radio]Maire %s: %s", sendername, result); }
			    else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "[Radio]Maire Adjoint %s: %s", sendername, result); }
                else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "[Radio]Secretaire %s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "[Radio]Chef de la Sécurité %s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "[Radio]Garde du Corp %s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "[Radio]Conducteur %s: %s", sendername, result); }
				else
				{
					format(string, sizeof(string), "[Radio]%s : %s", sendername, result);
				}
				SendRadioMessage(7, COLOR_DBLUE, string);
				printf("%s", string);
				return 1;
			}
			else if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8)
			{
			    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "[Radio]%s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "[Radio]%s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "[Radio]%s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "[Radio]%s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "[Radio]%s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "[Radio]%s: %s", sendername, result); }
				else
				{
					format(string, sizeof(string), "[Radio]%s : %s", sendername, result);
				}
				ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				SendRadioMessage(8, COLOR_DBLUE, string);
				printf("%s", string);
				return 1;
   	        }
			else if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9)
			{
			    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "[Radio]Chef %s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "[Radio]Sous Chef %s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "[Radio]Secrétaire %s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "[Radio]Chef de Groupe %s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "[Radio]Journaliste %s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "[Radio]Interime %s: %s", sendername, result); }
				else
				{
					format(string, sizeof(string), "[Radio]%s: %s", sendername, result);
				}
				ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				SendRadioMessage(9, COLOR_DBLUE, string);
				printf("%s", string);
				return 1;
			}
			else if(PlayerInfo[playerid][pJob] == 13)
			{
			    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "[Radio]%s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "[Radio]%s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "[Radio]%s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "[Radio]%s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "[Radio]%s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "[Radio]%s: %s", sendername, result); }
				else
				{
					format(string, sizeof(string), "[Radio]%s: %s", sendername, result);
				}
				ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				SendRadioMessage(10, COLOR_DBLUE, string);
				printf("%s", string);
				return 1;
			}
			/*else if(PlayerInfo[playerid][pMember] == 11 || PlayerInfo[playerid][pLeader] == 11)
			{
			    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "* %s(radio): %s *", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "* %s(radio): %s *", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "* %s(radio): %s *", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "* %s(radio): %s *", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "* %s(radio): %s *", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "* %s(radio): %s *", sendername, result); }
				else
				{
					format(string, sizeof(string), "* %s(radio): %s, terminé. *", sendername, result);
				}
				ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				SendRadioMessage(11, TEAM_RADIO_COLOR, string);
				printf("%s", string);
				return 1;
			}*/
			else if(PlayerInfo[playerid][pMember] == 14 || PlayerInfo[playerid][pLeader] == 14)
			{
			    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "[Radio]Hell's Rider %s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "[Radio]Top Rider %s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "[Radio]Biker %s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "[Radio]Motard %s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "[Radio]Apprenti %s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "[Radio]Voyou %s: %s", sendername, result); }
				else
				{
					format(string, sizeof(string), "[Radio]%s: %s", sendername, result);
				}
				SendRadioMessage(14, COLOR_DBLUE, string);
				printf("%s", string);
				return 1;
			}
			else if(PlayerInfo[playerid][pMember] == 15 || PlayerInfo[playerid][pLeader] == 15)
			{
			    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "[Radio]Top Gangsta %s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "[RadioGangsta %s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "[Radio]Soldat %s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "[Radio]Gros Bras %s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "[Radio]Debrouillard %s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "[Radio]Voyou %s: %s ", sendername, result); }
				else
				{
					format(string, sizeof(string), "[Radio]%s: %s", sendername, result);
				}
				ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				SendRadioMessage(15, COLOR_DBLUE, string);
				printf("%s", string);
				return 1;
			}
			else if(PlayerInfo[playerid][pMember] == 16 || PlayerInfo[playerid][pLeader] == 16)
			{
			    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "[Radio]Top Gangsta %s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "[Radio]Gangsta %s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "[Radio]Soldat %s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "[Radio]Gros Bras %s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "[Radio]Debrouillard %s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "[Radio]Voyou %s: %s", sendername, result); }
				else
				{
					format(string, sizeof(string), "[Radio]%s: %s", sendername, result);
				}
				ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				SendRadioMessage(16, COLOR_DBLUE, string);
				printf("%s", string);
				return 1;
			}
			else if(PlayerInfo[playerid][pMember] == 17 || PlayerInfo[playerid][pLeader] == 17)
			{
			    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "[Radio]Godfather %s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "[Radio]Bras Droit %s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "[Radio]Consiglière %s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "[Radio]Capo %s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "[Radio]Soldato %s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "[Radio]Piccioto %s: %s", sendername, result); }
				else
				{
					format(string, sizeof(string), "[Radio]%s : %s", sendername, result);
				}
				ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				SendRadioMessage(17, COLOR_DBLUE, string);
				printf("%s", string);
				return 1;
			}
			else if(PlayerInfo[playerid][pMember] == 18 || PlayerInfo[playerid][pLeader] == 18)
			{
			    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "[Radio]Chef %s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "[Radio]Sous-Chef %s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "[Radio]Chef de Groupe %s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "[Radio]Agent Spécial %s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "[Radio]Agent %s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "[Radio]Stagière %s: %s", sendername, result); }
				else
				{
					format(string, sizeof(string), "[Radio]%s : %s", sendername, result);
				}
				ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				SendRadioMessage(18, COLOR_DBLUE, string);
				printf("%s", string);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, RED, "Vous n'avez pas de Faction!");
				return 1;
			}
		}
		return 1;
	}
//----------------------------------[Walkie Talkie]------------------------------------------------
	if(strcmp(cmd, "/t", true) == 0 || strcmp(cmd, "/talkiewalkie", true) ==0 || strcmp(cmd, "/talkie", true) ==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
         	if(PlayerInfo[playerid][pWT]!=1)
	        {
	        SendClientMessage(playerid,COLOR_GREY,"Vous n'avez pas de Talkie Walkie.  Allez en acheter un.");
	        return 1;
	        }
			GetPlayerName(playerid, sendername, sizeof(sendername));
			UnderscoreToSpace( sendername );
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /t(alkie) [message]");
				return 1;
			}
			new channel = PlayerInfo[playerid][pWTc];
			format(string, sizeof(string), "[Talkie Walkie]%s : %s", sendername, result);
			if(PlayerInfo[playerid][pWTc] > 0 && PlayerInfo[playerid][pWTc] < 1000000)
			{
			SendWTMessage(channel, COLOR_WT, string);
			printf("%s", string);
			//format(string, sizeof(string), " %s Talked in his Walkie Talkie.", sendername);
			//ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			format(string, sizeof(string), "[Talkie Walkie] %s dit: %s ", sendername, result);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "La fréquence sur laquelle vous êtes n'est pas valide ! Changez la en utilisant /freq !");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/setfreq", true) == 0 || strcmp(cmd, "/freq", true) ==0 || strcmp(cmd, "/frequence", true) ==0)
	{
		if(IsPlayerConnected(playerid))
  		{
	        if(PlayerInfo[playerid][pWT]!=1)
	       	{
	       	SendClientMessage(playerid,COLOR_GREY,"Vous n'avez pas de Talkie Walkie.  Allez en acheter un.");
	       	return 1;
	       	}
	       	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /freq(uence) [Frequence]");
				return 1;
			}
			new channel = strval(tmp);
   			if (channel < 1 || channel > 999999)
				return SendClientMessage(playerid, COLOR_GRAD1, "La fréquence doit être comprise entre 1 et 999999!");
   			PlayerInfo[playerid][pWTc] = channel;
		    format(string, sizeof(string), "Vous avez réglé votre fréquence à : %d", channel);
			SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
		}
		return 1;
	}
//----------------------------------[offduty]-----------------------------------------------
	if(strcmp(cmd, "/duty", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			GetPlayerName(playerid, sendername, sizeof(sendername));
			if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2)
			{
				if (PlayerToPoint(3, playerid,255.3,77.4,1003.6) || PlayerToPoint(3,playerid,-1616.1294,681.1594,7.1875) || PlayerToPoint(3,playerid,244.9195,188.4331,1008.1719) || PlayerInfo[playerid][pLocal] != 255)
				{
					if(OnDuty[playerid]==0)
			        {
			            if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2)
			            {
				    		format(string, sizeof(string), " L'Officier %s ouvre son Casier et prend son Badge.", sendername);
						}
						else if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2)
			            {
				    		format(string, sizeof(string), " L'Officier %s ouvre son Casier et prend son Badge.", sendername);
						}
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                        SafeGivePlayerWeapon(playerid, 3, 1);
					    SafeGivePlayerWeapon(playerid, 24, 99999);
					    SafeGivePlayerWeapon(playerid, 29, 99999);
						SetPlayerArmour(playerid, 100);
                        SetPlayerColor(playerid,COLOR_BLUE);
						OnDuty[playerid] = 1;
						//PoliceService += 1;
						Flicservice ++;
						format(string, sizeof(string), "__________| %i Force(s) de l'ordre sont actuellement en Service |__________",Flicservice);
    					if(PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
						{
    						SendClientMessageToAll(Vert, string);
    					}
    					else
    					{
    					    SendClientMessageToAll(0x0000F6F6, string);
						}
					}
					else if(OnDuty[playerid]==1)
					{
					    if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2)
					    {
							format(string, sizeof(string), " L'Officier %s a remis son Badge de police et son calibre dans son Casier.", sendername);
						}
						else if(PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2)
						{
						    format(string, sizeof(string), " L'Officier %s a remis son Badge de police et son calibre dans son Casier.", sendername);
						}
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						SafeResetPlayerWeapons(playerid);
						SetPlayerArmour(playerid, 0);
						OnDuty[playerid] = 0;
						Flicservice --;
						format(string, sizeof(string), "__________| %i Force(s) de l'ordre sont actuellement en Service |__________",Flicservice);
						if(PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
						{
    						SendClientMessageToAll(Vert, string);
    					}
    					else
    					{
    					    SendClientMessageToAll(0x0000F6F6, string);
						}
						SetPlayerColor(playerid,TEAM_HIT_COLOR);

					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Vous n'êtes pas dans les vestiaires!");
					return 1;
				}
			}
			else if(PlayerInfo[playerid][pMember] == 4||PlayerInfo[playerid][pLeader] == 4)
			{
			    if(JobDuty[playerid] == 1)
			    {
			        SendClientMessage(playerid, COLOR_WHITE, " Vous n'êtes plus en service, vous ne recevrez plus d'appel.");
			        JobDuty[playerid] = 0;
			        Medics -= 1;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_WHITE, " Vous êtes en service, vous recevrez les appels des personnes qui ont besoin de vous.");
			        JobDuty[playerid] = 1;
			        Medics += 1;
			        GetPlayerName(playerid,sendername,sizeof(sendername));
   					format(string, sizeof(string), "[Pub] Infirmier %s est en service, /appeler 911.", sendername);
	    			OOCNews(COLOR_ALLDEPT,string);
			    }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Vous n'êtes pas policier");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/jobduty", true) ==0 || strcmp(cmd, "/tr", true) ==0 || strcmp(cmd, "/travail", true) ==0)
	{
		if(PlayerInfo[playerid][pJob] == 17)
		{
       		if(JobDuty[playerid] == 1)
       		{
           		SendClientMessage(playerid, COLOR_WHITE, " Vous n'êtes plus en service, vous ne recevrez plus d'appel.");
           		JobDuty[playerid] = 0;
           		PizzaBoys -= 1;
       		}
       		else
       		{
      			SendClientMessage(playerid, COLOR_WHITE, " Vous êtes en service, vous recevrez les appels des personnes qui ont besoin de vous.");
      			JobDuty[playerid] = 1;
      			PizzaBoys += 1;
      			GetPlayerName(playerid,sendername,sizeof(sendername));
				format(string, sizeof(string), "[Pub] Le livreur de pizza %s est en service, /appeler 111 pour commander une pizza.", sendername);
				OOCNews(0xFF7E00AA,string);
			}
		}
		else if(PlayerInfo[playerid][pJob] == 7)
		{
		    if(JobDuty[playerid] == 1)
		    {
		        SendClientMessage(playerid, COLOR_WHITE, " Vous n'êtes plus en service, vous ne recevrez plus d'appel.");
		        JobDuty[playerid] = 0;
		        Mechanics -= 1;
		    }
		    else
		    {
		        SendClientMessage(playerid, COLOR_WHITE, " Vous êtes en service, vous recevrez les appels des personnes qui ont besoin de vous.");
		        JobDuty[playerid] = 1;
		        Mechanics += 1;
		        GetPlayerName(playerid,sendername,sizeof(sendername));
   				format(string, sizeof(string), "[Pub] Le mecanicien %s est en service, /appeler 555 pour appeler un mecanicien.", sendername);
	   			OOCNews(0x2993EDAA,string);
		    }
		}
		return 1;
  	}
  		if(strcmp(cmd, "/devoir", true) ==0 || strcmp(cmd, "/jdu", true) ==0)
	{
		if(PlayerInfo[playerid][pJob] == 17)
		{
       		if(JobDuty[playerid] == 1)
       		{
           		SendClientMessage(playerid, COLOR_WHITE, " Vous n'êtes plus en service, vous ne recevrez plus d'appel.");
           		JobDuty[playerid] = 0;
           		PizzaBoys -= 1;
       		}
       		else
       		{
      			SendClientMessage(playerid, COLOR_WHITE, " Vous êtes en service, vous recevrez les appels des personnes qui ont besoin de vous.");
      			JobDuty[playerid] = 1;
      			PizzaBoys += 1;
      			GetPlayerName(playerid,sendername,sizeof(sendername));
				format(string, sizeof(string), "[Pub] Le livreur de pizza %s est en service, /appeler 111 pour commander une pizza.", sendername);
				OOCNews(0xFF7E00AA,string);
			}
		}
		else if(PlayerInfo[playerid][pJob] == 7)
		{
		    if(JobDuty[playerid] == 1)
		    {
		        SendClientMessage(playerid, COLOR_WHITE, " Vous n'êtes plus en service, vous ne recevrez plus d'appel.");
		        JobDuty[playerid] = 0;
		        Mechanics -= 1;
		    }
		    else
		    {
		        SendClientMessage(playerid, COLOR_WHITE, " Vous êtes en service, vous recevrez les appels des personnes qui ont besoin de vous.");
		        JobDuty[playerid] = 1;
		        Mechanics += 1;
		        GetPlayerName(playerid,sendername,sizeof(sendername));
   				format(string, sizeof(string), "[Pub] Le mecanicien %s est en service, /appeler 555 pour appeler un mecanicien.", sendername);
	   			OOCNews(0x2993EDAA,string);
		    }
		}
		return 1;
  	}
//----------------------------------[departments]-----------------------------------------------
    if(strcmp(cmd, "/departement", true) == 0 || strcmp(cmd, "/d", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			GetPlayerName(playerid, sendername, sizeof(sendername));
			UnderscoreToSpace( sendername );
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/d)epartement [department chat]");
				return 1;
			}
			if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)
			{
			    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "* Shériff %s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "* Capitaine %s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "* Lieutenant %s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "* Sergeant %s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "* Officier %s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "* Cadet %s: %s", sendername, result); }
				else
				{
					format(string, sizeof(string), "Cadet %s: %s, ", sendername, result);
				}
				SendTeamMessage(2, COLOR_ALLDEPT, string);
				SendTeamMessage(1, COLOR_ALLDEPT, string);
				SendFamilyMessage(7, COLOR_ALLDEPT, string);
				printf("%s", string);
				return 1;
			}
			else if(PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2)
			{
			    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "* Directeur %s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "* Assistant du Directeur %s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "* Groupe d'intervention %s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "* Agent Spécial %s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "* Agent %s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "* Interne %s: %s", sendername, result); }
				else
				{
					format(string, sizeof(string), "* Interne %s: %s", sendername, result);
				}
				SendTeamMessage(2, COLOR_ALLDEPT, string);
				SendTeamMessage(1, COLOR_ALLDEPT, string);
				SendFamilyMessage(7, COLOR_ALLDEPT, string);
				printf("%s", string);
				return 1;
			}
			else if(PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
			{
			    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "* Général %s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "* Lieutenant %s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "* Capitaine %s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "* Major %s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "* Sergeant %s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "* Soldat 1ere classe %s: %s", sendername, result); }
				else
				{
					format(string, sizeof(string), "* Soldat 1ere classe %s: %s", sendername, result);
				}
				SendTeamMessage(2, COLOR_ALLDEPT, string);
				SendTeamMessage(1, COLOR_ALLDEPT, string);
				SendFamilyMessage(7, COLOR_ALLDEPT, string);
				printf("%s", string);
				return 1;
			}
			else if(gTeam[playerid] == 1||PlayerInfo[playerid][pMember]==4||PlayerInfo[playerid][pLeader]==4)
			{
				format(string, sizeof(string), "* Infirmié %s: %s", sendername, result);
				SendTeamMessage(2, COLOR_ALLDEPT, string);
				SendTeamMessage(1, COLOR_ALLDEPT, string);
				SendFamilyMessage(7, COLOR_ALLDEPT, string);
				printf("%s", string);
				return 1;
			}
			else if(PlayerInfo[playerid][pLeader] == 7||PlayerInfo[playerid][pMember] == 7)
			{
			    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "* Maire %s: %s", sendername, result); }
                else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "* Maire Adjoint %s: %s", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "* Garde du Corp du Maire %s: %s", sendername, result); }
			    else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "* Chauffeur du Maire %s: %s", sendername, result); }
			    else { SendClientMessage(playerid, COLOR_GREY, "Le Maire ne vous à pas donné de radio"); return 1; }
			    SendTeamMessage(2, COLOR_ALLDEPT, string);
				SendTeamMessage(1, COLOR_ALLDEPT, string);
				SendFamilyMessage(7, COLOR_ALLDEPT, string);
				printf("%s", string);
			    return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Vous n'êtes pas dans une faction légale!");
				return 1;
			}
		}
		return 1;
	}
//----------------------------------[mdc]-----------------------------------------------
	if(strcmp(cmd, "/mdc", true) == 0 || strcmp(cmd, "/bdd", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(!IsACop(playerid))
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas policier!");
	            return 1;
	        }
			new tmpcar = GetPlayerVehicleID(playerid);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /mdc [playerid/PartOfName]");
				return 1;
			}
			//giveplayerid = strval(tmp);
			giveplayerid = ReturnUser(tmp);
			if(IsACopCar(tmpcar)||IsAHspdCar(tmpcar)||IsAnFbiCar(tmpcar)||PlayerToPoint(5.0, playerid, 253.9280,69.6094,1003.6406))
			{
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        GetPlayerName(giveplayerid, sendername, sizeof(sendername));
						SendClientMessage(playerid, TEAM_BLUE_COLOR,"______-=Base de données de la Police=-______");
						format(string, sizeof(string), "Nom : %s", sendername);
						SendClientMessage(playerid, COLOR_WHITE,string);
						format(string, sizeof(string), "Crime : %s", PlayerCrime[giveplayerid][pAccusedof]);
						SendClientMessage(playerid, COLOR_GRAD2,string);
						format(string, sizeof(string), "Victime : %s", PlayerCrime[giveplayerid][pVictim]);
						SendClientMessage(playerid, COLOR_GRAD3,string);
						format(string, sizeof(string), "Témoin, : %s", PlayerCrime[giveplayerid][pAccusing]);
						SendClientMessage(playerid, COLOR_GRAD4,string);
						format(string, sizeof(string), "Accusé : %s", PlayerCrime[giveplayerid][pBplayer]);
						SendClientMessage(playerid, COLOR_GRAD5,string);
						SendClientMessage(playerid, TEAM_BLUE_COLOR,"_____________________________________________");
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté!");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Vous n'êtes pas au commisariat ou dans une voiture de police.");
				return 1;
			}
		}
		return 1;
	}

//----------------------------------[SetCrim]-----------------------------------------------
    if(strcmp(cmd, "/suspecter", true) == 0 || strcmp(cmd, "/su", true) == 0 || strcmp(cmd, "/suspect", true) == 0)
	//if(strcmp(cmd, "/suspecter", true) == 0 || strcmp(cmd, "/su", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(OnDuty[playerid] == 1 && PlayerInfo[playerid][pMember] == 1 || OnDuty[playerid] == 1 && PlayerInfo[playerid][pLeader] == 1 || OnDuty[playerid] == 1 && PlayerInfo[playerid][pMember] == 2 || OnDuty[playerid] == 1 && PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3) { }
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas en service!");
			    return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/su)spect [playerid/PartOfName] [descrition du crime]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if (gTeam[playerid] == 2 || IsACop(playerid))
			{
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
						if (gTeam[giveplayerid] != 2)
						{
							GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							new length = strlen(cmdtext);
							while ((idx < length) && (cmdtext[idx] <= ' '))
							{
								idx++;
							}
							new offset = idx;
							new result[64];
							while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
							{
								result[idx - offset] = cmdtext[idx];
								idx++;
							}
							result[idx - offset] = EOS;
							if(!strlen(result))
							{
								SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/su)spect [playerid/PartOfName] [Descrition du crime]");
								return 1;
							}
							if(WantedPoints[giveplayerid] == 0) { WantedPoints[giveplayerid] = 3; }
							else { WantedPoints[giveplayerid]+= 2; }
							SetPlayerCriminalEx(giveplayerid,playerid, result);
							return 1;
						}
						else
						{
							SendClientMessage(playerid, COLOR_GRAD2, "Vous ne pouvez pas suspecter un policier!");
						}
					}
				}
				else
				{
						format(string, sizeof(string), "L' %d n'est pas connecté.", giveplayerid);
						SendClientMessage(playerid, COLOR_GRAD1, string);
						return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Vous n'êtes pas policier!");
			}
		}
		return 1;
	}

	/*if(strcmp(cmd, "/carlock", true) == 0)
    {
		new keycar = PlayerInfo[playerid][pPvehkey];
    	if(IsPlayerConnected(playerid))
        {
			if(keycar != 999)
			{
				new locked[256];
				locked = strtok(cmdtext, idx);
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if (IsPlayerConnected(i))
					{
						SetVehicleParamsForPlayer(keycar,i,0,1);
					}
				}
				format(string, sizeof(string), "~w~Car~n~~r~Locked");
				GameTextForPlayer(playerid, string, 10000, 3);
				CarInfo[keycar][cLock] = 1;
				OnPropUpdate();
				return 1;
			}
			else { SendClientMessage(playerid,COLOR_WHITE,"* You do not own a car! *"); return 1; }
		}
    }*/

    /*if(strcmp(cmd, "/carunlock", true) == 0)
    {
		new keycar = PlayerInfo[playerid][pPvehkey];
    	if(IsPlayerConnected(playerid))
        {
			if(keycar != 999)
			{
				new locked[256];
				locked = strtok(cmdtext, idx);
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if (IsPlayerConnected(i))
					{
						SetVehicleParamsForPlayer(keycar,i,0,0);
					}
				}
				format(string, sizeof(string), "~w~Car~n~~g~Unlocked");
				GameTextForPlayer(playerid, string, 10000, 3);
				CarInfo[keycar][cLock] = 0;
				OnPropUpdate();
				return 1;
			}
			else { SendClientMessage(playerid,COLOR_WHITE,"* You do not own a car! *"); return 1; }
		}
    }*/

//----------------------------------[LOCK]-----------------------------------------------
    if(strcmp(cmd, "/fermer", true) == 0 || strcmp(cmd, "/verouiller", true) == 0 || strcmp(cmd, "/lock", true) == 0)
	//if(strcmp(cmd, "/fermer", true) == 0)
    //if(strcmp(cmd, "/verouiller", true) ==0 || strcmp(cmd, "/lock", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new carid;
			if (gTeam[playerid] == 2 || gTeam[playerid] == 1)
			{
				if(gLastCar[playerid] == 0 && PlayerInfo[playerid][pPhousekey] == 255)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Vous n'avez pas de véhicule.");
					return 1;
				}
				else if(gLastCar[playerid] != 0 && gLastCar[playerid] != PlayerInfo[playerid][pPhousekey]+1)
				{
					if (HireCar[playerid] != gLastCar[playerid] && HireCar[playerid] != 299)
					{
						gLastDriver[HireCar[playerid]] = 998;
						gCarLock[HireCar[playerid]] = 0;
						UnLockCar(HireCar[playerid]);
					}
					HireCar[playerid] = gLastCar[playerid];
				}
			}
			if (PlayerInfo[playerid][pPhousekey] == 255)
			{
				if(HireCar[playerid] == 299)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Vous n'avez pas de véhicule.");
					return 1;
				}
			}
			carid = PlayerInfo[playerid][pPhousekey]+1;
			if(HireCar[playerid] != 299 && !SwitchKey[playerid])
			{
				carid = HireCar[playerid];
			}
			//new driver = gLastDriver[carid];
			new lockstatus = gCarLock[carid];
			new Float:cx,Float:cy,Float:cz;
			GetVehiclePos(carid, cx, cy, cz);
			switch (lockstatus)
			{
				case 0:
				{
					if(HireCar[playerid] == 299 && PlayerInfo[playerid][pPhousekey] == 255)
					{
						SendClientMessage(playerid, COLOR_GRAD2, "Vous n'avez pas de véhicule.");
						return 1;
					}
					if(HireCar[playerid] == carid && !SwitchKey[playerid])
					{
						GameTextForPlayer(playerid, "~w~Vehicule ~r~Fermer", 5000, 6);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						gCarLock[carid] = 1;
						LockCar(carid);
					}
					/*else if (PlayerInfo[playerid][pPhousekey] == carid-1)
					{
						GameTextForPlayer(playerid, "~w~House Vehicle ~r~Locked", 5000, 6);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						gCarLock[carid] = 1;
						LockCar(carid);
						return 1;
					}*/
				}
				case 1:
				{
					if(HireCar[playerid] == 299 && PlayerInfo[playerid][pPhousekey] == 255)
					{
						SendClientMessage(playerid, COLOR_GRAD2, "Vous n'avez pas de véhicule.");
						return 1;
					}
					if(HireCar[playerid] == carid && !SwitchKey[playerid])
					{
						GameTextForPlayer(playerid, "~w~Vehicule ~g~Ouvert", 5000, 6);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						gCarLock[carid] = 0;
						UnLockCar(carid);
					}
					/*if (PlayerInfo[playerid][pPhousekey] == carid-1)
					{
						GameTextForPlayer(playerid, "~w~House Vehicle ~g~Unlocked", 5000, 6);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						gCarLock[carid] = 0;
						UnLockCar(carid);
						return 1;
					}*/
				}
				default:
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Erreur");
				}
			}
						if(carid == 256)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Vous n'avez pas de vehicule !");
			}
		}
		return 1;
	/*}
    if(strcmp(cmd,"/localiser",true)==0)
	{
		    if(!IsPlayerConnected(playerid)) { return 1; }
		    if(PlayerInfo[playerid][pPvehkey] == 0) { GameTextForPlayer(playerid, "~w~Vous n'avez pas de voiture a localisé", 2500, 3); return 1; }
		    if(cartrack[playerid]==0)
		    {
		        SendClientMessage(playerid,COLOR_WHITE,"Localisateur: Your vehicle's location is now uploaded to your phone");
		        SetPlayerCheckpoint(playerid,CarInfo[PlayerInfo[playerid][pPvehkey]][cLocationx], CarInfo[PlayerInfo[playerid][pPvehkey]][cLocationy], CarInfo[PlayerInfo[playerid][pPvehkey]][cLocationz], 5.0);
		        cartrack[playerid] = 1;
		        return 1;
			}
			else
			{
		        SendClientMessage(playerid,COLOR_WHITE,"Localisateur: The tracking on your vehicle has been canceled");
		        DisablePlayerCheckpoint(playerid);
		        cartrack[playerid] = 0;
		        return 1;
    			}*/
	}//
	if(strcmp(cmd, "/ouvrir", true) == 0 || strcmp(cmd, "/open", true) == 0 || strcmp(cmd, "/unlock", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        for(new i = 0; i < sizeof(HouseInfo); i++)
			{
				if (PlayerToPoint(3, playerid,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]) || PlayerToPoint(3, playerid,HouseInfo[i][hExitx], HouseInfo[i][hExity], HouseInfo[i][hExitz]))
				{
					if(PlayerInfo[playerid][pPhousekey] == i)
					{
						if(HouseInfo[i][hLock] == 1)
						{
							HouseInfo[i][hLock] = 0;
							GameTextForPlayer(playerid, "~w~Porte ~g~Ouverte", 5000, 6);
							PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
							return 1;
						}
						if(HouseInfo[i][hLock] == 0)
						{
							HouseInfo[i][hLock] = 1;
							GameTextForPlayer(playerid, "~w~Porte ~r~Fermer", 5000, 6);
							PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
							return 1;
						}
					}
					else
					{
						GameTextForPlayer(playerid, "~r~Vous n'avez pas la clef", 5000, 6);
						return 1;
					}
				}
			}
			for(new i = 0; i < sizeof(BizzInfo); i++)
			{
				if (PlayerToPoint(3, playerid,BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]) || PlayerToPoint(3, playerid,BizzInfo[i][bExitX], BizzInfo[i][bExitY], BizzInfo[i][bExitZ]))
				{
					if(PlayerInfo[playerid][pPbiskey] == i)
					{
						if(BizzInfo[i][bLocked] == 1)
						{
							BizzInfo[i][bLocked] = 0;
							GameTextForPlayer(playerid, "~w~Biz ~g~Ouvert", 5000, 6);
							PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
							return 1;
						}
						if(BizzInfo[i][bLocked] == 0)
						{
							BizzInfo[i][bLocked] = 1;
							GameTextForPlayer(playerid, "~w~Biz ~r~Fermer", 5000, 6);
							PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
							return 1;
						}
					}
					else
					{
						GameTextForPlayer(playerid, "~r~Vous n'avez pas la clef", 5000, 6);
						return 1;
					}
				}
			}
			for(new i = 0; i < sizeof(SBizzInfo); i++)
			{
				if (PlayerToPoint(3, playerid,SBizzInfo[i][sbEntranceX], SBizzInfo[i][sbEntranceY], SBizzInfo[i][sbEntranceZ]))
				{
					if(PlayerInfo[playerid][pPbiskey] == i+100)
					{
						if(SBizzInfo[i][sbLocked] == 1)
						{
							SBizzInfo[i][sbLocked] = 0;
							GameTextForPlayer(playerid, "~w~Biz ~g~Ouvert", 5000, 6);
							PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
							return 1;
						}
						if(SBizzInfo[i][sbLocked] == 0)
						{
							SBizzInfo[i][sbLocked] = 1;
							GameTextForPlayer(playerid, "~w~Biz ~r~Fermer", 5000, 6);
							PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
							return 1;
						}
					}
					else
					{
						GameTextForPlayer(playerid, "~r~Vous n'avez pas la clef", 5000, 6);
						return 1;
					}
				}
			}
	    }
	    return 1;
	}
	if(strcmp(cmd, "/factionliste", true) == 0 || strcmp(cmd, "/factionsliste", true) == 0 || strcmp(cmd, "/factionlist", true) == 0) // By CuervO_NegrO
    {
        if(IsPlayerConnected(playerid))
        {
			SendClientMessage(playerid,COLOR_LIGHTBLUE,"******************FACTIONS*****************");
			SendClientMessage(playerid,COLOR_LIGHTBLUE,"| Faction ID: 1 | Faction Nom: L.S.P.D      |");
			SendClientMessage(playerid,COLOR_LIGHTBLUE,"| Faction ID: 2 | Faction Nom: F.B.I        |");
			SendClientMessage(playerid,COLOR_LIGHTBLUE,"| Faction ID: 3 | Faction Nom: Armée        |");
			SendClientMessage(playerid,COLOR_LIGHTBLUE,"| Faction ID: 4 | Faction Nom: Medecin      |");
			SendClientMessage(playerid,COLOR_LIGHTBLUE,"| Faction ID: 5 | Faction Nom: Vagos        |");
			SendClientMessage(playerid,COLOR_LIGHTBLUE,"| Faction ID: 6 | Faction Nom: Vercetti     |");
			SendClientMessage(playerid,COLOR_LIGHTBLUE,"| Faction ID: 7 | Faction Nom: Gouvernement |");
			SendClientMessage(playerid,COLOR_LIGHTBLUE,"| Faction ID: 8 | Faction Nom: Hitman       |");
			SendClientMessage(playerid,COLOR_LIGHTBLUE,"| Faction ID: 9 | Faction Nom: ABC Studio   |");
			SendClientMessage(playerid,COLOR_LIGHTBLUE,"| Faction ID: 14 | Faction Nom: Bikers      |");
			SendClientMessage(playerid,COLOR_LIGHTBLUE,"| Faction ID: 15 | Faction Nom: Ballas      |");
			SendClientMessage(playerid,COLOR_LIGHTBLUE,"| Faction ID: 16 | Faction Nom: Groove      |");
			SendClientMessage(playerid,COLOR_LIGHTBLUE,"| Faction ID: 17 | Faction Nom: Corleone    |");
			SendClientMessage(playerid,COLOR_LIGHTBLUE,"| Faction ID: 18 | Faction Nom: C.I.A       |");
			SendClientMessage(playerid,COLOR_LIGHTBLUE,"******************FACTIONS*****************");
		}
		return 1;
	}
	/*if(strcmp(cmd, "/changerbiz", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        for(new i = 0; i < sizeof(BizzInfo); i++)
	        {
				if (PlayerToPoint(3, playerid,BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]))//centerpoint 24-7
				{
	    			if(PlayerInfo[playerid][pPbiskey] == i)
					{
						if(i >= 8 && i <= 13)
						{
							tmp = strtok(cmdtext, idx);
							if(!strlen(tmp))
							{
								SendClientMessage(playerid, COLOR_WHITE, "USAGE: /changerbiz [item number]");
								SendClientMessage(playerid, COLOR_LIGHTBLUE, "|_____________________ 24-7 _____________________|");
								SendClientMessage(playerid, COLOR_GRAD1, "| 1: 24/7 $100k     			2: SexShop $200k");
								SendClientMessage(playerid, COLOR_GRAD1, "| 3: Bar $500k   				4: Restaurant $1M");
								SendClientMessage(playerid, COLOR_GRAD2, "| 5: Zip $2M      			6:  Casino $4M");
								SendClientMessage(playerid, COLOR_LIGHTBLUE, "|________________________________________________|");
								return 1;
							}
							new item = strval(tmp);
							if (item == 1 && GetPlayerMoney(playerid) > 99999)
							{
							    SendClientMessage(playerid, COLOR_GRAD2, "Ton Bizz a été reconstruit.");
							    BizzInfo[i][bExitX] = -30.946699;
								BizzInfo[i][bExitY] = -89.609596;
								BizzInfo[i][bExitZ] = 1003.546875;
								SafeGivePlayerMoney(playerid, -100000);
								BizzInfo[i][bInterior] = 2;
								OnPropUpdate();
								return 1;
							}
							else if (item == 2 && GetPlayerMoney(playerid) > 199999)
							{
			                    SendClientMessage(playerid, COLOR_GRAD2, "Ton Bizz a été reconstruit.");
							    BizzInfo[i][bExitX] = -100.6095;
								BizzInfo[i][bExitY] = -21.5757;
								BizzInfo[i][bExitZ] = 1000.7188;
								SafeGivePlayerMoney(playerid, -200000);
								BizzInfo[i][bInterior] = 3;
								OnPropUpdate();
								return 1;
							}
							else if (item == 3 && GetPlayerMoney(playerid) > 499999)
							{
			                    SendClientMessage(playerid, COLOR_GRAD2, "Ton Bizz a été reconstruit.");
							    BizzInfo[i][bExitX] = 1205.0803;
								BizzInfo[i][bExitY] = -9.9519;
								BizzInfo[i][bExitZ] = 1000.9219;
								SafeGivePlayerMoney(playerid, -500000);
								BizzInfo[i][bInterior] = 2;
								OnPropUpdate();
								return 1;
							}
							else if (item == 4 && GetPlayerMoney(playerid) > 999999)
							{
			                    SendClientMessage(playerid, COLOR_GRAD2, "Ton Bizz a été reconstruit.");
							    BizzInfo[i][bExitX] = 452.462799;
								BizzInfo[i][bExitY] = -18.247299;
								BizzInfo[i][bExitZ] = 1001.132812;
								SafeGivePlayerMoney(playerid, -1000000);
								BizzInfo[i][bInterior] = 1;
								OnPropUpdate();
								return 1;
							}
							else if (item == 5 && GetPlayerMoney(playerid) > 1999999)
							{
			                    SendClientMessage(playerid, COLOR_GRAD2, "Ton Bizz a été reconstruit.");
							    BizzInfo[i][bExitX] = 226.9761;
								BizzInfo[i][bExitY] = -8.1168;
								BizzInfo[i][bExitZ] = 1002.2109;
								SafeGivePlayerMoney(playerid, -2000000);
								BizzInfo[i][bInterior] = 5;
								OnPropUpdate();
								return 1;
							}
							else if (item == 6 && GetPlayerMoney(playerid) > 3999999)
							{
			                    SendClientMessage(playerid, COLOR_GRAD2, "Ton Bizz a été reconstruit.");
							    BizzInfo[i][bExitX] = 2019.0488;
								BizzInfo[i][bExitY] = 1017.9471;
								BizzInfo[i][bExitZ] = 996.8750;
								SafeGivePlayerMoney(playerid, -4000000);
								BizzInfo[i][bInterior] = 10;
								OnPropUpdate();
								return 1;
							}
							else
							{
								 SendClientMessage(playerid, COLOR_WHITE, "Vous n'avez pas assez d'argent pour pouvoir acheté ceci!");
							}
						}
						else
						{
                        	SendClientMessage(playerid, COLOR_GRAD2, "Impossible de changer ce biz");
						}
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD2, "Ce biz ne t'apartient pas.");
					}
				}
			}
		}
		return 1;
	}*/
//----------------------------------[LOCK]-----------------------------------------------
	/*if(strcmp(cmd, "/gang", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new carid;
			if (PlayerInfo[playerid][pMember] == 5 || PlayerInfo[playerid][pMember] == 6 || PlayerInfo[playerid][pMember] == 14 || PlayerInfo[playerid][pMember] == 15 || PlayerInfo[playerid][pMember] == 16 || PlayerInfo[playerid][pLeader] == 5 || PlayerInfo[playerid][pLeader] == 6 || PlayerInfo[playerid][pLeader] == 14 || PlayerInfo[playerid][pLeader] == 15 || PlayerInfo[playerid][pLeader] == 16)
			{
				if(gLastCar[playerid] != 0 && gLastCar[playerid] != PlayerInfo[playerid][pGangKey]+1)
				{
					if (GangCar[playerid] != gLastCar[playerid] && GangCar[playerid] != 512)
					{
						gLastDriver[GangCar[playerid]] = 520;
						gCarLock[GangCar[playerid]] = 0;
						UnLockCar(GangCar[playerid]);
					}
					GangCar[playerid] = gLastCar[playerid];
				}
			}
			if(GangCar[playerid] != 512 && !SwitchKey[playerid])
			{
				carid = GangCar[playerid];
			}
			//new driver = gLastDriver[carid];
			new lockstatus = gCarLock[carid];
			new Float:cx,Float:cy,Float:cz;
			GetVehiclePos(carid, cx, cy, cz);
			switch (lockstatus)
			{
				case 0:
				{
					if(GangCar[playerid] == carid && !SwitchKey[playerid])
					{
						GameTextForPlayer(playerid, "~w~Gang Vehicle ~r~Locked", 5000, 6);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						gCarLock[carid] = 1;
						LockCar(carid);
					}
					else if (PlayerInfo[playerid][pPhousekey] == carid-1)
					{
						GameTextForPlayer(playerid, "~w~Gang Vehicle ~r~Locked", 5000, 6);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						gCarLock[carid] = 1;
						LockCar(carid);
						return 1;
					}
				}
				case 1:
				{
					if(GangCar[playerid] == carid && !SwitchKey[playerid])
					{
						GameTextForPlayer(playerid, "~w~Gang Vehicle ~g~Unlocked", 5000, 6);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						gCarLock[carid] = 0;
						UnLockCar(carid);
					}
					if (PlayerInfo[playerid][pPhousekey] == carid-1)
					{
						GameTextForPlayer(playerid, "~w~Gang Vehicle ~g~Unlocked", 5000, 6);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						gCarLock[carid] = 0;
						UnLockCar(carid);
						return 1;
					}
				}
				default:
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   Error");
				}
			}
			if(carid == 256)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   You dont have a Vehicle !");
			}
		}
		return 1;
	}*/
//----------------------------------[PM]-----------------------------------------------
    if(strcmp(cmd, "/adminpm", true) == 0 || strcmp(cmd, "/apm", true) == 0 || strcmp(cmd, "/pm", true) == 0)
	//if(strcmp(cmd, "/pm", true)==0||strcmp(cmd, "/p", true) == 0)
	//if(strcmp(cmd, "/apm", true) == 0 || strcmp(cmd, "/ap", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
     		if (PlayerInfo[playerid][pAdmin] >= 1)
		  	{
	        	if(gPlayerLogged[playerid] == 0)
	        	{
	            	SendClientMessage(playerid, COLOR_GREY, "Vous devez êtres connecté!");
	            	return 1;
	        	}
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/ap)m [playerid/PartOfName] [text]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if (IsPlayerConnected(giveplayerid))
				{
			    	if(giveplayerid != INVALID_PLAYER_ID)
			    	{
			        	if(HidePM[giveplayerid] > 0)
			        	{
			            	SendClientMessage(playerid, COLOR_GREY, "Ce joueur à bloqué les MP!");
			            	return 1;
			        	}
						GetPlayerName(playerid, sendername, sizeof(sendername));
						GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						if(giveplayerid == playerid)
						{
							format(string, sizeof(string), " %s marmone quelque chose.", sendername);
							ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						}
						new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[64];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
						if(!strlen(result))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/ap)m [playerid/PartOfName] [text]");
							return 1;
						}
						format(string, sizeof(string), "Admin %s MP: %s", sendername, (result));
						SendClientMessage(giveplayerid, 0xBBA033AA, string);
						format(string, sizeof(string), "MP => [ID:%d] %s: %s", giveplayerid, giveplayer, (result));
						SendClientMessage(playerid,  0xE5C43EAA, string);
						return 1;
					}
				}
				else
				{
					format(string, sizeof(string), " L'ID %d n'est pas connecté.", giveplayerid);
					SendClientMessage(playerid, COLOR_GRAD1, string);
				}
			}
    		else
 			{
				SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé a utiliser cette commande!");
 			}
		}
		return 1;
	}
//----------------------------------[Whisper]-----------------------------------------------
    if(strcmp(cmd, "/chuchoter", true)==0||strcmp(cmd, "/w", true) ==0 || strcmp(cmd, "/chu", true) == 0)
   //if(strcmp(cmd, "/chuchoter", true) == 0 || strcmp(cmd, "/chu", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous devez être connecté!");
	            return 1;
	        }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/chu)choter [playerid/PartOfName] [text]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if (IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        new Float:x, Float:y, Float:z;
           			GetPlayerPos(giveplayerid,x,y,z);
			        if(PlayerToPoint(5, playerid, x, y, z))
			        {
						GetPlayerName(playerid, sendername, sizeof(sendername));
						GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						if(giveplayerid == playerid)
						{
							format(string, sizeof(string), " %s murmure quelque chose à lui même.", sendername);
							ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						}
						else
						{
						    format(string, sizeof(string), " %s chuchote quelque chose à %s", sendername, giveplayer);
							ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						}
						new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[64];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
						if(!strlen(result))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/chu)choter [playerid/PartOfName] [text]");
							return 1;
						}
						if(FindIP(result)) /// Anti-Reclama
    					{
        					SendClientMessage(playerid, COLOR_RED, "[Anti-PUB] Vous avez été kick pour avoir fait une pub ");
        					new advertiser[MAX_PLAYER_NAME];
							GetPlayerName(playerid, advertiser, sizeof(advertiser));
							format(string, sizeof(string), "[Anti-PUB] %s a été kické. Raison: Pub",advertiser);
							SendClientMessageToAll(COLOR_LIGHTRED,string);
							KickLog(string);
     		   				Kick(playerid);
        					return 1;
 						}
						format(string, sizeof(string), "%s chuchote: %s", sendername, (result));
						SendClientMessage(giveplayerid, COLOR_YELLOW, string);
						format(string, sizeof(string), "%s chuchote: %s", sendername, (result));
						SendClientMessage(playerid,  COLOR_YELLOW, string);
						CheckTextForBadWords(playerid, cmdtext);
						return 1;
					}
					else
					{
					    SendClientMessage(playerid,  COLOR_GREY, "Ce joueur n'est pas près de vous!");
					    return 1;
					}
				}
			}
			else
			{
					format(string, sizeof(string), "L'ID %d n'est pas connectée.", giveplayerid);
					SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
//ATM STAFF
	if(strcmp(cmd, "/retireratm", true) == 0 || strcmp(cmd, "/ratm", true) == 0)
		{
		    if(IsPlayerConnected(playerid))
		    {
		        if(!PlayerToPoint(3, playerid, -32.276363,-57.995586,1003.139953) && !PlayerToPoint(3, playerid, 374.718902,167.128982,1007.987304))
		        {
		            SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas a coté d'un ATM!");
		            return 1;
		        }
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /retireratm [montant]");
					format(string, sizeof(string), "Vous avez $%d sur votre compte bancaire.", PlayerInfo[playerid][pAccount]);
					SendClientMessage(playerid, COLOR_GRAD3, string);
					return 1;
				}
				new cashdeposit = strval(tmp);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /retireratm [montant]");
					format(string, sizeof(string), "  Vous avez $%d sur votre compte bancaire.", PlayerInfo[playerid][pAccount]);
					SendClientMessage(playerid, COLOR_GRAD3, string);
					return 1;
				}
				if (cashdeposit > PlayerInfo[playerid][pAccount] || cashdeposit < 1)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Vous n'avez pas cette somme sur votre compte bancaire!");
					return 1;
				}

				/*if (PlayerInfo[playerid][pJobTimer] > 0)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Attendez que votre transaction précédente se termine!");
					return 1;
				}*/

				if (cashdeposit > 1000)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Vous ne pouvez pas retirer plus de $1.000!");
					return 1;
				}

			    ConsumingMoney[playerid] = 1;
				SafeGivePlayerMoney(playerid,cashdeposit);
				PlayerInfo[playerid][pAccount]=PlayerInfo[playerid][pAccount]-cashdeposit;
				format(string, sizeof(string), "Vous avez retiré $%d de votre compte. Il vous reste: $%d ", cashdeposit,PlayerInfo[playerid][pAccount]);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				//PlayerInfo[playerid][pJobTimer] = 12;

	            GetPlayerName(playerid, giveplayer, sizeof(giveplayer));
	 			format(string, sizeof(string), "  ID(%d) -%s a retiré %d de son compte bancaire.", playerid,giveplayer,cashdeposit);
				ABroadCast(COLOR_YELLOW,string,1);
				PayLog(string);
				return 1;
			}
			return 1;
		}

	/*if(strcmp(cmd, "/deposeratm", true) == 0 || strcmp(cmd, "/datm", true) == 0)
		{
			if(IsPlayerConnected(playerid))
  			{
		        if(!PlayerToPoint(3, playerid, -32.276363,-57.995586,1003.139953) && !PlayerToPoint(3, playerid, 374.718902,167.128982,1007.987304))
		        {
		            SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas au Mistercash!");
		            return 1;
		        }
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /deposeratm [montant]");
					format(string, sizeof(string), "Vous avez $%d sur votre compte bancaire.", PlayerInfo[playerid][pAccount]);
					SendClientMessage(playerid, COLOR_GRAD3, string);
					return 1;
				}
				new cashdeposit = strval(tmp);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /deposeratm [montant]");
					format(string, sizeof(string), "Vous avez $%d sur votre compte bancaire.", PlayerInfo[playerid][pAccount]);
					SendClientMessage(playerid, COLOR_GRAD3, string);
					return 1;
				}
				if (cashdeposit > GetPlayerMoney(playerid) || cashdeposit < 1)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Vous n'avez pas cette somme sur vous");
					return 1;
				}

				//if (PlayerInfo[playerid][pJobTimer] > 0)
				//{
			//		SendClientMessage(playerid, COLOR_GRAD2, "Attendez que votre transaction précédente se termine!");
				//	return 1;
				//}

				if (cashdeposit > 100000)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Vous ne pouvez pas deposer plus de $100000!");
					return 1;
				}

				SafeGivePlayerMoney(playerid,-cashdeposit);
				new curfunds = PlayerInfo[playerid][pAccount];
				PlayerInfo[playerid][pAccount]=cashdeposit+PlayerInfo[playerid][pAccount];
				SendClientMessage(playerid, COLOR_WHITE, "|___________ Extrait de Compte ___________|");
				format(string, sizeof(string), "  Argent sur le compte avant depôt: $%d", curfunds);
				SendClientMessage(playerid, COLOR_GRAD2, string);
				format(string, sizeof(string), "  Somme déposée: $%d",cashdeposit);
				SendClientMessage(playerid, COLOR_GRAD4, string);
				SendClientMessage(playerid, COLOR_GRAD6, "|------------------------------------------|");
				format(string, sizeof(string), "  Argent sur le compte après dépôt: $%d", PlayerInfo[playerid][pAccount]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				//PlayerInfo[playerid][pJobTimer] = 12;

	            GetPlayerName(playerid, giveplayer, sizeof(giveplayer));

	 			format(string, sizeof(string), "  ID(%d) -%s à déposé %d sur son compte bancaire.", playerid,giveplayer,cashdeposit);
				ABroadCast(COLOR_YELLOW,string,1);
				PayLog(string);

				return 1;
			}
			return 1;
		}*/

	// END ATM STUFF
//----------------------------------[Car Whisper]-----------------------------------------------
if(strcmp(cmd, "/cv", true) == 0 || strcmp(cmd, "/chuchotervehicule", true) == 0 || strcmp(cmd, "/chuveh", true) == 0)
{
	if(IsPlayerConnected(playerid))
	{
	    if(gPlayerLogged[playerid] == 0)
	    {
	    	SendClientMessage(playerid, COLOR_GREY, "Vous devez être connecté!");
	        return 1;
     	}
	    if(!IsPlayerInAnyVehicle(playerid))
	    {
	        SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas dans un véhicule!");
	        return 1;
		}
		GetPlayerName(playerid, sendername, sizeof(sendername));
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' '))
		{
			idx++;
		}
		new offset = idx;
		new result[64];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
		{
			result[idx - offset] = cmdtext[idx];
			idx++;
		}
		result[idx - offset] = EOS;
		if(!strlen(result))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /chuchotervehicule (/cv) [text]");
			return 1;
		}
		new vehicle = GetPlayerVehicleID(playerid);
		for( new i = 0; i != MAX_PLAYERS; i++ )
		{
		    if(IsPlayerConnected(i) && IsPlayerInAnyVehicle(i))
		    {
		        if(GetPlayerVehicleID(i) == vehicle)
		        {
		            if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		            {
      					format(string, sizeof(string), "Conducteur %s : %s", sendername, result);
     					SendClientMessage(i,  0xD7DFF3AA, string);
					}
					else
					{
					    format(string, sizeof(string), "Passager %s : %s", sendername, result);
     					SendClientMessage(i,  0xD7DFF3AA, string);
					}
				}
		    }
		}
	}
	return 1;
}
//----------------------------------[Bank System]-----------------------------------------------
    if(strcmp(cmd, "/retirer", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerToPoint(40, playerid, 2310.4268,-13.2487,26.7422) || PlayerToPoint(3, playerid, 2007.8264160156, 1179.9221191406, 10.463212013245) || PlayerToPoint(3, playerid, 2094.11328125, 2224.2905273438, 10.577114105225) || PlayerToPoint(3, playerid, 2194.9216308594, 1993.6619873047, 11.939774513245) || PlayerToPoint(3, playerid, 1008.8481445313, 1067.7512207031, 10.642899513245) || PlayerToPoint(1.5, playerid, 1172.5912,-1328.4365,15.4034))
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					/*SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /retirer [Montant]");
					format(string, sizeof(string), "  Vous avez $%d sur votre compte.", PlayerInfo[playerid][pAccount]);
					SendClientMessage(playerid, COLOR_GRAD3, string);*/
					new banquemsg[256];//variable pour le format
   					format(banquemsg,256,"Bienvenue à la Banque de Los Santos ! \n\nIndiquer l'argent que vous désirez retirer :");// le tableau qu'on va afficher
    				ShowPlayerDialog(playerid,RETIRERMENU,DIALOG_STYLE_INPUT,"Guichet de la Banque ",banquemsg,"Retirer","Annuler");//creation du tableau
					return 1;
				}
				new cashdeposit = strval(tmp);
				if(!strlen(tmp))
				{
					format(string, sizeof(string), "  Vous avez $%d sur votre compte banquaire.", PlayerInfo[playerid][pAccount]);
					SendClientMessage(playerid, COLOR_GRAD3, string);
					return 1;
				}
				if (cashdeposit > PlayerInfo[playerid][pAccount] || cashdeposit < 1)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   Vous n'avez pas cette somme sur vous.");
					return 1;
				}
		    	//ConsumingMoney[playerid] = 1;
				SafeGivePlayerMoney(playerid,cashdeposit);
				PlayerInfo[playerid][pAccount]=PlayerInfo[playerid][pAccount]-cashdeposit;
				format(string, sizeof(string), "  Vous avez retiré $%d de votre compte banquaire. Vous possedez maintenant: $%d ", cashdeposit,PlayerInfo[playerid][pAccount]);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				return 1;
			}
			else
			{
   				SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas à la banque.");
	            return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/deposer ", true) == 0 || strcmp(cmd, "/deposer", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(!PlayerToPoint(40, playerid, 2310.4268,-13.2487,26.7422) || PlayerToPoint(3, playerid, 2007.8264160156, 1179.9221191406, 10.463212013245) || PlayerToPoint(3, playerid, 2094.11328125, 2224.2905273438, 10.577114105225) || PlayerToPoint(3, playerid, 2194.9216308594, 1993.6619873047, 11.939774513245) || PlayerToPoint(3, playerid, 1008.8481445313, 1067.7512207031, 10.642899513245) || PlayerToPoint(1.5, playerid, 1172.5912,-1328.4365,15.4034))
			{
	            SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas à la banque !");
	            return 1;
	        }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    new banquemsg[256];//variable pour le format
				format(banquemsg,256,"Bienvenue à la Banque de Los Santos ! \n\nIndiquer l'argent que vous désirez deposer :");// le tableau qu'on va afficher
				ShowPlayerDialog(playerid,DEPOSERMENU,DIALOG_STYLE_INPUT,"Guichet de la Banque ",banquemsg,"Deposer","Annuler");//creation du tableau
				/*SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /deposer [Montant]");
				format(string, sizeof(string), "  Vous avez maintenant $%d sur votre compte.", PlayerInfo[playerid][pAccount]);
				SendClientMessage(playerid, COLOR_GRAD3, string);*/
				return 1;
			}
			new cashdeposit = strval(tmp);
			if(!strlen(tmp))
			{
				format(string, sizeof(string), "   Vous avez $%d sur votre compte banquaire.", PlayerInfo[playerid][pAccount]);
				SendClientMessage(playerid, COLOR_GRAD3, string);
				return 1;
			}
			if (cashdeposit > GetPlayerMoney(playerid) || cashdeposit < 1)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Vous n'avez pas cette somme sur vous.");
				return 1;
			}
			SafeGivePlayerMoney(playerid,-cashdeposit);
			new curfunds = PlayerInfo[playerid][pAccount];
			PlayerInfo[playerid][pAccount]=cashdeposit+PlayerInfo[playerid][pAccount];
			SendClientMessage(playerid, COLOR_WHITE, "|___________ Extrait de Compte ___________|");
			format(string, sizeof(string), "  Argent sur le compte avant depôt: $%d", curfunds);
			SendClientMessage(playerid, COLOR_GRAD2, string);
			format(string, sizeof(string), "  Somme déposée: $%d",cashdeposit);
			SendClientMessage(playerid, COLOR_GRAD4, string);
			SendClientMessage(playerid, COLOR_GRAD6, "|-----------------------------------------------------------|");
			format(string, sizeof(string), "  Argent sur le compte après dépôt: $%d", PlayerInfo[playerid][pAccount]);
			SendClientMessage(playerid, COLOR_WHITE, string);
			return 1;
		}
		return 1;
	}
    if(strcmp(cmd, "/compte", true) == 0 || strcmp(cmd, "/balance", true) == 0 || strcmp(cmd, "/compt", true) == 0)
	//if(strcmp(cmd, "/compte", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pLocal] == 103 || PlayerToPoint(1.5, playerid, 1346.5016,-1758.7649,13.5156) || PlayerToPoint(1.5, playerid, 1592.7152,-2335.3748,13.5400) || PlayerToPoint(1.5, playerid, 2308.4612,-1634.4176,14.8270) || PlayerToPoint(1.5, playerid, 2865.9014,-1415.4203,11.0061) || PlayerToPoint(1.5, playerid, 2404.5913,-1229.8973,23.8301) || PlayerToPoint(1.5, playerid, 1172.5912,-1328.4365,15.4034))
	        {
				format(string, sizeof(string), "Vous avez $%d sur votre compte bancaire.",PlayerInfo[playerid][pAccount]);
				SendClientMessage(playerid, COLOR_YELLOW, string);
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas à la banque!");
	            return 1;
			}
		}
		return 1;
	}
    if(strcmp(cmd, "/de", true) == 0 || strcmp(cmd, "/dice", true) == 0 || strcmp(cmd, "/dee", true) == 0)
	//if(strcmp(cmd, "/de", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new dice = random(6)+1;
			if (gDice[playerid] == 1)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "** %s lance le dé et tombe sur %d", sendername,dice);
				ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Vous n'avez pas de dé.");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/piece", true) ==0 || strcmp(cmd, "/coin", true) == 0 || strcmp(cmd, "/jetterpiece", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new coin = random(2)+1;
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new coinname[20];
			if(coin == 1) { coinname = "face"; }
			else { coinname = "pile"; }
			format(string, sizeof(string), "** %s lance un piece et tombe sur %s", sendername,coinname);
			ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		return 1;
	}
     if(strcmp(cmd, "/transferer", true)==0 ||strcmp(cmd, "/virement", true) == 0 ||strcmp(cmd, "/tranfer", true) == 0)
	//if(strcmp(cmd, "/virement", true) == 0 || strcmp(cmd, "/virement", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pLevel] < 3)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Vous devez être niveau 3 pour pouvoir faire un transfert!");
				return 1;
			}
			if(!PlayerToPoint(40, playerid, 2310.4268,-13.2487,26.7422))
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas à la banque!");
	            return 1;
	        }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /virement [playerid/PartOfName] [montant]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /virement [playerid/PartOfName] [montant]");
				return 1;
			}
			moneys = strval(tmp);
			if (IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
					GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					playermoney = PlayerInfo[playerid][pAccount] ;
					if (moneys > 0 && playermoney >= moneys)
					{
						PlayerInfo[playerid][pAccount] -= moneys;
						PlayerInfo[giveplayerid][pAccount] += moneys;
						format(string, sizeof(string), "Vous avez fait un virement de $%d sur le compte de %s", moneys, giveplayer,giveplayerid);
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, COLOR_GRAD1, string);
						format(string, sizeof(string), "Vous avez reçus un virement de $%d du compte de la part de %s", moneys, sendername, playerid);
						SendClientMessage(giveplayerid, COLOR_GRAD1, string);
						format(string, sizeof(string), "%s à fait un virement de $%d à %s", sendername, moneys, giveplayer);
		                if(moneys >= 1000000)
						{
							ABroadCast(COLOR_YELLOW,string,1);
						}
						printf("%s", string);
						PayLog(string);
						PlayerPlaySound(giveplayerid, 1052, 0.0, 0.0, 0.0);
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD1, "Vous n'avez pas assez d'argent !");
					}
				}
			}
			else
			{
				format(string, sizeof(string), "L'ID %d n'est pas connecté.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/equipement", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerToPoint(100, playerid, 2785.3528,926.1937,10.7500))//centerpoint 24-7
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /equipement [numero]");
					SendClientMessage(playerid, COLOR_BLUE, "|____________ Army Armory ____________|");
					SendClientMessage(playerid, COLOR_WHITE, "| 1: Patrouille		2: Artillerie  |");
					SendClientMessage(playerid, COLOR_BLUE, "|_____________________________________|");
					return 1;
				}
				new item = strval(tmp);
				if (item == 1)
				{
				    if(PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
				    {
				        SafeResetPlayerWeapons(playerid);
						SafeGivePlayerWeapon(playerid, 23, 150);
						SafeGivePlayerWeapon(playerid, 31, 400);
						SafeGivePlayerWeapon(playerid, 29, 400);
						SafeGivePlayerWeapon(playerid, 17, 10);
						SetPlayerArmour(playerid, 100);
						SetPlayerHealth(playerid, 100);
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), " %s à pris son équipement de patrouille dans le casier.", sendername);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				    }
   				}
				else if (item == 2)
				{
				    if(PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
				    {
        					SafeResetPlayerWeapons(playerid);
							SafeGivePlayerWeapon(playerid, 24, 150);
							SafeGivePlayerWeapon(playerid, 31, 1000);
							SafeGivePlayerWeapon(playerid, 29, 1000);
							SafeGivePlayerWeapon(playerid, 27, 500);
							SafeGivePlayerWeapon(playerid, 34, 100);
							SafeGivePlayerWeapon(playerid, 17, 25);
							SetPlayerArmour(playerid, 100);
							SetPlayerHealth(playerid, 100);
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), " %s à pris son équipement d'artillerie dans le casier.", sendername);
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, "Mauvais numéro d'équipement!");
					return 1;
				}
			}
		}
		return 1;
	}
    if(strcmp(cmd, "/equiper", true) == 0 ||strcmp(cmd, "/equip", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerToPoint(100, playerid, 244.9618,-1348.2435,107.1833) || PlayerToPoint(3,playerid,1568.625122,-1690.535766,5.890600))//centerpoint 24-7
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /equiper [numero]");
					SendClientMessage(playerid, COLOR_RED, "|~~~~~~~~~~~~LSPD-Armurerie~~~~~~~~~~~~|");
					SendClientMessage(playerid, COLOR_YELLOW, "| ~1~: Equipement de Patrouille		~2~: Equipement Officié");
					SendClientMessage(playerid, COLOR_WHITE, "| ~3~: Equipement Lourd					~4~: Equipement Motard");
					SendClientMessage(playerid, COLOR_GREEN, "| ~5~: Equipement SWAT Standard				~6~: Equipement SWAT M4");
					SendClientMessage(playerid, BLEUC, "| ~7~: Equipement SWAT Shotgun					8: Equipement SWAT Sniper");
					SendClientMessage(playerid, ORANGE, "| ~9~: Equipement Armure + Vie      			 10: Equipement Pilote");
					SendClientMessage(playerid, COLOR_WHITE, "| ~12~: Equipement Habits Normaux");
					SendClientMessage(playerid, COLOR_RED, "|~~~~~~~~~~~~LSPD-Armurerie~~~~~~~~~~~~|");
					return 1;
				}
				new item = strval(tmp);
				if (item == 1)
				{
				    if(PlayerInfo[playerid][pMember] == 2||PlayerInfo[playerid][pLeader] == 2||PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1)
				    {
				        SafeResetPlayerWeapons(playerid);
						SafeGivePlayerWeapon(playerid, 24, 100);
						SafeGivePlayerWeapon(playerid, 31, 250);
						SafeGivePlayerWeapon(playerid, 41, 500);
						SetPlayerArmour(playerid, 100);
						SetPlayerHealth(playerid, 100);
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), " %s à pris son équipement de patrouille dans le casier.", sendername);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				    }
   				}
				else if (item == 2)
				{
				    if(PlayerInfo[playerid][pMember] == 2||PlayerInfo[playerid][pLeader] == 2||PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1)
				    {
				        if(PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pRank] >= 2)
				        {
        					SafeResetPlayerWeapons(playerid);
							SafeGivePlayerWeapon(playerid, 24, 100);
							SafeGivePlayerWeapon(playerid, 31, 250);
							SafeGivePlayerWeapon(playerid, 41, 500);
							SafeGivePlayerWeapon(playerid, 25, 300);
							SetPlayerArmour(playerid, 100);
							SetPlayerHealth(playerid, 100);
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), " %s à pris son équipement d'Officier dans le casier.", sendername);
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						}
						else
						{
						    SendClientMessage(playerid, COLOR_WHITE, "Vous devez être Rang 2 pour pouvoir prendre cet équipement");
						}
					}
				}
				else if (item == 3)
				{
					if(PlayerInfo[playerid][pMember] == 2||PlayerInfo[playerid][pLeader] == 2||PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1)
					{
					    SafeResetPlayerWeapons(playerid);
						SafeGivePlayerWeapon(playerid, 24, 100);
						SafeGivePlayerWeapon(playerid, 31, 250);
						SafeGivePlayerWeapon(playerid, 41, 500);
						SafeGivePlayerWeapon(playerid, 25, 300);
						SetPlayerArmour(playerid, 100);
						SetPlayerHealth(playerid, 100);
					    SetPlayerSkin(playerid, 71);
						GetPlayerName(playerid, sendername, sizeof(sendername));
  						format(string, sizeof(string), " %s à pris son équipement de convoyeur dans le casier.", sendername);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}
				else if (item == 4)
				{
					if(PlayerInfo[playerid][pMember] == 2||PlayerInfo[playerid][pLeader] == 2||PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1)
					{
					    if(PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pRank] >= 3)
				        {
        					SafeResetPlayerWeapons(playerid);
							SafeGivePlayerWeapon(playerid, 24, 100);
							SafeGivePlayerWeapon(playerid, 31, 250);
							SafeGivePlayerWeapon(playerid, 41, 500);
							SafeGivePlayerWeapon(playerid, 29, 700);
							SafeGivePlayerWeapon(playerid, 25, 300);
							SetPlayerArmour(playerid, 100);
							SetPlayerHealth(playerid, 100);
					    	SetPlayerSkin(playerid, 284);
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), " %s à pris son équipement de motar dans le casier.", sendername);
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                        }
						else
						{
						    SendClientMessage(playerid, COLOR_WHITE, "Vous devez être Rang 3 pour pouvoir prendre cet équipement");
						}
					}
				}
				else if (item == 5)
				{
					if(PlayerInfo[playerid][pMember] == 2||PlayerInfo[playerid][pLeader] == 2||PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1)
					{
					    if(authorizeswat == 1)
					    {
							SafeResetPlayerWeapons(playerid);
					    	SafeGivePlayerWeapon(playerid, 24, 400);
					    	SafeGivePlayerWeapon(playerid, 41, 999);
					    	SafeGivePlayerWeapon(playerid, 17, 5);
				    		SafeGivePlayerWeapon(playerid, 31, 600);
							SafeGivePlayerWeapon(playerid, 27, 300);
							SetPlayerArmour(playerid, 100);
							SetPlayerHealth(playerid, 100);
 		 					SetPlayerSkin(playerid, 285);
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), " %s à pris son équipement de SWAT standard dans le casier.", sendername);
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                        }
						else
						{
						    SendClientMessage(playerid, COLOR_WHITE, "L'équipement SWAT n'est pas autorisé");
						}
					}
				}
				else if (item == 6)
				{
					if(PlayerInfo[playerid][pMember] == 2||PlayerInfo[playerid][pLeader] == 2||PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1)
					{
					    if(authorizeswat == 1)
					    {
							SafeResetPlayerWeapons(playerid);
					    	SafeGivePlayerWeapon(playerid, 24, 400);
					    	SafeGivePlayerWeapon(playerid, 41, 999);
					    	SafeGivePlayerWeapon(playerid, 17, 5);
				    		SafeGivePlayerWeapon(playerid, 31, 600);
				    		SafeGivePlayerWeapon(playerid, 27, 300);
							SetPlayerArmour(playerid, 100);
							SetPlayerHealth(playerid, 100);
 		 					SetPlayerSkin(playerid, 285);
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), " %s à pris son équipement de SWAT M4 dans le casier.", sendername);
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						}
						else
						{
						    SendClientMessage(playerid, COLOR_WHITE, "L'équipement SWAT n'est pas autorisé");
						}
					}
				}
				else if (item == 7)
				{
					if(PlayerInfo[playerid][pMember] == 2||PlayerInfo[playerid][pLeader] == 2||PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1)
		   			{
		   			    if(authorizeswat == 1)
					    {
		   			    	SafeResetPlayerWeapons(playerid);
					    	SafeGivePlayerWeapon(playerid, 24, 400);
					    	SafeGivePlayerWeapon(playerid, 41, 999);
					    	SafeGivePlayerWeapon(playerid, 16, 5);
					    	SafeGivePlayerWeapon(playerid, 27, 100);
							SetPlayerArmour(playerid, 100);
							SetPlayerHealth(playerid, 100);
							SetPlayerSkin(playerid, 285);
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), " %s à pris son équipement de SWAT shotgun dans le casier.", sendername);
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                        }
						else
						{
						    SendClientMessage(playerid, COLOR_WHITE, "L'équipement SWAT n'est pas autorisé");
						}
					}
				}
				else if (item == 8)
				{
					if(PlayerInfo[playerid][pMember] == 2||PlayerInfo[playerid][pLeader] == 2||PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1)
				    {
				        if(authorizeswat == 1)
					    {
					    	SafeResetPlayerWeapons(playerid);
					    	SafeGivePlayerWeapon(playerid, 24, 400);
					    	SafeGivePlayerWeapon(playerid, 34, 50);
					    	SafeGivePlayerWeapon(playerid, 27, 300);
					    	SafeGivePlayerWeapon(playerid, 29, 300);
					    	SafeGivePlayerWeapon(playerid, 31, 300);
							SetPlayerArmour(playerid, 100);
							SetPlayerHealth(playerid, 100);
							SetPlayerSkin(playerid, 285);
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), " %s à pris son équipement de SWAT sniper dans le casier.", sendername);
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                        }
						else
						{
						    SendClientMessage(playerid, COLOR_WHITE, "L'équipement SWAT n'est pas autorisé");
						}
					}
				}
				else if (item == 9)
				{
				    if(PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1||PlayerInfo[playerid][pMember] == 7||PlayerInfo[playerid][pLeader] == 7)
				    {
						SetPlayerArmour(playerid, 100);
    	                SetPlayerHealth(playerid, 100);
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), " %s prends son gilet pare-balles et mange un donut's.", sendername);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				    }
				}
				else if (item == 10)
				{
					if(PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1||PlayerInfo[playerid][pMember] == 7||PlayerInfo[playerid][pLeader] == 7)
					{

					    	SafeResetPlayerWeapons(playerid);
					    	SafeGivePlayerWeapon(playerid, 24, 400);
					    	SafeGivePlayerWeapon(playerid, 34, 50);
					    	SafeGivePlayerWeapon(playerid, 27, 300);
					    	SafeGivePlayerWeapon(playerid, 29, 300);
					    	SafeGivePlayerWeapon(playerid, 31, 300);
							SetPlayerArmour(playerid, 100);
							SetPlayerHealth(playerid, 100);
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), " %s à pris son uniforme du casier.", sendername);
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}
				/*else if (item == 11)
				{
				    new originalskin = PlayerInfo[playerid][pModel];
					SetPlayerSkin(playerid, originalskin);
				}*/
				else if (item == 12)
				{
				    new originalskin = PlayerInfo[playerid][pChar];
					SetPlayerSkin(playerid, originalskin);
					SafeResetPlayerWeapons(playerid);
    	            SafeGivePlayerWeapon(playerid, 24, 400);
				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, "Mauvais numéro d'équipement!");
					return 1;
				}
			}
			if(PlayerToPoint(100, playerid, 222.6434,115.1870,999.0156) || PlayerToPoint(3,playerid,-1616.1294,681.1594,7.1875))//centerpoint 24-7
	        {
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, VERT, "USAGE: /equiper [numero]");
					SendClientMessage(playerid, COLOR_BLUE, "|~~~~~~~~~~*LSPD Police Armory*~~~~~~~~~|");
					SendClientMessage(playerid, COLOR_WHITE, "| 1: Equipement  Patrouille		2: Officier Patrol");
					SendClientMessage(playerid, COLOR_WHITE, "| 3: Convoyeur					4: Motard");
					SendClientMessage(playerid, COLOR_WHITE, "| 5: SWAT Standard				6: SWAT M4");
					SendClientMessage(playerid, COLOR_WHITE, "| 7: SWAT	Shotgun					8: SWAT Sniper");
					SendClientMessage(playerid, COLOR_WHITE, "| 9: Armure + Vie      			10: Pilote");
					SendClientMessage(playerid, COLOR_WHITE, "|     		12: Habits Normaux");
					SendClientMessage(playerid, VERT, "|~~~~~~~~~~~~~*~~~*~~~~~~~~~~~~~|");
					return 1;
				}
				new item = strval(tmp);
				if (item == 1)
				{
				    if(PlayerInfo[playerid][pMember] == 2||PlayerInfo[playerid][pLeader] == 2||PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1)
				    {
				        SafeResetPlayerWeapons(playerid);
						SafeGivePlayerWeapon(playerid, 24, 100);
						SafeGivePlayerWeapon(playerid, 31, 250);
						SafeGivePlayerWeapon(playerid, 41, 500);
						SetPlayerArmour(playerid, 100);
						SetPlayerHealth(playerid, 100);
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), " %s à pris son équipement de patrouille dans le casier.", sendername);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				    }
   				}
				else if (item == 2)
				{
				    if(PlayerInfo[playerid][pMember] == 2||PlayerInfo[playerid][pLeader] == 2||PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1)
				    {
				        if(PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pRank] >= 2)
				        {
        					SafeResetPlayerWeapons(playerid);
							SafeGivePlayerWeapon(playerid, 24, 100);
							SafeGivePlayerWeapon(playerid, 31, 250);
							SafeGivePlayerWeapon(playerid, 41, 500);
							SafeGivePlayerWeapon(playerid, 25, 300);
							SetPlayerArmour(playerid, 100);
							SetPlayerHealth(playerid, 100);
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), " %s à pris son équipement d'Officier dans le casier.", sendername);
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						}
						else
						{
						    SendClientMessage(playerid, COLOR_WHITE, "Vous devez être Rang 2 pour pouvoir prendre cet équipement");
						}
					}
				}
				else if (item == 3)
				{
					if(PlayerInfo[playerid][pMember] == 2||PlayerInfo[playerid][pLeader] == 2||PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1)
					{
					    SafeResetPlayerWeapons(playerid);
						SafeGivePlayerWeapon(playerid, 24, 100);
						SafeGivePlayerWeapon(playerid, 31, 250);
						SafeGivePlayerWeapon(playerid, 41, 500);
						SafeGivePlayerWeapon(playerid, 25, 300);
						SetPlayerArmour(playerid, 100);
						SetPlayerHealth(playerid, 100);
					    SetPlayerSkin(playerid, 71);
						GetPlayerName(playerid, sendername, sizeof(sendername));
  						format(string, sizeof(string), " %s à pris son équipement de convoyeur dans le casier.", sendername);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}
				else if (item == 4)
				{
					if(PlayerInfo[playerid][pMember] == 2||PlayerInfo[playerid][pLeader] == 2||PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1)
					{
					    if(PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pRank] >= 3)
				        {
        					SafeResetPlayerWeapons(playerid);
							SafeGivePlayerWeapon(playerid, 24, 100);
							SafeGivePlayerWeapon(playerid, 31, 250);
							SafeGivePlayerWeapon(playerid, 41, 500);
							SafeGivePlayerWeapon(playerid, 29, 700);
							SafeGivePlayerWeapon(playerid, 25, 300);
							SetPlayerArmour(playerid, 100);
							SetPlayerHealth(playerid, 100);
					    	SetPlayerSkin(playerid, 284);
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), " %s à pris son équipement de motar dans le casier.", sendername);
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                        }
						else
						{
						    SendClientMessage(playerid, COLOR_WHITE, "Vous devez être Rang 3 pour pouvoir prendre cet équipement");
						}
					}
				}
				else if (item == 5)
				{
					if(PlayerInfo[playerid][pMember] == 2||PlayerInfo[playerid][pLeader] == 2||PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1)
					{
					    if(authorizeswat == 1)
						{
							SafeResetPlayerWeapons(playerid);
					    	SafeGivePlayerWeapon(playerid, 24, 400);
					    	SafeGivePlayerWeapon(playerid, 41, 999);
					    	SafeGivePlayerWeapon(playerid, 17, 5);
				    		SafeGivePlayerWeapon(playerid, 31, 600);
							SafeGivePlayerWeapon(playerid, 27, 300);
							SetPlayerArmour(playerid, 100);
							SetPlayerHealth(playerid, 100);
 		 					SetPlayerSkin(playerid, 285);
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), " %s à pris son équipement de SWAT standard dans le casier.", sendername);
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                        }
						else
						{
						    SendClientMessage(playerid, COLOR_WHITE, "L'équipement SWAT n'est pas autorisé");
						}
					}
				}
				else if (item == 6)
				{
					if(PlayerInfo[playerid][pMember] == 2||PlayerInfo[playerid][pLeader] == 2||PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1)
					{
					    if(authorizeswat == 1)
						{
							SafeResetPlayerWeapons(playerid);
					    	SafeGivePlayerWeapon(playerid, 24, 400);
					    	SafeGivePlayerWeapon(playerid, 41, 999);
					    	SafeGivePlayerWeapon(playerid, 17, 5);
				    		SafeGivePlayerWeapon(playerid, 31, 600);
				    		SafeGivePlayerWeapon(playerid, 27, 300);
							SetPlayerArmour(playerid, 100);
							SetPlayerHealth(playerid, 100);
 		 					SetPlayerSkin(playerid, 285);
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), " %s à pris son équipement de SWAT M4 dans le casier.", sendername);
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						}
						else
						{
						    SendClientMessage(playerid, COLOR_WHITE, "L'équipement SWAT n'est pas autorisé");
						}
					}
				}
				else if (item == 7)
				{
					if(PlayerInfo[playerid][pMember] == 2||PlayerInfo[playerid][pLeader] == 2||PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1)
		   			{
		   			    if(authorizeswat == 1)
						{
		   			    	SafeResetPlayerWeapons(playerid);
					    	SafeGivePlayerWeapon(playerid, 24, 400);
					    	SafeGivePlayerWeapon(playerid, 41, 999);
					    	SafeGivePlayerWeapon(playerid, 16, 5);
					    	SafeGivePlayerWeapon(playerid, 27, 100);
							SetPlayerArmour(playerid, 100);
							SetPlayerHealth(playerid, 100);
							SetPlayerSkin(playerid, 285);
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), " %s à pris son équipement de SWAT shotgun dans le casier.", sendername);
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                        }
						else
						{
						    SendClientMessage(playerid, COLOR_WHITE, "L'équipement SWAT n'est pas autorisé");
						}
					}
				}
				else if (item == 8)
				{
					if(PlayerInfo[playerid][pMember] == 2||PlayerInfo[playerid][pLeader] == 2||PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1)
				    {
				        if(authorizeswat == 1)
						{
					    	SafeResetPlayerWeapons(playerid);
					    	SafeGivePlayerWeapon(playerid, 24, 400);
					    	SafeGivePlayerWeapon(playerid, 34, 50);
					    	SafeGivePlayerWeapon(playerid, 27, 300);
					    	SafeGivePlayerWeapon(playerid, 29, 300);
					    	SafeGivePlayerWeapon(playerid, 31, 300);
							SetPlayerArmour(playerid, 100);
							SetPlayerHealth(playerid, 100);
							SetPlayerSkin(playerid, 285);
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), " %s à pris son équipement de SWAT sniper dans le casier.", sendername);
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                        }
						else
						{
						    SendClientMessage(playerid, COLOR_WHITE, "L'équipement SWAT n'est pas autorisé");
						}
					}
				}
				else if (item == 9)
				{
				    if(PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1||PlayerInfo[playerid][pMember] == 7||PlayerInfo[playerid][pLeader] == 7)
				    {
						SetPlayerArmour(playerid, 100);
    	                SetPlayerHealth(playerid, 100);
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), " %s Prends son gilet pare-balles et mange un donut's.", sendername);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				    }
				}
				else if (item == 10)
				{
					if(PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1||PlayerInfo[playerid][pMember] == 7||PlayerInfo[playerid][pLeader] == 7)
					{

					    	SafeResetPlayerWeapons(playerid);
					    	SafeGivePlayerWeapon(playerid, 24, 400);
					    	SafeGivePlayerWeapon(playerid, 34, 50);
					    	SafeGivePlayerWeapon(playerid, 27, 300);
					    	SafeGivePlayerWeapon(playerid, 29, 300);
					    	SafeGivePlayerWeapon(playerid, 31, 300);
							SetPlayerArmour(playerid, 100);
							SetPlayerHealth(playerid, 100);
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), " %s à pris son uniforme du casier.", sendername);
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					else if(PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1)
					{
					    SafeResetPlayerWeapons(playerid);
				    	SafeGivePlayerWeapon(playerid, 24, 400);
				    	SafeGivePlayerWeapon(playerid, 34, 50);
				    	SafeGivePlayerWeapon(playerid, 27, 300);
				    	SafeGivePlayerWeapon(playerid, 29, 300);
				    	SafeGivePlayerWeapon(playerid, 31, 300);
						SetPlayerArmour(playerid, 100);
						SetPlayerHealth(playerid, 100);
				    	SetPlayerSkin(playerid, 283);
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), " %s à pris son uniforme du casier.", sendername);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}
				/*else if (item == 11)
				{
				    new originalskin = PlayerInfo[playerid][pModel];
					SetPlayerSkin(playerid, originalskin);
				}*/
				else if (item == 12)
				{
			    	if(PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1)
			    	{
				       new originalskin = PlayerInfo[playerid][pChar];
					   SetPlayerSkin(playerid, originalskin);
					   SafeResetPlayerWeapons(playerid);
    	               SafeGivePlayerWeapon(playerid, 24, 400);
    	            }
				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, "Mauvais numéro d'équiment!");
					return 1;
				}
			}
			return 1;
		}
	}
    if(strcmp(cmd, "/acheter", true) == 0 || strcmp(cmd, "/buy", true) == 0)
	//if(strcmp(cmd, "/acheter", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (!PlayerToPoint(100, playerid,-30.875, -88.9609, 1004.53))//centerpoint 24-7
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Vous n'êtes pas dans un 24/7!");
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /acheter [item number]");
			    if(!IsAtSexShop(playerid))
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "|_____________________ 24-7 _____________________|");
					SendClientMessage(playerid, COLOR_GRAD1, "| 1: Telephone $150       	2: Carte à Gratter $500");
					SendClientMessage(playerid, COLOR_GRAD1, "| 3: Annuaire $10      		4: Dé $10");
					SendClientMessage(playerid, COLOR_GRAD2, "| 5: Bidon d'Essence(20L) 50$ 6: Preservatif $1");
					SendClientMessage(playerid, COLOR_GRAD3, "| 7: Apareil Photo $50        8: Cagoule 500$");
					SendClientMessage(playerid, COLOR_GRAD3, "| 9: Montre $100              10: Outils de Pêche 150$");
					SendClientMessage(playerid, COLOR_GRAD4, "| 11: Corde $10               12: Bombe Lacrimo 50$");
					SendClientMessage(playerid, COLOR_GRAD4, "| 13: Briquet 5$              14: Cigarettes 30$");
					SendClientMessage(playerid, COLOR_GRAD4, "| 15: GPS 150$                16: Decodeur 10000$ (Level 3)");
					SendClientMessage(playerid, COLOR_GRAD4, "| 17: Talkie Walkie 1000$");
				}
				if(IsAtSexShop(playerid))
				{
				    SendClientMessage(playerid, COLOR_LIGHTBLUE, "|_____________________Sex Shop_____________________|");
				    SendClientMessage(playerid, COLOR_GRAD4, "| 18: God Mauve 150$          19: God Blanc 300$");
				    SendClientMessage(playerid, COLOR_GRAD4, "| 20: Long GodBlanc 450$      21: God blanc #2 450$");
				}
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "|________________________________________________|");
				return 1;
			}
			new item = strval(tmp);
			if(SBizzInfo[9][sbProducts] == 0)
			{
				GameTextForPlayer(playerid, "~r~Plus de Stock", 5000, 1);
				return 1;
			}
			if (item == 1 && GetPlayerMoney(playerid) > 149 && !IsAtSexShop(playerid))
			{
			    if(PlayerInfo[playerid][pTraderPerk] > 0)
			    {
					new skill = 150 / 100;
					new price = (skill)*(PlayerInfo[playerid][pTraderPerk]);
					new payout = 150 - price;
			        format(string, sizeof(string), "~r~-$%d", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
					SafeGivePlayerMoney(playerid,- payout);
					SBizzInfo[9][sbTill] += payout;
					ExtortionSBiz(9, payout);
			    }
			    else
			    {
			        format(string, sizeof(string), "~r~-$%d", 150);
					GameTextForPlayer(playerid, string, 5000, 1);
					SafeGivePlayerMoney(playerid,-150);
					SBizzInfo[9][sbTill] += 150;
					ExtortionSBiz(9, 150);
			    }
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				new randphone = 1000 + random(9999);//minimum 1000  max 9999
				PlayerInfo[playerid][pPnumber] = randphone;
				format(string, sizeof(string), "Telephone acheté, votre numéro est le %d", randphone);
				SendClientMessage(playerid, COLOR_GRAD4, string);
				SendClientMessage(playerid, COLOR_GRAD5, "Vous pouvez le vérifier à tout moment en tappant /stats");
				SendClientMessage(playerid, COLOR_WHITE, "Note: Vous pouvez utiliser /aide pour voir les commande du telephone.");
				return 1;
			}
			else if (item == 2 && GetPlayerMoney(playerid) > 500  && !IsAtSexShop(playerid))
			{
			    if(PlayerInfo[playerid][pTraderPerk] > 0)
			    {
					new skill = 500 / 100;
					new price = (skill)*(PlayerInfo[playerid][pTraderPerk]);
					new payout = 500 - price;
					SafeGivePlayerMoney(playerid,- payout);
					SBizzInfo[9][sbTill] += payout;
					ExtortionSBiz(9, payout);
					format(string, sizeof(string), "~r~-$%d", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				else
				{
				    SafeGivePlayerMoney(playerid,-500);
					SBizzInfo[9][sbTill] += 500;
					ExtortionSBiz(9, 500);
					format(string, sizeof(string), "~r~-$%d", 500);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				new prize;
				new symb1[32]; new symb2[32]; new symb3[32];
				new randcard1 = random(10);//minimum 1000  max 9999
				new randcard2 = random(10);//minimum 1000  max 9999
				new randcard3 = random(10);//minimum 1000  max 9999
				if(randcard1 >= 5)
				{
					format(symb1, sizeof(symb1), "~b~]");
					randcard1 = 1;
				}
				else if(randcard1 <= 4 && randcard1 >= 2)
				{
					format(symb1, sizeof(symb1), "~g~]");
					randcard1 = 2;
				}
				else if(randcard1 < 2)
				{
					format(symb1, sizeof(symb1), "~y~]");
					randcard1 = 3;
				}
				if(randcard2 >= 5)
				{
					format(symb2, sizeof(symb2), "~b~]");
					randcard2 = 1;
				}
				else if(randcard2 <= 4 && randcard2 >= 2)
				{
					format(symb2, sizeof(symb2), "~g~]");
					randcard2 = 2;
				}
				else if(randcard2 < 2)
				{
					format(symb2, sizeof(symb2), "~y~]");
					randcard2 = 3;
				}
				if(randcard3 >= 5)
				{
					format(symb3, sizeof(symb3), "~b~]");
					randcard3 = 1;
				}
				else if(randcard3 <= 4 && randcard3 >= 2)
				{
					format(symb3, sizeof(symb3), "~g~]");
					randcard3 = 2;
				}
				else if(randcard3 < 2)
				{
					format(symb3, sizeof(symb3), "~y~]");
					randcard3 = 3;
				}
				if(randcard1 == randcard2 && randcard1 == randcard3)
				{
					if(randcard1 > 5)
					{
						prize = 2500;
					}
					if(randcard1 <= 4 && randcard1 >= 2)
					{
						prize = 1500;
					}
					if(randcard1 < 2)
					{
						prize = 500;
					}
					SafeGivePlayerMoney(playerid,prize);
					SBizzInfo[9][sbTill] -= prize;
					ExtortionSBiz(9, prize);
					format(string, sizeof(string), "%s %s %s ~n~~n~~w~~g~$%d",symb1,symb2,symb3, prize);
				}
				else
				{
					format(string, sizeof(string), "%s %s %s ~n~~n~~w~~r~$0",symb1,symb2,symb3);
				}
				GameTextForPlayer(playerid, string, 3000, 3);
				return 1;
			}
			else if (item == 3 && GetPlayerMoney(playerid) > 10 && !IsAtSexShop(playerid))
			{
			    if(PlayerInfo[playerid][pTraderPerk] > 0)
			    {
					new skill = 10 / 100;
					new price = (skill)*(PlayerInfo[playerid][pTraderPerk]);
					new payout = 10 - price;
					SafeGivePlayerMoney(playerid,- payout);
					SBizzInfo[9][sbTill] += payout;
					ExtortionSBiz(9, payout);
					GameTextForPlayer(playerid, "~r~-$10", 5000, 1);
				}
				else
				{
				    SafeGivePlayerMoney(playerid,- 10);
					SBizzInfo[9][sbTill] += 10;
					ExtortionSBiz(9, 10);
					format(string, sizeof(string), "~r~-$%d", 10);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                PlayerInfo[playerid][pPhoneBook] = 1;
				format(string, sizeof(string), "Annuaire acheté, vous pouvez trouver le numéro de la personne que vous voulez!");
				SendClientMessage(playerid, COLOR_GRAD4, string);
				SendClientMessage(playerid, COLOR_WHITE, "Note: Tapez /numero <id/nom>.");
				return 1;
			}
			else if (item == 4 && GetPlayerMoney(playerid) > 10 && !IsAtSexShop(playerid))
			{
			    if(PlayerInfo[playerid][pTraderPerk] > 0)
			    {
					new skill = 10 / 100;
					new price = (skill)*(PlayerInfo[playerid][pTraderPerk]);
					new payout = 10 - price;
					SafeGivePlayerMoney(playerid,- payout);
					SBizzInfo[9][sbTill] += payout;
					ExtortionSBiz(9, payout);
					format(string, sizeof(string), "~r~-$%d", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				else
				{
				    SafeGivePlayerMoney(playerid,-10);
					SBizzInfo[9][sbTill] += 10;
					ExtortionSBiz(9, 10);
					format(string, sizeof(string), "~r~-$%d", 10);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				gDice[playerid] = 1;
				format(string, sizeof(string), "Dé acheté, vous pouvez les lancer pour jouer.");
				SendClientMessage(playerid, COLOR_GRAD4, string);
				SendClientMessage(playerid, COLOR_WHITE, "Note: Tapez /de ");
				return 1;
			}
			/*else if(item == 5 && GetPlayerMoney(playerid) > 5000)
			{
				if (gLastCar[playerid] != 0)
				{
					if(HireCar[playerid] != 299)
					{
						gCarLock[HireCar[playerid]] = 0;
						UnLockCar(HireCar[playerid]);
						HireCar[playerid] = 299;
					}
					if(PlayerInfo[playerid][pTraderPerk] > 0)
			    	{
						new skill = 5000 / 100;
						new price = (skill)*(PlayerInfo[playerid][pTraderPerk]);
						new payout = 5000 - price;
						SafeGivePlayerMoney(playerid,- payout);
						SBizzInfo[9][sbTill] += payout;
						ExtortionSBiz(9, payout);
						format(string, sizeof(string), "~r~-$%d", payout);
						GameTextForPlayer(playerid, string, 5000, 1);
					}
					else
					{
					    SafeGivePlayerMoney(playerid,-5000);
						SBizzInfo[9][sbTill] += 5000;
						ExtortionSBiz(9, 5000);
						format(string, sizeof(string), "~r~-$%d", 5000);
						GameTextForPlayer(playerid, string, 5000, 1);
					}
					SBizzInfo[9][sbProducts]--;
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					HireCar[playerid] = gLastCar[playerid];
					format(string, sizeof(string), "Key Purchased You Can Lock Your Last Vehicle.");
					SendClientMessage(playerid, COLOR_GRAD4, string);
					SendClientMessage(playerid, COLOR_WHITE, "HINT: Type /fermer ");
				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, "   You don't have a Vehicle to fit it to !");
				}
				return 1;
			}*/
			else if (item == 5 && GetPlayerMoney(playerid) > 20 && !IsAtSexShop(playerid))
			{
			    PlayerInfo[playerid][pFuel] = 20;
			    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			    //SendClientMessage(playerid, COLOR_WHITE, "Note: Tapez /allumer");
			    GameTextForPlayer(playerid, "~r~-$20", 5000, 1);
				return 1;
			}
			/*else if (item == 6 && GetPlayerMoney(playerid) > 500)
			{
				gSpeedo[playerid] = 1;
				if(PlayerInfo[playerid][pTraderPerk] > 0)
		    	{
					new skill = 500 / 100;
					new price = (skill)*(PlayerInfo[playerid][pTraderPerk]);
					new payout = 500 - price;
					SafeGivePlayerMoney(playerid,- payout);
					SBizzInfo[9][sbTill] += payout;
					ExtortionSBiz(9, payout);
					format(string, sizeof(string), "~r~-$%d", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				else
				{
				    SafeGivePlayerMoney(playerid,-500);
					SBizzInfo[9][sbTill] += 500;
					ExtortionSBiz(9, 500);
					format(string, sizeof(string), "~r~-$%d", 5000);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				SBizzInfo[9][sbProducts]--;
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "Speedometer Purchased.");
				SendClientMessage(playerid, COLOR_GRAD4, string);
				SendClientMessage(playerid, COLOR_WHITE, "HINT: Type /speedo ");
				return 1;
			}*/
			else if (item == 6 && GetPlayerMoney(playerid) > 1 && !IsAtSexShop(playerid))
			{
			    if(PlayerInfo[playerid][pTraderPerk] > 0)
		    	{
					new skill = 1 / 100;
					new price = (skill)*(PlayerInfo[playerid][pTraderPerk]);
					new payout = 1 - price;
					SafeGivePlayerMoney(playerid,- payout);
					format(string, sizeof(string), "~r~-$%d", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				else
				{
				    SafeGivePlayerMoney(playerid,-1);
					format(string, sizeof(string), "~r~-$%d", 1);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				Condom[playerid] ++;
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "Préservatif acheté.");
				SendClientMessage(playerid, COLOR_GRAD4, string);
				return 1;
			}
			/*else if (item == 7 && GetPlayerMoney(playerid) > 250)
			{
			    if(PlayerInfo[playerid][pTraderPerk] > 0)
		    	{
					new skill = 250 / 100;
					new price = (skill)*(PlayerInfo[playerid][pTraderPerk]);
					new payout = 250 - price;
					SafeGivePlayerMoney(playerid, - payout);
					format(string, sizeof(string), "~r~-$%d", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				else
				{
				    SafeGivePlayerMoney(playerid, - 250);
					format(string, sizeof(string), "~r~-$%d", 250);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "CD-Player Purchased.");
				SendClientMessage(playerid, COLOR_GRAD4, string);
				SendClientMessage(playerid, COLOR_WHITE, "HINT: Type /music");
				PlayerInfo[playerid][pCrashed] = 1;
				return 1;
			}*/
			/*else if (item == 7 && GetPlayerMoney(playerid) > 9)
			{
			    if(Groceries[playerid][pChickens] >= 3)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   You have to many Chickens, Cook some first !");
			        return 1;
			    }
			    if(PlayerInfo[playerid][pTraderPerk] > 0)
		    	{
					new skill = 10 / 100;
					new price = (skill)*(PlayerInfo[playerid][pTraderPerk]);
					new payout = 10 - price;
					SafeGivePlayerMoney(playerid, - payout);
					format(string, sizeof(string), "~r~-$%d", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				else
				{
				    SafeGivePlayerMoney(playerid, - 10);
					format(string, sizeof(string), "~r~-$%d", 10);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
			    SafeGivePlayerMoney(playerid, - 10);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "Chicken Purchased.");
				SendClientMessage(playerid, COLOR_GRAD4, string);
				format(string, sizeof(string), "~r~-$%d", 10);
				GameTextForPlayer(playerid, string, 5000, 1);
				new rand = random(15);
				Groceries[playerid][pChickens] += 1;
				Groceries[playerid][pChicken] += rand;
				return 1;
			}*/
			/*else if (item == 8 && GetPlayerMoney(playerid) > 9)
			{
			    if(Groceries[playerid][pHamburgers] >= 3)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   You have to many Hamburgers, Cook some first !");
			        return 1;
			    }
			    if(PlayerInfo[playerid][pTraderPerk] > 0)
		    	{
					new skill = 10 / 100;
					new price = (skill)*(PlayerInfo[playerid][pTraderPerk]);
					new payout = 10 - price;
					SafeGivePlayerMoney(playerid, - payout);
					format(string, sizeof(string), "~r~-$%d", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				else
				{
				    SafeGivePlayerMoney(playerid, - 10);
					format(string, sizeof(string), "~r~-$%d", 10);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
			    SafeGivePlayerMoney(playerid, - 10);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "Hamburger Purchased.");
				SendClientMessage(playerid, COLOR_GRAD4, string);
				format(string, sizeof(string), "~r~-$%d", 10);
				GameTextForPlayer(playerid, string, 5000, 1);
				new rand = random(15);
				Groceries[playerid][pHamburgers] += 1;
				Groceries[playerid][pHamburger] += rand;
				return 1;
			}*/
			/*else if (item == 9 && GetPlayerMoney(playerid) > 9)
			{
			    if(Groceries[playerid][pPizzas] >= 3)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   You have to many Pizzas, Cook some first !");
			        return 1;
			    }
			    if(PlayerInfo[playerid][pTraderPerk] > 0)
		    	{
					new skill = 10 / 100;
					new price = (skill)*(PlayerInfo[playerid][pTraderPerk]);
					new payout = 10 - price;
					SafeGivePlayerMoney(playerid, - payout);
					format(string, sizeof(string), "~r~-$%d", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				else
				{
				    SafeGivePlayerMoney(playerid, - 10);
					format(string, sizeof(string), "~r~-$%d", 10);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "Frozen Pizza Purchased.");
				SendClientMessage(playerid, COLOR_GRAD4, string);
				new rand = random(15);
				Groceries[playerid][pPizzas] += 1;
				Groceries[playerid][pPizza] += rand;
				return 1;
			}*/
			else if (item == 7 && GetPlayerMoney(playerid) > 49 && !IsAtSexShop(playerid))
			{
                SendClientMessage(playerid, COLOR_GREY, "Nous n'avons plus d'appareil photo, veuillez nous excuser.");
				return 1;
			}
			else if (item == 8 && GetPlayerMoney(playerid) > 499 && !IsAtSexShop(playerid))
			{
			    if(PlayerInfo[playerid][pLevel] < 5)
			    {
					SendClientMessage(playerid, COLOR_GREY, "Vous devez être niveau 5 pour pouvoir acheter une cagoule");
					return 1;
			    }
			    if(PlayerInfo[playerid][pMask] != 0)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "Vous avez déjà une cagoule");
					return 1;
			    }
			    if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)
			    {
                    GameTextForPlayer(playerid, "~w~Gratuit", 5000, 1);
				}
				else
				{
				    SafeGivePlayerMoney(playerid, - 500);
					format(string, sizeof(string), "~r~-$%d", 500);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "Cagoule acheteé.");
				GameTextForPlayer(playerid, string, 5000, 1);
				SendClientMessage(playerid, COLOR_GRAD4, string);
				SendClientMessage(playerid, COLOR_WHITE, "NOTE: Utilisez /Cagoule pour la mettre ou /enlevercagoule pour l'enlever.");
				PlayerInfo[playerid][pMask] = 1;
				OnPlayerUpdate(playerid);
				return 1;
			}
			else if (item == 9 && GetPlayerMoney(playerid) > 99 && !IsAtSexShop(playerid))
			{
			    if(PlayerInfo[playerid][pWatch] != 0)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "Vous avez déjà une montre");
			        return 1;
			    }
			    SafeGivePlayerMoney(playerid, - 100);
			    format(string, sizeof(string), "~r~-$%d", 100);
			    GameTextForPlayer(playerid, string, 5000, 1);
			    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			    format(string, sizeof(string), "Montre achetée.");
			    SendClientMessage(playerid, COLOR_WHITE, "Note: /heure");
			    SendClientMessage(playerid, COLOR_GRAD4, string);
			    PlayerInfo[playerid][pWatch] = 1;
			}
			else if (item == 10 && GetPlayerMoney(playerid) > 149 && !IsAtSexShop(playerid))
			{
			    if(PlayerInfo[playerid][pFishTool] != 0)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "Vous avez déjà du matériel de pêche!");
			        return 1;
			    }
			    SafeGivePlayerMoney(playerid, - 150);
			    format(string, sizeof(string), "~r~-$%d", 150);
			    GameTextForPlayer(playerid, string, 5000, 1);
			    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			    SendClientMessage(playerid, COLOR_GRAD4, "Matériel de pêche acheté.");
			    PlayerInfo[playerid][pFishTool] = 1;
			}
			else if (item == 11 && GetPlayerMoney(playerid) > 9 && !IsAtSexShop(playerid))
			{
			    if(Rope[playerid] >= 5)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "Vous avez déjà 5 cordes !");
			        return 1;
			    }
			    SafeGivePlayerMoney(playerid, - 10);
			    format(string, sizeof(string), "~r~-$%d", 10);
			    GameTextForPlayer(playerid, string, 5000, 1);
			    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			    SendClientMessage(playerid, COLOR_GRAD4, "Corde achetée.");
			    SendClientMessage(playerid, COLOR_GRAD4, "Note: Vous pouvez dès a présent /ligotter et /deligotter.");
			    Rope[playerid]++;
			}
			else if (item == 12 && GetPlayerMoney(playerid) > 49 && !IsAtSexShop(playerid))
			{
			    SafeGivePlayerMoney(playerid, - 50);
			    format(string, sizeof(string), "~r~-$%d", 50);
			    GameTextForPlayer(playerid, string, 5000, 1);
			    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			    SendClientMessage(playerid, COLOR_GRAD4, "Bombe Lacrimo achetée.");
			    SafeGivePlayerWeapon(playerid, 41, 200);
			}
			else if (item == 13 && GetPlayerMoney(playerid) > 4 && !IsAtSexShop(playerid))
			{
			    if(PlayerInfo[playerid][pLighter] != 0)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "Vous avez déjà un briquet! ");
			        return 1;
			    }
			    SafeGivePlayerMoney(playerid, - 5);
			    PlayerInfo[playerid][pLighter] = 30;
			    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			    format(string, sizeof(string), "~r~-$%d", 5);
			    GameTextForPlayer(playerid, string, 5000, 1);
			    SendClientMessage(playerid, COLOR_GRAD4, "Briquet acheté.");
			    OnPlayerUpdate(playerid);
			    return 1;
			}
			else if (item == 14 && GetPlayerMoney(playerid) > 29 && !IsAtSexShop(playerid))
			{
			    if(PlayerInfo[playerid][pCigarettes] != 0)
			    {
			        format(string, sizeof(string), "Vous avez encore %d cigarettes.", PlayerInfo[playerid][pCigarettes]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        return 1;
			    }
			    if(SBizzInfo[10][sbProducts] <= 0)
			    {
			        return SendClientMessage(playerid, COLOR_GREY, "Le Stock de cigarettes est épuisé");
			    }
			    SafeGivePlayerMoney(playerid, - 30);
			    PlayerInfo[playerid][pCigarettes] = 20;
			    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			    format(string, sizeof(string), "~r~-$%d", 30);
			    GameTextForPlayer(playerid, string, 5000, 1);
			    SendClientMessage(playerid, COLOR_GRAD4, "Cigarettes achetées.");
			    SendClientMessage(playerid, COLOR_WHITE, "Note: Vous pouvez dès a présent /fumer!");
			    SBizzInfo[10][sbTill] += 30;
				ExtortionSBiz(10, 30);
				SBizzInfo[10][sbProducts]--;
				OnPropUpdate();
			    OnPlayerUpdate(playerid);
			}
			else if (item == 15 && GetPlayerMoney(playerid) > 149 && !IsAtSexShop(playerid))
			{
			    if(PlayerInfo[playerid][pGPS] != 0)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "Vous avez déjà un GPS");
			        return 1;
			    }
			    SafeGivePlayerMoney(playerid, - 150);
			    format(string, sizeof(string), "~r~-$%d", 150);
			    GameTextForPlayer(playerid, string, 5000, 1);
			    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			    format(string, sizeof(string), "GPS acheté.");
			    SendClientMessage(playerid, COLOR_WHITE, "Note: /gps");
			    SendClientMessage(playerid, COLOR_GRAD4, string);
			    PlayerInfo[playerid][pGPS] = 1;
			}
			else if (item == 16 && GetPlayerMoney(playerid) > 4999 && !IsAtSexShop(playerid))
			{
			    if(PlayerInfo[playerid][pDecodeur] != 0)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "Vous avez déjà un Décodeur !");
			        return 1;
			    }
                if(PlayerInfo[playerid][pLevel] < 3)
                {
                    return SendClientMessage(playerid, COLOR_GRAD1, "Vous devez être minimum Level 3 pour pouvoir acheter un Décodeur.");
                }
			    SafeGivePlayerMoney(playerid, - 10000);
			    format(string, sizeof(string), "~r~-$%d", 10000);
			    GameTextForPlayer(playerid, string, 5000, 1);
			    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			    format(string, sizeof(string), "Decodeur acheté.");
			    SendClientMessage(playerid, COLOR_GRAD4, string);
			    PlayerInfo[playerid][pDecodeur] = 1;
			}
			else if (item == 17 && GetPlayerMoney(playerid) > 999 && !IsAtSexShop(playerid))
			{
			    if(PlayerInfo[playerid][pWT] == 1)
					{SendClientMessage(playerid, COLOR_GRAD4, "  Vous avez déja Talkie Walkie."); return 1; }
				SafeGivePlayerMoney(playerid, -1000);
				SBizzInfo[9][sbTill] += 1000;
				ExtortionSBiz(9, 1000);
				format(string, sizeof(string), "~r~-$%d", 1000);
				GameTextForPlayer(playerid, string, 5000, 1);
				SBizzInfo[9][sbProducts]--;
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "Talkie Walkie Acheté.");
				PlayerInfo[playerid][pWT] = 1;
				SendClientMessage(playerid, COLOR_GRAD4, string);
				SendClientMessage(playerid, COLOR_WHITE, "Mode d'emploi: Utilisez /T pour parler avec votre Talkie Walkie.");
				SendClientMessage(playerid, COLOR_WHITE, "Mode d'emploi: Utilisez /freq pour régler la fréquence de votre Talkie Walkie.");
				return 1;
			}
			else if (item == 18 && GetPlayerMoney(playerid) > 149 && IsAtSexShop(playerid))
			{
			    SafeGivePlayerMoney(playerid, - 150);
			    format(string, sizeof(string), "~r~-$%d", 150);
			    GameTextForPlayer(playerid, string, 5000, 1);
			    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			    SendClientMessage(playerid, COLOR_GRAD4, "God Mauve Acheté.");
			    SafeGivePlayerWeapon(playerid, 10, 200);
			}
			else if (item == 19 && GetPlayerMoney(playerid) > 299 && IsAtSexShop(playerid))
			{
			    SafeGivePlayerMoney(playerid, - 300);
			    format(string, sizeof(string), "~r~-$%d", 300);
			    GameTextForPlayer(playerid, string, 5000, 1);
			    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			    SendClientMessage(playerid, COLOR_GRAD4, "God Blanc Acheté.");
			    SafeGivePlayerWeapon(playerid, 11, 200);
			}
			else if (item == 20 && GetPlayerMoney(playerid) > 449 && IsAtSexShop(playerid))
			{
			    SafeGivePlayerMoney(playerid, - 450);
			    format(string, sizeof(string), "~r~-$%d", 450);
			    GameTextForPlayer(playerid, string, 5000, 1);
			    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			    SendClientMessage(playerid, COLOR_GRAD4, "Long God Blanc Acheté.");
			    SafeGivePlayerWeapon(playerid, 12, 200);
			}
			else if (item == 21 && GetPlayerMoney(playerid) > 349 && IsAtSexShop(playerid))
			{
			    SafeGivePlayerMoney(playerid, - 350);
			    format(string, sizeof(string), "~r~-$%d", 350);
			    GameTextForPlayer(playerid, string, 5000, 1);
			    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			    SendClientMessage(playerid, COLOR_GRAD4, "God Blanc #2 Acheté.");
			    SafeGivePlayerWeapon(playerid, 13, 200);
			}
			else if (item == 4654656 && GetPlayerMoney(playerid) > 109 && IsAtSexShop(playerid))
			{
			    SafeGivePlayerMoney(playerid, - 110);
			    format(string, sizeof(string), "~r~-$%d", 110);
			    GameTextForPlayer(playerid, string, 5000, 1);
			    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			    SendClientMessage(playerid, COLOR_GRAD4, "Tante de nuit Achetée.");
			    PlayerInfo[playerid][pTante] = 3;
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "Vous n'avez pas assez d'argent pour pouvoir acheté ceci!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/jetpack", true) == 0)
	{
            if(PlayerInfo[playerid][pAdmin] < 1)
            {
                SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use that command.");
                return 1;
            }
            SendClientMessage(playerid, 0xFF7F50AA, "You have jetpack now!");
            SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USEJETPACK);
            return 1;
    }
	if (strcmp(cmd, "/missile", true) == 0)
 	{
	  	if(PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pMember] == 3)
	    {
	        if (PlayerToPoint(60, playerid,831.0058,2959.2417,18.4550))
			{
		           if(missileactiver[playerid] == 1)
		           {
		               return SendClientMessage(playerid,0xF60000F6,"Vous avez déjà lancé un missile");
		           }
		           missileObjet[playerid] = CreateObject(3790,817.79528808594,2948.3608398438,31.969705581665,0,33,61.534362792969);
		           missileactiver[playerid] = 1;
		           return SendClientMessage(playerid,0xF60000F6,"Missile En place ! Choisisez votre cible /cible");
			}
			else
			{
			    return SendClientMessage(playerid,0xF60000F6,"Vous n'etes pas sur le bateau de l'armée.");
			}
		}
		else
		{
		    return SendClientMessage(playerid,0xF60000F6,"Seul l'armée peut faire ceci.");
		}

	}
	//---------------------------------[Spec]-----------------------------------
	if(strcmp(cmd, "/spec", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			new Float:X, Float:Y, Float:Z;
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /spec [playerid/PartOfName]" );
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /spec off" );
				return 1;
			}
			if(AdminDuty[playerid] == 0)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "Vous devez être en Service Admin !");
				return 1;
		    }
			if(strcmp("off", tmp, true, strlen(tmp)) == 0)
			{
			    if(WatchingTV[playerid] > 0)
			    {
					GetPlayerMoney(playerid);
			        WatchingTV[playerid] = 0;
					Spectate[playerid] = 253;
					SetPlayerPos(playerid, X, Y, Z);
					return 1;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas en train de spec !");
				    return 1;
				}
			}
			if(PlayerInfo[playerid][pAdmin] >= 1)
			{
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
						Spectate[playerid] = giveplayerid;
						new Float:health;
						GetPlayerHealth(Spectate[playerid], health);
						new Float:armor;
						GetPlayerArmour(Spectate[playerid], armor);
						GetPlayerPos(playerid, X, Y, Z);
						GetPlayerName(Spectate[playerid], giveplayer, sizeof(giveplayer));
						new cash =  GetPlayerMoney(Spectate[playerid]);
						if (PlayerInfo[playerid][pAdmin] >= 1)
						{
							format(string, sizeof(string), "(%d) %s $%d H:%.0f A:%.0f",Spectate[playerid],giveplayer,cash,health,armor);
						}
						SendClientMessage(playerid, COLOR_GREEN, string);
						WatchingTV[playerid] = 1;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREEN, "   Target is not available.");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   You are not authorized to use that command!");
				return 1;
			}
		}
		return 1;
	}

  	if (strcmp(cmd, "/cible", true) == 0)
    {
        if (PlayerToPoint(60, playerid,831.0058,2959.2417,18.4550))
		{
   				if(missileactiver[playerid] != 1)
                {
                    return SendClientMessage(playerid,0xF60000F6,"Vous n'avez pas posé de missile.");
                }
                tmp = strtok(cmdtext, idx);
                if(strlen(tmp) == 0)
                {
                    return SendClientMessage(playerid,0xF60000F6,"/cible <id du joueur>");
                }
                new id = strval(tmp);
                new carid = GetPlayerVehicleID(id);
                if(!IsPlayerConnected(id))
                {
                    return SendClientMessage(playerid,0xF60000F6,"Joueur non connecté.");
                }
                if(!IsABike(carid) || IsAPlane(carid) || IsABoat(carid))
                {
                    return SendClientMessage(playerid,0xF60000F6,"Le Joueur ne se trouve pas dans un avion/helico");
                }
                Cible1[playerid] = id;
                TimerFinMissile[playerid] = SetTimerEx("FinMissile",60000,0,"dddd",playerid,missileObjet[playerid]);
                CibleTimer[playerid] = SetTimerEx("Cible",100,1,"dddd",playerid,id,missileObjet[playerid]);

                return SendClientMessage(playerid,0xF60000F6,"Lancement du missile effectué !");
		}
		else
        {
  			return SendClientMessage(playerid,0xF60000F6,"Vous n'etes pas a sur le bateau de l'armée.");
		}
	}

	//--------CAR_OWNERSHIP_COMMANDS--------------------------------------------
	if(strcmp(cmd, "/aidevehicule", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pPcarkey] != -1 && PlayerInfo[playerid][pPcarkey2] != -1 && PlayerInfo[playerid][pPcarkey3] != -1)
	        {
				SendClientMessage(playerid, COLOR_GREEN,"__________________________________________________Aide Vehicule__________________________________________________");
				SendClientMessage(playerid, COLOR_WHITE,"** Véhicule *** /v [nom]");
				SendClientMessage(playerid, COLOR_WHITE,"** Véhicule *** Noms Disponibles: garer, fermer(1-3), vendre, vendrea, couleur, remplir");
				SendClientMessage(playerid, COLOR_WHITE,"** Autre *** /aidetel /aide /aidenote /aidelocation /aidebiz /aidechef /aidepeche /aidecuisine /aideirc");
				SendClientMessage(playerid, COLOR_WHITE,"** Autre *** /aidechat /aidekidnaping");
				SendClientMessage(playerid, COLOR_GREEN,"_________________________________________________________________________________________________________________");
				return 1;
			}
			else
			{
			    SendClientMessage(playerid,COLOR_GRAD2,"* Vous n'avez pas de voiture! *");
			    return 1;
			}
		}
				return 1;
	}
    if(strcmp(cmd, "/quitterfaction", true) == 0 || strcmp(cmd, "/quittefaction", true) == 0)
	{
	   if(IsPlayerConnected(playerid))
       {
		  if(PlayerInfo[playerid][pMember] != 0 || PlayerInfo[playerid][pLeader] != 0)
		  {
	      GetPlayerName(playerid, giveplayer, sizeof(giveplayer));
	      SendClientMessage(playerid, COLOR_LIGHTBLUE, " Vous avez quitter votre votre Faction, vous êtes redevenu un Civil.");
	      gTeam[playerid] = 3;
	      PlayerInfo[playerid][pLeader] = 0;
	      PlayerInfo[playerid][pTeam] = 3;
	      PlayerInfo[playerid][pMember] = 0;
	      PlayerInfo[playerid][pRank] = 0;
	      PlayerInfo[playerid][pChar] = 0;
	      PlayerInfo[playerid][pFMember] = 255;
	      PlayerInfo[playerid][pModel] = 299;
	      return 1;
	      }
	      else if(PlayerInfo[playerid][pMember] == 0)
	      {
	          SendClientMessage(playerid, COLOR_LIGHTBLUE, " Vous n'êtes pas dans une Faction/Famille.");
	          return 1;
          }
       }
	}
	if(strcmp(cmd, "/quitterfno", true) == 0)
	{
	   if(IsPlayerConnected(playerid))
       {
		  if(PlayerInfo[giveplayerid][pFMember] != 255)
		  {
	      GetPlayerName(playerid, giveplayer, sizeof(giveplayer));
	      SendClientMessage(playerid, COLOR_LIGHTBLUE, " Vous avez quitter votre votre FNO, vous êtes redevenu un Civil.");
	      gTeam[playerid] = 3;
	      PlayerInfo[playerid][pLeader] = 0;
	      PlayerInfo[playerid][pTeam] = 3;
	      PlayerInfo[playerid][pMember] = 0;
	      PlayerInfo[playerid][pRank] = 0;
	      PlayerInfo[playerid][pChar] = 0;
	      PlayerInfo[playerid][pFMember] = 255;
	      PlayerInfo[playerid][pModel] = 299;
	      SaveFamilies();
	      return 1;
	      }
	      else if(PlayerInfo[playerid][pMember] == 0)
	      {
	          SendClientMessage(playerid, COLOR_LIGHTBLUE, " Vous n'êtes pas dans une FNO.");
	          return 1;
          }
       }
	}
	/*if(strcmp(cmd, "/apark", true) == 0 || strcmp(cmd, "/agarer", true) == 0)
	{
		if(IsPlayerConnected(playerid))
 		{
			new Float:x,Float:y,Float:z;
			new Float:a;
			GetVehiclePos(idcar, x, y, z);
			GetVehicleZAngle(idcar, a);
            if(!IsAnOwnableCar(idcar))
            {
                SendClientMessage(playerid,COLOR_GREY,"Ce véhicule n'appartient a personne ! Il ne peut pas etre garé !");
                return 1;
            }
			if(PlayerInfo[playerid][pAdmin] >= 3)
			{
				VehicleInfo[VehicleOwned[idcar]][vX] = x;
				VehicleInfo[VehicleOwned[idcar]][vY] = y;
				VehicleInfo[VehicleOwned[idcar]][vZ] = z;
				VehicleInfo[VehicleOwned[idcar]][vAngle] = a;
				format(string, sizeof(string), "~n~ Vous avez garer ce vehicule a cette position. ~n~");
				GameTextForPlayer(playerid, "Vous avez garer ce vehicule a cette position. Il reaparaitra ici.", 10000, 3);
				//VehicleOwned[idcar] = SCRIPT_CARS;
	    		DestroyVehicle(idcar);
				return 1;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé à utiliser cette commande!");
			    return 1;
			}
		}
		return 1;
	}*/
	if(strcmp(cmd, "/fgarer", true) == 0)
	{
		if(IsPlayerConnected(playerid))
 		{
			new Float:x,Float:y,Float:z;
			new Float:a;
			GetVehiclePos(idcar, x, y, z);
			GetVehicleZAngle(idcar, a);
			if(!IsAnOwnableCar(idcar))
            {
                SendClientMessage(playerid,COLOR_GREY,"Ce véhicule n'appartient a personne ! Il ne peut pas etre garé !");
                return 1;
            }
			if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)
			{
				if(PlayerToPoint(60, playerid, 2182.0183,-1982.8234,13.5513))
				{
					{
						CarInfo[idcar][cLocationx] = x;
			         	CarInfo[idcar][cLocationy] = y;
			        	CarInfo[idcar][cLocationz] = z;
			           	CarInfo[idcar][cAngle] = a;
			        	SendClientMessage(playerid,COLOR_GREY,"Véhicule correctement garé a la fouriere.");
			        	OnPropUpdate();
	    	        	DestroyVehicle(idcar);
	    	         	new thiscar = CreateVehicle(CarInfo[idcar][cModel],CarInfo[idcar][cLocationx],CarInfo[idcar][cLocationy],CarInfo[idcar][cLocationz]+1.0,CarInfo[idcar][cAngle],CarInfo[idcar][cColorOne],CarInfo[idcar][cColorTwo],60000);
			         	return 1;
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Vous devez être a la fourrière !");
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas policer !");
			    return 1;
			}
		}
		return 1;
	}

	/*if(strcmp(cmd, "/carspawn", true) == 0)
	{
	    if(!IsPlayerConnected(playerid)) { return 1; }
	    if(PlayerInfo[playerid][pPvehkey]==999) { GameTextForPlayer(playerid, "~w~You do not have a car to locate", 2500, 3); return 1; }
	    if(PlayerInfo[playerid][pPnumber]==0) { SendClientMessage(playerid, COLOR_GRAD2, "You do not have a phone to locate your car spawn"); return 1; }
		SendClientMessage(playerid,COLOR_WHITE,"Car spawn location is red on a map");
  		SetPlayerCheckpoint(playerid,CarInfo[PlayerInfo[playerid][pPvehkey]][cLocationx], CarInfo[PlayerInfo[playerid][pPvehkey]][cLocationy], CarInfo[PlayerInfo[playerid][pPvehkey]][cLocationz], 5.0);
	    return 1;
	}*/
	/*if(strcmp(cmd, "/carlocate", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pPvehkey] != 999)
			{
			    if(PlayerInfo[playerid][pPnumber] != 0)
			    {
			        if(gPlayerCheckPointStatus[playerid] != CHECKPOINT_CAR)
			        {
						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
						format(string,sizeof(string),"* %s takes out a cellphone",sendername);
						ProxDetector(15.0,playerid,string,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE);
						Wait(5000);
						SendClientMessage(playerid,COLOR_WHITE,"On-Star: This is On-Star how can I help you?");
						Wait(2000);
						format(string,sizeof(string),"%s says: [Cell] I'd like to locate a stolen vehicle",sendername");
	                    ProxDetector(15.0,playerid,string,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE);
	                    Wait(2000);
						SendClientMessage(playerid,COLOR_WHIE,"On-Star: Okay sir, can I have your name and identification number please");
						Wait(2000);
						format(string,sizeof(string),"%s enters in the information into their cellphone",sendername);
						ProxDetector(15.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						Wait(2000);
						SendClientMessage(playerid,COLOR_WHITE,"On-Star: Okay sir, your car location is being uploaded to your phone.");
						Wait(500);
						SendClientMessage(playerid,COLOR_WHITE,"On-Star: If you wish to cancel the trace of your car, call this number again");
						Wait(500);
						SetPlayerCheckpoint(playerid,CarInfo[PlayerInfo[playerid][pPvehkey]][cLocationx], CarInfo[PlayerInfo[playerid][pPvehkey]][cLocationy], CarInfo[PlayerInfo[playerid][pPvehkey]][cLocationz], 5.0);
						gPlayerCheckpointStatus[playerid] = CHECKPOINT_CAR;
						return 1;
					}
					else
					{
					    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
						Wait(1000);
						SendClientMessage(playerid,COLOR_WHITE,"Your tracking of your vehicle has been automatically cancelled");
						return 1;
					}
				}
				else
				{
				    SendClientMessage(playerid,
				}
			}
			else
			{
				GameTextForPlayer(playerid, "~w~You do not have a car to locate", 5000, 1);
			}
		}
		return 1;
	}*/
	//--------END_CAR_OWNERSHIP_COMMANDS----------------------------------------
	if(strcmp(cmd, "/achetermaison", true) == 0 || strcmp(cmd, "/buyhouse", true) == 0 || strcmp(cmd, "/acheterhouse", true) == 0)
	//if(strcmp(cmd, "/achetermaison", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new Float:oldposx, Float:oldposy, Float:oldposz;
			GetPlayerName(playerid, playername, sizeof(playername));
			GetPlayerPos(playerid, oldposx, oldposy, oldposz);
			for(new h = 0; h < sizeof(HouseInfo); h++)
			{
				if(PlayerToPoint(2.0, playerid, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]) && HouseInfo[h][hOwned] == 0)
				{
					if(PlayerInfo[playerid][pLevel] < HouseInfo[h][hLevel])
					{
						format(string, sizeof(string), "Vous devez être niveau %d Pour pouvoir acheter cette maison!", HouseInfo[h][hLevel]);
						SendClientMessage(playerid, COLOR_GRAD5, string);
						return 1;
					}
					if(PlayerInfo[playerid][pPhousekey] != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
					{
						SendClientMessage(playerid, COLOR_WHITE, "Vous avez déjà une maison, tapez /vendremaison si vous voulez acheter celle la.");
						return 1;
					}
					if(GetPlayerMoney(playerid) > HouseInfo[h][hValue])
					{
						PlayerInfo[playerid][pPhousekey] = h;
						HouseInfo[h][hOwned] = 1;
						GetPlayerName(playerid, sendername, sizeof(sendername));
						strmid(HouseInfo[h][hOwner], sendername, 0, strlen(sendername), 255);
						SafeGivePlayerMoney(playerid,-HouseInfo[h][hValue]);
						PlayerPlayMusic(playerid);
						SetPlayerInterior(playerid,HouseInfo[h][hInt]);
						SetPlayerVirtualWorld(playerid,HouseInfo[h][hWorld]);
						SetPlayerPos(playerid,HouseInfo[h][hExitx],HouseInfo[h][hExity],HouseInfo[h][hExitz]);
						GameTextForPlayer(playerid, "~w~Bienvenue Chez Vous~n~Vous pouvez sortir quand vous voulez en tappant /sortir près de l'entree", 5000, 3);
						PlayerInfo[playerid][pInt] = HouseInfo[h][hInt];
						PlayerInfo[playerid][pLocal] = h;
						SendClientMessage(playerid, COLOR_WHITE, "Félicitation pour votre nouvel achat!");
						SendClientMessage(playerid, COLOR_WHITE, "Tapez /aidemaison pour voir les commandes de votre maison!");
                        DateProp(playerid);
						OnPropUpdate();
						OnPlayerUpdate(playerid);
						return 1;
					}
					else
					{
						SendClientMessage(playerid, COLOR_WHITE, "Vous navez pas assez d'argent!");
						return 1;
					}
				}
			}
		}
		return 1;
	}
    if(strcmp(cmd, "/louer", true) == 0 || strcmp(cmd, "/rentroom", true) == 0 || strcmp(cmd, "/louermaison", true) == 0)
	//if(strcmp(cmd, "/louer", true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
			new Float:oldposx, Float:oldposy, Float:oldposz;
			GetPlayerName(playerid, playername, sizeof(playername));
			GetPlayerPos(playerid, oldposx, oldposy, oldposz);
			for(new h = 0; h < sizeof(HouseInfo); h++)
			{
				if(PlayerToPoint(2.0, playerid, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]) && HouseInfo[h][hOwned] == 1 &&  HouseInfo[h][hRentabil] == 1)
				{
					if(PlayerInfo[playerid][pPhousekey] != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
					{
						SendClientMessage(playerid, COLOR_WHITE, "Vous avez déjà une maison, tapez /vendremaison si vous voulez louer celle ci.");
						return 1;
					}
					if(GetPlayerMoney(playerid) > HouseInfo[h][hRent])
					{
						PlayerInfo[playerid][pPhousekey] = h;
						SafeGivePlayerMoney(playerid,-HouseInfo[h][hRent]);
						HouseInfo[h][hTakings] = HouseInfo[h][hTakings]+HouseInfo[h][hRent];
						PlayerPlayMusic(playerid);
						SetPlayerInterior(playerid,HouseInfo[h][hInt]);
						SetPlayerVirtualWorld(playerid,HouseInfo[h][hWorld]);
						SetPlayerPos(playerid,HouseInfo[h][hExitx],HouseInfo[h][hExity],HouseInfo[h][hExitz]);
						GameTextForPlayer(playerid, "~w~Bienvenue Chez Vous~n~", 5000, 3);
						PlayerInfo[playerid][pInt] = HouseInfo[h][hInt];
						PlayerInfo[playerid][pLocal] = h;
						SendClientMessage(playerid, COLOR_WHITE, "Félicitation, vous pouvez entrer et sortir quand vous le voulez.");
						SendClientMessage(playerid, COLOR_WHITE, "Tapez /aidemaison pour voir les commandes de votre maison.");
						SendClientMessage(playerid, COLOR_WHITE, "Utilisez /finlocationmaison pour ne plus louer ici.");
						OnPlayerUpdate(playerid);
						return 1;
					}
					else
					{
						SendClientMessage(playerid, COLOR_WHITE, "Vous navez pas assez d'argent!");
						return 1;
					}
				}
			}
		}
		return 1;
	}
    if(strcmp(cmd, "/louervoiture", true) == 0 || strcmp(cmd, "/rentcar", true) == 0 || strcmp(cmd, "/louercar", true) == 0)
	//if(strcmp(cmd, "/louervoiture", true) == 0)
	{
        if(IsPlayerConnected(playerid))
		{
			if(GetPlayerVehicleID(playerid) >= 158 && GetPlayerVehicleID(playerid) <= 177)
			{
				new hirefee = HireCost(GetPlayerVehicleID(playerid));
				if(SBizzInfo[1][sbProducts] == 0)
				{
					GameTextForPlayer(playerid, "~r~Plus de Stock", 5000, 1);
					return 1;
				}
				if (GetPlayerMoney(playerid) <  SBizzInfo[1][sbEntranceCost])
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Vous n'avez pas assez d'argent!");
					return 1;
				}
				if(HireCar[playerid] != 299)
				{
					gCarLock[HireCar[playerid]] = 0;
					UnLockCar(HireCar[playerid]);
					SendClientMessage(playerid, COLOR_GREY, "Vous devez d'abord délouer votre véhicule de location!");
					return 1;
				}
				for(new i=0; i<MAX_PLAYERS; i++)
				{
				    if(HireCar[i] == GetPlayerVehicleID(playerid))
				    {
				        SendClientMessage(playerid, COLOR_GREY, "Cette voiture est déjà louée par quelqu'un!");
				        return 1;
				    }
				}
				if(PlayerInfo[playerid][pPbiskey] == 1)
				{
					GameTextForPlayer(playerid, "~w~Gratuit pour le Patron.", 5000, 3);
			        new playerveh = GetPlayerVehicleID(playerid);
                    new engine,lights,alarm,doors,bonnet,boot,objective;
         	        GetVehicleParamsEx(playerveh,engine,lights,alarm,doors,bonnet,boot,objective);
                    SetVehicleParamsEx(playerveh,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
       				gEngine[playerid] = 1;
			    	gEngine[GetPlayerVehicleID(playerid)] = 1;
					TogglePlayerControllable(playerid, 1);
					return 1;
				}
				SafeGivePlayerMoney(playerid,-SBizzInfo[1][sbEntranceCost]);
				SBizzInfo[1][sbTill] += SBizzInfo[1][sbEntranceCost];
				ExtortionSBiz(1, SBizzInfo[1][sbEntranceCost]);
				SBizzInfo[1][sbProducts]--;
				HireCar[playerid] = GetPlayerVehicleID(playerid);
				OnPropUpdate();
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~w~N'oubliez pas ~r~/delouervoiture~n~~g~/fermer ~w~pour fermer votre voiture",hirefee);
	            new playerveh = GetPlayerVehicleID(playerid);
                new engine,lights,alarm,doors,bonnet,boot,objective;
         	    GetVehicleParamsEx(playerveh,engine,lights,alarm,doors,bonnet,boot,objective);
                SetVehicleParamsEx(playerveh,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
                TogglePlayerControllable(playerid, 1);
				gEngine[playerid] = 1;
				engineOn[GetPlayerVehicleID(playerid)] = false;
				//TogglePlayerControllable(playerid, 1);
				GameTextForPlayer(playerid, string, 5000, 3);
			}
		}
		return 1;
	}
    if(strcmp(cmd, "/louermoto", true) ==0 || strcmp(cmd, "/rentbike", true) == 0 || strcmp(cmd, "/louercar", true) == 0)
	//if(strcmp(cmd, "/louermoto", true) == 0)
	{
        if(IsPlayerConnected(playerid))
		{
			if(GetPlayerVehicleID(playerid) >= 135 && GetPlayerVehicleID(playerid) <= 153)
			{
				new hirefee = HireCost(GetPlayerVehicleID(playerid));
				if(SBizzInfo[0][sbProducts] == 1)
				{
					GameTextForPlayer(playerid, "~r~Plus de Stock", 5000, 1);
					return 1;
				}
				if(PlayerInfo[playerid][pPbiskey] == 0)
				{
					GameTextForPlayer(playerid, "~w~Gratuit pour le Patron.", 5000, 3);
		            new playerveh = GetPlayerVehicleID(playerid);
                    new engine,lights,alarm,doors,bonnet,boot,objective;
         	        GetVehicleParamsEx(playerveh,engine,lights,alarm,doors,bonnet,boot,objective);
                    SetVehicleParamsEx(playerveh,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
       				gEngine[playerid] = 1;
			    	gEngine[GetPlayerVehicleID(playerid)] = 1;
					TogglePlayerControllable(playerid, 1);
					return 1;
				}
				if (GetPlayerMoney(playerid) <  SBizzInfo[0][sbEntranceCost])
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Vous n'avez pas assez d'argent!");
					return 1;
				}
				if(HireCar[playerid] != 299)
				{
					gCarLock[HireCar[playerid]] = 0;
					UnLockCar(HireCar[playerid]);
					SendClientMessage(playerid, COLOR_GREY, "Vous devez d'abord délouer votre véhicule de location!");
					return 1;
				}
				for(new i=0; i<MAX_PLAYERS; i++)
				{
				    if(HireCar[i] == GetPlayerVehicleID(playerid))
				    {
				        SendClientMessage(playerid, COLOR_GREY, "Cette voiture est déjà louée par quelqu'un!");
				        return 1;
				    }
				}
				SafeGivePlayerMoney(playerid,-SBizzInfo[0][sbEntranceCost]);
				SBizzInfo[0][sbTill] += SBizzInfo[0][sbEntranceCost];
				ExtortionSBiz(0, SBizzInfo[0][sbEntranceCost]);
				SBizzInfo[0][sbProducts]--;
				HireCar[playerid] = GetPlayerVehicleID(playerid);
				OnPropUpdate();
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~w~N'oubliez pas ~r~/delouermoto~n~~g~/fermer ~w~pour fermer votre vehicule",hirefee);
	            new playerveh = GetPlayerVehicleID(playerid);
                new engine,lights,alarm,doors,bonnet,boot,objective;
         	    GetVehicleParamsEx(playerveh,engine,lights,alarm,doors,bonnet,boot,objective);
                SetVehicleParamsEx(playerveh,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
				TogglePlayerControllable(playerid, 1);
				gEngine[playerid] = 1;
				gEngine[GetPlayerVehicleID(playerid)] = 1;
				GameTextForPlayer(playerid, string, 5000, 3);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/voiturelocation", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if (PlayerInfo[playerid][pAdmin] >= 1339)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /voiturelocation [key id]");
					return 1;
				}
				new car = strval(tmp);
				HireCar[playerid] = car;
				format(string, sizeof(string), "Vous pouvez fermer cette voiture %d.",car);
				SendClientMessage(playerid, COLOR_GRAD4, string);
				SendClientMessage(playerid, COLOR_WHITE, "Note: Tapez /fermer ");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/dao", true) == 0 || strcmp(cmd, "/deleteallobjects", true) == 0 || strcmp(cmd, "/supprimertousobjets", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if (PlayerInfo[playerid][pAdmin] >= 1339)
			{
				ClearAllObjects();
				return 1;
			}
			return SendClientMessage(playerid, COLOR_WHITE, "Vous n'êtes pas Admin !");
		}
		return 1;
	}
    if(strcmp(cmd, "/changerclef", true) == 0 || strcmp(cmd, "/switchkey", true) == 0 || strcmp(cmd, "/newclef", true) == 0)
	//if(strcmp(cmd, "/changerclef", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(!SwitchKey[playerid])
			{
				if(HireCar[playerid] != 299)
				{
					SwitchKey[playerid] = 1;
					GameTextForPlayer(playerid, "~w~Vous avez les clefs de votre voiture.", 5000, 6);
				}
				else
				{
					GameTextForPlayer(playerid, "~w~Vous avez les clefs de votre vehicule de location", 5000, 6);
				}
				return 1;
			}
			else
			{
				SwitchKey[playerid] = 0;
				GameTextForPlayer(playerid, "~w~Vous avez les clefs de votre vehicule de location", 5000, 6);
			}
		}
		return 1;
	}
	//if(strcmp(cmd, "/delouervoiture", true) == 0)
    if(strcmp(cmd, "/unlouervoiture", true) == 0 || strcmp(cmd, "/unrentcar", true) == 0 || strcmp(cmd, "/delouervoiture", true) == 0)
    //if(strcmp(cmd, "/unlouervoiture", true) ==0 || strcmp(cmd, "/unrentcar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(HireCar[playerid] != 299)
			{
			    if(idcar == HireCar[playerid])
			    {
			        TogglePlayerControllable(playerid, 1);
			    }
			    SetVehicleToRespawn(HireCar[playerid]);
				gCarLock[HireCar[playerid]] = 0;
				UnLockCar(HireCar[playerid]);
				HireCar[playerid] = 299;
				GameTextForPlayer(playerid, "~w~Vous ne louer plus votre voiture.", 5000, 3);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/unrentbike", true) == 0 || strcmp(cmd, "/delouermoto", true) == 0 || strcmp(cmd, "/delouermoto", true) == 0)
	//if(strcmp(cmd, "/delouermoto", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(HireCar[playerid] != 299)
			{
			    if(idcar == HireCar[playerid])
			    {
			        TogglePlayerControllable(playerid, 1);
			    }
			    SetVehicleToRespawn(HireCar[playerid]);
				gCarLock[HireCar[playerid]] = 0;
				UnLockCar(HireCar[playerid]);
				HireCar[playerid] = 299;
				GameTextForPlayer(playerid, "~w~Vous ne louer plus votre moto.", 5000, 3);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/finlocationmaison", true) == 0 || strcmp(cmd, "/delouermaison", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			GetPlayerName(playerid, playername, sizeof(playername));
			if(PlayerInfo[playerid][pPhousekey] != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Cette maison vous appartient!");
				return 1;
			}
			PlayerInfo[playerid][pPhousekey] = 255;
			SendClientMessage(playerid, COLOR_WHITE, "Vous êtes maintenant sans domicile.");
		}
		return 1;
	}
	if(strcmp(cmd, "/retirermaison", true) == 0 || strcmp(cmd, "/caissemaison", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			GetPlayerName(playerid, playername, sizeof(playername));
			new bouse = PlayerInfo[playerid][pPhousekey];
			if(PlayerInfo[playerid][pPhousekey] != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /retirermaison [montant]");
					format(string, sizeof(string), "Vous avez $%d dans le coffre de votre maison.", HouseInfo[bouse][hTakings]);
					SendClientMessage(playerid, COLOR_GRAD3, string);
					return 1;
				}
				new cashdeposit = strval(tmp);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /retirermaison [montant]");
					format(string, sizeof(string), "Vous avez $%d dans le coffre de votre maison.", HouseInfo[bouse][hTakings]);
					SendClientMessage(playerid, COLOR_GRAD3, string);
					return 1;
				}
				if (cashdeposit >  HouseInfo[bouse][hTakings] || cashdeposit < 1)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Vous n'avez pas assez dans votre coffre!");
					return 1;
				}
				if (!PlayerToPoint(100, playerid,HouseInfo[bouse][hExitx],HouseInfo[bouse][hExity],HouseInfo[bouse][hExitz]))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Vous êtes trop loin de votre maison!");
					return 1;
				}
				else
				{
				    //ConsumingMoney[playerid] = 1;
					SafeGivePlayerMoney(playerid,cashdeposit);
					HouseInfo[bouse][hTakings]=HouseInfo[bouse][hTakings]-cashdeposit;
					format(string, sizeof(string), "Vous avez retiré $%d de votre coffre Il vous reste: $%d ", cashdeposit,HouseInfo[bouse][hTakings]);
					OnPropUpdate();
					SendClientMessage(playerid, COLOR_YELLOW, string);
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "Vous n'avez pas de maison.");
			}
		}
		return 1;

	}
	if(strcmp(cmd, "/acarsell", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
		    GetPlayerName(playerid, playername, sizeof(playername));
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /acarsell [bizid]");
				return 1;
			}
			new car = strval(tmp);
			if(PlayerInfo[playerid][pAdmin] >= 4)
			{
				strmid(CarInfo[car][cOwner], "Concession", 0, strlen("Concession"), 9999);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				CarInfo[car][cOwned] = 0;
				CarInfo[car][cLock] = 1;
				format(string, sizeof(string), "~w~Vous avez vendu la voiture");
				GameTextForPlayer(playerid, string, 2500, 3);
				OnPropUpdate();
			}
			else
			{
			    SendClientMessage(playerid, COLOR_WHITE, "You are not an admin.");
			}
		}
		return 1;
	} // Hier

	if(strcmp(cmd, "/asellbiz", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			GetPlayerName(playerid, playername, sizeof(playername));
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /asellbiz [bizid]");
				return 1;
			}
			new biz = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
				BizzInfo[biz][bLocked] = 1;
				BizzInfo[biz][bOwned] = 0;
				strmid(BizzInfo[biz][bOwner], "The State", 0, strlen("The State"), 255);
				strmid(BizzInfo[biz][bExtortion], "Personne", 0, strlen("Personne"), 255);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~w~Vous avez vendu ce Biz");
				GameTextForPlayer(playerid, string, 10000, 3);
				OnPropUpdate();
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "Vous n'êtes pas autorisé à utiliser cette commande.");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/asellsbiz", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			GetPlayerName(playerid, playername, sizeof(playername));
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /asellsbiz [sbizid]");
				return 1;
			}
			new sbiz = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
				SBizzInfo[sbiz][sbLocked] = 1;
				SBizzInfo[sbiz][sbOwned] = 0;
				strmid(SBizzInfo[sbiz][sbOwner], "The State", 0, strlen("The State"), 255);
				strmid(SBizzInfo[sbiz][sbExtortion], "Personne", 0, strlen("Personne"), 255);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~w~Vous avez vendu ce SBiz");
				GameTextForPlayer(playerid, string, 10000, 3);
				OnPropUpdate();
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "Vous n'êtes pas autorisé à utiliser cette commande.");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/asellhouse", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			GetPlayerName(playerid, playername, sizeof(playername));
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /asellhouse [maisonid]");
				return 1;
			}
			new house = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
				HouseInfo[house][hHel] = 0;
				HouseInfo[house][hArm] = 0;
				HouseInfo[house][hHealthx] = 0;
				HouseInfo[house][hHealthy] = 0;
				HouseInfo[house][hHealthz] = 0;
				HouseInfo[house][hArmourx] = 0;
				HouseInfo[house][hArmoury] = 0;
				HouseInfo[house][hArmourz] = 0;
				HouseInfo[house][hLock] = 1;
				HouseInfo[house][hOwned] = 0;
				HouseInfo[house][hVec] = 418;
				HouseInfo[house][hVcol1] = -1;
				HouseInfo[house][hVcol2] = -1;
				strmid(HouseInfo[house][hOwner], "The State", 0, strlen("The State"), 255);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~w~Vous avez vendu cette maison", HouseInfo[house][hValue]);
				GameTextForPlayer(playerid, string, 10000, 3);
				OnPropUpdate();
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "Vous n'êtes pas autorisé à utiliser cette commande.");
			}
		}
		return 1;
	}
     if(strcmp(cmd, "/sellhouse", true) == 0 || strcmp(cmd, "/vendremaison", true) == 0 || strcmp(cmd, "/vendrehouse", true) == 0)
	//if(strcmp(cmd, "/vendremaison", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			GetPlayerName(playerid, playername, sizeof(playername));
			if(PlayerInfo[playerid][pPhousekey] == 255)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Vous n'avez pas de maison.");
				return 1;
			}
			if(PlayerInfo[playerid][pMarried] > 0)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "Vous êtes marrié, vous ne pouvez pas vendre votre maison!");
		        return 1;
		    }
			if(PlayerInfo[playerid][pPhousekey] != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
			{
				new house = PlayerInfo[playerid][pPhousekey];
				HouseInfo[house][hHel] = 0;
				HouseInfo[house][hArm] = 0;
				HouseInfo[house][hHealthx] = 0;
				HouseInfo[house][hHealthy] = 0;
				HouseInfo[house][hHealthz] = 0;
				HouseInfo[house][hArmourx] = 0;
				HouseInfo[house][hArmoury] = 0;
				HouseInfo[house][hArmourz] = 0;
				HouseInfo[house][hLock] = 1;
				HouseInfo[house][hOwned] = 0;
				HouseInfo[house][hVec] = 418;
				HouseInfo[house][hVcol1] = -1;
				HouseInfo[house][hVcol2] = -1;
				GetPlayerName(playerid, sendername, sizeof(sendername));
				strmid(HouseInfo[house][hOwner], "The State", 0, strlen("The State"), 255);
				//ConsumingMoney[playerid] = 1;
				SafeGivePlayerMoney(playerid,HouseInfo[house][hValue]);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~w~Felicitation~n~ Vous avez vendu cette maison pour ~n~~g~$%d", HouseInfo[house][hValue]);
				GameTextForPlayer(playerid, string, 10000, 3);
				PlayerInfo[playerid][pPhousekey] = 255;
				if(PlayerInfo[playerid][pLocal] == house)
				{
					SetPlayerInterior(playerid,0);
					SetPlayerVirtualWorld(playerid,0);
					SetPlayerPos(playerid,HouseInfo[house][hEntrancex],HouseInfo[house][hEntrancey],HouseInfo[house][hEntrancez]);
					PlayerInfo[playerid][pInt] = 0;
				}
				OnPropUpdate();
				OnPlayerUpdate(playerid);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "Vous n'avez pas de maison.");
			}
		}
		return 1;
	}
    if(strcmp(cmd, "/upgrademaison", true) == 0 || strcmp(cmd, "/houseupgrade", true) == 0 || strcmp(cmd, "/hu", true) == 0)
//	if(strcmp(cmd, "/houseupgrade", true)==0||strcmp(cmd, "/hu", true) == 0)
//	if(strcmp(cmd, "/upgrademaison", true) == 0 || strcmp(cmd, "/am", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new house = PlayerInfo[playerid][pPhousekey];
			GetPlayerName(playerid, playername, sizeof(playername));
			if (house != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /upgrademaison [numero]");
					SendClientMessage(playerid, COLOR_GREEN, "|_______ Amelioration Maison _______|");
					SendClientMessage(playerid, COLOR_WHITE, "| 1: Vie 		$50,000.");
					SendClientMessage(playerid, COLOR_WHITE, "| 2: Armure 	$100,000.");
					SendClientMessage(playerid, COLOR_GREEN, "|___________________________________|");
					return 1;
				}
				new item = strval(tmp);
				switch (item)
				{
					case 1:
					{
						if(SBizzInfo[6][sbProducts] == 0)
						{
							GameTextForPlayer(playerid, "~r~Plus de Stock", 5000, 1);
							return 1;
						}
						if(PlayerInfo[playerid][pLevel] < 5)
						{
							SendClientMessage(playerid, COLOR_GRAD5, "Vous devez être niveau 5 pour pouvoir acheter ceci.");
							return 1;
						}
						if(GetPlayerMoney(playerid) < 50000)
						{
							SendClientMessage(playerid, COLOR_GRAD5, "Vous n'avez pas assez d'argent.");
							return 1;
						}
						HouseInfo[house][hHel] = 1;
						SafeGivePlayerMoney(playerid,-25000);
						SBizzInfo[6][sbTill] += 50000;//heal buisness
						ExtortionSBiz(6, 25000);
						SBizzInfo[6][sbProducts]--;
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, COLOR_GRAD5, "Vous pouvez maintenant vous soigner dans votre maison, tapez /sante.");
					}
					case 2:
					{
						if(SBizzInfo[6][sbProducts] == 0)
						{
							GameTextForPlayer(playerid, "~r~Plus de Stock", 5000, 1);
							return 1;
						}
						if (PlayerInfo[playerid][pLevel] < 7)
						{
							SendClientMessage(playerid, COLOR_GRAD5, "Vous devez être niveau 7 pour pouvoir acheter ceci.");
							return 1;
						}
						if(GetPlayerMoney(playerid) < 100000)
						{
							SendClientMessage(playerid, COLOR_GRAD5, "Vous n'avez pas assez d'argent.");
							return 1;
						}
						HouseInfo[house][hArm] = 1;
						SafeGivePlayerMoney(playerid,-50000);
						SBizzInfo[6][sbTill] += 50000;//heal buisness
						ExtortionSBiz(6, 50000);
						SBizzInfo[6][sbProducts]--;
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, COLOR_GRAD5, "Vous pouvez maintenant avoir une armure dans votre maison, tapez /sante.");
					}
					/*case 3:
					{
						if(SBizzInfo[6][sbProducts] == 0)
						{
							GameTextForPlayer(playerid, "~r~Plus de Stock", 5000, 1);
							return 1;
						}
						if (PlayerInfo[playerid][pLevel] < 3)
						{
							SendClientMessage(playerid, COLOR_GRAD5, "You Must Be Level 3 To Purchase This");
							return 1;
						}
						if(GetPlayerMoney(playerid) < 500)
						{
							SendClientMessage(playerid, COLOR_GRAD5, "You Don't Have The Cash To Purchase This");
							return 1;
						}
						HouseInfo[house][hHealthx] = 1;
						SafeGivePlayerMoney(playerid,-500);
						SBizzInfo[6][sbTill] += 500;
						ExtortionSBiz(6, 500);
						SBizzInfo[6][sbProducts]--;
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, COLOR_GRAD5, "You can now use your TV set, type /tv.");
					}*/
				}
				OnPropUpdate();
				OnPlayerUpdate(playerid);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   You don't own a house");
				return 1;
			}
		}
		return 1;
	}
    if(strcmp(cmd, "/setrent", true) == 0 || strcmp(cmd, "/prixlocation", true) == 0 || strcmp(cmd, "/prixlocations", true) == 0)
	//if(strcmp(cmd, "/prixlocation", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new bouse = PlayerInfo[playerid][pPhousekey];
			GetPlayerName(playerid, playername, sizeof(playername));
			if (bouse != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /prixlocation [prix]");
					return 1;
				}
				if(strval(tmp) < 1 || strval(tmp) > 99999)
				{
					SendClientMessage(playerid, COLOR_WHITE, "Minimum $1, Maximum $99999.");
					return 1;
				}
				HouseInfo[bouse][hRent] = strval(tmp);
				OnPropUpdate();
				format(string, sizeof(string), "Le prix de location de la maison a été mis à $%d", HouseInfo[bouse][hRent]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Vous n'avez pas de maison.");
				return 1;
			}
		}
		return 1;
	}
    if(strcmp(cmd, "/virertous", true) == 0 || strcmp(cmd, "/evictall", true) == 0 || strcmp(cmd, "/virerall", true) == 0)
	//if(strcmp(cmd, "/virertous", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new bouse = PlayerInfo[playerid][pPhousekey];
			if (bouse != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
			{
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
						if(i != playerid)
						{
							if (PlayerInfo[i][pPhousekey] == PlayerInfo[playerid][pPhousekey] )
							{
								SendClientMessage(i, COLOR_WHITE, "Le propriétaire vous a viré de ça maison.");
								PlayerInfo[i][pPhousekey] = 255;
							}
						}
					}
				}
				SendClientMessage(playerid, COLOR_WHITE, "Everyone have been evicted.");
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   You don't own a house !");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/evict", true) == 0 || strcmp(cmd, "/expulser", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new bouse = PlayerInfo[playerid][pPhousekey];
			GetPlayerName(playerid, playername, sizeof(playername));
			if (bouse != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /expulser [playerid/PartOfName]");
				}
				new target;
				//target = strval(tmp);
				target = ReturnUser(tmp);
				if (target == playerid)
				{
					SendClientMessage(target, COLOR_WHITE, "Vous ne pouvez pas vous virer vous-même de votre maison !");
					return 1;
				}
				if(IsPlayerConnected(target))
				{
				    if(target != INVALID_PLAYER_ID)
				    {
						if(PlayerInfo[target][pPhousekey] == PlayerInfo[playerid][pPhousekey])
						{
							SendClientMessage(target, COLOR_WHITE, "Le propriétaire vous a viré de sa maison.");
							SendClientMessage(playerid, COLOR_WHITE, "Le joueur à été viré de votre maison");
							PlayerInfo[target][pPhousekey] = 255;
							return 1;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_WHITE, "Ce joueur ne loue pas votre maison!");
						    return 1;
						}
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   You don't own a house !");
				return 1;
			}
		}
		return 1;
	}
    if(strcmp(cmd, "/setrentable", true) == 0 || strcmp(cmd, "/setlouable", true) == 0 || strcmp(cmd, "/mettrelocation", true) == 0)
	//if(strcmp(cmd, "/mettrelocation", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new bouse = PlayerInfo[playerid][pPhousekey];
			GetPlayerName(playerid, playername, sizeof(playername));
			if (bouse != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /mettrelocation [0/1]");
				}
				HouseInfo[bouse][hRentabil] = strval(tmp);
				OnPropUpdate();
				format(string, sizeof(string), "La location de la maison a êté mise à %d.", HouseInfo[bouse][hRentabil]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   You don't own a house !");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/ucall", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp))
	        {
	            SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /ucall [phonenumber]");
	        }
	        if(PlayerInfo[playerid][pPnumber] == 0)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "  You don't have a cell phone!");
				return 1;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), " %s takes out a cellphone.", sendername);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			new phonenumb = strval(tmp);
			if(phonenumb == PlayerInfo[playerid][pPnumber])
			{
				SendClientMessage(playerid, COLOR_GRAD2, "  You just get a busy tone...");
				return 1;
			}
			if(Mobile[playerid] != 255)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "  You are already on a call...");
				return 1;
			}
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(PlayerInfo[i][pPnumber] == phonenumb && phonenumb != 0)
					{
						giveplayerid = i;
						Mobile[playerid] = giveplayerid; //caller connecting
						if(IsPlayerConnected(giveplayerid))
						{
						    if(giveplayerid != INVALID_PLAYER_ID)
						    {
						        if(PhoneOnline[giveplayerid] > 0)
						        {
						            SendClientMessage(playerid, COLOR_GREY, "   That players Phone is Offline!");
						            return 1;
						        }
								if (Mobile[giveplayerid] == 255)
								{
									format(string, sizeof(string), "Votre télépgone sonne, utilisez (/decrocher) CallerID: UNKNOWN");
									SendClientMessage(giveplayerid, COLOR_YELLOW, string);
									GetPlayerName(giveplayerid, sendername, sizeof(sendername));
									RingTone[giveplayerid] = 10;
									format(string, sizeof(string), "Le téléphone de %s sonne.", sendername);
									SendClientMessage(playerid, COLOR_WHITE, "NOTE: Utilisez T pour parler au téléphone et /racrocher pour raccrocher");
									ProxDetector(30.0, i, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
									CellTime[playerid] = 1;
									UnidentifedCall[playerid] = 1;
									return 1;
								}
							}
						}
					}
				}
			}
			SendClientMessage(playerid, COLOR_GRAD2, "  You just get a Busy tone...");
	    }
	    return 1;
	}
	//if(strcmp(cmd, "/appeler", true) == 0)
	if(strcmp(cmd, "/appeller", true) ==0 || strcmp(cmd, "/call", true) == 0 || strcmp(cmd, "/appeler", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /appeler [numero]");
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /annuaire (liste des numeros utiles)");
				return 1;
			}
			if(PlayerInfo[playerid][pPnumber] == 0)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Vous n'avez pas de telephone!");
				return 1;
			}
			if(PlayerInfo[playerid][pJailed] == 1 || PlayerInfo[playerid][pJailed] == 2)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "L'utilisation du téléphone est interdite lors d'une peine de prison.");
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), " %s sort son telephone.", sendername);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			new phonenumb = strval(tmp);
			/*if(phonenumb == list)
			{
			    SendClientMessage(playerid, COLOR_GREEN, "____________Services number list____________");
			    SendClientMessage(playerid, COLOR_WHITE, "111 - pizza stack co., 222 - bus services");
			    SendClientMessage(playerid, COLOR_WHITE, "103 - medics, 444 - taxi, 555 - mechanic");
			    SendClientMessage(playerid, COLOR_GREEN, "____________________________________________");
			    return 1;
			}*/
			if(phonenumb == 111)
			{
				new pizzaworkers = 0;
			    for(new i=0; i<MAX_PLAYERS; i++)
			    {
			        if(IsPlayerConnected(i))
			        {
			            if(PlayerInfo[i][pJob] == 17 && JobDuty[i] == 1)
			            {
			                pizzaworkers++;
			            }
			        }
			    }

			    if(pizzaworkers < 1)
          		{
          		    SendClientMessage(playerid, COLOR_GREY, "La ligne décroche.");
          		    SendClientMessage(playerid, 0xF4E19FAA, "Well Stacked Pizza Bonjour.");
          		    SendClientMessage(playerid, 0xF4E19FAA, "Well Stacked Pizza: Nous sommes désolé, mais aucun pizzaboy n'est en service.");
          		    SendClientMessage(playerid, COLOR_GREY, "La ligne racroche.");
              		return 1;
          		}
          		GetPlayerName(playerid, sendername, sizeof(sendername));
       			format(string, sizeof(string), "* %s à commandé une pizza. (utiliser /accepter pizza pour accepter l'appel)", sendername);
       			SendJobMessage(17, COLOR_WHITE, string);
       			SendClientMessage(playerid, COLOR_GREY, "La ligne décroche.");
       			SendClientMessage(playerid, 0xF4E19DAA, "Well Stacked Pizza Bonjour.");
       			if(pizzaworkers == 1) { format(string, sizeof(string), "Well Stacked Pizza: Tous les pizza boy ont été informé de votre commande."); }
       			else { format(string, sizeof(string), "Well Stacked Pizza: Nous avons %d pizza boys en service, ils ont tous été informé de votre appel!", pizzaworkers); }
				SendClientMessage(playerid, 0xF4E19DAA, string);
 			    SendClientMessage(playerid, COLOR_GREY, "La ligne racroche.");
       			PizzaCall = playerid;
			    return 1;
			}
   			if(phonenumb == 222)
   			{
   			    new routezonecheck = IsInBusrouteZone(playerid);
				new drivercount = 0;
				if (routezonecheck == 0)
				{
					for (new i=0; i<=MAX_PLAYERS; i++)
					{
						if (IsPlayerConnected(i) && BusrouteEast[i][0] != 0) drivercount++;
					}
					if (drivercount != 0)
					{
						format(string, sizeof(string), "Dépôt de Bus: Il y a %d chauffeur de bus sur la route EST.", drivercount);
						SendClientMessage(playerid, COLOR_WHITE, string);
						SendBusRoute(playerid, 0);
					}
					else SendClientMessage(playerid, COLOR_GREY, "Dépôt de Bus: Il n'y a aucun chauffeur de buz sur la route EST pour le moment.");
				}
				else if (routezonecheck == 1)
				{
					for (new i=0; i<=MAX_PLAYERS; i++)
					{
						if (IsPlayerConnected(i) && BusrouteWest[i][0] != 0) drivercount++;
					}
					if (drivercount != 0)
					{
						format(string, sizeof(string), "Dépôt de Bus: Il y a %d chauffeur de bus sur la route OUEST.", drivercount);
						SendClientMessage(playerid, COLOR_WHITE, string);
						SendBusRoute(playerid, 1);
					}
					else SendClientMessage(playerid, COLOR_GREY, "Dépôt de Bus: Il n'y a aucun chauffeur de buz sur la route OUEST pour le moment.");
				}
				else SendClientMessage(playerid, COLOR_GREY, "Dépôt de Bus: Aucun chauffeur de bus n'est en service.");
				return 1;
   			}
   			/*if(phonenumb == 103)
   			{
   			    if(Medics < 1)
		        {
		            SendClientMessage(playerid, COLOR_GREY, "   There are no Medics On Duty at the moment, try again later !");
		            return 1;
		        }
		        GetPlayerName(playerid, sendername, sizeof(sendername));
			    format(string, sizeof(string), "* %s is in need of a Medic. (use /accept medic to accept the call)", sendername);
		    	SendRadioMessage(4, TEAM_AZTECAS_COLOR, string);
		    	SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have called for a Medic, wait for a reply.");
		    	MedicCall = playerid;
		    	return 1;
   			}*/
   			if(phonenumb == 444)
   			{
			    if(TaxiDrivers < 1)
		        {
          			 SendClientMessage(playerid, COLOR_GREY, "Dépôt de Taxi: Aucun chauffeur de taxi n'est en service");
				     return 1;
		        }
		        if(TransportDuty[playerid] > 0)
		        {
		            SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez pas appeler un taxi pour le moment!");
		            return 1;
		        }
		        GetPlayerName(playerid, sendername, sizeof(sendername));
			    format(string, sizeof(string), "* %s a besoin d'un chauffeur de taxi. (utiliser /accepter taxi pour accepter l'appel)", sendername);
		    	SendJobMessage(13, TEAM_AZTECAS_COLOR, string);
	    		SendClientMessage(playerid, COLOR_GREY, "La ligne décroche.");
		    	SendClientMessage(playerid, 0xF4E19FAA, "Dépôt de Taxi: Tous les chauffeurs de taxi ont été informé de votre appel.");
		    	SendClientMessage(playerid, COLOR_GREY, "La ligne racroche.");
		    	TaxiCall = playerid;
		    	return 1;
	    	}
   			if(phonenumb == 555)
   			{
   			    new mechanicworkers = 0;
			    for(new i=0; i<MAX_PLAYERS; i++)
			    {
			        if(IsPlayerConnected(i))
			        {
			            if(PlayerInfo[i][pJob] == 7 && JobDuty[i] == 1)
			            {
			                mechanicworkers++;
			            }
			        }
			    }
   			    if(mechanicworkers < 1)
		        {
		            SendClientMessage(playerid, COLOR_GREY, "La ligne décroche.");
		            SendClientMessage(playerid, 0xBBE1F2AA, "Garage: Nous sommes désolé, mais aucun mecanicien n'est en service.");
		            SendClientMessage(playerid, COLOR_GREY, "La ligne racroche.");
		            return 1;
		        }
		        GetPlayerName(playerid, sendername, sizeof(sendername));
			    format(string, sizeof(string), "* %s a besoin d'un mecanicien. (utiliser /accepter mecanicien pour accepter l'appel)", sendername);
		    	SendJobMessage(7, COLOR_WHITE, string);
		    	SendClientMessage(playerid, COLOR_GREY, "La ligne décroche.");
		            SendClientMessage(playerid, 0xBBE1F2AA, "Garage: Tous les mecaniciens ont été informé de votre appel.");
		            SendClientMessage(playerid, COLOR_GREY, "La ligne racroche.");
		    	MechanicCall = playerid;
		    	return 1;
   			}
   			/*if(phonenumb == 1180)
   			{
   			    if(PlayerInfo[playerid][pLevel] < 2)
   			    {
   			        SendClientMessage(playerid, COLOR_GREEN, "Advertisement business: We're only advertising well known people's ads.");
   			        SendClientMessage(playerid, COLOR_GRAD2, "  They hang up...");
   			    }
   			    else
   			    {
   			    	SendClientMessage(playerid, COLOR_WHITE, "HINT: You now use T to talk on your cellphone, type /racrocher to hang up");
   			    	SendClientMessage(playerid, COLOR_GREEN, "Advertisement business: Bienvenue to the advertisement business, what would you like to advertise?");
   			    	SendClientMessage(playerid, COLOR_WHITE, "HINT: Type your ad here. Ex: Selling my Comet");
   			    	Mobile[playerid] = 1180;
				}
   			    return 1;
   			}*/
   			if(phonenumb == 3900)
   			{
   			    SendClientMessage(playerid, COLOR_WHITE, "Note: Vous pouvez utiliser T pour parler, Tapez /racrocher pour racrocher.");
   			    SendClientMessage(playerid, COLOR_GREEN, "ABC Studio: SVP laissez votre message apres le Beep!");
   			    SendClientMessage(playerid, COLOR_WHITE, "Beep!");
   			    Mobile[playerid] = 3900;
   			    return 1;
   			}
			if(phonenumb == 911)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Note: Vous pouvez utiliser T pour parler, Tapez /racrocher pour racrocher.");
				SendClientMessage(playerid, COLOR_ALLDEPT, "Urgence: Quel service désiré vous? Police ou Infirmié?");
				Mobile[playerid] = 911;
				return 1;
			}
			if(phonenumb == PlayerInfo[playerid][pPnumber])
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ça sonne occupé...");
				return 1;
			}
			if(Mobile[playerid] != 255)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Vous êtes déjà en appel...");
				return 1;
			}
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(PlayerInfo[i][pPnumber] == phonenumb && phonenumb != 0)
					{
						giveplayerid = i;
						Mobile[playerid] = giveplayerid; //caller connecting
						if(IsPlayerConnected(giveplayerid))
						{
						    if(giveplayerid != INVALID_PLAYER_ID)
						    {
						        if(PhoneOnline[giveplayerid] > 0)
						        {
						            SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté!");
						            return 1;
						        }
								if (Mobile[giveplayerid] == 255)
								{
									format(string, sizeof(string), "Votre telephone sonne, utiliser (/decrocher) Appelant: %s", sendername);
									SendClientMessage(giveplayerid, COLOR_YELLOW, string);
									GetPlayerName(giveplayerid, sendername, sizeof(sendername));
									RingTone[giveplayerid] = 10;
									format(string, sizeof(string), "Le telephone de %s sonne.", sendername);
									SendClientMessage(playerid, COLOR_WHITE, "NOTE: Utiliser T pour parler et /racrocher pour racrocher.");
									ProxDetector(30.0, i, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
									CellTime[playerid] = 1;
									return 1;
								}
							}
						}
					}
				}
			}
			SendClientMessage(playerid, COLOR_GRAD2, "Ligne occupé...");
		}
		return 1;
	}
	if(strcmp(cmd, "/txt", true) == 0 || strcmp(cmd, "/t", true) == 0 || strcmp(cmd, "/sms", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
		    if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous devez être connecté!");
	            return 1;
	        }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/t)ext [numerotel] [text chat]");
				return 1;
			}
			if(PlayerInfo[playerid][pPnumber] == 0)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Vous n'avez pas de telephone...");
				return 1;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), " %s prend son telephone.", sendername);
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			new phonenumb = strval(tmp);
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /sms [NumeroTel] [text chat]");
				return 1;
			}
			if(FindIP(result)) /// Anti-Reclama
    		{
        		SendClientMessage(playerid, COLOR_RED, "[Anti-PUB] Vous avez été kick pour avoir fait une pub ");
        		new advertiser[MAX_PLAYER_NAME];
				GetPlayerName(playerid, advertiser, sizeof(advertiser));
				format(string, sizeof(string), "[Anti-PUB] %s a été kické. Raison: Pub",advertiser);
				SendClientMessageToAll(COLOR_LIGHTRED,string);
				KickLog(string);
     		   	Kick(playerid);
        		return 1;
 			}
			if(phonenumb == 555)
			{
				if ((strcmp("Oui", result, true, strlen(result)) == 0) && (strlen(result) == strlen("Oui")))
				{
					SendClientMessage(playerid, COLOR_WHITE, "SMS Envoyé.");
					if (gTeam[playerid] == 2 || gTeam[playerid] == 1)
					{
						SendClientMessage(playerid, COLOR_YELLOW, "SMS: Je n'ai aucune idée de quoi vous voulez parler, Sender: MOLE (555)");
						RingTone[playerid] = 20;
						return 1;
					}
					return 1;
				}
				else
				{
					SendClientMessage(playerid, COLOR_YELLOW, "SMS: Un simple Oui ira, Sender: MOLE (555)");
					RingTone[playerid] = 20;
					return 1;
				}
			}
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(PlayerInfo[i][pPnumber] == phonenumb && phonenumb != 0)
					{
						giveplayerid = i;
						Mobile[playerid] = giveplayerid; //caller connecting
						if(IsPlayerConnected(giveplayerid))
						{
						    if(giveplayerid != INVALID_PLAYER_ID)
						    {
						        if(PhoneOnline[giveplayerid] > 0)
						        {
						            SendClientMessage(playerid, COLOR_GREY, "Le telephone de ce joueur est coupé!");
						            return 1;
						        }
								format(string, sizeof(string), "SMS: %s, Sender: %s (%d)", result,sendername,PlayerInfo[playerid][pPnumber]);
								GetPlayerName(giveplayerid, sendername, sizeof(sendername));
								//format(string, sizeof(string), " %s's phone beeps.", sendername);
								RingTone[giveplayerid] =20;
								SendClientMessage(playerid, COLOR_WHITE, "SMS Envoyé");
								SendClientMessage(giveplayerid, COLOR_YELLOW, string);
								SendClientMessage(playerid,  COLOR_YELLOW, string);
								format(string, sizeof(string), "~r~$-%d", txtcost);
								GameTextForPlayer(playerid, string, 5000, 1);
								SafeGivePlayerMoney(playerid,-txtcost);
								SBizzInfo[2][sbTill] += txtcost;
								ExtortionSBiz(2, txtcost);
					           	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					           	Mobile[playerid] = 255;
								return 1;
							}
						}
					}
				}
			}
			SendClientMessage(playerid, COLOR_GRAD2, "Echec de l'envoi du SMS...");
		}
		return 1;
	}
//-----------------------------------[House virtual world]---------------------------------
    if(strcmp(cmd, "/houseworld", true) == 0)
	{
		if(IsPlayerConnected(playerid))
    	{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "USAGE: /houseworld [World]");
				return 1;
			}
			new level;
			level = strval(tmp);
 	    	{
             		SetWorld = level;
	  				format(string, sizeof(string), "House World Is Set To %d", SetWorld);
	  				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        	}
		}
    	return 1;
    }
//----------------------------------[pickup]-----------------------------------------------
if(strcmp(cmd, "/pickup", true) ==0 || strcmp(cmd, "/repondre", true) == 0||strcmp(cmd, "/decrocher", true) == 0||strcmp(cmd, "/dec", true) == 0)
	//if(strcmp(cmd, "/decrocher", true) == 0)
	{
        if(IsPlayerConnected(playerid))
		{
			if(Mobile[playerid] != 255)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Vous êtes déjà sur un appel...");
				return 1;
			}
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(Mobile[i] == playerid)
					{
						Mobile[playerid] = i; //caller connecting
						SendClientMessage(i,  COLOR_GRAD2, "La ligne décroche.");
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), " %s décroche son telephone.", sendername);
						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						RingTone[playerid] = 0;
					}

				}
			}
		}
		return 1;
	}
if(strcmp(cmd, "/raccrocher", true)==0||strcmp(cmd, "/racrocher", true)==0||strcmp(cmd, "/hangup", true) == 0)
	//if(strcmp(cmd, "/racrocher", true) == 0 || strcmp(cmd, "/rac", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new caller = Mobile[playerid];
			if(IsPlayerConnected(caller))
			{
			    if(caller != INVALID_PLAYER_ID)
			    {
					if(caller != 255)
					{
						if(caller < 255)
						{
							SendClientMessage(caller,  COLOR_GRAD2, "La ligne racroche.");
							CellTime[caller] = 0;
							CellTime[playerid] = 0;
							SendClientMessage(playerid,  COLOR_GRAD2, "Vous avez racroché.");
							Mobile[caller] = 255;
						}
						Mobile[playerid] = 255;
						CellTime[playerid] = 0;
						RingTone[playerid] = 0;
						PlayerInfo[playerid][pSpeaker] = 0;
						UnidentifedCall[playerid] = 0;
					}
				}
			}
			SendClientMessage(playerid,  COLOR_GRAD2, "Votre telephone est dans votre poche.");
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
		}
		return 1;
	}
//----------------------------------[TIME]-----------------------------------------------
    if(strcmp(cmd, "/fixr", true) == 0)
    {
        if(IsPlayerConnected(playerid))
		{
			PlayerFixRadio(playerid);
		}
		return 1;
	}
     if(strcmp(cmd, "/heure",  true) ==0 || strcmp(cmd, "/time", true) == 0|| strcmp(cmd, "/heures", true) == 0)
	//if(strcmp(cmd, "/heure", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
		    new mtext[20];
			new year, month,day;
			getdate(year, month, day);
			if(month == 1) { mtext = "Janvier"; }
			else if(month == 2) { mtext = "Fevrier"; }
			else if(month == 3) { mtext = "Mars"; }
			else if(month == 4) { mtext = "Avril"; }
			else if(month == 5) { mtext = "Mai"; }
			else if(month == 6) { mtext = "Juin"; }
			else if(month == 7) { mtext = "Juliet"; }
			else if(month == 8) { mtext = "Aout"; }
			else if(month == 9) { mtext = "Septembre"; }
			else if(month == 10) { mtext = "Octobre"; }
			else if(month == 11) { mtext = "Novembre"; }
			else if(month == 12) { mtext = "Decembre"; }
		    new hour,minuite,second;
			gettime(hour,minuite,second);
			if (minuite < 10)
			{
				if (PlayerInfo[playerid][pJailTime] > 0)
				{
				    if(PlayerInfo[playerid][pWatch] == 1)
				    {
						format(string, sizeof(string), "~y~%d %s~n~~g~|~w~%d:0%d~g~|~n~~w~Il vous reste %d secondes de temps de prison", day, mtext, hour, minuite, PlayerInfo[playerid][pJailTime]-10);
					}
					else
					{
					    format(string, sizeof(string), "~w~Il vous reste %d secondes de temps de prison", PlayerInfo[playerid][pJailTime]-10);
					}
				}
				else
				{
				    if(PlayerInfo[playerid][pWatch] == 1)
				    {
						format(string, sizeof(string), "~y~%d %s~n~~g~|~w~%d:0%d~g~|", day, mtext, hour, minuite);
					}
					else
					{
					    format(string, sizeof(string), "~r~Vous n avez pas de montre");
					}
				}
			}
			else
			{
				if (PlayerInfo[playerid][pJailTime] > 0)
				{
				    if(PlayerInfo[playerid][pWatch] == 1)
				    {
						format(string, sizeof(string), "~y~%d %s~n~~g~|~w~%d:%d~g~|~n~~w~Il vous reste %d seccondes de temps de prison", day, mtext, hour, minuite, PlayerInfo[playerid][pJailTime]-10);
					}
					else
					{
					    format(string, sizeof(string), "~w~Il vous reste %d secondes de temps de prison", PlayerInfo[playerid][pJailTime]-10);
					}
				}
				else
				{
				    if(PlayerInfo[playerid][pWatch] == 1)
				    {
						format(string, sizeof(string), "~y~%d %s~n~~g~|~w~%d:%d~g~|", day, mtext, hour, minuite);
					}
					else
					{
					    format(string, sizeof(string), "~r~Vous n'avez pas de montre");
					}
				}
			}
			GameTextForPlayer(playerid, string, 5000, 1);
			GetPlayerName(playerid, sendername, sizeof(sendername));
			if(PlayerInfo[playerid][pWatch] == 1)
			{
			    if(PlayerInfo[playerid][pSex] == 1) { format(string, sizeof(string), " %s lève sa main et regarde sa montre.", sendername); }
			    else { format(string, sizeof(string), " %s lève sa main et regarde sa montre.", sendername); }
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			ApplyAnimation(playerid,"COP_AMBIENT","Coplook_watch",4.1,0,0,0,0,0);
		}
		return 1;
	}
//----------------------{HOUSES}-------------------
	    if(strcmp(cmd, "/house", true) == 0 || strcmp(cmd, "/maison", true) == 0 || strcmp(cmd, "/gotohouseint", true) == 0)
	//if(strcmp(cmd, "/house", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
		    if(PlayerInfo[playerid][pAdmin] >= 3)
		    {
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /gotohouseint [id maisonr]");
					return 1;
				}
				new housenum = strval(tmp);
				SetPlayerInterior(playerid,HouseInfo[housenum][hInt]);
				SetPlayerPos(playerid,HouseInfo[housenum][hExitx],HouseInfo[housenum][hExity],HouseInfo[housenum][hExitz]);
				GameTextForPlayer(playerid, "~w~Teleporter", 5000, 1);
				PlayerInfo[playerid][pInt] = HouseInfo[housenum][hInt];
				PlayerInfo[playerid][pLocal] = housenum;
			}
		 	else
			{
				SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé a utiliser cette commande!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/gotohouse", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
		    if(PlayerInfo[playerid][pAdmin] >= 3)
		    {
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /gotohouse [id maison]");
					return 1;
				}
				new housenum = strval(tmp);
				SetPlayerPos(playerid,HouseInfo[housenum][hEntrancex],HouseInfo[housenum][hEntrancey],HouseInfo[housenum][hEntrancez]);
				GameTextForPlayer(playerid, "~w~Teleporter", 5000, 1);
				PlayerInfo[playerid][pInt] = 0;
				PlayerInfo[playerid][pVirWorld] = 0;
		}

			}
            else
		{
			SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé a utiliser cette commande!");
		}
		return 1;
	}
	/*if(strcmp(cmd, "/houseo", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
		    if(PlayerInfo[playerid][pAdmin] >= 1339)
		    {
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /houseo [housenumber]");
					return 1;
				}
				new housenum = strval(tmp);
				SetPlayerPos(playerid,HouseInfo[housenum][hEntrancex],HouseInfo[housenum][hEntrancey],HouseInfo[housenum][hEntrancez]);
				GameTextForPlayer(playerid, "~w~Teleporter", 5000, 1);
			}
		}
		return 1;
	}*/
	if(strcmp(cmd, "/gotobiz", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
		    if(PlayerInfo[playerid][pAdmin] >= 3)
		    {
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /gotobiz [id Biz]");
					return 1;
				}
				new housenum = strval(tmp);
				SetPlayerPos(playerid,BizzInfo[housenum][bEntranceX],BizzInfo[housenum][bEntranceY],BizzInfo[housenum][bEntranceZ]);
				GameTextForPlayer(playerid, "~w~Teleporter", 5000, 1);
				PlayerInfo[playerid][pInt] = 0;
				PlayerInfo[playerid][pVirWorld] = 0;
			}
			else
			{
				SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé a utiliser cette commande!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/gotobizint", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
		    if(PlayerInfo[playerid][pAdmin] >= 3)
		    {
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /gotobizint [id biz]");
					return 1;
				}
				new housenum = strval(tmp);
				SetPlayerInterior(playerid,BizzInfo[housenum][bInterior]);
				SetPlayerPos(playerid,BizzInfo[housenum][bExitX],BizzInfo[housenum][bExitY],BizzInfo[housenum][bExitZ]);
				GameTextForPlayer(playerid, "~w~Teleporter", 5000, 1);
				PlayerInfo[playerid][pInt] = BizzInfo[housenum][bInterior];
				PlayerInfo[playerid][pLocal] = housenum+99;
			}
			else
			{
				SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé a utiliser cette commande!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/gotosbiz", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
		    if(PlayerInfo[playerid][pAdmin] >= 3)
		    {
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /gotosbiz [id sbiz]");
					return 1;
				}
				new housenum = strval(tmp);
				SetPlayerInterior(playerid,SBizzInfo[housenum][sbInterior]);
				SetPlayerPos(playerid,SBizzInfo[housenum][sbEntranceX],SBizzInfo[housenum][sbEntranceY],SBizzInfo[housenum][sbEntranceZ]);
				GameTextForPlayer(playerid, "~w~Teleporter", 5000, 1);
				PlayerInfo[playerid][pInt] = 0;
				PlayerInfo[playerid][pVirWorld] = 0;
			}
			else
			{
				SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé a utiliser cette commande!");
			}
		}
		return 1;
	}
	/*if(strcmp(cmd, "/editcarmodel", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pAdmin] < 4)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   You are not an Admin !");
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /editcarmodel [modelid]");
				return 1;
			}
			new proplev = strval(tmp);
			for(new i = 0; i < sizeof(CarInfo); i++)
			{
				if(IsAnOwnableCar(idcar))
				{
					CarInfo[idcar][cModel] = proplev;
					format(string, sizeof(string), "Car: %d is now %d",idcar,CarInfo[idcar][cModel]);
					SendClientMessage(playerid, COLOR_GRAD2, string);
					OnPropUpdate();
				}
			}
		}
		return 1;
	}*/
	/*if(strcmp(cmd, "/resethousecars", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pAdmin] < 1337)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   You are not an Admin !");
				return 1;
			}
			HouseInfo[0][hVec] = 499; HouseInfo[1][hVec] = 499; HouseInfo[2][hVec] = 499;
			HouseInfo[3][hVec] = 499; HouseInfo[4][hVec] = 499; HouseInfo[5][hVec] = 499;
			HouseInfo[6][hVec] = 499; HouseInfo[7][hVec] = 499; HouseInfo[8][hVec] = 499;
			HouseInfo[9][hVec] = 499; HouseInfo[10][hVec] = 499; HouseInfo[11][hVec] = 499;
			HouseInfo[12][hVec] = 499; HouseInfo[13][hVec] = 499; HouseInfo[14][hVec] = 499;
			HouseInfo[15][hVec] = 499; HouseInfo[16][hVec] = 499; HouseInfo[17][hVec] = 499;
			HouseInfo[18][hVec] = 499; HouseInfo[19][hVec] = 499; HouseInfo[20][hVec] = 499;
			HouseInfo[21][hVec] = 499; HouseInfo[22][hVec] = 499; HouseInfo[23][hVec] = 499;
			HouseInfo[24][hVec] = 499; HouseInfo[25][hVec] = 499; HouseInfo[26][hVec] = 499;
			HouseInfo[27][hVec] = 499; HouseInfo[28][hVec] = 499; HouseInfo[29][hVec] = 499;
			HouseInfo[30][hVec] = 499; HouseInfo[31][hVec] = 499; HouseInfo[32][hVec] = 499;
			HouseInfo[33][hVec] = 499;
			OnPropUpdate();
			SendClientMessage(playerid, COLOR_GREY, "   All House Cars resetted !");
		}
		return 1;
	}*/
	/*if(strcmp(cmd, "/edithousecar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pAdmin] < 4)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   You are not an Admin !");
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /edithousecar [vecid]");
				return 1;
			}
			new proplev = strval(tmp);
			for(new i = 0; i < sizeof(HouseInfo); i++)
			{
				if (PlayerToPoint(3, playerid,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]))
				{
					HouseInfo[i][hVec] = proplev;
					format(string, sizeof(string), "House Car: %d is now %d", i,HouseInfo[i][hVec]);
					SendClientMessage(playerid, COLOR_GRAD2, string);
				}
			}
			OnPropUpdate();
		}
		return 1;
	}*/
	if(!strcmp(cmdtext, "/accident", true) || !strcmp(cmdtext, "/acc", true)) // By DiXoN
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "  Vous devez d'abord ouvrir une session ! ");
	            return 1;
	        }
	        if(IsPlayerInAnyVehicle(playerid))
	        {
				new carid = GetPlayerVehicleID(playerid);
				if(IsABike(carid) || IsAPizzabike(carid) || IsAPlane(carid) || IsABoat(carid) || IsASweeper(carid) || IsAHarvest(carid) || IsADrugHarvest(carid) || IsATank(carid) || pveh == 523 || pveh == 480 || pveh == 567 || pveh == 533 || pveh == 555 || pveh == 539 || pveh == 572 || pveh == 571 || pveh == 530 || pveh == 457 || pveh == 575 || pveh == 536 || pveh == 424)
				{
				    SendClientMessage(playerid, COLOR_GREY, " Vous ne pouvez pas avec ce véhicule");
				    return 1;
				}
	            if(VehicleWindows[GetPlayerVehicleID(playerid)] == 0)
	            {
                    RemovePlayerFromVehicle(playerid);
        			PlayerPlaySound(playerid, 1140, 0.0, 0.0, 0.0);
					VehicleWindows[GetPlayerVehicleID(playerid)] = 1;
	            	GetPlayerName(playerid, sendername, sizeof(sendername));
      				format(string, sizeof(string), " %s vient d'avoir un accident de la route.", sendername);
                    ApplyAnimation(playerid,"CRACK","crckidle1",4.1,0,1,1,1,1);
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      				return 1;
				}
				else if(VehicleWindows[GetPlayerVehicleID(playerid)] == 1)
				{
				    RemovePlayerFromVehicle(playerid);
        			PlayerPlaySound(playerid, 1140, 0.0, 0.0, 0.0);
					VehicleWindows[GetPlayerVehicleID(playerid)] = 1;
	            	GetPlayerName(playerid, sendername, sizeof(sendername));
      				format(string, sizeof(string), " %s vient d'avoir un accident de la route.", sendername);
                    ApplyAnimation(playerid,"CRACK","crckidle1",4.1,0,1,1,1,1);
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      				return 1;
				}
				return 1;
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Vous devez être dans un véhicule pour employer cette fonction !");
	            return 1;
	        }
	    }
	    return 1;
	}
	if(strcmp(cmd, "/idmaison", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pAdmin] < 3)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Vous n'êtes pas autorisé a utiliser cette commande!");
				return 1;
			}
	        for(new i = 0; i < sizeof(HouseInfo); i++)
			{
				if (PlayerToPoint(3, playerid,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]))
				{
					format(string, sizeof(string), "Maison: %d", i);
					SendClientMessage(playerid, COLOR_GRAD2, string);

				}
			}
		}
		return 1;
	}
    if(strcmp(cmd, "/changer", true) == 0 || strcmp(cmd, "/edit", true) == 0 || strcmp(cmd, "/modifier", true) == 0)
	//if(strcmp(cmd, "/changer", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pAdmin] < 3)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Vous n'êtes pas autorisé a utiliser cette commande!");
				return 1;
			}
			new x_job[256];
			x_job = strtok(cmdtext, idx);
			if(!strlen(x_job)) {
				SendClientMessage(playerid, COLOR_WHITE, "|_____________________________ Changer _____________________________|");
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /changer [nom] [montant]");
				SendClientMessage(playerid, COLOR_WHITE, "Noms Disponibles Maison: niveau, prix");
				SendClientMessage(playerid, COLOR_WHITE, "Noms Disponibles Biz: niveau, prix, prixentree, caisse, produits");
				SendClientMessage(playerid, COLOR_WHITE, "|________________________________________________________________|");
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /changer [nom] [montant]");
				return 1;
			}
			new proplev = strval(tmp);
	        //if(strcmp(x_job,"car",true) == 0)
	        for(new i = 0; i < sizeof(HouseInfo); i++)
			{
				if (PlayerToPoint(3, playerid,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]))
				{
					format(string, sizeof(string), "Maison: %d", i);
					SendClientMessage(playerid, COLOR_GRAD2, string);
					if(proplev > 0)
					{
					    if(strcmp(x_job,"niveau",true) == 0)
					    {
							HouseInfo[i][hLevel] = proplev;
						}
						else if(strcmp(x_job,"prix",true) == 0)
					    {
							HouseInfo[i][hValue] = proplev;
						}
					}
				}
			}
			for(new i = 0; i < sizeof(BizzInfo); i++)
			{
				if (PlayerToPoint(3, playerid,BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]))
				{
					format(string, sizeof(string), "Biz: %d", i);
					SendClientMessage(playerid, COLOR_GRAD2, string);
					if(proplev > 0)
					{
					    if(strcmp(x_job,"niveau",true) == 0)
					    {
							BizzInfo[i][bLevelNeeded] = proplev;
						}
						else if(strcmp(x_job,"prix",true) == 0)
					    {
							BizzInfo[i][bBuyPrice] = proplev;
						}
						else if(strcmp(x_job,"caisse",true) == 0)
					    {
							BizzInfo[i][bTill] = proplev;
						}
						else if(strcmp(x_job,"produits",true) == 0)
					    {
							BizzInfo[i][bProducts] = proplev;
						}
						else if(strcmp(x_job,"prixentree",true) == 0)
					    {
							BizzInfo[i][bEntranceCost] = proplev;
						}
					}
				}
			}
			for(new i = 0; i < sizeof(SBizzInfo); i++)
			{
				if (PlayerToPoint(3, playerid,SBizzInfo[i][sbEntranceX], SBizzInfo[i][sbEntranceY], SBizzInfo[i][sbEntranceZ]))
				{
					format(string, sizeof(string), "SBiz: %d", i);
					SendClientMessage(playerid, COLOR_GRAD2, string);
					if(proplev > 0)
					{
					    if(strcmp(x_job,"niveau",true) == 0)
					    {
							SBizzInfo[i][sbLevelNeeded] = proplev;
						}
						else if(strcmp(x_job,"prix",true) == 0)
					    {
							SBizzInfo[i][sbBuyPrice] = proplev;
						}
						else if(strcmp(x_job,"caisse",true) == 0)
					    {
							SBizzInfo[i][sbTill] = proplev;
						}
						else if(strcmp(x_job,"produits",true) == 0)
					    {
							SBizzInfo[i][sbProducts] = proplev;
						}
					}
				}
			}
			format(string, sizeof(string), "Vous avez modifié le/la: %s.", x_job);
			SendClientMessage(playerid, COLOR_WHITE, string);
			OnPropUpdate();
		}
		return 1;
	}
    if(strcmp(cmd, "/charger", true) == 0 || strcmp(cmd, "/load", true) == 0 || strcmp(cmd, "/loading", true) == 0)
	//if(strcmp(cmd, "/charger", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			if(!IsATruck(tmpcar))
			{
				GameTextForPlayer(playerid, "~r~Vous n'êtes pas dans un camion", 5000, 1);
				desactivetext[playerid] = 1;
				SetTimerEx("DesactiverSpeedo", 5000, 0, "i", playerid);
				return 1;
			}
			format(string, sizeof(string), "Products: %d/%d.", PlayerHaul[tmpcar][pLoad],PlayerHaul[tmpcar][pCapasity]);
			SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
		}
		return 1;
	}
    if(strcmp(cmd, "/acheterprods", true) == 0 || strcmp(cmd, "/acheterproduits", true) == 0 || strcmp(cmd, "/acheterproduit", true) == 0)
  //if(strcmp(cmd, "/acheterproduits", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			new compcost = 20;
			if(PlayerToPoint(70.0, playerid, 2484.5356,-2111.7759,13.7196))
			{
				if(IsATruck(tmpcar))
				{
					if(PlayerHaul[tmpcar][pLoad] < PlayerHaul[tmpcar][pCapasity])
					{
					    new amount;
					    tmp = strtok(cmdtext, idx);
						if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /acheterproduits [amount]");
							return 1;
						}
						amount = strval(tmp);
						if(amount < 1 || amount > 40) { SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez as acheter moins d'un produit et plus de 40!"); return 1; }
						new check= PlayerHaul[tmpcar][pLoad] + amount;
						if(check > PlayerHaul[tmpcar][pCapasity])
						{
						    format(string, sizeof(string), "Vous avez dépasser la limite possible à charger dans votre camion de %d, vous avez déjà %d.",PlayerHaul[tmpcar][pCapasity],PlayerHaul[tmpcar][pLoad]);
						    SendClientMessage(playerid, COLOR_GREY, string);
						    return 1;
						}
						new cost = amount*compcost;
						if(GetPlayerMoney(playerid) >= cost)
						{
							PlayerHaul[tmpcar][pLoad] += amount;
							format(string, sizeof(string), "Produits: %d/%d.", PlayerHaul[tmpcar][pLoad],PlayerHaul[tmpcar][pCapasity]);
							SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
							format(string, sizeof(string), "Vous avez acheté %d produits pour $%d.", amount,cost);
							SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
							SafeGivePlayerMoney(playerid,-cost);
							PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
							SBizzInfo[10][sbTill] += SBizzInfo[10][sbEntranceCost];
							ExtortionSBiz(10, SBizzInfo[10][sbEntranceCost]);
							OnPropUpdate();
							return 1;
						}
						else
						{
							format(string, sizeof(string), "Vous ne pouvez pas acheter %d produit à $%d!", amount,cost);
							SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
							return 1;
						}
					}
					else
					{
							format(string, sizeof(string), "Produits: %d/%d.", PlayerHaul[tmpcar][pLoad],PlayerHaul[tmpcar][pCapasity]);
							SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
							return 1;
					}
				}
				else
				{
					SendClientMessage(playerid, TEAM_GROVE_COLOR, "Ce véhicule n'est pas un cammion de livraison.");
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "You are not in trucker place.");
				return 1;
			}
		}
		return 1;
	}
 if(strcmp(cmd, "/vendreprods", true) == 0 || strcmp(cmd, "/vendreproduits", true) == 0 || strcmp(cmd, "/sellprods", true) == 0)
 //if(strcmp(cmd, "/vendreproduits", true) == 0)
	{
	    new cashmade;
	    new tmpcar;
	    if(IsPlayerConnected(playerid))
		{
			tmpcar = GetPlayerVehicleID(playerid);
			if(!IsATruck(tmpcar))
			{
				GameTextForPlayer(playerid, "~r~Vous n etes pas dans un cammion de livraison", 5000, 1);
				desactivetext[playerid] = 1;
				SetTimerEx("DesactiverSpeedo", 5000, 0, "i", playerid);
				return 1;
			}
			if(PlayerHaul[tmpcar][pLoad] == 0)
			{
				GameTextForPlayer(playerid, "~r~Camion vide, retournez au depot", 5000, 1);
				format(string, sizeof(string), "Produits: %d/%d.", PlayerHaul[tmpcar][pLoad],PlayerHaul[tmpcar][pCapasity]);
				SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
				desactivetext[playerid] = 1;
				SetTimerEx("DesactiverSpeedo", 5000, 0, "i", playerid);
				return 1;
			}
			for(new i = 0; i < sizeof(BizzInfo); i++)
			{
				if (PlayerToPoint(10, playerid,BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]))
				{
					//printf("Found House :%d",i);
					for(new l = PlayerHaul[tmpcar][pLoad]; l > 0; l--)
					{
						if(BizzInfo[i][bProducts] == BizzInfo[i][bMaxProducts])
						{
							GameTextForPlayer(playerid, "~r~Magasin Plein", 5000, 1);
							format(string, sizeof(string), "Argent gagné $%d.", cashmade);
							SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
							format(string, sizeof(string), "Produits: %d/%d.", PlayerHaul[tmpcar][pLoad],PlayerHaul[tmpcar][pCapasity]);
							SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
							PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
							desactivetext[playerid] = 1;
							SetTimerEx("DesactiverSpeedo", 5000, 0, "i", playerid);
							return 1;
						}
						if(BizzInfo[i][bPriceProd] > BizzInfo[i][bTill])
						{
							GameTextForPlayer(playerid, "~r~Nous n avons pas assez d argent", 5000, 1);
							format(string, sizeof(string), "Argent gagné: $%d.", cashmade);
							SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
							format(string, sizeof(string), "Produits: %d/%d.", PlayerHaul[tmpcar][pLoad],PlayerHaul[tmpcar][pCapasity]);
							SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
							PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
							desactivetext[playerid] = 1;
							SetTimerEx("DesactiverSpeedo", 5000, 0, "i", playerid);
							return 1;
						}
						PlayerHaul[tmpcar][pLoad]--;
						BizzInfo[i][bProducts]++;
						cashmade = cashmade+BizzInfo[i][bPriceProd];
						//ConsumingMoney[playerid] = 1;
						SafeGivePlayerMoney(playerid,BizzInfo[i][bPriceProd]);
						BizzInfo[i][bTill] -= BizzInfo[i][bPriceProd];
						if(PlayerHaul[tmpcar][pLoad] == 0)
						{
							GameTextForPlayer(playerid, "~r~Camion vide, retournez au depot", 5000, 1);
							format(string, sizeof(string), "Argent gagné $%d.", cashmade);
							SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
							format(string, sizeof(string), "Produits: %d/%d.", PlayerHaul[tmpcar][pLoad],PlayerHaul[tmpcar][pCapasity]);
							SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
							PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
							desactivetext[playerid] = 1;
							SetTimerEx("DesactiverSpeedo", 5000, 0, "i", playerid);
							return 1;
						}
					}
					OnPropUpdate();
					return 1;
				}
			}
		}
		for(new i = 0; i < sizeof(SBizzInfo); i++)
		{
			if (PlayerToPoint(10, playerid,SBizzInfo[i][sbEntranceX], SBizzInfo[i][sbEntranceY], SBizzInfo[i][sbEntranceZ]))
			{
				//printf("Found House :%d",i);
				for(new l = PlayerHaul[tmpcar][pLoad]; l > 0; l--)
				{
					if(SBizzInfo[i][sbProducts] == SBizzInfo[i][sbMaxProducts])
					{
						GameTextForPlayer(playerid, "~r~Magasin Plein", 5000, 1);
						format(string, sizeof(string), "Argent gagné: $%d.", cashmade);
						SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
						format(string, sizeof(string), "Produits: %d/%d.", PlayerHaul[tmpcar][pLoad],PlayerHaul[tmpcar][pCapasity]);
						SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
						desactivetext[playerid] = 1;
						SetTimerEx("DesactiverSpeedo", 5000, 0, "i", playerid);
						return 1;
					}
					if(SBizzInfo[i][sbPriceProd] > SBizzInfo[i][sbTill])
					{
						GameTextForPlayer(playerid, "~r~Nous n avons pas assez d argent", 5000, 1);
						format(string, sizeof(string), "Argent gagné: $%d.", cashmade);
						SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
						format(string, sizeof(string), "Produits: %d/%d.", PlayerHaul[tmpcar][pLoad],PlayerHaul[tmpcar][pCapasity]);
						SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
						desactivetext[playerid] = 1;
						SetTimerEx("DesactiverSpeedo", 5000, 0, "i", playerid);
						return 1;
					}
					PlayerHaul[tmpcar][pLoad]--;
					SBizzInfo[i][sbProducts]++;
					cashmade = cashmade+SBizzInfo[i][sbPriceProd];
					//ConsumingMoney[playerid] = 1;
					SafeGivePlayerMoney(playerid,SBizzInfo[i][sbPriceProd]);
					SBizzInfo[i][sbTill] -= SBizzInfo[i][sbPriceProd];
					if(PlayerHaul[tmpcar][pLoad] == 0)
					{
						GameTextForPlayer(playerid, "~r~Camion vide, retournez au depot", 5000, 1);
						format(string, sizeof(string), "Argent gagné: $%d.", cashmade);
						SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
						format(string, sizeof(string), "Produits: %d/%d.", PlayerHaul[tmpcar][pLoad],PlayerHaul[tmpcar][pCapasity]);
						SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
						desactivetext[playerid] = 1;
						SetTimerEx("DesactiverSpeedo", 5000, 0, "i", playerid);
						return 1;
					}
				}
				OnPropUpdate();
				return 1;
			}
		}
		GameTextForPlayer(playerid, "~r~Trop loin d un biz", 5000, 1);
		return 1;
	}
	//if(strcmp(cmd, "/entrer", true) == 0)
    if(strcmp(cmd, "/enter", true) == 0 || strcmp(cmd, "/entrer", true) == 0 || strcmp(cmd, "/entr", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			for(new i = 0; i < sizeof(HouseInfo); i++)
			{
				if (PlayerToPoint(3, playerid,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]))
				{
					//printf("Found House :%d",i);
					if(PlayerInfo[playerid][pPhousekey] == i || HouseInfo[i][hLock] == 0)
					{
						SetPlayerInterior(playerid,HouseInfo[i][hInt]);
						SetPlayerVirtualWorld(playerid,HouseInfo[i][hWorld]);
						SetPlayerPos(playerid,HouseInfo[i][hExitx],HouseInfo[i][hExity],HouseInfo[i][hExitz]);
						GameTextForPlayer(playerid, "~w~Bienvenue chez vous !", 5000, 1);
						PlayerInfo[playerid][pInt] = HouseInfo[i][hInt];
						PlayerInfo[playerid][pLocal] = i;
						HouseEntered[playerid] = i;
					}
					else
					{
						GameTextForPlayer(playerid, "~r~Fermer", 5000, 1);
					}
				}
			}
			for(new i = 0; i < sizeof(BizzInfo); i++)
			{
				if (PlayerToPoint(3, playerid,BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]))
				{
					//printf("Found House :%d",i);
					/*if(!IsACop(playerid) && i == 3)
					{
					    SendClientMessage(playerid, COLOR_GREY, "Seulement les policiers!");
					    return 1;
					}*/
					if(PlayerInfo[playerid][pPbiskey] == i || GetPlayerMoney(playerid) >= BizzInfo[i][bEntranceCost])
					{
						if(PlayerInfo[playerid][pPbiskey] != i)
						{
							if(BizzInfo[i][bLocked] == 1)
							{
								GameTextForPlayer(playerid, "~r~Fermer", 5000, 1);
								return 1;
							}
							if(BizzInfo[i][bProducts] == 0)
							{
								GameTextForPlayer(playerid, "~r~Plus de Stock", 5000, 1);
								return 1;
							}
							SafeGivePlayerMoney(playerid,-BizzInfo[i][bEntranceCost]);
							format(string, sizeof(string), "~r~-$%d~n~~w~utilisez /sortir~n~pour sortir", BizzInfo[i][bEntranceCost]);
							BizzInfo[i][bTill] += BizzInfo[i][bEntranceCost];
							ExtortionBiz(i, BizzInfo[i][bEntranceCost]);
							BizzInfo[i][bProducts]--;
							OnPropUpdate();
							GameTextForPlayer(playerid, string, 5000, 3);
						}
						SetPlayerInterior(playerid,BizzInfo[i][bInterior]);
						SetPlayerPos(playerid,BizzInfo[i][bExitX],BizzInfo[i][bExitY],BizzInfo[i][bExitZ]);
						PlayerInfo[playerid][pInt] = BizzInfo[i][bInterior];
						if(i == 0) // Biz id = 0
						{
			   				PlayerInfo[playerid][pLocal] = 99;
							new dood[MAX_PLAYER_NAME];
							GetPlayerName(playerid, dood, sizeof(dood));
							format(string, sizeof(string), "%s à payé $%d pour entrer dans le biz %d", dood, BizzInfo[i][bEntranceCost], i);
							printf("%s", string);
							PayLog(string);
							//PlayerInfo[playerid][pLocal] = i;
						}
						else if(i == 1)
						{
			   				PlayerInfo[playerid][pLocal] = 100;
							new dood[MAX_PLAYER_NAME];
							GetPlayerName(playerid, dood, sizeof(dood));
							format(string, sizeof(string), "%s à payé $%d pour entrer dans le biz %d", dood, BizzInfo[i][bEntranceCost], i);
							printf("%s", string);
							PayLog(string);
							//PlayerInfo[playerid][pLocal] = i;
						}
						else if(i == 3)
						{
			   				PlayerInfo[playerid][pLocal] = 102;
							new dood[MAX_PLAYER_NAME];
							GetPlayerName(playerid, dood, sizeof(dood));
							format(string, sizeof(string), "%s à payé $%d pour entrer dans le biz %d", dood, BizzInfo[i][bEntranceCost], i);
							printf("%s", string);
							PayLog(string);
							//PlayerInfo[playerid][pLocal] = i;
						}
						else
						{
							PlayerInfo[playerid][pLocal] = i+99;
							new dood[MAX_PLAYER_NAME];
							GetPlayerName(playerid, dood, sizeof(dood));
							format(string, sizeof(string), "%s à payé $%d pour entrer dans le biz %d", dood, BizzInfo[i][bEntranceCost], i);
							printf("%s", string);
							PayLog(string);
							//PlayerInfo[playerid][pLocal] = i;
						}
					}
					else
					{
						GameTextForPlayer(playerid, "~r~Pas assez d argent", 5000, 1);
					}
				}
			}

			for(new i = 0; i < sizeof(SBizzInfo); i++)
			{
				if (PlayerToPoint(3, playerid,SBizzInfo[i][sbEntranceX], SBizzInfo[i][sbEntranceY], SBizzInfo[i][sbEntranceZ]))
				{
					if(PlayerInfo[playerid][pPbiskey] == i || GetPlayerMoney(playerid) >= SBizzInfo[i][sbEntranceCost])
					{
						if(PlayerInfo[playerid][pPbiskey] != i)
						{
							if(SBizzInfo[i][sbLocked] == 1)
							{
								GameTextForPlayer(playerid, "~r~Fermer", 5000, 1);
								return 1;
							}
							if(SBizzInfo[i][sbProducts] == 0)
							{
								GameTextForPlayer(playerid, "~r~Plus de Stock", 5000, 1);
								return 1;
							}
							if(i == 10)
							{
							    PaintballPlayers ++;
							    PlayerPaintballing[playerid] = 1;
							    new rand = random(sizeof(PaintballSpawns));
								SetPlayerPos(playerid, PaintballSpawns[rand][0], PaintballSpawns[rand][1], PaintballSpawns[rand][2]);
								TogglePlayerControllable(playerid, 0);
							}
							else if(i == 11)
							{
							    PlayerKarting[playerid] = 1;
							    SendClientMessage(playerid, TEAM_GROVE_COLOR, "Vous pouvez participer a la course kart, prenez un kart.");
							}
							else
							{
							    return 1;
							}
							SafeGivePlayerMoney(playerid,-SBizzInfo[i][sbEntranceCost]);
							gSpentCash[playerid] = GetPlayerMoney(playerid);
							SBizzInfo[i][sbProducts]--;
							SBizzInfo[i][sbTill] += SBizzInfo[i][sbEntranceCost];
							ExtortionSBiz(i, SBizzInfo[i][sbEntranceCost]);
							new dood[MAX_PLAYER_NAME];
							GetPlayerName(playerid, dood, sizeof(dood));
							format(string, sizeof(string), "%s à payé $%d pour entrer dans le sbiz", dood, SBizzInfo[i][sbEntranceCost], i);
							printf("%s", string);
							PayLog(string);
							OnPropUpdate();
						}
					}
					else
					{
						GameTextForPlayer(playerid, "~r~Pas assez d argent", 5000, 1);
					}
				}
			}
			if (PlayerToPoint(3.0, playerid,2695.6235,-1704.6960,11.8438))
			{
			    GameTextForPlayer(playerid, "~w~Bievenue au 8ball Track", 5000, 1);
			    SetPlayerInterior(playerid,7);
			    PlayerInfo[playerid][pInt] = 7;
				SetPlayerPos(playerid,-1404.5299,-259.0602,1043.6563);
			}
			else if (PlayerToPoint(8.0, playerid,1173.2563,-1323.3102,15.3943))
	{
		GameTextForPlayer(playerid, "~w~Hopital",5000,1);
		SetPlayerInterior(playerid,8);
		PlayerInfo[playerid][pInt] = 8;
		SetPlayerPos(playerid, -3436.2021,476.3759,57.6132);
	}
	if (PlayerToPoint(8.0, playerid, 1303.1649,-980.2634,38.3527))
	{
		SetPlayerPos(playerid, 246.5013,112.4106,1003.2188);
		GameTextForPlayer(playerid, "~w~C.I.A HQ",5000,1);
		SetPlayerInterior(playerid,10);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pLocal] = 103;
		PlayerInfo[playerid][pInt] = 10;
	}
	else if (PlayerToPoint(8.0, playerid,854.5645,-605.0123,18.4219))
	{
		if(PlayerInfo[playerid][pMember] == 14 || PlayerInfo[playerid][pLeader] == 14)
		{
			SetPlayerPos(playerid, 592.3893,-545.8354,2699.8735);
			GameTextForPlayer(playerid, "~w~Bikers HQ",5000,1);
			SetPlayerInterior(playerid,0);
			SetPlayerFacingAngle(playerid, 181);
			PlayerInfo[playerid][pInt] = 0;
		}
		else if(hqlock[guclock] == 0)
		{
		    SetPlayerPos(playerid, 592.3893,-545.8354,2699.8735);
			GameTextForPlayer(playerid, "~w~Bikers HQ",5000,1);
			SetPlayerInterior(playerid,0);
			SetPlayerFacingAngle(playerid, 181);
			PlayerInfo[playerid][pInt] = 0;
		}
		else
		{
		    GameTextForPlayer(playerid, "~r~Fermer",5000,1);
		}
	}
if (PlayerToPoint(8.0, playerid, 1219.2813,-1811.9434,16.5938))
	{
		SetPlayerPos(playerid, 1207.9841,-901.9551,1094.1084);
		GameTextForPlayer(playerid, "~w~Ecole De Langues",5000,1);
		SetTimerEx("chargement",2000,0,"i",playerid);
		TogglePlayerControllable(playerid, 0);
		SetPlayerInterior(playerid,3);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pLocal] = 103;
		PlayerInfo[playerid][pInt] = 3;
	}
	else if (PlayerToPoint(8.0, playerid,691.5770,-1276.0026,13.5607))
	{
		if(PlayerInfo[playerid][pMember] == 6 || PlayerInfo[playerid][pLeader] == 6)
		{
			SetPlayerPos(playerid, 962.0352,-53.4519,1001.1246);
			GameTextForPlayer(playerid, "~w~QG de La Famiglia Vercetti",5000,1);
			SetPlayerInterior(playerid,3);
			SetPlayerFacingAngle(playerid, 181);
			PlayerInfo[playerid][pInt] = 3;
		}
		else if(hqlock[luclock] == 0)
		{
		    SetPlayerPos(playerid, 962.0352,-53.4519,1001.1246);
			GameTextForPlayer(playerid, "~w~QG de La Famiglia Vercetti",5000,1);
			SetPlayerInterior(playerid,3);
			SetPlayerFacingAngle(playerid, 181);
			PlayerInfo[playerid][pInt] = 3;
		}
		else
		{
		    GameTextForPlayer(playerid, "~r~Fermer",5000,1);
		}
	}
else if (PlayerToPoint(8.0, playerid,2770.6982,-1628.7228,12.1775))
	{
		if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8)
		{
			SetPlayerPos(playerid, 948.3666,2107.0986,1011.0234);
			GameTextForPlayer(playerid, "~w~QG des Hitman",5000,1);
			SetPlayerInterior(playerid,1);
			SetPlayerFacingAngle(playerid, 181);
			PlayerInfo[playerid][pInt] = 1;
		}
		else if(hqlock[luclock] == 0)
		{
		    SetPlayerPos(playerid, 948.3666,2107.0986,1011.0234);
			GameTextForPlayer(playerid, "~w~QG des Hitman",5000,1);
			SetPlayerInterior(playerid,1);
			SetPlayerFacingAngle(playerid, 181);
			PlayerInfo[playerid][pInt] = 1;
		}
		else
		{
		    GameTextForPlayer(playerid, "~r~Fermer",5000,1);
		}
	}
else if (PlayerToPoint(8.0, playerid,2495.3254,-1691.1366,14.7656))
	{
		if(PlayerInfo[playerid][pMember] == 16 || PlayerInfo[playerid][pLeader] == 16)
		{
			SetPlayerPos(playerid, 2495.9868,-1693.8186,1014.7422);
			GameTextForPlayer(playerid, "~w~Groove HQ",5000,1);
			SetPlayerInterior(playerid,3);
			SetPlayerFacingAngle(playerid, 1);
			PlayerInfo[playerid][pInt] = 3;
		}
		else if(hqlock[iolock] == 0)
		{
		    SetPlayerPos(playerid, 2495.9868,-1693.8186,1014.7422);
			GameTextForPlayer(playerid, "~w~Groove HQ",5000,1);
			SetPlayerInterior(playerid,3);
			SetPlayerFacingAngle(playerid, 0);
			PlayerInfo[playerid][pInt] = 3;
		}
		else
		{
		    GameTextForPlayer(playerid, "~r~Fermer",5000,1);
		}
	}
else if (PlayerToPoint(8.0, playerid,1828.1594,-1980.4380,13.5469))
	{
		//Vagos HQ
		if(PlayerInfo[playerid][pMember] == 5 || PlayerInfo[playerid][pLeader] == 5)
		{
			SetPlayerPos(playerid, 2351.0479,-1180.8905,1027.9766);
			GameTextForPlayer(playerid, "~w~Vagos HQ",5000,1);
			SetPlayerInterior(playerid,5);
			SetPlayerFacingAngle(playerid, 90);
			PlayerInfo[playerid][pInt] = 5;
		}
		else if(hqlock[surlock] == 0)
		{
		    SetPlayerPos(playerid, 2351.0479,-1180.8905,1027.9766);
			GameTextForPlayer(playerid, "~w~Vagos HQ",5000,1);
			SetPlayerInterior(playerid,5);
			SetPlayerFacingAngle(playerid, 90);
			PlayerInfo[playerid][pInt] = 5;
		}
		else
		{
		    GameTextForPlayer(playerid, "~r~Fermer",5000,1);
		}
	}
else if (PlayerToPoint(8.0, playerid,1481.0206,-1771.1138,18.7958))
	{
		SetPlayerPos(playerid, 386.2978,173.8582,1008.3828);
		GameTextForPlayer(playerid, "~w~Mairie",5000,1);
		SetPlayerInterior(playerid,3);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pInt] = 3;
	}
/*else if (PlayerToPoint(8.0, playerid,1784.58,-1297.52,13.37))
	{
		SetPlayerPos(playerid, 366.6735,198.7897,1008.3828);
		GameTextForPlayer(playerid, "~w~ABC studio",5000,1);
		SetPlayerInterior(playerid,3);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pInt] = 3;
	}*/
else if (PlayerToPoint(8.0, playerid,1752.8452,-1894.1328,13.5573))
	{
		//LA Yellow Cab Co.
		SetPlayerPos(playerid, 371.8502,182.0368,1014.1875);
		GameTextForPlayer(playerid, "~w~LA Yellow Cab Co.",5000,1);
		SetPlayerInterior(playerid,3);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pInt] = 3;
	}
else if (PlayerToPoint(8.0, playerid,2495.3481,-1691.1355,14.7656))
	{
		//Groove Street  gang hq
		if(PlayerInfo[playerid][pMember] == 10 || PlayerInfo[playerid][pLeader] == 10)
		{
			SetPlayerPos(playerid, 2496.0061,-1693.5201,1014.7422);
			GameTextForPlayer(playerid, "~w~Groove Street HQ",5000,1);
			SetPlayerInterior(playerid,3);
			SetPlayerFacingAngle(playerid, 181);
			PlayerInfo[playerid][pInt] = 5;
		}
		else if(hqlock[iolock] == 0)
		{
		    SetPlayerPos(playerid, 2496.0061,-1693.5201,1014.7422);
			GameTextForPlayer(playerid, "~w~Groove Street HQ",5000,1);
			SetPlayerInterior(playerid,3);
			SetPlayerFacingAngle(playerid, 181);
			PlayerInfo[playerid][pInt] = 5;
		}
		else
		{
		    GameTextForPlayer(playerid, "~r~Fermer",5000,1);
		}
	}
else if (PlayerToPoint(8.0, playerid,1654.0858,-1655.9982,22.5156))
	{
		//FBI Enter
		SetPlayerPos(playerid, 289.4371,172.0723,1007.1794);
		GameTextForPlayer(playerid, "~w~FBI Departement",5000,1);
		SetPlayerInterior(playerid,3);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pInt] = 3;
	}
else if (PlayerToPoint(8.0, playerid,-2441.9749,754.0135,35.1786))
	{
		SetPlayerPos(playerid, -25.1326,-139.0670,1003.5469);
		SendClientMessage(playerid, COLOR_WHITE, "COMMANDE: Tappez /acheter pour acheter ce dont vous avez besoin.");
		GameTextForPlayer(playerid, "~w~Bienvenue au ~r~24-7",5000,3);
		SetPlayerInterior(playerid,16);
		PlayerInfo[playerid][pInt] = 16;
	}
else if(PlayerToPoint(8.0, playerid,2229.9011,-1721.2582,13.5613))
	{
		GameTextForPlayer(playerid, "~w~Ganton Gym", 5000, 1);
		SetPlayerInterior(playerid, 5);
		SetPlayerPos(playerid,771.9399,-2.2574,1000.7292);
		PlayerInfo[playerid][pInt] = 5;
	}
else if(PlayerToPoint(8.0, playerid,2244.3423,-1665.5542,15.4766)) //binco
	{
		GameTextForPlayer(playerid, "~w~Binco", 5000, 1);
		SendClientMessage(playerid, COLOR_WHITE, "BINCO: Tappez /vetement pour changer vos vêtements et 'suivant' pour passer au suivant.");
		SetPlayerInterior(playerid, 15);
		SetPlayerPos(playerid,207.7336,-108.6231,1005.1328);
		PlayerInfo[playerid][pInt] = 15;
	}
	else if (PlayerToPoint(8.0, playerid,826.6191,-613.4954,16.3359))
	{
		if(PlayerInfo[playerid][pMember] == 14 || PlayerInfo[playerid][pLeader] == 14)
		{
			SetPlayerPos(playerid, 587.5443,-549.1948,2703.6406);
			GameTextForPlayer(playerid, "~w~Garage Bikers HQ",5000,1);
			SetPlayerInterior(playerid,0);
			SetPlayerFacingAngle(playerid, 181);
			PlayerInfo[playerid][pInt] = 5;
		}
		else if(hqlock[guclock] == 0)
		{
		    SetPlayerPos(playerid, 587.5443,-549.1948,2703.6406);
			GameTextForPlayer(playerid, "~w~Garage Bikers HQ",5000,1);
			SetPlayerInterior(playerid,0);
			SetPlayerFacingAngle(playerid, 181);
			PlayerInfo[playerid][pInt] = 5;
		}
		else
		{
		    GameTextForPlayer(playerid, "~r~Fermer",5000,1);
		}
	}
   if (PlayerToPoint(8.0, playerid,2232.9993,-1159.7517,25.8906))
	{
		SetPlayerPos(playerid, 2217.8687,-1150.7157,1025.7969);
		GameTextForPlayer(playerid, "~w~Jefferson Motel",5000,1);
		SetPlayerInterior(playerid,15);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pLocal] = 103;
		PlayerInfo[playerid][pInt] = 15;
	}
			else if (PlayerToPoint(8.0, playerid,-2111.5686,-443.9720,38.7344))
			{
			    GameTextForPlayer(playerid, "~w~Bievenue au Dirt Track", 5000, 1);
			    SetPlayerInterior(playerid,4);
			    PlayerInfo[playerid][pInt] = 4;
				SetPlayerPos(playerid,-1443.0554,-581.1879,1055.0472);
			}
			else if (PlayerToPoint(8.0, playerid,2045.3928,-1908.0372,13.5469))
	{
		SetPlayerPos(playerid, 1494.6207,1305.2336,1093.2891);
		GameTextForPlayer(playerid, "~w~Auto-Ecole",5000,1);
		SetPlayerInterior(playerid,3);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pInt] = 3;
	}
	else if (PlayerToPoint(8.0, playerid,1727.0645,-1636.1204,20.2153))
	{
		SetPlayerPos(playerid, 1726.7281,-1641.0282,20.2245);
		GameTextForPlayer(playerid, "~y~ANPE",5000,3);
		SetPlayerInterior(playerid,18);
		PlayerInfo[playerid][pInt] = 18;
	}
			if(PlayerToPoint(8.0, playerid,1554.9537,-1675.6584,16.1953))
	{
		GameTextForPlayer(playerid, "~w~Commisariat", 5000, 1);
		SetPlayerInterior(playerid, 6);
		SetPlayerPos(playerid,246.7079,66.2239,1003.6406);
		PlayerInfo[playerid][pInt] = 6;
	}
			else if (PlayerToPoint(8.0, playerid,2000.0508,-1114.0536,27.1250))
	{
		if(PlayerInfo[playerid][pMember] == 15 || PlayerInfo[playerid][pLeader] == 15)
		{
			SetPlayerPos(playerid, 318.6823,1116.8296,1083.8828);
			GameTextForPlayer(playerid, "~w~Ballas HQ",5000,1);
			SetPlayerInterior(playerid,5);
			SetPlayerFacingAngle(playerid, 181);
			PlayerInfo[playerid][pInt] = 3;
		}
		else if(hqlock[stlock] == 0)
		{
		    SetPlayerPos(playerid, 318.6823,1116.8296,1083.8828);
			GameTextForPlayer(playerid, "~w~Ballas HQ",5000,1);
			SetPlayerInterior(playerid,5);
			SetPlayerFacingAngle(playerid, 181);
			PlayerInfo[playerid][pInt] = 3;
		}
		else
		{
		    GameTextForPlayer(playerid, "~r~Fermer",5000,1);
		}
	}
			else if (PlayerToPoint(8.0, playerid,-2080.3079,-406.0309,38.7344))
			{
			    GameTextForPlayer(playerid, "~w~Bievenue au Stunting Track", 5000, 1);
			    SetPlayerInterior(playerid,14);
			    PlayerInfo[playerid][pInt] = 14;
				SetPlayerPos(playerid,-1464.7732,1557.5533,1052.5313);
			}
			else if (PlayerToPoint(4, playerid,2073.2979,-1831.1228,13.5469))
			{ // Pay & Spray
			    if(GetPlayerState(playerid) == 2)
			    {
			        if(GetPlayerMoney(playerid) > SBizzInfo[5][sbEntranceCost] + 100)
			        {
			            if(SBizzInfo[5][sbProducts] > 0)
			            {
           					new tmpcar = GetPlayerVehicleID(playerid);
							SetVehiclePos(tmpcar, 2062.1294,-1831.5498,13.5469);
			        		SetVehicleZAngle(tmpcar, 90);
			        		SafeGivePlayerMoney(playerid, -150);
			        		SetTimerEx("AfterSpray1", 5000, false, "i", playerid);
						}
						else
						{
						    GameTextForPlayer(playerid, "~r~Plus de Stock", 5000, 1);
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas assez d'argent pour reparer votre voiture.");
					}
			    }
			}
			else if (PlayerToPoint(4, playerid,1024.9756,-1030.7930,32.0257))
			{ // Pay & Spray
			    if(GetPlayerState(playerid) == 2)
			    {
			        if(GetPlayerMoney(playerid) > SBizzInfo[5][sbEntranceCost] + 100)
			        {
			            if(SBizzInfo[5][sbProducts] > 0)
			            {
           					new tmpcar = GetPlayerVehicleID(playerid);
							SetVehiclePos(tmpcar, 1024.9763,-1021.8850,32.1016);
			        		SetVehicleZAngle(tmpcar, 0);
			        		SafeGivePlayerMoney(playerid, -150);
			        		SetTimerEx("AfterSpray2", 5000, false, "i", playerid);
						}
						else
						{
						    GameTextForPlayer(playerid, "~r~Plus de Stock", 5000, 1);
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas assez d'argent pour reparer votre voiture.");
					}
			    }
			}
			else if (PlayerToPoint(4, playerid,488.3819,-1733.0563,11.1752))
			{ // Pay & Spray
			    if(GetPlayerState(playerid) == 2)
			    {
			        if(GetPlayerMoney(playerid) > SBizzInfo[5][sbEntranceCost] + 100)
			        {
			            if(SBizzInfo[5][sbProducts] > 0)
			            {
           					new tmpcar = GetPlayerVehicleID(playerid);
							SetVehiclePos(tmpcar, 487.4099,-1741.4585,11.1330);
			        		SetVehicleZAngle(tmpcar, 180);
			        		SafeGivePlayerMoney(playerid, -150);
			        		SetTimerEx("AfterSpray3", 5000, false, "i", playerid);
						}
						else
						{
						    GameTextForPlayer(playerid, "~r~Plus de Stock", 5000, 1);
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas assez d'argent pour reparer votre voiture.");
					}
			    }
			}
			else if (PlayerToPoint(4, playerid,719.8940,-464.8272,16.3359))
			{ // Pay & Spray
			    if(GetPlayerState(playerid) == 2)
			    {
			        if(GetPlayerMoney(playerid) > SBizzInfo[5][sbEntranceCost] + 100)
			        {
			            if(SBizzInfo[5][sbProducts] > 0)
			            {
           					new tmpcar = GetPlayerVehicleID(playerid);
							SetVehiclePos(tmpcar, 720.3924,-456.0286,16.3359);
			        		SetVehicleZAngle(tmpcar, 0);
			        		SafeGivePlayerMoney(playerid, -150);
			        		SetTimerEx("AfterSpray4", 5000, false, "i", playerid);
						}
						else
						{
						    GameTextForPlayer(playerid, "~r~Plus de Stock", 5000, 1);
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas assez d'argent pour reparer votre voiture.");
					}
			    }
			}
		}
		return 1;
	}
    if(strcmp(cmd, "/opendoor", true) == 0 || strcmp(cmd, "/od", true) == 0 || strcmp(cmd, "/ouvrireporte", true) == 0)
	//if(strcmp(cmd, "/opendoor", true) == 0 || strcmp(cmdtext, "/od", true)==0)
	{
		if (GetPlayerState(playerid) == 1) CheckForWalkingTeleport(playerid);
		return 1;
	}
    if(strcmp(cmd, "/sortir", true)==0||strcmp(cmdtext, "/exit", true)==0)
	//if(strcmp(cmd, "/sortir", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			for(new i = 0; i <  sizeof(HouseInfo); i++)
			{
				//printf("Maison :%d",i);
				if (PlayerToPoint(3, playerid,HouseInfo[i][hExitx], HouseInfo[i][hExity], HouseInfo[i][hExitz]))
				{
						SetPlayerInterior(playerid,0);
						i = GetPlayerVirtualWorld(playerid);
						/*if(GetPlayerVirtualWorld(playerid) == 36)
						{
						    i = 36;
						}
						else if(GetPlayerVirtualWorld(playerid) == 35)
						{
						    i = 35;
						}
						else if(GetPlayerVirtualWorld(playerid) == 34)
						{
						    i = 34;
						}*/
						SetPlayerPos(playerid,HouseInfo[i][hEntrancex],HouseInfo[i][hEntrancey],HouseInfo[i][hEntrancez]);
						PlayerInfo[playerid][pInt] = 0;
						PlayerInfo[playerid][pLocal] = 255;
						SetCameraBehindPlayer(playerid);
						SetPlayerVirtualWorld(playerid,0);
						HouseEntered[playerid] = 255;
						if(HouseInfo[i][hHel] == 1)
						{
							new Float:tempheal;
							GetPlayerHealth(playerid,tempheal);
							if(tempheal < 100.0)
							{
								SetPlayerHealth(playerid,100.0);
							}
						}
						return 1;
				}
			}
        	if(IsPlayerInAnyVehicle(playerid) == 1 && ceinture[playerid] == 1)
        	{
                //new string[256];
                GetPlayerName(playerid, playername, sizeof(playername));
	           	SendClientMessage(playerid, COLOR_WHITE, "Vous avez retiré votre ceinture automatiquement !");
		        format(string, sizeof(string), " %s descend et retire sa ceinture de sécuritée.", playername);
	        	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            	SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 30.0, 5000);
        	    printf("%s", string);
        		ceinture[playerid] = 0;
         		gEngine[playerid] = 0;
         		RemovePlayerFromVehicle(playerid);
         		TogglePlayerControllable(playerid, 1);
        	}
           	if(IsPlayerInAnyVehicle(playerid) == 1 && casque[playerid] == 1)
            {
                //new string[256];
                GetPlayerName(playerid, playername, sizeof(playername));
        		SendClientMessage(playerid, COLOR_WHITE, "Vous avez retiré votre casque automatiquement !");
        		format(string, sizeof(string), " %s descend et retire son casque de sécurité.", playername);
        	 	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            	SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 30.0, 5000);
             	RemovePlayerAttachedObject(playerid, SLOT);
        	    printf("%s", string);
        		ceinture[playerid] = 0;
        		gEngine[playerid] = 0;
        		RemovePlayerFromVehicle(playerid);
        		TogglePlayerControllable(playerid, 1);
         	}
           	else if(IsPlayerInAnyVehicle(playerid) == 1 && ceinture[playerid] == 0)
        	{
 	        	ceinture[playerid] = 0;
 	         	gEngine[playerid] = 0;
 	         	RemovePlayerFromVehicle(playerid);
 	         	TogglePlayerControllable(playerid, 1);
          		return 1;
        	}
			for(new i = 0; i <  sizeof(BizzInfo); i++)
			{
				//printf("Bizz :%d",i);
				if (PlayerToPoint(3, playerid,BizzInfo[i][bExitX], BizzInfo[i][bExitY], BizzInfo[i][bExitZ]))
				{
					SetPlayerInterior(playerid,0);
					PlayerInfo[playerid][pInt] = 0;
					SetPlayerPos(playerid,BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ]);
					PlayerInfo[playerid][pLocal] = 255;
				}
			}
			new carid = GetPlayerVehicleID(playerid);
			if(lemeccoffre[playerid] == 1)
			{
			    return 1;
			}
			if (IsABus(carid))
			{
				TogglePlayerControllable(playerid, 1);
				//GangZoneHideForPlayer(playerid, buszoneeast);
				//GangZoneHideForPlayer(playerid, buszonewest);
				RemovePlayerFromVehicle(playerid);
				if (BusrouteEast[playerid][0] != 0 || BusrouteWest[playerid][0] != 0) BusrouteEnd(playerid, carid);
			}
			if (IsASweeper(carid))
			{
				TogglePlayerControllable(playerid, 1);
				RemovePlayerFromVehicle(playerid);
			}
			if (IsAGarbageTruck(carid))
			{
				TogglePlayerControllable(playerid, 1);
				RemovePlayerFromVehicle(playerid);
			}
			if(IsAJobPlane(carid))
			{
			    if(carid != 0)
			    {
			        SetVehicleToRespawn(carid);
			    }
			    TogglePlayerControllable(playerid, 1);
			    RemovePlayerFromVehicle(playerid);
			    AirRoute[playerid] = 0;
			    DisablePlayerCheckpoint(playerid);
			    PlayerInfo[playerid][pWork] += 1;
			}
			if(IsATrain(carid))
			{
			    if(carid != 0)
			    {
			        SetVehicleToRespawn(carid);
			    }
			    TogglePlayerControllable(playerid, 1);
			    RemovePlayerFromVehicle(playerid);
			    TrainRoute[playerid] = 0;
			    DisablePlayerCheckpoint(playerid);
			    PlayerInfo[playerid][pWork] += 1;
			}
			if(IsAHarvest(carid))
			{
			    if (carid != 0)
				{
					SetVehicleToRespawn(carid);
				}
				if(FarmerPickup[playerid][0] >= 1 && FarmerPickup[playerid][0] <= 22)
				{
					FarmerPickup[playerid][0]--;
				}
			    TogglePlayerControllable(playerid, 1);
			    RemovePlayerFromVehicle(playerid);
			    FarmerVar[playerid] = 0;
			    DisablePlayerCheckpoint(playerid);

			}
			if(IsADrugHarvest(carid))
			{
			    if (carid != 0)
			    {
			        SetVehicleToRespawn(carid);
			    }
			    if(DrugFarmerPickup[playerid][0] >= 1 && DrugFarmerPickup[playerid][0] <= 37)
			    {
			        DrugFarmerPickup[playerid][0]--;
			    }
			    TogglePlayerControllable(playerid, 1);
			    RemovePlayerFromVehicle(playerid);
			    DrugFarmerVar[playerid] = 0;
			    DisablePlayerCheckpoint(playerid);
			}
			if(IsASmuggleCar(carid))
			{
			    if(carid != 0)
			    {
			        SetVehicleToRespawn(carid);
			    }
			    TogglePlayerControllable(playerid, 1);
			    RemovePlayerFromVehicle(playerid);
			    SmugglerWork[playerid] = 0;
			    DisablePlayerCheckpoint(playerid);
			}
			if(IsADozer(carid))
			{
			    TogglePlayerControllable(playerid, 1);
				RemovePlayerFromVehicle(playerid);
			}
			if(IsAnOwnableCar(carid))
	   		{
	        	TogglePlayerControllable(playerid, 1);
	        	RemovePlayerFromVehicle(playerid);
	    	}
	    	if(VoitureASabot[carid] == 1)
	   		{
	        	TogglePlayerControllable(playerid, 1);
	        	RemovePlayerFromVehicle(playerid);
	    	}
	    	if(IsPlayerInAnyVehicle(playerid) && !engineOn[GetPlayerVehicleID(playerid)] && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	    	{
	    	    TogglePlayerControllable(playerid, 1);
				RemovePlayerFromVehicle(playerid);
			}
			if(GetPlayerVehicleID(playerid) >= 112 && GetPlayerVehicleID(playerid) <= 130 || GetPlayerVehicleID(playerid) >= 135 && GetPlayerVehicleID(playerid) <= 154)
			{
				TogglePlayerControllable(playerid, 1);
				RemovePlayerFromVehicle(playerid);
			}
			else if (PlayerToPoint(3.0, playerid,387.7978,173.8582,1008.3828))
			{
			    SetPlayerInterior(playerid,0);
				SetPlayerPos(playerid,1481.0206,-1771.1138,18.7958);
				PlayerInfo[playerid][pInt] = 0;
				PlayerInfo[playerid][pLocal] = 255;
			}
			else if (PlayerToPoint(6.0, playerid,-1404.5299,-259.0602,1043.6563))
			{
			    SetPlayerInterior(playerid,0);
			    PlayerInfo[playerid][pInt] = 0;
				SetPlayerPos(playerid,2695.6235,-1704.6960,11.8438);
			}
			else if (PlayerToPoint(8.0, playerid,-1443.0554,-581.1879,1055.0472))
			{
			    SetPlayerInterior(playerid,0);
			    PlayerInfo[playerid][pInt] = 0;
				SetPlayerPos(playerid,-2111.5686,-443.9720,38.7344);
			}
			else if (PlayerToPoint(8.0, playerid,-1464.7732,1557.5533,1052.5313))
			{
			    SetPlayerInterior(playerid,0);
			    PlayerInfo[playerid][pInt] = 0;
				SetPlayerPos(playerid,-2080.3079,-406.0309,38.7344);
			}
			else if(PlayerToPoint(8.0, playerid,207.7662,-111.2663,1005.1328)) //sortie binco
	{
		GameTextForPlayer(playerid, "~w~Los Santos", 5000, 1);
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid,2245.2778,-1661.1738,15.4690);
		OnPlayerExitFood(playerid); // ?
		PlayerInfo[playerid][pInt] = 0;
	}
			else if (PlayerToPoint(8.0, playerid,1172.1730,-1333.9272,1006.4965))
	{
		SetPlayerPos(playerid, 1173.5850,-1325.5488,15.1953);
		GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 270);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPoint(8.0, playerid,594.1618,-545.8964,2699.8735)) //Bikers gang hq
	{
		SetPlayerPos(playerid, 854.4448,-602.1243,18.4219);
		GameTextForPlayer(playerid, "~w~Dillimort",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 1);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPoint(8.0, playerid,587.7666,-547.0664,2703.6406)) // bikers sortie garage
	{
		SetPlayerPos(playerid, 826.4645,-611.4710,16.3359);
		GameTextForPlayer(playerid, "~w~Dillimort",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 1);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPoint(8.0, playerid,1172.1730,-1333.9272,1006.4965))
	{
		SetPlayerPos(playerid, 1174.2563,-1323.3102,15.3943);
		GameTextForPlayer(playerid, "~w~Une 2eme Chance",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 270);
		PlayerInfo[playerid][pInt] = 0;

	}
			else if (PlayerToPoint(8.0, playerid,1726.8850,-1638.2347,20.2153))
	{
		SetPlayerPos(playerid,1727.0743,-1634.4840,20.2161 );
		GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
		SetPlayerInterior(playerid,0);
		PlayerInfo[playerid][pInt] = 0;
		}
			else if(PlayerToPoint(8.0, playerid,246.5325,62.4251,1003.6406))
	{
		GameTextForPlayer(playerid, "~w~Los Santos", 5000, 1);
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid,1552.3231,-1674.6780,16.1953);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPoint(8.0, playerid,1494.2778,1303.7288,1093.2891))
	{
		SetPlayerPos(playerid, 2046.8928,-1908.0372,13.5469);
		GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 280);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPoint(8.0, playerid,-3436.2021,476.3759,57.6132))
	{
		GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
		SetPlayerInterior(playerid,0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerPos(playerid, 1173.2563,-1323.3102,15.3943);
	}
			else if (PlayerToPoint(8.0, playerid,318.6051,1114.4801,1083.8828))
	{
		SetPlayerPos(playerid, 2000.1522,-1116.9473,26.7813);
		GameTextForPlayer(playerid, "~w~Quartier Crip'Z Negro",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 1);
		PlayerInfo[playerid][pInt] = 0;
	}
			else if (PlayerToPoint(8.0, playerid,1139.0200,-1328.6912,1019.7036))
	{
		SetPlayerPos(playerid, 1178.1229,-1324.0979,14.1045);
		GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 270);
		PlayerInfo[playerid][pInt] = 0;
	}
			else if(NoFuel[playerid] == 1)
			{
			    TogglePlayerControllable(playerid, 1);
				RemovePlayerFromVehicle(playerid);
				NoFuel[playerid] = 0;
			}
		}
		return 1;
	}
    if(strcmp(cmd, "/maison", true) == 0 || strcmp(cmd, "/home", true) == 0 || strcmp(cmd, "/mamaison", true) == 0)
	//if(strcmp(cmd, "/maison", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pPhousekey] != 255)
			{
			    if(PlayerOnMission[playerid] > 0)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "Vous êtes en mission, vous ne pouvez pas utiliser cette commande!");
			        return 1;
			    }
				SetPlayerCheckpoint(playerid,HouseInfo[PlayerInfo[playerid][pPhousekey]][hEntrancex], HouseInfo[PlayerInfo[playerid][pPhousekey]][hEntrancey], HouseInfo[PlayerInfo[playerid][pPhousekey]][hEntrancez], 4.0);
				GameTextForPlayer(playerid, "~w~Votre maison est indique par un ~r~point rouge~r~", 5000, 1);
				gPlayerCheckpointStatus[playerid] = CHECKPOINT_HOME;
			}
			else
			{
				GameTextForPlayer(playerid, "~w~Vous n avez pas de maison", 5000, 1);
			}
		}
		return 1;
	}
/*	if(strcmp(cmd, "/towcar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new house = PlayerInfo[playerid][pPhousekey];
			GetPlayerName(playerid, playername, sizeof(playername));
			if (house != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
			{
				if(SBizzInfo[8][sbProducts] == 0)
				{
					GameTextForPlayer(playerid, "~r~Plus de Stock", 5000, 1);
					return 1;
				}
				if(CarTow(house+1))
				{
					GameTextForPlayer(playerid, "~w~Car~n~~g~Towed Home~n~~r~$-100", 5000, 1);
					SafeGivePlayerMoney(playerid,-100);
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					SBizzInfo[8][sbTill] += 100;//towcar buisness
					ExtortionSBiz(8, 1000);
					SBizzInfo[8][sbProducts]--;
				}
				else
				{
					GameTextForPlayer(playerid, "~w~Car is~n~in ~r~use", 5000, 1);
				}
			}
			else
			{
				GameTextForPlayer(playerid, "~w~You are not a home owner", 5000, 1);
			}
		}
		return 1;
	}*/
	/*if(strcmp(cmd, "/fixcar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new house = PlayerInfo[playerid][pPhousekey];
			GetPlayerName(playerid, playername, sizeof(playername));
			if (house != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
			{
				if(SBizzInfo[8][sbProducts] == 0)
				{
					GameTextForPlayer(playerid, "~r~Plus de Stock", 5000, 1);
					return 1;
				}
				if(CarRespawn(house+1))
				{
					GameTextForPlayer(playerid, "~w~Car~n~~g~Repaired~n~~r~$-50", 5000, 1);
					SafeGivePlayerMoney(playerid,-50);
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					SBizzInfo[8][sbTill] += 50;//towcar buisness
					ExtortionSBiz(8, 1000);
					SBizzInfo[8][sbProducts]--;
				}
				else
				{
					GameTextForPlayer(playerid, "~w~Car is~n~in ~r~use", 5000, 1);
				}
			}
			else
			{
				GameTextForPlayer(playerid, "~w~You are not a home owner", 5000, 1);
			}
		}
		return 1;
	}*/
//-----------------------------[TOW CAR]--------------------------------------------------------
	if(strcmp(cmd,"/rem",true)==0 || strcmp(cmd, "/remorquer", true) == 0 || strcmp(cmd, "/tow", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
		    if(PlayerInfo[playerid][pJob] == 7 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)
		    {
		        if(IsPlayerInAnyVehicle(playerid))
		        {
			    	if (GetVehicleModel(GetPlayerVehicleID(playerid)) == 525)
		     	   	{
		     	   	    if(GetPlayerState(playerid)==2)
		     	   	    {
							new Float:pX,Float:pY,Float:pZ;
							GetPlayerPos(playerid,pX,pY,pZ);
							new Float:veX,Float:veY,Float:veZ;
							new Found=0;
							new vid=0;
							while((vid<MAX_VEHICLES)&&(!Found))
							{
   	 							vid++;
   	 							GetVehiclePos(vid,veX,veY,veZ);
   	 							if ((floatabs(pX-veX)<7.0)&&(floatabs(pY-veY)<7.0)&&(floatabs(pZ-veZ)<7.0)&&(vid!=GetPlayerVehicleID(playerid)))
								{
			   				    	Found=1;
			   				    	if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
			           				{
			   				        	DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
						           	}
						           	else
						           	{
			    						AttachTrailerToVehicle(vid,GetPlayerVehicleID(playerid));
									}
			 					}
			     			}
							if(!Found)
				 			{
			   					SendClientMessage(playerid,0xFFFF00AA,"Pas de voiture pres de vous (Bug syncro? Monter dans le véhicule a remorquer).");
			   				}
						}
						else
						{
							SendClientMessage(playerid, COLOR_GRAD2, "Vous devez être le conducteur!");
							return 1;
						}
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD2, "Vous devez être dans une dépanneuse!");
						return 1;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Vous devez être dans un vehicule!");
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid,COLOR_GRAD2,"Vous devez être mecanicien!");
				return 1;
			}
		}
		return 1;
	}
//----------------------------------[BIZZ]-----------------------------------------------
    if(strcmp(cmd, "/acheterbiz", true) == 0 || strcmp(cmd, "//achetebiz", true) == 0)
	//if(strcmp(cmd, "/acheterbiz", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new Float:oldposx, Float:oldposy, Float:oldposz;
			GetPlayerName(playerid, playername, sizeof(playername));
			GetPlayerPos(playerid, oldposx, oldposy, oldposz);
            if(PlayerInfo[playerid][pPbiskey] != 255)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Vous avez déjà un biz, Tapez /vendrebiz si vous voulez acheter celui ci.");
				return 1;
			}
			for(new sbiz = 0; sbiz < sizeof(SBizzInfo); sbiz++)
			{
				if(PlayerToPoint(2.0, playerid, SBizzInfo[sbiz][sbEntranceX], SBizzInfo[sbiz][sbEntranceY], SBizzInfo[sbiz][sbEntranceZ]) && SBizzInfo[sbiz][sbOwned] == 0)
				{
					if(PlayerInfo[playerid][pLevel] < SBizzInfo[sbiz][sbLevelNeeded])
					{
						format(string, sizeof(string), "Vous devez être niveau %d pour pouvoir acheter ceci!",SBizzInfo[sbiz][sbLevelNeeded]);
						SendClientMessage(playerid, COLOR_GRAD5, string);
						return 1;
					}
					if(GetPlayerMoney(playerid) > SBizzInfo[sbiz][sbBuyPrice])
					{
						PlayerInfo[playerid][pPbiskey] = sbiz+100;
						SBizzInfo[sbiz][sbOwned] = 1;
						GetPlayerName(playerid, sendername, sizeof(sendername));
						strmid(SBizzInfo[sbiz][sbOwner], sendername, 0, strlen(sendername), 255);
						SafeGivePlayerMoney(playerid,-SBizzInfo[sbiz][sbBuyPrice]);
						PlayerPlayMusic(playerid);
						SendClientMessage(playerid, COLOR_WHITE, "Félicitations pour votre nouvel achat.");
						SendClientMessage(playerid, COLOR_WHITE, "Tapez /aide pour voir la section d'aide pour les biz.");
                        DateProp(playerid);
						OnPropUpdate();
						OnPlayerUpdate(playerid);
						return 1;
					}
					else
					{
						SendClientMessage(playerid, COLOR_WHITE, "Vous n'avez pas assez d'argent!");
						return 1;
					}
				}
			}
			for(new sbiz = 0; sbiz < sizeof(BizzInfo); sbiz++)
			{
				if(PlayerToPoint(2.0, playerid, BizzInfo[sbiz][bEntranceX], BizzInfo[sbiz][bEntranceY], BizzInfo[sbiz][bEntranceZ]) && BizzInfo[sbiz][bOwned] == 0)
				{
					if(PlayerInfo[playerid][pLevel] < BizzInfo[sbiz][bLevelNeeded])
					{
						format(string, sizeof(string), "Vous devez être niveau %d pour pouvoir acheter ceci!",BizzInfo[sbiz][bLevelNeeded]);
						SendClientMessage(playerid, COLOR_GRAD5, string);
						return 1;
					}
					if(GetPlayerMoney(playerid) > BizzInfo[sbiz][bBuyPrice])
					{
						PlayerInfo[playerid][pPbiskey] = sbiz;
						BizzInfo[sbiz][bOwned] = 1;
						GetPlayerName(playerid, sendername, sizeof(sendername));
						strmid(BizzInfo[sbiz][bOwner], sendername, 0, strlen(sendername), 255);
						SafeGivePlayerMoney(playerid,-BizzInfo[sbiz][bBuyPrice]);
						PlayerPlayMusic(playerid);
						SetPlayerInterior(playerid,BizzInfo[sbiz][bInterior]);
						PlayerInfo[playerid][pInt] = BizzInfo[sbiz][bInterior];
						SetPlayerPos(playerid,BizzInfo[sbiz][bExitX],BizzInfo[sbiz][bExitY],BizzInfo[sbiz][bExitZ]);
						GameTextForPlayer(playerid, "~w~Bienvenue~n~Vous pouvez sortir quand vous le voulez en tappant /sortir pres de la porte.", 5000, 3);
						PlayerInfo[playerid][pInt] = BizzInfo[sbiz][bInterior];
						PlayerInfo[playerid][pLocal] = sbiz ;
						SendClientMessage(playerid, COLOR_WHITE, "Félicitations pour votre nouvel achat.");
						SendClientMessage(playerid, COLOR_WHITE, "Tapez /aide pour voir la section d'aide pour les biz.");
                        DateProp(playerid);
						OnPropUpdate();
						OnPlayerUpdate(playerid);
						return 1;
					}
					else
					{
						SendClientMessage(playerid, COLOR_WHITE, "Vous n'avez pas assez d'argent!");
						return 1;
					}
				}
			}
		}
		return 1;
	}
    if(strcmp(cmd, "/vendrebiz", true) == 0 || strcmp(cmd, "/sellbiz", true) == 0 || strcmp(cmd, "/vendrebis", true) == 0)
	//if(strcmp(cmd, "/vendrebiz", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			GetPlayerName(playerid, playername, sizeof(playername));
			if(PlayerInfo[playerid][pPbiskey] == 255)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Vous n'avez pas de biz.");
				return 1;
			}
			if(PlayerInfo[playerid][pMarried] > 0)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "Vous êtes marrié vous ne pouvez pas vendre votre biz!");
		        return 1;
		    }
			if(PlayerInfo[playerid][pPbiskey] >= 100 && strcmp(playername, SBizzInfo[PlayerInfo[playerid][pPbiskey]-100][sbOwner], true) == 0)
			{
				new bouse = PlayerInfo[playerid][pPbiskey]-100;
				SafeGivePlayerMoney(playerid,SBizzInfo[bouse][sbTill]);
				SBizzInfo[bouse][sbLocked] = 1;
				SBizzInfo[bouse][sbOwned] = 0;
				GetPlayerName(playerid, sendername, sizeof(sendername));
				strmid(SBizzInfo[bouse][sbOwner], "The State", 0, strlen("The State"), 255);
				strmid(SBizzInfo[bouse][sbExtortion], "No-one", 0, strlen("No-one"), 255);
				//ConsumingMoney[playerid] = 1;
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~w~Felicitations~n~ Vous avez vendu votre biz pour ~n~~g~$%d", SBizzInfo[bouse][sbTill]);
				GameTextForPlayer(playerid, string, 10000, 3);
				SBizzInfo[bouse][sbTill] = 0;
				PlayerInfo[playerid][pPbiskey] = 255;
				OnPropUpdate();
				OnPlayerUpdate(playerid);
				return 1;
			}
			if(strcmp(playername, BizzInfo[PlayerInfo[playerid][pPbiskey]][bOwner], true) == 0)
			{
				new bouse = PlayerInfo[playerid][pPbiskey];
				BizzInfo[bouse][bLocked] = 1;
				BizzInfo[bouse][bOwned] = 0;
				GetPlayerName(playerid, sendername, sizeof(sendername));
				strmid(BizzInfo[bouse][bOwner], "The State", 0, strlen("The State"), 255);
				strmid(BizzInfo[bouse][bExtortion], "No-one", 0, strlen("No-one"), 255);
				//ConsumingMoney[playerid] = 1;
				SafeGivePlayerMoney(playerid,BizzInfo[bouse][bTill]);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~w~Felicitations~n~ Vous avez vendu votre biz pour ~n~~g~$%d", BizzInfo[bouse][bTill]);
				GameTextForPlayer(playerid, string, 10000, 3);
				BizzInfo[bouse][bTill] = 0;
				PlayerInfo[playerid][pPbiskey] = 255;
				OnPropUpdate();
				OnPlayerUpdate(playerid);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "Vous n'avez pas de biz.");
			}
		}
		return 1;
	}
	if (strcmp(cmd, "/bizinfo", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new bouse = PlayerInfo[playerid][pPbiskey];
			if(bouse == 255)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Vous n'avez pas de biz.");
				return 1;
			}
			if (bouse >= 100)
			{

				PrintSBizInfo(playerid,bouse-100);
			}
			else
			{
				PrintBizInfo(playerid,bouse);
			}
		}
		return 1;
	}
    if(strcmp(cmd, "/prodprix", true) == 0 || strcmp(cmd, "/produitprix", true) == 0 || strcmp(cmd, "/prixprod", true) == 0)
	//if(strcmp(cmd, "/prodprix", true) == 0)
	{
		new bouse = PlayerInfo[playerid][pPbiskey];
		if (bouse == 255)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Vous n'avez pas de biz.");
			return 1;
		}
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_WHITE, "USAGE: /prodprix [montant pour payer pour les produit]");
		}
		if(strval(tmp) < 1 || strval(tmp) > 99999)
		{
			SendClientMessage(playerid, COLOR_WHITE, "Prix minimum $1, Prix maximum $99999.");
			return 1;
		}
		if (bouse >= 100)
		{
			if(strval(tmp) > SBizzInfo[bouse-100][sbTill])
			{
				SendClientMessage(playerid, COLOR_WHITE, "Vous n'avez pas assez dans votre caisse.");
				return 1;
			}
			SBizzInfo[bouse-100][sbPriceProd] = strval(tmp);
			format(string, sizeof(string), "Vous avez acheté des produits pour $%d.", SBizzInfo[bouse-100][sbPriceProd]);
		}
		else
		{
			if(strval(tmp) > BizzInfo[bouse][bTill])
			{
				SendClientMessage(playerid, COLOR_WHITE, "Vous n'avez pas assez dans votre caisse.");
				return 1;
			}
			BizzInfo[bouse][bPriceProd] = strval(tmp);
			format(string, sizeof(string), "Vous avez acheté des produits pour $%d.", BizzInfo[bouse][bPriceProd]);
		}
		OnPropUpdate();
		SendClientMessage(playerid, COLOR_WHITE, string);
		return 1;
	}
	if(strcmp(cmd, "/bizfee", true) == 0 || strcmp(cmd, "/prixentrer", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new bouse = PlayerInfo[playerid][pPbiskey];
			if (bouse == 255)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Vous n'avez pas assez dans votre caisse!");
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /prixentrer [Prix de l'entrée]");
			}
			if(strval(tmp) < 0 || strval(tmp) > 99999)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Prix minimum : $0. Prix maximum : $99999.");
				return 1;
			}
			if (bouse >= 100)
			{
				SBizzInfo[bouse-100][sbEntranceCost] = strval(tmp);
				format(string, sizeof(string), "Le prix de l'entrée à été mis à $%d.", SBizzInfo[bouse-100][sbEntranceCost]);
			}
			else
			{
				BizzInfo[bouse][bEntranceCost] = strval(tmp);
				format(string, sizeof(string), "Le prix de l'entrée à été mis à $%d.", BizzInfo[bouse][bEntranceCost]);
			}
			OnPropUpdate();
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
		return 1;
	}
	if(strcmp(cmd, "/extortion", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new bouse = PlayerInfo[playerid][pPbiskey];
			if (bouse == 255)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Vous n'avez pas de biz.");
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /extortion [playerid/PartOfName] (or 555 for Personne)");
			    return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        GetPlayerName(playerid, sendername, sizeof(sendername));
			        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			        format(string, sizeof(string), " %s sait que vous avez mis qu'il extorquait votre biz.",giveplayer);
			        SendClientMessage(playerid, COLOR_WHITE, string);
			        format(string, sizeof(string), " %s à mis dans les info de son biz, que vous l'extorquiez.",sendername);
			        SendClientMessage(giveplayerid, COLOR_WHITE, string);
			        if (bouse >= 100)
					{
					    format(string, sizeof(string), "%s",giveplayer);
						strmid(SBizzInfo[bouse-100][sbExtortion], string, 0, sizeof(string), 255);
						format(string, sizeof(string), "Le Nom de l'extorqueur est %s",SBizzInfo[bouse-100][sbExtortion]);
					}
					else
					{
					    format(string, sizeof(string), "%s",giveplayer);
						strmid(BizzInfo[bouse][bExtortion], string, 0, sizeof(string), 255);
						format(string, sizeof(string), "Le Nom de l'extorqueur est %s",BizzInfo[bouse][bExtortion]);
					}
					OnPropUpdate();
					SendClientMessage(playerid, COLOR_WHITE, string);
			    }
			}
			else if(giveplayerid == 555)
			{
			    if (bouse >= 100)
				{
				    format(string, sizeof(string), "Personne");
					strmid(SBizzInfo[bouse-100][sbExtortion], string, 0, sizeof(string), 255);
					format(string, sizeof(string), "Le Nom de l'extorqueur est %s",SBizzInfo[bouse-100][sbExtortion]);
				}
				else
				{
				    format(string, sizeof(string), "Personne");
					strmid(BizzInfo[bouse][bExtortion], string, 0, sizeof(string), 255);
					format(string, sizeof(string), "Le Nom de l'extorqueur est %s",BizzInfo[bouse][bExtortion]);
				}
				OnPropUpdate();
				SendClientMessage(playerid, COLOR_WHITE, string);
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté!");
			    return 1;
			}
		}
		return 1;
	}
    if(strcmp(cmd, "/nombiz", true) == 0 || strcmp(cmd, "/bizname", true) == 0 || strcmp(cmd, "/nomdubiz", true) == 0)
	//if(strcmp(cmd, "/nombiz", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new bouse = PlayerInfo[playerid][pPbiskey];
			if (bouse == 255)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Vous n'avez pas de biz.");
				return 1;
			}
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /nombiz [nom]");
			}
			if (bouse >= 100)
			{
				strmid(SBizzInfo[bouse-100][sbMessage], result, 0, 64, 255);
				format(string, sizeof(string), "Le Nom du biz est %s",SBizzInfo[bouse-100][sbMessage]);
			}
			else
			{
				strmid(BizzInfo[bouse][bMessage], result, 0, 64, 255);
				format(string, sizeof(string), "Le Nom du biz est %s",BizzInfo[bouse][bMessage]);
			}
			OnPropUpdate();
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
		return 1;
	}
    if(strcmp(cmd, "/retirerbiz", true) == 0 || strcmp(cmd, "/caissebiz", true) == 0 || strcmp(cmd, "/prendrebiz", true) == 0)
	//if(strcmp(cmd, "/retirerbiz", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new bouse = PlayerInfo[playerid][pPbiskey];
			if (bouse == 255)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Vous n'avez pas de biz.");
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				if (bouse >= 100)
				{
					format(string, sizeof(string), "Vous avez $%d dans votre caisse.", SBizzInfo[bouse-100][sbTill]);
					SendClientMessage(playerid, COLOR_GRAD3, string);
				}
				else
				{
					format(string, sizeof(string), "Vous avez $%d dans votre caisse.", BizzInfo[bouse][bTill]);
					SendClientMessage(playerid, COLOR_GRAD3, string);
				}
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /retirerbiz [montant]");
				return 1;
			}
			new cashdeposit = strval(tmp);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /retirerbiz [montant]");
				return 1;
			}
			if (bouse >= 100)
			{
				if(cashdeposit > SBizzInfo[bouse-100][sbTill] || cashdeposit < 1)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Vous n'avez pas assez dans votre caisse.");
					return 1;
				}
			}
			else
			{
				if (cashdeposit > BizzInfo[bouse][bTill] || cashdeposit < 1)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Vous n'avez pas assez dans votre caisse.");
					return 1;
				}
			}
			if (bouse >= 100)
			{
				if(!PlayerToPoint(100, playerid,SBizzInfo[bouse-100][sbEntranceX],SBizzInfo[bouse-100][sbEntranceY],SBizzInfo[bouse-100][sbEntranceZ]))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Vous êtes trop loin de votre biz.");
					return 1;
				}
				else
				{
				    //ConsumingMoney[playerid] = 1;
					SafeGivePlayerMoney(playerid,cashdeposit);
					SBizzInfo[bouse-100][sbTill] -= cashdeposit;
					format(string, sizeof(string), "Vous avez retiré $%d de votre caisse Il vous reste: $%d ", cashdeposit,SBizzInfo[bouse-100][sbTill]);
					OnPropUpdate();
					SendClientMessage(playerid, COLOR_YELLOW, string);
					return 1;
				}
			}
			else
			{
				if (!PlayerToPoint(100, playerid,BizzInfo[bouse][bExitX],BizzInfo[bouse][bExitY],BizzInfo[bouse][bExitZ]))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Vous êtes trop loin de votre biz.");
					return 1;
				}
				else
				{
				    //ConsumingMoney[playerid] = 1;
					SafeGivePlayerMoney(playerid,cashdeposit);
					BizzInfo[bouse][bTill] -= cashdeposit;
					format(string, sizeof(string), "Vous avez retiré $%d de votre caisse Il vous reste: $%d ", cashdeposit,BizzInfo[bouse][bTill]);
					OnPropUpdate();
					SendClientMessage(playerid, COLOR_YELLOW, string);
					return 1;
				}
			}
		}
		return 1;
	}
    if(strcmp(cmd, "/deposerbiz", true) == 0 || strcmp(cmd, "/bizbank", true) == 0 || strcmp(cmd, "/takebis", true) == 0)
	//if(strcmp(cmd, "/deposerbiz", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new bouse = PlayerInfo[playerid][pPbiskey];
			if (bouse == 255)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Vous n'avez pas de biz.");
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				if (bouse >= 100)
				{
					format(string, sizeof(string), "Vous avez $%d dans votre caisse.", SBizzInfo[bouse-100][sbTill]);
					SendClientMessage(playerid, COLOR_GRAD3, string);
				}
				else
				{
					format(string, sizeof(string), "Vous avez $%d dans votre caisse.", BizzInfo[bouse][bTill]);
					SendClientMessage(playerid, COLOR_GRAD3, string);
				}
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /deposerbiz [montant]");
				return 1;
			}
			new cashdeposit = strval(tmp);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /deposerbiz [montant]");
				SendClientMessage(playerid, COLOR_GRAD3, string);
				return 1;
			}
			if (cashdeposit > GetPlayerMoney(playerid) || cashdeposit < 1)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Vous n'avez pas cette somme sur vous.");
				return 1;
			}
			if (bouse >= 100)
			{
				if(!PlayerToPoint(100, playerid,SBizzInfo[bouse-100][sbEntranceX],SBizzInfo[bouse-100][sbEntranceY],SBizzInfo[bouse-100][sbEntranceZ]))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Vous êtes trop loin de votre biz.");
					return 1;
				}
				else
				{
					SafeGivePlayerMoney(playerid,-cashdeposit);
					SBizzInfo[bouse-100][sbTill] += cashdeposit;
					ExtortionSBiz(bouse-100, cashdeposit);
					format(string, sizeof(string), "Vous avez déposé $%d dans votre caisse Vous avez: $%d ", cashdeposit,SBizzInfo[bouse-100][sbTill]);
					OnPropUpdate();
					SendClientMessage(playerid, COLOR_YELLOW, string);
					return 1;
				}
			}
			else
			{
				if (!PlayerToPoint(100, playerid,BizzInfo[bouse][bExitX],BizzInfo[bouse][bExitY],BizzInfo[bouse][bExitZ]))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Vous êtes trop loin de votre biz.");
					return 1;
				}
				else
				{
					SafeGivePlayerMoney(playerid,-cashdeposit);
					BizzInfo[bouse][bTill] += cashdeposit;
					ExtortionBiz(bouse, cashdeposit);
					format(string, sizeof(string), "Vous avez déposé $%d dans votre caisse Vous avez: $%d ", cashdeposit,BizzInfo[bouse][bTill]);
					OnPropUpdate();
					SendClientMessage(playerid, COLOR_YELLOW, string);
					return 1;
				}
			}
		}
		return 1;
	}
//-----------------------------------[HEAL]-------------------------------------------------------------------------
    if(strcmp(cmd, "/sante", true) == 0 || strcmp(cmd, "/heal", true) == 0 || strcmp(cmd, "/soigner", true) == 0)
	//if(strcmp(cmd, "/sante", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			tmp = strtok(cmdtext, idx);
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new location = PlayerInfo[playerid][pLocal];
			if(!strlen(tmp))
			{
				if(location != 255)
				{
					if(location < 99)
					{
						if(HouseInfo[location][hArm] == 1)
						{
							format(string, sizeof(string), " %s à mis une armure.", sendername);
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							SetPlayerArmour(playerid, 50.0);
						}
						else
						{
							format(string, sizeof(string), "Cette maison n'à pas l'amélioration armure.");
							SendClientMessage(playerid, TEAM_GREEN_COLOR,string);
						}
						if(HouseInfo[location][hHel] == 1)
						{
							new Float:tempheal;
							GetPlayerHealth(playerid,tempheal);
							if ( tempheal < 100.0)
							{
								SetPlayerHealth(playerid,100.0);
								PlayerPlaySound(playerid, 1150, 0.0, 0.0, 0.0);
								format(string, sizeof(string), "Vous vous êtes heal à 100.");
								SendClientMessage(playerid, TEAM_GREEN_COLOR,string);
							}
							else
							{
								SendClientMessage(playerid, TEAM_GREEN_COLOR,"Vous êtes déjà soigné.");
							}
						}
						else
						{
							format(string, sizeof(string), "Cette maison n'à pas l'amélioration vie.");
							SendClientMessage(playerid, TEAM_GREEN_COLOR,string);
						}
						return 1;
					}
					else if(location == 101)//Restaurant
					{
					    new Float:tempheal;
						GetPlayerHealth(playerid,tempheal);
						if ( tempheal < 100.0)
						{
							SetPlayerHealth(playerid,100.0);
							PlayerPlaySound(playerid, 1150, 0.0, 0.0, 0.0);
							format(string, sizeof(string), "Vous avé été heal à 100.");
							SendClientMessage(playerid, TEAM_GREEN_COLOR,string);
						}
						else
						{
							SendClientMessage(playerid, TEAM_GREEN_COLOR,"Vous êtes déjà heal à 100.");
						}
					}
					else if(location == 102 && IsACop(playerid))//Police Armoury
					{
					    SetPlayerHealth(playerid,100.0);
					    format(string, sizeof(string), " %s met une armure.", sendername);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						TogglePlayerControllable(playerid, 0);
						GetPlayerPos(playerid, Unspec[playerid][sPx], Unspec[playerid][sPy], Unspec[playerid][sPz]);
						Unspec[playerid][sPint] = PlayerInfo[playerid][pInt];
						Unspec[playerid][sLocal] = PlayerInfo[playerid][pLocal];
						SetPlayerPos(playerid,1527.5,-12.1,1002.0);
						PlayerInfo[playerid][pLocal] = 255;
						SetPlayerInterior(playerid,99);
						Spectate[playerid] = 257;
						SetPlayerArmour(playerid, 100.0);
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /sante [playerid/PartOfName] [prix]");
					return 1;
				}
			}
			giveplayerid = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /sante [playerid/PartOfName] [prix]");
				return 1;
			}
			moneys = strval(tmp);
			if(moneys < 1 || moneys > 1000) { SendClientMessage(playerid, COLOR_GREY, "Le prix ne peux pas être en desous de 1$ et au desus de 1000!"); return 1; }
			if (giveplayerid == playerid)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Vous ne pouvez pas vou heal vou même!");
				return 1;
			}
			if (IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
					GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					if(PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pLeader] == 4)//model
					{
					    if(ProxDetectorS(5.0, playerid, giveplayerid))
					    {
							new Float:tempheal;
							GetPlayerHealth(giveplayerid,tempheal);
							if(tempheal >= 100.0)
							{
								SendClientMessage(playerid, TEAM_GREEN_COLOR,"Cette personne est déjà heal à 100.");
								return 1;
							}
							format(string, sizeof(string), "~y~Vous soignez ~n~~w~%s~n~~g~$%d", giveplayer,moneys);
							GameTextForPlayer(playerid, string, 5000, 1);
							SafeGivePlayerMoney(playerid,moneys);
							SafeGivePlayerMoney(giveplayerid,-moneys);
							new hp = 0;
						    if(PlayerInfo[playerid][pPainPerk] > 0)
						    {
						        hp = 20 * PlayerInfo[playerid][pPainPerk]; hp += 100;
								SetPlayerHealth(giveplayerid, hp);
						    }
						    else
						    {
						        hp = 100;
						        SetPlayerHealth(giveplayerid, 100);
						    }
							PlayerPlaySound(playerid, 1150, 0.0, 0.0, 0.0);
							PlayerPlaySound(giveplayerid, 1150, 0.0, 0.0, 0.0);
							format(string, sizeof(string), "Vous avez été soigné à %d -$%d",hp,moneys);
							SendClientMessage(giveplayerid, TEAM_GREEN_COLOR,string);
							if(STDPlayer[giveplayerid] > 0)
				            {
								STDPlayer[giveplayerid] = 0;
								SendClientMessage(giveplayerid, COLOR_WHITE, " Vous n'avez plus de MST grâce aux médicaments!");
							}
                        }
						else
						{
							SendClientMessage(playerid, COLOR_GRAD1, "Joueur trop loin.");
							return 1;
						}
					}
					else
					{
						SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé a utiliser cette commande!");
						return 1;
					}
				}
			}
			else
			{
				format(string, sizeof(string), "L'ID %d n'est pas connecté.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
//-----------------------------AGL-------------------------------------------------------------------
	if(strcmp(cmd, "/adp", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if (PlayerInfo[playerid][pAdmin] >= 2)
	        {
	            new x_nr[256];
				x_nr = strtok(cmdtext, idx);
				if(!strlen(x_nr)) {
				    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /adp [nom] [playerid/PartOfName]");
				    SendClientMessage(playerid, COLOR_WHITE, "Noms Disponibles: conduite, voler, navigation, peche, arme, moto, poidlourd.");
					return 1;
				}
				if(strcmp(x_nr,"voler",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /adp voler [playerid/PartOfName]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            format(string, sizeof(string), " Vous avez donné le permis de vol à %s.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), " Admin %s vous à donné le permis vol.",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pFlyLic] = 1;
					        return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté!");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"navigation",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /adp navigation [playerid/PartOfName]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            format(string, sizeof(string), " Vous avez donné le permis de navigation à %s.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), " Admin %s vous à donné le permis navigation.",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pBoatLic] = 1;
					        return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté!");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"conduite",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /adp conduite [playerid/PartOfName]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            format(string, sizeof(string), " Vous avez donné le permis de conduire à %s.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), " Admin %s vous à donné le permis conduire.",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pCarLic] = 1;
					        PlayerInfo[giveplayerid][pPointPermis] = 15;
					        return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté!");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"poidlourd",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /adp poidlourd [playerid/PartOfName]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            format(string, sizeof(string), " Vous avez donné le permis de Poid Lourd à %s.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), " Admin %s vous à donné le permis Poid Lourd.",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pLourdLic] = 1;
					        return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté!");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"moto",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /adp moto [playerid/PartOfName]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            format(string, sizeof(string), " Vous avez donné le permis de moto à %s.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), " Admin %s vous à donné le permis moto.",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pMotoLic] = 1;
					        return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté!");
					    return 1;
					}
				}
                else if(strcmp(x_nr,"peche",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /adp peche [playerid/PartOfName]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            format(string, sizeof(string), " Vous avez donné le permis de peche à %s.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), " Admin %s vous à donné le permis de peche.",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pFishLic] = 1;
					        return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté!");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"arme",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /adp arme [playerid/PartOfName]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            format(string, sizeof(string), " Vous avez donné le permis d'arme à %s.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), " Admin %s vous à donné le permis d'arme.",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pGunLic] = 1;
					        return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté!");
					    return 1;
					}
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas autorisé à utiliser cette commande!");
	            return 1;
	        }
	    }
	    return 1;
 	}
//----------------------------------[mole]-----------------------------------------------
	if(strcmp(cmd, "/mole", true) == 0 && PlayerInfo[playerid][pAdmin] >= 4)
	{
	    if(IsPlayerConnected(playerid))
	    {
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				//SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /mole [mole text]");
				return 1;
			}
			format(string, sizeof(string), "SMS: %s, Sender: MOLE (555)",result);
			if (gTeam[playerid] < 3){SendClientMessage(playerid, COLOR_YELLOW, string);}
			SendEnemyMessage(COLOR_YELLOW, string);
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(gTeam[i] >= 3 && gPlayerSpawned[i])
					{
						RingTone[i] =20;
					}
				}
			}
			printf("MOLE: %s", result);
		}
		return 1;
	}
//----------------------------------[HQ]-----------------------------------------------
/*	if(strcmp(cmd, "/hq", true) == 0 && PlayerInfo[playerid][pAdmin] >= 4)
	{
	    if(IsPlayerConnected(playerid))
	    {
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				//SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /hq [hq text]");
				return 1;
			}
			format(string, sizeof(string), "HQ: %s, over", result);
			if (gTeam[playerid] != 2 ){SendClientMessage(playerid, COLOR_DBLUE, string);}
			SendTeamBeepMessage(2, COLOR_DBLUE, string);
			printf("HQ: %s", result);
		}
		return 1;
	}*/
//----------------------------------[RECON]-----------------------------------------------
	if(strcmp(cmd, "/grandeoreilles", true) == 0 || strcmp(cmd, "/grandeoreille", true) == 0 && PlayerInfo[playerid][pAdmin] >= 2)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (!BigEar[playerid])
			{
				BigEar[playerid] = 1;
				SendClientMessage(playerid, COLOR_GRAD2, "Vous êtes à l'affut du moindre bruit.");
			}
			else if (BigEar[playerid])
			{
				(BigEar[playerid] = 0);
				SendClientMessage(playerid, COLOR_GRAD2, "Vous êtes à l'affut du moindre bruit.");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/id", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /id [playerid/PartOfName]");
				return 1;
			}
			new target;
			target = ReturnUser(tmp);
			new sstring[256];
			if(IsPlayerConnected(target))
			{
			    if(target != INVALID_PLAYER_ID)
			    {
					GetPlayerName(target, giveplayer, sizeof(giveplayer));
					format(sstring, sizeof(sstring), "ID: (%d) %s",target,giveplayer);
					SendClientMessage(playerid, COLOR_GRAD1, sstring);
				}
			}
		}
		return 1;
	}
		if(strcmp(cmdtext, "/myid", true) == 0 || strcmp(cmd, "/monid", true) == 0)
 		{
 		new str[256];
 		format(str, 256, "Vous êtes le joueur numéro %d", playerid);
 		SendClientMessage(playerid, COLOR_GRAD1, str);
 		return 1;
	}
	/*if(strcmp(cmd, "/tv", true) == 0 || strcmp(cmd, "/recon", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pDonateRank] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   This thing is removed out of game.");
	            return 1;
	        }
	        if(PlayerInfo[playerid][pDonateRank] > 0)
	        {
	            if(WatchingTV[playerid] < 1)
			    {
		        	GetPlayerPos(playerid, Unspec[playerid][Coords][0],Unspec[playerid][Coords][1],Unspec[playerid][Coords][2]);
		        }
	        }
            new hkey = PlayerInfo[playerid][pPhousekey];
			new house = PlayerInfo[playerid][pLocal];
			if(Spectate[playerid] == 255 && PlayerInfo[playerid][pLocal] != 255 || Spectate[playerid] == 255 && PlayerInfo[playerid][pAdmin] > 0)
			{
				GetPlayerPos(playerid, Unspec[playerid][sPx], Unspec[playerid][sPy], Unspec[playerid][sPz]);
				Unspec[playerid][sPint] = PlayerInfo[playerid][pInt];
				Unspec[playerid][sLocal] = PlayerInfo[playerid][pLocal];
				PlayerInfo[playerid][pLocal] = 255;
				gTeam[playerid] = 0;
			}
			tmp = strtok(cmdtext, idx);
			if(strcmp("off", tmp, true, strlen(tmp)) == 0)
			{
			    if(WatchingTV[playerid] > 0)
			    {
			        WatchingTV[playerid] = 0;
					Spectate[playerid] = 253;
					GameTextForPlayer(playerid, "~w~                TV~n~~r~                Off", 5000, 6);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					return 1;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   You are not watching TV !");
				    return 1;
				}
			}
			if(PlayerInfo[playerid][pAdmin] < 1)
			{
				if(house == 255)
				{
					GameTextForPlayer(playerid, "~r~There is no tv here", 5000, 1);
					return 1;
				}
			}
			if(PlayerInfo[playerid][pAdmin] > 1 || PlayerToPoint(12.0, playerid, HouseInfo[hkey][hExitx], HouseInfo[hkey][hExity],HouseInfo[hkey][hExitz]))
			{
			    if(HouseInfo[hkey][hHealthx] != 1)
			    {
			        GameTextForPlayer(playerid, "~r~This upgrade isn't installed", 5000, 1);
			        return 1;
			    }
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        Spectate[playerid] = giveplayerid;
						new Float:health;
						GetPlayerHealth(Spectate[playerid], health);
						GetPlayerName(Spectate[playerid], giveplayer, sizeof(giveplayer));
						new cash =  GetPlayerMoney(Spectate[playerid]);
						if (PlayerInfo[playerid][pAdmin] >= 1)
						{
							format(string, sizeof(string), "Recon: (%d) %s $%d H:%.0f",Spectate[playerid],giveplayer,cash,health);
						}
						else
						{
							format(string, sizeof(string), "UAV: (%d) %s",Spectate[playerid],giveplayer);
						}
						SendClientMessage(playerid, COLOR_GREEN, string);
						WatchingTV[playerid] = 1;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREEN, "Target is not available.");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREEN, "   You are not in your House !");
				return 1;
			}
		}
		return 1;
	}*/
//----------------------------------[UNCON]-----------------------------------------------

/*	if(strcmp(cmd, "/uncon", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			SetCamBack(playerid);
		}
		return 1;
	}*/

//----------------------------------[AdminChat]-----------------------------------------------
	if(strcmp(cmd, "/admin", true) == 0 || strcmp(cmd, "/a", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/a)dmin [admin chat]");
				return 1;
			}

			new arank[64];
			if(PlayerInfo[playerid][pAdmin] == 1) { arank = "Moderateur"; }
			else if(PlayerInfo[playerid][pAdmin] == 2) { arank = "Admin Niveau 2"; }
			else if(PlayerInfo[playerid][pAdmin] == 3) { arank = "Admin Niveau 3"; }
			else if(PlayerInfo[playerid][pAdmin] == 4) { arank = "Admin Niveau 4"; }
			else if(PlayerInfo[playerid][pAdmin] == 1337) { arank = "Admin General"; }
			else if(PlayerInfo[playerid][pAdmin] == 1338) { arank = "Co Fondateur"; }
			else if(PlayerInfo[playerid][pAdmin] >= 1339) { arank = "Fondateur"; }
			else { arank = "Modérateur"; }


			format(string, sizeof(string), "* %s %s: %s *", arank, sendername, result);
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
				SendAdminMessage(COLOR_LIGHTBLUE, string);
			}
			printf("/a %s %s: %s *", arank, sendername, result);
		}
		return 1;
	}
//-------------------------------[Logout]--------------------------------------------------------------------------
	if (strcmp(cmd, "/logout", true) ==0 )
	{
        if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
				OnPlayerUpdate(playerid);
				gPlayerLogged[playerid] = 0;
				SendClientMessage(playerid, COLOR_GRAD1, "Maintenant vous pouvez vous déconnectez.");
			}
			else
			{
				SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé à utiliser cette commande!");
			}
		}
		return 1;
	}
	if (strcmp(cmd, "/logoutpl", true) ==0 )
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /logoutpl [playerid/PartOfName]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
			    if(IsPlayerConnected(giveplayerid)&&giveplayerid != INVALID_PLAYER_ID)
			    {
					OnPlayerUpdate(giveplayerid);
					gPlayerLogged[giveplayerid] = 0;
					SendClientMessage(playerid, COLOR_GRAD1, "Ce joueur à été déconnecté.");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé à utiliser cette commande!");
			}
		}
		return 1;
	}
//-------------------------------[Logoutall]--------------------------------------------------------------------------
	if (strcmp(cmd, "/logoutall", true) ==0 )
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
						OnPlayerUpdate(i);
						gPlayerLogged[i] = 0;
					}
				}
				SendClientMessage(playerid, COLOR_GRAD1, "Tous les joueurs ont été déconnecté.");
			}
			else
			{
				SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé à utiliser cette commande!");
			}
		}
		return 1;
	}
//--------------------------------------------------------------------------------------
	if(strcmp(cmd, "/cnnn", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
				tmp = strtok(cmdtext, idx);
				new txtid;
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /cnnn <type> ");
					return 1;
				}
				txtid = strval(tmp);
				if(txtid == 2)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Vous ne pouvez pas en choisir 2!");
					return 1;
				}
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[64];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /cnnn <type> [cnnc textformat ~n~=Nouvelleligne ~r~=Rouge ~g~=Verte ~b~=Bleu ~w~=Blanc ~y~=Jaune]");
					return 1;
				}
				format(string, sizeof(string), "~w~%s",result);
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i) == 1)
					{
					    ConvertirTexte (string);
						GameTextForPlayer(i, string, 5000, txtid);
						desactivetext[i] = 1;
						SetTimerEx("DesactiverSpeedo", 5000, 0, "i", i);
					}
				}
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé à utiliser cette commande!");
				return 1;
			}
		}
		return 1;
	}
//[ADMIN]______________________________________________________________________________
 	if (strcmp(cmdtext, "/nos", true) == 0)
        {
        if(PlayerInfo[playerid][pAdmin] >= 1338)
		{
        if(IsPlayerInAnyVehicle(playerid))
        {
        AddVehicleComponent(GetPlayerVehicleID(playerid),1010);
        PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
        }
        else
        {
        SendClientMessage(playerid, COLOR_GREEN, "Tu dois être dans un véhicule pour utiliser cette commande !");
        }
  		}
        return 1;
        }


 	if(strcmp(cmdtext,"/flip",true)==0)
	{
	if(PlayerInfo[playerid][pAdmin] >= 1338)
	{
	new VehicleID,Float:X,Float:Y,Float:Z;
	GetPlayerPos(playerid,X,Y,Z);
	VehicleID = GetPlayerVehicleID(playerid);
	SetVehiclePos(VehicleID,X,Y,Z);
	SetVehicleZAngle(VehicleID,0);
 	}
	return 1;
	}
//-----------------------------------[JAIL]-------------------------------------------------------------------------
	if(strcmp(cmd, "/ajail", true) == 0 || strcmp(cmd, "/jail", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /jail [playerid/PartOfName] [temps(minutes)] [raison]");
				return 1;
			}
			new playa;
			new money;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			money = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
				        GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[64];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
						if(!strlen(result))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /jail [playerid/PartOfName] [temps(minutes)] [raison]");
							return 1;
						}
						format(string, sizeof(string), " Vous avez emprisoné %s.", giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTRED, string);
						format(string, sizeof(string), " Vous avez été emprisonné par Admin %s.", sendername);
						SendClientMessage(playa, COLOR_LIGHTRED, string);
						SafeResetPlayerWeapons(playa);
						TogglePlayerControllable(playerid, 0);
						WantedPoints[playa] = 0;
						PlayerInfo[playa][pJailed] = 2;
						PlayerInfo[playa][pJailTime] = money*60;
						SetPlayerInterior(playa, 6);
						PlayerInfo[playa][pInt] = 6;
						SetPlayerPos(playa, 264.6288,77.5742,1001.0391);
						SetPlayerWorldBounds(playa, 264.6288,77.5742,1001.0391,1798.7453);
						format(string, sizeof(string), "Vous êtes emprisonné pendant %d minutes.", money);
						SendClientMessage(playa, COLOR_WHITE, string);
						format(string, 256, "%s à été emprisonné par l'Admin %s. Raison: %s", giveplayer, sendername, (result));
						BroadCast(COLOR_LIGHTRED,string);
						format(string, sizeof(string), "%s à été emprisonné par l'Admin %s. Raison: %s", giveplayer, sendername, (result));
						printf("%s",string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé à utiliser cette commande!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/sjail", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /sjail [playerid/PartOfName] [temps(minutes)] [raison]");
				return 1;
			}
			new playa;
			new money;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			money = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
				        GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[64];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
						if(!strlen(result))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /sjail [playerid/PartOfName] [temps(minutes)] [raison]");
							return 1;
						}
						format(string, sizeof(string), " Vous avez emprisoné %s.", giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTRED, string);
						format(string, sizeof(string), " Vous avez été emprisonné par Admin %s.", sendername);
						SendClientMessage(playa, COLOR_LIGHTRED, string);
						SafeResetPlayerWeapons(playa);
						TogglePlayerControllable(playerid, 0);
						WantedPoints[playa] = 0;
						PlayerInfo[playa][pJailed] = 2;
						PlayerInfo[playa][pJailTime] = money*60;
						SetPlayerInterior(playa, 6);
						PlayerInfo[playa][pInt] = 6;
						SetPlayerPos(playa, 264.6288,77.5742,1001.0391);
						SetPlayerWorldBounds(playa, 264.6288,77.5742,1001.0391,1798.7453);
						format(string, sizeof(string), "Vous êtes emprisonné pendant %d minutes.", money);
						SendClientMessage(playa, COLOR_WHITE, string);
						format(string, sizeof(string), "%s à été emprisonné par l'Admin %s. Raison: %s", giveplayer, sendername, (result));
						printf("%s",string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé à utiliser cette commande!");
			}
		}
		return 1;
	}
//----------------------------------[TOD]-----------------------------------------------

	if(strcmp(cmd, "/tod", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /tod [heuredujour] (0-23)");
				return 1;
			}
			new hour;
			hour = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1339)
			{
	            SetWorldTime(hour);
				format(string, sizeof(string), "Heure mise à %d.", hour);
				BroadCast(COLOR_GRAD1, string);
			}
			else
			{
				SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé à utiliser cette commande!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/startlotto", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] >= 1339)
	        {
	            format(string, sizeof(string), "News de Loterie : Nous avons commencé l'Élection de la Loterie.");
	            OOCOff(COLOR_DBLUE, string);
	            new rand = random(50);
	            if(rand < 47) { rand += 3; }
	            Lotto(rand);
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas admin !");
	            return 1;
	        }
	    }
		return 1;
	}
//-----------------------------------editstat---------------------------------------
	//if(strcmp(cmd, "/changerstat", true) == 0)
    if(strcmp(cmd, "/modifierstat", true) == 0 || strcmp(cmd, "/editstat", true) == 0 || strcmp(cmd, "/changerstat", true) == 0)
	//if(strcmp(cmd, "/setstat", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /changerstat [playerid/PartOfName] [numerostat] [montant]");
				SendClientMessage(playerid, COLOR_WHITE, "|1 Niveau |2 SpawnHealth |3 Pointamelio |4 Model |5 Comptebanque");
				SendClientMessage(playerid, COLOR_WHITE, "|6 Numerotel |7 Pointsrespect |8 Clefmaison |9 Clefbiz |10 Rangdonnateur");
				SendClientMessage(playerid, COLOR_WHITE, "|11 FMember |12 Detective |13 Avocat |14 Meca |15 Journaliste |16 Carjacker |17 Drogue");
				SendClientMessage(playerid, COLOR_WHITE, "|18 Sexe |19 Box |20 PassKey |21 ClefVeh1 |22 ClefVeh2 |23 ClefVeh3 |24 ClefVeh4");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
            if(IsPlayerConnected(giveplayerid))
	    	{
	    	    if(giveplayerid != INVALID_PLAYER_ID)
	    	    {
					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_WHITE, "USAGE: /changerstat [playerid/PartOfName] [numerostat] [montant]");
						SendClientMessage(playerid, COLOR_WHITE, "|1 Niveau |2 SpawnHealth |3 Pointsamelios |4 Model |5 Comptebanque");
						SendClientMessage(playerid, COLOR_WHITE, "|6 Numerotel |7 Pointsrespect |8 Clefmaison |9 Clefbiz |10 Rangdonnateur");
						SendClientMessage(playerid, COLOR_WHITE, "|11 FMember |12 Detective |13 Avocat |14 Meca |15 Journaliste |16 Carjacker |17 Drogue");
						SendClientMessage(playerid, COLOR_WHITE, "|18 Sexe |19 Box |20 PassKey |21 ClefVeh1 |22 ClefVeh2 |23 ClefVeh3 |24 ClefVeh4");
						return 1;
					}
					new stat;
					stat = strval(tmp);
					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_WHITE, "USAGE: /changerstat [playerid/PartOfName] [numerostat] [montant]");
						SendClientMessage(playerid, COLOR_WHITE, "|1 Niveau |2 SpawnHealth |3 Pointamelio |4 Model |5 Comptebanque");
						SendClientMessage(playerid, COLOR_WHITE, "|6 Numerotel |7 Pointsrespect |8 Clefmaison |9 Clefbiz |10 Rangdonnateur");
						SendClientMessage(playerid, COLOR_WHITE, "|11 FMember |12 Detective |13 Avocat |14 Meca |15 Journaliste |16 Carjacker |17 Drogue");
						SendClientMessage(playerid, COLOR_WHITE, "|18 Sexe |19 Box |20 PassKey |21 ClefVeh1 |22 ClefVeh2 |23 ClefVeh3 |24 Travail Du Joueur");
						SendClientMessage(playerid, COLOR_WHITE, "|25 Heures de travail");
						return 1;
					}
					new amount;
					amount = strval(tmp);
					if (PlayerInfo[playerid][pAdmin] >= 1339)
					{
						switch (stat)
						{
							case 1:
							{
								PlayerInfo[giveplayerid][pLevel] = amount;
								format(string, sizeof(string), "Le niveau du joueur à été mis a %d", amount);
							}
							case 2:
							{
								PlayerInfo[giveplayerid][pSHealth] = amount;
								format(string, sizeof(string), "Le SpawnHealth du joueur à été mis a %d", amount);
							}
							case 3:
							{
								PlayerInfo[giveplayerid][gPupgrade] = amount;
								format(string, sizeof(string), "Les Points Amelios du joueur ont été mis a %d", amount);
							}
							case 4:
							{
								PlayerInfo[giveplayerid][pModel] = amount;
								format(string, sizeof(string), "Le Model du joueur à été mis a %d", amount);
							}
							case 5:
							{
								PlayerInfo[giveplayerid][pAccount] = amount;
								format(string, sizeof(string), "Le Compte Banquaire du joueur à été mis a $%d", amount);
							}
							case 6:
							{
								PlayerInfo[giveplayerid][pPnumber] = amount;
								format(string, sizeof(string), "Le Numero de telephone du joueur à été mis a %d", amount);
							}
							case 7:
							{
								PlayerInfo[giveplayerid][pExp] = amount;
								format(string, sizeof(string), "Les Points de Respect du joueur ont été mis a %d", amount);
							}
							case 8:
							{
								PlayerInfo[giveplayerid][pPhousekey] = amount;
								format(string, sizeof(string), "La Clée de la maison du joueur à été mis a %d", amount);
							}
							case 9:
							{
								PlayerInfo[giveplayerid][pPbiskey] = amount;
								format(string, sizeof(string), "La Clée du Biz du joueur à été mis a %d", amount);
							}
							case 10:
							{
								PlayerInfo[giveplayerid][pDonateRank] = amount;
								format(string, sizeof(string), "Le Rang donnateur du joueur à été mis a %d", amount);
							}
							case 11:
							{
								PlayerInfo[giveplayerid][pFMember] = amount;
								format(string, sizeof(string), "Le joueur à été mis dans la famille %d", amount);
							}
							case 12:
							{
								PlayerInfo[giveplayerid][pDetSkill] = amount;
								format(string, sizeof(string), "Le Niveau detective du joueur à été mis a %d", amount);
							}
							case 13:
							{
								PlayerInfo[giveplayerid][pLawSkill] = amount;
								format(string, sizeof(string), "Le Niveau avocat du joueur à été mis a %d", amount);
							}
							case 14:
							{
								PlayerInfo[giveplayerid][pMechSkill] = amount;
								format(string, sizeof(string), "Le Niveau mecanicien du joueur à été mis a %d", amount);
							}
							case 15:
							{
								PlayerInfo[giveplayerid][pNewsSkill] = amount;
								format(string, sizeof(string), "Le Niveau journaliste du joueur à été mis a %d", amount);
							}
							case 16:
							{
								PlayerInfo[giveplayerid][pJackSkill] = amount;
								format(string, sizeof(string), "Le Niveau de carjack du joueur à été mis a %d", amount);
							}
							case 17:
							{
								PlayerInfo[giveplayerid][pDrugsSkill] = amount;
								format(string, sizeof(string), "Le Niveau de dealer de drogue  du joueur à été mis a %d", amount);
							}
							case 18:
							{
								PlayerInfo[giveplayerid][pSexSkill] = amount;
								format(string, sizeof(string), "Le Niveau de sex du joueur à été mis a %d", amount);
							}
							case 19:
							{
								PlayerInfo[giveplayerid][pBoxSkill] = amount;
								format(string, sizeof(string), "Le Niveau de box du joueur à été mis a %d", amount);
							}
							case 21:
							{
							    PlayerInfo[giveplayerid][pPcarkey] = amount;
							    format(string, sizeof(string), "Les Clef1 du joueur on été mise a %d", amount);
							}
							case 22:
							{
							    PlayerInfo[giveplayerid][pPcarkey2] = amount;
							    format(string, sizeof(string), "Le Clef2 du joueur à été mise a %d", amount);
							}
							case 23:
							{
							    PlayerInfo[giveplayerid][pPcarkey3] = amount;
							    format(string, sizeof(string), "Le Clef3 du joueur à été mise a %d", amount);
							}
							case 24:
							{
								PlayerInfo[giveplayerid][pJob] = amount;
								format(string, sizeof(string), "Le Travail du joueur à été mis a %d", amount);
							}
							case 25:
							{
								PlayerInfo[giveplayerid][pContractTime] = amount;
								format(string, sizeof(string), "Le nombre d'heures de travail du joueur à été mise %d", amount);
							}
							default:
							{
								format(string, sizeof(string), "Mauvais ID de stats", amount);
							}

						}
						SendClientMessage(playerid, COLOR_GRAD1, string);
					}
					else
					{
						SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé à utiliser cette commande!");
					}
				}//not valid id
			}//not connected
		}
		return 1;
	}
	if(strcmp(cmd, "/setjackpot", true) == 0 || strcmp(cmd, "/mettrejackpot", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] >= 10)
	        {
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GREY, "USAGE: /setjackpot [monaie]");
					return 1;
				}
				new money = strval(tmp);
				format(string, sizeof(string), "[ADMIN]: %s a mis le JackPot du Lotto a %d.",sendername, money);
				printf("%s", string);
				ABroadCast(COLOR_LIGHTRED,string, 5);
	            Jackpot = money;
	            SaveStuff();
			}
		}
		return 1;
	}
    if(strcmp(cmd, "/changerniveau", true) == 0)
	{
		if(PlayerInfo[playerid][pAdmin] < 1337)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Vous n'êtes pas autorisé à utiliser cette commande");
			return 1;
		}
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /changerniveau [niveau]");
			return 1;
		}
		new proplev = strval(tmp);
		for(new i = 0; i < sizeof(HouseInfo); i++)
		{
			if (PlayerToPoint(3, playerid,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]))
			{
				format(string, sizeof(string), "Vous avez changé le niveau de la Maison: %d", i);
				SendClientMessage(playerid, COLOR_GRAD2, string);
				if(proplev > 0)
				{
					HouseInfo[i][hLevel] = proplev;
				}
			}
		}
		for(new i = 0; i < sizeof(BizzInfo); i++)
		{
			if (PlayerToPoint(3, playerid,BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ]))
			{
				format(string, sizeof(string), "Vous avez changé le niveau du Biz: %d", i);
				SendClientMessage(playerid, COLOR_GRAD2, string);
				if(proplev > 0)
				{
					BizzInfo[i][bLevelNeeded] = proplev;
				}
			}
		}
		for(new i = 0; i < sizeof(SBizzInfo); i++)
		{
			if (PlayerToPoint(3, playerid,SBizzInfo[i][sbEntranceX], SBizzInfo[i][sbEntranceY], SBizzInfo[i][sbEntranceZ]))
			{
				format(string, sizeof(string), "Vous avez changé le niveau du SBiz: %d", i);
				SendClientMessage(playerid, COLOR_GRAD2, string);
				if(proplev > 0)
				{
					SBizzInfo[i][sbLevelNeeded] = proplev;
				}
			}
		}
		OnPropUpdate();
		return 1;
	}
	if(strcmp(cmd, "/changerprix", true) == 0)
	{
		if(PlayerInfo[playerid][pAdmin] < 1337)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Vous n'êtes pas autorisé à utiliser cette commande");
			return 1;
		}
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /changerprix [prix]");
			return 1;
		}
		new propprix = strval(tmp);
		for(new i = 0; i < sizeof(HouseInfo); i++)
		{
			if (PlayerToPoint(3, playerid,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]))
			{
				format(string, sizeof(string), "Vous avez changé le prix de la Maison: %d", i);
				SendClientMessage(playerid, COLOR_GRAD2, string);
				if(propprix > 0)
				{
					HouseInfo[i][hValue] = propprix;
				}
			}
		}
		for(new i = 0; i < sizeof(BizzInfo); i++)
		{
			if (PlayerToPoint(3, playerid,BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ]))
			{
				format(string, sizeof(string), "Vous avez changé le prix du Biz: %d", i);
				SendClientMessage(playerid, COLOR_GRAD2, string);
				if(propprix > 0)
				{
					BizzInfo[i][bBuyPrice] = propprix;
				}
			}
		}
		for(new i = 0; i < sizeof(SBizzInfo); i++)
		{
			if (PlayerToPoint(3, playerid,SBizzInfo[i][sbEntranceX], SBizzInfo[i][sbEntranceY], SBizzInfo[i][sbEntranceZ]))
			{
				format(string, sizeof(string), "Vous avez changé le prix du SBiz: %d", i);
				SendClientMessage(playerid, COLOR_GRAD2, string);
				if(propprix > 0)
				{
					SBizzInfo[i][sbBuyPrice] = propprix;
				}
			}
		}
		OnPropUpdate();
		return 1;
	}
//----------------------------------[SETINT]-----------------------------------------------
	if(strcmp(cmd, "/setint", true) == 0 || strcmp(cmd, "/setinterior", true) == 0 || strcmp(cmd, "/changerint", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /setint [playerid/PartOfName] [interieurid]");
				return 1;
			}
			new playa;
			playa = ReturnUser(tmp);
			new intid;
			tmp = strtok(cmdtext, idx);
			intid = strvalEx(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
			    		GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						SetPlayerInterior(playa, intid);
						PlayerInfo[playa][pInt] = intid;
						format(string, sizeof(string), "Vous avez mis l'intérieur de %s à %d.", giveplayer, intid);
						SendClientMessage(playerid, COLOR_GRAD1, string);
						format(string, sizeof(string), "%s à mis votre intérieur à %d.", sendername, intid);
						SendClientMessage(playa, COLOR_GRAD1, string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé à utiliser cette commande!");
			}
		}
		return 1;
	}
//----------------------------------[SETVW]-----------------------------------------------
 	if(strcmp(cmd, "/setvw", true) == 0 || strcmp(cmd, "/setvirtualworld", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /setvw [playerid/PartOfName] [virworldid]");
				return 1;
			}
			new playa;
			playa = ReturnUser(tmp);
			new virid;
			tmp = strtok(cmdtext, idx);
			virid = strvalEx(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
			    		GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						SetPlayerVirtualWorld(playa, virid);
						format(string, sizeof(string), "Vous avez mis le monde virtuel du joueur %s à %d.", giveplayer, virid);
						SendClientMessage(playerid, COLOR_GRAD1, string);
						format(string, sizeof(string), "%s à mis votre monde virtuel à %d.", sendername, virid);
						SendClientMessage(playa, COLOR_GRAD1, string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé à utiliser cette commande!");
			}
		}
		return 1;
	}
//----------------------------------[SKYDIVE]------------------------------------------------
	if(strcmp(cmd, "/skydive", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 2)
			{
				GetPlayerPos(playerid, rx, ry, rz);
				if (IsPlayerConnected(playerid))
				{
					SafeGivePlayerWeapon(playerid, 46, 0);
					SetPlayerPos(playerid,rx, ry, rz+1500);
					SendClientMessage(playerid, COLOR_WHITE, "GO!! GO!! GO!!");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé à utiliser cette commande!");
			}
		}
		return 1;
	}
//----------------------------------[FOURDIVE]------------------------------------------------
	if(strcmp(cmd, "/fourdive", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /fourdive [playerid1] [playerid2] [playerid3] [playerid4]");
				return 1;
			}
			new para1;
			new para2;
			new para3;
			new para4;
			para1 = strval(tmp);
			tmp = strtok(cmdtext, idx);
			para2 = strval(tmp);
			tmp = strtok(cmdtext, idx);
			para3 = strval(tmp);
			tmp = strtok(cmdtext, idx);
			para4 = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1339)
			{
				if (IsPlayerConnected(para1)){ SafeGivePlayerWeapon(para1, 46, 0); SetPlayerPos(para1,1536.0, -1360.0, 1350.0);SetPlayerInterior(para1,0);PlayerInfo[para1][pInt] = 0;SendClientMessage(para1, COLOR_WHITE, "GO!! GO!! GO!!");}
				if ((IsPlayerConnected(para2)) && (para2>0)) { SafeGivePlayerWeapon(para2, 46, 0); SetPlayerPos(para2,1536.0, -1345.0, 1350.0);SetPlayerInterior(para2,0);PlayerInfo[para2][pInt] = 0;SendClientMessage(para2, COLOR_RED, "GO!! GO!! GO!!");}
				if ((IsPlayerConnected(para3)) && (para3>0)) { SafeGivePlayerWeapon(para3, 46, 0); SetPlayerPos(para3,1552.0, -1345.0, 1350.0);SetPlayerInterior(para3,0);PlayerInfo[para3][pInt] = 0;SendClientMessage(para3, COLOR_RED, "GO!! GO!! GO!!");}
				if ((IsPlayerConnected(para4)) && (para4>0)) { SafeGivePlayerWeapon(para4, 46, 0); SetPlayerPos(para4,1552.0, -1360.0, 1350.0);SetPlayerInterior(para4,0);PlayerInfo[para4][pInt] = 0;SendClientMessage(para4, COLOR_RED, "GO!! GO!! GO!!");}
			}
			else
			{
				SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé à utiliser cette commande!");
			}
		}
		return 1;
	}
//----------------------------------[INVITE]------------------------------------------------
    if(strcmp(cmd, "/inviter", true) == 0 || strcmp(cmd, "/invite", true) == 0 || strcmp(cmd, "/invit", true) == 0)
	//if(strcmp(cmd, "/inviter", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /inviter [playerid/PartOfName]");
				return 1;
			}
			new para1;
			new ftext[20];
			para1 = ReturnUser(tmp);
			if (PlayerInfo[playerid][pLeader] >= 1 || PlayerInfo[playerid][pRank] >= 5)
			{
			    if(IsPlayerConnected(para1))
			    {
			        if(para1 != INVALID_PLAYER_ID)
			        {
					    if (gTeam[para1]==TEAM_GREEN && PlayerInfo[para1][pMember] == 0 && PlayerInfo[para1][pFMember] == 255)
					    {
					        if(PlayerInfo[playerid][pLeader] == 1) { PlayerInfo[para1][pTeam] = 2; gTeam[para1] = 2; ftext = "Policier"; ChosenSkin[para1] = 71; SetPlayerSkin(para1, 71); }
					        else if(PlayerInfo[playerid][pLeader] == 2) { PlayerInfo[para1][pTeam] = 2; gTeam[para1] = 2; ftext = "FBI"; ChosenSkin[para1] = 286; SetPlayerSkin(para1, 286); }
					        else if(PlayerInfo[playerid][pLeader] == 3) { PlayerInfo[para1][pTeam] = 2; gTeam[para1] = 2; ftext = "Garde National"; ChosenSkin[para1] = 287; SetPlayerSkin(para1, 287); }
					        else if(PlayerInfo[playerid][pLeader] == 4) { PlayerInfo[para1][pTeam] = 1; gTeam[para1] = 1; ftext = "Medecin"; ChosenSkin[para1] = 70; SetPlayerSkin(para1, 70); }
					        else if(PlayerInfo[playerid][pLeader] == 5) { PlayerInfo[para1][pTeam] = 5; gTeam[para1] = 5; ftext = "Vagos"; ChosenSkin[para1] = 175; SetPlayerSkin(para1, 175); }
					        else if(PlayerInfo[playerid][pLeader] == 6) { PlayerInfo[para1][pTeam] = 6; gTeam[para1] = 6; ftext = "Vercetti"; ChosenSkin[para1] = 258; SetPlayerSkin(para1, 258); }
					        else if(PlayerInfo[playerid][pLeader] == 7) { PlayerInfo[para1][pTeam] = 11; gTeam[para1] = 11; ftext = "Gouvernement"; ChosenSkin[para1] = 163; SetPlayerSkin(para1, 163); }
					        else if(PlayerInfo[playerid][pLeader] == 8) { PlayerInfo[para1][pTeam] = 10; gTeam[para1] = 12; ftext = "Hitman"; ChosenSkin[para1] = 249; SetPlayerSkin(para1, 249); }
					        else if(PlayerInfo[playerid][pLeader] == 9) { PlayerInfo[para1][pTeam] = 12; gTeam[para1] = 12; ftext = "ABC Studio"; ChosenSkin[para1] = 36; SetPlayerSkin(para1, 36); }
					        //else if(PlayerInfo[playerid][pLeader] == 10) { PlayerInfo[para1][pTeam] = 12; gTeam[para1] = 12; ftext = "Taxi Cab Company"; ChosenSkin[para1] = 255; SetPlayerSkin(para1, 255); }
					        //else if(PlayerInfo[playerid][pLeader] == 11) { PlayerInfo[para1][pTeam] = 12; gTeam[para1] = 12; ftext = "School Instructors"; ChosenSkin[para1] = 59; SetPlayerSkin(para1, 59); }
					        else if(PlayerInfo[playerid][pLeader] == 14) { PlayerInfo[para1][pTeam] = 5; gTeam[para1] = 5; ftext = "Bikers"; ChosenSkin[para1] = 122; SetPlayerSkin(para1, 122); }
					        else if(PlayerInfo[playerid][pLeader] == 15) { PlayerInfo[para1][pTeam] = 15; gTeam[para1] = 15; ftext = "Ballas"; ChosenSkin[para1] = 67; SetPlayerSkin(para1, 67); }
					        else if(PlayerInfo[playerid][pLeader] == 16) { PlayerInfo[para1][pTeam] = 5; gTeam[para1] = 5; ftext = "Groove"; ChosenSkin[para1] = 105; SetPlayerSkin(para1, 105); }
					        else if(PlayerInfo[playerid][pLeader] == 17) { PlayerInfo[para1][pTeam] = 6; gTeam[para1] = 6; ftext = "Corleone"; ChosenSkin[para1] = 185; SetPlayerSkin(para1, 185); }
					        else if(PlayerInfo[playerid][pLeader] == 18) { PlayerInfo[para1][pTeam] = 2; gTeam[para1] = 2; ftext = "C.I.A"; ChosenSkin[para1] = 294; SetPlayerSkin(para1, 294); }
					        else { return 1; }
							GetPlayerName(para1, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							PlayerInfo[para1][pMember] = PlayerInfo[playerid][pLeader];
							PlayerInfo[para1][pRank] = 1;
							printf("%s a invité %s à le rejoindre %s.", sendername, giveplayer, ftext);
							format(string, sizeof(string), "Vous avez été invité dans une Faction par le Leader %s", sendername);
							SendClientMessage(para1, COLOR_WHITE, string);
							format(string, sizeof(string), "Vous avez invité %s a rejoindre Votre faction %s.", ftext);
							SendClientMessage(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), "HQ: La personne %s a été invité dans la Faction par une personne hautement placée.", giveplayer);
							SendRadioMessage(playerid, COLOR_WHITE, string);
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "Joueur déjà dans une faction.");
						    return 1;
						}
					}
				}//not connected
			}
		}
		return 1;
	}
//-----------------------------------[ainvite]-------------------------------
    if(strcmp(cmd, "/ainviter", true) == 0 || strcmp(cmd, "/ainvite", true) == 0 || strcmp(cmd, "/ainvit", true) == 0)
	//if(strcmp(cmd, "/ainviter", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /ainvité [playerid/PartOfName] [numero(1-16)]");
				SendClientMessage(playerid, COLOR_WHITE, "Numéro: 1 Police - 2 FBI - 3 Armée - 4 Medecin - 5 Vagos");
				SendClientMessage(playerid, COLOR_WHITE, "Numéro: 6 Vercetti - 7 Gouvernement - 8 Hitman -  9 L.A News ");
				SendClientMessage(playerid, COLOR_WHITE, "Numéro: 14 Bikers - 15 Ballas - 16 Groove - 17 Corleone - 18 C.I.A ");
				return 1;
			}
			new para1;
			new level
			para1 = ReturnUser(tmp);
            if (PlayerInfo[playerid][pAdmin] >= 3)
			{
			    if(IsPlayerConnected(para1))
			    {
			        if(para1 != INVALID_PLAYER_ID)
			        {
			            if(PlayerInfo[para1][pMember] > 0 || PlayerInfo[para1][pFMember] < 255)
			            {
			                SendClientMessage(playerid, COLOR_GREY, "Ce joueur est déjà dans une Faction!");
			                return 1;
			            }
			            tmp = strtok(cmdtext, idx);
						level = strval(tmp);
	            		new ttext[20];
						if(level == 0) { ttext = "Civil"; }
						else if(level == 1) { ttext = "Police"; }
						else if(level == 2) { ttext = "FBI"; }
						else if(level == 3) { ttext = "Armée"; }
						else if(level == 4) { ttext = "Medecin"; }
						else if(level == 5) { ttext = "Vagos"; }
						else if(level == 6) { ttext = "Vercetti"; }
						else if(level == 7) { ttext = "Gouvernement"; }
						else if(level == 8) { ttext = "Hitman"; }
						else if(level == 9) { ttext = "L.A News"; }
						//else if(level == 10) { ttext = "Taxi"; }
						//else if(level == 11) { ttext = "School Instructor"; }
						else if(level == 14) { ttext = "Bikers"; }
						else if(level == 15) { ttext = "Ballas"; }
						else if(level == 16) { ttext = "Groove"; }
						else if(level == 17) { ttext = "Corleone"; }
						else if(level == 18) { ttext = "C.I.A"; }
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						PlayerInfo[para1][pMember] = level;
						format(string, sizeof(string), "Vous avez été mis dans la faction %s Par l'Admin %s",ttext ,sendername);
						SendClientMessage(para1, COLOR_WHITE, string);
						format(string, sizeof(string), "Vous avez mis %s dans la faction %s.", giveplayer,ttext);
						SendClientMessage(playerid, COLOR_WHITE, string);
						if(level == 0) { PlayerInfo[para1][pChar] = 0; PlayerInfo[para1][pRank] = 0; gTeam[para1] = 3; PlayerInfo[para1][pTeam] = 0; return 1; }
						else if(level == 1) { PlayerInfo[para1][pChar] = 288; } //Police Force
						else if(level == 2) { PlayerInfo[para1][pChar] = 286; } //FBI/ATF
						else if(level == 3) { PlayerInfo[para1][pChar] = 287; } //National Guard
						else if(level == 4) { PlayerInfo[para1][pChar] = 228; } //Fire/Ambulance
						else if(level == 5) { PlayerInfo[para1][pChar] = 175; } //Vagos
						else if(level == 6) { PlayerInfo[para1][pChar] = 258; } //La Famiglia Vercetti
						else if(level == 7) { PlayerInfo[para1][pChar] = 163; } //Mayor
						else if(level == 8) { PlayerInfo[para1][pChar] = 20; } //Hitmans
						else if(level == 9) { PlayerInfo[para1][pChar] = 36; } //News Reporters
						//else if(level == 10) { PlayerInfo[para1][pChar] = 61; } //Taxi Cab Company
						else if(level == 11) { PlayerInfo[para1][pChar] = 171; } //Driving/Flying School
						else if(level == 14) { PlayerInfo[para1][pChar] = 122; } //Bikers
						else if(level == 15) { PlayerInfo[para1][pChar] = 67; } //Ballas
						else if(level == 16) { PlayerInfo[para1][pChar] = 105; } //Groove
						else if(level == 17) { PlayerInfo[para1][pChar] = 126; } //Corleone
						else if(level == 18) { PlayerInfo[para1][pChar] = 187; } //C.I.A

						if(level == 0)
						{
						    gTeam[para1] = 3;
					    	PlayerInfo[para1][pTeam] = 3;
						}
						else if(level == 1 || level == 2 || level == 3)
						{
						    gTeam[para1] = 2;
					    	PlayerInfo[para1][pTeam] = 2;
						}
						else if(level == 4)
						{
						    gTeam[para1] = 1;
						    PlayerInfo[para1][pTeam] = 1;
						}
						else
						{
					    	gTeam[para1] = 15;
					    	PlayerInfo[para1][pTeam] = 15;
						}

					    SetPlayerSkin(para1, PlayerInfo[para1][pChar]);

					    if(level == 0)
					    {
					        PlayerInfo[para1][pRank] = 0;
					    }
					    else
					    {
					    	PlayerInfo[para1][pRank] = 6;
						}
					}
				}//not connected
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Vous n'êtes pas autorisé a utiliser cette commande!");
			}
		}
		return 1;
	}
//----------------------------------[UNINVITE]------------------------------------------------
    if(strcmp(cmd, "/virer", true) == 0 || strcmp(cmd, "/uninvite", true) == 0 || strcmp(cmd, "/uninvit", true) == 0)
	//if(strcmp(cmd, "/virer", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /virer [playerid/PartOfName]");
				return 1;
			}
			new para1;
			para1 = ReturnUser(tmp);
			if(PlayerInfo[playerid][pLeader] == 1 && PlayerInfo[playerid][pRank] >= 5 && PlayerInfo[para1][pMember] != 1)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Access refusé!");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 2 && PlayerInfo[playerid][pRank] >= 5 && PlayerInfo[para1][pMember] != 2)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Access refusé!");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 3 && PlayerInfo[playerid][pRank] >= 5 && PlayerInfo[para1][pMember] != 3)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Access refusé!");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 4 && PlayerInfo[playerid][pRank] >= 5 && PlayerInfo[para1][pMember] != 4)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Access refusé!");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 5 && PlayerInfo[playerid][pRank] >= 5 && PlayerInfo[para1][pMember] != 5)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Access refusé!");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 6 && PlayerInfo[playerid][pRank] >= 5 && PlayerInfo[para1][pMember] != 6)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Access refusé!");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 7 && PlayerInfo[playerid][pRank] >= 5 && PlayerInfo[para1][pMember] != 7)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Access refusé!");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 8 && PlayerInfo[playerid][pRank] >= 5 && PlayerInfo[para1][pMember] != 8)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Access refusé!");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 9 && PlayerInfo[playerid][pRank] >= 5 && PlayerInfo[para1][pMember] != 9)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Access refusé!");
				return 1;
			}
			/*if(PlayerInfo[playerid][pLeader] == 10 && PlayerInfo[para1][pMember] != 10)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Access denied!");
				return 1;
			}*/
			/*if(PlayerInfo[playerid][pLeader] == 11 && PlayerInfo[para1][pMember] != 11)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Access denied!");
				return 1;
			}*/
			if(PlayerInfo[playerid][pLeader] == 12 && PlayerInfo[playerid][pRank] >= 5 && PlayerInfo[para1][pMember] != 12)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Access refusé!");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 13 && PlayerInfo[playerid][pRank] >= 5 && PlayerInfo[para1][pMember] != 13)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Access refusé!");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 14 && PlayerInfo[playerid][pRank] >= 5 && PlayerInfo[para1][pMember] != 14)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Access refusé!");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 15 && PlayerInfo[playerid][pRank] >= 5 && PlayerInfo[para1][pMember] != 15)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Access refusé!");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 16 && PlayerInfo[playerid][pRank] >= 5 && PlayerInfo[para1][pMember] != 16)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Access refusé!");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 17 && PlayerInfo[playerid][pRank] >= 5 && PlayerInfo[para1][pMember] != 17)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Access refusé!");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 18 && PlayerInfo[playerid][pRank] >= 5 && PlayerInfo[para1][pMember] != 18)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Access refusé!");
				return 1;
			}
			if (PlayerInfo[playerid][pLeader] >= 1 || PlayerInfo[playerid][pRank] >= 5)
			{
			    if(IsPlayerConnected(para1))
			    {
			        if(para1 != INVALID_PLAYER_ID)
			        {
					    if (PlayerInfo[para1][pMember] > 0)
					    {
							GetPlayerName(para1, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							printf("%s a virer %s.", sendername, giveplayer);
							format(string, sizeof(string), " Vous avez été viré de votre faction par le leader %s.", sendername);
							SendClientMessage(para1, COLOR_GREEN, string);
							SendClientMessage(para1, COLOR_RED, " Vous êtes maintenant un civil.");
			                gTeam[para1] = 3;
							PlayerInfo[para1][pTeam] = 3;
							PlayerInfo[para1][pMember] = 0;
							PlayerInfo[para1][pRank] = 0;
                            new randomskin;
						    if(PlayerInfo[para1][pSex] == 1) { randomskin = random(sizeof(CivMalePeds)); }
						    else if(PlayerInfo[para1][pSex] == 2) { randomskin = random(sizeof(CivFemalePeds)); }
						    SetPlayerSkin(para1, randomskin);
						    PlayerInfo[para1][pChar] = randomskin;
							MedicBill[para1] = 0;
							format(string, sizeof(string), "Vous avez viré %s de votre Faction.", giveplayer);
							SendClientMessage(playerid, COLOR_WHITE, string);
						}
					}
				}//not connected
			}
			else
			{
				SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé à utiliser cette commande (Juste Admin et Chef)!");
			}
		}
		return 1;
	}
//-----------------------------------[Avirer]-----------------------------------
    if(strcmp(cmd, "/avirer", true) == 0 || strcmp(cmd, "/auninvite", true) == 0 || strcmp(cmd, "/auninvit", true) == 0)
	//if(strcmp(cmd, "/avirer", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /avirer [playerid/PartOfName]");
				return 1;
			}
			new para1;
			para1 = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
			    if(IsPlayerConnected(para1))
			    {
			        if(para1 != INVALID_PLAYER_ID)
			        {
					    if (PlayerInfo[para1][pMember] > 0)
					    {
							GetPlayerName(para1, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							printf("%s a virer %s.", sendername, giveplayer);
							format(string, sizeof(string), " Vous avez été viré de votre Faction, par l'Admin %s.", sendername);
							SendClientMessage(para1, COLOR_WHITE, string);
							SendClientMessage(para1, COLOR_WHITE, " Vous êtes maintenant civil.");
			                gTeam[para1] = 3;
							PlayerInfo[para1][pTeam] = 3;
							PlayerInfo[para1][pMember] = 0;
							PlayerInfo[para1][pRank] = 0;
							new randomskin;
						    if(PlayerInfo[giveplayerid][pSex] == 1) { randomskin = random(sizeof(CivMalePeds)); }
						    else if(PlayerInfo[giveplayerid][pSex] == 2) { randomskin = random(sizeof(CivFemalePeds)); }
						    SetPlayerSkin(para1, randomskin);
						    PlayerInfo[para1][pChar] = randomskin;
							MedicBill[para1] = 0;
							format(string, sizeof(string), "Vous avez viré %s de votre faction.", giveplayer);
							SendClientMessage(playerid, COLOR_WHITE, string);
						}
					}
				}//not connected
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Vous n'êtes pas autorisé a utiliser cette commande!");
			}
		}
		return 1;
	}
//----------------------------------[MAKEADMIN]------------------------------------------------
	if(strcmp(cmd, "/adminlevel", true) == 0 || strcmp(cmd,"/makeadmin",true)==0 || strcmp(cmd,"/setadmin",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /adminlevel [playerid/PartOfName] [niveau(1-3)]");
				return 1;
			}
			new para1;
			new level;
			para1 = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			level = strval(tmp);
			if(PlayerInfo[playerid][pAdmin] >= 1339)
			{
			    if(PlayerInfo[playerid][pAdmin] > level)
			    {
				    if(IsPlayerConnected(para1))
				    {
				        if(para1 != INVALID_PLAYER_ID)
				        {
							GetPlayerName(para1, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							PlayerInfo[para1][pAdmin] = level;
							printf("%s à mis %s admin niveau %d.", sendername, giveplayer, level);
							format(string, sizeof(string), "Vous avez été mis par %d admin niveau %s. Utilisez /aa pour voir vos nouvelles commandes.", level, sendername);
							SendClientMessage(para1, COLOR_WHITE, string);
							format(string, sizeof(string), "Vous avez promus %s au niveau Admin %d.", giveplayer,level);
							SendClientMessage(playerid, COLOR_WHITE, string);
						}
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Tu n'a pas les droits nécéssaire!");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé à utiliser cette commande!");
			}
		}
		return 1;
	}
//----------------------------------[MAKEIRCADMIN]----------------------------------------------
    if(strcmp(cmd, "/adminirclevel", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /adminirclevel [playerid/PartOfName] [ChannelNr]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /adminirclevel [playerid/PartOfName] [ChannelNr]");
				return 1;
			}
			new channel = strval(tmp);
			if(channel > 10 || channel < 0) { SendClientMessage(playerid, COLOR_GREY, "   Dont go below number 0, or above number 10!"); return 1; }
			if (PlayerInfo[playerid][pAdmin] >= 1339)
			{
			    if(IsPlayerConnected(giveplayerid))
			    {
			        if(giveplayerid != INVALID_PLAYER_ID)
			        {
						GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), " You've made %s an IRC Admin over Channel %d.", giveplayer, channel);
						SendClientMessage(playerid, COLOR_WHITE, string);
						format(string, sizeof(string), " %s has made you an IRC Admin over Channel %d.", sendername, channel);
						SendClientMessage(giveplayerid, COLOR_WHITE, string);
						format(string, sizeof(string), "%s", giveplayer);
						switch(channel)
						{
						    case 1:
						    {
						        strmid(IRCInfo[0][iAdmin], string, 0, strlen(string), 255);
						        IRCInfo[0][iNeedPass] = 0; IRCInfo[0][iLock] = 0;
						    }
						    case 2:
						    {
						        strmid(IRCInfo[1][iAdmin], string, 0, strlen(string), 255);
						        IRCInfo[1][iNeedPass] = 0; IRCInfo[1][iLock] = 0;
						    }
						    case 3:
						    {
						        strmid(IRCInfo[2][iAdmin], string, 0, strlen(string), 255);
						        IRCInfo[2][iNeedPass] = 0; IRCInfo[2][iLock] = 0;
						    }
						    case 4:
						    {
						        strmid(IRCInfo[3][iAdmin], string, 0, strlen(string), 255);
						        IRCInfo[3][iNeedPass] = 0; IRCInfo[3][iLock] = 0;
						    }
						    case 5:
						    {
						        strmid(IRCInfo[4][iAdmin], string, 0, strlen(string), 255);
						        IRCInfo[4][iNeedPass] = 0; IRCInfo[4][iLock] = 0;
						    }
						    case 6:
						    {
						        strmid(IRCInfo[5][iAdmin], string, 0, strlen(string), 255);
						        IRCInfo[5][iNeedPass] = 0; IRCInfo[5][iLock] = 0;
						    }
						    case 7:
						    {
						        strmid(IRCInfo[6][iAdmin], string, 0, strlen(string), 255);
						        IRCInfo[6][iNeedPass] = 0; IRCInfo[6][iLock] = 0;
						    }
						    case 8:
						    {
						        strmid(IRCInfo[7][iAdmin], string, 0, strlen(string), 255);
						        IRCInfo[7][iNeedPass] = 0; IRCInfo[7][iLock] = 0;
						    }
						    case 9:
						    {
						        strmid(IRCInfo[8][iAdmin], string, 0, strlen(string), 255);
						        IRCInfo[8][iNeedPass] = 0; IRCInfo[8][iLock] = 0;
						    }
						    case 10:
						    {
						        strmid(IRCInfo[9][iAdmin], string, 0, strlen(string), 255);
						        IRCInfo[9][iNeedPass] = 0; IRCInfo[9][iLock] = 0;
						    }
						}
						SaveIRC();
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté!");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas autorisé à utiliser cette commande!!");
			    return 1;
			}
		}
		return 1;
	}
//----------------------------------[MAKELEADER]------------------------------------------------
    if(strcmp(cmd, "/makeleader", true) == 0 || strcmp(cmd, "/mettrechef", true) == 0 || strcmp(cmd, "/mettreboss", true) == 0)
	//if(strcmp(cmd, "/makeleader", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /makeleader [playerid/PartOfName] [numero(1-16)]");
				SendClientMessage(playerid, COLOR_WHITE, "Numéro: 1 Police - 2 FBI - 3 Armée (Retiré) - 4 Medecin - 5 Vagos");
				SendClientMessage(playerid, COLOR_WHITE, "Numéro: 6 Vercetti - 7 Gouvernement - 8 Hitman -  9 L.A News ");
				SendClientMessage(playerid, COLOR_WHITE, "Numéro: 14 Bikers - 15 Ballas - 16 Groove - 17 Corleone - 18 C.I.A  ");
				return 1;
			}
			new para1;
			new level
			para1 = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			level = strval(tmp);
			if(level > 19 || level < 0) { SendClientMessage(playerid, COLOR_GREY, "Mauvais numero de faction!"); return 1; }
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
			    if(IsPlayerConnected(para1))
			    {
			        if(para1 != INVALID_PLAYER_ID)
			        {
			            if(PlayerInfo[para1][pMember] > 0 || PlayerInfo[para1][pFMember] < 255)
			            {
			                SendClientMessage(playerid, COLOR_GREY, "Ce joueur est déjà dans une Faction!");
			                return 1;
			            }
	            		new ttext[20];
						if(level == 0) { ttext = "Civil"; }
						else if(level == 1) { ttext = "Police"; }
						else if(level == 2) { ttext = "FBI"; }
						else if(level == 3) { ttext = "Armée"; }
						else if(level == 4) { ttext = "Medecin"; }
						else if(level == 5) { ttext = "Vagos"; }
						else if(level == 6) { ttext = "Vercetti"; }
						else if(level == 7) { ttext = "Gouvernement"; }
						else if(level == 8) { ttext = "Hitman"; }
						else if(level == 9) { ttext = "L.A News"; }
						//else if(level == 10) { ttext = "Taxi"; }
						//else if(level == 11) { ttext = "School Instructor"; }
						else if(level == 14) { ttext = "Bikers"; }
						else if(level == 15) { ttext = "Ballas"; }
						else if(level == 16) { ttext = "Groove"; }
						else if(level == 17) { ttext = "Corleone"; }
						else if(level == 18) { ttext = "C.I.A"; }
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						PlayerInfo[para1][pLeader] = level;
						format(string, sizeof(string), "Vous avez été mis Leader de la faction %s par l'Admin %s",ttext ,sendername);
						SendClientMessage(para1, COLOR_WHITE, string);
						format(string, sizeof(string), "Vous avez donné à %s le controle total de la faction %s.", giveplayer,ttext);
						SendClientMessage(playerid, COLOR_WHITE, string);
						if(level == 0) { PlayerInfo[para1][pChar] = 0; PlayerInfo[para1][pRank] = 0; gTeam[para1] = 3; PlayerInfo[para1][pTeam] = 0; return 1; }
						else if(level == 1) { PlayerInfo[para1][pChar] = 288; } //Police Force
						else if(level == 2) { PlayerInfo[para1][pChar] = 286; } //FBI/ATF
						else if(level == 3) { PlayerInfo[para1][pChar] = 287; } //National Guard
						else if(level == 4) { PlayerInfo[para1][pChar] = 228; } //Fire/Ambulance
						else if(level == 5) { PlayerInfo[para1][pChar] = 173; } //Vagos
						else if(level == 6) { PlayerInfo[para1][pChar] = 113; } //La Famiglia Vercetti
						else if(level == 7) { PlayerInfo[para1][pChar] = 187; } //Mayor
						else if(level == 8) { PlayerInfo[para1][pChar] = 20; } //Hitmans
						else if(level == 9) { PlayerInfo[para1][pChar] = 295; } //News Reporters
						//else if(level == 10) { PlayerInfo[para1][pChar] = 61; } //Taxi Cab Company
						//else if(level == 11) { PlayerInfo[para1][pChar] = 171; } //Driving/Flying School
						else if(level == 14) { PlayerInfo[para1][pChar] = 120; } //Bikers
						else if(level == 15) { PlayerInfo[para1][pChar] = 104; } //Ballas
						else if(level == 16) { PlayerInfo[para1][pChar] = 270; } //Groove
						else if(level == 17) { PlayerInfo[para1][pChar] = 126; } //Corleone
						else if(level == 18) { PlayerInfo[para1][pChar] = 147; } //C.I.A

						if(level == 0)
						{
						    gTeam[para1] = 3;
					    	PlayerInfo[para1][pTeam] = 3;
						}
						else if(level == 1 || level == 2 || level == 3)
						{
						    gTeam[para1] = 2;
					    	PlayerInfo[para1][pTeam] = 2;
						}
						else if(level == 4)
						{
						    gTeam[para1] = 1;
						    PlayerInfo[para1][pTeam] = 1;
						}
						else
						{
					    	gTeam[para1] = 15;
					    	PlayerInfo[para1][pTeam] = 15;
						}

					    SetPlayerSkin(para1, PlayerInfo[para1][pChar]);

					    if(level == 0)
					    {
					        PlayerInfo[para1][pRank] = 0;
					    }
					    else
					    {
					    	PlayerInfo[para1][pRank] = 6;
						}
					}
				}//not connected
			}
			else
			{
				SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé à utiliser cette commande!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/forceskin", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /forceskin [playerid/PartOfName]");
				return 1;
			}
			new para1;
			para1 = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
			    if(IsPlayerConnected(para1))
			    {
			        if(para1 != INVALID_PLAYER_ID)
			        {
				        if(PlayerInfo[para1][pMember] < 1)
				        {
				            SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'ets pas dans une faction!");
				            return 1;
				        }
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), " Vous avez été forcé par l'Admin %s à chager de skin.", sendername);
						SendClientMessage(para1, COLOR_WHITE, string);
						format(string, sizeof(string), " Vous avez forcé %s à changer son Skin.", giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
						if(PlayerInfo[para1][pMember] == 1) { PlayerInfo[para1][pTeam] = 5; ChosenSkin[para1] = 59; }
				        else if(PlayerInfo[para1][pMember] == 2) { PlayerInfo[para1][pTeam] = 6; ChosenSkin[para1] = 121; }
				        else if(PlayerInfo[para1][pMember] == 3) { PlayerInfo[para1][pTeam] = 7; ChosenSkin[para1] = 98; }
				        else if(PlayerInfo[para1][pMember] == 4) { PlayerInfo[para1][pTeam] = 8; ChosenSkin[para1] = 46; }
				        else if(PlayerInfo[para1][pMember] == 5) { PlayerInfo[para1][pTeam] = 9; ChosenSkin[para1] = 174; }
				        //else if(PlayerInfo[para1][pMember] == 6) { PlayerInfo[para1][pTeam] = 2; ChosenSkin[para1] = 111; }
				        else if(PlayerInfo[para1][pMember] == 7) { PlayerInfo[para1][pTeam] = 2; ChosenSkin[para1] = 164; }
				        else if(PlayerInfo[para1][pMember] == 8) { PlayerInfo[para1][pTeam] = 10; ChosenSkin[para1] = 186; }
				        else { return 1; }
                        SetPlayerInterior(para1,0);
						new rand = random(sizeof(gInviteSpawns));
						SetPlayerPos(para1, gInviteSpawns[rand][0], gInviteSpawns[rand][1], gInviteSpawns[rand][2]); // Warp the player
						SetPlayerFacingAngle(para1, gInviteSpawns[rand][3]);
						SetPlayerCameraPos(para1,gInviteSpawns[rand][0] + 3, gInviteSpawns[rand][1], gInviteSpawns[rand][2]);
						SetPlayerCameraLookAt(para1,gInviteSpawns[rand][0], gInviteSpawns[rand][1], gInviteSpawns[rand][2]);
						TogglePlayerControllable(para1, 0);
					    SelectChar[para1] = 255;
					    SelectCharID[para1] = PlayerInfo[para1][pMember];
					    SelectCharPlace[para1] = 1;
					    PlayerInfo[para1][pModel] = ChosenSkin[para1];
				    	PlayerInfo[para1][pChar] = ChosenSkin[para1];
					    SendClientMessage(para1, COLOR_LIGHTRED, " Utilisez 'suivant' pour passé le skin.");
					    SendClientMessage(para1, COLOR_LIGHTRED, " Si vous avez trouvé le skin qui vous convient. Tapez 'terminer'.");
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé à utiliser cette commande!");
			}
		}
		return 1;
	}
//----------------------------------[SETSKIN]------------------------------------------------
	if(strcmp(cmd, "/setskin", true) == 0 || strcmp(cmd, "/changerskin", true) == 0 || strcmp(cmd, "/forcerskin", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /changerskin [playerid/PartOfName] [skin id]");
				return 1;
			}
			new para1;
			new level;
			para1 = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			level = strval(tmp);
			if(level > 299 || level < 1) { SendClientMessage(playerid, COLOR_GREY, "Mauvais ID de skin!"); return 1; }
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
			    if(IsPlayerConnected(para1))
			    {
			        if(para1 != INVALID_PLAYER_ID)
			        {
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						PlayerInfo[para1][pChar] = level;
						SetPlayerSkin(para1, level);
						format(string, sizeof(string), "Votre skin à été changé par l'Admin %s", sendername);
						SendClientMessage(para1, COLOR_WHITE, string);
						format(string, sizeof(string), "Vous avez changer le skin de %s en %d.", giveplayer,level);
						SendClientMessage(playerid, COLOR_WHITE, string);
					    SetPlayerSkin(para1, PlayerInfo[para1][pChar]);
					}
				}//not connected
			}
			else
			{
				SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé à utiliser cette commande!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/restaurerskin", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new level = PlayerInfo[playerid][pChar]
			SetPlayerSkin(playerid, level);
		}
		return 1;
	}

	//---------------------------------AnnonceIG------------------------------------
	if(strcmp(cmd, "/an", true) == 0 || strcmp(cmd, "/anonceig", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas encore connecté !");
	            return 1;
	        }
			if (PlayerInfo[playerid][pAdmin] < 1338)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Vous n'êtes pas admin avec ce rang");
				return 1;
			}
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "[CMD]: (/an) <texte>");
				return 1;
			}
  			format(string, sizeof(string), "Flash News : %s ", result);// LA HONTE !!!!!
			OOCOff(0xF635B9F6,string);
			printf("%s", string);

		}
		return 1;
	}
		if(strcmp(cmd, "/an2", true) == 0 || strcmp(cmd, "/anonceig2", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas encore connecté !");
	            return 1;
	        }
			if (PlayerInfo[playerid][pAdmin] < 1338)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Vous n'êtes pas admin avec ce rang");
				return 1;
			}
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/an) <texte>");
				return 1;
			}
  			format(string, sizeof(string), " %s ", result);// c
			OOCOff(0xFF6347AA,string);
			printf("%s", string);

		}
		return 1;
	}

	//---------------------------------gotoincar----------------------------------------
	if(strcmp(cmd, "/gotoincar", true) == 0)
	{
	    if(PlayerInfo[playerid][pAdmin] > 1336)
	    {
		     tmp = strtok(cmdtext, idx);
             if(!strlen(tmp))
			 {
				 SendClientMessage(playerid, COLOR_WHITE, "[CMD]: /gotoincar [ID]");
				 return 1;
        	 }
			 giveplayerid = ReturnUser(tmp);
		     if(giveplayerid != INVALID_PLAYER_ID)
	 	     {
            	 PutPlayerInVehicle(playerid, GetPlayerVehicleID(giveplayerid), 1);// on telep l'admin
        	 }
        	 else{ SendClientMessage(playerid, COLOR_RED, "Ce joueur n'es pas connecté !!!!!!"); }
	    }
	    else{ SendClientMessage(playerid, COLOR_RED, "tu n'es pas un administrateur"); }
    	return 1;
	}
	//---------------------------------getin----------------------------------------
	if(strcmp(cmd, "/getincar", true) == 0)
	{
	    if(PlayerInfo[playerid][pAdmin] > 1337)
	    {
		     tmp = strtok(cmdtext, idx);
             if(!strlen(tmp))
			 {
				 SendClientMessage(playerid, COLOR_WHITE, "[CMD]: /getincar [ID]");
				 return 1;
        	 }
			 giveplayerid = ReturnUser(tmp);
		     if(giveplayerid != INVALID_PLAYER_ID)
	 	     {
            	 PutPlayerInVehicle(giveplayerid, GetPlayerVehicleID(playerid), 1);// on telep le joueur
        	 }
        	 else{ SendClientMessage(playerid, COLOR_RED, "Ce joueur n'es pas connecté !!!!!!"); }
	    }
	    else{ SendClientMessage(playerid, COLOR_RED, "Tu n'es pas un administrateur"); }
    	return 1;
	}
//----------------------------------[GIVERANK]------------------------------------------------
    if(strcmp(cmd, "/donnerrank", true) == 0 || strcmp(cmd, "/giverank", true) == 0 || strcmp(cmd, "/donnerrang", true) == 0)
	//if(strcmp(cmd, "/giverank", true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /giverank [playerid/PartOfName] [Nombre(1-6)]");
				return 1;
			}
			new para1;
			new level;
			para1 = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			level = strval(tmp);
            if(level > 9 || level < 0) { SendClientMessage(playerid, COLOR_GREY, "Il y n'y a que 6 rang."); return 1; }
            if(PlayerInfo[playerid][pLeader] == 0 && PlayerInfo[playerid][pRank] >= 0 && PlayerInfo[para1][pMember] != 1)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Acces refusé!");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 0 && PlayerInfo[playerid][pRank] >= 0 && PlayerInfo[para1][pMember] != 2)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Acces refusé!");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 0 && PlayerInfo[playerid][pRank] >= 0 && PlayerInfo[para1][pMember] != 3)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Acces refusé!");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 0 && PlayerInfo[playerid][pRank] >= 0 && PlayerInfo[para1][pMember] != 4)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Acces refusé!");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 0 && PlayerInfo[playerid][pRank] >= 0 && PlayerInfo[para1][pMember] != 5)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Acces refusé!");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 0 && PlayerInfo[playerid][pRank] >= 0 && PlayerInfo[para1][pMember] != 6)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Acces refusé!");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 0 && PlayerInfo[playerid][pRank] >= 0 && PlayerInfo[para1][pMember] != 7)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Acces refusé!");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 0 && PlayerInfo[playerid][pRank] >= 0 && PlayerInfo[para1][pMember] != 8)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Acces refusé!");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 0 && PlayerInfo[playerid][pRank] >= 0 && PlayerInfo[para1][pMember] != 9)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Acces refusé!");
				return 1;
			}
			/*if(PlayerInfo[playerid][pLeader] == 10 && PlayerInfo[para1][pMember] != 10)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Acces refusé!");
				return 1;
			}*/
			/*if(PlayerInfo[playerid][pLeader] == 11 && PlayerInfo[para1][pMember] != 11)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Acces refusé!");
				return 1;
			}*/
			if(PlayerInfo[playerid][pLeader] == 12 && PlayerInfo[playerid][pRank] >= 0 && PlayerInfo[para1][pMember] != 12)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Acces refusé!");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 13 && PlayerInfo[playerid][pRank] >= 0 && PlayerInfo[para1][pMember] != 13)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Acces refusé!");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 14 && PlayerInfo[playerid][pRank] >= 0 && PlayerInfo[para1][pMember] != 14)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Acces refusé!");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 15 && PlayerInfo[playerid][pRank] >= 0 && PlayerInfo[para1][pMember] != 15)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Acces refusé!");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 16 && PlayerInfo[playerid][pRank] >= 0 && PlayerInfo[para1][pMember] != 16)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Acces refusé!");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 17 && PlayerInfo[playerid][pRank] >= 5 && PlayerInfo[para1][pMember] != 17)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Access refusé!");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 18 && PlayerInfo[playerid][pRank] >= 5 && PlayerInfo[para1][pMember] != 18)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Access refusé!");
				return 1;
			}
			if (PlayerInfo[playerid][pLeader] >= 1 || PlayerInfo[playerid][pRank] >= 5)
			{
				if(IsPlayerConnected(para1))
				{
					if(para1 != INVALID_PLAYER_ID)
					{
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						PlayerInfo[para1][pRank] = level;
		                GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "Vous avez promus %s au Rang %d.", sendername, level);
						SendClientMessage(1, BLEUI, string);
						if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)
						{
							if(PlayerInfo[para1][pSex] == 1)
							{
								//Male Skin
                                if(PlayerInfo[para1][pRank] == 1) { PlayerInfo[para1][pChar] = 71; SetPlayerSkin(para1, 71); }
								else if(PlayerInfo[para1][pRank] == 2) { PlayerInfo[para1][pChar] = 280; SetPlayerSkin(para1, 280); }
								else if(PlayerInfo[para1][pRank] == 3) { PlayerInfo[para1][pChar] = 281; SetPlayerSkin(para1, 281); }
								else if(PlayerInfo[para1][pRank] == 4) { PlayerInfo[para1][pChar] = 280; SetPlayerSkin(para1, 280); }
								else if(PlayerInfo[para1][pRank] == 5) { PlayerInfo[para1][pChar] = 265; SetPlayerSkin(para1, 265); }
								else if(PlayerInfo[para1][pRank] == 6) { PlayerInfo[para1][pChar] = 283; SetPlayerSkin(para1, 283); }
							}
							else if(PlayerInfo[para1][pSex] == 2)
							{
								PlayerInfo[para1][pChar] = 211; SetPlayerSkin(para1, 211);
							}
						}
						else if(PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2)
						{
							if(PlayerInfo[para1][pSex] == 1)
							{
								//Male Skin
								if(PlayerInfo[para1][pRank] == 1) { PlayerInfo[para1][pChar] = 286; SetPlayerSkin(para1, 286); }
								else if(PlayerInfo[para1][pRank] == 2) { PlayerInfo[para1][pChar] = 286; SetPlayerSkin(para1, 286); }
								else if(PlayerInfo[para1][pRank] == 3) { PlayerInfo[para1][pChar] = 286; SetPlayerSkin(para1, 286); }
								else if(PlayerInfo[para1][pRank] == 4) { PlayerInfo[para1][pChar] = 286; SetPlayerSkin(para1, 286); }
								else if(PlayerInfo[para1][pRank] == 5) { PlayerInfo[para1][pChar] = 286; SetPlayerSkin(para1, 286); }
								else if(PlayerInfo[para1][pRank] == 6) { PlayerInfo[para1][pChar] = 286; SetPlayerSkin(para1, 286); }
							}
							else if(PlayerInfo[para1][pSex] == 2)
							{
								PlayerInfo[para1][pChar] = 211; SetPlayerSkin(para1, 211);
							}
						}
						else if(PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
						{
							if(PlayerInfo[para1][pSex] == 1)
							{
								//Male Skin
								if(PlayerInfo[para1][pRank] == 1) { PlayerInfo[para1][pChar] = 287; SetPlayerSkin(para1, 287); }
								else if(PlayerInfo[para1][pRank] == 2) { PlayerInfo[para1][pChar] = 287; SetPlayerSkin(para1, 287); }
								else if(PlayerInfo[para1][pRank] == 3) { PlayerInfo[para1][pChar] = 287; SetPlayerSkin(para1, 287); }
								else if(PlayerInfo[para1][pRank] == 4) { PlayerInfo[para1][pChar] = 287; SetPlayerSkin(para1, 287); }
								else if(PlayerInfo[para1][pRank] == 5) { PlayerInfo[para1][pChar] = 287; SetPlayerSkin(para1, 287); }
								else if(PlayerInfo[para1][pRank] == 6) { PlayerInfo[para1][pChar] = 287; SetPlayerSkin(para1, 287); }
							}
							else if(PlayerInfo[para1][pSex] == 2)
							{
								PlayerInfo[para1][pChar] = 211; SetPlayerSkin(para1, 211);
							}
						}
						else if(PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pLeader] == 4)
						{
							if(PlayerInfo[para1][pSex] == 1)
							{
								//Male Skin
								if(PlayerInfo[para1][pRank] == 1) { PlayerInfo[para1][pChar] = 276; SetPlayerSkin(para1, 276); }
								else if(PlayerInfo[para1][pRank] == 2) { PlayerInfo[para1][pChar] = 275; SetPlayerSkin(para1, 275); }
								else if(PlayerInfo[para1][pRank] == 3) { PlayerInfo[para1][pChar] = 275; SetPlayerSkin(para1, 275); }
								else if(PlayerInfo[para1][pRank] == 4) { PlayerInfo[para1][pChar] = 274; SetPlayerSkin(para1, 274); }
								else if(PlayerInfo[para1][pRank] == 5) { PlayerInfo[para1][pChar] = 70; SetPlayerSkin(para1, 70); }
								else if(PlayerInfo[para1][pRank] == 6) { PlayerInfo[para1][pChar] = 228; SetPlayerSkin(para1, 228); }
							}
							else if(PlayerInfo[para1][pSex] == 2)
							{
								PlayerInfo[para1][pChar] = 211; SetPlayerSkin(para1, 211);
							}
						}
						else if(PlayerInfo[playerid][pMember] == 5 || PlayerInfo[playerid][pLeader] == 5)
						{
							if(PlayerInfo[para1][pSex] == 1)
							{
								//Male Skin
								if(PlayerInfo[para1][pRank] == 1) { PlayerInfo[para1][pChar] = 30; SetPlayerSkin(para1, 30); }
								else if(PlayerInfo[para1][pRank] == 2) { PlayerInfo[para1][pChar] = 109; SetPlayerSkin(para1, 109); }
								else if(PlayerInfo[para1][pRank] == 3) { PlayerInfo[para1][pChar] = 109; SetPlayerSkin(para1, 109); }
								else if(PlayerInfo[para1][pRank] == 4) { PlayerInfo[para1][pChar] = 110; SetPlayerSkin(para1, 110); }
								else if(PlayerInfo[para1][pRank] == 5) { PlayerInfo[para1][pChar] = 110; SetPlayerSkin(para1, 110); }
								else if(PlayerInfo[para1][pRank] == 6) { PlayerInfo[para1][pChar] = 108; SetPlayerSkin(para1, 108); }
							}
							else if(PlayerInfo[para1][pSex] == 2)
							{
								PlayerInfo[para1][pChar] = 211; SetPlayerSkin(para1, 211);
							}
						}
						else if(PlayerInfo[playerid][pMember] == 6 || PlayerInfo[playerid][pLeader] == 6)
						{
							if(PlayerInfo[para1][pSex] == 1)
							{
								//Male Skin
								if(PlayerInfo[para1][pRank] == 1) { PlayerInfo[para1][pChar] = 125; SetPlayerSkin(para1, 125); }
								else if(PlayerInfo[para1][pRank] == 2) { PlayerInfo[para1][pChar] = 124; SetPlayerSkin(para1, 124); }
								else if(PlayerInfo[para1][pRank] == 3) { PlayerInfo[para1][pChar] = 111; SetPlayerSkin(para1, 111); }
								else if(PlayerInfo[para1][pRank] == 4) { PlayerInfo[para1][pChar] = 120; SetPlayerSkin(para1, 120); }
								else if(PlayerInfo[para1][pRank] == 5) { PlayerInfo[para1][pChar] = 126; SetPlayerSkin(para1, 126); }
								else if(PlayerInfo[para1][pRank] == 6) { PlayerInfo[para1][pChar] = 113; SetPlayerSkin(para1, 113); }
							}
							else if(PlayerInfo[para1][pSex] == 2)
							{
								PlayerInfo[para1][pChar] = 41; SetPlayerSkin(para1, 41);
							}
						}
						else if(PlayerInfo[playerid][pMember] == 7 || PlayerInfo[playerid][pLeader] == 7)
						{
							if(PlayerInfo[para1][pSex] == 1)
							{
								//Male Skin
								if(PlayerInfo[para1][pRank] == 1) { PlayerInfo[para1][pChar] = 163; SetPlayerSkin(para1, 163); }
								else if(PlayerInfo[para1][pRank] == 2) { PlayerInfo[para1][pChar] = 227; SetPlayerSkin(para1, 227); }
								else if(PlayerInfo[para1][pRank] == 3) { PlayerInfo[para1][pChar] = 164; SetPlayerSkin(para1, 164); }
								else if(PlayerInfo[para1][pRank] == 4) { PlayerInfo[para1][pChar] = 17; SetPlayerSkin(para1, 17); }
								else if(PlayerInfo[para1][pRank] == 5) { PlayerInfo[para1][pChar] = 147; SetPlayerSkin(para1, 290); }
								else if(PlayerInfo[para1][pRank] == 6) { PlayerInfo[para1][pChar] = 187; SetPlayerSkin(para1, 187); }
							}
							else if(PlayerInfo[para1][pSex] == 2)
							{
								PlayerInfo[para1][pChar] = 211; SetPlayerSkin(para1, 211);
							}
						}
						else if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9)
						{
							if(PlayerInfo[para1][pSex] == 1)
							{
								//Male Skin
								if(PlayerInfo[para1][pRank] == 1) { PlayerInfo[para1][pChar] = 36; SetPlayerSkin(para1, 36); }
								else if(PlayerInfo[para1][pRank] == 2) { PlayerInfo[para1][pChar] = 37; SetPlayerSkin(para1, 37); }
								else if(PlayerInfo[para1][pRank] == 3) { PlayerInfo[para1][pChar] = 35; SetPlayerSkin(para1, 35); }
								else if(PlayerInfo[para1][pRank] == 4) { PlayerInfo[para1][pChar] = 112; SetPlayerSkin(para1, 112); }
								else if(PlayerInfo[para1][pRank] == 5) { PlayerInfo[para1][pChar] = 57; SetPlayerSkin(para1, 57); }
								else if(PlayerInfo[para1][pRank] == 6) { PlayerInfo[para1][pChar] = 295; SetPlayerSkin(para1, 295); }
							}
							else if(PlayerInfo[para1][pSex] == 2)
							{
								PlayerInfo[para1][pChar] = 141; SetPlayerSkin(para1, 141);
							}
						}
						/*else if(PlayerInfo[playerid][pJob] == 13)
						{
							if(PlayerInfo[para1][pSex] == 1)
							{
								//Male Skin
								if(PlayerInfo[para1][pRank] == 1) { PlayerInfo[para1][pChar] = 71; SetPlayerSkin(para1, 71); }
								else if(PlayerInfo[para1][pRank] == 2) { PlayerInfo[para1][pChar] = 280; SetPlayerSkin(para1, 280); }
								else if(PlayerInfo[para1][pRank] == 3) { PlayerInfo[para1][pChar] = 281; SetPlayerSkin(para1, 281); }
								else if(PlayerInfo[para1][pRank] == 4) { PlayerInfo[para1][pChar] = 282; SetPlayerSkin(para1, 282); }
								else if(PlayerInfo[para1][pRank] == 5) { PlayerInfo[para1][pChar] = 288; SetPlayerSkin(para1, 288); }
								else if(PlayerInfo[para1][pRank] == 6) { PlayerInfo[para1][pChar] = 283; SetPlayerSkin(para1, 283); }
							}
							else if(PlayerInfo[para1][pSex] == 2)
							{
								PlayerInfo[para1][pChar] = 211; SetPlayerSkin(para1, 211);
							}
						}*/
						/*else if(PlayerInfo[playerid][pMember] == 11 || PlayerInfo[playerid][pLeader] == 11)
						{
							if(PlayerInfo[para1][pSex] == 1)
							{
								//Male Skin
								if(PlayerInfo[para1][pRank] == 1) { PlayerInfo[para1][pChar] = 71; SetPlayerSkin(para1, 71); }
								else if(PlayerInfo[para1][pRank] == 2) { PlayerInfo[para1][pChar] = 280; SetPlayerSkin(para1, 280); }
								else if(PlayerInfo[para1][pRank] == 3) { PlayerInfo[para1][pChar] = 281; SetPlayerSkin(para1, 281); }
								else if(PlayerInfo[para1][pRank] == 4) { PlayerInfo[para1][pChar] = 282; SetPlayerSkin(para1, 282); }
								else if(PlayerInfo[para1][pRank] == 5) { PlayerInfo[para1][pChar] = 288; SetPlayerSkin(para1, 288); }
								else if(PlayerInfo[para1][pRank] == 6) { PlayerInfo[para1][pChar] = 283; SetPlayerSkin(para1, 283); }
							}
							else if(PlayerInfo[para1][pSex] == 2)
							{
								PlayerInfo[para1][pChar] = 211; SetPlayerSkin(para1, 211);
							}
						}*/
						else if(PlayerInfo[playerid][pMember] == 12 || PlayerInfo[playerid][pLeader] == 12)
						{
							if(PlayerInfo[para1][pSex] == 1)
							{
								//Male Skin
								if(PlayerInfo[para1][pRank] == 1) { PlayerInfo[para1][pChar] = 125; SetPlayerSkin(para1, 125); }
								else if(PlayerInfo[para1][pRank] == 2) { PlayerInfo[para1][pChar] = 126; SetPlayerSkin(para1, 126); }
								else if(PlayerInfo[para1][pRank] == 3) { PlayerInfo[para1][pChar] = 124; SetPlayerSkin(para1, 124); }
								else if(PlayerInfo[para1][pRank] == 4) { PlayerInfo[para1][pChar] = 295; SetPlayerSkin(para1, 295); }
								else if(PlayerInfo[para1][pRank] == 5) { PlayerInfo[para1][pChar] = 272; SetPlayerSkin(para1, 272); }
								else if(PlayerInfo[para1][pRank] == 6) { PlayerInfo[para1][pChar] = 113; SetPlayerSkin(para1, 113); }
							}
							else if(PlayerInfo[para1][pSex] == 2)
							{
								PlayerInfo[para1][pChar] = 211; SetPlayerSkin(para1, 211);
							}
						}
						else if(PlayerInfo[playerid][pMember] == 13 || PlayerInfo[playerid][pLeader] == 13)
						{
							if(PlayerInfo[para1][pSex] == 1)
							{
								//Male Skin
								if(PlayerInfo[para1][pRank] == 1) { PlayerInfo[para1][pChar] = 28; SetPlayerSkin(para1, 28); }
								else if(PlayerInfo[para1][pRank] == 2) { PlayerInfo[para1][pChar] = 219; SetPlayerSkin(para1, 219); }
								else if(PlayerInfo[para1][pRank] == 3) { PlayerInfo[para1][pChar] = 67; SetPlayerSkin(para1, 67); }
								else if(PlayerInfo[para1][pRank] == 4) { PlayerInfo[para1][pChar] = 180; SetPlayerSkin(para1, 180); }
								else if(PlayerInfo[para1][pRank] == 5) { PlayerInfo[para1][pChar] = 19; SetPlayerSkin(para1, 19); }
								else if(PlayerInfo[para1][pRank] == 6) { PlayerInfo[para1][pChar] = 22; SetPlayerSkin(para1, 22); }
							}
							else if(PlayerInfo[para1][pSex] == 2)
							{
								PlayerInfo[para1][pChar] = 233; SetPlayerSkin(para1, 233);
							}
						}
						else if(PlayerInfo[playerid][pMember] == 14 || PlayerInfo[playerid][pLeader] == 14)
						{
							if(PlayerInfo[para1][pSex] == 1)
							{
								//Male Skin
								if(PlayerInfo[para1][pRank] == 1) { PlayerInfo[para1][pChar] = 122; SetPlayerSkin(para1, 122); }
								else if(PlayerInfo[para1][pRank] == 2) { PlayerInfo[para1][pChar] = 117; SetPlayerSkin(para1, 117); }
								else if(PlayerInfo[para1][pRank] == 3) { PlayerInfo[para1][pChar] = 118; SetPlayerSkin(para1, 118); }
								else if(PlayerInfo[para1][pRank] == 4) { PlayerInfo[para1][pChar] = 59; SetPlayerSkin(para1, 59); }
								else if(PlayerInfo[para1][pRank] == 5) { PlayerInfo[para1][pChar] = 123; SetPlayerSkin(para1, 123); }
								else if(PlayerInfo[para1][pRank] == 6) { PlayerInfo[para1][pChar] = 120; SetPlayerSkin(para1, 120); }
							}
							else if(PlayerInfo[para1][pSex] == 2)
							{
								PlayerInfo[para1][pChar] = 169; SetPlayerSkin(para1, 169);
							}
						}
						else if(PlayerInfo[playerid][pMember] == 15 || PlayerInfo[playerid][pLeader] == 14)
						{
							if(PlayerInfo[para1][pSex] == 1)
							{
								//Male Skin
								if(PlayerInfo[para1][pRank] == 1) { PlayerInfo[para1][pChar] = 66; SetPlayerSkin(para1, 66); }
								else if(PlayerInfo[para1][pRank] == 2) { PlayerInfo[para1][pChar] = 103; SetPlayerSkin(para1, 103); }
								else if(PlayerInfo[para1][pRank] == 3) { PlayerInfo[para1][pChar] = 103; SetPlayerSkin(para1, 103); }
								else if(PlayerInfo[para1][pRank] == 4) { PlayerInfo[para1][pChar] = 102; SetPlayerSkin(para1, 102); }
								else if(PlayerInfo[para1][pRank] == 5) { PlayerInfo[para1][pChar] = 102; SetPlayerSkin(para1, 102); }
								else if(PlayerInfo[para1][pRank] == 6) { PlayerInfo[para1][pChar] = 104; SetPlayerSkin(para1, 104); }
							}
							else if(PlayerInfo[para1][pSex] == 2)
							{
								PlayerInfo[para1][pChar] = 13; SetPlayerSkin(para1, 13);
							}
						}
						else if(PlayerInfo[playerid][pMember] == 16 || PlayerInfo[playerid][pLeader] == 16)
						{
							if(PlayerInfo[para1][pSex] == 1)
							{
								//Male Skin
								if(PlayerInfo[para1][pRank] == 1) { PlayerInfo[para1][pChar] = 105; SetPlayerSkin(para1, 105); }
								else if(PlayerInfo[para1][pRank] == 2) { PlayerInfo[para1][pChar] = 106; SetPlayerSkin(para1, 106); }
								else if(PlayerInfo[para1][pRank] == 3) { PlayerInfo[para1][pChar] = 107; SetPlayerSkin(para1, 107); }
								else if(PlayerInfo[para1][pRank] == 4) { PlayerInfo[para1][pChar] = 271; SetPlayerSkin(para1, 271); }
								else if(PlayerInfo[para1][pRank] == 5) { PlayerInfo[para1][pChar] = 269; SetPlayerSkin(para1, 269); }
								else if(PlayerInfo[para1][pRank] == 6) { PlayerInfo[para1][pChar] = 270; SetPlayerSkin(para1, 270); }
							}
							else if(PlayerInfo[para1][pSex] == 2)
							{
								PlayerInfo[para1][pChar] = 195; SetPlayerSkin(para1, 195);
							}
						}

				        else if(PlayerInfo[playerid][pMember] == 17 || PlayerInfo[playerid][pLeader] == 17)
						{
							if(PlayerInfo[para1][pSex] == 1)
							{
								//Male Skin
								if(PlayerInfo[para1][pRank] == 1) { PlayerInfo[para1][pChar] = 47; SetPlayerSkin(para1, 47); }
								else if(PlayerInfo[para1][pRank] == 2) { PlayerInfo[para1][pChar] = 47; SetPlayerSkin(para1, 47); }
								else if(PlayerInfo[para1][pRank] == 3) { PlayerInfo[para1][pChar] = 47; SetPlayerSkin(para1, 47); }
								else if(PlayerInfo[para1][pRank] == 4) { PlayerInfo[para1][pChar] = 48; SetPlayerSkin(para1, 48); }
								else if(PlayerInfo[para1][pRank] == 5) { PlayerInfo[para1][pChar] = 48; SetPlayerSkin(para1, 48); }
								else if(PlayerInfo[para1][pRank] == 6) { PlayerInfo[para1][pChar] = 48; SetPlayerSkin(para1, 48); }
							}
							else if(PlayerInfo[para1][pSex] == 2)
							{
								PlayerInfo[para1][pChar] = 194; SetPlayerSkin(para1, 194);
							}
						}

						else if(PlayerInfo[playerid][pMember] == 17 || PlayerInfo[playerid][pLeader] == 17) // Corleone
						{
							if(PlayerInfo[para1][pSex] == 1)
							{
								//Male Skin
								if(PlayerInfo[para1][pRank] == 1) { PlayerInfo[para1][pChar] = 122; SetPlayerSkin(para1, 122); }
								else if(PlayerInfo[para1][pRank] == 2) { PlayerInfo[para1][pChar] = 117; SetPlayerSkin(para1, 117); }
								else if(PlayerInfo[para1][pRank] == 3) { PlayerInfo[para1][pChar] = 111; SetPlayerSkin(para1, 111); }
								else if(PlayerInfo[para1][pRank] == 4) { PlayerInfo[para1][pChar] = 125; SetPlayerSkin(para1, 125); }
								else if(PlayerInfo[para1][pRank] == 5) { PlayerInfo[para1][pChar] = 127; SetPlayerSkin(para1, 127); }
								else if(PlayerInfo[para1][pRank] == 6) { PlayerInfo[para1][pChar] = 126; SetPlayerSkin(para1, 126); }
							}
							else if(PlayerInfo[para1][pSex] == 2)
							{
								PlayerInfo[para1][pChar] = 194; SetPlayerSkin(para1, 194);
							}
						}

						else if(PlayerInfo[playerid][pMember] == 18 || PlayerInfo[playerid][pLeader] == 18) // C.I.A
						{
							if(PlayerInfo[para1][pSex] == 1)
							{
								//Male Skin
								if(PlayerInfo[para1][pRank] == 1) { PlayerInfo[para1][pChar] = 163; SetPlayerSkin(para1, 163); }
								else if(PlayerInfo[para1][pRank] == 2) { PlayerInfo[para1][pChar] = 164; SetPlayerSkin(para1, 164); }
								else if(PlayerInfo[para1][pRank] == 3) { PlayerInfo[para1][pChar] = 165; SetPlayerSkin(para1, 165); }
								else if(PlayerInfo[para1][pRank] == 4) { PlayerInfo[para1][pChar] = 166; SetPlayerSkin(para1, 166); }
								else if(PlayerInfo[para1][pRank] == 5) { PlayerInfo[para1][pChar] = 187; SetPlayerSkin(para1, 187); }
								else if(PlayerInfo[para1][pRank] == 6) { PlayerInfo[para1][pChar] = 147; SetPlayerSkin(para1, 147); }
							}
							else if(PlayerInfo[para1][pSex] == 2)
							{
								PlayerInfo[para1][pChar] = 194; SetPlayerSkin(para1, 194);
							}
						}
						else if(PlayerInfo[para1][pMember] == 54)
						{
							if(PlayerInfo[para1][pSex] == 1)
							{
								//Male Skin
								if(level == 1) { PlayerInfo[para1][pChar] = 163; SetPlayerSkin(para1, 163); }
								else if(level == 2) { PlayerInfo[para1][pChar] = 164; SetPlayerSkin(para1, 164); }
								else if(level == 3) { PlayerInfo[para1][pChar] = 165; SetPlayerSkin(para1, 165); }
								else if(level == 4) { PlayerInfo[para1][pChar] = 166; SetPlayerSkin(para1, 166); }
								else if(level == 5) { PlayerInfo[para1][pChar] = 187; SetPlayerSkin(para1, 187); }
								else if(level == 6) { PlayerInfo[para1][pChar] = 147; SetPlayerSkin(para1, 147); }
							}
							else if(PlayerInfo[para1][pSex] == 2)
							{
								PlayerInfo[para1][pChar] = 219; SetPlayerSkin(para1, 219);
							}
						}
					}
				}
			}
		}
		return 1;
	}
//----------------------------------[Adonnerrangk]-----------------
    //if(strcmp(cmd, "/adonnerrank", true) ==0 || strcmp(cmd, "/giverank", true) == 0)
    if(strcmp(cmd, "/adonnerrang", true) == 0 || strcmp(cmd, "/adonnerrank", true) == 0 || strcmp(cmd, "/agiverank", true) == 0)
	//if(strcmp(cmd, "/adonnerrang", true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /agiverank [playerid/PartOfName] [Rang]");
				return 1;
			}
			new para1;
			new level;
			para1 = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			level = strval(tmp);
            if(level > 9 || level < 0) { SendClientMessage(playerid, COLOR_GREY, "Il y n'y a que 6 rang."); return 1; }
            if (PlayerInfo[playerid][pAdmin] >= 3)
			{
				if(IsPlayerConnected(para1))
				{
					if(para1 != INVALID_PLAYER_ID)
					{
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						PlayerInfo[para1][pRank] = level;
						format(string, sizeof(string), "Vous avez été promus rang %d par l'Admin %s", level, sendername);
						SendClientMessage(para1, COLOR_WHITE, string);
						format(string, sizeof(string), "Vous avez promus %s au rang %d.", giveplayer,level);
						SendClientMessage(playerid, COLOR_WHITE, string);
						if(PlayerInfo[para1][pMember] == 1)
						{
							if(PlayerInfo[para1][pSex] == 1)
							{
								//Male Skin
								if(PlayerInfo[para1][pRank] == 1) { PlayerInfo[para1][pChar] = 71; SetPlayerSkin(para1, 71); }
								else if(PlayerInfo[para1][pRank] == 2) { PlayerInfo[para1][pChar] = 280; SetPlayerSkin(para1, 280); }
								else if(PlayerInfo[para1][pRank] == 3) { PlayerInfo[para1][pChar] = 281; SetPlayerSkin(para1, 281); }
								else if(PlayerInfo[para1][pRank] == 4) { PlayerInfo[para1][pChar] = 280; SetPlayerSkin(para1, 280); }
								else if(PlayerInfo[para1][pRank] == 5) { PlayerInfo[para1][pChar] = 265; SetPlayerSkin(para1, 265); }
								else if(PlayerInfo[para1][pRank] == 6) { PlayerInfo[para1][pChar] = 283; SetPlayerSkin(para1, 283); }
							}
							else if(PlayerInfo[para1][pSex] == 2)
							{
								PlayerInfo[para1][pChar] = 211; SetPlayerSkin(para1, 211);
							}
						}
						else if(PlayerInfo[para1][pMember] == 2)
						{
							if(PlayerInfo[para1][pSex] == 1)
							{
								//Male Skin
								if(level == 1) { PlayerInfo[para1][pChar] = 286; SetPlayerSkin(para1, 286); }
								else if(level == 2) { PlayerInfo[para1][pChar] = 286; SetPlayerSkin(para1, 286); }
								else if(level == 3) { PlayerInfo[para1][pChar] = 286; SetPlayerSkin(para1, 286); }
								else if(level == 4) { PlayerInfo[para1][pChar] = 286; SetPlayerSkin(para1, 286); }
								else if(level == 5) { PlayerInfo[para1][pChar] = 286; SetPlayerSkin(para1, 286); }
								else if(level == 6) { PlayerInfo[para1][pChar] = 286; SetPlayerSkin(para1, 286); }
							}
							else if(PlayerInfo[para1][pSex] == 2)
							{
								PlayerInfo[para1][pChar] = 211; SetPlayerSkin(para1, 211);
							}
						}
						else if(PlayerInfo[para1][pMember] == 3)
						{
							if(PlayerInfo[para1][pSex] == 1)
							{
								//Male Skin
								if(level == 1) { PlayerInfo[para1][pChar] = 287; SetPlayerSkin(para1, 287); }
								else if(level == 2) { PlayerInfo[para1][pChar] = 287; SetPlayerSkin(para1, 287); }
								else if(level == 3) { PlayerInfo[para1][pChar] = 287; SetPlayerSkin(para1, 287); }
								else if(level == 4) { PlayerInfo[para1][pChar] = 287; SetPlayerSkin(para1, 287); }
								else if(level == 5) { PlayerInfo[para1][pChar] = 287; SetPlayerSkin(para1, 287); }
								else if(level == 6) { PlayerInfo[para1][pChar] = 287; SetPlayerSkin(para1, 287); }
							}
							else if(PlayerInfo[para1][pSex] == 2)
							{
								PlayerInfo[para1][pChar] = 211; SetPlayerSkin(para1, 211);
							}
						}
						else if(PlayerInfo[para1][pMember] == 4)
						{
							if(PlayerInfo[para1][pSex] == 1)
							{
								//Male Skin
								if(level == 1) { PlayerInfo[para1][pChar] = 276; SetPlayerSkin(para1, 276); }
								else if(level == 2) { PlayerInfo[para1][pChar] = 275; SetPlayerSkin(para1, 275); }
								else if(level == 3) { PlayerInfo[para1][pChar] = 275; SetPlayerSkin(para1, 275); }
								else if(level == 4) { PlayerInfo[para1][pChar] = 274; SetPlayerSkin(para1, 274); }
								else if(level == 5) { PlayerInfo[para1][pChar] = 70; SetPlayerSkin(para1, 70); }
								else if(level == 6) { PlayerInfo[para1][pChar] = 228; SetPlayerSkin(para1, 228); }
							}
							else if(PlayerInfo[para1][pSex] == 2)
							{
								PlayerInfo[para1][pChar] = 211; SetPlayerSkin(para1, 211);
							}
						}
						else if(PlayerInfo[para1][pMember] == 5)
						{
							if(PlayerInfo[para1][pSex] == 1)
							{
								//Male Skin
								if(PlayerInfo[para1][pRank] == 1) { PlayerInfo[para1][pChar] = 30; SetPlayerSkin(para1, 30); }
								else if(PlayerInfo[para1][pRank] == 2) { PlayerInfo[para1][pChar] = 109; SetPlayerSkin(para1, 109); }
								else if(PlayerInfo[para1][pRank] == 3) { PlayerInfo[para1][pChar] = 109; SetPlayerSkin(para1, 109); }
								else if(PlayerInfo[para1][pRank] == 4) { PlayerInfo[para1][pChar] = 110; SetPlayerSkin(para1, 110); }
								else if(PlayerInfo[para1][pRank] == 5) { PlayerInfo[para1][pChar] = 110; SetPlayerSkin(para1, 110); }
								else if(PlayerInfo[para1][pRank] == 6) { PlayerInfo[para1][pChar] = 108; SetPlayerSkin(para1, 108); }
							}
							else if(PlayerInfo[para1][pSex] == 2)
							{
								PlayerInfo[para1][pChar] = 211; SetPlayerSkin(para1, 211);
							}
						}
						else if(PlayerInfo[para1][pMember] == 6)
						{
							if(PlayerInfo[para1][pSex] == 1)
							{
								//Male Skin
									if(PlayerInfo[para1][pRank] == 1) { PlayerInfo[para1][pChar] = 125; SetPlayerSkin(para1, 125); }
								else if(PlayerInfo[para1][pRank] == 2) { PlayerInfo[para1][pChar] = 124; SetPlayerSkin(para1, 124); }
								else if(PlayerInfo[para1][pRank] == 3) { PlayerInfo[para1][pChar] = 111; SetPlayerSkin(para1, 111); }
								else if(PlayerInfo[para1][pRank] == 4) { PlayerInfo[para1][pChar] = 120; SetPlayerSkin(para1, 120); }
								else if(PlayerInfo[para1][pRank] == 5) { PlayerInfo[para1][pChar] = 126; SetPlayerSkin(para1, 126); }
								else if(PlayerInfo[para1][pRank] == 6) { PlayerInfo[para1][pChar] = 113; SetPlayerSkin(para1, 113); }
							}
							else if(PlayerInfo[para1][pSex] == 2)
							{
								PlayerInfo[para1][pChar] = 41; SetPlayerSkin(para1, 41);
							}
						}
						else if(PlayerInfo[para1][pMember] == 7)
						{
							if(PlayerInfo[para1][pSex] == 1)
							{
								//Male Skin
								if(level == 1) { PlayerInfo[para1][pChar] = 163; SetPlayerSkin(para1, 163); }
								else if(level == 2) { PlayerInfo[para1][pChar] = 227; SetPlayerSkin(para1, 227); }
								else if(level == 3) { PlayerInfo[para1][pChar] = 164; SetPlayerSkin(para1, 164); }
								else if(level == 4) { PlayerInfo[para1][pChar] = 17; SetPlayerSkin(para1, 17); }
								else if(level == 5) { PlayerInfo[para1][pChar] = 147; SetPlayerSkin(para1, 290); }
								else if(level == 6) { PlayerInfo[para1][pChar] = 187; SetPlayerSkin(para1, 187); }
							}
							else if(PlayerInfo[para1][pSex] == 2)
							{
								PlayerInfo[para1][pChar] = 211; SetPlayerSkin(para1, 211);
							}
						}
						else if(PlayerInfo[para1][pMember] == 9)
						{
							if(PlayerInfo[para1][pSex] == 1)
							{
								//Male Skin
								if(level == 1) { PlayerInfo[para1][pChar] = 36; SetPlayerSkin(para1, 36); }
								else if(level == 2) { PlayerInfo[para1][pChar] = 37; SetPlayerSkin(para1, 37); }
								else if(level == 3) { PlayerInfo[para1][pChar] = 35; SetPlayerSkin(para1, 35); }
								else if(level == 4) { PlayerInfo[para1][pChar] = 112; SetPlayerSkin(para1, 112); }
								else if(level == 5) { PlayerInfo[para1][pChar] = 57; SetPlayerSkin(para1, 57); }
								else if(level == 6) { PlayerInfo[para1][pChar] = 295; SetPlayerSkin(para1, 295); }
							}
							else if(PlayerInfo[para1][pSex] == 2)
							{
								PlayerInfo[para1][pChar] = 141; SetPlayerSkin(para1, 141);
							}
						}
						/*else if(PlayerInfo[playerid][pJob] == 13)
						{
							if(PlayerInfo[para1][pSex] == 1)
							{
								//Male Skin
								if(level == 1) { PlayerInfo[para1][pChar] = 71; SetPlayerSkin(para1, 71); }
								else if(level == 2) { PlayerInfo[para1][pChar] = 280; SetPlayerSkin(para1, 280); }
								else if(level == 3) { PlayerInfo[para1][pChar] = 281; SetPlayerSkin(para1, 281); }
								else if(level == 4) { PlayerInfo[para1][pChar] = 282; SetPlayerSkin(para1, 282); }
								else if(level == 5) { PlayerInfo[para1][pChar] = 288; SetPlayerSkin(para1, 288); }
								else if(level == 6) { PlayerInfo[para1][pChar] = 283; SetPlayerSkin(para1, 283); }
							}
							else if(PlayerInfo[para1][pSex] == 2)
							{
								PlayerInfo[para1][pChar] = 211; SetPlayerSkin(para1, 211);
							}
						}*/
						/*else if(PlayerInfo[para1][pMember] == 11)
						{
							if(PlayerInfo[para1][pSex] == 1)
							{
								//Male Skin
								if(level == 1) { PlayerInfo[para1][pChar] = 71; SetPlayerSkin(para1, 71); }
								else if(level == 2) { PlayerInfo[para1][pChar] = 280; SetPlayerSkin(para1, 280); }
								else if(level == 3) { PlayerInfo[para1][pChar] = 281; SetPlayerSkin(para1, 281); }
								else if(level == 4) { PlayerInfo[para1][pChar] = 282; SetPlayerSkin(para1, 282); }
								else if(level == 5) { PlayerInfo[para1][pChar] = 288; SetPlayerSkin(para1, 288); }
								else if(level == 6) { PlayerInfo[para1][pChar] = 283; SetPlayerSkin(para1, 283); }
							}
							else if(PlayerInfo[para1][pSex] == 2)
							{
								PlayerInfo[para1][pChar] = 211; SetPlayerSkin(para1, 211);
							}
						}*/
						else if(PlayerInfo[para1][pMember] == 12)
						{
							if(PlayerInfo[para1][pSex] == 1)
							{
								//Male Skin
								if(level == 1) { PlayerInfo[para1][pChar] = 125; SetPlayerSkin(para1, 125); }
								else if(level == 2) { PlayerInfo[para1][pChar] = 126; SetPlayerSkin(para1, 126); }
								else if(level == 3) { PlayerInfo[para1][pChar] = 124; SetPlayerSkin(para1, 124); }
								else if(level == 4) { PlayerInfo[para1][pChar] = 295; SetPlayerSkin(para1, 295); }
								else if(level == 5) { PlayerInfo[para1][pChar] = 272; SetPlayerSkin(para1, 272); }
								else if(level == 6) { PlayerInfo[para1][pChar] = 113; SetPlayerSkin(para1, 113); }
							}
							else if(PlayerInfo[para1][pSex] == 2)
							{
								PlayerInfo[para1][pChar] = 211; SetPlayerSkin(para1, 211);
							}
						}
						else if(PlayerInfo[para1][pMember] == 13)
						{
							if(PlayerInfo[para1][pSex] == 1)
							{
								//Male Skin
								if(level == 1) { PlayerInfo[para1][pChar] = 28; SetPlayerSkin(para1, 28); }
								else if(level == 2) { PlayerInfo[para1][pChar] = 219; SetPlayerSkin(para1, 219); }
								else if(level == 3) { PlayerInfo[para1][pChar] = 67; SetPlayerSkin(para1, 67); }
								else if(level == 4) { PlayerInfo[para1][pChar] = 180; SetPlayerSkin(para1, 180); }
								else if(level == 5) { PlayerInfo[para1][pChar] = 19; SetPlayerSkin(para1, 19); }
								else if(level == 6) { PlayerInfo[para1][pChar] = 22; SetPlayerSkin(para1, 22); }
							}
							else if(PlayerInfo[para1][pSex] == 2)
							{
								PlayerInfo[para1][pChar] = 233; SetPlayerSkin(para1, 233);
							}
						}
						else if(PlayerInfo[para1][pMember] == 14)
						{
							if(PlayerInfo[para1][pSex] == 1)
							{
								//Male Skin
								if(level == 1) { PlayerInfo[para1][pChar] = 122; SetPlayerSkin(para1, 122); }
								else if(level == 2) { PlayerInfo[para1][pChar] = 117; SetPlayerSkin(para1, 117); }
								else if(level == 3) { PlayerInfo[para1][pChar] = 118; SetPlayerSkin(para1, 118); }
								else if(level == 4) { PlayerInfo[para1][pChar] = 59; SetPlayerSkin(para1, 59); }
								else if(level == 5) { PlayerInfo[para1][pChar] = 123; SetPlayerSkin(para1, 123); }
								else if(level == 6) { PlayerInfo[para1][pChar] = 120; SetPlayerSkin(para1, 120); }
							}
							else if(PlayerInfo[para1][pSex] == 2)
							{
								PlayerInfo[para1][pChar] = 195; SetPlayerSkin(para1, 195);
							}
						}
						else if(PlayerInfo[para1][pMember] == 15)
						{
							if(PlayerInfo[para1][pSex] == 1)
							{
								//Male Skin
								if(level == 1) { PlayerInfo[para1][pChar] = 66; SetPlayerSkin(para1, 66); }
								else if(level == 2) { PlayerInfo[para1][pChar] = 67; SetPlayerSkin(para1, 67); }
								else if(level == 3) { PlayerInfo[para1][pChar] = 103; SetPlayerSkin(para1, 103); }
								else if(level == 4) { PlayerInfo[para1][pChar] = 103; SetPlayerSkin(para1, 103); }
								else if(level == 5) { PlayerInfo[para1][pChar] = 102; SetPlayerSkin(para1, 102); }
								else if(level == 6) { PlayerInfo[para1][pChar] = 104; SetPlayerSkin(para1, 104); }
								else if(level == 7) { PlayerInfo[para1][pChar] = 104; SetPlayerSkin(para1, 104); }
							}
							else if(PlayerInfo[para1][pSex] == 2)
							{
								PlayerInfo[para1][pChar] = 195; SetPlayerSkin(para1, 195);
							}
						}
						else if(PlayerInfo[para1][pMember] == 16)
						{
							if(PlayerInfo[para1][pSex] == 1)
							{
								//Male Skin
								if(PlayerInfo[para1][pRank] == 1) { PlayerInfo[para1][pChar] = 105; SetPlayerSkin(para1, 105); }
								else if(PlayerInfo[para1][pRank] == 2) { PlayerInfo[para1][pChar] = 106; SetPlayerSkin(para1, 106); }
								else if(PlayerInfo[para1][pRank] == 3) { PlayerInfo[para1][pChar] = 107; SetPlayerSkin(para1, 107); }
								else if(PlayerInfo[para1][pRank] == 4) { PlayerInfo[para1][pChar] = 271; SetPlayerSkin(para1, 271); }
								else if(PlayerInfo[para1][pRank] == 5) { PlayerInfo[para1][pChar] = 269; SetPlayerSkin(para1, 269); }
								else if(PlayerInfo[para1][pRank] == 6) { PlayerInfo[para1][pChar] = 270; SetPlayerSkin(para1, 270); }
							}
							else if(PlayerInfo[para1][pSex] == 2)
							{
								PlayerInfo[para1][pChar] = 195; SetPlayerSkin(para1, 195);
							}
						}
						else if(PlayerInfo[para1][pMember] == 17)
						{
							if(PlayerInfo[para1][pSex] == 1)
							{
								//Male Skin
								if(PlayerInfo[para1][pRank] == 1) { PlayerInfo[para1][pChar] = 122; SetPlayerSkin(para1, 122); }
								else if(PlayerInfo[para1][pRank] == 2) { PlayerInfo[para1][pChar] = 117; SetPlayerSkin(para1, 117); }
								else if(PlayerInfo[para1][pRank] == 3) { PlayerInfo[para1][pChar] = 111; SetPlayerSkin(para1, 111); }
								else if(PlayerInfo[para1][pRank] == 4) { PlayerInfo[para1][pChar] = 125; SetPlayerSkin(para1, 125); }
								else if(PlayerInfo[para1][pRank] == 5) { PlayerInfo[para1][pChar] = 127; SetPlayerSkin(para1, 127); }
								else if(PlayerInfo[para1][pRank] == 6) { PlayerInfo[para1][pChar] = 126; SetPlayerSkin(para1, 126); }
							}
							else if(PlayerInfo[para1][pSex] == 2)
							{
								PlayerInfo[para1][pChar] = 194; SetPlayerSkin(para1, 194);
							}
						}
						else if(PlayerInfo[para1][pMember] == 18)
						{
							if(PlayerInfo[para1][pSex] == 1)
							{
								//Male Skin
								if(PlayerInfo[para1][pRank] == 1) { PlayerInfo[para1][pChar] = 163; SetPlayerSkin(para1, 163); }
								else if(PlayerInfo[para1][pRank] == 2) { PlayerInfo[para1][pChar] = 164; SetPlayerSkin(para1, 164); }
								else if(PlayerInfo[para1][pRank] == 3) { PlayerInfo[para1][pChar] = 165; SetPlayerSkin(para1, 165); }
								else if(PlayerInfo[para1][pRank] == 4) { PlayerInfo[para1][pChar] = 166; SetPlayerSkin(para1, 166); }
								else if(PlayerInfo[para1][pRank] == 5) { PlayerInfo[para1][pChar] = 187; SetPlayerSkin(para1, 187); }
								else if(PlayerInfo[para1][pRank] == 6) { PlayerInfo[para1][pChar] = 147; SetPlayerSkin(para1, 147); }
							}
							else if(PlayerInfo[para1][pSex] == 2)
							{
								PlayerInfo[para1][pChar] = 194; SetPlayerSkin(para1, 194);
							}
						}
						/*
						else if(PlayerInfo[para1][pMember] == 19)
						{
							if(PlayerInfo[para1][pSex] == 1)
							{
								//Male Skin
								if(level == 1) { PlayerInfo[para1][pChar] = 47; SetPlayerSkin(para1, 47); }
								else if(level == 2) { PlayerInfo[para1][pChar] = 47; SetPlayerSkin(para1, 47); }
								else if(level == 3) { PlayerInfo[para1][pChar] = 47; SetPlayerSkin(para1, 47); }
								else if(level == 4) { PlayerInfo[para1][pChar] = 48; SetPlayerSkin(para1, 48); }
								else if(level == 5) { PlayerInfo[para1][pChar] = 48; SetPlayerSkin(para1, 48); }
								else if(level == 6) { PlayerInfo[para1][pChar] = 48; SetPlayerSkin(para1, 48); }
							}
							else if(PlayerInfo[para1][pSex] == 2)
							{
								PlayerInfo[para1][pChar] = 194; SetPlayerSkin(para1, 194);
							}
						}
						else if(PlayerInfo[para1][pMember] == 20)
						{
							if(PlayerInfo[para1][pSex] == 1)
							{
								//Male Skin
								if(level == 1) { PlayerInfo[para1][pChar] = 71; SetPlayerSkin(para1, 71); }
								else if(level == 2) { PlayerInfo[para1][pChar] = 280; SetPlayerSkin(para1, 280); }
								else if(level == 3) { PlayerInfo[para1][pChar] = 281; SetPlayerSkin(para1, 281); }
								else if(level == 4) { PlayerInfo[para1][pChar] = 282; SetPlayerSkin(para1, 282); }
								else if(level == 5) { PlayerInfo[para1][pChar] = 288; SetPlayerSkin(para1, 288); }
								else if(level == 6) { PlayerInfo[para1][pChar] = 283; SetPlayerSkin(para1, 283); }
							}
							else if(PlayerInfo[para1][pSex] == 2)
							{
								PlayerInfo[para1][pChar] = 211; SetPlayerSkin(para1, 211);
							}
						}*/
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Vous n'êtes pas autorisé a utiliser cette commande!");
			}
		}
		return 1;
	}
//----------------------------------[setteam]------------------------------------------------
	if(strcmp(cmd, "/setteam", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /setteam [playerid/PartOfName] [team 1(civ) - 2(cop)]");
				return 1;
			}
			new para1;
			new level;
			para1 = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			level = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 2)
			{
			    if(IsPlayerConnected(para1))
			    {
			        if(para1 != INVALID_PLAYER_ID)
			        {
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						PlayerInfo[para1][pTeam] = level;
						gTeam[para1] = level;
						SetPlayerWeapons(para1);
						SetPlayerSpawn(para1);
						ClearCrime(para1);
						printf("%s has switched %s to team %d.", sendername, giveplayer, level);
						format(string, sizeof(string), "   You have been switched to team %d by %s", level, sendername);
						SendClientMessage(para1, COLOR_WHITE, string);
						format(string, sizeof(string), "   You have switched %s to team %d.", giveplayer,level);
						SendClientMessage(playerid, COLOR_WHITE, string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé à utiliser cette commande!");
			}
		}
		return 1;
	}
//----------------------------------[setjob]------------------------------------------------
    if(strcmp(cmd, "/setjob", true) == 0 || strcmp(cmd, "/mettrejob", true) == 0 || strcmp(cmd, "/mettretravail", true) == 0)
	//if(strcmp(cmd, "/setjob", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /mettrejob [playerid/PartOfName] [jobid)]");
				SendClientMessage(playerid, COLOR_WHITE, "Numéro: 1 Detective - 2 Avocat - 3 Prostituée - 4 Dealer de Drogue - 5 Abc New");
				SendClientMessage(playerid, COLOR_WHITE, "Numéro: 6 Serveur - 7 Mecanicien - 8 Garde du Corp -  9 Dealer d'Arme - 10 Voleur de voiture ");
				SendClientMessage(playerid, COLOR_WHITE, "Numéro: 12 Boxe - 13 Chauffeur de Taxi - 14 Chauffeur de Bus ");
				SendClientMessage(playerid, COLOR_WHITE, "Numéro: 15 Livreur de Journaux - 16 Cammioneur - 17 Livreur de Pizza - 18 Fermier - 19 Cultivateur Drogue");
				SendClientMessage(playerid, COLOR_WHITE, "Numéro: 20 Contrebandier Drogue - 21 Balayeur de Rue - 22 Contrebandier  Arme");
				SendClientMessage(playerid, COLOR_WHITE, "Numéro: 23 Fabricant d'Arme - 24 Faussaire - 25 Eboueur - 26 Ouvrier");
				SendClientMessage(playerid, COLOR_WHITE, "Numéro: 27 Conducteur de Train - 28 Pilote de Ligne");
				return 1;
			}
			new para1;
			new jobid;
			para1 = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			jobid = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 2)
			{
			    if(IsPlayerConnected(para1))
			    {
			        if(para1 != INVALID_PLAYER_ID)
			        {
						new jtext[20];
        				if(jobid == 1) { jtext = "Detective"; }
        				else if(jobid == 2) { jtext = "Avocat"; }
        				else if(jobid == 3) { jtext = "Prostituée"; }
        				else if(jobid == 4) { jtext = "Dealer de Drogue"; }
        				else if(jobid == 5) { jtext = "Abc New"; }
        				else if(jobid == 6) { jtext = "Serveur"; }
        				else if(jobid == 7) { jtext = "Mecanicien"; }
        				else if(jobid == 8) { jtext = "Garde du Corp"; }
        				else if(jobid == 9) { jtext = "Dealer d'Arme"; }
        				else if(jobid == 10) { jtext = "Voleur de voiture"; }
        				else if(jobid == 11) { jtext = "Job desactiver"; }//cascadeur
						else if(jobid == 12) { jtext = "Boxer"; }
						else if(jobid == 13) { jtext = "Chauffeur de Taxi"; }
        				else if(jobid == 14) { jtext = "Chauffeur de Bus"; }
        				else if(jobid == 15) { jtext = "Livreur de Journals"; }
        				else if(jobid == 16) { jtext = "Cammioneur"; }
        				else if(jobid == 17) { jtext = "Livreur de Pizza"; }
        				else if(jobid == 18) { jtext = "Fermier"; }
        				else if(jobid == 19) { jtext = "Cultivateur Drogue"; }
        				else if(jobid == 20) { jtext = "Contrebandier Drogu"; }
        				else if(jobid == 21) { jtext = "Balayeur de Rue"; }
        				else if(jobid == 22) { jtext = "Contrebandier  Arme"; }
        				else if(jobid == 23) { jtext = "Fabricant d'Arme"; }
        				else if(jobid == 24) { jtext = "Faussaire"; }
        				else if(jobid == 25) { jtext = "Eboueur"; }
        				else if(jobid == 26) { jtext = "Ouvrier"; }
        				else if(jobid == 27) { jtext = "Conducteur de Train"; }
        				else if(jobid == 28) { jtext = "Pilote de Ligne"; }
        				else { jtext = "Aucun"; }
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						PlayerInfo[para1][pJob] = jobid;
						format(string, 256, "%s à changé le travail de %s en %s.", sendername, giveplayer, jtext);
						ABroadCast(COLOR_YELLOW,string,1);
                        format(string, sizeof(string), "L'Admin %s vous à mis le travail %s!",sendername, jtext);
						SendClientMessage(para1, COLOR_WHITE, string);
						format(string, sizeof(string), "Vous avez changé le job de %s. Son travail est désormais %s!", giveplayer, jtext);
						SendClientMessage(playerid, COLOR_WHITE, string);
					}

				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé à utiliser cette commande!");
			}
		}
		return 1;
	}
//-----------------------------------[GOTOConcess]---------------------------------------
    if(strcmp(cmd, "/gotoconcess", true) == 0 || strcmp(cmd, "/gotoconces", true) == 0 || strcmp(cmd, "/gotoconce", true) == 0)
	//if(strcmp(cmd, "/gotoconcess", true) == 0) // By LordMan
	{
	    new tmpcar = GetPlayerVehicleID(playerid);
	    if (PlayerInfo[playerid][pAdmin] >= 1)
		{
	        if(gPlayerLogged[playerid] == 0)
	        {
        		SendClientMessage(playerid, COLOR_GREY, "Vous devez d'abord vous loggez ! ");
        		return 1;
	        }
	        new x_nr[64];
	        x_nr = strtok(cmdtext, idx);
	        if(!strlen(x_nr))
	        {
	            SendClientMessage(playerid, COLOR_WHITE, "Note: /gotoconcess [nom de concess]");
	            SendClientMessage(playerid, COLOR_WHITE, "Noms Disponibles: luxe");
	            return 1;
	        }
	        if(strcmp(x_nr,"jeep",true) == 0)
	        {
	            if (GetPlayerState(playerid) == 2)
				{
        			SetVehiclePos(tmpcar,1949.1732,2036.4435,10.8130);
					GameTextForPlayer(playerid, "~w~Teleporter", 5000, 1);
					SetPlayerInterior(playerid, 0);
					SetPlayerVirtualWorld(playerid, 0);
				}
				else
				{
					SetPlayerPos(playerid,1949.1732,2036.4435,10.8130);
					GameTextForPlayer(playerid, "~w~Teleporter", 5000, 1);
					SetPlayerInterior(playerid, 0);
					SetPlayerVirtualWorld(playerid, 0);
				}
	        }
	        else if(strcmp(x_nr,"normal",true) == 0)
	        {
	            if (GetPlayerState(playerid) == 2)
				{
					SetVehiclePos(tmpcar,1747.0063,1953.1273,10.8203)
					GameTextForPlayer(playerid, "~w~Teleporter", 5000, 1);
					SetPlayerInterior(playerid, 0);
					SetPlayerVirtualWorld(playerid, 0);
				}
				else
				{
					SetPlayerPos(playerid,1747.0063,1953.1273,10.8203);
					GameTextForPlayer(playerid, "~w~Teleporter", 5000, 1);
					SetPlayerInterior(playerid, 0);
					SetPlayerVirtualWorld(playerid, 0);
				}
	        }
	        else if(strcmp(x_nr,"luxe",true) == 0)
	        {
	            if (GetPlayerState(playerid) == 2)
				{
		    		SetVehiclePos(tmpcar,542.2597,-1282.9371,17.2422);
					GameTextForPlayer(playerid, "~w~Teleporter", 5000, 1);
					SetPlayerInterior(playerid, 0);
					SetPlayerVirtualWorld(playerid, 0);
				}
				else
				{
					SetPlayerPos(playerid,542.2597,-1282.9371,17.2422);
					GameTextForPlayer(playerid, "~w~Teleporter", 5000, 1);
					SetPlayerInterior(playerid, 0);
					SetPlayerVirtualWorld(playerid, 0);
				}
	        }
	        else if(strcmp(x_nr,"soussol",true) == 0)
	        {
	            if (GetPlayerState(playerid) == 2)
				{
					SetVehiclePos(tmpcar,304.3,-1515.5,24.5);
					GameTextForPlayer(playerid, "~w~Teleporter", 5000, 1);
					SetPlayerInterior(playerid, 0);
					SetPlayerVirtualWorld(playerid, 0);
				}
				else
				{
					SetPlayerPos(playerid,304.3,-1515.5,24.5);
					GameTextForPlayer(playerid, "~w~Teleporter", 5000, 1);
					SetPlayerInterior(playerid, 0);
					SetPlayerVirtualWorld(playerid, 0);
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_WHITE, "Mauvais nom de Concess");
	            return 1;
	        }
	    }
	    else
     	{
    		 SendClientMessage(playerid, COLOR_WHITE, "Vous n'êtes pas autorisé à utiliser cette commande!");
     		 return 1;
     	}
	    return 1;
	}
	if(strcmp(cmd, "/renvoie", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Usage: | /renvoie [PlayerID]");
				return 1;
			}
			new plo;
			plo = ReturnUser(tmp);
			if (IsPlayerConnected(plo))
			{
			    if(plo != INVALID_PLAYER_ID)
			    {
					if (PlayerInfo[playerid][pAdmin] >= 1)
					{
							if (GetPlayerState(plo) == 2)
							{
								new tmpcar = GetPlayerVehicleID(plo);
								SetVehiclePos(tmpcar, 1529.6,-1691.2,13.3);
								TelePos[plo][0] = 0.0;TelePos[plo][1] = 0.0;
								LinkVehicleToInterior(tmpcar,0);
								SetVehicleVirtualWorld(tmpcar,0);
							}
							else
							{
								SetPlayerPos(plo, 1529.6,-1691.2,13.3);
								SetPlayerInterior(plo,0);
								SetPlayerVirtualWorld(plo,0);
							}
							SetPlayerInterior(plo,0);
							PlayerInfo[plo][pInt] = 0;
							SendClientMessage(plo, 0xFFFFFFAA, "Vous avez été téléporté a Los Santos.");
					}
					else
					{
						SendClientMessage(playerid, 0xFFFFFFAA, "Vous n'êtes pas autorisé à utiliser cette commande.");
					}
				}
			}
			else
			{
				format(string, sizeof(string), "   %d is not an active player.", plo);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}

//----------------------------------[GOTO]-----------------------------------------------
		if(strcmp(cmd, "/gotols", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pAdmin] >= 3)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 1529.6,-1691.2,13.3);
					TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				}
				else
				{
					SetPlayerPos(playerid, 1529.6,-1691.2,13.3);
				}
				SendClientMessage(playerid, COLOR_GRAD1, "   Vous avez été teleporter !");
				SetPlayerInterior(playerid,0);
				PlayerInfo[playerid][pInt] = 0;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Vous n'êtes pas autoriser a faire cette commande !");
			}
		}
		return 1;
    }
    if(strcmp(cmd, "/gotobanque", true) == 0 || strcmp(cmd, "/gotobank", true) == 0)
   	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pAdmin] >= 2)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 1463.1139,-1022.8700,23.8331);
					TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				}
				else
				{
					SetPlayerPos(playerid, 1463.1139,-1022.8700,23.8331);
				}
				SendClientMessage(playerid, COLOR_GRAD1, "   Vous avez été teleporter !");
				SetPlayerInterior(playerid,0);
				PlayerInfo[playerid][pInt] = 0;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Vous n'êtes pas autoriser a faire cette commande !");
			}
		}
		return 1;
    }
    if(!strcmp(cmdtext, "/gotoanpe", true))
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] >= 2)
	        {
	        	SetPlayerPos(playerid, 1722.8861, -1628.6687, 20.2133);
				SetPlayerInterior(playerid,0);
				PlayerInfo[playerid][pInt] = 0;
  				return 1;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas autorisé à utiliser cette commande.");
			    return 1;
			}
	    }
	    return 1;

	}
	if(!strcmp(cmdtext, "/goto5", true)) // By LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] > 1)
	        {
	        	SetPlayerPos(playerid, 2236.753906, 1101.085815, 33.523437);
				GameTextForPlayer(playerid, "~w~the Castle Death Match",5000,1);
				SetPlayerInterior(playerid,0);
				SetPlayerFacingAngle(playerid, 146.413253);
				PlayerInfo[playerid][pInt] = 0;
  				return 1;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas autorisé à utiliser cette commande.");
			    return 1;
			}
	    }
	    return 1;

	}
	if(!strcmp(cmdtext, "/goto4", true)) // By LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] > 1)
	        {
	        	SetPlayerPos(playerid, 3007.7678,-2087.1711,2.8427);
				GameTextForPlayer(playerid, "~w~Race Map v2",5000,1);
				SetPlayerInterior(playerid,0);
				SetPlayerFacingAngle(playerid, 0);
				PlayerInfo[playerid][pInt] = 0;
  				return 1;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas autorisé à utiliser cette commande.");
			    return 1;
			}
	    }
	    return 1;

	}
	if(!strcmp(cmdtext, "/goto3", true)) // By LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] > 1)
	        {
	        	SetPlayerPos(playerid, 3688.5280761719, -1512.6904296875, 18.651653289795);
				GameTextForPlayer(playerid, "~w~Garage",5000,1);
				SetPlayerInterior(playerid,0);
				SetPlayerFacingAngle(playerid, 0);
				PlayerInfo[playerid][pInt] = 0;
  				return 1;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas autorisé à utiliser cette commande.");
			    return 1;
			}
	    }
	    return 1;

	}
	if(!strcmp(cmdtext, "/goto2", true)) // By LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] > 1)
	        {
	        	SetPlayerPos(playerid, 1386.693,-747.279,139.269);
				GameTextForPlayer(playerid, "~w~House on tree",5000,1);
				SetPlayerInterior(playerid,0);
				SetPlayerFacingAngle(playerid, 0);
				PlayerInfo[playerid][pInt] = 0;
  				return 1;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas autorisé à utiliser cette commande.");
			    return 1;
			}
	    }
	    return 1;

	}
	if(!strcmp(cmdtext, "/goto1", true)) // By LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] > 1)
	        {
	        	SetPlayerPos(playerid, 2533.388671875, -1704.3758544922, 13.261029243469);
				GameTextForPlayer(playerid, "~w~Crack/Ghetto Den",5000,1);
				SetPlayerInterior(playerid,0);
				SetPlayerFacingAngle(playerid, 0);
				PlayerInfo[playerid][pInt] = 0;
  				return 1;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas autorisé à utiliser cette commande.");
			    return 1;
			}
	    }
	    return 1;

	}
		if(!strcmp(cmdtext, "/gotoprison", true)) // By LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] > 1)
	        {
	        	SetPlayerPos(playerid, 952.2607421875, -2797.90234375, 3.01075696);
				GameTextForPlayer(playerid, "~w~Prison",5000,1);
				SetPlayerInterior(playerid,0);
				SetPlayerFacingAngle(playerid, 0);
				PlayerInfo[playerid][pInt] = 0;
  				return 1;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas autorisé à utiliser cette commande.");
			    return 1;
			}
	    }
	    return 1;

	}
	if(strcmp(cmd, "/gotolv", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 1699.2, 1435.1, 10.7);
					TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				}
				else
				{
					SetPlayerPos(playerid, 1699.2,1435.1, 10.7);
				}
				SendClientMessage(playerid, COLOR_GRAD1, "Vous avez été téléporté!");
				SetPlayerInterior(playerid,0);
				PlayerInfo[playerid][pInt] = 0;
			}
			else
			{
				SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé à utiliser cette commande!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/gotosf", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, -1417.0,-295.8,14.1);
					TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				}
				else
				{
					SetPlayerPos(playerid, -1417.0,-295.8,14.1);
				}
				SendClientMessage(playerid, COLOR_GRAD1, "Vous avez été téléporté!");
				SetPlayerInterior(playerid,0);
				PlayerInfo[playerid][pInt] = 0;
			}
			else
			{
				SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé à utiliser cette commande!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/entercar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /entercar [carid]");
				return 1;
			}
			new testcar = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
				PutPlayerInVehicle(playerid, testcar, 1);
				SendClientMessage(playerid, COLOR_GRAD1, "Vous avez été téléporté!");
			}
			else
			{
				SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé à utiliser cette commande!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/gotocar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /gotocar [carid]");
				return 1;
			}
			new testcar = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
				new Float:cwx2,Float:cwy2,Float:cwz2;
				GetVehiclePos(testcar, cwx2, cwy2, cwz2);
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, cwx2, cwy2, cwz2);
					TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				}
				else
				{
					SetPlayerPos(playerid, cwx2, cwy2, cwz2);
				}
				SendClientMessage(playerid, COLOR_GRAD1, "Vous avez été téléporté!");
				SetPlayerInterior(playerid,0);
			}
			else
			{
				SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé à utiliser cette commande!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/mark", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
				GetPlayerPos(playerid, TeleportDest[playerid][0],TeleportDest[playerid][1],TeleportDest[playerid][2]);
				SendClientMessage(playerid, COLOR_GRAD1, "Vous avez été téléporté!");
			}
			else
			{
				SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé à utiliser cette commande!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/gotomark", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, TeleportDest[playerid][0],TeleportDest[playerid][1],TeleportDest[playerid][2]);
					TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				}
				else
				{
					SetPlayerPos(playerid, TeleportDest[playerid][0],TeleportDest[playerid][1],TeleportDest[playerid][2]);
				}
				SendClientMessage(playerid, COLOR_GRAD1, "Vous avez été téléporté!");
				SetPlayerInterior(playerid,0);
			}
			else
			{
				SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé à utiliser cette commande!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/gotoin", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 1416.107000,0.268620,1000.926000);
				}
				else
				{
					SetPlayerPos(playerid, 1416.107000,0.268620,1000.926000);
				}
				SendClientMessage(playerid, COLOR_GRAD1, "Vous avez été téléporté!");
				SetPlayerInterior(playerid,1);
			}
			else
			{
				SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé à utiliser cette commande!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/gotostad", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, -1435.75, -652.664, 1054.94);
				}
				else
				{
					SetPlayerPos(playerid, -1435.75, -652.664, 1054.94);
				}
				SetPlayerInterior(playerid,4);
				SendClientMessage(playerid, COLOR_GRAD1, "Vous avez été téléporté!");
			}
			else
			{
				SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé à utiliser cette commande!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/gotojet", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 1.71875, 30.4062, 1200.34);
				}
				else
				{
					SetPlayerPos(playerid, 1.71875, 30.4062, 1200.34);
				}
				SetPlayerInterior(playerid,1);
				SendClientMessage(playerid, COLOR_GRAD1, "Vous avez été téléporté!");
			}
			else
			{
				SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé à utiliser cette commande!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/goto", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /goto [playerid/PartOfName]");
				return 1;
			}
			new Float:plocx,Float:plocy,Float:plocz;
			new plo;
			plo = ReturnUser(tmp);
			if (IsPlayerConnected(plo))
			{
			    if(plo != INVALID_PLAYER_ID)
			    {
					if (PlayerInfo[playerid][pAdmin] >= 1)
					{
						if(Spectate[playerid] != 255)
						{
							Spectate[playerid] = 256;
						}
						GetPlayerPos(plo, plocx, plocy, plocz);
						if(PlayerInfo[plo][pInt] > 0)
						{
							SetPlayerInterior(playerid,PlayerInfo[plo][pInt]);
							PlayerInfo[playerid][pInt] = PlayerInfo[plo][pInt];
							PlayerInfo[playerid][pLocal] = PlayerInfo[plo][pLocal];
						}
						if(PlayerInfo[playerid][pInt] == 0)
						{
							SetPlayerInterior(playerid,0);
						}
						if(plocz > 530.0 && PlayerInfo[plo][pInt] == 0) //the highest land point in sa = 526.8
						{
							SetPlayerInterior(playerid,1);
							PlayerInfo[playerid][pInt] = 1;
						}
						if (GetPlayerState(playerid) == 2)
						{
							new tmpcar = GetPlayerVehicleID(playerid);
							SetVehiclePos(tmpcar, plocx, plocy+4, plocz);
							TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
						}
						else
						{
							SetPlayerPos(playerid,plocx,plocy+2, plocz);
						}
						SendClientMessage(playerid, COLOR_GRAD1, "Vous avez été téléporté!");
					}
					else
					{
						SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé à utiliser cette commande!");
					}
				}
			}
			else
			{
				format(string, sizeof(string), "L'ID %d n'est pas connecté.", plo);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
//----------------------------------[GETHERE]-----------------------------------------------
	if(strcmp(cmd, "/gethere", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /gethere [playerid/PartOfName]");
				return 1;
			}
			new Float:plocx,Float:plocy,Float:plocz;
			new plo;
			plo = ReturnUser(tmp);
			if (IsPlayerConnected(plo))
			{
			    if(plo != INVALID_PLAYER_ID)
			    {
					/*if (PlayerInfo[plo][pAdmin] > 1337)
					{
						SendClientMessage(playerid, COLOR_GRAD1, "Ask the admin to goto you.");
						return 1;
					}*/
					if (PlayerInfo[playerid][pAdmin] >= 2)
					{
						GetPlayerPos(playerid, plocx, plocy, plocz);
						if(PlayerInfo[playerid][pInt] > 0)
						{
							SetPlayerInterior(plo,PlayerInfo[playerid][pInt]);
							PlayerInfo[plo][pInt] = PlayerInfo[playerid][pInt];
							PlayerInfo[plo][pLocal] = PlayerInfo[playerid][pLocal];
						}
						if(PlayerInfo[playerid][pInt] == 0)
						{
							SetPlayerInterior(plo,0);
						}
						if(plocz > 930.0 && PlayerInfo[playerid][pInt] == 0) //the highest land point in sa = 526.8
						{
							SetPlayerInterior(plo,1);
							PlayerInfo[plo][pInt] = 1;
						}
						if (GetPlayerState(plo) == 2)
						{
							TelePos[plo][0] = 0.0;
							TelePos[plo][1] = 0.0;
							new tmpcar = GetPlayerVehicleID(plo);
							SetVehiclePos(tmpcar, plocx, plocy+4, plocz);
						}
						else
						{
							SetPlayerPos(plo,plocx,plocy+2, plocz);
						}
						SendClientMessage(plo, COLOR_GRAD1, "Vous avez été téléporté!");
					}
					else
					{
						SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé à utiliser cette commande!");
					}
				}
			}
			else
			{
				format(string, sizeof(string), "L'ID %d n'est pas connecté.", plo);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/getcar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /getcar [carid]");
				return 1;
			}
			new Float:plocx,Float:plocy,Float:plocz;
			new plo;
			plo = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
				GetPlayerPos(playerid, plocx, plocy, plocz);
				SetVehiclePos(plo,plocx,plocy+4, plocz);
			}
			else
			{
				SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé à utiliser cette commande!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/oldcar", true) == 0 || strcmp(cmd, "/oldveh", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    format(string, sizeof(string), "Votre dernière voiture est: %d",gLastCar[playerid]);
		    SendClientMessage(playerid, COLOR_GREY, string);
	    }
	    return 1;
	}
	if(strcmp(cmd, "/essencecars", true) == 0 || strcmp(cmd, "/fuelcars", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] >= 3)
	        {
	            for(new c=0;c<CAR_AMOUNT;c++)
				{
					Gas[c] = GasMax;
				}
				SendClientMessage(playerid, COLOR_GREY, "Les réservoirs de toutes les voitures on été remplis! ");
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas autorisé à utiliser cette commande!");
	            return 1;
	        }
	    }
	    return 1;
	}
//----------------------------------[GiveGun]------------------------------------------------
	if(strcmp(cmd, "/donnergun", true) ==0 || strcmp(cmd, "/givegun", true) == 0 || strcmp(cmd, "/donnerarme", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /donnerarme [playerid/PartOfName] [idarme(eg. 46 = Parachute)] [munition]");
				return 1;
			}
			new playa;
			new gun;
			new ammo;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			gun = strval(tmp);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /donnerarme [playerid/PartOfName] [idarme] [munition]");
				SendClientMessage(playerid, COLOR_GRAD4, "3(Club) 4(Couteau) 5(bat) 6(Shovel) 7(Cue) 8(Katana) 10-13(Dildo) 14(Flowers) 16(Grenades) 18(Molotovs) 22(Pistol) 23(SPistol)");
				SendClientMessage(playerid, COLOR_GRAD3, "24(Eagle) 25(shotgun) 29(MP5) 30(AK47) 31(M4) 33(Rifle) 34(Sniper) 37(Flamethrower) 41(spray) 42(exting) 43(Camera) 46(Parachute)");
				return 1;
			}
			if(gun < 1||gun > 46||gun==27||gun==1||gun==2||gun==9||gun==17||gun==19||gun==20||gun==21||gun==35||gun==36||gun==39||gun==40||gun==44||gun==45)
			{ SendClientMessage(playerid, COLOR_GRAD1, "Mauvais id d'arme!"); return 1; }
			tmp = strtok(cmdtext, idx);
			ammo = strval(tmp);
			if(ammo <1||ammo > 9999)
			{ SendClientMessage(playerid, COLOR_GRAD1, "Vous ne pouvez pas mettre les munition en dessous de 1 et au desus de 999!"); return 1; }
			if (PlayerInfo[playerid][pAdmin] >= 1339)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
						SafeGivePlayerWeapon(playa, gun, ammo);
						GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, 256, "%s à donné à %s l'arme %d.", sendername,giveplayer,gun);
						ABroadCast(COLOR_YELLOW,string,1);
						format(string, sizeof(string), "L'Admin %s vous à donné une arme!",sendername);
						SendClientMessage(playa, COLOR_WHITE, string);
						format(string, sizeof(string), "Vous avez donné une arme à %s.", giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé à utiliser cette commande!");
			}
		}
		return 1;
	}
//----------------------------------[sethp]------------------------------------------------
 	if(strcmp(cmd, "/donnervie", true) == 0 || strcmp(cmd, "/donnersante", true) == 0 || strcmp(cmd, "/sethp", true) == 0 || strcmp(cmd, "/mettrevie", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /donnervie [playerid/PartOfName] [vie]");
				return 1;
			}
			new playa;
			new health;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			health = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
						SetPlayerHealth(playa, health);
						GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, 256, "%s à mis la vie de %s à %d.", sendername,giveplayer,health);
						ABroadCast(COLOR_YELLOW,string,1);
						format(string, sizeof(string), "L'Admin %s vous à mis votre vie à %d!",sendername, health);
						SendClientMessage(playa, COLOR_WHITE, string);
						format(string, sizeof(string), "Vous avez mis la vie du joueur %s à %d!", giveplayer, health);
						SendClientMessage(playerid, COLOR_WHITE, string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé à utiliser cette commande!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/setarmor", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /setarmor [playerid/PartOfName] [amure]");
				return 1;
			}
			new playa;
			new health;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			health = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
						SetPlayerArmour(playa, health);
						GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, 256, "%s à mis la vide de %s à %d.", sendername,giveplayer,health);
						ABroadCast(COLOR_YELLOW,string,1);
						format(string, sizeof(string), "L'Admin %s vous à mis votre armure à %d!",sendername, health);
						SendClientMessage(playa, COLOR_WHITE, string);
						format(string, sizeof(string), "Vous avez mis la armure du joueur %s à %d!", giveplayer, health);
						SendClientMessage(playerid, COLOR_WHITE, string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé à utiliser cette commande!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/setage", true) == 0 || strcmp(cmd, "/changerage", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /changerage [playerid/PartOfName] [age]");
				return 1;
			}
			new playa;
			new age;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			age = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
						PlayerInfo[playa][pAge] = age;
						GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, 256, "%s à mis l'âge de %s à %d.", sendername,giveplayer,age);
						ABroadCast(COLOR_YELLOW,string,1);
						format(string, sizeof(string), "L'Admin %s vous à mis votre âge à %d!",sendername, age);
						SendClientMessage(playa, COLOR_WHITE, string);
						format(string, sizeof(string), "Vous avez mis l'âge du joueur %s à %d!", giveplayer, age);
						SendClientMessage(playerid, COLOR_WHITE, string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé à utiliser cette commande!");
			}
		}
		return 1;
	}/*
	if(strcmp(cmd, "/spawnveh", true) == 0 || strcmp(cmd, "/veh", true) == 0)
	{
	    if(!(PlayerInfo[playerid][pAdmin] >= 4))
			return SendClientMessage(playerid, COLOR_GRAD1, "You are not authorized to use this command.");

	    tmp = strtok(cmdtext, idx);
	    if(!strlen(tmp))
	        return SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /veh [vehicle name/ID] [color1(optional)] [color2(optional)] [respawnable(optional)]");

		new car = ReturnVehicleModelID(tmp);
		if(!car)
			return SendClientMessage(playerid, COLOR_GREY, "   Invalid vehicle model name/ID.");

	    new color1, color2;
	    tmp = strtok(cmdtext, idx);
	    if(!strlen(tmp))
		{
	        color1 = -1;
	        color2 = -1;
		}
		else
		{
			color1 = strval(tmp);
			if(color1 < -1 || color1 > 200)
				return SendClientMessage(playerid, COLOR_GREY, "   Enter a valid color [0-200]");

	    	tmp = strtok(cmdtext, idx);
	    	if(!strlen(tmp)) color2 = color1;
	    	else color2 = strval(tmp);
	    	if(color2 < -1 || color2 > 200)
				return SendClientMessage(playerid, COLOR_GREY, "   Enter a valid color [0-200]");
		}

		if(IsPlayerInAnyVehicle(playerid))
		    RemovePlayerFromVehicle(playerid);
 		new	Float:X, Float:Y, Float:Z, Float:A;
        GetPlayerPos(playerid, X,Y,Z);
		GetPlayerFacingAngle(playerid,A);
		new carid = CreateVehicle(car, X,Y,Z,A, color1, color2, -1);

	    tmp = strtok(cmdtext, idx);
	    if(strval(tmp) != 1)
	    {
	        gDestroyVehicle[carid] = 1;
		}
		gCarLock[carid] = 0;
		PutPlayerInVehicle(playerid,carid,0);
		LinkVehicleToInterior(carid,GetPlayerInterior(playerid));
		for(new i = 0; i < sizeof(CreatedCars); i++)
		{
		    if(CreatedCars[i] == INVALID_VEHICLE_ID)
		    {
		        CreatedCars[i] = carid;
				break;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/listcars", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(!(PlayerInfo[playerid][pAdmin] >= 4))
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "You are not authorized to use this command.");
			    return 1;
			}
			new createdcarcount;
			for(new i = 0; i < sizeof(CreatedCars); i++)
			{
			    if(CreatedCars[i] != INVALID_VEHICLE_ID)
			    {
			        createdcarcount = 1;
			        format(string,sizeof(string),"(%d) %s",CreatedCars[i],VehicleNames[GetVehicleModel(CreatedCars[i])-400]);
			        SendClientMessage(playerid,COLOR_GREY,string);
				}
			}
			if(createdcarcount != 1)
			{
			    SendClientMessage(playerid,COLOR_GREY,"No vehicles created.");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/destroycar", true)== 0)
	{
	    if(PlayerInfo[playerid][pAdmin] >= 4)
	    {
	        new currentVehicle = GetPlayerVehicleID(playerid);
            if(currentVehicle == 0) return SendClientMessage(playerid,COLOR_GREY, "You must be in a vehicle to destroy it.");
            new check;
            for(new i = 0; i < sizeof(CreatedCars); i++)
			{
				if(CreatedCars[i] == currentVehicle)
				{
				    check = 1;
				    CreatedCars[i] = INVALID_VEHICLE_ID;
				    break;
				}
			}
			if(!check) return SendClientMessage(playerid, COLOR_GRAD1, "You may only destroy a vehicle that was created with /veh.");

	        gDestroyVehicle[currentVehicle] = 1;
			SetVehicleToRespawn(currentVehicle);
	        return 1;
		}
		else
		{
            SendClientMessage(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
		}
	}
	if(strcmp(cmd, "/byecars", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        new vehcount = 0;
	        for(new i = 0; i < sizeof(CreatedCars); i++)
			{
				if(CreatedCars[i] != INVALID_VEHICLE_ID)
				{
				    vehcount++;
				    gDestroyVehicle[CreatedCars[i]] = 1;
					SetVehicleToRespawn(CreatedCars[i]);
					CreatedCars[i] = INVALID_VEHICLE_ID;
				}
			}
	        return 1;
		}
		return 1;
	}*/
	if(strcmp(cmd, "/nohospital", true) == 0 || strcmp(cmd, "/nohopital", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] >= 3)
	        {
		        if(!NoHospital[playerid])
		        {
		            NoHospital[playerid] = 1;
					SendClientMessage(playerid, COLOR_GREY, "   Vous avez activé le mode nohospital !");
		        }
		        else
		        {
		            NoHospital[playerid] = 0;
					SendClientMessage(playerid, COLOR_GREY, "   Vous avez désactivé le mode nohospital !");
		        }
			}
			else
	        {
	            SendClientMessage(playerid, COLOR_GRAD1, "   You are not authorized to use that command !");
	        }
	    }
	    return 1;
	}
	if(strcmp(cmd, "/meteo", true) == 0 || strcmp(cmd, "/weather", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] < 3)
			{
			    SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé à utiliser cette commande!");
			    return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /meteo [MeteoID]");
		    	SendClientMessage(playerid, COLOR_GRAD4, "0-7 (Cieux Bleu) 08 (Orageux) 09 (H. Brumeux) 32 (L. Brumeux) 10 (Ciel Bleu) 11 (Journée Extrèmement Chaude)");
				SendClientMessage(playerid, COLOR_GRAD3, "12-15 (Cieux Brumeux) 16 (Orageux) 17-18 (Journée Extrèmement Chaude) 19 (L. Tempete de Sable)");
				SendClientMessage(playerid, COLOR_GRAD3, "42 (H. Tempete de Sable) 20 (Ciel Noir)");
			    return 1;
			}
			new weather;
			weather = strval(tmp);
			if(weather < 0||weather > 45) { SendClientMessage(playerid, COLOR_GREY, "L'ID de la meteo doit être compris entre 1 et 45!"); return 1; }
			SetWeather(weather);
			SendClientMessage(playerid, COLOR_GREY, "Meteo changée!");
			GetPlayerName(playerid, sendername, sizeof(sendername));
       		format(string, 256, "%s à mis la météo à %d.", sendername,weather);
			ABroadCast(COLOR_YELLOW,string,1);
			DefaultWeather = weather;
		}
		return 1;
	}
	if(strcmp(cmd, "/noweather", true) == 0 || strcmp(cmd, "/nometeo", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			SetPlayerWeather(playerid, 13);
			SendClientMessage(playerid, COLOR_GREY, "   Vous avez remis la météo par défaut !");

		}
		return 1;
	}
//----------------------------------[Money]------------------------------------------------
	if(strcmp(cmd, "/money", true) == 0 || strcmp(cmd, "/argent", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /argent [playerid/PartOfName] [argent]");
				return 1;
			}
			new playa;
			new money;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			money = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1339)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
						SafeResetPlayerMoney(playa);
						//ConsumingMoney[playa] = 1;
						SafeGivePlayerMoney(playa, money);
						GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, 256, "%s à mis l'argent de %s à $%d.", sendername,giveplayer,money);
						ABroadCast(COLOR_YELLOW,string,1);
						format(string, sizeof(string), "L'Admin %s vous à mis votre argent à %d!",sendername, money);
						SendClientMessage(playa, COLOR_WHITE, string);
						format(string, sizeof(string), "Vous avez mis l'argent du joueur %s à %d!", giveplayer, money);
						SendClientMessage(playerid, COLOR_WHITE, string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé à utiliser cette commande!");
			}
		}
		return 1;
	}
//----------------------------------[GiveMoney]------------------------------------------------
	if(strcmp(cmd, "/donnerargent", true) ==0 || strcmp(cmd, "/givemoney", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /donnerargent ou /givemoney [playerid/PartOfName] [argent]");
				return 1;
			}
			new playa;
			new money;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			money = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1339)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
			            //ConsumingMoney[playa] = 1;
						SafeGivePlayerMoney(playa, money);
						GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, 256, "%s à donné à %s $%d en tant qu'admin.", sendername,giveplayer,money);
						ABroadCast(COLOR_YELLOW,string,1);
						format(string, sizeof(string), "L'Admin %s vous à donné de l'argent (%d)!",sendername, money);
						SendClientMessage(playa, COLOR_WHITE, string);
						format(string, sizeof(string), "Vous avez donné de l'argent au joueur %s (%d)!", giveplayer, money);
						SendClientMessage(playerid, COLOR_WHITE, string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé à utiliser cette commande!");
			}
		}
		return 1;
	}
//-----------------------------------[Slap]-----------------------------------------------
	if(strcmp(cmd, "/slap", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /slap [playerid/PartOfName]");
				return 1;
			}
			new playa;
			new Float:shealth;
			new Float:slx, Float:sly, Float:slz;
			playa = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >=1)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
				        GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						GetPlayerHealth(playa, shealth);
						SetPlayerHealth(playa, shealth-5);
						GetPlayerPos(playa, slx, sly, slz);
						SetPlayerPos(playa, slx, sly, slz+5);
						PlayerPlaySound(playa, 1130, slx, sly, slz+5);
						printf("%s à slappé %s",sendername,  giveplayer);
						format(string, sizeof(string), "%s à été slappé par %s",giveplayer ,sendername);
						BroadCast(COLOR_LIGHTRED,string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé à utiliser cette commande!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/superslap", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /superslap [playerid/PartOfName]");
				return 1;
			}
			new playa;
			new Float:shealth;
			new Float:slx, Float:sly, Float:slz;
			playa = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >=2)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
				        GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						GetPlayerHealth(playa, shealth);
						SetPlayerHealth(playa, shealth-10);
						GetPlayerPos(playa, slx, sly, slz);
						SetPlayerPos(playa, slx, sly, slz+10);
						PlayerPlaySound(playa, 1130, slx, sly, slz+10);
						printf("%s à super slappé %s",sendername,  giveplayer);
						format(string, sizeof(string), "%s à été super-slappé par %s",giveplayer ,sendername);
						BroadCast(COLOR_LIGHTRED,string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé à utiliser cette commande!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/mute", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /mute [playerid/PartOfName]");
				return 1;
			}
			new playa;
			playa = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
					    GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						if(PlayerInfo[playa][pMuted] == 0)
						{
							PlayerInfo[playa][pMuted] = 1;
							printf("%s à muté %s",sendername,  giveplayer);
							format(string, sizeof(string), "%s à été mutté par %s",giveplayer ,sendername);
							ABroadCast(COLOR_LIGHTRED,string,1);
						}
						else
						{
							PlayerInfo[playa][pMuted] = 0;
							printf("%s unsilenced %s",sendername,  giveplayer);
							format(string, sizeof(string), "%s à été démutté par %s",giveplayer ,sendername);
							ABroadCast(COLOR_LIGHTRED,string,1);
						}
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé à utiliser cette commande!");
			}
		}
		return 1;
	}
    if(strcmp(cmd, "/muteooc", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /muteooc [playerid/PartOfName]");
				return 1;
			}
			new playa;
			playa = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
					    GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						if(PlayerInfo[playa][pMutedOOC] == 0)
						{
							PlayerInfo[playa][pMutedOOC] = 1;
							printf("%s à muté OOC %s",sendername,  giveplayer);
							format(string, sizeof(string), "%s à été mutté OOC par %s",giveplayer ,sendername);
							ABroadCast(COLOR_LIGHTRED,string,1);
						}
						else
						{
							PlayerInfo[playa][pMutedOOC] = 0;
							printf("%s à démutté OOC %s",sendername,  giveplayer);
							format(string, sizeof(string), "%s à été démutté OOC par %s",giveplayer ,sendername);
							ABroadCast(COLOR_LIGHTRED,string,1);
						}
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé à utiliser cette commande!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/warn", true) == 0 || strcmp(cmd, "/avertir", true) == 0 || strcmp(cmd, "/avertissement", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "[Usage:] /warn [Playerid/PartOfName] [Raison]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
			    if(IsPlayerConnected(giveplayerid))
			    {
			        if(giveplayerid != INVALID_PLAYER_ID)
			        {
						new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[128];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
						if(!strlen(result))
						{
							SendClientMessage(playerid, COLOR_WHITE, "[Usage:] /warn [Playerid/PartOfName] [Raison]");
							return 1;
						}
						PlayerInfo[giveplayerid][pWarnings] += 1;
						if(PlayerInfo[giveplayerid][pWarnings] >= 5)
						{
							format(string, sizeof(string), "[WARN:] %s a été banni. Raison : + de 5 warnings", GetPlayerNameEx(giveplayerid));
				        	SendClientMessage(giveplayerid, COLOR_RED, "Tu as été banni pour avoir obtenu plus de 5 avertissements. Toutes demandes d'unban sur : http://u2c-rp.forum-pro.fr");
							Ban(giveplayerid);
							BanLog(string);
							//LockPlayerAccount(giveplayerid,GetPlayerNameEx(playerid),(result));
							return 1;
						}
						format(string, sizeof(string), "[WARN:] Vous avez donné un avertissement a %s. Raison: %s", GetPlayerNameEx(giveplayerid), (result));
						SendClientMessage(playerid, COLOR_LIGHTRED, string);
						format(string, sizeof(string), "[WARN:] Vous avez reçu un avertissement par l'Admin %s. Raison: %s", GetPlayerNameEx(playerid), (result));
						SendClientMessage(giveplayerid, COLOR_LIGHTRED, string);
						format(string, sizeof(string), "%s a reçu un avertissement par l'Admin %s. Raison: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), (result));
						SendClientMessageToAll(COLOR_LIGHTRED, string);
						return 1;
					}
				}//not connected
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "[Erreur:] Invalide ID/Nom");
			}
		}
		return 1;
    }
    	if(strcmp(cmd, "/unwarn", true) == 0 || strcmp(cmd, "/supprimeravertissement", true) == 0 || strcmp(cmd, "/enleveravertissement", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "[Usage:] /unwarn [Playerid/PartOfName] [Raison]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 2)
			{
			    if(IsPlayerConnected(giveplayerid))
			    {
			        if(giveplayerid != INVALID_PLAYER_ID)
			        {
						new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[128];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
						if(!strlen(result))
						{
							SendClientMessage(playerid, COLOR_WHITE, "[Usage:] /unwarn [Playerid/PartOfName] [Raison]");
							return 1;
						}
						PlayerInfo[giveplayerid][pWarnings] -= 1;
						format(string, sizeof(string), "[WARN:] Vous avez enlevé un avertissement a %s. Raison: %s", GetPlayerNameEx(giveplayerid), (result));
						SendClientMessage(playerid, COLOR_LIGHTRED, string);
						format(string, sizeof(string), "[WARN:] L'Admin %s vous a supprimé un avertissement. Raison: %s", GetPlayerNameEx(playerid), (result));
						SendClientMessage(giveplayerid, COLOR_LIGHTRED, string);
						format(string, sizeof(string), "L'Admin %s a supprimé un avertissement a %s. Raison: %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), (result));
						SendClientMessageToAll(COLOR_LIGHTRED, string);
						return 1;
					}
				}//not connected
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "[Erreur:] Invalide ID/Nom");
			}
		}
		return 1;
    }
    /*----------------------------------[Lock Player]-----------------------------*/
	if(strcmp(cmd, "/fermercompte", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
            if(PlayerInfo[playerid][pAdmin] >= 4)
            {
                tmp = strtok(cmdtext, idx);
                new punnish;
                punnish = ReturnUser(tmp);
                if(PlayerInfo[punnish][pLocked] == 1)
                {
                    GetPlayerName(playerid, playername, sizeof(playername));
                    GetPlayerName(punnish, giveplayer, sizeof(giveplayer));
                    format(string, sizeof(string), " %s a dévérouillé votre compte.",playername);
                    SendClientMessage(punnish, COLOR_LIGHTRED, string);
                    format(string, sizeof(string), " %s a dévérouillé le compte de %s.",playername, giveplayer);
                    ABroadCast(COLOR_YELLOW, string, 1);
                    PlayerInfo[punnish][pLocked] = 0;
                    TogglePlayerControllable(punnish, 1);
                    return 1;
                }
                else if(PlayerInfo[punnish][pLocked] == 0)
                {
                    if(PlayerInfo[punnish][pAdmin] >= 1)
	                {
	                    SendClientMessage(playerid,COLOR_GREY, " Vous ne pouvez pas vérouillé le compte d'un Admin.");
	                    return 1;
	                }
                    GetPlayerName(playerid, playername, sizeof(playername));
                    GetPlayerName(punnish, giveplayer, sizeof(giveplayer));
                    format(string, sizeof(string), " %s a vérouillé votre compte, vous ne pouvez a présent plus rien faire.",playername);
                    SendClientMessage(punnish, COLOR_LIGHTRED, string);
                    format(string, sizeof(string), " %s a vérouillé le compte de %s.",playername, giveplayer);
                    ABroadCast(COLOR_YELLOW, string, 1);
                    PlayerInfo[punnish][pLocked] = 1;
                    TogglePlayerControllable(punnish, 0);
                    return 1;
                }
            }
            else
            {
                SendClientMessage(playerid, COLOR_GRAD1, "   You are not authorized to use that command!");
            }
        }
    }
//-----------------------------------[Force tutorial]-------------------------------------
    if(strcmp(cmd, "/learn", true) == 0 || strcmp(cmd, "/tuto", true) == 0 || strcmp(cmd, "/tutorial", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
   			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /learn [playerid/PartOfName]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new year, month,day;
						getdate(year, month, day);
						format(string, sizeof(string), "%s s'est fait explusé de l'état par %s, il doit reprendre le tutoriel.(%d-%d-%d)", sendername,giveplayer,day,month,year);
      					KickLog(string);
      					PlayerInfo[giveplayerid][pTut] = 0;
						format(string, sizeof(string), "Vous avez été expulsé de Los Santos. Vous devez reprendre le turoriel.");
						SendClientMessage(giveplayerid,COLOR_LIGHTRED,string);
						Kick(giveplayerid);
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, 256, "%s à kické %s et l'à forcé à relire le tutoriel.", sendername,giveplayer);
						SendClientMessageToAll(COLOR_LIGHTRED, string);
						return 1;
					}
				}
			}
			else
			{
				format(string, sizeof(string), "L'ID %d n'est pas connecté.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
//----------------------------------[Name kick]------------------------------------------------
    if(strcmp(cmd, "/name", true) == 0 || strcmp(cmd, "/nom", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /nom [playerid/PartOfName]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "%s à été kické par %s (Nom ne respectant pas la forme Prénom_Nom ou NO-RP)", giveplayer, sendername);
						SendAdminMessage(COLOR_YELLOW, string);
						format(string, sizeof(string), "Vous avez été kické par %s pour Nom qui ne respectait pas la forme Prénom_Nom", sendername);
						format(string, sizeof(string), "Prenez un nom RolePlay comme par exemple : Martin_Dubois", sendername);
						SendClientMessage(giveplayerid, COLOR_LIGHTRED, string);
				        Kick(giveplayerid);
				    }
				}
			}
			else
			{
				format(string, sizeof(string), "L'ID %d n'est pas connecté.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
    if(strcmp(cmd, "/changernom", true) == 0 || strcmp(cmd, "/changename", true) == 0 || strcmp(cmd, "/changern", true) == 0)
	//if(strcmp(cmd, "/changernom", true) == 0)
	{
	    GetPlayerName(playerid, sendername, sizeof(sendername));
		new tmpp[256];
		tmpp = strtok(cmdtext, idx);
		if(!strlen(tmpp))
		{
			SendClientMessage(playerid, COLOR_DBLUE, "USAGE: /changernom [playerid] [nouveau Nom (Prenom_Nom)]");
			return 1;
		}
		giveplayerid = strval(tmpp);
		tmp = strtok(cmdtext, idx);
		GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(IsPlayerConnected(playerid))
		{
		    if(PlayerInfo[playerid][pAdmin] >= 1339)
		    {
		        if(IsPlayerConnected(giveplayerid))
		        {
					SetPlayerName(giveplayerid, tmp);
					format(string, sizeof(string), "%s(%i) a changé votre nom en %s", sendername, playerid, tmp);
					SendClientMessage(giveplayerid, COLOR_DBLUE, string);
					format(string, sizeof(string), "Vous avez changé le nom de l'ID %i en %s", giveplayerid, tmp);
					SendClientMessage(playerid, COLOR_DBLUE, string);
					format(string, 256, "%s à changé le nom de %s en %s.", sendername,giveplayer, tmp);
					ABroadCast(COLOR_YELLOW,string,1);
				}
				else
				{
				    format(string, sizeof(string), "L'ID %d n'est pas connecté.", giveplayerid);
					SendClientMessage(playerid, COLOR_RED, string);
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_RED, "Vous n'êtes pas autorisé a utiliser cette commande!");
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_RED, "Vous devez être connecté!");
		}
	  	return 1;
	}
//-----------------------------------[Admin reparer autre]----------------
    if(strcmp(cmd, "/setcarhp", true) == 0 || strcmp(cmd, "/mettrevoiturehp", true) == 0 || strcmp(cmd, "/mettrehpvoiture", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Usage: | /setcarhp [vehicleid] [health]");
				return 1;
			}
			new playa;
			new health;
			playa = strval(tmp);
			tmp = strtok(cmdtext, idx);
			health = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] < 4)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "You are not authorised to use that command.");
			    return 1;
			}
			if(playa < 0 || playa > 2000) { SendClientMessage(playerid, COLOR_GREY, "   Cannot be below 0, and not more then 2000."); return 1; }
			if(health < 0 || health > 99999) { SendClientMessage(playerid, COLOR_GREY, "   Cannot be below 0, and not more then 99999."); return 1; }
			SetVehicleHealth(playa,health);
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, 256, "Warning: | %s a mis la vie (HP) de la voiture de %d a %d.", sendername,playa,health);
			ABroadCast(COLOR_YELLOW,string,1);
		}
		return 1;
	}
    if(strcmp(cmd,"/setgas",true) == 0) { //for testing gas cans
	    if(PlayerInfo[playerid][pAdmin]<2) {
			SendClientMessage(playerid,COLOR_GRAD2,"Permission Denied.");
	        return 1;
	    }
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Usage: | /setgas [amount]");
			return 1;
		}
		if (!IsPlayerInAnyVehicle(playerid))
		{
			SendClientMessage(playerid,COLOR_GREY,"You must be inside a vehicle.");
			return 1;
		}
		playermoney=strval(tmp);
		Gas[idcar]=playermoney;
		SendClientMessage(playerid,COLOR_GRAD2,"Gas Changed.");
	    return 1;
	}
	if(strcmp(cmd,"/getgas",true) == 0) { //for testing gas cans
	    if(PlayerInfo[playerid][pAdmin]<9) {
			SendClientMessage(playerid,COLOR_GRAD2,"Permission Denied.");
	        return 1;
	    }
		if (!IsPlayerInAnyVehicle(playerid))
		{
			SendClientMessage(playerid,COLOR_GREY," You must be inside a vehicle.");
			return 1;
		}
		format(sendername,sizeof(sendername),"Gas: %i",Gas[idcar]);
		SendClientMessage(playerid,COLOR_GRAD2,sendername);
	    return 1;
	}
	if(strcmp(cmdtext,"/areparer",true) == 0 || strcmp(cmdtext,"/fixveh",true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
   			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
				new getv;
				getv = GetPlayerVehicleID(playerid);
				if(IsPlayerInAnyVehicle(playerid))
				{
					SetVehicleHealth(getv,1000.0);
					RepairVehicle(getv);
					PlayerPlaySound(playerid, 1056, 0, 0, 0);
					SendClientMessage(playerid,COLOR_WHITE,"Vous venez de reparer ce véhicule.");
				}
				else
				{
					SendClientMessage(playerid,COLOR_GRAD1,"Vous n'étes pas dans un véhicule.");
				}
			}
            else
			{
                SendClientMessage(playerid,COLOR_GRAD1,"Vous n'étes pas autorisé a utilisé cette commande.");
			}
        }
		else
		{
		    SendClientMessage(playerid, COLOR_RED, "Vous devez être connecté pour utiliser cette commande.");
		}
	  	return 1;
	}
    if(strcmp(cmdtext,"/areparera",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
   			if (PlayerInfo[playerid][pAdmin] >= 2)
			{
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /areparera [playerid/PartOfName]");
					return 1;
				}
				new getv2;
				new playa;
				playa = ReturnUser(tmp);
				tmp = strtok(cmdtext, idx);
				getv2 = GetPlayerVehicleID(playa);
				if(IsPlayerInAnyVehicle(playa))
				{
				    if(playa != INVALID_PLAYER_ID)
			        {
			            GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						SetVehicleHealth(getv2,1000.0);
						RepairVehicle(getv2);
						PlayerPlaySound(playa, 1056, 0, 0, 0);
						format(string, sizeof(string), "L'Admin %s vient de reparer votre véhicule.",sendername);
						SendClientMessage(playa, COLOR_WHITE, string);
	    				format(string, sizeof(string), "Vous avez reparer le véhicule de %s.",giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
					}
				}
				else
				{
					SendClientMessage(playerid,COLOR_GRAD1,"Ce joueur n'est pas dans son véhicule.");
				}
			}
            else
			{
                SendClientMessage(playerid,COLOR_GRAD1,"Vous n'étes pas autorisé a utilisé cette commande.");
			}
        }
		else
		{
		    SendClientMessage(playerid, COLOR_RED, "Vous devez être connecté pour utiliser cette commande.");
		}
	  	return 1;
	}
//---------------------------------------------[Kick]-----------------------------------------------------
    if(strcmp(cmd, "/kick", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /kick [playerid/PartOfName] [raison]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[64];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
						if(!strlen(result))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /kick [playerid/PartOfName] [raison]");
							return 1;
						}
						new year, month,day;
						getdate(year, month, day);
						format(string, sizeof(string), "%s à été kické par l'Admin %s. Raison: %s (%d-%d-%d)", giveplayer, sendername, (result),month,day,year);
						KickLog(string);
						format(string, sizeof(string), "%s à été kické par l'Admin %s. Raison: %s", giveplayer, sendername, (result));
						SendClientMessageToAll(COLOR_LIGHTRED, string);
						Kick(giveplayerid);
						return 1;
					}
				}
			}
			else
			{
				format(string, sizeof(string), "L'ID %d n'est pas connecté.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/skick", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /skick [playerid/PartOfName]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 2)
			{
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        Kick(giveplayerid);
				    }
				}
			}
			else
			{
				format(string, sizeof(string), "L'ID %d n'est pas connecté.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/epp", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /epp [playerid/PartOfName]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        if(PlayerInfo[playerid][pAdmin] == 1)
				        {
					     	format(string, sizeof(string), "%s à été kické. Raison: EPP (Error Processing Player)", giveplayer);
						    SendClientMessageToAll(COLOR_LIGHTRED, string);
				        	format(string, 256, "Error Processing Player",playerid);
							Kick(giveplayerid);
							KickLog(string);
						}
						else
						{
						    format(string, 256, "Error Processing Player",playerid);
							Kick(giveplayerid);
							KickLog(string);
						}
				    }
				}
			}
			else
			{
				format(string, sizeof(string), "   L'ID %d n'est pas connecté.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
	/*----------------------------------[Sban]------------------------------------*/
	if(strcmp(cmd, "/sban", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /sban [playerid/PartOfName] [reason]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[64];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
						if(!strlen(result))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /sban [playerid/PartOfName] [raison]");
							return 1;
						}
						new ipaddress[16];
						GetPlayerIp(giveplayerid,ipaddress,sizeof(ipaddress));
						new BannedReason[126];
						format(BannedReason, sizeof(BannedReason), "Banni. Raison: %s", (result));
						BanLog(string);
						PlayerInfo[giveplayerid][pLocked] = 1;
                        Ban(giveplayerid);
                        Kick(giveplayerid);
						return 1;
						}
				}
			}
			else
			{
				format(string, sizeof(string), "  L'ID %d n'est pas connecté.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
//---------------------------------------[/pos]-----------------------
	if(strcmp(cmd, "/pos", true) == 0)
	{
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' '))
		{
			idx++;
		}
		new offset = idx;
		new result[64];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
		{
			result[idx - offset] = cmdtext[idx];
			idx++;
		}
		result[idx - offset] = EOS;
		if(!strlen(result))
		{
			SendClientMessage(playerid, COLOR_YELLOW, "USAGE: /pos [commentaire]");
			return 1;
		}
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 1339)
		{
			new Float:px, Float:py, Float:pz;
			GetPlayerPos(playerid, px, py, pz);
			SendClientMessage(playerid, COLOR_YELLOW, "Position sauvegardée");
			new coordsstring[256];
			format(coordsstring, 256, "%.1f,%.1f,%.1f,%.1f // %s\n", px, py, pz,z_angle,result);
			new File:hFile;
			hFile = fopen("Pos.txt", io_append);
			fwrite(hFile, coordsstring);
			fclose(hFile);

		}
		return 1;
}
//--------------------------------------[Ban]----------------------------------------------------
	if(strcmp(cmd, "/ban", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /ban [playerid/PartOfName] [Raison]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
			    if(IsPlayerConnected(giveplayerid))
			    {
			        if(giveplayerid != INVALID_PLAYER_ID)
			        {
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[64];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
						if(!strlen(result))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /ban [playerid/PartOfName] [raison]");
							return 1;
						}
						new year, month,day;
						getdate(year, month, day);
						format(string, sizeof(string), "%s a été banni par l'Admin %s. Raison: %s (%d-%d-%d)", giveplayer, sendername, (result),month,day,year);
						BanLog(string);
						format(string, sizeof(string), "%s a été banni par l'Admin %s. Raison: %s", giveplayer, sendername, (result));
						SendClientMessageToAll(COLOR_LIGHTRED, string);
						PlayerInfo[giveplayerid][pLocked] = 1;
                        Ban(giveplayerid);
						return 1;
					}
				}//not connected
			}
			else
			{
				format(string, sizeof(string), "   %d Est un joueur inactif.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}

	if(strcmp( cmd, "/localisation", true ) == 0)
	{
		if(!(PlayerInfo[playerid][pAdmin] >= 1339))
		{
		    return 0;
		}
		tmp = strtok(cmdtext, idx);
		if(strlen(tmp) == 0)
		{
		    return SendClientMessage(playerid,COLOR_GREEN,"/localisation <id>");
		}
		new id = strval(tmp);
		if(!IsPlayerConnected(id))
		{
			return SendClientMessage(playerid,COLOR_GREEN,"Pas connecté");
		}
		SetPlayerMarkerForPlayer(playerid, id,COLOR_BLUE);
		SendClientMessage(playerid,COLOR_GREEN,"Localisé, Monsieur L'Admin");
		return 1;
	}
	if(strcmp(cmd, "/gcam", true) == 0 || strcmp(cmd, "/radar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			{
				{
                    if (PlayerInfo[playerid][pAdmin] <= 1337)
	                {
	            	    SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas autorisé a utiliser cette commande");
	             	    return 1;
	                }
                    ShowPlayerDialog(playerid,DIALOG_MAIN,DIALOG_STYLE_LIST,"{00A5FF}Radars {FFFFFF}- {FFDC00}Menu Principal","{37FF00}Creer Radar\n\nObtenir ID Radar le plus proche\nEditer radar le plus proche\n{FF1400}Supprimer radar le plus proche\n{FF1400}Supprimer tous les radars","OK","Cancel");
					return 1;
				}
			}
		}
		return 1;
	}
//----------------------------------[Freeze]------------------------------------------------
	if(strcmp(cmd, "/++flic", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
			    	Flicservice ++;
			    	SendClientMessage(playerid, COLOR_GRAD1, "Flic ++");
			}
			else
			{
				SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé à utiliser cette commande!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/--flic", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
			    	Flicservice --;
			    	SendClientMessage(playerid, COLOR_GRAD1, "Flic --");
			}
			else
			{
				SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé à utiliser cette commande!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/Jap", true) == 0 || strcmp(cmd, "/Japonais", true) == 0 || strcmp(cmd, "/Japonai", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   You havent logged in yet !");
	            return 1;
	        }
	        if(PlayerInfo[playerid][pLang1] == 1 || PlayerInfo[playerid][pLang2] == 1)
			{
                GetPlayerName(playerid, sendername, sizeof(sendername));
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[64];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/jap)anese [text]");
					return 1;
				}
				new Float:x, Float:y, Float:z;
    			GetPlayerPos(playerid,x,y,z);
   				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
					    if(PlayerToPoint(30, i, x, y, z))
					    {
							if(PlayerInfo[i][pLang1] == 1 || PlayerInfo[i][pLang2] == 1)
							{
					    		format(string, sizeof(string), "%s : [Japonais] %s", sendername, result);
					    		SendClientMessage(i, COLOR_FADE1, string);
					    		if(PlayerInfo[playerid][pMaskuse] == 1)
			                    {
                                    format(string, sizeof(string), " Inconnu : [Japonais] %s", result);
		                	    }
							}
							else
							{
					    		format(string, sizeof(string), "%s : [Langue Inconnue]", sendername);
					    		SendClientMessage(i, COLOR_FADE1, string);
					    		if(PlayerInfo[playerid][pMaskuse] == 1)
					    	    {
                                   format(string, sizeof(string), " Inconnu : [Langue Inconnue]");
                                   SendClientMessage(i, COLOR_FADE1, string);
		                     	}
		                	}
						}
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Vous ne savez pas parler Japonais !");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/Esp", true) == 0 || strcmp(cmd, "/Espagnol", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   You havent logged in yet !");
	            return 1;
	        }
	        if(PlayerInfo[playerid][pLang1] == 2 || PlayerInfo[playerid][pLang2] == 2)
			{
			    GetPlayerName(playerid, sendername, sizeof(sendername));
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[64];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/spa)nish [text]");
					return 1;
				}
				new Float:x, Float:y, Float:z;
    			GetPlayerPos(playerid,x,y,z);
   				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
					    if(PlayerToPoint(30, i, x, y, z))
					    {
							if(PlayerInfo[i][pLang1] == 2 || PlayerInfo[i][pLang2] == 2)
							{
					    		format(string, sizeof(string), "%s : [Espagnol] %s", sendername, result);
					    		SendClientMessage(i, COLOR_FADE1, string);
					    		if(PlayerInfo[playerid][pMaskuse] == 1)
			                    {
                                    format(string, sizeof(string), " Inconnu : [Espagnol] %s", result);
		                	    }
							}
							else
							{
					    		format(string, sizeof(string), "%s : [Langue Inconnue]", sendername);
					    		SendClientMessage(i, COLOR_FADE1, string);
					    		if(PlayerInfo[playerid][pMaskuse] == 1)
					    	    {
                                   format(string, sizeof(string), " Inconnu : [Langue Inconnue]");
                                   SendClientMessage(i, COLOR_FADE1, string);
		                     	}
		                	}
						}
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Vous ne savez pas parler Espagnol !");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/Rus", true) == 0 || strcmp(cmd, "/Russe", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   You havent logged in yet !");
	            return 1;
	        }
	        if(PlayerInfo[playerid][pLang1] == 3 || PlayerInfo[playerid][pLang2] == 3)
			{
                GetPlayerName(playerid, sendername, sizeof(sendername));
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[64];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/rus)se [text]");
					return 1;
				}
				new Float:x, Float:y, Float:z;
    			GetPlayerPos(playerid,x,y,z);
   				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
					    if(PlayerToPoint(30, i, x, y, z))
					    {
							if(PlayerInfo[i][pLang1] == 3 || PlayerInfo[i][pLang2] == 3)
							{
					    		format(string, sizeof(string), "%s : [Russe] %s", sendername, result);
					    		SendClientMessage(i, COLOR_FADE1, string);
					    		if(PlayerInfo[playerid][pMaskuse] == 1)
			                    {
                                    format(string, sizeof(string), " Inconnu : [Russe] %s", result);
		                	    }
							}
							else
							{
					    		format(string, sizeof(string), "%s : [Langue Inconnue]", sendername);
					    		SendClientMessage(i, COLOR_FADE1, string);
					    		if(PlayerInfo[playerid][pMaskuse] == 1)
					    	    {
                                   format(string, sizeof(string), " Inconnu : [Langue Inconnue]");
                                   SendClientMessage(i, COLOR_FADE1, string);
		                     	}
                            }
		               	}
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Vous ne savez pas parler Russe !");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/Ara", true) == 0 || strcmp(cmd, "/Arabe", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   You havent logged in yet !");
	            return 1;
	        }
	        if(PlayerInfo[playerid][pLang1] == 4 || PlayerInfo[playerid][pLang2] == 4)
			{
                GetPlayerName(playerid, sendername, sizeof(sendername));
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[64];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/ara)be [text]");
					return 1;
				}
				new Float:x, Float:y, Float:z;
    			GetPlayerPos(playerid,x,y,z);
   				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
					    if(PlayerToPoint(30, i, x, y, z))
					    {
							if(PlayerInfo[i][pLang1] == 4 || PlayerInfo[i][pLang2] == 4)
							{
					    		format(string, sizeof(string), "%s : [Arabe] %s", sendername, result);
					    		SendClientMessage(i, COLOR_FADE1, string);
					    		if(PlayerInfo[playerid][pMaskuse] == 1)
			                    {
                                    format(string, sizeof(string), " Inconnu : [Arabe] %s", result);
		                	    }
							}
							else
							{
					    		format(string, sizeof(string), "%s : [Langue Inconnue]", sendername);
					    		SendClientMessage(i, COLOR_FADE1, string);
					    		if(PlayerInfo[playerid][pMaskuse] == 1)
					    	    {
                                   format(string, sizeof(string), " Inconnu : [Langue Inconnue]");
                                   SendClientMessage(i, COLOR_FADE1, string);
		                     	}
                            }
		               	}
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Vous ne savez pas parler Arabe !");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/Ita", true) == 0 || strcmp(cmd, "/Italien", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   You havent logged in yet !");
	            return 1;
	        }
	        if(PlayerInfo[playerid][pLang1] == 5 || PlayerInfo[playerid][pLang2] == 5)
			{
                GetPlayerName(playerid, sendername, sizeof(sendername));
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[64];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/ita)lien [text]");
					return 1;
				}
				new Float:x, Float:y, Float:z;
    			GetPlayerPos(playerid,x,y,z);
   				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
					    if(PlayerToPoint(30, i, x, y, z))
					    {
							if(PlayerInfo[i][pLang1] == 5 || PlayerInfo[i][pLang2] == 5)
							{
					    		format(string, sizeof(string), "%s : [Italien] %s", sendername, result);
					    		SendClientMessage(i, COLOR_FADE1, string);
					    		if(PlayerInfo[playerid][pMaskuse] == 1)
			                    {
                                    format(string, sizeof(string), " Inconnu : [Italien] %s", result);
		                	    }
							}
							else
							{
					    		format(string, sizeof(string), "%s : [Langue Inconnue]", sendername);
					    		SendClientMessage(i, COLOR_FADE1, string);
					    		if(PlayerInfo[playerid][pMaskuse] == 1)
					    	    {
                                   format(string, sizeof(string), " Inconnu : [Langue Inconnue]");
                                   SendClientMessage(i, COLOR_FADE1, string);
		                     	}
                            }
		               	}
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Vous ne savez pas parler Italien !");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/All", true) == 0 || strcmp(cmd, "/Allemand", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   You havent logged in yet !");
	            return 1;
	        }
	        if(PlayerInfo[playerid][pLang1] == 6 || PlayerInfo[playerid][pLang2] == 6)
			{
                GetPlayerName(playerid, sendername, sizeof(sendername));
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[64];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/all)mand [text]");
					return 1;
				}
				new Float:x, Float:y, Float:z;
    			GetPlayerPos(playerid,x,y,z);
   				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
					    if(PlayerToPoint(30, i, x, y, z))
					    {
							if(PlayerInfo[i][pLang1] == 6 || PlayerInfo[i][pLang2] == 6)
							{
					    		format(string, sizeof(string), "%s : [Allemand] %s", sendername, result);
					    		SendClientMessage(i, COLOR_FADE1, string);
					    		if(PlayerInfo[playerid][pMaskuse] == 1)
			                    {
                                    format(string, sizeof(string), " Inconnu : [Allemand] %s", result);
		                	    }
							}
							else
							{
					    		format(string, sizeof(string), "%s : [Langue Inconnue]", sendername);
					    		SendClientMessage(i, COLOR_FADE1, string);
					    		if(PlayerInfo[playerid][pMaskuse] == 1)
					    	    {
                                   format(string, sizeof(string), " Inconnu : [Langue Inconnue]");
                                   SendClientMessage(i, COLOR_FADE1, string);
		                     	}
                            }
		               	}
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Vous ne savez pas parler Allemand !");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/Ang", true) == 0 || strcmp(cmd, "/Anglais", true) == 0 || strcmp(cmd, "/An", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   You havent logged in yet !");
	            return 1;
	        }
	        if(PlayerInfo[playerid][pLang1] == 7 || PlayerInfo[playerid][pLang2] == 7)
			{
                GetPlayerName(playerid, sendername, sizeof(sendername));
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[64];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/ang)lais [text]");
					return 1;
				}
				new Float:x, Float:y, Float:z;
    			GetPlayerPos(playerid,x,y,z);
   				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
					    if(PlayerToPoint(30, i, x, y, z))
					    {
							if(PlayerInfo[i][pLang1] == 7 || PlayerInfo[i][pLang2] == 7)
							{
					    		format(string, sizeof(string), "%s : [Anglais] %s", sendername, result);
					    		SendClientMessage(i, COLOR_FADE1, string);
					    		if(PlayerInfo[playerid][pMaskuse] == 1)
			                    {
                                    format(string, sizeof(string), " Inconnu : [Anglais] %s", result);
		                	    }
							}
							else
							{
					    		format(string, sizeof(string), "%s : [Langue Inconnue]", sendername);
					    		SendClientMessage(i, COLOR_FADE1, string);
					    		if(PlayerInfo[playerid][pMaskuse] == 1)
					    	    {
                                   format(string, sizeof(string), " Inconnu : [Langue Inconnue]");
                                   SendClientMessage(i, COLOR_FADE1, string);
		                     	}
                            }
		               	}
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Vous ne savez pas parler Anglais !");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/chi", true) == 0 || strcmp(cmd, "/Chinois", true) == 0 || strcmp(cmd, "/Chin", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   You havent logged in yet !");
	            return 1;
	        }
	        if(PlayerInfo[playerid][pLang1] == 8 || PlayerInfo[playerid][pLang2] == 8)
			{
                GetPlayerName(playerid, sendername, sizeof(sendername));
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[64];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/chi)nese [text]");
					return 1;
				}
				new Float:x, Float:y, Float:z;
    			GetPlayerPos(playerid,x,y,z);
   				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
					    if(PlayerToPoint(30, i, x, y, z))
					    {
							if(PlayerInfo[i][pLang1] == 8 || PlayerInfo[i][pLang2] == 8)
							{
					    		format(string, sizeof(string), "%s : [Chinois] %s", sendername, result);
					    		SendClientMessage(i, COLOR_FADE1, string);
					    		if(PlayerInfo[playerid][pMaskuse] == 1)
			                    {
                                    format(string, sizeof(string), " Inconnu : [Chinois] %s", result);
		                	    }
							}
							else
							{
					    		format(string, sizeof(string), "%s : [Langue Inconnue]", sendername);
					    		SendClientMessage(i, COLOR_FADE1, string);
					    		if(PlayerInfo[playerid][pMaskuse] == 1)
					    	    {
                                   format(string, sizeof(string), " Inconnu : [Langue Inconnue]");
                                   SendClientMessage(i, COLOR_FADE1, string);
		                     	}
                            }
		               	}
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Vous ne savez pas parler Chinois !");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/apprendrelangue", true) == 0)//Lang shop int 3 1494.4301 ,1305.6300 , 1093.2891
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (!PlayerToPoint(10, playerid, 1211.5039,-898.6489,1094.1084))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Vous n'êtes pas dans l'école de langue !");
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /apprendrelangue [numéro]");
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "|_______ Ecole de Langues _______|");
				SendClientMessage(playerid, COLOR_GREY, "| 1: Japonais $10000   2: Espagnol $10000");
				SendClientMessage(playerid, COLOR_GREY, "| 3: Russe  $10000      4: Arabe  $10000");
				SendClientMessage(playerid, COLOR_GREY, "| 5: Italien $10000      6: Allemand  $10000");
				SendClientMessage(playerid, COLOR_GREY, "| 7: Anglais   $10000   8: Chinois   $10000");
				return 1;
			}
			new item = strval(tmp); //FakeDriv[playerid]//FakeFly[playerid]//FakeWep[playerid]
			if(item < 1 || item > 8) return SendClientMessage(playerid, COLOR_WHITE, "   Mauvais numéro !");
			if(PlayerInfo[playerid][pLang1] != 0 && PlayerInfo[playerid][pLang2] != 0) return SendClientMessage(playerid, COLOR_WHITE, "   Vous connaissez déja 2 langages, faites /oublierlangue pour en oublier une !");
			if(item == 1 && GetPlayerMoney(playerid) > 9999) // Japanese
			{
			    if(!PlayerInfo[playerid][pLang1])
					PlayerInfo[playerid][pLang1] = 1;
				else if(!PlayerInfo[playerid][pLang2])
					PlayerInfo[playerid][pLang2] = 1;
				else return SendClientMessage(playerid, COLOR_GREY, "   Vous connaissez déja 2 languages, faites /oublierlangue pour en oublier une !");
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				SafeGivePlayerMoney(playerid,-10000);
				SendClientMessage(playerid, COLOR_GREY, "Langue Japonaise apprise !");
			    format(string, sizeof(string), "~r~-$%d", 10000);
			    GameTextForPlayer(playerid, string, 5000, 1);
			    return 1;
			}
			else if(item == 2 && GetPlayerMoney(playerid) > 9999) // Spanish
			{
			    if(!PlayerInfo[playerid][pLang1])
					PlayerInfo[playerid][pLang1] = 2;
				else if(!PlayerInfo[playerid][pLang2])
					PlayerInfo[playerid][pLang2] = 2;
				else return SendClientMessage(playerid, COLOR_GREY, "   Vous connaissez déja 2 languages, faites /oublierlangue pour en oublier une !");
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				SafeGivePlayerMoney(playerid,-10000);
				SendClientMessage(playerid, COLOR_GREY, "Langue Espagnol apprise !");
			    format(string, sizeof(string), "~r~-$%d", 10000);
			    GameTextForPlayer(playerid, string, 5000, 1);
			    return 1;
			}
			else if(item == 3 && GetPlayerMoney(playerid) > 9999) // Russian
			{
			    if(!PlayerInfo[playerid][pLang1])
					PlayerInfo[playerid][pLang1] = 3;
				else if(!PlayerInfo[playerid][pLang2])
					PlayerInfo[playerid][pLang2] = 3;
				else return SendClientMessage(playerid, COLOR_GREY, "   Vous connaissez déja 2 languages, faites /oublierlangue pour en oublier une !");
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				SafeGivePlayerMoney(playerid,-10000);
				SendClientMessage(playerid, COLOR_GREY, "Langue Russe apprise !");
			    format(string, sizeof(string), "~r~-$%d", 10000);
			    GameTextForPlayer(playerid, string, 5000, 1);
			    return 1;
			}
			else if(item == 4 && GetPlayerMoney(playerid) > 9999) // Arabe
			{
			    if(!PlayerInfo[playerid][pLang1])
					PlayerInfo[playerid][pLang1] = 4;
				else if(!PlayerInfo[playerid][pLang2])
					PlayerInfo[playerid][pLang2] = 4;
				else return SendClientMessage(playerid, COLOR_GREY, "   Vous connaissez déja 2 languages, faites /oublierlangue pour en oublier une !");
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				SafeGivePlayerMoney(playerid,-10000);
				SendClientMessage(playerid, COLOR_GREY, "Langue Arabe apprise !");
			    format(string, sizeof(string), "~r~-$%d", 10000);
			    GameTextForPlayer(playerid, string, 5000, 1);
			    return 1;
			}
			else if(item == 5 && GetPlayerMoney(playerid) > 9999) // Italien
			{
			    if(!PlayerInfo[playerid][pLang1])
					PlayerInfo[playerid][pLang1] = 5;
				else if(!PlayerInfo[playerid][pLang2])
					PlayerInfo[playerid][pLang2] = 5;
				else return SendClientMessage(playerid, COLOR_GREY, "   Vous connaissez déja 2 languages, faites /oublierlangue pour en oublier une !");
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				SafeGivePlayerMoney(playerid,-10000);
				SendClientMessage(playerid, COLOR_GREY, "Langue Italiene apprise !");
			    format(string, sizeof(string), "~r~-$%d", 10000);
			    GameTextForPlayer(playerid, string, 5000, 1);
			    return 1;
			}
			else if(item == 6 && GetPlayerMoney(playerid) > 9999) // Allemand
			{
			    if(!PlayerInfo[playerid][pLang1])
					PlayerInfo[playerid][pLang1] = 6;
				else if(!PlayerInfo[playerid][pLang2])
					PlayerInfo[playerid][pLang2] = 6;
				else return SendClientMessage(playerid, COLOR_GREY, "   Vous connaissez déja 2 languages, faites /oublierlangue pour en oublier une !");
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				SafeGivePlayerMoney(playerid,-10000);
				SendClientMessage(playerid, COLOR_GREY, "Langue Allemande apprise !");
			    format(string, sizeof(string), "~r~-$%d", 10000);
			    GameTextForPlayer(playerid, string, 5000, 1);
			    return 1;
			}
			else if(item == 7 && GetPlayerMoney(playerid) > 9999) // Anglais
			{
			    if(!PlayerInfo[playerid][pLang1])
					PlayerInfo[playerid][pLang1] = 7;
				else if(!PlayerInfo[playerid][pLang2])
					PlayerInfo[playerid][pLang2] = 7;
				else return SendClientMessage(playerid, COLOR_GREY, "   Vous connaissez déja 2 languages, faites /oublierlangue pour en oublier une !");
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				SafeGivePlayerMoney(playerid,-10000);
				SendClientMessage(playerid, COLOR_GREY, "Langue Anglaise apprise !");
			    format(string, sizeof(string), "~r~-$%d", 10000);
			    GameTextForPlayer(playerid, string, 5000, 1);
			    return 1;
			}
			else if(item == 8 && GetPlayerMoney(playerid) > 9999) // Chinois
			{
			    if(!PlayerInfo[playerid][pLang1])
					PlayerInfo[playerid][pLang1] = 8;
				else if(!PlayerInfo[playerid][pLang2])
					PlayerInfo[playerid][pLang2] = 8;
				else return SendClientMessage(playerid, COLOR_GREY, "   Vous connaissez déja 2 languages, faites /oublierlangue pour en oublier une !");
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				SafeGivePlayerMoney(playerid,-10000);
				SendClientMessage(playerid, COLOR_GREY, "Langue Chinoise apprise !");
			    format(string, sizeof(string), "~r~-$%d", 10000);
			    GameTextForPlayer(playerid, string, 5000, 1);
			    return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/oublierlangue", true) == 0 || strcmp(cmd, "/oublierlangague", true) == 0)//Lang shop int 3 1494.4301 ,1305.6300 , 1093.2891
	{
	    if(IsPlayerConnected(playerid))
	    {
     		if(gPlayerLogged[playerid] == 0)
            {
                SendClientMessage(playerid, COLOR_GREY, "    You need to login first ! ");
                return 1;
            }
            new x_note[256];
			x_note = strtok(cmdtext, idx);
			if(!strlen(x_note))
			{
                SendClientMessage(playerid, COLOR_WHITE, "USAGE: /oublierlangue [Seconde/Troisieme]");
				return 1;
			}
			if(strcmp(x_note,"seconde",true) == 0)
			{
			    if(PlayerInfo[playerid][pLang1] != 0)
			    {
			        PlayerInfo[playerid][pLang1] = 0;
                    SendClientMessage(playerid, COLOR_WHITE, "    Vous avez oublié votre seconde langue. Vous pouvez maintenant en avoir une nouvelle ! ");
                    return 1;
			    }
			    else return SendClientMessage(playerid, COLOR_GREY, "   Vous n'avez pas de seconde langue.");
			}
			else if(strcmp(x_note,"troisieme",true) == 0)
			{
			    if(PlayerInfo[playerid][pLang2] != 0)
			    {
			        PlayerInfo[playerid][pLang2] = 0;
                    SendClientMessage(playerid, COLOR_WHITE, "    Vous avez oublié votre troiseme langue. Vous pouvez maintenant en avoir une nouvelle !");
                    return 1;
			    }
			    else return SendClientMessage(playerid, COLOR_GREY, "   Vous n'avez pas de troisieme langue.");
			}
			else return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /oublierlangue [Seconde/Troisieme]");
		}
	}

//----------------------------------[unfreeze]------------------------------------------------
	if(strcmp(cmd, "/unfreeze", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /unfreeze [playerid]");
				return 1;
			}
			new playa;
			playa = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
			    	    GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						TogglePlayerControllable(playa, 1);
						GameTextForPlayer(playa, "~w~Vous pouvez a nouveau bouger", 5000, 3);
						desactivetext[playa] = 1;
						SetTimerEx("DesactiverSpeedo", 5000, 0, "i", playa );
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé à utiliser cette commande!");
			}
		}
		return 1;
	}
	/// Freeze
	if(strcmp(cmd, "/freeze", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /freeze [playerid]");
				return 1;
			}
			new playa;
			playa = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
			    	    GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						TogglePlayerControllable(playa, 0);
						GameTextForPlayer(playa, "~w~Tu es freeze", 5000, 3);
						desactivetext[playa] = 1;
						SetTimerEx("DesactiverSpeedo", 5000, 0, "i", playa);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé à utiliser cette commande!");
			}
		}
		return 1;
	}
//----------------------------------[EndRound]-----------------------------------------------

	if(strcmp(cmd, "/reboot", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	  		if (PlayerInfo[playerid][pAdmin] >= 1339)
			{
                SendClientMessageToAll(COLOR_LIGHTBLUE, " Le redémarrage à commencé...");
				GameModeInitExitFunc();
			}
			else
			{
				SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé à utiliser cette commande!");
			}
		}
		return 1;
	}
//----------------------------------[EndRound]-----------------------------------------------

//----------------------------------[GMX]-----------------------------------------------

	if(strcmp(cmd, "/gmx", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 1339)
			{
				GameModeExit();
			}
			else
			{
				SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé à utiliser cette commande!");
			}
		}
		return 1;
	}
	if (strcmp(cmdtext, "/redalert", true)==0 || strcmp(cmdtext, "/alerterouge", true)==0)
		{
		    if(PlayerInfo[playerid][pAdmin] >= 1339)
			{
		        new aname[256];
		        GetPlayerName(playerid,aname,sizeof(aname));
		        GameTextForAll("~r~Red Alert",7000,4);
		        format(string,sizeof(string), "Admin: %s a activé l'Alerte Rouge.",aname);
		        SendClientMessageToAll(0xAA3333AA,string);
		        SendClientMessageToAll(0xAA3333AA,"Vous serez tous kické dans 10 secondes.");
		        RedAlertTimer = SetTimer("KickAll",10000,0);
		        SendClientMessage(playerid, 0xFFFF00AA, "Alerte Rouge en place. Pour l'arreter, faites /stopalerterouge.");
		        printf("%s a mis en place l'Alerte Rouge.",aname);
		        return 1;
		    }
		    else
		    {
		        return 1;
		    }
		}
		if (strcmp(cmdtext, "/stopalerterouge", true)==0)
		{
		    if(PlayerInfo[playerid][pAdmin] >= 1339)
			{
		        new aname[256];
		        GetPlayerName(playerid,aname,sizeof(aname));
		        GameTextForAll("~y~Red Alert Aborted",7000,4);
		        format(string,sizeof(string), "Admin: %s a annulé l'Alerte Rouge.",aname);
		        SendClientMessageToAll(0x33AA33AA,string);
		        KillTimer(RedAlertTimer);
		        SendClientMessage(playerid, 0xFFFF00AA, "Annulation Réussie.");
				printf("%s a annulé l'Alerte Rouge.",aname);
		        return 1;
			}
			else
			{
			    return 1;
			}
		}

	if(strcmp(cmd, "/unloadfs", true) == 0)
		{
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GREY, "[CMDINFO] - /unloadfs [name]");
				return 1;
			}
			if(PlayerInfo[playerid][pAdmin] >= 1339)
			{
				format(string, sizeof(string), "%s", result);
				UnLoadFS(result);
				return 1;
			}
		}
		if(strcmp(cmd, "/loadfs", true) == 0)
		{
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GREY, "[CMDINFO] - /loadfs [name]");
				return 1;
			}
			if(PlayerInfo[playerid][pAdmin] >= 1339)
			{
				format(string, sizeof(string), "%s", result);
				LoadFS(result);
				return 1;
			}
		}
		if(strcmp(cmd, "/setservername", true) == 0)
		{
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GREY, "[CMDINFO] - /setservername [New name]");
				return 1;
			}
			if(PlayerInfo[playerid][pAdmin] >= 1339)
			{
				format(string, sizeof(string), "%s", result);
				SetServerName(result);
				return 1;
			}
		}
		if(strcmp(cmd, "/setgamemodename", true) == 0)
		{
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GREY, "[CMDINFO] - /setgamemodename [New name]");
				return 1;
			}
			if(PlayerInfo[playerid][pAdmin] >= 1339)
			{
				format(string, sizeof(string), "%s", result);
				SetServerGamemode(result);
				return 1;
			}
		}
	if(strcmp(cmd, "/mettrevip", true) == 0)
	{
		if (PlayerInfo[playerid][pAdmin] >= 1339)
		{
	    	if(IsPlayerConnected(playerid))
	    	{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /mettrevip [playerid/PartOfName] [montant]");
					SendClientMessage(playerid, COLOR_GRAD1, "(2=V.I.P, 1=Membre de Confiance, 0=Membre Normal)");
					return 1;
				}
				//giveplayerid = strval(tmp);
	        	giveplayerid = ReturnUser(tmp);
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /mettrevip [playerid/PartOfName] [montant]");
					SendClientMessage(playerid, COLOR_GRAD1, "(2=V.I.P, 1=Membre de Confiance, 0=Membre Normal)");
					return 1;
				}
				new playa;
				GetPlayerName(playa, sendername, sizeof(sendername));
				playa = ReturnUser(tmp);
				moneys = strval(tmp);
		    	PlayerInfo[giveplayerid][pDonateRank] = moneys;
			    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				new drank[20];
				if(PlayerInfo[playerid][pDonateRank] == 0) { drank = "Membre Normal"; }
	        	else if(PlayerInfo[playerid][pDonateRank] == 1) { drank = "Membre de Confiance"; }
	        	else if(PlayerInfo[playerid][pDonateRank] >= 2) { drank = "V.I.P"; }
				format(string, 256, "%s met le Rang %s à %s.", sendername,drank,giveplayer);
				ABroadCast(COLOR_YELLOW,string,1);
				format(string, sizeof(string), "L'Admin %s vous à reglé votre Rang en %s.", sendername, drank);
				SendClientMessage(giveplayerid, 0xBBA033AA, string);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/vip", true) == 0)
	{
        if(IsPlayerConnected(playerid))
	    {
			SendClientMessage(playerid, 0x990099FF, "Membres VIP Online:");
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
    				if(PlayerInfo[i][pDonateRank] != 0)
			    	{
						GetPlayerName(i, sendername, sizeof(sendername));
						format(string, 256, "%s", sendername);
						SendClientMessage(playerid, COLOR_GRAD2, string);
					}
				}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/vipchat", true) == 0 || strcmp(cmd, "/vc", true) == 0) //PaNoULiS - VIP Chat
	{
	    if(IsPlayerConnected(playerid))
	    {
    		if(PlayerInfo[playerid][pDonateRank] >= 1)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[96];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: (/v)ip(c)hat [VIP Chat]");
					return 1;
				}
				new arank[64];
                if(PlayerInfo[playerid][pDonateRank] == 1) { arank = "Membre de Confiance"; }
                else if(PlayerInfo[playerid][pDonateRank] == 2) { arank = "V.I.P"; }
				format(string, sizeof(string), " %s %s: %s", arank, sendername, result);
				if(PlayerInfo[playerid][pDonateRank] >= 1 || PlayerInfo[playerid][pDonateRank] >= 2)
				{
					SendVIPMessage(0x80008000, string);
				}
			}
 			else
    		{
  				SendClientMessage(playerid,COLOR_RED,"   Vous n'êtes pas un membre V.I.P !");
			}
		}
		return 1;
	}
	if (strcmp(cmd, "/cam", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /cam [1/2/3/4]");
				return 1;
			}
			Unspec[playerid][sCam] = strval(tmp);
			format(string, sizeof(string), "Changé de camera pour %d",Unspec[playerid][sCam]);
			SendClientMessage(playerid, COLOR_GRAD1, string);
		}
		return 1;
	}
	if (strcmp(cmd, "/admins", true) == 0)
	{
        if(IsPlayerConnected(playerid))
	    {
	        SendClientMessage(playerid, COLOR_BLUE, "...::: Modo | Admins :::...");
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
				    if(PlayerInfo[i][pAdmin] >= 1 && PlayerInfo[i][pAdmin] < 1340)
				    {
				        new admtext[64];
				        if(PlayerInfo[i][pAdmin] == 1340) { admtext = "Créateur"; }
				        else if(PlayerInfo[i][pAdmin] == 1339) { admtext = "Fondateur"; }
				        else if(PlayerInfo[i][pAdmin] == 1338) { admtext = "Co-Fondateur"; }
				        else if(PlayerInfo[i][pAdmin] == 1337) { admtext = "Admin Général"; }
				        else if(PlayerInfo[i][pAdmin] == 5) { admtext = "Admin"; }
				        else if(PlayerInfo[i][pAdmin] == 4) { admtext = "Admin"; }
						else if(PlayerInfo[i][pAdmin] == 3) { admtext = "Admin"; }
                        else if(PlayerInfo[i][pAdmin] == 2) { admtext = "Admin"; }
						else if(PlayerInfo[i][pAdmin] == 1)	{ admtext = "Modérateur"; }
						else { admtext = "Modérateur"; }
						GetPlayerName(i, sendername, sizeof(sendername));
						if(AdminDuty[i] == 0)
						{
							format(string, 256, "%s: %s", admtext, sendername);
							SendClientMessage(playerid, COLOR_WHITE, string);
						}
						else
						{
						    format(string, 256, "%s: %s (En Service Admin)", admtext, sendername);
							SendClientMessage(playerid, TEAM_ORANGE, string);
						}
					}
				}
			}
		}
		return 1;
	}
	if (strcmp(cmd, "/aunecagoule", true) == 0 || strcmp(cmd, "/aug", true) ==0)
	{
        if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] < 1)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas autorisé à utiliser cette commande!");
	            return 1;
	        }
			SendClientMessage(playerid, COLOR_GRAD1, "Joueur en ligne avec une cagoule:");
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
				    if(PlayerInfo[i][pMaskuse] == 1)
				    {
						GetPlayerName(i, sendername, sizeof(sendername));
						format(string, 256, "* ID: %d ** %s", i, sendername);
						SendClientMessage(playerid, COLOR_GRAD2, string);
					}
				}
			}
		}
		return 1;
	}
//----------------------------------[ATM System]----------------------------------------------- By LordMan
	if(strcmp(cmd, "/atm", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			SendClientMessage(playerid, COLOR_GREEN,"________________________________________________");
			SendClientMessage(playerid, COLOR_WHITE,"** ATM *** Tapez une commande pour plus d'aide.");
			SendClientMessage(playerid, COLOR_GRAD3,"** ATM *** /retireratm");
		}
		return 1;
	}
//----------------------------------[HELP]-----------------------------------------------
	if(strcmp(cmd, "/regles", true) == 0 || strcmp(cmd, "/rules", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	           SendClientMessage(playerid, COLOR_GREEN, "__________________Les Regles___________________");
	            SendClientMessage(playerid, COLOR_WHITE, " Soyez Toujours RP, agissez comme dans la vrai vie.");
	            SendClientMessage(playerid, COLOR_WHITE, " Pas de Death Match (DM) (Vous êtes sur un serveur RP)");
	            SendClientMessage(playerid, COLOR_WHITE, " Seulement le Français est autorisé sur le serveur");
	            SendClientMessage(playerid, COLOR_WHITE, " N'utiliser pas de Bug ni de Cheat sinon Ban Permanant.");
	            SendClientMessage(playerid, COLOR_WHITE, " Drive-By Interdit (Sauf pour les Policiers et Passagers)");
	            SendClientMessage(playerid, COLOR_WHITE, " N'utiliser pas de Smiley (ni mdr, ptdr) en IC");
	            SendClientMessage(playerid, COLOR_WHITE, " Ne faites pas de Bunny (Sauter pour aller plus vite), c'est interdit");
                SendClientMessage(playerid, COLOR_WHITE, " Plus d'infos : http://u2c-rp.forum-pro.fr");
				SendClientMessage(playerid, COLOR_GREEN, "______________________________________________");
		}
		return 1;
	}
//----------------------------------[HELP]-----------------------------------------------
	if(strcmp(cmd, "/aiderp", true) == 0 || strcmp(cmd, "/aideroleplay", true) == 0 || strcmp(cmd, "/rp", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	           SendClientMessage(playerid, COLOR_GREEN, "______________Aide : Le RolePlay______________");
	            SendClientMessage(playerid, COLOR_WHITE, " Pour être RP, agissez comme dans la vrai vie.");
	            SendClientMessage(playerid, COLOR_WHITE, " Tuer des gens Inutilement est interdit.");
	            SendClientMessage(playerid, COLOR_WHITE, "-----------------------------------------------------");
	            SendClientMessage(playerid, COLOR_WHITE, " IC = In Character, s'utilise directement avec T.");
	            SendClientMessage(playerid, COLOR_WHITE, " IC = C'est le personnage que vous incarner qui parle.");
	            SendClientMessage(playerid, COLOR_WHITE, "-----------------------------------------------------");
	            SendClientMessage(playerid, COLOR_WHITE, " OOC = Out Of Character, s'utilise avec /( [Votre Texte]");
	            SendClientMessage(playerid, COLOR_WHITE, " OOC = C'est vous derriere votre écran qui parlez.");
				SendClientMessage(playerid, COLOR_GREEN, "______________________________________________");
		}
		return 1;
	}
	//----------------------------------[HELP]-----------------------------------------------
	if(strcmp(cmd, "/roleplay", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	           SendClientMessage(playerid, COLOR_GREEN, "______________Aide : Le RolePlay______________");
	            SendClientMessage(playerid, COLOR_WHITE, " Pour être RP, agissez comme dans la vrai vie.");
	            SendClientMessage(playerid, COLOR_WHITE, " Tuer des gens Inutilement est interdit.");
	            SendClientMessage(playerid, COLOR_WHITE, "-----------------------------------------------------");
	            SendClientMessage(playerid, COLOR_WHITE, " IC = In Character, s'utilise directement avec T.");
	            SendClientMessage(playerid, COLOR_WHITE, " IC = C'est le personnage que vous incarner qui parle.");
	            SendClientMessage(playerid, COLOR_WHITE, "-----------------------------------------------------");
	            SendClientMessage(playerid, COLOR_WHITE, " OOC = Out Of Character, s'utilise avec /( [Votre Texte]");
	            SendClientMessage(playerid, COLOR_WHITE, " OOC = C'est vous derriere votre écran qui parlez.");
				SendClientMessage(playerid, COLOR_GREEN, "______________________________________________");
		}
		return 1;
	}
//----------------------------------[HELP : Metagame]-----------------------------------------------
	if(strcmp(cmd, "/metagame", true) == 0 || strcmp(cmd, "/metagaming", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	           SendClientMessage(playerid, COLOR_GREEN, "______________Aide : Le Metagame______________");
	            SendClientMessage(playerid, COLOR_WHITE, " Le Métagame, c'est utiliser une information OOC en IC.");
	            SendClientMessage(playerid, COLOR_WHITE, " Exemple : Lire le prénom d'une personne sur sa tête,");
	            SendClientMessage(playerid, COLOR_WHITE, " Et dire en IC son prénom.");
	            SendClientMessage(playerid, COLOR_GREEN, "_____________________________________________");
		}
		return 1;
	}
//----------------------------------[HELP : Powergame]-----------------------------------------------
	if(strcmp(cmd, "/powergame", true) == 0 || strcmp(cmd, "/powergaming", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	           SendClientMessage(playerid, COLOR_GREEN, "______________Aide : Le Powergame______________");
	            SendClientMessage(playerid, COLOR_WHITE, " Le Powergame, c'est faire une action irréaliste en IC.");
	            SendClientMessage(playerid, COLOR_WHITE, " Exemple : /me s'envole");
	            SendClientMessage(playerid, COLOR_WHITE, " Exemple : Sauter du haut d'une montagne sans se blesser.");
	            SendClientMessage(playerid, COLOR_GREEN, "______________________________________________");
		}
		return 1;
	}

//----------------------------------[HELP]-----------------------------------------------
	if(strcmp(cmd, "/aidetel", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			if (PlayerInfo[playerid][pPnumber] > 0)
			{
				SendClientMessage(playerid, COLOR_WHITE,"** Aide *** Tapez une commande pour plus d'aide.");
				SendClientMessage(playerid, COLOR_WHITE,"** Telephone *** /appeler numero: /appeler 911' /ucall /sms /decrocher (/rac)rocher /numero");
				SendClientMessage(playerid, COLOR_WHITE,"** Autre *** /aide /aidemaison /aidenote /aidevehicule /aidelocation /aidebiz /aidepeche /aidepeche /aidecuisine /aideirc");
				SendClientMessage(playerid, COLOR_WHITE,"** Autre *** /aidechat /aidekidnaping");
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE,"Vous pouvez acheter un Telephone dans tous les 24-7");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/eventaide", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] >= 4)
	        {
				SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
				SendClientMessage(playerid, COLOR_WHITE,"EVENT HELP: type a command for more information");
				SendClientMessage(playerid, COLOR_WHITE,"COMMANDS: /seteventpos /seteventinfo /startevent /lockevent /endevent /annonceevent /quitevent");
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   You are not authorized to use that command !");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/coffreaide", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			SendClientMessage(playerid, COLOR_WHITE,"Aide Coffre: Tapez une commande pour plus d'aide.");
			SendClientMessage(playerid, COLOR_WHITE,"COMMANDES: /fcoffre /fdeposer /fretirer");
		}
		return 1;
	}
	if(strcmp(cmd, "/aidechat", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			if (PlayerInfo[playerid][pPnumber] > 0)
			{
				SendClientMessage(playerid, COLOR_WHITE,"** Aide *** Tapez une commande pour plus d'aide");
				SendClientMessage(playerid, COLOR_WHITE,"** Chat *** /local /( /close /bas /crier /chuchotervehicule (/cv) /j /n");
				SendClientMessage(playerid, COLOR_WHITE,"** Autre *** /aide /aidemaison /aidenote /aidevehicule /aidelocation /aidebiz /aidepeche /aidepeche /aidecuisine /aideirc");
				SendClientMessage(playerid, COLOR_WHITE,"** Autre *** /aidekidnaping");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/aidekidnaping", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			if (PlayerInfo[playerid][pPnumber] > 0)
			{
				SendClientMessage(playerid, COLOR_WHITE,"** NOTE : *** Interdit de kidnapper les joueurs inférieurs au niveau 3. (3 inclus)");
				SendClientMessage(playerid, COLOR_WHITE,"** Kidnaping *** /ligotter /deligotter /banderyeux /chercherportefeuille (/cp)");
				SendClientMessage(playerid, COLOR_WHITE,"** Autre *** /aide /aidemaison /aidenote /aidevehicule /aidelocation /aidebiz /aidechef /aidepeche /aidecuisine /aideirc");
				SendClientMessage(playerid, COLOR_WHITE,"** Autre *** /aidekidnaping");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/aidemaison", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			SendClientMessage(playerid, COLOR_WHITE,"** Aide Maison *** Tapez une commande pour plus d'aide.");
			SendClientMessage(playerid, COLOR_WHITE,"** Maison *** /entrer /sortir /ouvrir /maison /sante /upgrademaison (/hu) /mettrelocation /tv (off/player)");
			SendClientMessage(playerid, COLOR_WHITE,"** Maison *** /virertous /prixlocation /evict /retirermaison");
			SendClientMessage(playerid, COLOR_WHITE,"** Autre *** /aidetel /aide /aidenote /aidevehicule /aidelocation /aidebiz /aidechef /aidepeche /aidecuisine /aideirc");
			SendClientMessage(playerid, COLOR_WHITE,"** Autre *** /aidechat /aidekidnaping");
		}
		return 1;
	}
	if(strcmp(cmd, "/aidenote", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			SendClientMessage(playerid, COLOR_WHITE,"** Aide Note *** Tapez une commande pour plus d'aide.");
			SendClientMessage(playerid, COLOR_WHITE,"** Note *** /montrernotes /suprimernote /creenote /donnernote");
			SendClientMessage(playerid, COLOR_WHITE,"** Autre *** /aidetel /aide /aidemaison /aidevehicule /aidelocation /aidebiz /aidechef /aidepeche /aidecuisine /aideirc");
			SendClientMessage(playerid, COLOR_WHITE,"** Autre *** /aidechat /aidekidnaping");
		}
		return 1;
	}
	if(strcmp(cmd, "/aidelocation", true) == 0)
	{
		if(IsPlayerConnected(playerid))
	    {
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			SendClientMessage(playerid, COLOR_WHITE,"** Aide Location *** Tapez une commande pour plus d'aide.");
			SendClientMessage(playerid, COLOR_WHITE,"** Location *** /delouer /entrer /exit /fermer /maison");
			SendClientMessage(playerid, COLOR_WHITE,"** Autre *** /aidetel /aidemaison /aidenote /aidevehicule /aide /aidebiz /aidechef /aidepeche /aidecuisine /aideirc");
			SendClientMessage(playerid, COLOR_WHITE,"** Autre *** /aidechat /aidekidnaping");
		}
		return 1;
	}
	if(strcmp(cmd, "/aidebiz", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			SendClientMessage(playerid, COLOR_WHITE,"** Aide Biz *** Tapez une commande pour plus d'aide.");
			SendClientMessage(playerid, COLOR_WHITE,"** Biz *** /bizinfo /prixentrer /nombiz /prodprix /extortion");
			SendClientMessage(playerid, COLOR_WHITE,"** Biz *** /entrer /exit /ouvrir /vendrebiz /deposerbiz /retirerbiz");
			SendClientMessage(playerid, COLOR_WHITE,"** Autre *** /aidetel /aidemaison /aidenote /aidevehicule /aide /aidebiz /aidechef /aidepeche /aidecuisine /aideirc");
			SendClientMessage(playerid, COLOR_WHITE,"** Autre *** /aidechat /aidekidnaping");
		}
		return 1;
	}
	if(strcmp(cmd, "/aidechef", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if (PlayerInfo[playerid][pLeader] >= 1 )
		    {
		        SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
		        if(PlayerInfo[playerid][pLeader] != 7)
		        {
					SendClientMessage(playerid, COLOR_WHITE,"** Aide Chef *** Tapez une commande pour plus d'aide.");
					SendClientMessage(playerid, COLOR_WHITE,"** Chef *** /inviter /virer /donnerrang");
				}
				if(PlayerInfo[playerid][pLeader] == 5 || PlayerInfo[playerid][pLeader] == 6 || PlayerInfo[playerid][pLeader] == 13 || PlayerInfo[playerid][pLeader] == 14 || PlayerInfo[playerid][pLeader] == 15 || PlayerInfo[playerid][pLeader] == 16)
				{
				    SendClientMessage(playerid, COLOR_WHITE,"** Chef *** /ouvrirqg /coffreqg");
				}
				if(PlayerInfo[playerid][pLeader] == 7)
				{
					SendClientMessage(playerid, COLOR_WHITE,"** Chef *** /virergov /rolegov /changertaxe /voirtax /deposertax /retirertax /donnertax (Donne de l'argent aux policiers)");
				}
				SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas Chef!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/aideirc", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
	        SendClientMessage(playerid, COLOR_WHITE,"** Aide IRC *** Tapez une commande pour plus d'aide.");
	        SendClientMessage(playerid, COLOR_WHITE,"** Irc *** (/irc join [channelnr] or /irc join [channelnr] [password])  (/irc leave)");
			SendClientMessage(playerid, COLOR_WHITE,"** Irc *** (/irc Password [channelnr])  (/irc NeedPass [channelnr])  (/irc Lock [channelnr])");
			SendClientMessage(playerid, COLOR_WHITE,"** Irc *** (/irc Admins)  (/irc MOTD [motdtext])  (/irc status [channelnr])  (/i [text])");
	    }
	    return 1;
	}
	if(strcmp(cmd, "/aidepeche", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			SendClientMessage(playerid, COLOR_WHITE,"** Aide Peche *** Tapez une commande pour plus d'aide.");
			SendClientMessage(playerid, COLOR_WHITE,"** Peche *** /pecher (essayer de prendre un poisson)   /poissons (Montre les poisson que vous avez attrapé)");
			SendClientMessage(playerid, COLOR_WHITE,"** Peche *** /relancer (Relance le poissons que vous avez pêché dans la riviere)   /relancertous");
			SendClientMessage(playerid, COLOR_WHITE,"** Peche *** /relacher (Relache un de vos poisson)");
		}
		return 1;
	}
	if(strcmp(cmd, "/aidecuisine", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			SendClientMessage(playerid, COLOR_WHITE,"** Aide cuisine *** Tapez une commande pour plus d'aide.");
			SendClientMessage(playerid, COLOR_WHITE,"** Cuisine *** /cuisiner (Voire toutes les options possibles) /acuisiner (Voire tout ce que vous avez préparé)");
			SendClientMessage(playerid, COLOR_WHITE,"** cuisine *** /manger (Manger quelque chose que vous avez préparé)");
		}
		return 1;
	}
	if(strcmp(cmd, "/lierintvoiture", true) == 0 || strcmp(cmd, "/liervoitureint", true) == 0 )
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 2 || IsPlayerAdmin(playerid))
			{
			    LinkVehicleToInterior(GetPlayerVehicleID(playerid),GetPlayerInterior(playerid));
			    SetVehicleVirtualWorld(GetPlayerVehicleID(playerid),GetPlayerVirtualWorld(playerid));
			    SendClientMessage(playerid, COLOR_GRAD1, "Vous avez lié le véhicule à votre monde intérieur et virtuelle!");
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Vous n'êtes pas admin !");
			}
		}
		return 1;
	}
	if (strcmp(cmd, "/warnliste", true) == 0 || strcmp(cmd, "/avertissementliste", true) == 0 || strcmp(cmd, "/avertissementsliste", true) == 0)
	{
        if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] < 1)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "** You're no authorized to use that command . ");
	            return 1;
	        }

			format(string, sizeof(string), "[ADMIN]: %s regarde la liste des joueurs ayant recu des avertissements.", sendername);
			ABroadCast(COLOR_YELLOW, string, 5);
			SendClientMessage(playerid, COLOR_GRAD3, "Joueurs ayant recu des avertissements:");
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
				    if(PlayerInfo[i][pWarnings] >= 1)
				    {
				        GetPlayerName(i, sendername, sizeof(sendername));
						GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						format(string, 256, "%s (%d) - Avertissements: %d", sendername, i, PlayerInfo[i][pWarnings]);
						SendClientMessage(playerid, COLOR_GRAD1, string);
					}
				}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/jailliste", true) == 0 || strcmp(cmd, "/jl", true) == 0 || strcmp(cmd, "/jailiste", true) == 0)
	{
        if(IsPlayerConnected(playerid))
	    {
		 if(PlayerInfo[playerid][pAdmin] >= 1)
		 {
           	format(string, sizeof(string), "[ADMIN]: %s regarde la liste des joueurs emprisonnés.", sendername);
			ABroadCast(COLOR_YELLOW, string, 5);
			SendClientMessage(playerid, COLOR_WHITE, "Personnes Emprisonnées:");
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
				   	if(PlayerInfo[i][pJailTime] > 0)
				    {
                        GetPlayerName(i, sendername, sizeof(sendername));
						format(string, 256, "Nom: %s | ID: %d | Temps restant en prison: %d Secondes", sendername,i,PlayerInfo[i][pJailTime]);
						SendClientMessage(playerid, COLOR_YELLOW, string);
					}
				}
			}
		  }
		  else
		  {
			 SendClientMessage(playerid,COLOR_GREY,"Vous n'êtes pas un admin !");
		  }
		}
		return 1;
	}
	if (strcmp(cmd, "/richeliste", true) == 0 || strcmp(cmd, "/richesliste", true) == 0)
	{
        if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] < 1)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "* You're no authorized to use that command . ");
	            return 1;
	        }
          	format(string, sizeof(string), "[ADMIN]: %s regarde la liste des joueurs fortunés.", sendername);
			ABroadCast(COLOR_YELLOW, string, 5);
			SendClientMessage(playerid, COLOR_GRAD3, "Joueurs Riches online:");
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
				    if(GetPlayerMoney(i) >= 5000000 || PlayerInfo[i][pAccount] >= 5000000)
				    {
				        GetPlayerName(i, sendername, sizeof(sendername));
						GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						format(string, 256, "%s (%d) - En Main: $%d | En banque: $%d", sendername, i, GetPlayerMoney(i), PlayerInfo[i][pAccount]);
						SendClientMessage(playerid, COLOR_GRAD1, string);
					}
				}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/aaide", true) == 0 || strcmp(cmd, "/aa", true) == 0 || strcmp(cmd, "/ah", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
			    SendClientMessage(playerid, COLOR_YELLOW, "~~Duty~~ | /aduty | /adminduty | /pm");
				SendClientMessage(playerid, COLOR_YELLOW, "~~[CMD]Modo ~~ | /warn | /surveiller | /fly | /verifier | /setint | /setvw | /mute | /kick | /aunecagoul |(/aug) | /unfreeze | /learn | /gotocar /richeliste");
				SendClientMessage(playerid, COLOR_YELLOW, "~~[CMD]Modo ~~ | /gotoconcess | /ban | /maske | /slap | /goto | /a | (/mo) | /nom | /changerskin | /jail | /freeze | /verifierarme | /areparer ");
				SendClientMessage(playerid, COLOR_YELLOW, "~~[CMD]Modo ~~ | /muteooc | /jailliste | /avertissementliste | /racecmds | /renvoie");
			}
			if (PlayerInfo[playerid][pAdmin] >= 2)
			{
				SendClientMessage(playerid, COLOR_WHITE,"~~[CMD]Admin 1~~ | /skydive | /noooc | (/a) /setteam | /grandeoreilles | /(/rtc) | /adp | /mettrejob | /update | /gethere /liervoitureint /superslap");
				SendClientMessage(playerid, COLOR_WHITE,"~~[CMD]Admin 1~~ | /enleveravertissement | /gotobanque | /gotoanpe (A.N.P.E)");
			}
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
				SendClientMessage(playerid, COLOR_BLUE,"~~[CMD]Admin 2~~ | /cnnn | /fourdive |/gotols | /aprison | /unprison | /aunlock | /agarer | /fuelcars | /changer | /vehslap");
				SendClientMessage(playerid, COLOR_BLUE,"~~[CMD]Admin 2~~ | /mark | /gotomark | /gotolv | /gotosf | /oldcar | /getcar | /changerage | /donnervie | /aclef");
				SendClientMessage(playerid, COLOR_BLUE,"~~[CMD]Admin 2~~ | /respawnallcars | /respawnrentbikes | /respawnrentcars | /unban | /momounbanip | /areparer | /avirer | /ainviter | /adonnerrang");
			}
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
			    SendClientMessage(playerid, COLOR_GREEN,"~~[CMD]Admin 3~~ | /mole | /unban | /logout | /logoutpl | /logoutall | /asellhouse | /asellbiz | /sellsbiz | /mettrechamp |/mk /areset /fermercompte");
			    SendClientMessage(playerid, COLOR_GREEN,"~~[CMD]Admin 3~~ | /destroycars | /donnervie | /setarmor | /forceskin | /exploser | /supervehslap | /favertissement | /fmettreavertissement /adivorce");
			}
			if (PlayerInfo[playerid][pAdmin] >= 1338)
			{
				SendClientMessage(playerid, COLOR_ORANGE,"~~[CMD]Admin 4~~ | /weather | /meteo | /adminirclevel | /adminlevel | /makeleader | /changerniveau | /changerprix /reglerheure");
				SendClientMessage(playerid, COLOR_ORANGE,"~~[CMD]Admin 4~~ | /asellcar | /changerstat | /argent | /gotobizint | /gotohouse | /gotohousint | /loadfs | /unloadfs ");
				SendClientMessage(playerid, COLOR_ORANGE,"~~[CMD]Admin 4~~ | /donnerargent | /donnerarme | /crash | /changernom | /tod | /startlotto | /desarmer | /resetrobtimer");
				SendClientMessage(playerid, COLOR_ORANGE,"~~[CMD]Admin 4~~ | /adeletecar | /acreatecar | /apark");
			}
			if (PlayerInfo[playerid][pAdmin] >= 1339)
			{
				SendClientMessage(playerid, COLOR_RED,"~~[CMD]Fondateur ~~ | /entreesbiz | /entreebiz | /entrermaison | /sortiemaison | /racecmds | /alerterouge | /stopalerterouge");
				SendClientMessage(playerid, COLOR_RED,"~~[CMD]Fondateur ~~ | /gotocar | /gotoincar | /an | /cnnn | /localisation | /deleteallobjects /reboot /xgoto");

			}
		}
		return 1;

    }
    if (strcmp(cmd, "/desarmer", true) == 0) // Moddded By CuervO_NegrO
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 2 || IsPlayerAdmin(playerid))
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /desarmer [playerid/PartOfName]");
					return 1;
				}
				//giveplayerid = strval(tmp);
	            giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
						ResetPlayerWeapons(giveplayerid);
						GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						format(string, sizeof(string), "[ADMIN]: %s a désarmé %s (%d).", sendername, giveplayer, giveplayerid);
						ABroadCast(COLOR_LIGHTRED, string, 5);
						new y, m, d;
						new h,mi,s;
						getdate(y,m,d);
						gettime(h,mi,s);
						printf("(%d/%d/%d)[%d:%d:%d] %s a désarmé %s",d,m,y,h,mi,s,sendername,giveplayer);
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD1, "   Ce joueur n'est pas connecté.");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   You are not an admin");
			}
		}
		return 1;
	}
	if (strcmp(cmd, "/maske", true) == 0)
	{
        if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] < 1)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas autorisé à utiliser cette commande!");
	            return 1;
	        }
			SendClientMessage(playerid, COLOR_GRAD1, "Joueur en ligne avec une cagoule :");
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
				    if(PlayerInfo[i][pMaskuse] == 1)
				    {
						GetPlayerName(i, sendername, sizeof(sendername));
						format(string, 256, "* ID: %d ** %s", i, sendername);
						SendClientMessage(playerid, COLOR_GRAD2, string);
					}
				}
			}
		}
		return 1;
//---------------------------------CNN------------------------------------------
	}
	if(strcmp(cmd, "/cnnn", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 1339)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[64];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /cnn [cnn textformat ~n~=Newline ~r~=Red ~g~=Green ~b~=Blue ~w~=White ~y~=Yellow]");
					return 1;
				}
				format(string, sizeof(string), "~%s: %s",sendername,result);
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
					    ShowPlayerDialog(i,-1,-1,"","","","");
					    ShowPlayerDialog(i,8888,DIALOG_STYLE_MSGBOX,"Message",string,"Ok","Ok");
						//GameTextForPlayer(i, string, 5000, 6);
					}
				}
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Vous n'êtes pas autorisés à utiliser cet commande!");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd,"/stopani",true)==0 || strcmp(cmd,"/stopanim",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        	ClearAnimations(playerid);
	        	if(UsingSmokeAnim[playerid] == 1)
	            {
	                UsingSmokeAnim[playerid] = 0;
	            }
	    }
	    return 1;
	}
	if(strcmp(cmd,"/skill",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        new x_nr[256];
			x_nr = strtok(cmdtext, idx);
			if(!strlen(x_nr)) {
				SendClientMessage(playerid, COLOR_WHITE, "|__________________ Skill Info __________________|");
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /skill [numero]");
		  		SendClientMessage(playerid, COLOR_GREY, "| 1: Avocat         				6: Boxer");
		  		SendClientMessage(playerid, COLOR_GREY, "| 2: Prostituée                	7: Pecheur");
		  		SendClientMessage(playerid, COLOR_GREY, "| 3: Dealer de Drogues");
		  		SendClientMessage(playerid, COLOR_GREY, "| 4: Journaliste");
		  		SendClientMessage(playerid, COLOR_GREY, "| 5: Mecanicien");
				SendClientMessage(playerid, COLOR_WHITE, "|________________________________________________|");
				return 1;
			}
			else if(strcmp(x_nr,"1",true) == 0)//Lawyer
			{
			    new level = PlayerInfo[playerid][pLawSkill];
				if(level >= 0 && level <= 50) { SendClientMessage(playerid, COLOR_YELLOW, "Votre niveau avocat = 1."); format(string, sizeof(string), "Vous devez lieré %d personnes de plus pour monter de niveau.", 50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 51 && level <= 100) { SendClientMessage(playerid, COLOR_YELLOW, "Votre niveau avocat = 2."); format(string, sizeof(string), "Vous devez lieré %d personnes de plus pour monter de niveau.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 101 && level <= 200) { SendClientMessage(playerid, COLOR_YELLOW, "Votre niveau avocat = 3."); format(string, sizeof(string), "Vous devez lieré %d personnes de plus pour monter de niveau.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 201 && level <= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Votre niveau avocat = 4."); format(string, sizeof(string), "Vous devez lieré %d personnes de plus pour monter de niveau.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 401) { SendClientMessage(playerid, COLOR_YELLOW, "Votre niveau avocat = 5."); }
			}
			else if(strcmp(x_nr,"2",true) == 0)//Whore
			{
			    new level = PlayerInfo[playerid][pSexSkill];
				if(level >= 0 && level <= 50) { SendClientMessage(playerid, COLOR_YELLOW, "Votre niveau de prostituée = 1."); format(string, sizeof(string), "Vous devez faire l'amour avec %d personnes de plus pour monter de niveau.", 50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 51 && level <= 100) { SendClientMessage(playerid, COLOR_YELLOW, "Votre niveau de prostituée = 2."); format(string, sizeof(string), "Vous devez faire l'amour avec %d personnes de plus pour monter de niveau.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 101 && level <= 200) { SendClientMessage(playerid, COLOR_YELLOW, "Votre niveau de prostituée = 3."); format(string, sizeof(string), "Vous devez faire l'amour avec %d personnes de plus pour monter de niveau.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 201 && level <= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Votre niveau de prostituée = 4."); format(string, sizeof(string), "Vous devez faire l'amour avec %d personnes de plus pour monter de niveau.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 401) { SendClientMessage(playerid, COLOR_YELLOW, "Votre niveau de prostituée = 5."); }
			}
			else if(strcmp(x_nr,"3",true) == 0)//Drugs Dealer
			{
			    new level = PlayerInfo[playerid][pDrugsSkill];
				if(level >= 0 && level <= 50) { SendClientMessage(playerid, COLOR_YELLOW, "Votre niveau de dealer de drogue = 1."); format(string, sizeof(string), "Vous devez vendre de la drogue à %d personnes de plus pour monter de niveau.", 50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 51 && level <= 100) { SendClientMessage(playerid, COLOR_YELLOW, "Votre niveau de dealer de drogue = 2."); format(string, sizeof(string), "Vous devez vendre de la drogue à %d personnes de plus pour monter de niveau.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 101 && level <= 200) { SendClientMessage(playerid, COLOR_YELLOW, "Votre niveau de dealer de drogue = 3."); format(string, sizeof(string), "Vous devez vendre de la drogue à %d personnes de plus pour monter de niveau.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 201 && level <= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Votre niveau de dealer de drogue = 4."); format(string, sizeof(string), "Vous devez vendre de la drogue à %d personnes de plus pour monter de niveau.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 401) { SendClientMessage(playerid, COLOR_YELLOW, "Votre niveau de dealer de drogue = 5."); }
			}
			else if(strcmp(x_nr,"4",true) == 0)//News Reporter
			{
			    new level = PlayerInfo[playerid][pNewsSkill];
				if(level >= 0 && level <= 50) { SendClientMessage(playerid, COLOR_YELLOW, "Votre niveau de journaliste = 1."); format(string, sizeof(string), "Vous devez utiliser /news encore %d fois pour monter de niveau.", 50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 51 && level <= 100) { SendClientMessage(playerid, COLOR_YELLOW, "Votre niveau de journaliste = 2."); format(string, sizeof(string), "Vous devez utiliser /news encore %d fois pour monter de niveau.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 101 && level <= 200) { SendClientMessage(playerid, COLOR_YELLOW, "Votre niveau de journaliste = 3."); format(string, sizeof(string), "Vous devez utiliser /news encore %d fois pour monter de niveau.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 201 && level <= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Votre niveau de journaliste = 4."); format(string, sizeof(string), "Vous devez utiliser /news encore %d fois pour monter de niveau.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 401) { SendClientMessage(playerid, COLOR_YELLOW, "Votre niveau de journaliste = 5."); }
			}
			else if(strcmp(x_nr,"5",true) == 0)//Car Mechanic
			{
			    new level = PlayerInfo[playerid][pMechSkill];
				if(level >= 0 && level <= 50) { SendClientMessage(playerid, COLOR_YELLOW, "Votre niveau de mecanicien = 1."); format(string, sizeof(string), "Vous devez remorquer/remplir encore %d voitue pour monter de niveau.", 50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 51 && level <= 100) { SendClientMessage(playerid, COLOR_YELLOW, "Votre niveau de mecanicien = 2."); format(string, sizeof(string), "Vous devez remorquer/remplir encore %d voitue pour monter de niveau.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 101 && level <= 200) { SendClientMessage(playerid, COLOR_YELLOW, "Votre niveau de mecanicien = 3."); format(string, sizeof(string), "Vous devez remorquer/remplir encore %d voitue pour monter de niveau.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 201 && level <= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Votre niveau de mecanicien = 4."); format(string, sizeof(string), "Vous devez remorquer/remplir encore %d voitue pour monter de niveau", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 401) { SendClientMessage(playerid, COLOR_YELLOW, "Votre niveau de mecanicien = 5."); }
			}
			else if(strcmp(x_nr,"6",true) == 0)//Boxer
			{
			    new level = PlayerInfo[playerid][pBoxSkill];
				if(level >= 0 && level <= 50) { SendClientMessage(playerid, COLOR_YELLOW, "Votre niveau de boxer = 1."); format(string, sizeof(string), "Vous devez gagné encore %d matches pour monter de niveau.", 50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 51 && level <= 100) { SendClientMessage(playerid, COLOR_YELLOW, "Votre niveau de boxer = 2."); format(string, sizeof(string), "Vous devez gagné encore %d matches pour monter de niveau.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 101 && level <= 200) { SendClientMessage(playerid, COLOR_YELLOW, "Votre niveau de boxer = 3."); format(string, sizeof(string), "Vous devez gagné encore %d matches pour monter de niveau.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 201 && level <= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Votre niveau de boxer = 4."); format(string, sizeof(string), "Vous devez gagné encore %d matches pour monter de niveau.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 401) { SendClientMessage(playerid, COLOR_YELLOW, "Votre niveau de boxer = 5."); }
			}
			else if(strcmp(x_nr,"7",true) == 0)//Fishing
			{
			    new level = PlayerInfo[playerid][pFishSkill];
				if(level >= 0 && level <= 50) { SendClientMessage(playerid, COLOR_YELLOW, "Votre niveau de pêcheur = 1."); format(string, sizeof(string), "Vous devez encore pêcher %d poissons pour monter de niveau.", 50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 51 && level <= 250) { SendClientMessage(playerid, COLOR_YELLOW, "Votre niveau de pêcheur = 2."); format(string, sizeof(string), "Vous devez encore pêcher %d poissons pour monter de niveau.", 250 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 251 && level <= 500) { SendClientMessage(playerid, COLOR_YELLOW, "Votre niveau de pêcheur = 3."); format(string, sizeof(string), "Vous devez encore pêcher %d poissons pour monter de niveau.", 500 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 501 && level <= 999) { SendClientMessage(playerid, COLOR_YELLOW, "Votre niveau de pêcheur = 4."); format(string, sizeof(string), "Vous devez encore pêcher %d poissons pour monter de niveau.", 1000 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 1000) { SendClientMessage(playerid, COLOR_YELLOW, "Votre niveau de pêcheur = 5."); }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Mauvais numero!");
			    return 1;
			}
	    }
	    return 1;
	}
	/*if(strcmp(cmd,"/agreementbroken",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        SendClientMessage(playerid, COLOR_YELLOW, "Agreement Violation Security has been activated.");
	        Security = 1;
	        SaveStuff();
	        GameModeExit();
	    }
	    return 1;
	}*/
	/*if(strcmp(cmd, "/cks", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] < 3)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   You are not an Admin !");
	            return 1;
	        }
	        new ck;
	        new number = 0;
	        new x_nr[256];
			x_nr = strtok(cmdtext, idx);
			if(!strlen(x_nr))
			{
			    for(new i = 0; i < sizeof(CKInfo); i++)
			    {
					number ++;
					if(CKInfo[i][cUsed] != 0)
					{
				        format(string, sizeof(string), "%d| %s wants to Character Kill %s.",number,CKInfo[i][cSendername],CKInfo[i][cGiveplayer]);
				        SendClientMessage(playerid, COLOR_WHITE, string);
			        }
			    }
				return 1;
			}
		    if(strcmp(x_nr,"accept",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
				    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /cks accept [cknumber]");
					return 1;
				}
				ck = strval(tmp);
				if(ck < 1 || ck > 10) { SendClientMessage(playerid, COLOR_GREY, "   CK Number can't be below 1 or above 10!"); return 1; }
				ck -= 1;
				new found1 = 255;
				new found2 = 255;
				for (new i = 0; i < MAX_PLAYERS; i++)
				{
				    if(IsPlayerConnected(i))
				    {
				        //if(found1 != 255 && found2 != 255)
				        //{
							new wstring[MAX_PLAYER_NAME];
							GetPlayerName(i, giveplayer, sizeof(giveplayer));
							format(string, sizeof(string), "%s", giveplayer);
							strmid(wstring, string, 0, strlen(string), 255);
							if(strcmp(CKInfo[ck][cSendername] ,wstring, true ) == 0 )
							{
							    found1 = i;
							}
							else if(strcmp(CKInfo[ck][cGiveplayer] ,wstring, true ) == 0 )
							{
							    found2 = i;
							}
						//}
					}
				}
				if(found1 != 255 && found2 != 255)
    			{
    			    GetPlayerName(found2, giveplayer, sizeof(giveplayer));
    			    format(string, sizeof(string), " An Admin has accepted your Character Kill, you can now perform your kill on %s.", giveplayer);
    			    SendClientMessage(found1, COLOR_LIGHTBLUE, string);
    			    OnCK[found1] = found2;
    			    GettingCK[found2] = found1;
    			    return 1;
    			}
    			else
    			{
    			    SendClientMessage(playerid, COLOR_YELLOW2, "Sorry, the Killer or Dieer ain't Online.");
    			    return 1;
    			}
			}
			else if(strcmp(x_nr,"delete",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
				    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /cks delete [cknumber]");
					return 1;
				}
				ck = strval(tmp);
				if(ck < 1 || ck > 10) { SendClientMessage(playerid, COLOR_GREY, "   CK Number can't be below 1 or above 10 !"); return 1; }
				ck -= 1;
				ClearCK(ck);
				ck += 1;
				format(string, sizeof(string), " You've cleared Character Kill nr: %d", ck);
				SendClientMessage(playerid, COLOR_WHITE, string);
				return 1;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Invalid CK command name !");
			    return 1;
			}
	    }
	    return 1;
	}*/
	/*if(strcmp(cmd, "/ck", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pLevel] < 5)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   You must be Level 5 in order to request a Character Kill !");
	            return 1;
	        }
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /ck [playerid/PartOfName]");
				return 1;
			}
	        giveplayerid = ReturnUser(tmp);
	        if(IsPlayerConnected(giveplayerid))
	        {
	            if(giveplayerid != INVALID_PLAYER_ID)
	            {
	                if(PlayerInfo[giveplayerid][pAdmin] >= 1)
	                {
	                    SendClientMessage(playerid, COLOR_GREY, "   Can't perform Character Kills on Admins !");
	                    return 1;
	                }
	                else if(PlayerInfo[giveplayerid][pLevel] < 5)
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   The Player you want to Character Kill must be Level 5 !");
			            return 1;
			        }
					ABroadCast(COLOR_YELLOW, " A New Character Kill request has come in, use /cks.", 3);
					new found = 0;
					for(new i = 0; i < sizeof(CKInfo); i++)
			    	{
			    	    if(found != 1)
			    	    {
							if(CKInfo[i][cUsed] != 1)
							{
							    found = 1;
							    GetPlayerName(playerid, sendername, sizeof(sendername));
							    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							    format(string, sizeof(string), "%s", sendername);
							    strmid(CKInfo[i][cSendername], string, 0, strlen(string), 255);
							    format(string, sizeof(string), "%s", giveplayer);
								strmid(CKInfo[i][cGiveplayer], string, 0, strlen(string), 255);
								CKInfo[i][cUsed] = 1;
								SaveCK();
							}
						}
			    	}
			    	if(found != 1)
			    	{
			    	    SendClientMessage(playerid, COLOR_YELLOW2, "Sorry, all the Character Kill Slots are used, try again later.");
			    	}
			    	else
			    	{
			    	    SendClientMessage(playerid, COLOR_YELLOW2, "Your Character Kill Request has been added to the list, you'll hear from an Admin soon.");
			    	}
			    	return 1;
	            }
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté!");
	            return 1;
	        }
	    }
	    return 1;
	}*/
    if(strcmp(cmd, "/donnerlicense", true) == 0 || strcmp(cmd, "/donnerpermis", true) == 0 || strcmp(cmd, "/donnerpermi", true) == 0)
	//if(strcmp(cmd, "/donnerlicense", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(IsAnInstructor(playerid))
	        {
	            if(PlayerInfo[playerid][pRank] < 1)
	            {
	                //SendClientMessage(playerid, COLOR_GREY, "   Only Rank 2 or higher can give away a License !");
	                return 1;
	            }
	            new x_nr[256];
				x_nr = strtok(cmdtext, idx);
				if(!strlen(x_nr)) {
				    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /donnerlicense [name] [playerid/PartOfName] [price]");
				    SendClientMessage(playerid, COLOR_WHITE, "Available names: conduire, voler, navigation, peche, poidlourd, moto.");
					return 1;
				}
			    if(strcmp(x_nr,"conduire",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /givelicense conduire [playerid/PartOfName] [price]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {

							tmp = strtok(cmdtext, idx);
							if(!strlen(tmp))
							{
								SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /givelicense conduire [playerid/ParOfName] [price]");
								return 1;
							}
							new price;
							price = strval(tmp);
							if(price < 50 || price > 500) { SendClientMessage(playerid, COLOR_GREY, "   Price not lower then 50, or above 500!"); return 1; }
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            /*format(string, sizeof(string), " Tu as donner la license de conduire a %s.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), " Instructeur %s vous propose un permis de conduire.",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pCarLic] = 1;*/
					        PlayerInfo[giveplayerid][pPointPermis] = 15;
					        format(string, sizeof(string), " You offerd %s to buy drivers license for $%d .", giveplayer, price);
							SendClientMessage(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), " School instructor %s wants to sell you drivers license for $%d, (type /accepter permis) to buy.", sendername, price);
							SendClientMessage(giveplayerid, COLOR_WHITE, string);
							LicenseOffer[giveplayerid] = playerid;
							LicensePrice[giveplayerid] = price;
							LicenseType[giveplayerid] = 1;
					        return 1;
				        }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté!");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"voler",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /givelicense voler [playerid/PartOfName] [price]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
							tmp = strtok(cmdtext, idx);
							if(!strlen(tmp))
							{
								SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /givelicense voler [playerid/ParOfName] [price]");
								return 1;
							}
							new price;
							price = strval(tmp);
							if(price < 500 || price > 25000) { SendClientMessage(playerid, COLOR_GREY, "   Price not lower then 500, or above 25000!"); return 1; }
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            /*format(string, sizeof(string), " You've given a Flying License to %s.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), " Instructor %s has given you a Flying License.",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pFlyLic] = 1;*/
					        format(string, sizeof(string), " You offerd %s to buy flying license for $%d .", giveplayer, price);
							SendClientMessage(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), " School instructor %s wants to sell you flying license for $%d, (type /accepter permis) to buy.", sendername, price);
							SendClientMessage(giveplayerid, COLOR_WHITE, string);
							LicenseOffer[giveplayerid] = playerid;
							LicensePrice[giveplayerid] = price;
							LicenseType[giveplayerid] = 2;
					        return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté!");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"navigation",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /donnerlicense navigation [playerid/PartOfName] [price]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
							tmp = strtok(cmdtext, idx);
							if(!strlen(tmp))
							{
								SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /donnerlicense navigation [playerid/ParOfName] [price]");
								return 1;
							}
							new price;
							price = strval(tmp);
							if(price < 100 || price > 10000) { SendClientMessage(playerid, COLOR_GREY, "   Price not lower then 100, or above 10000!"); return 1; }
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            /*format(string, sizeof(string), " You've given a Sailing License to %s.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), " Instructor %s has given you a Sailing License.",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pBoatLic] = 1;*/
					        format(string, sizeof(string), " You offerd %s to buy sailing license for $%d .", giveplayer, price);
							SendClientMessage(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), " School instructor %s wants to sell you sailing license for $%d, (type /accepter permis) to buy.", sendername, price);
							SendClientMessage(giveplayerid, COLOR_WHITE, string);
							LicenseOffer[giveplayerid] = playerid;
							LicensePrice[giveplayerid] = price;
							LicenseType[giveplayerid] = 3;
					        return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté!");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"peche",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /donnerlicense peche [playerid/PartOfName] [prix]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
							tmp = strtok(cmdtext, idx);
							if(!strlen(tmp))
							{
								SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /donnerlicense peche [playerid/ParOfName] [prix]");
								return 1;
							}
							new price;
							price = strval(tmp);
							if(price < 100 || price > 1000) { SendClientMessage(playerid, COLOR_GREY, "   Price not lower then 100, or above 1000!"); return 1; }
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				           /* format(string, sizeof(string), " Tu as donné da license de peche a %s.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), " L'instructeur %s vous a donner le permis de peche.",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pFishLic] = 1;*/
					        format(string, sizeof(string), " tu offre a %s pour acheter le permis de peche pour $%d .", giveplayer, price);
							SendClientMessage(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), " l'instructeur %s veut te vendre un permis de peche pour $%d, (type /accepter permis) pour acheter.", sendername, price);
							SendClientMessage(giveplayerid, COLOR_WHITE, string);
							LicenseOffer[giveplayerid] = playerid;
							LicensePrice[giveplayerid] = price;
							LicenseType[giveplayerid] = 4;
					        return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté!");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"poidlourd",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /donnerlicense poidlourd [playerid/PartOfName] [prix]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
							tmp = strtok(cmdtext, idx);
							if(!strlen(tmp))
							{
								SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /donnerlicense poidlourd [playerid/ParOfName] [prix]");
								return 1;
							}
							new price;
							price = strval(tmp);
							if(price < 100 || price > 1000) { SendClientMessage(playerid, COLOR_GREY, "   Price not lower then 100, or above 1000!"); return 1; }
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				           /* format(string, sizeof(string), " Tu as donné da license de peche a %s.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), " L'instructeur %s vous a donner le permis de peche.",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pFishLic] = 1;*/
					        format(string, sizeof(string), " tu offre a %s pour acheter le permis poidlourd pour $%d .", giveplayer, price);
							SendClientMessage(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), " l'instructeur %s veut te vendre un permis poid lourd pour $%d, (type /accepter permis) pour acheter.", sendername, price);
							SendClientMessage(giveplayerid, COLOR_WHITE, string);
							LicenseOffer[giveplayerid] = playerid;
							LicensePrice[giveplayerid] = price;
							LicenseType[giveplayerid] = 6;
					        return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté!");
					    return 1;
     				}
				}
				else if(strcmp(x_nr,"moto",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /donnerlicense moto [playerid/PartOfName] [prix]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
							tmp = strtok(cmdtext, idx);
							if(!strlen(tmp))
							{
								SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /donnerlicense moto [playerid/ParOfName] [prix]");
								return 1;
							}
							new price;
							price = strval(tmp);
							if(price < 100 || price > 1000) { SendClientMessage(playerid, COLOR_GREY, "   Price not lower then 100, or above 1000!"); return 1; }
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				           /* format(string, sizeof(string), " Tu as donné da license de peche a %s.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), " L'instructeur %s vous a donner le permis de peche.",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pFishLic] = 1;*/
					        format(string, sizeof(string), " tu offre a %s pour acheter le permis de moto pour $%d .", giveplayer, price);
							SendClientMessage(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), " l'instructeur %s veut te vendre un permis de moto pour $%d, (type /accepter permis) pour acheter.", sendername, price);
							SendClientMessage(giveplayerid, COLOR_WHITE, string);
							LicenseOffer[giveplayerid] = playerid;
							LicensePrice[giveplayerid] = price;
							LicenseType[giveplayerid] = 7;
					        return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté!");
					    return 1;
     				}
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   You are not a School Instructor !");
	            return 1;
	        }
	    }
	    return 1;
    }
    if(strcmp(cmd, "/weppermis", true) == 0 || strcmp(cmd, "/donnerpermisarme", true) == 0 || strcmp(cmd, "/dpa", true) == 0)
	//if(strcmp(cmd, "/donnerpermisarme", true) == 0 || strcmp(cmd, "/dpa", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)
	        {
	            if(PlayerInfo[playerid][pRank] < 3)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "Seul les personne plus de rang 3 peuvent donner le permis arme!");
	                return 1;
	            }
	                new x_nr[256];
				    x_nr = strtok(cmdtext, idx);
				    if(!strlen(x_nr)) {
				    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /donnerpermisarme [nom] [playerid/PartOfName]");
				    SendClientMessage(playerid, COLOR_WHITE, "Noms Disponibles: arme.");
					return 1;
				}
			    if(strcmp(x_nr,"arme",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /donnerpermisarme [playerid/PartOfName] [prix]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
							tmp = strtok(cmdtext, idx);
							if(!strlen(tmp))
							{
								SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /donnerpermisarme [playerid/ParOfName] [prix]");
								return 1;
							}
							new price;
							price = strval(tmp);
							if(price < 1 || price > 15000) { SendClientMessage(playerid, COLOR_GREY, "Le prix ne peux pas être en desous de $1, et au desus de $15000."); return 1; }
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            /*format(string, sizeof(string), " You've given a Weapon License to %s.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), " Instructor %s has given you a Weapon License.",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pGunLic] = 1;*/
					        format(string, sizeof(string), "Vous offrez à  %s d'acheter le permi arme pour $%d .", giveplayer, price);
							SendClientMessage(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), "Officier %s veux vous vendre un permis d'arme pour $%d, (type /accepter permis) pour acheter.", sendername, price);
							SendClientMessage(giveplayerid, COLOR_WHITE, string);
							LicenseOffer[giveplayerid] = playerid;
							LicensePrice[giveplayerid] = price;
							LicenseType[giveplayerid] = 5;
					        return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté!");
					    return 1;
					}
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas policier!");
	            return 1;
	        }
	    }
	    return 1;
	}
    if(strcmp(cmd, "/demarrerlecon", true) == 0 || strcmp(cmd, "/startlesson", true) == 0 || strcmp(cmd, "/startpermis", true) == 0)
	//if(strcmp(cmd, "/startlesson", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(IsAnInstructor(playerid))
	        {
	            tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
				    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /startlesson [playerid/PartOfName]");
				    return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        GetPlayerName(playerid, sendername, sizeof(sendername));
				        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				        format(string, sizeof(string), " You've started %s's Lesson.",giveplayer);
				        SendClientMessage(playerid, COLOR_WHITE, string);
				        format(string, sizeof(string), " Instructor %s has started your Lesson.",sendername);
				        SendClientMessage(giveplayerid, COLOR_WHITE, string);
				        TakingLesson[giveplayerid] = 1;
				    }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté!");
				    return 1;
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   You are not a School Instructor !");
	            return 1;
	        }
	    }
	    return 1;
	}
    if(strcmp(cmd, "/arreterlecon", true) == 0 || strcmp(cmd, "/stoplesson", true) == 0 || strcmp(cmd, "/stoppermis", true) == 0)
	//if(strcmp(cmd, "/stoplesson", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(IsAnInstructor(playerid))
	        {
	            tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
				    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /stoplesson [playerid/PartOfName]");
				    return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        if(TakingLesson[giveplayerid] != 1)
				        {
				            SendClientMessage(playerid, COLOR_GREY, "   That player is not taking a Lesson !");
				            return 1;
				        }
				        GetPlayerName(playerid, sendername, sizeof(sendername));
				        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				        format(string, sizeof(string), " You've stopped %s's Lesson.",giveplayer);
				        SendClientMessage(playerid, COLOR_WHITE, string);
				        format(string, sizeof(string), " Instructor %s has stopped your Lesson.",sendername);
				        SendClientMessage(giveplayerid, COLOR_WHITE, string);
				        TakingLesson[giveplayerid] = 0;
				    }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté!");
				    return 1;
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   You are not a School Instructor !");
	            return 1;
	        }
	    }
	    return 1;
	}
	////////////////////////////////////////////////////////////// FNO Création//// MOTD = Message of the Day////////////////////////////////////////////////////
	if(strcmp(cmd, "/familles", true) == 0 || strcmp(cmd, "/listefno", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    new number = 0;
		        for(new i = 0; i < sizeof(FamilyInfo); i++)
		        {
		            number ++;
		            format(string, sizeof(string), "Family %d| Name: %s | Leader: %s | Members: %d.",number,FamilyInfo[i][FamilyName],FamilyInfo[i][FamilyLeader],FamilyInfo[i][FamilyMembers]);
		            SendClientMessage(playerid, COLOR_WHITE, string);
		        }
		        return 1;
	        }
	        new family = strval(tmp);
	        if(family < 1 || family > 10) { SendClientMessage(playerid, COLOR_GREY, "Le numéro de la FNO doit être compris entre 1 et 10 !"); return 1; }
			family -= 1;
			if(FamilyInfo[family][FamilyTaken] != 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "Ce numéro de FNO n'a pas encore été pris !");
			    return 1;
			}
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
			    if(IsPlayerConnected(i))
			    {
			        if(PlayerInfo[i][pFMember] == family)
			        {
			            GetPlayerName(i, giveplayer, sizeof(giveplayer));
			            format(string, sizeof(string), " Family %d: %s | Rank: %d.",family,giveplayer,PlayerInfo[i][pRank]);
			            SendClientMessage(playerid, COLOR_GREY, string);
			        }
			    }
			}
	    }
	    return 1;
	}
	if(strcmp(cmd, "/fno", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pFMember] == 255)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas dans une FNO (Faction Non Officielle) !");
	            return 1;
	        }
	        new family = PlayerInfo[playerid][pFMember];
	        new wstring[128];
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "%s", sendername);
			strmid(wstring, string, 0, strlen(string), 255);
	        if(strcmp(FamilyInfo[family][FamilyLeader],wstring, true ) == 0 )
			{
			    new x_nr[256];
				x_nr = strtok(cmdtext, idx);
				if(!strlen(x_nr)) {
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /fno [Commande]");
					SendClientMessage(playerid, COLOR_WHITE, "COMMANDES: Nom, MOTD, Color, Spawn, Inviter, Virer, Giverank, Coffre, Taxe");
					SendClientMessage(playerid, COLOR_WHITE, "NOTE: MOTD = Message of the Day (Message du Jour)");
					return 1;
				}
			    if(strcmp(x_nr,"name",true) == 0 || strcmp(x_nr,"nom",true) == 0)
				{
                    if(PlayerInfo[playerid][pRank] <= 4)
			        {
			             SendClientMessage(playerid, COLOR_GREY, "   Votre rang n'est pas suffisant !");
			             return 1;
                    }
				    new length = strlen(cmdtext);
					while ((idx < length) && (cmdtext[idx] <= ' '))
					{
						idx++;
					}
					new offset = idx;
					new result[64];
					while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
					{
						result[idx - offset] = cmdtext[idx];
						idx++;
					}
					result[idx - offset] = EOS;
					if(!strlen(result))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /fno Nom [FNO Nom]");
						return 1;
					}
					strmid(FamilyInfo[family][FamilyName], result, 0, strlen(result), 255);
					SaveFamilies();
				    SendClientMessage(playerid, COLOR_WHITE, "Vous avez modifié le nom de votre FNO.");
				}
				else if(strcmp(x_nr,"coffre",true) == 0)
				{
				    x_nr = strtok(cmdtext, idx);
				    if(!strlen(x_nr))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /fno coffre [confirmer]");
						if(FamilyInfo[family][FamilySafe] != 0)
						{
					    	SendClientMessage(playerid, COLOR_GREY,"L'achat d'un coffre vous coutera $50,000 !");
					    	SendClientMessage(playerid, COLOR_WHITE,"NOTE: L'achat d'un deuxième coffre détruira le premier coffre et son contenu.");
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY,"L'achat d'un coffre vous coutera $50,000 !");
						    SendClientMessage(playerid, COLOR_WHITE,"NOTE: l'achat d'un coffre permet à votre faction d'entreposer de la Drogue, Cash et Materiaux.");
						}
					    return 1;
					}
					if(strcmp(x_nr,"confirmer",true) == 0)
					{
                        if(PlayerInfo[playerid][pRank] <= 4)
                        {
			                SendClientMessage(playerid, COLOR_GREY, "   Votre rang n'est pas suffisant !");
			                return 1;
                        }
						if(PlayerInfo[playerid][pCash] < 49999)
						{
			    			SendClientMessage(playerid, COLOR_GRAD1, "   Vous n'avez pas assez d'argent !");
							return 1;
						}
					    if(FamilyInfo[family][FamilySafe] != 0)
					    {
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, " Vous avez modifé la position du coffre de votre famille.");
					    }
						else
						{
						    SendClientMessage(playerid, COLOR_LIGHTBLUE, " Vous avez acheté un Coffre.");
						    SendClientMessage(playerid, COLOR_WHITE, "NOTE: Utilisez /coffreaide pour consulter les aides.");
						}
						PlayerInfo[playerid][pCash] = PlayerInfo[playerid][pCash]-50000;
						SafeGivePlayerMoney(playerid,-50000);
						GetPlayerPos(playerid, FamilyInfo[family][FamilySafePos][0],FamilyInfo[family][FamilySafePos][1],FamilyInfo[family][FamilySafePos][2]);
						DestroyPickup(FamilyInfo[family][PickupID]);
						FamilyInfo[family][PickupID] = CreatePickup(1239, 23, FamilyInfo[family][FamilySafePos][0],FamilyInfo[family][FamilySafePos][1], FamilyInfo[family][FamilySafePos][2]);
						FamilyInfo[family][FamilySafe] = 1;
						FamilyInfo[family][FamilyCash] = 0;
						FamilyInfo[family][FamilyCrack] = 0;
						FamilyInfo[family][FamilyMats] = 0;
						SaveFamilies();
						return 1;
					}
				}
				else if(strcmp(x_nr,"taxe",true) == 0)
				{
                   if(PlayerInfo[playerid][pRank] <= 4)
			       {
			             SendClientMessage(playerid, COLOR_GREY, "   Votre rang n'est pas suffisant !");
			             return 1;
                    }
					tmp = strtok(cmdtext, idx);
					if(!strlen(x_nr))
						{
					    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /fno taxe [pourcentage]");
					    return 1;
						}
					new tax = strval(tmp);
					if (tax < 1 || tax > 25)
					    {
					    SendClientMessage(playerid, COLOR_WHITE, "La taxe doit être entre 1 et 25 pourcents !");
					    return 1;
					    }
					FamilyInfo[family][FamilyTax] = tax;
					SaveFamilies();
				    SendClientMessage(playerid, COLOR_WHITE, "Vous avez modifié les Taxes que vous soutirez a vos membres.");
				}
				else if(strcmp(x_nr,"motd",true) == 0 || strcmp(x_nr,"mdj",true) == 0 || strcmp(x_nr,"messagedujour",true) == 0)
				{
                    if(PlayerInfo[playerid][pRank] <= 4)
			        {
			             SendClientMessage(playerid, COLOR_GREY, "   Votre rang n'est pas suffisant !");
			             return 1;
                    }
				    new length = strlen(cmdtext);
					while ((idx < length) && (cmdtext[idx] <= ' '))
					{
						idx++;
					}
					new offset = idx;
					new result[64];
					while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
					{
						result[idx - offset] = cmdtext[idx];
						idx++;
					}
					result[idx - offset] = EOS;
					if(!strlen(result))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /fno MOTD [FNO MOTD Texte]");
						return 1;
					}
					strmid(FamilyInfo[family][FamilyMOTD], result, 0, strlen(result), 255);
					SaveFamilies();
				    SendClientMessage(playerid, COLOR_WHITE, "Vous avez modifié le Message du Jour de votre FNO.");
				}
				else if(strcmp(x_nr,"color",true) == 0 || strcmp(x_nr,"couleur",true) == 0)
				{
                    if(PlayerInfo[playerid][pRank] <= 4)
			        {
			             SendClientMessage(playerid, COLOR_GREY, "   Votre rang n'est pas suffisant !");
			             return 1;
                    }
				    new length = strlen(cmdtext);
					while ((idx < length) && (cmdtext[idx] <= ' '))
					{
						idx++;
					}
					new offset = idx;
					new result[64];
					while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
					{
						result[idx - offset] = cmdtext[idx];
						idx++;
					}
					result[idx - offset] = EOS;
					if(!strlen(result))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /fno couleur [Exemple de Couleur: 0xFFFFFFAA]");
						return 1;
					}
					if(offset < 10)
					{
					    SendClientMessage(playerid, COLOR_GREY, "Mauvais numéro de couleur ! Regardez l'exemple : 0xFFFFFFAA");
					    return 1;
					}
					strmid(FamilyInfo[family][FamilyMOTD], result, 0, strlen(result), 255);
					SaveFamilies();
				    SendClientMessage(playerid, COLOR_WHITE, "Vous avez modifié la Couleur de votre FNO.");
				}
				else if(strcmp(x_nr,"spawn",true) == 0)
				{
                    if(PlayerInfo[playerid][pRank] <= 4)
			        {
			             SendClientMessage(playerid, COLOR_GREY, "   Votre rang n'est pas suffisant !");
			             return 1;
                    }
				    GetPlayerPos(playerid, FamilyInfo[family][FamilySpawn][0],FamilyInfo[family][FamilySpawn][1],FamilyInfo[family][FamilySpawn][2]);
				    GetPlayerFacingAngle(playerid, FamilyInfo[family][FamilySpawn][3]);
				    FamilyInfo[family][FamilyInterior] = GetPlayerInterior(playerid);
				    SaveFamilies();
				    SendClientMessage(playerid, COLOR_WHITE, "Vous avez modifié le lieu de Spawn de votre FNO.");
				}
				else if(strcmp(x_nr,"invite",true) == 0 || strcmp(x_nr,"inviter",true) == 0)
				{
                    if(PlayerInfo[playerid][pRank] <= 4)
			        {
			             SendClientMessage(playerid, COLOR_GREY, "   Votre rang n'est pas suffisant !");
			             return 1;
                    }
				    if(FamilyInfo[family][FamilyMembers] >= 15)
				    {
				        SendClientMessage(playerid, COLOR_GREY, "Votre FNO a atteint un nombre de membres égale a 15, vous ne pouvez plus en inviter !");
				        return 1;
				    }
					tmp = strtok(cmdtext, idx);
					if(!strlen(x_nr)) {
					    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /fno inviter [playerid/PartOfName]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if(PlayerInfo[giveplayerid][pFMember] != 255)
					        {
					            SendClientMessage(playerid, COLOR_GREY, "Ce joueur est déja dans une FNO !");
					            return 1;
					        }
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					        format(string, sizeof(string), " Vous avez invité %s a joindre votre Faction Non-Officielle '%s'.",giveplayer, FamilyInfo[family][FamilyName]);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), " %s vous a invité a rejoindre la Faction Non-Officielle '%s', vous en faites maintenant partie.",sendername, FamilyInfo[family][FamilyName]);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pFMember] = family;
					        PlayerInfo[giveplayerid][pRank] = 1;
					        FamilyInfo[family][FamilyMembers] ++;
					        SaveFamilies();
					        return 1;
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté!");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"uninvite",true) == 0 || strcmp(x_nr,"virer",true) == 0)
				{
                    if(PlayerInfo[playerid][pRank] <= 4)
			        {
			             SendClientMessage(playerid, COLOR_GREY, "   Votre rang n'est pas suffisant !");
			             return 1;
                    }
				    tmp = strtok(cmdtext, idx);
					if(!strlen(x_nr)) {
					    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /fno virer [playerid/PartOfName]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if(PlayerInfo[giveplayerid][pFMember] != family)
					        {
					            SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas dans votre FNO !");
					            return 1;
					        }
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					        format(string, sizeof(string), " Vous avez viré %s de votre FNO.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), " Le Leader %s vous a viré de sa FNO.",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pFMember] = 255;
					        PlayerInfo[giveplayerid][pRank] = 0;
					        FamilyInfo[family][FamilyMembers] --;
					        SaveFamilies();
					        return 1;
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté!");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"rank",true) == 0 || strcmp(x_nr,"giverank",true) == 0 || strcmp(x_nr,"donnerrang",true) == 0)
				{
                    if(PlayerInfo[playerid][pRank] <= 4)
			        {
			             SendClientMessage(playerid, COLOR_GREY, "   Votre rang n'est pas suffisant !");
			             return 1;
                    }
				    tmp = strtok(cmdtext, idx);
					if(!strlen(x_nr)) {
					    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /fno rank [RankNr] [playerid/PartOfName]");
					    return 1;
					}
					new rank = strval(tmp);
					if(rank < 1 || rank > 6) { SendClientMessage(playerid, COLOR_WHITE, "Les numéros de Rang doivent être compris entre 1 et 6 ! "); SendClientMessage(playerid, COLOR_WHITE, "USAGE: /fno rank [RankNr] [playerid/PartOfName]"); return 1; }
					tmp = strtok(cmdtext, idx);
					if(!strlen(x_nr)) {
					    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /fno rank [RankNr] [playerid/PartOfName]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if(PlayerInfo[giveplayerid][pFMember] != family)
					        {
					            SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas dans votre FNO !");
					            return 1;
					        }
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					        format(string, sizeof(string), " Vous avez promus %s au Rang %d.",giveplayer,rank);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), " Le Leader %s vous a promus au Rang %d.",sendername,rank);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pRank] = rank;
					        return 1;
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté!");
					    return 1;
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Nom de modification invalide.");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas le Leader de votre FNO !");
			    return 1;
			}
	    }
	    return 1;
	}
	if(strcmp(cmd, "/fdeposer", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pFMember] == 255)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Vous ne faites pas parti d'une FNO (Faction Non Officielle) !");
	            return 1;
	        }
	        if(FamilyInfo[PlayerInfo[playerid][pFMember]][FamilySafe] == 0)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "   Votre FNO n'a pas de coffre !");
				return 1;
			}
	        if(!IsPlayerInRangeOfPoint(playerid, 2, FamilyInfo[PlayerInfo[playerid][pFMember]][FamilySafePos][0], FamilyInfo[PlayerInfo[playerid][pFMember]][FamilySafePos][1], FamilyInfo[PlayerInfo[playerid][pFMember]][FamilySafePos][2]))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   You are not at your Family Safe !");
				return 1;
			}
	        tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /fdeposer [nom] [montant]");
				SendClientMessage(playerid, COLOR_GREY, "Noms Disponibles: Argent, Drogue, Mats");
				return 1;
			}
			if(strcmp(tmp,"argent",true) == 0 || strcmp(tmp,"cash",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /fdeposer [nom] [montant]");
					SendClientMessage(playerid, COLOR_GREY, "Noms Disponibles: Argent, Drogue, Mats");
					return 1;
				}
				new deposit = strvalEx(tmp);
				if(deposit > 1000000 || FamilyInfo[PlayerInfo[playerid][pFMember]][FamilyCash] > 1000000)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   You can't have more than $1,000,000 in your safe !");
					return 1;
				}
				if(deposit > PlayerInfo[playerid][pCash] || deposit < 1)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   Vous ne disposez pas de cette somme !");
					return 1;
				}
				GetPlayerName(playerid, sendername, sizeof(sendername));
				PlayerInfo[playerid][pCash] = PlayerInfo[playerid][pCash]-deposit;
				SafeGivePlayerMoney(playerid,-deposit);
				FamilyInfo[PlayerInfo[playerid][pFMember]][FamilyCash] = FamilyInfo[PlayerInfo[playerid][pFMember]][FamilyCash]+deposit;
				format(string, sizeof(string), " %s prend de l'argent, et le met dans le coffre.",sendername);
				ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				format(string, sizeof(string), "Vous avez déposé $%d dans le coffre de votre FNO.", deposit);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				printf("%s à déposé %d$ dans le coffre de sa FNO.", sendername,deposit);
				SaveFamilies();
				return 1;
			}
			if(strcmp(tmp,"crack",true) == 0 || strcmp(tmp,"drogue",true) == 0 || strcmp(tmp,"drogues",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /fdeposer [nom] [montant]");
					SendClientMessage(playerid, COLOR_GREY, "Noms Disponibles: Argent, Drogue, Mats");
					return 1;
				}
				new deposit = strvalEx(tmp);
				if(deposit > 250 || FamilyInfo[PlayerInfo[playerid][pFMember]][FamilyCrack] > 250)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   You can't have more than 250 grams of Crack in your safe !");
					return 1;
				}
				if(deposit > PlayerInfo[playerid][pDrugs] || deposit < 1)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   Vous ne disposez pas de cette somme !");
					return 1;
				}
				GetPlayerName(playerid, sendername, sizeof(sendername));
				PlayerInfo[playerid][pDrugs] = PlayerInfo[playerid][pDrugs]-deposit;
				FamilyInfo[PlayerInfo[playerid][pFMember]][FamilyCrack] = FamilyInfo[PlayerInfo[playerid][pFMember]][FamilyCrack]+deposit;
				format(string, sizeof(string), " %s prend de la drogue, et la met dans le coffre.",sendername);
				ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				format(string, sizeof(string), "Vous avez déposé %d grammes de drogue dans le coffre de votre FNO.", deposit);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				printf("%s à déposé %d grammes de drogue dans le coffre de sa FNO.", sendername,deposit);
				SaveFamilies();
				return 1;
			}
			if(strcmp(tmp,"materiaux",true) == 0 || strcmp(tmp,"mats",true) == 0 || strcmp(tmp,"mat",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /fdeposer [nom] [montant]");
					SendClientMessage(playerid, COLOR_GREY, "Noms Disponibles: Argent, Drogue, Mats");
					return 1;
				}
				new deposit = strvalEx(tmp);
				if(deposit > 100000 || FamilyInfo[PlayerInfo[playerid][pFMember]][FamilyMats] > 100000)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   You can't have more than 100000 Materials in your safe !");
					return 1;
				}
				if(deposit > PlayerInfo[playerid][pMats] || deposit < 1)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   Vous ne disposez pas de cette somme !");
					return 1;
				}
				GetPlayerName(playerid, sendername, sizeof(sendername));
				PlayerInfo[playerid][pMats] = PlayerInfo[playerid][pMats]-deposit;
				FamilyInfo[PlayerInfo[playerid][pFMember]][FamilyMats] = FamilyInfo[PlayerInfo[playerid][pFMember]][FamilyMats]+deposit;
				format(string, sizeof(string), " %s prend du matéiel, et le met dans le coffre.",sendername);
				ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				format(string, sizeof(string), "Vous avez déposé %d materiaux dans le coffre de votre FNO.", deposit);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				printf("%s à déposé %d matériaux dans le coffre de sa FNO.", sendername,deposit);
				SaveFamilies();
				return 1;
			}
	    }
	    return 1;
	}
	if(strcmp(cmd, "/fretirer", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pFMember] == 255)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Vous ne faites pas parti d'une FNO (Faction Non Officielle) !");
	            return 1;
	        }
	        if(FamilyInfo[PlayerInfo[playerid][pFMember]][FamilySafe] == 0)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "   Votre FNO n'a pas de coffre !");
				return 1;
			}
			if(PlayerInfo[playerid][pRank] < 5)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Votre rang n'est pas suffisant !");
			    return 1;
			}
	        if(!IsPlayerInRangeOfPoint(playerid, 2, FamilyInfo[PlayerInfo[playerid][pFMember]][FamilySafePos][0], FamilyInfo[PlayerInfo[playerid][pFMember]][FamilySafePos][1], FamilyInfo[PlayerInfo[playerid][pFMember]][FamilySafePos][2]))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   You are not at your Family Safe !");
				return 1;
			}
	        tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /fretirer [nom] [montant]");
				SendClientMessage(playerid, COLOR_GREY, "Noms Disponibles: Argent, Drogue, Mats");
				return 1;
			}
			if(strcmp(tmp,"argent",true) == 0 || strcmp(tmp,"cash",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /fretirer [nom] [montant]");
					SendClientMessage(playerid, COLOR_GREY, "Noms Disponibles: Argent, Drogue, Mats");
					return 1;
				}
				new withdraw = strvalEx(tmp);
				if(withdraw > FamilyInfo[PlayerInfo[playerid][pFMember]][FamilyCash] || withdraw < 1)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   Cette somme n'est pas disponible !");
					return 1;
				}
				GetPlayerName(playerid, sendername, sizeof(sendername));
				PlayerInfo[playerid][pCash] = PlayerInfo[playerid][pCash]+withdraw;
				SafeGivePlayerMoney(playerid,withdraw);
				FamilyInfo[PlayerInfo[playerid][pFMember]][FamilyCash] = FamilyInfo[PlayerInfo[playerid][pFMember]][FamilyCash]-withdraw;
				format(string, sizeof(string), " %s a retiré de l'argent du coffre.",sendername);
				ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				format(string, sizeof(string), "Vous avez retiré $%d du coffre de votre FNO.", withdraw);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				printf("%s à retiré %d$ du coffre de sa FNO.", sendername,withdraw);
				SaveFamilies();
				return 1;
			}
			if(strcmp(tmp,"crack",true) == 0 || strcmp(tmp,"drogue",true) == 0 || strcmp(tmp,"drogues",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /fretirer [nom] [montant]");
					SendClientMessage(playerid, COLOR_GREY, "Noms Disponibles: Argent, Drogue, Mats");
					return 1;
				}
				new withdraw = strvalEx(tmp);
				if(withdraw > FamilyInfo[PlayerInfo[playerid][pFMember]][FamilyCrack] || withdraw < 1)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   Cette somme n'est pas disponible !");
					return 1;
				}
				if(withdraw > 25 || PlayerInfo[playerid][pDrugs]+withdraw > 25)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   You can't carry more than 25 at once !");
					return 1;
				}
				GetPlayerName(playerid, sendername, sizeof(sendername));
				PlayerInfo[playerid][pDrugs] = PlayerInfo[playerid][pDrugs]+withdraw;
				FamilyInfo[PlayerInfo[playerid][pFMember]][FamilyCrack] = FamilyInfo[PlayerInfo[playerid][pFMember]][FamilyCrack]-withdraw;
				format(string, sizeof(string), " %s a retiré de la drogue du coffre.",sendername);
				ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				format(string, sizeof(string), "Vous avez retiré %d grammes de drogue du coffre de votre FNO.", withdraw);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				printf("%s à retiré %d grammes de drogue du coffre de sa FNO.", sendername,withdraw);
				SaveFamilies();
				return 1;
			}
			if(strcmp(tmp,"materiaux",true) == 0 || strcmp(tmp,"mats",true) == 0 || strcmp(tmp,"mat",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /fretirer [nom] [montant]");
					SendClientMessage(playerid, COLOR_GREY, "Noms Disponibles: Argent, Drogue, Mats");
					return 1;
				}
				new withdraw = strvalEx(tmp);
				if(withdraw > FamilyInfo[PlayerInfo[playerid][pFMember]][FamilyMats] || withdraw < 1)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   Cette somme n'est pas disponible !");
					return 1;
				}
				GetPlayerName(playerid, sendername, sizeof(sendername));
				PlayerInfo[playerid][pMats] = PlayerInfo[playerid][pMats]+withdraw;
				FamilyInfo[PlayerInfo[playerid][pFMember]][FamilyMats] = FamilyInfo[PlayerInfo[playerid][pFMember]][FamilyMats]-withdraw;
				format(string, sizeof(string), " %s a retiré du matériel du coffre.",sendername);
				ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				format(string, sizeof(string), "Vous avez retiré %d materiaux du coffre de votre FNO.", withdraw);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				printf("%s à retiré %d matériaux du coffre de sa FNO.", sendername,withdraw);
				SaveFamilies();
				return 1;
			}
	    }
	    return 1;
	}
	if(strcmp(cmd, "/fcoffre", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pFMember] == 255)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Vous ne faites pas parti d'une FNO (Faction Non Officielle) !");
	            return 1;
	        }
	        if(FamilyInfo[PlayerInfo[playerid][pFMember]][FamilySafe] == 0)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "   Votre FNO n'a pas de coffre !");
				return 1;
			}
	        format(string, sizeof(string), "Coffre FNO: Argent: $%d | Drogues: %d | Materiaux: %d", FamilyInfo[PlayerInfo[playerid][pFMember]][FamilyCash], FamilyInfo[PlayerInfo[playerid][pFMember]][FamilyCrack], FamilyInfo[PlayerInfo[playerid][pFMember]][FamilyMats]);
			SendClientMessage(playerid, COLOR_GRAD6, string);
	    }
	    return 1;
	}
	if(strcmp(cmd, "/fsetwarn", true) == 0 || strcmp(cmd, "/fmettreavertissement", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] >= 4)
	        {
	            tmp = strtok(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /fmettreavertissement [FNO Numéro] [Nombre d'Avertissements]");
					return 1;
				}
				new family = strval(tmp);
				if(family < 1 || family > 14) { SendClientMessage(playerid, COLOR_GREY, "   Le numéro de la FNO doit être compris entre 1 et 14 !"); return 1; }
				family -= 1;
				if(FamilyInfo[family][FamilyTaken] != 1)
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Ce numéro n'est pas occupé par une FNO !");
				    return 1;
				}

                tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /fmettreavertissement [FNO Numéro] [Nombre d'Avertissements]");
					return 1;
				}
				new strikes = strval(tmp);
				if(strikes < 0 || strikes > 2) { SendClientMessage(playerid, COLOR_GREY, "   Le nombre d'avertissement doit petre compris entre 1 et 3 !"); return 1; }

                format(string, sizeof(string), " La FNO %d a maintenant %d avertissements.",family+1,strikes);
				SendClientMessage(playerid, COLOR_GREY, string);
				FamilyInfo[family][FStrikes] = strikes;
				SaveFamilies();
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   You are not authorised to use that command !");
	            return 1;
	        }
	    }
	    return 1;
	}
	if(strcmp(cmd, "/fwarn", true) == 0 || strcmp(cmd, "/favertissement", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] >= 4)
	        {
	            tmp = strtok(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /fwarn [FNO Numéro] [Raison]");
					return 1;
				}
				new family = strval(tmp);
				if(family < 1 || family > 14) { SendClientMessage(playerid, COLOR_GREY, "   Le numéro doit être compris entre 1 et 14 !"); return 1; }
				family -= 1;
				if(FamilyInfo[family][FamilyTaken] != 1)
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Ce numéro n'est pas occupé par une FNO !");
				    return 1;
				}

				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[64];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /fwarn [FNO Numéro] [Raison]");
					return 1;
                }
				format(string, sizeof(string), "%s à été kické par l'Admin %s. Raison: %s", giveplayer, sendername, (result));
				SendClientMessageToAll(COLOR_LIGHTRED, string);
				format(string, sizeof(string), "La FNO '%s' a reçu un avertissement. Raison: %s",FamilyInfo[family][FamilyName],result);
				SendClientMessageToAll(COLOR_LIGHTRED, string);
				FamilyInfo[family][FStrikes] ++;
				if(FamilyInfo[family][FStrikes] >= 3)
				{
					format(string, sizeof(string), "La FNO '%s' a été supprimée pour avoir reçu 3 avertissements.",FamilyInfo[family][FamilyName]);
					SendClientMessageToAll(COLOR_WHITE, string);
					DestroyPickup(FamilyInfo[family][PickupID]);
					ClearFamily(family);
					SaveFamilies();
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   You are not authorised to use that command !");
	            return 1;
	        }
	    }
	    return 1;
	}
	if(strcmp(cmd, "/giveturf", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] < 1337)
	        {
	            tmp = strtok(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /giveturf [FamilyNr]");
					return 1;
				}
				new family = strval(tmp);
				if(family < 1 || family > 10) { SendClientMessage(playerid, COLOR_GREY, "   FamilyNr can't be below 1 or above 10 !"); return 1; }
				if(PlayerInfo[playerid][pLeader] == 5 && family > 5) { SendClientMessage(playerid, COLOR_GREY, "   Surenos Leader can only take FamilyNr 1 till 5 !"); return 1; }
				else if(PlayerInfo[playerid][pLeader] == 6 && family < 6) { SendClientMessage(playerid, COLOR_GREY, "   Luciano family Leader can only take FamilyNr 6 till 10 !"); return 1; }
				else if(PlayerInfo[playerid][pLeader] == 14 && family < 14) { SendClientMessage(playerid, COLOR_GREY, "   Nortenos Leader can only take FamilyNr 11 till 15 !"); return 1; }
				else if(PlayerInfo[playerid][pLeader] == 15 && family < 15) { SendClientMessage(playerid, COLOR_GREY, "   Chornaya Bratva can only take FamilyNr 11 till 15 !"); return 1; }
				family -= 1;
				if(FamilyInfo[family][FamilyTaken] != 1)
				{
				    SendClientMessage(playerid, COLOR_GREY, "   That FamilyNr hasn't been Taken yet !");
				    return 1;
				}
				new Found = 0;
				for(new j=0; j<sizeof(TurfInfo);j++)
				{
					if(IsPlayerInTurf(playerid,j))
					{
					    Found = 1;
         				format(string, sizeof(string), "%s", FamilyInfo[family][FamilyName]);
						strmid(TurfInfo[j][zOwner], string, 0, strlen(string), 255);
						format(string, sizeof(string), "%s", FamilyInfo[family][FamilyColor]);
						strmid(TurfInfo[j][zColor], string, 0, strlen(string), 255);
					}
				}
				if(Found)
				{
				    SaveTurfs();
					SendClientMessage(playerid, COLOR_LIGHTBLUE, " Turf adjusted.");
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   You are not in a Turf !");
				}
			}
			else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   You are not the Leader of one of the Organisations !");
	            return 1;
	        }
		}
		return 1;
	}
	if(strcmp(cmd, "/creerfno", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
			    {
			    if (PlayerInfo[playerid][pMember] > 1 || PlayerInfo[playerid][pMember] < 45 && PlayerInfo[playerid][pFMember] < 255)
			    return SendClientMessage(playerid, COLOR_GREY, "Joueur déjà dans une faction.");
	            {
	            if(PlayerInfo[playerid][pAdmin] < 1337)
                {
                return SendClientMessage(playerid, COLOR_GRAD1, "Vous devez être Admin.");
	            }
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /creerfno [FamilyNr] [playerid/PartOfName]");
					return 1;
				}
				new family = strval(tmp);
				if(family < 1 || family > 10) { SendClientMessage(playerid, COLOR_GREY, "   FamilyNr can't be below 1 or above 10 !"); return 1; }

	            tmp = strtok(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /creerfno [FamilyNr] [playerid/PartOfName]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        family -= 1;
				        if(FamilyInfo[family][FamilyTaken] == 1)
				        {
				            SendClientMessage(playerid, COLOR_GREY, "   That FamilyNr is already taken !" );
				            return 1;
				        }
				        GetPlayerName(playerid, sendername, sizeof(sendername));
				        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				        format(string, sizeof(string), " You've made %s the Leader of FamilyNr %d.",giveplayer,family);
				        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				        format(string, sizeof(string), "%s",giveplayer);
				        strmid(FamilyInfo[family][FamilyLeader], string, 0, strlen(string), 255);
				        FamilyInfo[family][FamilyMembers] ++;
				        FamilyInfo[family][FamilyTaken] = 1;
				        PlayerInfo[giveplayerid][pFMember] = family;
				        SaveFamilies();
				    }
				}
				else
				{
                    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté!");
                    return 1;
				}
	        }
	    }
	    return 1;
	}
	if(strcmp(cmd, "/supprimerfno", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] < 1337)
            {
            return SendClientMessage(playerid, COLOR_GRAD1, "Vous devez être Admin.");
	        }
	            {
	            tmp = strtok(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /deletecreation [FamilyNr]");
					return 1;
				}
				new family = strval(tmp);
				if(family < 1 || family > 10) { SendClientMessage(playerid, COLOR_GREY, "   FamilyNr can't be below 1 or above 10 !"); return 1; }
				family -= 1;
				if(FamilyInfo[family][FamilyTaken] != 1)
				{
				    SendClientMessage(playerid, COLOR_GREY, "   That FamilyNr isn't taken !");
				    return 1;
				}
				ClearFamily(family);
				SendClientMessage(playerid, COLOR_WHITE, "Vous venez de supprimer la FNO.");
				SaveFamilies();
	        }
	    }
	    return 1;
	}
	if(strcmp(cmd, "/setfamily", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] < 4)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command!");
			    return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /setfamily [Family] [code] [amount]");
				SendClientMessage(playerid, COLOR_GRAD4, "|1 Members");
				return 1;
			}
			new family;
			family = strval(tmp);
			if(family < 1 || family > 10) { SendClientMessage(playerid, COLOR_GREY, "   FamilyNr can't be below 1 or above 10 !"); return 1; }
			family -= 1;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /setfamily [Family] [code] [amount]");
				SendClientMessage(playerid, COLOR_GRAD4, "|1 Members");
				return 1;
			}
			new stat;
			stat = strval(tmp);
			if(stat < 1 || stat > 1) { SendClientMessage(playerid, COLOR_GREY, "   Stat Code can't be below 1 or above 1 !"); return 1; }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /setfamily [Family] [code] [amount]");
				SendClientMessage(playerid, COLOR_GRAD4, "|1 Members");
				return 1;
			}
			new amount;
			amount = strval(tmp);
			if(amount < 1 || amount > 10) { SendClientMessage(playerid, COLOR_GREY, "   Amount can't be below 1 or above 10 !"); return 1; }
			switch (stat)
			{
			    case 1:
			    {
					FamilyInfo[family][FamilyMembers] = amount;
					format(string, sizeof(string), "   Family %s set to %d members", FamilyInfo[family][FamilyName], amount);
			    }
			    default:
			    {
			    	format(string, sizeof(string), "   Invalid Stat Code");
			    }
			}
			SendClientMessage(playerid, COLOR_GREY, string);
		}
		return 1;
	}
	////////////////////////////////////////////////////////////// FNO Création (FIN)////////////////////////////////////////////////////////


    if(strcmp(cmd, "/defoncer", true) == 0 || strcmp(cmd, "/ram", true) == 0 || strcmp(cmd, "/defonce", true) == 0)
	//if(strcmp(cmd, "/defoncer", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
            if(gTeam[playerid] == 2 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pMember] == 3)
            {
                for(new i = 0; i < sizeof(HouseInfo); i++)
				{
					if (PlayerToPoint(3, playerid,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]))
					{
					    SetPlayerInterior(playerid,HouseInfo[i][hInt]);
					    SetPlayerVirtualWorld(playerid,HouseInfo[i][hWorld]);
						SetPlayerPos(playerid,HouseInfo[i][hExitx],HouseInfo[i][hExity],HouseInfo[i][hExitz]);
						GameTextForPlayer(playerid, "~r~Porte Defoncee", 5000, 1);
						PlayerInfo[playerid][pInt] = HouseInfo[i][hInt];
						PlayerInfo[playerid][pLocal] = i;
						HouseEntered[playerid] = i;
					}
				}
				if (PlayerToPoint(3, playerid,1298.7075,-798.5981,84.1406))
				{
				    SetPlayerInterior(playerid,5);
					PlayerInfo[playerid][pInt] = 5;
					GameTextForPlayer(playerid, "~r~Porte Defoncee", 5000, 1);
					SetPlayerPos(playerid, 1254.3436,-789.3809,1084.0078);
				}
				if (PlayerToPoint(3, playerid,2380.5647,-1785.7302,13.5469))
				{
				    SetPlayerPos(playerid, 318.4700,1117.5127,1083.8828);
					GameTextForPlayer(playerid, "~r~Porte Defoncee", 5000, 1);
					SetPlayerInterior(playerid,5);
					SetPlayerFacingAngle(playerid, 0);
					PlayerInfo[playerid][pInt] = 5;
				}
				if (PlayerToPoint(3, playerid,2022.9038,-1120.2688,26.4210))
				{
				    SetPlayerPos(playerid, 1237.8329,-833.3148,1084.0078);
					GameTextForPlayer(playerid, "~r~Porte Defoncee", 5000, 1);
					SetPlayerInterior(playerid,5);
					SetPlayerFacingAngle(playerid, 90);
					PlayerInfo[playerid][pInt] = 5;
				}
				if (PlayerToPoint(3, playerid,2770.6973,-1628.4293,12.1775))
				{
				    SetPlayerPos(playerid, 2464.8335,-1698.4218,1013.5078);
					GameTextForPlayer(playerid, "~r~Porte Defoncee", 5000, 1);
					SetPlayerInterior(playerid,2);
					SetPlayerFacingAngle(playerid, 90);
					PlayerInfo[playerid][pInt] = 2;
				}
            }
            else
            {
                SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas policier!");
			    return 1;
            }
		}
		return 1;
	}
				//	if(number == 2) { SetPlayerCameraPos(playerid, 787.8352,-1129.6610,29.6786); SetPlayerInterior(playerid,0); PlayerInfo[playerid][pInt] = 0; SetPlayerPos(playerid, 784.5344,-1144.6193,29.2377); SetPlayerCameraLookAt(playerid, 792.7584,-1138.8623,23.6812); }
				//if(number == 3) { SetPlayerCameraPos(playerid, 763.9212,-1087.2712,32.2839); SetPlayerInterior(playerid,0); PlayerInfo[playerid][pInt] = 0; SetPlayerPos(playerid, 784.5344,-1144.6193,29.2377); SetPlayerCameraLookAt(playerid, 745.6546,-1129.1394,24.8726); }
    if(strcmp(cmd, "/camerapolice", true) == 0 || strcmp(cmd, "/camera", true) == 0 || strcmp(cmd, "/campolice", true) == 0)
	//if(strcmp(cmd, "/camerapolice", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
            if(IsACop(playerid))
            {
                if(!PlayerToPoint(8.0,playerid,2251.1963,2489.1636,10.9908))
				{
				    SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas dans le panneau de controle du garage");
				    return 1;
				}
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /camera [numero 1 - 4]  (4 = OFF)");
					return 1;
				}
				new number = strval(tmp);
				if(number < 1 || number > 4) { SendClientMessage(playerid, COLOR_GREY, "Le numero de camera ne peux pas être en desous de 1 et au desus 6!"); return 1; }
				TogglePlayerControllable(playerid, 0);
				GetPlayerPos(playerid, Unspec[playerid][Coords][0],Unspec[playerid][Coords][1],Unspec[playerid][Coords][2]);
				if(number == 1) { SetPlayerCameraPos(playerid, 2296.2437,2481.0544,13.1067); SetPlayerCameraLookAt(playerid, 2276.8164,2454.3469,10.8203); }
				else if(number == 2) { SetPlayerCameraPos(playerid, 2269.7122,2398.6584,17.6797); SetPlayerCameraLookAt(playerid, 2285.6235,2422.8669,10.8203); }
				else if(number == 3) { SetPlayerCameraPos(playerid, 2318.7241,2426.1848,7.5133); SetPlayerCameraLookAt(playerid, 2272.1887,2439.1714,3.2734); }
				else if(number == 4)
				{
					TogglePlayerControllable(playerid, 1);
					SetPlayerPos(playerid, Unspec[playerid][Coords][0],Unspec[playerid][Coords][1],Unspec[playerid][Coords][2]);
					SetCameraBehindPlayer(playerid);
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas policier!");
			    return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/camerabanque", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
            if(IsACop(playerid))
            {
                if(!PlayerToPoint(8.0,playerid,2251.1963,2489.1636,10.9908) && !PlayerToPoint(8.0,playerid,2145.0144,1603.0911,1001.9677) && !PlayerToPoint(8.0,playerid,2315.3699,-11.0457,32.5313))
				{
				    SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas dans le panneau de controle du garage");
				    return 1;
				}
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /camera [numero 1 - 5]  (5 = OFF)");
					return 1;
				}
				new number = strval(tmp);
				if(number < 1 || number > 5) { SendClientMessage(playerid, COLOR_GREY, "Le numero de camera ne peux pas être en desous de 1 et au desus 5!"); return 1; }
				TogglePlayerControllable(playerid, 0);
				GetPlayerPos(playerid, Unspec[playerid][Coords][0],Unspec[playerid][Coords][1],Unspec[playerid][Coords][2]);
				if(number == 1) { SetPlayerCameraPos(playerid, 2316.2769,-16.6024,28.2876); SetPlayerCameraLookAt(playerid, 2310.4758,-9.2521,26.7422); SetPlayerPos(playerid, 2315.3699,-11.0457,32.5313); SetPlayerInterior(playerid,0); PlayerInfo[playerid][pInt] = 0; }
				else if(number == 2) { SetPlayerCameraPos(playerid, 2157.3950,1620.7633,1002.7941); SetPlayerCameraLookAt(playerid, 2157.6770,1599.9698,999.9741); SetPlayerPos(playerid, 2145.0144,1603.0911,1001.9677); SetPlayerInterior(playerid,1); PlayerInfo[playerid][pInt] = 1; }
				else if(number == 3) { SetPlayerCameraPos(playerid, 2131.0344,1607.6694,996.4153); SetPlayerCameraLookAt(playerid, 2143.5366,1624.2185,993.6882); SetPlayerPos(playerid, 2145.0144,1603.0911,1001.9677); SetPlayerInterior(playerid,1); PlayerInfo[playerid][pInt] = 1; }
				else if(number == 4) { SetPlayerCameraPos(playerid, 2146.8103,1642.6617,996.7736); SetPlayerCameraLookAt(playerid, 2143.8777,1628.8733,993.5761); SetPlayerPos(playerid, 2145.0144,1603.0911,1001.9677); SetPlayerInterior(playerid,1); PlayerInfo[playerid][pInt] = 1; }
				else if(number == 5)
				{
					TogglePlayerControllable(playerid, 1);
					SetPlayerPos(playerid, 2251.1963,2489.1636,10.9908);
					SetCameraBehindPlayer(playerid);
					SetPlayerInterior(playerid,0);
					PlayerInfo[playerid][pInt] = 0;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas policier!");
			    return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/camera24", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
            if(IsACop(playerid))
            {
                if(!PlayerToPoint(8.0,playerid,2251.1963,2489.1636,10.9908) && !PlayerToPoint(8.0,playerid,-25.1378,-78.9225,1007.9487))
				{
				    SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas dans le panneau de controle du garage");
				    return 1;
				}
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /camera [numero 1 - 6]  (6 = OFF)");
					return 1;
				}
				new number = strval(tmp);
				if(number < 1 || number > 6) { SendClientMessage(playerid, COLOR_GREY, "Le numero de camera ne peux pas être en desous de 1 et au desus 6!"); return 1; }
				TogglePlayerControllable(playerid, 0);
				GetPlayerPos(playerid, Unspec[playerid][Coords][0],Unspec[playerid][Coords][1],Unspec[playerid][Coords][2]);
				if(number == 1) { SetPlayerCameraPos(playerid, -15.4695,-90.9136,1005.7232); SetPlayerCameraLookAt(playerid, -25.1642,-86.8661,1003.5469); SetPlayerPos(playerid, -25.1378,-78.9225,1007.9487); SetPlayerInterior(playerid,18); PlayerInfo[playerid][pInt] = 18; }
				else if(number == 2) { SetPlayerCameraPos(playerid, -26.3789,-1.8274,1005.8455); SetPlayerCameraLookAt(playerid, -28.2818,-27.7194,1003.5573); SetPlayerPos(playerid, -25.1378,-78.9225,1007.9487); SetPlayerInterior(playerid,4); PlayerInfo[playerid][pInt] = 4; }
				else if(number == 3) { SetPlayerCameraPos(playerid, -15.4695,-90.9136,1005.7232); SetPlayerCameraLookAt(playerid, -25.1642,-86.8661,1003.5469); SetPlayerPos(playerid, -25.1378,-78.9225,1007.9487); SetPlayerInterior(playerid,18); PlayerInfo[playerid][pInt] = 18; SetPlayerVirtualWorld(playerid, 2); PlayerInfo[playerid][pVirWorld] = 2; }
				else if(number == 4) { SetPlayerCameraPos(playerid, -37.5993,-122.6932,1005.1761); SetPlayerCameraLookAt(playerid, -25.1522,-137.9519,1003.5469); SetPlayerPos(playerid, -25.1378,-78.9225,1007.9487); SetPlayerInterior(playerid,16); PlayerInfo[playerid][pInt] = 16; }
				else if(number == 5) { SetPlayerCameraPos(playerid, -17.5243,-57.6426,1005.7963); SetPlayerCameraLookAt(playerid, -27.3803,-52.3435,1003.5469); SetPlayerPos(playerid, -25.1378,-78.9225,1007.9487); SetPlayerInterior(playerid,6); PlayerInfo[playerid][pInt] = 6; }
				else if(number == 6)
				{
					TogglePlayerControllable(playerid, 1);
					SetPlayerPos(playerid, 2251.1963,2489.1636,10.9908);
					SetCameraBehindPlayer(playerid);
					SetPlayerInterior(playerid,0);
					PlayerInfo[playerid][pInt] = 0;
					SetPlayerVirtualWorld(playerid, 0);
					PlayerInfo[playerid][pVirWorld] = 0;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas policier!");
			    return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/camerafouriere", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
            if(IsACop(playerid))
            {
                if(!(PlayerToPoint(8.0,playerid,1580.1072,-1635.1211,13.5610) || PlayerToPoint(3.0,playerid,784.5344,-1144.6193,29.2377)))
				{
				    SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas dans le panneau de controle du garage");
				    return 1;
				}
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /camera [numero 1 - 3]  (3 = OFF)");
					return 1;
				}
				new number = strval(tmp);
				if(number < 1 || number > 3) { SendClientMessage(playerid, COLOR_GREY, "Le numero de camera ne peux pas être en desous de 1 et au desus 3!"); return 1; }
				TogglePlayerControllable(playerid, 0);
				GetPlayerPos(playerid, Unspec[playerid][Coords][0],Unspec[playerid][Coords][1],Unspec[playerid][Coords][2]);
				if(number == 1) { SetPlayerCameraPos(playerid, 787.8352,-1129.6610,29.6786); SetPlayerInterior(playerid,0); PlayerInfo[playerid][pInt] = 0; SetPlayerPos(playerid, 784.5344,-1144.6193,29.2377); SetPlayerCameraLookAt(playerid, 792.7584,-1138.8623,23.6812); }
				else if(number == 2) { SetPlayerCameraPos(playerid, 763.9212,-1087.2712,32.2839); SetPlayerInterior(playerid,0); PlayerInfo[playerid][pInt] = 0; SetPlayerPos(playerid, 784.5344,-1144.6193,29.2377); SetPlayerCameraLookAt(playerid, 745.6546,-1129.1394,24.8726); }
				else if(number == 3)
				{
					TogglePlayerControllable(playerid, 1);
					SetPlayerPos(playerid, 1580.1072,-1635.1211,13.5610);
					SetCameraBehindPlayer(playerid);
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas policier!");
			    return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/camera", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
            if(IsACop(playerid))
            {
                if(!PlayerToPoint(8.0,playerid,211.6222,1811.9565,21.8594))
				{
				    SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas dans le panneau de controle de l'Aera51!");
				    return 1;
				}
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /camera [numero 1 - 6]  (6 = OFF)");
					return 1;
				}
				new number = strval(tmp);
				if(number < 1 || number > 6) { SendClientMessage(playerid, COLOR_GREY, "Le numero de camera ne peux pas être en desous de 1 et au desus 6!"); return 1; }
				TogglePlayerControllable(playerid, 0);
				GetPlayerPos(playerid, Unspec[playerid][Coords][0],Unspec[playerid][Coords][1],Unspec[playerid][Coords][2]);
				if(number == 1) { SetPlayerCameraPos(playerid, 118.1011,1931.3221,22.5527); SetPlayerCameraLookAt(playerid, 98.9656,1920.9819,18.2180); }
				else if(number == 2) { SetPlayerCameraPos(playerid, 213.5340,1875.3075,17.6406); SetPlayerCameraLookAt(playerid, 213.8679,1884.1714,13.8945); }
				else if(number == 3) { SetPlayerCameraPos(playerid, 266.0640,1894.8856,38.6459); SetPlayerCameraLookAt(playerid, 224.0039,1887.1532,17.6406); }
				else if(number == 4) { SetPlayerCameraPos(playerid, 260.8112,1808.0175,38.6303); SetPlayerCameraLookAt(playerid, 227.5645,1818.4778,17.6406); }
				else if(number == 5) { SetPlayerCameraPos(playerid, 114.5196,1814.3483,38.6029); SetPlayerCameraLookAt(playerid, 123.6176,1846.4792,17.6549); }
				else if(number == 6)
				{
					TogglePlayerControllable(playerid, 1);
					SetPlayerPos(playerid, Unspec[playerid][Coords][0],Unspec[playerid][Coords][1],Unspec[playerid][Coords][2]);
					SetCameraBehindPlayer(playerid);
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas policier!");
			    return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd,"/divorce",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pMarried] < 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas marié!");
				return 1;
	        }
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /divorce [Playerid/PartOfName]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
		    if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez pas vous le proposer a vous même!"); return 1; }
					    new dstring[MAX_PLAYER_NAME];
						new wstring[MAX_PLAYER_NAME];
						GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "%s", giveplayer);
						strmid(wstring, string, 0, strlen(string), 255);
						format(string, sizeof(string), "%s", PlayerInfo[playerid][pMarriedTo]);
						strmid(dstring, string, 0, strlen(string), 255);
						if(strcmp(dstring ,wstring, true ) == 0 )
						{
						    format(string, sizeof(string), "Vous avez envoyé la demande de Divorce a %s.", giveplayer);
							SendClientMessage(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), "%s vous à envoyé les papiers pour de Divorce (Tapez /accepter divorce) pour accepter.", sendername);
							SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        DivorceOffer[giveplayerid] = playerid;
					        return 1;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas maié avec vous!");
						    return 1;
						}
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas pres de vous!");
						return 1;
					}
			    }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté!");
			    return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd,"/propose",true)==0 || strcmp(cmd,"/proposer",true)==0 || strcmp(cmd,"/mariage",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
            if(!PlayerToPoint(15, playerid, 1963.9740,-369.2031,1093.7289))
		    {
		        SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas a l'Eglise !");
		        SendClientMessage(playerid, COLOR_GREY, "L'Eglise a été marquée par un point rouge sur votre GPS.");
		        SetPlayerCheckpoint(playerid,2233.2068,-1333.2169,23.9815,3);
		        return 1;
		    }
	        if(GetPlayerMoney(playerid) < 35000)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Le Mariage et la Reception coute $35000 !");
	            SendClientMessage(playerid, COLOR_GREY, "Cet argent ne vous sera pas retiré.");
	            return 1;
	        }
	        if(PlayerInfo[playerid][pMarried] > 0)
			{
			    SendClientMessage(playerid, COLOR_GREY, "Vous êtes déjà marié!");
				return 1;
	        }
	        if(PlayerInfo[playerid][pPhousekey] == 255)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas de maison pour vous et votre femme/marri!");
				return 1;
	        }
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /propose [Playerid/PartOfName]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
		    if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(PlayerInfo[giveplayerid][pMarried] > 0)
			        {
			            SendClientMessage(playerid, COLOR_GREY, "Ce joueur est déjà marrié!");
			            return 1;
			        }
			        if(PlayerInfo[giveplayerid][pPhousekey] != 255)
			        {
			            SendClientMessage(playerid, COLOR_GREY, "Ce joueur a une maison, il ne peut être marié!");
			            return 1;
			        }
			        if(PlayerInfo[giveplayerid][pPbiskey] != 255)
			        {
			            SendClientMessage(playerid, COLOR_GREY, "Ce joueur a un biz, il ne peut être marié!");
			            return 1;
			        }
			        if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez pas vous le proposer a vous même!"); return 1; }
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "Vous avez proposé a %s de vous marier.", giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
						format(string, sizeof(string), "%s vous propose de se marier avec vous (Tapez /accepter mariage) pour accepter.", sendername);
						SendClientMessage(giveplayerid, COLOR_WHITE, string);
				        ProposeOffer[giveplayerid] = playerid;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas pres de vous!");
						return 1;
					}
			    }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté!");
			    return 1;
			}
	    }
	    return 1;
	}
	if(strcmp(cmd, "/adivorce", true) == 0 || strcmp(cmd, "/adivorcer", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Usage: | /adivorce [PlayerID]");
				return 1;
			}
			new para1;
			para1 = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
			    if(IsPlayerConnected(para1))
			    {
			        if(para1 != INVALID_PLAYER_ID)
			        {
					    if (PlayerInfo[para1][pMarried] > 0)
					    {
							GetPlayerName(para1, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							GiveNameSpace(giveplayer);
							GiveNameSpace(sendername);
							format(string, sizeof(string), "Vous avez été Admin Divorcé par %s.", sendername);
							SendClientMessage(para1, COLOR_DARKNICERED, string);
							format(string, sizeof(string), "Vous avez Admin Divorcé %s.", giveplayer);
							SendClientMessage(playerid, COLOR_DARKNICERED, string);
							ClearMarriage(para1);
						}
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "You are not authorised to use that command.");
			}
		}
		return 1;
	}
	if(strcmp(cmd,"/temoin",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /temoin [Playerid/PartOfName]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
		    if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez pas vous le proposer a vous même!"); return 1; }
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "Vous avez demandé à %s si vous pouvez être son témoin pour son mariage.", giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
						format(string, sizeof(string), "%s aimerait qu'il soit votre témoin de mariage (Tapez /accepter temoin) pour accepter.", sendername);
						SendClientMessage(giveplayerid, COLOR_WHITE, string);
				        MarryWitnessOffer[giveplayerid] = playerid;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas pres de vous!");
						return 1;
					}
			    }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté!");
			    return 1;
			}
	    }
	    return 1;
	}

    if(strcmp(cmd,"/irc",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        new x_nr[256];
			x_nr = strtok(cmdtext, idx);
			if(!strlen(x_nr)) {
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: (/irc join [channelnr] or /irc join [channelnr] [password])  (/irc Leave)  (/irc Admins)");
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /irc [name] [channelnr]");
				SendClientMessage(playerid, COLOR_WHITE, "Available names: MOTD, Password, NeedPass, Lock, Kick, Status");
				return 1;
			}
		    if(strcmp(x_nr,"join",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp))
				{
				    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /irc join [channelnr] or /irc join [channelnr] [password]");
				    return 1;
				}
				new channel = strval(tmp);
				if(channel < 1 || channel > 10) { SendClientMessage(playerid, COLOR_GREY, "   Channel Number can't be below 1 or above 10 !"); return 1; }
				channel -= 1;
			    if(IRCInfo[channel][iLock] == 0)
			    {
			        if(IRCInfo[channel][iNeedPass] == 0)
			        {
			            JoinChannelNr(playerid, channel);
				    }
				    else
				    {
				        tmp = strtok(cmdtext, idx);
				        if(!strlen(tmp))
						{
						    SendClientMessage(playerid, COLOR_WHITE, "There's a password required to join this Channel.");
							SendClientMessage(playerid, COLOR_WHITE, "USAGE: /irc join [channelnr] [password]");
							return 1;
						}
						JoinChannel(playerid,channel,tmp);
				    }
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   That Channel is Locked, please choose a different one !");
				    return 1;
			    }
			}
			else if(strcmp(x_nr,"status",true) == 0)
			{
			    for(new i = 0; i < sizeof(IRCInfo); i++)
			    {
			        format(string, sizeof(string), "Channel %d: %d Players Connected.",i + 1, IRCInfo[i][iPlayers]);
				    SendClientMessage(playerid, COLOR_WHITE, string);
			    }
			    return 1;
			}
			else if(strcmp(x_nr,"password",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp))
				{
				    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /irc password [channelnr] [password]");
				    return 1;
				}
				new channel = strval(tmp);
				if(channel < 1 || channel > 10) { SendClientMessage(playerid, COLOR_GREY, "   Channel Number can't be below 1 or above 10 !"); return 1; }
				channel -= 1;
				new wstring[128];
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "%s", sendername);
				strmid(wstring, string, 0, strlen(string), 255);
				if(strcmp(IRCInfo[channel][iAdmin],wstring, true ) == 0 )
				{
				    tmp = strtok(cmdtext, idx);
				    if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /irc password [channelnr] [password]");
					    return 1;
					}
					strmid(IRCInfo[channel][iPassword], tmp, 0, strlen(tmp), 255);
					format(string, sizeof(string), "You've changed the IRC Channel's Password to: %s.",IRCInfo[channel][iPassword]);
					SendClientMessage(playerid, COLOR_YELLOW, string);
					SaveIRC();
					return 1;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   You are not the Admin of that Channel !");
				    return 1;
				}
			}
			else if(strcmp(x_nr,"needpass",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp))
				{
				    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /irc needpass [channelnr]");
				    return 1;
				}
				new channel = strval(tmp);
				if(channel < 1 || channel > 10) { SendClientMessage(playerid, COLOR_GREY, "   Channel Number can't be below 1 or above 10 !"); return 1; }
				channel -= 1;
				new wstring[128];
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "%s", sendername);
				strmid(wstring, string, 0, strlen(string), 255);
				if(strcmp(IRCInfo[channel][iAdmin],wstring, true ) == 0 )
				{
				    if(IRCInfo[channel][iNeedPass] != 0)
				    {
				        IRCInfo[channel][iNeedPass] = 0;
				        SendClientMessage(playerid, COLOR_YELLOW, "Players won't have to fill in a password in order to join the IRC Channel now.");
				    }
					else
					{
					    IRCInfo[channel][iNeedPass] = 1;
						SendClientMessage(playerid, COLOR_YELLOW, "Players must fill in a password in order to join the IRC Channel now.");
					}
					SaveIRC();
					return 1;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   You are not the Admin of that Channel !");
				    return 1;
				}
			}
			else if(strcmp(x_nr,"lock",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp))
				{
				    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /irc lock [channelnr]");
				    return 1;
				}
				new channel = strval(tmp);
				if(channel < 1 || channel > 10) { SendClientMessage(playerid, COLOR_GREY, "   Channel Number can't be below 1 or above 10 !"); return 1; }
				channel -= 1;
				new wstring[128];
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "%s", sendername);
				strmid(wstring, string, 0, strlen(string), 255);
				if(strcmp(IRCInfo[channel][iAdmin],wstring, true ) == 0 )
				{
				    if(IRCInfo[channel][iLock] != 0)
				    {
				        IRCInfo[channel][iLock] = 0;
				        SendClientMessage(playerid, COLOR_YELLOW, "You've unlocked the IRC Channel.");
				    }
					else
					{
					    IRCInfo[channel][iLock] = 1;
						SendClientMessage(playerid, COLOR_YELLOW, "You've locked the IRC Channel.");
					}
					SaveIRC();
					return 1;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   You are not the Admin of that Channel !");
				    return 1;
				}
			}
			else if(strcmp(x_nr,"motd",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp))
				{
				    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /irc motd [channelnr] [motdtext]");
				    return 1;
				}
				new channel = strval(tmp);
				if(channel < 1 || channel > 10) { SendClientMessage(playerid, COLOR_GREY, "   Channel Number can't be below 1 or above 10 !"); return 1; }
				channel -= 1;
				new wstring[128];
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "%s", sendername);
				strmid(wstring, string, 0, strlen(string), 255);
				if(strcmp(IRCInfo[channel][iAdmin],wstring, true ) == 0 )
				{
				    new length = strlen(cmdtext);
					while ((idx < length) && (cmdtext[idx] <= ' '))
					{
						idx++;
					}
					new offset = idx;
					new result[64];
					while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
					{
						result[idx - offset] = cmdtext[idx];
						idx++;
					}
					result[idx - offset] = EOS;
					if(!strlen(result))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /irc motd [motdtext]");
						return 1;
					}
					strmid(IRCInfo[channel][iMOTD], result, 0, strlen(result), 255);
					SendClientMessage(playerid, COLOR_YELLOW, "You've adjusted the IRC Channel's MOTD Text.");
					SaveIRC();
					return 1;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   You are not the Admin of that Channel !");
				    return 1;
				}
			}
			else if(strcmp(x_nr,"leave",true) == 0)
			{
			    if(PlayersChannel[playerid] < 999)
			    {
			        GetPlayerName(playerid, sendername, sizeof(sendername));
			        format(string, sizeof(string), "* %s has left the Channel.", sendername);
			        SendIRCMessage(PlayersChannel[playerid], COLOR_GREEN, string);
			        IRCInfo[PlayersChannel[playerid]][iPlayers] -= 1;
			        PlayersChannel[playerid] = 999;
			        return 1;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   You are not in an IRC Channel !");
			        return 1;
			    }
			}
			else if(strcmp(x_nr,"admins",true) == 0)
			{
				for(new i = 0; i < sizeof(IRCInfo); i++)
			    {
				    format(string, sizeof(string), "Channel %d: %s.", i + 1, IRCInfo[i][iAdmin]);
				    SendClientMessage(playerid, COLOR_WHITE, string);
			    }
			    return 1;
			}
			else if(strcmp(x_nr,"kick",true) == 0)
			{
			    if(PlayersChannel[playerid] == 999)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   You are not in an IRC Channel !");
			        return 1;
			    }
			    new wstring[128];
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "%s", sendername);
				strmid(wstring, string, 0, strlen(string), 255);
				if(strcmp(IRCInfo[PlayersChannel[playerid]][iAdmin],wstring, true ) == 0 )
				{
				    tmp = strtok(cmdtext, idx);
				    if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /irc kick [playerid/PartOfName]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if(PlayersChannel[giveplayerid] == PlayersChannel[playerid])
					        {
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "* You've kicked %s out of your IRC Channel.",giveplayer);
					            SendClientMessage(playerid, COLOR_YELLOW, string);
					            format(string, sizeof(string), "* You've been kicked out of the IRC Channel by Channel Admin: %s.",sendername);
					            SendClientMessage(giveplayerid, COLOR_YELLOW, string);
					            format(string, sizeof(string), "* %s has left the Channel (Kicked).", sendername);
						        SendIRCMessage(PlayersChannel[playerid], COLOR_GREEN, string);
					            IRCInfo[PlayersChannel[giveplayerid]][iPlayers] -= 1;
					            PlayersChannel[giveplayerid] = 999;
					        }
					        else
					        {
					            SendClientMessage(playerid, COLOR_GREY, "   That player is not in your IRC Channel !");
							    return 1;
					        }
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté!");
					    return 1;
					}
                }
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   You are not the Admin of the Channel !");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Invalid IRC Channel Number ! ");
			    return 1;
			}
		}
		return 1;
 	}
 	if(strcmp(cmd,"/i",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayersChannel[playerid] == 999)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   You are not in an IRC Channel !");
	            return 1;
	        }
	        if(PlayerInfo[playerid][pMuted] == 1)
			{
				SendClientMessage(playerid, TEAM_CYAN_COLOR, "You cannot speak, you have been silenced");
				return 1;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /i [irc chat]");
				return 1;
			}
			format(string, sizeof(string), "** IRC %s: %s. **", sendername, result);
			SendIRCMessage(PlayersChannel[playerid], COLOR_YELLOW2, string);
	    }
	    return 1;
	}
	if(strcmp(cmd,"/mission",true)==0)
    {
        if(IsPlayerConnected(playerid))
        {
			if(!PlayerToPoint(3.0,playerid,1381.0413,-1088.8511,27.3906))
			{
			    SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas au Bill Board !");
			    return 1;
			}
			if(MissionPlayable == 0)
			{
			    SendClientMessage(playerid, COLOR_GREY, "Aucune mission activée!");
			    return 1;
			}
			if(PlayerInfo[playerid][pMissionNr] == MissionPlayable)
			{
			    SendClientMessage(playerid, COLOR_GREY, "Vous avez déjà fait le mission!");
			    return 1;
			}
			RingTone[playerid] = 20;
			PlayerOnMission[playerid] = PlayMission[kNumber];
			MissionCheckpoint[playerid] = 1;
			format(string, sizeof(string), "~w~Mission demaree: ~n~~r~%s", PlayMission[kTitle]);
			GameTextForPlayer(playerid, string, 5000, 3);
			format(string, sizeof(string), "%s", PlayMission[kText1]);
			SendClientMessage(playerid, COLOR_YELLOW2, string);
			format(string, sizeof(string), "%s", PlayMission[kText2]);
			SendClientMessage(playerid, COLOR_YELLOW2, string);
			format(string, sizeof(string), "%s", PlayMission[kText3]);
			SendClientMessage(playerid, COLOR_YELLOW2, string);
			if(PlayMission[kToggle] == 1)
			{
				SetPlayerCheckpoint(playerid, PlayMission[kCP1][0], PlayMission[kCP1][1], PlayMission[kCP1][2], 8);
			}
        }
        return 1;
    }
    //------------------------------ Mission Making -----------------------------------
    if(strcmp(cmd,"/mk",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] < 4)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   You are not an Admin !");
	            return 1;
	        }
	        new x_mk[256];
			x_mk = strtok(cmdtext, idx);
			if(!strlen(x_mk)) {
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /mk [name]");
				SendClientMessage(playerid, COLOR_GREY, "Available names: (/mk text [number] [text]) (/mk game [number] [text]) (/mk cp [number])");
				SendClientMessage(playerid, COLOR_GREY, "Available names: (/mk title [text]) (/mk reward [price]) (/mk usecp)");
				return 1;
			}
	        if(strcmp(x_mk,"text",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(x_mk))
				{
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /mk text [number] [text]");
					return 1;
				}
				new number = strval(tmp);
				if(number < 1 || number > 18) { SendClientMessage(playerid, COLOR_GREY, "   Number can't be below 1 or above 18 !"); return 1; }
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[64];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/mk text [number] [text]");
					return 1;
				}
				switch(number)
				{
				    case 1:
				    {
						strmid(MissionInfo[mText1], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 1st Text Line of the Mission.");
				    }
				    case 2:
				    {
				        strmid(MissionInfo[mText2], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 2nd Text Line of the Mission.");
				    }
				    case 3:
				    {
				        strmid(MissionInfo[mText3], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 3rd Text Line of the Mission.");
				    }
				    case 4:
				    {
				        strmid(MissionInfo[mText4], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 4th Text Line of the Mission.");
				    }
				    case 5:
				    {
				        strmid(MissionInfo[mText5], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 5th Text Line of the Mission.");
				    }
				    case 6:
				    {
				        strmid(MissionInfo[mText6], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 6th Text Line of the Mission.");
				    }
				    case 7:
				    {
				        strmid(MissionInfo[mText7], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 7th Text Line of the Mission.");
				    }
				    case 8:
				    {
				        strmid(MissionInfo[mText8], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 8th Text Line of the Mission.");
				    }
				    case 9:
				    {
				        strmid(MissionInfo[mText9], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 9th Text Line of the Mission.");
				    }
				    case 10:
				    {
				        strmid(MissionInfo[mText10], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 10th Text Line of the Mission.");
				    }
				    case 11:
				    {
				        strmid(MissionInfo[mText11], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 11th Text Line of the Mission.");
				    }
				    case 12:
				    {
				        strmid(MissionInfo[mText12], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 12th Text Line of the Mission.");
				    }
				    case 13:
				    {
				        strmid(MissionInfo[mText13], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 13th Text Line of the Mission.");
				    }
				    case 14:
				    {
				        strmid(MissionInfo[mText14], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 14th Text Line of the Mission.");
				    }
				    case 15:
				    {
				        strmid(MissionInfo[mText15], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 15th Text Line of the Mission.");
				    }
				    case 16:
				    {
				        strmid(MissionInfo[mText16], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 16th Text Line of the Mission.");
				    }
				    case 17:
				    {
				        strmid(MissionInfo[mText17], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 17th Text Line of the Mission.");
				    }
				    case 18:
				    {
				        strmid(MissionInfo[mText18], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 18th Text Line of the Mission.");
				    }
				}
			}
			else if(strcmp(x_mk,"game",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(x_mk))
				{
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /mk game [number] [text]");
					return 1;
				}
				new number = strval(tmp);
				if(number < 1 || number > 6) { SendClientMessage(playerid, COLOR_GREY, "   Number can't be below 1 or above 6 !"); return 1; }
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[64];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/mk game [number] [text]");
					return 1;
				}
				switch(number)
				{
				    case 1:
				    {
				        strmid(MissionInfo[mGText1], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 1st GameText Line of the Mission.");
				    }
				    case 2:
				    {
				        strmid(MissionInfo[mGText2], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 2nd GameText Line of the Mission.");
				    }
				    case 3:
				    {
				        strmid(MissionInfo[mGText3], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 3rd GameText Line of the Mission.");
				    }
				    case 4:
				    {
				        strmid(MissionInfo[mGText4], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 4th GameText Line of the Mission.");
				    }
				    case 5:
				    {
				        strmid(MissionInfo[mGText5], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 5th GameText Line of the Mission.");
				    }
				    case 6:
				    {
				        strmid(MissionInfo[mGText6], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 6th GameText Line of the Mission.");
				    }
				}
			}
			else if(strcmp(x_mk,"cp",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(x_mk))
				{
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /mk cp [number]");
					return 1;
				}
			    new number = strval(tmp);
				if(number < 1 || number > 6) { SendClientMessage(playerid, COLOR_GREY, "   Number can't be below 1 or above 6 !"); return 1; }
				new Float:X,Float:Y,Float:Z;
				GetPlayerPos(playerid, X,Y,Z);
                switch(number)
				{
				    case 1:
				    {
				        MissionInfo[mCP1][0] = X; MissionInfo[mCP1][1] = Y; MissionInfo[mCP1][2] = Z;
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 1st Checkpoint of the Mission.");
				    }
				    case 2:
				    {
				        MissionInfo[mCP2][0] = X; MissionInfo[mCP2][1] = Y; MissionInfo[mCP2][2] = Z;
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 2nd Checkpoint Line of the Mission.");
				    }
				    case 3:
				    {
				        MissionInfo[mCP3][0] = X; MissionInfo[mCP3][1] = Y; MissionInfo[mCP3][2] = Z;
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 3rd Checkpoint Line of the Mission.");
				    }
				    case 4:
				    {
				        MissionInfo[mCP4][0] = X; MissionInfo[mCP4][1] = Y; MissionInfo[mCP4][2] = Z;
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 4th Checkpoint Line of the Mission.");
				    }
				    case 5:
				    {
				        MissionInfo[mCP5][0] = X; MissionInfo[mCP5][1] = Y; MissionInfo[mCP5][2] = Z;
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 5th Checkpoint Line of the Mission.");
				    }
				    case 6:
				    {
				        MissionInfo[mCP6][0] = X; MissionInfo[mCP6][1] = Y; MissionInfo[mCP6][2] = Z;
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 6th Checkpoint Line of the Mission.");
				    }
				}
			}
			else if(strcmp(x_mk,"usecp",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(x_mk))
				{
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /mk usecp [0/1]");
					return 1;
				}
			    new toggle = strval(tmp);
				if(toggle == 0 || toggle == 1) { }
				else { SendClientMessage(playerid, COLOR_GREY, "   CheckpointUse number must be 0 (OFF) or 1 (ON) !"); return 1; }
				MissionInfo[mToggle] = toggle;
				if(toggle == 0) { SendClientMessage(playerid, COLOR_WHITE, "You've set the Use of Checkpoints to 0 (OFF)."); }
				else if(toggle == 1) { SendClientMessage(playerid, COLOR_WHITE, "You've set the Use of Checkpoints to 1 (ON)."); }
			}
			else if(strcmp(x_mk,"title",true) == 0)
			{
			    new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[64];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/mk title [text]");
					return 1;
				}
				strmid(MissionInfo[mTitle], result, 0, strlen(result), 255);
		        SendClientMessage(playerid, COLOR_WHITE, "You've made the Title of the Mission.");
			}
			else if(strcmp(x_mk,"reward",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(x_mk))
				{
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /mk reward [price]");
					return 1;
				}
			    new price = strval(tmp);
				if(price < 1 || price > 50000) { SendClientMessage(playerid, COLOR_GREY, "   Reward Price can't be below 1 or above 50000 !"); return 1; }
				MissionInfo[mReward] = price;
				SendClientMessage(playerid, COLOR_WHITE, "You've made the Reward Price for the Mission.");
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   Invalid Mission Making name !");
				return 1;
			}
	    }
	    return 1;
	}
	if(strcmp(cmd, "/savemission", true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 1337)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /savemission [missionname]");
					return 1;
				}
				SaveMission(playerid,tmp);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/loadmission", true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 1337)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /loadmission [missionname]");
					return 1;
				}
				LoadMission(playerid,tmp);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command!");
			}
		}
		return 1;
	}
    if(strcmp(cmd, "/changertaxe", true) == 0 || strcmp(cmd, "/settax", true) == 0 || strcmp(cmd, "/modifiertax", true) == 0)
	//if(strcmp(cmd,"/changertaxe",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pLeader] != 7)
	        {
				SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas le Maire!");
				return 1;
	        }
	        tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /changertaxe [montant]");
				return 1;
			}
			moneys = strval(tmp);
			if(moneys < 1 || moneys > 5000) { SendClientMessage(playerid, COLOR_GREY, "La taxe ne doit pas être en desous de 1 et au dessus de 5000 !"); return 1; }
			TaxValue = moneys;
			SaveStuff();
			format(string, sizeof(string), "A partir de maintenant la taxe est de $%d par personne.", TaxValue);
			SendClientMessage(playerid, COLOR_WHITE, string);
	    }
	    return 1;
	}
    if(strcmp(cmd, "/donnertaxe", true) == 0 || strcmp(cmd, "/donnertax", true) == 0 || strcmp(cmd, "/givetax", true) == 0)
	//if(strcmp(cmd,"/donnertaxe",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pLeader] != 7)
	        {
				SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas le Maire!");
				return 1;
	        }
	        if(Tax < 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "Il n'y a plus assez d'argent dans les caisses!");
				return 1;
			}
			new Cops = 0;
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
			    if(IsPlayerConnected(i))
			    {
			        if(gTeam[i] == 2 && PlayerInfo[i][pMember] == 1 || PlayerInfo[i][pLeader] == 1)
			        {
			            Cops += 1;
			        }
			    }
			}
			if(Cops >= 1)
			{
			    new value = Tax / 2;
			    new price = value / Cops;
			    for(new i = 0; i < MAX_PLAYERS; i++)
				{
				    if(IsPlayerConnected(i))
				    {
				        if(gTeam[i] == 2 && PlayerInfo[i][pMember] == 1 || PlayerInfo[i][pLeader] == 1)
				        {
				            format(string, sizeof(string), "Vous recevez $%d de la caisse des taxe du Maire.",price);
							SendClientMessage(i, COLOR_WHITE, string);
							SafeGivePlayerMoney(i, price);
							Tax -= price;
				        }
				    }
				}
				SaveStuff();
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Aucun policier en ligne!");
				return 1;
			}
		}
		return 1;
	}
    if(strcmp(cmd, "/prendretax", true) == 0 || strcmp(cmd, "/retirertax", true) == 0 || strcmp(cmd, "/retirertaxe", true) == 0)
	//if(strcmp(cmd,"/prendretax",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        tmp = strtok(cmdtext, idx);
	        new money;
	        money = strval(tmp);
	        if(PlayerInfo[playerid][pLeader] == 7)
	        {
	            if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /prendretax [argent]");
					return 1;
				}
				if(PlayerToPoint(40, playerid, 2310.4268,-13.2487,26.7422) || PlayerToPoint(3, playerid, 2007.8264160156, 1179.9221191406, 10.463212013245) || PlayerToPoint(3, playerid, 2094.11328125, 2224.2905273438, 10.577114105225) || PlayerToPoint(3, playerid, 2194.9216308594, 1993.6619873047, 11.939774513245) || PlayerToPoint(3, playerid, 1008.8481445313, 1067.7512207031, 10.642899513245) || PlayerToPoint(1.5, playerid, 1172.5912,-1328.4365,15.4034))
		    	{
	               SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas à la banque !");
	               return 1;
	            }
		        if(money < Tax)
				{
					SafeGivePlayerMoney(playerid, money);
					Tax -= money;
					SaveStuff();
					if(PlayerInfo[playerid][pLeader] == 7)
		           	{
                        new PName[MAX_PLAYER_NAME];
		          		format(string, sizeof(string), " Vous avez retiré %s du compte de la Mairie.", moneys);
			         	SendClientMessage(playerid, COLOR_WHITE, string);
			          	GetPlayerName(playerid,PName,sizeof(PName));
			        	format(string, sizeof(string), "<< Le Maire %s a retiré %s du compte de la Mairie >>",PName, moneys);
			        	SendClientMessageToAll(COLOR_NICEBLUE, string);
    	            }
			        PayLog(string);
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Il n'y a plus sassez d'argent dans les caisses!");
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas le Maire !");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd,"/deposertax", true) == 0 || strcmp(cmd, "/deposertaxe", true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pLeader] != 7)
			{
				SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas le Maire !");
				return 1;
			}
			if(PlayerToPoint(40, playerid, 2310.4268,-13.2487,26.7422) || PlayerToPoint(3, playerid, 2007.8264160156, 1179.9221191406, 10.463212013245) || PlayerToPoint(3, playerid, 2094.11328125, 2224.2905273438, 10.577114105225) || PlayerToPoint(3, playerid, 2194.9216308594, 1993.6619873047, 11.939774513245) || PlayerToPoint(3, playerid, 1008.8481445313, 1067.7512207031, 10.642899513245) || PlayerToPoint(1.5, playerid, 1172.5912,-1328.4365,15.4034))
			{
	            SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas à la banque !");
	            return 1;
	        }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /deposertaxe [argent]");
				return 1;
			}
			moneys = strval(tmp);
			new playercash = GetPlayerMoney(playerid);
			if(moneys > playercash) { SendClientMessage(playerid, COLOR_GREY, "   Vous n'avez pas cette somme sur vous !"); return 1; }
			else if(moneys < 0) { SendClientMessage(playerid, COLOR_GREY, "   Vous devez choisir un nombre supérieur a 0 !"); return 1; }
			SafeGivePlayerMoney(playerid, -moneys);
			PlayerInfo[playerid][pCash] -= moneys;
			Tax += moneys;
			SaveStuff();
			if(PlayerInfo[playerid][pLeader] == 7)
			{
                new PName[MAX_PLAYER_NAME];
			    format(string, sizeof(string), " Vous avez déposé %s sur le compte de la Mairie.", moneys);
				SendClientMessage(playerid, COLOR_WHITE, string);
				GetPlayerName(playerid,PName,sizeof(PName));
				format(string, sizeof(string), "<< Le Maire %s a déposé %s sur le compte de la Mairie >>",PName, moneys);
				SendClientMessageToAll(COLOR_NICEBLUE, string);
			}
			PayLog(string);
		}
	    return 1;
	}
	if(strcmp(cmd,"/comptemairie",true)==0 || strcmp(cmd,"/voirtax",true)==0 || strcmp(cmd,"/voirtaxe",true)==0)
	{
		if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pLeader] != 7)
			{
				SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas le Maire !");
				return 1;
			}
			if(PlayerToPoint(40, playerid, 2310.4268,-13.2487,26.7422) || PlayerToPoint(3, playerid, 2007.8264160156, 1179.9221191406, 10.463212013245) || PlayerToPoint(3, playerid, 2094.11328125, 2224.2905273438, 10.577114105225) || PlayerToPoint(3, playerid, 2194.9216308594, 1993.6619873047, 11.939774513245) || PlayerToPoint(3, playerid, 1008.8481445313, 1067.7512207031, 10.642899513245) || PlayerToPoint(1.5, playerid, 1172.5912,-1328.4365,15.4034))
			{
	            SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas à la banque !");
	            return 1;
	        }
			format(string, sizeof(string), "  Le compte de la Mairie contient %s$", Tax);
			SendClientMessage(playerid, COLOR_GRAD3, string);
			SaveStuff();
		}
	    return 1;
	}
    if(strcmp(cmd, "/lire", true) == 0 || strcmp(cmd, "/read", true) == 0 || strcmp(cmd, "/lecture", true) == 0)
	//if(strcmp(cmd,"/lire",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
			new x_job[256];
			x_job = strtok(cmdtext, idx);
			if(!strlen(x_job)) {
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /lire [nom]");
				SendClientMessage(playerid, COLOR_GREY, "Noms Disponibles: journal, journaltest");
				return 1;
			}
	        if(strcmp(x_job,"journal",true) == 0)
			{
			    if(GotPaper[playerid] > 0)
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "|_____________________ Journal de Los Santos _____________________|");
			        format(string, sizeof(string), "| %s  |  Par le Journaliste: %s.",Paper[playerid][pTitle],Paper[playerid][pMaker]);
			        SendClientMessage(playerid, COLOR_GREEN, string);
			        format(string, sizeof(string), "%s",Paper[playerid][pLine1]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",Paper[playerid][pLine2]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",Paper[playerid][pLine3]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",Paper[playerid][pLine4]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",Paper[playerid][pLine5]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",Paper[playerid][pLine6]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",Paper[playerid][pLine7]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        SendClientMessage(playerid, COLOR_WHITE, "|____________________________________________________________________|");
			        return 1;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas de journal!");
			        return 1;
			    }
			}
			else if(strcmp(x_job,"journaltest",true) == 0)
			{
            if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9)
			    {
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "USAGE: /lire journaltest [numero]");
						return 1;
					}
					new paper = strval(tmp);
					if(paper < 1 || paper > 10) { SendClientMessage(playerid, COLOR_GREY, "Le numéro doit être entre 1 et 10!"); return 1; }
					paper -= 1;
					if(PaperInfo[paper][PaperUsed] == 0)
					{
					    SendClientMessage(playerid, COLOR_GREY, "Il n'y à pas de journal à ce numéro!");
					    return 1;
					}
			        SendClientMessage(playerid, COLOR_WHITE, "|_____________________ Journal de Los Santos _____________________|");
			        format(string, sizeof(string), "| %s  |  Par le Journaliste: %s.",PaperInfo[paper][PaperTitle],PaperInfo[paper][PaperMaker]);
			        SendClientMessage(playerid, COLOR_GREEN, string);
			        format(string, sizeof(string), "%s",PaperInfo[paper][PaperText1]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",PaperInfo[paper][PaperText2]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",PaperInfo[paper][PaperText3]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",PaperInfo[paper][PaperText4]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",PaperInfo[paper][PaperText5]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",PaperInfo[paper][PaperText6]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",PaperInfo[paper][PaperText7]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        SendClientMessage(playerid, COLOR_WHITE, "|____________________________________________________________________|");
			        return 1;
				}
				else
				{
        			SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas journaliste!");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /lire journaltest [numero]");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/livrer", true) == 0 || strcmp(cmd, "/bring", true) == 0 || strcmp(cmd, "/brings", true) == 0)
    //if(strcmp(cmd, "/livrer", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pJob] == 15 || PlayerInfo[playerid][pJob] == 13)
	        {
			        if(BringingPaper[playerid] != 1)
			        {
			            SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas pris de journal au batiment des journaliste!");
			            return 1;
			        }
			        tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /livrer [playerid/PartOfName]");
						return 1;
					}
			        giveplayerid = ReturnUser(tmp);
					if (IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
							if (ProxDetectorS(8.0, playerid, giveplayerid))
							{
								GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "Vous offrez un de vos journaux à %s.", giveplayer);
								SendClientMessage(playerid, COLOR_WHITE, string);
								format(string, sizeof(string), "Le Livreur de Journaux %s veux vous vendre un journal (Tapez /accepter journal) pour l'acheter.", sendername);
								SendClientMessage(giveplayerid, COLOR_WHITE, string);
								PaperOffer[giveplayerid] = playerid;
							}
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas pres de vous!");
					    	return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté!");
					    return 1;
					}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas livreur de journal!");
	            return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/commencercascade (desactiver)", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pJob] != 11)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas un cascadeur!");
		        return 1;
	        }
	        else
	        {
	        	EnableStuntBonusForPlayer(playerid, 1);
            	GameTextForPlayer(playerid, "~w~Cascade~n~~p~Commencee!", 3500, 1);
	        }
	    }
		return 1;
	}
	if(strcmp(cmd, "/arretercascade (desactiver)", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pJob] != 11)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas un cascadeur!");
		        return 1;
	        }
	        else
	        {
	        	EnableStuntBonusForPlayer(playerid, 0);
	        	GameTextForPlayer(playerid, "~w~Cascade~n~~p~Arretee!", 3500, 1);
	        }
	    }
		return 1;
	}
	if(strcmp(cmd, "/pjournal", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pJob] != 15)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas Livreur de Journaux !");
	            return 1;
	        }
			if(PlayerToPoint(3.0,playerid,2364.8733,2382.9822,10.8203))
			{
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /pjournal [numero]");
					return 1;
				}
		        new paper = strval(tmp);
		        if(paper < 1 || paper > 10) { SendClientMessage(playerid, COLOR_GREY, "Le numero doit être entre 1 et10!"); return 1; }
				paper -= 1;
				if(PaperInfo[paper][PaperUsed] == 0)
				{
				    SendClientMessage(playerid, COLOR_GREY, "Il n'y a pas de journal a ce numéro!");
				    return 1;
				}
		        GetPlayerName(playerid, sendername, sizeof(sendername));
		        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
		        format(string, sizeof(string), "Vous pouvez dès a présent vendre vos journaux, Journal: %s, Par: %s.",PaperInfo[paper][PaperTitle],PaperInfo[paper][PaperMaker]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "%s", PaperInfo[paper][PaperTitle]);
				strmid(Paper[playerid][pTitle], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s", PaperInfo[paper][PaperMaker]);
				strmid(Paper[playerid][pMaker], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s", PaperInfo[paper][PaperText1]);
				strmid(Paper[playerid][pLine1], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s", PaperInfo[paper][PaperText2]);
				strmid(Paper[playerid][pLine2], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s", PaperInfo[paper][PaperText3]);
				strmid(Paper[playerid][pLine3], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s", PaperInfo[paper][PaperText4]);
				strmid(Paper[playerid][pLine4], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s", PaperInfo[paper][PaperText5]);
				strmid(Paper[playerid][pLine5], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s", PaperInfo[paper][PaperText6]);
				strmid(Paper[playerid][pLine6], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s", PaperInfo[paper][PaperText7]);
				strmid(Paper[playerid][pLine7], string, 0, strlen(string), 255);
				BringingPaper[playerid] = 1;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas à l'ABC Studio!");
			    return 1;
			}
	    }
	    return 1;
	}
	if(strcmp(cmd, "/journals", true) == 0 || strcmp(cmd, "/journaux", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9 || PlayerInfo[playerid][pJob] == 15)
	        {
				if(PlayerToPoint(3.0,playerid,1793.02,-1296.56,13.44))
				{
				    new number = 0;
				    for(new i = 0; i < sizeof(PaperInfo); i++)
				    {
				        number ++;
				        if(PaperInfo[i][PaperUsed] == 1)
				    	{
				        	format(string, sizeof(string), "|%d| Journal: %s, By: %s",number,PaperInfo[i][PaperTitle],PaperInfo[i][PaperMaker]);
							SendClientMessage(playerid, COLOR_WHITE, string);
						}
				    }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas à l'ABC Studio!");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas Livreur de Journals / Journaliste!");
	            return 1;
			}
	    }
	    return 1;
	}
   if(strcmp(cmd,"/animlist",true)==0)
	{
	    SendClientMessage(playerid, COLOR_YELLOW, "________________________________________________________________________________________________________________________");
		SendClientMessage(playerid, COLOR_RED,"-Available Animations:");
	    SendClientMessage(playerid, COLOR_WHITE,"/fall - /fallback - /injured - /akick - /push - /lowbodypush - /handsup - /bomb - /drunk - /getarrested - /laugh - /sup");
        SendClientMessage(playerid, COLOR_WHITE," /basket - /headbutt - /medic - /spray - /robman - /taichi - /lookout - /kiss - /cellin - /cellout - /crossarms - /lay");
        SendClientMessage(playerid, COLOR_WHITE,"/deal - /crack - /smoke - /groundsit - /chat - /dance - /fucku - /strip - /hide - /vomit - /eat - /chairsit - /reload");
        SendClientMessage(playerid, COLOR_WHITE,"/koface - /kostomach - /rollfall - /carjacked1 - /carjacked2 - /rcarjack1 - /rcarjack2 - /lcarjack1 - /lcarjack2 - /bat");
        SendClientMessage(playerid, COLOR_WHITE,"/lifejump - /exhaust - /leftslap - /carlock - /hoodfrisked - /lightcig - /tapcig - /box - /lay2 - /chant - finger");
        SendClientMessage(playerid, COLOR_WHITE,"/shouting - /knife - /cop - /elbow - /kneekick - /airkick - /gkick - /gpunch - /fstance - /lowthrow - /highthrow - /aim");
        SendClientMessage(playerid, COLOR_WHITE,"/pee - /lean");
        SendClientMessage(playerid, COLOR_YELLOW, "¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯");
        return 1;

	}
	if(strcmp(cmd, "/journal", true) == 0)
	{
	     if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9)
	        {
	            if(!PlayerToPoint(3.0,playerid,1793.02,-1296.56,13.44))
				{
				    SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas à l'ABC Studio!");
				    return 1;
				}
				new x_nr[256];
				x_nr = strtok(cmdtext, idx);
				if(!strlen(x_nr)) {
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /journal ecrire [numero] ou /journal suprimer [numero]");
				    return 1;
				}
			    if(strcmp(x_nr,"ecrire",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
				    if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /journal ecrire [numero]");
					    return 1;
					}
					new paper = strval(tmp);
					if(paper < 1 || paper > 10) { SendClientMessage(playerid, COLOR_GREY, "Le numero doit être entre 1 et 10!"); return 1; }
					paper -= 1;
					if(PaperInfo[paper][PaperUsed] == 1)
					{
					    SendClientMessage(playerid, COLOR_GREY, "Il y à déjà un journal sur ce numéro!");
					    return 1;
					}
					SendClientMessage(playerid, COLOR_WHITE, "Vous ecrivez un nouveau journal.");
					SendClientMessage(playerid, COLOR_LIGHTRED, "Tout ce que vous écrivez va être ajouté au prochain journal. Vous pouvez écrire 7 lignes de texte.");
					SendClientMessage(playerid, COLOR_LIGHTRED, "S'il vous plait, inscrivez le titre que vous désirez mettre pour votre Journal.");
					WritingPaper[playerid] = 1;
					WritingPaperNumber[playerid] = paper;
					WritingLine[playerid] = 1;
				}
				else if(strcmp(x_nr,"suprimer",true) == 0)
				{
				    if(PlayerInfo[playerid][pRank] >= 4)
				    {
				        tmp = strtok(cmdtext, idx);
					    if(!strlen(tmp))
						{
						    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /journal suprimer [numero]");
						    return 1;
						}
						new paper = strval(tmp);
						if(paper < 1 || paper > 10) { SendClientMessage(playerid, COLOR_GREY, "Le numero doit être entre 1 et 10!"); return 1; }
						paper -= 1;
						ClearPaper(paper);
						new number = paper; number += 1;
						format(string, sizeof(string), "Vous avez suprimé le journal %d.",number);
						SendClientMessage(playerid, COLOR_YELLOW, string);
				    }
				    else
				    {
				        SendClientMessage(playerid, COLOR_GREY, "Vous devez être rang 4 pour pouvoir suprimer un journal!");
				        return 1;
				    }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /journal ecrire [numero] ou /journal suprimer [numero]");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas journaliste!");
	            return 1;
			}
	    }
	    return 1;
	}
	if(strcmp(cmd, "/changerspawn", true) == 0 || strcmp(cmd, "/spawnchange", true) == 0 || strcmp(cmd, "/spawnchanger", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pPhousekey] != 255)
	        {
	            if(Spectate[playerid] != 255 && PlayerInfo[playerid][pAdmin] < 1)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "Vous êtes spectateur vous ne pouvez pas changer de spawn!");
	                return 1;
	            }
	            if(SpawnChange[playerid])
	            {
	                SendClientMessage(playerid, COLOR_GREY, "Vous allez maintenant spawn a votre place normale!");
	                SpawnChange[playerid] = 0;
	                /*if(IsAnInstructor(playerid))
		            {
		                if(SchoolSpawn[playerid] == 0)
		                {
		                    SchoolSpawn[playerid] = 1;
		                    SendClientMessage(playerid, COLOR_GREY, "   You will now spawn at the Flying School !");
		                }
		                else if(SchoolSpawn[playerid] == 1)
		                {
		                    SchoolSpawn[playerid] = 0;
		                    SendClientMessage(playerid, COLOR_GREY, "   You will now spawn at the Driving School !");
		                }
		            }*/
	            }
	            else
	            {
	                SendClientMessage(playerid, COLOR_GREY, "Vous allez maintenant spawn a votre maison!");
	                SpawnChange[playerid] = 1;
	            }
	        }
	        else
	        {
	            /*if(IsAnInstructor(playerid))
	            {
	                if(SchoolSpawn[playerid] == 0)
	                {
	                    SchoolSpawn[playerid] = 1;
	                    SendClientMessage(playerid, COLOR_GREY, "   You will now spawn at the Flying School !");
	                }
	                else if(SchoolSpawn[playerid] == 1)
	                {
	                    SchoolSpawn[playerid] = 0;
	                    SendClientMessage(playerid, COLOR_GREY, "   You will now spawn at the Driving School !");
	                }
	            }
	            else
	            {*/
		            SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas de maison!");
		            return 1;
	            //}
	        }
	    }
	    return 1;
	}
	if(strcmp(cmd, "/vetements", true) == 0 || strcmp(cmd, "/vetement", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pMember] >= 1)
	        {
	            if(IsAtClothShop(playerid))
				{
				    if(PlayerInfo[playerid][pMember] == 1) { ChosenSkin[playerid] = 280; SetPlayerSkin(playerid, 280); }
					else if(PlayerInfo[playerid][pMember] == 2) { ChosenSkin[playerid] = 286; SetPlayerSkin(playerid, 286); }
					else if(PlayerInfo[playerid][pMember] == 3) { ChosenSkin[playerid] = 287; SetPlayerSkin(playerid, 287); }
					else if(PlayerInfo[playerid][pMember] == 4) { ChosenSkin[playerid] = 70; SetPlayerSkin(playerid, 70); }
					else if(PlayerInfo[playerid][pMember] == 5) { ChosenSkin[playerid] = 117; SetPlayerSkin(playerid, 117); }
					else if(PlayerInfo[playerid][pMember] == 6) { ChosenSkin[playerid] = 111; SetPlayerSkin(playerid, 111); }
					else if(PlayerInfo[playerid][pMember] == 8) { ChosenSkin[playerid] = 249; SetPlayerSkin(playerid, 249); }
					//else if(PlayerInfo[playerid][pMember] == 9) { ChosenSkin[playerid] = 148; SetPlayerSkin(playerid, 148); }
					//else if(PlayerInfo[playerid][pJob] == 13) { ChosenSkin[playerid] = 255; SetPlayerSkin(playerid, 255); }
					//else if(PlayerInfo[playerid][pMember] == 11) { ChosenSkin[playerid] = 59; SetPlayerSkin(playerid, 59); }
					else if(PlayerInfo[playerid][pMember] == 14) { ChosenSkin[playerid] = 169; SetPlayerSkin(playerid, 169); }
					else if(PlayerInfo[playerid][pMember] == 15) { ChosenSkin[playerid] = 127; SetPlayerSkin(playerid, 127); }
					else if(PlayerInfo[playerid][pMember] == 16) { ChosenSkin[playerid] = 184; SetPlayerSkin(playerid, 184); }
					else { return 1; }
					GetPlayerPos(playerid, ChangePos[playerid][0],ChangePos[playerid][1],ChangePos[playerid][2]);
					ChangePos2[playerid][0] = GetPlayerInterior(playerid);
					ChangePos2[playerid][1] = 1;
				    SetPlayerInterior(playerid,0);
					new rand = random(sizeof(gInviteSpawns));
					SetPlayerPos(playerid, gInviteSpawns[rand][0], gInviteSpawns[rand][1], gInviteSpawns[rand][2]); // Warp the player
					SetPlayerFacingAngle(playerid, gInviteSpawns[rand][3]);
					SetPlayerCameraPos(playerid,gInviteSpawns[rand][0] + 3, gInviteSpawns[rand][1], gInviteSpawns[rand][2]);
					SetPlayerCameraLookAt(playerid,gInviteSpawns[rand][0], gInviteSpawns[rand][1], gInviteSpawns[rand][2]);
					TogglePlayerControllable(playerid, 0);
					SelectChar[playerid] = 255;
					SelectCharID[playerid] = PlayerInfo[playerid][pMember];
					SelectCharPlace[playerid] = 1;
					PlayerInfo[playerid][pModel] = ChosenSkin[playerid];
			    	PlayerInfo[playerid][pChar] = ChosenSkin[playerid];
				    SendClientMessage(playerid, COLOR_LIGHTRED, "Utilisez 'suivant' pour passer au skin suivant.");
				    SendClientMessage(playerid, COLOR_LIGHTRED, "Si vous avez trouvé le skin qui vous convient. Tapez 'terminer'.");
					changementvetements[playerid] = 1;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Vous n'êtes pas dans un magasin de vêtements!");
					return 1;
				}
	        }
	        else
	        {
	            if(PlayerInfo[playerid][pLeader] != 0)
	            {
	                SendClientMessage(playerid, COLOR_GRAD2, "Vous ne pouvez pas changer de vêtements vous ête chef!");
	                return 1;
	            }
	            if(IsAtClothShop(playerid))
	            {
	                if(PlayerInfo[playerid][pSex] == 1) { ChosenSkin[playerid] = 2; SetPlayerSkin(playerid, 2); PlayerInfo[playerid][pChar] = 2; }
	                else if(PlayerInfo[playerid][pSex] == 2) { ChosenSkin[playerid] = 55; SetPlayerSkin(playerid, 55); PlayerInfo[playerid][pChar] = 55; }
	                else { return 1; }
	                GetPlayerPos(playerid, ChangePos[playerid][0],ChangePos[playerid][1],ChangePos[playerid][2]);
					ChangePos2[playerid][0] = GetPlayerInterior(playerid);
					ChangePos2[playerid][1] = 1;
					SetPlayerInterior(playerid,0);
					new rand = random(sizeof(gInviteSpawns));
					SetPlayerPos(playerid, gInviteSpawns[rand][0], gInviteSpawns[rand][1], gInviteSpawns[rand][2]); // Warp the player
					SetPlayerFacingAngle(playerid, gInviteSpawns[rand][3]);
					SetPlayerCameraPos(playerid,gInviteSpawns[rand][0] + 3, gInviteSpawns[rand][1], gInviteSpawns[rand][2]);
					SetPlayerCameraLookAt(playerid,gInviteSpawns[rand][0], gInviteSpawns[rand][1], gInviteSpawns[rand][2]);
					TogglePlayerControllable(playerid, 0);
					SelectChar[playerid] = 255;
					if(PlayerInfo[playerid][pSex] == 1) { SelectCharID[playerid] = 20; }
					else if(PlayerInfo[playerid][pSex] == 2) { SelectCharID[playerid] = 30; }
					else { return 1; }
					SelectCharPlace[playerid] = 1;
					PlayerInfo[playerid][pModel] = ChosenSkin[playerid];
					PlayerInfo[playerid][pChar] = ChosenSkin[playerid];
					SendClientMessage(playerid, COLOR_LIGHTRED, "Utilisez 'suivant' pour passer au skin suivant.");
				    SendClientMessage(playerid, COLOR_LIGHTRED, "Si vous avez trouvé le skin qui vous convient. Tapez 'terminer'.");
	            }
	        }
	    }
	    return 1;
	}
	if(strcmp(cmd, "/lotto", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pLottoNr] > 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Vous avez déja un ticket de Lotto !");
	            return 1;
	        }
	        if(GetPlayerMoney(playerid) < 250)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Le ticket de Lotto coute 250$ !");
	            return 1;
	        }
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_WHITE,"UTILISATION: /lotto [number]");
				return 1;
			}
			new lottonr = strval(tmp);
			if(lottonr < 1 || lottonr > 50) { SendClientMessage(playerid, COLOR_GREY, "   Le numéro doit être compris entre 1 et 50"); return 1; }
			format(string, sizeof(string), " Vous avez acheté un Ticket de Loterie. Vous avez choisi le nombre : %d.", lottonr);
			SendClientMessage(playerid, COLOR_WHITE, string);
			SafeGivePlayerMoney(playerid, - 250);
			PlayerInfo[playerid][pLottoNr] = lottonr;
	    }
	    return 1;
	}
    if(strcmp(cmd, "/confisquer", true) == 0 || strcmp(cmd, "/prendre", true) == 0 || strcmp(cmd, "/take", true) == 0)
	//if(strcmp(cmd, "/confisquer", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gTeam[playerid] == 2 || IsACop(playerid))
	        {
	            if(PlayerInfo[playerid][pRank] < 2)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "Vous devez être plus haut que rang 2 pour utiliser cette commande!");
	                return 1;
	            }
	            new x_nr[256];
				x_nr = strtok(cmdtext, idx);
				if(!strlen(x_nr)) {
					SendClientMessage(playerid, COLOR_WHITE, "|__________________ Prendre Permi __________________|");
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /confisquer [nom] [playerid/PartOfName]");
			  		SendClientMessage(playerid, COLOR_GREY, "Noms Disponibles Permis: conduite, vol, navigation, permiarme, poidlourd, moto");
			  		SendClientMessage(playerid, COLOR_GREY, "Noms Disponibles: arme, drogue, materiels, pointpermis, telephone");
					SendClientMessage(playerid, COLOR_WHITE, "|___________________________________________________|");
					return 1;
				}
				if(strcmp(x_nr,"telephone",true) == 0)
                {
                    tmp = strtok(cmdtext, idx);
                    if(!strlen(tmp))
                    {
                        SendClientMessage(playerid, COLOR_WHITE, "USAGE: /confisquer telephone [playerid/PartOfName]");
                        return 1;
                    }
                    giveplayerid = ReturnUser(tmp);
                    if(IsPlayerConnected(giveplayerid))
                    {
                        if(giveplayerid != INVALID_PLAYER_ID)
                        {
                            if(ProxDetectorS(8.0, playerid, giveplayerid))
                            {
                                GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
                                GetPlayerName(playerid, sendername, sizeof(sendername));
                                format(string, sizeof(string), " Vous avez confisqué le téléphone appartenant à %s.", giveplayer);
                                SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                                format(string, sizeof(string), " Officier %s vous à confisqué votre téléphone.", sendername);
                                SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
                                PlayerInfo[giveplayerid][pPnumber] = 0;
                            }
                            else
                            {
                                SendClientMessage(playerid, COLOR_GREY,"Ce joueur n'est pas près de vous !");
                                return 1;
                            }
                        }
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté !");
                        return 1;
                    }
                }
			    if(strcmp(x_nr,"conduite",true) == 0)
				{
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "USAGE: /confisquer conduite [playerid/PartOfName]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if (ProxDetectorS(8.0, playerid, giveplayerid))
							{
							    new giveplayername[64];
							    GetPlayerName(playerid, sendername, sizeof(sendername));
							    GetPlayerName(giveplayerid, giveplayername, sizeof(giveplayername));
						        format(string, sizeof(string), "Vous avez retiré le permis de conduire de %s.", giveplayername);
						        SendClientMessage(playerid, COLOR_WHITE, string);
						        format(string, sizeof(string), "Officier %s vous à retiré votre permis de conduire.", sendername);
						        SendClientMessage(giveplayerid, COLOR_WHITE, string);
						        PlayerInfo[giveplayerid][pCarLic] = 0;
						        PlayerInfo[giveplayerid][pPointPermis] = 0;
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas près de vous!");
							    return 1;
							}
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté!");
					    return 1;
					}
				}
    			if(strcmp(x_nr,"poidlourd",true) == 0)
				{
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "USAGE: /confisquer poidlourd [playerid/PartOfName]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if (ProxDetectorS(8.0, playerid, giveplayerid))
							{
							    new giveplayername[64];
							    GetPlayerName(playerid, sendername, sizeof(sendername));
							    GetPlayerName(giveplayerid, giveplayername, sizeof(giveplayername));
						        format(string, sizeof(string), "Vous avez retiré le permis de poidlourd de %s.", giveplayername);
						        SendClientMessage(playerid, COLOR_WHITE, string);
						        format(string, sizeof(string), "Officier %s vous à retiré votre permis de poidlourd.", sendername);
						        SendClientMessage(giveplayerid, COLOR_WHITE, string);
						        PlayerInfo[giveplayerid][pLourdLic] = 0;
						        PlayerInfo[giveplayerid][pPointPermis] = 0;
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas près de vous!");
							    return 1;
							}
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté!");
					    return 1;
					}
    			}
    			if(strcmp(x_nr,"moto",true) == 0)
				{
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "USAGE: /confisquer moto [playerid/PartOfName]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if (ProxDetectorS(8.0, playerid, giveplayerid))
							{
							    new giveplayername[64];
							    GetPlayerName(playerid, sendername, sizeof(sendername));
							    GetPlayerName(giveplayerid, giveplayername, sizeof(giveplayername));
						        format(string, sizeof(string), "Vous avez retiré le permis de moto de %s.", giveplayername);
						        SendClientMessage(playerid, COLOR_WHITE, string);
						        format(string, sizeof(string), "Officier %s vous à retiré votre permis de moto.", sendername);
						        SendClientMessage(giveplayerid, COLOR_WHITE, string);
						        PlayerInfo[giveplayerid][pMotoLic] = 0;
						        PlayerInfo[giveplayerid][pPointPermis] = 0;
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas près de vous!");
							    return 1;
							}
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté!");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"vol",true) == 0)
				{
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "USAGE: /confisquer vol [playerid/PartOfName]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if (ProxDetectorS(8.0, playerid, giveplayerid))
							{
							    new giveplayername[64];
							    GetPlayerName(playerid, sendername, sizeof(sendername));
							    GetPlayerName(giveplayerid, giveplayername, sizeof(giveplayername));
						        format(string, sizeof(string), "Vous avez retiré le permis de vol de %s.", giveplayername);
						        SendClientMessage(playerid, COLOR_WHITE, string);
						        format(string, sizeof(string), "Officier %s vous à retiré votre permis de vol.", sendername);
						        SendClientMessage(giveplayerid, COLOR_WHITE, string);
						        PlayerInfo[giveplayerid][pFlyLic] = 0;
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas près de vous!");
							    return 1;
							}
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté!");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"permiarme",true) == 0)
				{
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "USAGE: /confisquer permiarme [playerid/PartOfName]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if (ProxDetectorS(8.0, playerid, giveplayerid))
							{
							    new giveplayername[64];
							    GetPlayerName(playerid, sendername, sizeof(sendername));
							    GetPlayerName(giveplayerid, giveplayername, sizeof(giveplayername));
						        format(string, sizeof(string), "Vous avez retiré le permis de port d'arme de %s.", giveplayername);
						        SendClientMessage(playerid, COLOR_WHITE, string);
						        format(string, sizeof(string), "Officier %s vous à retiré votre permis de port d'arme.", sendername);
						        SendClientMessage(giveplayerid, COLOR_WHITE, string);
						        PlayerInfo[giveplayerid][pGunLic] = 0;
					        }
					        else
							{
							    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas près de vous!");
							    return 1;
							}
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté!");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"pointpermis",true) == 0)
				{
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "USAGE: /confisquer pointpermis [playerid/PartOfName]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if (ProxDetectorS(8.0, playerid, giveplayerid))
							{
							    new giveplayername[64];
							    GetPlayerName(playerid, sendername, sizeof(sendername));
							    GetPlayerName(giveplayerid, giveplayername, sizeof(giveplayername));
						        format(string, sizeof(string), "Vous avez retiré 1 point sur le permis de %s.", giveplayername);
						        SendClientMessage(playerid, COLOR_WHITE, string);
						        format(string, sizeof(string), "Officier %s vous à retiré 1 point sur votre permis.", sendername);
						        SendClientMessage(giveplayerid, COLOR_WHITE, string);
						        PlayerInfo[giveplayerid][pPointPermis] --;
					        }
					        else
							{
							    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas près de vous!");
							    return 1;
							}
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté!");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"navigation",true) == 0)
				{
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "USAGE: /confisquer navigation [playerid/PartOfName]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if (ProxDetectorS(8.0, playerid, giveplayerid))
							{
							    new giveplayername[64];
							    GetPlayerName(playerid, sendername, sizeof(sendername));
							    GetPlayerName(giveplayerid, giveplayername, sizeof(giveplayername));
						        format(string, sizeof(string), "Vous avez retiré le permis de navigation de %s.", giveplayername);
						        SendClientMessage(playerid, COLOR_WHITE, string);
						        format(string, sizeof(string), "Officier %s vous à retiré votre permis de navigation.", sendername);
						        SendClientMessage(giveplayerid, COLOR_WHITE, string);
						        PlayerInfo[giveplayerid][pBoatLic] = 0;
					        }
					        else
							{
							    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas près de vous!");
							    return 1;
							}
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté!");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"arme",true) == 0)
				{
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "USAGE: /confisquer arme [playerid/PartOfName]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if (ProxDetectorS(8.0, playerid, giveplayerid))
							{
							    new giveplayername[64];
							    GetPlayerName(playerid, sendername, sizeof(sendername));
							    GetPlayerName(giveplayerid, giveplayername, sizeof(giveplayername));
						        format(string, sizeof(string), "Vous avez confisqué les armes de %s.", giveplayername);
						        SendClientMessage(playerid, COLOR_WHITE, string);
						        format(string, sizeof(string), "Officier %s vous à confisqué vos armes.", sendername);
						        SendClientMessage(giveplayerid, COLOR_WHITE, string);
						        SafeResetPlayerWeapons(giveplayerid);
						        PlayerInfo[giveplayerid][pGun1] = 0; PlayerInfo[giveplayerid][pAmmo1] = 0;
						        PlayerInfo[giveplayerid][pGun2] = 0; PlayerInfo[giveplayerid][pAmmo2] = 0;
						        PlayerInfo[giveplayerid][pGun3] = 0; PlayerInfo[giveplayerid][pAmmo3] = 0;
						        PlayerInfo[giveplayerid][pGun4] = 0; PlayerInfo[giveplayerid][pAmmo4] = 0;
						        PlayerInfo[giveplayerid][pInvWeapon] = 0; PlayerInfo[giveplayerid][pInvAmmo] = 0;
					        }
					        else
							{
							    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas près de vous!");
							    return 1;
							}
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté!");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"drogue",true) == 0)
				{
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "USAGE: /confisquer drogue [playerid/PartOfName]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if (ProxDetectorS(8.0, playerid, giveplayerid))
							{
							    new giveplayername[64];
							    GetPlayerName(playerid, sendername, sizeof(sendername));
							    GetPlayerName(giveplayerid, giveplayername, sizeof(giveplayername));
							    format(string, sizeof(string), "Vous avez confisqué la drogue de %s.", giveplayername);
						        SendClientMessage(playerid, COLOR_WHITE, string);
						        format(string, sizeof(string), "Officier %s vous à confisqué votre drogues.", sendername);
						        SendClientMessage(giveplayerid, COLOR_WHITE, string);
						        PlayerInfo[giveplayerid][pDrugs] = 0;
							}
					        else
							{
							    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas près de vous!");
							    return 1;
							}
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté!");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"materiels",true) == 0)
				{
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "USAGE: /confisquer materiels [playerid/PartOfName]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if (ProxDetectorS(8.0, playerid, giveplayerid))
							{
							    new giveplayername[64];
							    GetPlayerName(playerid, sendername, sizeof(sendername));
							    GetPlayerName(giveplayerid, giveplayername, sizeof(giveplayername));
							    format(string, sizeof(string), "Vous avez confisqué le matériel de %s.", giveplayername);
						        SendClientMessage(playerid, COLOR_WHITE, string);
						        format(string, sizeof(string), "Officier %s vous à confisqué votre materiel.", sendername);
						        SendClientMessage(giveplayerid, COLOR_WHITE, string);
						        PlayerInfo[giveplayerid][pMats] = 0;
							}
					        else
							{
							    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas près de vous!");
							    return 1;
							}
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté!");
					    return 1;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Mauvais nom!");
					return 1;
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas policier!");
	            return 1;
	        }
	    }
	    return 1;
	}
	if(strcmp(cmd, "/boire", true) == 0)
	{
	new Bourre[256]
	format(Bourre, sizeof(Bourre), "Bourré");
	    if(IsPlayerConnected(playerid))
	    {
	        if(IsAtBar(playerid))
	        {
	            if(PlayerDrunk[playerid] < 10)
	            {
	                new Float:health;
	                new x_nr[256];
					x_nr = strtok(cmdtext, idx);
					if(!strlen(x_nr)) {
						SendClientMessage(playerid, COLOR_WHITE, "|____________________ Boissons ______________________|");
						SendClientMessage(playerid, COLOR_WHITE, "USAGE: /boire [nomboisson]");
				  		SendClientMessage(playerid, COLOR_GREY, "Sans Alcool: eau ($1), soda($2)");
				  		SendClientMessage(playerid, COLOR_GREY, "Boisson Alcoolisée pas cher: biere ($6), Bourbon($8), Champagne($12)");
				  		SendClientMessage(playerid, COLOR_GREY, "Boisson Alcoolisée cher: Vodka ($16), wiski($20)");
				  		SendClientMessage(playerid, COLOR_LIGHT_BLUE, "Avertissement! L'exces d'alcool peut causer de grave trouble!");
						SendClientMessage(playerid, COLOR_WHITE, "|______________________________________________________|");
						return 1;
					}
				    if(strcmp(x_nr,"biere",true) == 0)
					{
						if(PlayerInfo[playerid][pAge] < 16)
						{
						    SendClientMessage(playerid, COLOR_WHITE, "Barman: Exusez moi, mais vous devez avoir plus de 16 ans pour pouvoir commander cette boison.");
						    return 1;
						}
					    SafeGivePlayerMoney(playerid, - 6);
					    PlayerDrunk[playerid] += 1;
					    SetPlayerChatBubble(playerid, Bourre, 0xDE0000F6, 100.0, 10 * 60000);
						if(PlayerDrunk[playerid] >= 5) { GameTextForPlayer(playerid, "~w~Vous etes~n~~p~Saoul", 3500, 1); }
						GetPlayerHealth(playerid, health);
						SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_BEER);
						if(PlayerToPoint(30.0,playerid,446.0222,-16.9298,1001.1328))
						{
		    				BizzInfo[7][bTill] += 6;
							ExtortionBiz(7, 6);
							BizzInfo[7][bProducts]--;
							OnPropUpdate();
						}
						if(health < 100)
						{
						    if(PlayerInfo[playerid][pAlcoholPerk] > 0) { PlayerDrunk[playerid] += 1; new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 10; SetPlayerHealth(playerid, health + hp); }
							else { SetPlayerHealth(playerid, health + 10.0); }
						}
					}
					else if(strcmp(x_nr,"bourbon",true) == 0)
					{
					    if(PlayerInfo[playerid][pAge] < 18)
						{
						    SendClientMessage(playerid, COLOR_WHITE, "Barman: Exusez moi, mais vous devez avoir plus de 18 ans pour pouvoir commander cette boison.");
						    return 1;
						}
					    SafeGivePlayerMoney(playerid, - 8);
					    PlayerDrunk[playerid] += 2;
					    SetPlayerChatBubble(playerid, Bourre, 0xDE0000F6, 100.0, 10 * 60000);
						if(PlayerDrunk[playerid] >= 5) { GameTextForPlayer(playerid, "~w~Vous etes~n~~p~Saoul", 3500, 1); }
						GetPlayerHealth(playerid, health);
						SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_BEER);
						if(PlayerToPoint(30.0,playerid,446.0222,-16.9298,1001.1328))
						{
						    BizzInfo[7][bTill] += 8;
							ExtortionBiz(7, 8);
							BizzInfo[7][bProducts]--;
							OnPropUpdate();
						}
						if(health < 100)
						{
						    if(PlayerInfo[playerid][pAlcoholPerk] > 0) { PlayerDrunk[playerid] += 1; new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 15; SetPlayerHealth(playerid, health + hp); }
							else { SetPlayerHealth(playerid, health + 15.0); }
						}
					}
					else if(strcmp(x_nr,"champagne",true) == 0)
					{
					    if(PlayerInfo[playerid][pAge] < 18)
						{
						    SendClientMessage(playerid, COLOR_WHITE, "Barman: Exusez moi, mais vous devez avoir plus de 18 ans pour pouvoir commander cette boison.");
						    return 1;
						}
					    SafeGivePlayerMoney(playerid, - 12);
					    PlayerDrunk[playerid] += 2;
					    SetPlayerChatBubble(playerid, Bourre, 0xDE0000F6, 100.0, 10 * 60000);
						if(PlayerDrunk[playerid] >= 5) { GameTextForPlayer(playerid, "~w~Vous etes~n~~p~Saoul", 3500, 1); }
						GetPlayerHealth(playerid, health);
						SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_BEER);
						if(PlayerToPoint(30.0,playerid,446.0222,-16.9298,1001.1328))
						{
						    BizzInfo[7][bTill] += 12;
							ExtortionBiz(7, 12);
							BizzInfo[7][bProducts]--;
							OnPropUpdate();
						}
						if(health < 100)
						{
						    if(PlayerInfo[playerid][pAlcoholPerk] > 0) { PlayerDrunk[playerid] += 1; new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 20; SetPlayerHealth(playerid, health + hp); }
							else { SetPlayerHealth(playerid, health + 20.0); }
						}
					}
                    else if(strcmp(x_nr,"vodka",true) == 0)
					{
					    if(PlayerInfo[playerid][pAge] < 18)
						{
						    SendClientMessage(playerid, COLOR_WHITE, "Barman: Exusez moi, mais vous devez avoir plus de 18 ans pour pouvoir commander cette boison.");
						    return 1;
						}
					    SafeGivePlayerMoney(playerid, - 16);
					    PlayerDrunk[playerid] += 3;
					    SetPlayerChatBubble(playerid, Bourre, 0xDE0000F6, 100.0, 10 * 60000);
						if(PlayerDrunk[playerid] >= 5) { GameTextForPlayer(playerid, "~w~Vous etes~n~~p~Saoul", 3500, 1); }
						GetPlayerHealth(playerid, health);
						SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_BEER);
						if(PlayerToPoint(30.0,playerid,446.0222,-16.9298,1001.1328))
						{
						    BizzInfo[7][bTill] += 16;
							ExtortionBiz(7, 16);
							BizzInfo[7][bProducts]--;
							OnPropUpdate();
						}
						if(health < 100)
						{
						    if(PlayerInfo[playerid][pAlcoholPerk] > 0) { PlayerDrunk[playerid] += 1; new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 27; SetPlayerHealth(playerid, health + hp); }
							else { SetPlayerHealth(playerid, health + 27.0); }
						}
					}
                    else if(strcmp(x_nr,"wiski",true) == 0)
					{
					    if(PlayerInfo[playerid][pAge] < 18)
						{
						    SendClientMessage(playerid, COLOR_WHITE, "Barman: Exusez moi, mais vous devez avoir plus de 18 ans pour pouvoir commander cette boison.");
						    return 1;
						}
					    SafeGivePlayerMoney(playerid, - 20);
					    PlayerDrunk[playerid] += 4;
					    SetPlayerChatBubble(playerid, Bourre, 0xDE0000F6, 100.0, 10 * 60000);
						if(PlayerDrunk[playerid] >= 5) { GameTextForPlayer(playerid, "~w~Vous etes~n~~p~Saoul", 3500, 1); }
						GetPlayerHealth(playerid, health);
						SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_BEER);
						if(PlayerToPoint(30.0,playerid,446.0222,-16.9298,1001.1328))
						{
						    BizzInfo[7][bTill] += 20;
							ExtortionBiz(7, 20);
							BizzInfo[7][bProducts]--;
							OnPropUpdate();
						}
						if(health < 100)
						{
						    if(PlayerInfo[playerid][pAlcoholPerk] > 0) { PlayerDrunk[playerid] += 1; new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 40; SetPlayerHealth(playerid, health + hp); }
							else { SetPlayerHealth(playerid, health + 40.0); }
						}
					}
					else if(strcmp(x_nr,"eau",true) == 0)
					{
					    SafeGivePlayerMoney(playerid, - 1);
						GetPlayerHealth(playerid, health);
					    if(health < 100)
						{
						    if(PlayerInfo[playerid][pAlcoholPerk] > 0) { new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 5; SetPlayerHealth(playerid, health + hp); }
							else { SetPlayerHealth(playerid, health + 50.0); }
						}
						else if(health > 100)
						{
						    SetPlayerHealth(playerid, 100);
						}
					}
					else if(strcmp(x_nr,"soda",true) == 0)
					{
					    SafeGivePlayerMoney(playerid, - 2);
						GetPlayerHealth(playerid, health);
					    if(health < 100)
						{
						    if(PlayerInfo[playerid][pAlcoholPerk] > 0) { new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 5; SetPlayerHealth(playerid, health + hp); }
							else { SetPlayerHealth(playerid, health + 50.0); }
						}
						else if(health > 100)
						{
						    SetPlayerHealth(playerid, 100);
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_WHITE, "Barman: Je ne connais pas cette boisson.");
					    return 1;
					}
					GetPlayerHealth(playerid, health);
					if (health > 100) SetPlayerHealth(playerid, 100);
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), " %s boit un peu de %s à la bouteille.", sendername ,x_nr);
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	            }
	            else
	            {
	                SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez plus boire une goutte de plus ou vous allez vomir!");
	                return 1;
	            }
	        }
	        else if(PlayerToPoint(5, playerid, 1255.9084,-791.8105,1085.3828))
	        {
	            if(PlayerDrunk[playerid] < 10)
	            {
	                new Float:health;
	                new x_nr[256];
					x_nr = strtok(cmdtext, idx);
					if(!strlen(x_nr)) {
						SendClientMessage(playerid, COLOR_WHITE, "|____________________ Boissons ______________________|");
						SendClientMessage(playerid, COLOR_WHITE, "USAGE: /boire [nomboisson]");
				  		SendClientMessage(playerid, COLOR_GREY, "Caffé: Cappuccino ($4), Latte($5), Macchiato($5)");
				  		SendClientMessage(playerid, COLOR_GREY, "Mixes/liqueur: Limoncello($8), Amaretto($7), Martini($12)");
				  		SendClientMessage(playerid, COLOR_GREY, "Vins: Merlot ($15), Sangiovese($18), Frizzante($16)");
				  		SendClientMessage(playerid, COLOR_LIGHT_BLUE, "Avertissement! L'exces d'alcool peut causer de grave trouble!");
						SendClientMessage(playerid, COLOR_WHITE, "|______________________________________________________|");
						return 1;
					}
					else if(strcmp(x_nr,"cappuccino",true) == 0)
					{
						GetPlayerHealth(playerid, health);
						if(health < 100)
					    {
							SafeGivePlayerMoney(playerid, - 4);
					        SetPlayerHealth(playerid, health + 30);
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), " %s boit une gorgée de Cappuccino.", sendername);
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					    }
					}
					else if(strcmp(x_nr,"latte",true) == 0)
					{
						SafeGivePlayerMoney(playerid, - 5);
				        SetPlayerHealth(playerid, health + 30);
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), " %s boit dans un grand verre à caffé de la katte.", sendername);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					else if(strcmp(x_nr,"macchiato",true) == 0)
					{
						SafeGivePlayerMoney(playerid, - 5);
				        SetPlayerHealth(playerid, health + 30);
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), " %s boit dans un grand verre à caffé du Macchiato.", sendername);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				    else if(strcmp(x_nr,"limoncello",true) == 0)
					{
					    SafeGivePlayerMoney(playerid, - 8);
					    PlayerDrunk[playerid] += 3;
					    SetPlayerChatBubble(playerid, Bourre , 0xDE0000F6, 100.0, 10 * 60000);
						if(PlayerDrunk[playerid] >= 5) { GameTextForPlayer(playerid, "~w~Vous etes~n~~p~Saoul", 3500, 1); }
						if(GetPlayerHealth(playerid, health) < 100)
						{
						    if(PlayerInfo[playerid][pAlcoholPerk] > 0)
							{
								PlayerDrunk[playerid] += 1;
								new hp = 2 * PlayerInfo[playerid][pAlcoholPerk];
								hp += 30;
								SetPlayerHealth(playerid, health + hp);
								format(string, sizeof(string), " %s boit dans une tasse du Limoncello.", sendername);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							}
							else
							{
								SetPlayerHealth(playerid, health + 30.0);
								format(string, sizeof(string), " %s boit dans une tasse du Limoncello.", sendername);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							}
						}
					}
				    else if(strcmp(x_nr,"amaretto",true) == 0)
					{
					    SafeGivePlayerMoney(playerid, - 7);
					    PlayerDrunk[playerid] += 2;
					    SetPlayerChatBubble(playerid, Bourre, 0xDE0000F6, 100.0, 10 * 60000);
						if(PlayerDrunk[playerid] >= 5) { GameTextForPlayer(playerid, "~w~Vous etes~n~~p~Saoul", 3500, 1); }
						if(GetPlayerHealth(playerid, health) < 100)
						{
						    if(PlayerInfo[playerid][pAlcoholPerk] > 0)
							{
								PlayerDrunk[playerid] += 1;
								new hp = 2 * PlayerInfo[playerid][pAlcoholPerk];
								hp += 30;
								SetPlayerHealth(playerid, health + hp);
								format(string, sizeof(string), " %s boit une gorgé d'Amaretto.", sendername);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							}
							else
							{
								SetPlayerHealth(playerid, health + 30.0);
								format(string, sizeof(string), " %s boit une gorgé d'Amaretto.", sendername);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							}
						}
					}
				    else if(strcmp(x_nr,"martini",true) == 0)
					{
					    SafeGivePlayerMoney(playerid, - 12);
					    PlayerDrunk[playerid] += 3;
					    SetPlayerChatBubble(playerid, Bourre, 0xDE0000F6, 100.0, 10 * 60000);
						if(PlayerDrunk[playerid] >= 5) { GameTextForPlayer(playerid, "~w~Vous etes~n~~p~Saoul", 3500, 1); }
						if(GetPlayerHealth(playerid, health) < 100)
						{
						    if(PlayerInfo[playerid][pAlcoholPerk] > 0)
							{
								PlayerDrunk[playerid] += 1;
								new hp = 2 * PlayerInfo[playerid][pAlcoholPerk];
								hp += 30;
								SetPlayerHealth(playerid, health + hp);
								SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_BEER);
								format(string, sizeof(string), " %s boit une gorgé de Martini dans son verre à coctail.", sendername);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							}
							else
							{
								SetPlayerHealth(playerid, health + 30.0);
								format(string, sizeof(string), " %s boit une gorgé de Martini dans son verre à coctail.", sendername);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							}
						}
					}
				    else if(strcmp(x_nr,"merlot",true) == 0)
					{
					    SafeGivePlayerMoney(playerid, - 15);
					    PlayerDrunk[playerid] += 2;
					    SetPlayerChatBubble(playerid, Bourre, 0xDE0000F6, 100.0, 10 * 60000);
						if(PlayerDrunk[playerid] >= 5) { GameTextForPlayer(playerid, "~w~Vous etes~n~~p~Saoul", 3500, 1); }
						if(GetPlayerHealth(playerid, health) < 100)
						{
						    if(PlayerInfo[playerid][pAlcoholPerk] > 0)
							{
								PlayerDrunk[playerid] += 1;
								new hp = 2 * PlayerInfo[playerid][pAlcoholPerk];
								hp += 30;
								SetPlayerHealth(playerid, health + hp);
								SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_BEER);
								format(string, sizeof(string), " %s boit une gorgé de vin rouge (Merlot).", sendername);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							}
							else
							{
								SetPlayerHealth(playerid, health + 30.0);
								format(string, sizeof(string), " %s boit une gorgé de vin rouge (Merlot).", sendername);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							}
						}
					}
				    else if(strcmp(x_nr,"sangiovese",true) == 0)
					{
					    SafeGivePlayerMoney(playerid, - 18);
					    PlayerDrunk[playerid] += 2;
					    SetPlayerChatBubble(playerid, Bourre, 0xDE0000F6, 100.0, 10 * 60000);
						if(PlayerDrunk[playerid] >= 5) { GameTextForPlayer(playerid, "~w~Vous etes~n~~p~Saoul", 3500, 1); }
						if(GetPlayerHealth(playerid, health) < 100)
						{
						    if(PlayerInfo[playerid][pAlcoholPerk] > 0)
							{
								PlayerDrunk[playerid] += 1;
								new hp = 2 * PlayerInfo[playerid][pAlcoholPerk];
								hp += 30;
								SetPlayerHealth(playerid, health + hp);
								SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_BEER);
								format(string, sizeof(string), " %s boit une gorgé de vin rouge (Sangiovese).", sendername);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							}
							else
							{
								SetPlayerHealth(playerid, health + 30.0);
								format(string, sizeof(string), " %s boit une gorgé de vin rouge (Sangiovese).", sendername);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							}
						}
					}
				    else if(strcmp(x_nr,"frizzante",true) == 0)
					{
					    SafeGivePlayerMoney(playerid, - 16);
					    PlayerDrunk[playerid] += 2;
					    SetPlayerChatBubble(playerid, Bourre, 0xDE0000F6, 100.0, 10 * 60000);
						if(PlayerDrunk[playerid] >= 5) { GameTextForPlayer(playerid, "~w~Vous etes~n~~p~Saoul", 3500, 1); }
						if(GetPlayerHealth(playerid, health) < 100)
						{
						    if(PlayerInfo[playerid][pAlcoholPerk] > 0)
							{
								PlayerDrunk[playerid] += 1;
								new hp = 2 * PlayerInfo[playerid][pAlcoholPerk];
								hp += 30;
								SetPlayerHealth(playerid, health + hp);
								SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_BEER);
								format(string, sizeof(string), " %s boit une gorgé de vin blanc (Frizzante).", sendername);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							}
							else
							{
								SetPlayerHealth(playerid, health + 30.0);
								format(string, sizeof(string), " %s boit une gorgé de vin blanc (Frizzante).", sendername);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							}
						}
					}
					GetPlayerHealth(playerid, health);
					if (health > 100) SetPlayerHealth(playerid, 100);
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas au bar!");
	            return 1;
	        }
	    }
	    return 1;
	}
 	if(strcmp(cmd,"/montrermenu",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
            if(PlayerInfo[playerid][pJob] != 6)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas un serveur!");
		        return 1;
		    }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /montrermenu [playerid/PartOfName]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
				    if (ProxDetectorS(4.0, playerid, giveplayerid))
					{
                        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						GetPlayerName(playerid, sendername, sizeof(sendername));
			            format(string, sizeof(string), " %s tend un menu à %d.", sendername, giveplayerid);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						ProxDetector(8.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						LoopingAnim(playerid,"BAR","Barserve_give",4.1,0,1,1,1,1);
					    SendClientMessage(giveplayerid, COLOR_RED, "|____________________ Menu _____________________|");
						SendClientMessage(giveplayerid, COLOR_WHITE, "                        --- Menu du Jour ---               ");
						SendClientMessage(giveplayerid, COLOR_WHITE, "- Pain de Naan ($75)    - Salade ($85)              ");
				  		SendClientMessage(giveplayerid, COLOR_WHITE, "- Pulet Rotti ($200)    - Spaghetti Bolognese ($250)  ");
				  		SendClientMessage(giveplayerid, COLOR_WHITE, "- Pudding ($300)        - Gateau au Chocolat ($425)    ");
				  		SendClientMessage(giveplayerid, COLOR_RED, "                 USAGE: /commanderplat                    ");
				  		SendClientMessage(giveplayerid, COLOR_RED, "|_______________________________________________|");
						SendClientMessage(giveplayerid, COLOR_GREY, string);
				        format(string, sizeof(string), " %s vous montre le menu.", sendername);
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
         			}
					else
	                {
	                    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas près de vous!");
	                    return 1;
	                }
				}
			}
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté!");
	            return 1;
	        }
		}
	    return 1;
 	}
	if(strcmp(cmd, "/uniforme", true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pJob] != 6)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Vous n'êtes pas serveur!");
				return 1;
			}
			{
			    new x_nr[256];
				x_nr = strtok(cmdtext, idx);
				if(!strlen(x_nr))
				{
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /uniforme liste /uniforme[skin id]");
					return 1;
				}
				if (PlayerToPoint(3, playerid,-792.9693,500.5572,1367.3672) || PlayerToPoint(3,playerid,-779.3134,497.8989,1371.7490) || PlayerInfo[playerid][pLocal] != 255)
				{
					if(strcmp(x_nr,"liste",true) == 0)
					{
						SendClientMessage(playerid, COLOR_YELLOW, "|_________Uniforme de Serveur_________|");
						SendClientMessage(playerid, COLOR_GRAD1, "1: Serveur Noir ");
						SendClientMessage(playerid, COLOR_GRAD1, "2: Serveur Blanc");
						SendClientMessage(playerid, COLOR_YELLOW, "|_____________________________________|");
						return 1;
					}
					else if(strcmp(x_nr,"1",true) == 0)
					{
						SetPlayerSkin(playerid, 168);
						SendClientMessage(playerid, COLOR_GRAD2, "Vous êtes un Serveur Noir.");
						return 1;
					}
					else if(strcmp(x_nr,"2",true) == 0)
					{
						SetPlayerSkin(playerid, 209);
						SendClientMessage(playerid, COLOR_GRAD2, "Vous êtes un membre du staff.");
						return 1;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Vous n'avez pas été accepté par le chef.");
					return 1;
				}
			}
		}
		return 1;
	}
 	if(strcmp(cmd, "/commanderplat", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new x_nr[256];
			x_nr = strtok(cmdtext, idx);
			if(!strlen(x_nr)) {
				SendClientMessage(playerid, COLOR_WHITE, "|__________________ Menu  __________________|");
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /commanderplat [nourriture]");
		  		SendClientMessage(playerid, COLOR_GREY, "Entrées: paindenaan, salade");
		  		SendClientMessage(playerid, COLOR_GREY, "Plats Principale: spagbol, puletrotti");
		  		SendClientMessage(playerid, COLOR_GREY, "Desserts: gateau, pudding ");
				SendClientMessage(playerid, COLOR_WHITE, "|___________________________________________|");
				return 1;
			}
		    if(strcmp(x_nr,"paindenaan",true) == 0)
			{
			    GetPlayerName(playerid, sendername, sizeof(sendername));
			    format(string, sizeof(string), "* %s à commandé un Pain de Naan.", sendername);
		    	SendJobMessage(18, TEAM_AZTECAS_COLOR, string);
		    	SendClientMessage(playerid, COLOR_LIGHTBLUE, "Vous avez commandé un Pain de Naan.");
		    	return 1;
			}
			else if(strcmp(x_nr,"salade",true) == 0)
			{
			    GetPlayerName(playerid, sendername, sizeof(sendername));
			    format(string, sizeof(string), "* %s à commandé une salade.", sendername);
		    	SendJobMessage(18, TEAM_AZTECAS_COLOR, string);
		    	SendClientMessage(playerid, COLOR_LIGHTBLUE, "Vous avez commandé un Salade.");
		    	return 1;
			}
			else if(strcmp(x_nr,"spagbol",true) == 0)
			{
			    GetPlayerName(playerid, sendername, sizeof(sendername));
			    format(string, sizeof(string), "* %s à commandé un plat de  Spaghetti Bolognese.", sendername);
		    	SendJobMessage(18, TEAM_AZTECAS_COLOR, string);
		    	SendClientMessage(playerid, COLOR_LIGHTBLUE, "Vous avez commandé un plat Spaghetti Bolognese.");
		    	return 1;
			}
			else if(strcmp(x_nr,"pouletrotti",true) == 0)
			{
			    GetPlayerName(playerid, sendername, sizeof(sendername));
			    format(string, sizeof(string), "* %s à commandé un Poulet Rotti.", sendername);
		    	SendJobMessage(18, TEAM_AZTECAS_COLOR, string);
		    	SendClientMessage(playerid, COLOR_LIGHTBLUE, "Vous avez commandé un Poulet Rotti.");
		    	return 1;
			}
			else if(strcmp(x_nr,"gateau",true) == 0)
			{
			    GetPlayerName(playerid, sendername, sizeof(sendername));
			    format(string, sizeof(string), "* %s à commandé un Gateau au Chocolat.", sendername);
		    	SendJobMessage(18, TEAM_AZTECAS_COLOR, string);
		    	SendClientMessage(playerid, COLOR_LIGHTBLUE, "Vous avez commandé un Gateau au Chocolat.");
		    	return 1;
			}
			else if(strcmp(x_nr,"pudding",true) == 0)
			{
			    GetPlayerName(playerid, sendername, sizeof(sendername));
			    format(string, sizeof(string), "* %s à commandé un bol de Pudding.", sendername);
		    	SendJobMessage(18, TEAM_AZTECAS_COLOR, string);
		    	SendClientMessage(playerid, COLOR_LIGHTBLUE, "Vous avez commandé un bol de Pudding.");
		    	return 1;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Nous ne servons pas ce plat!");
			    return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/mettrechamp", true) == 0 || strcmp(cmd, "/mettrechampion", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] >= 4)
	        {
	            tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /mettrechamp [playerid/PartOfName]");
					return 1;
				}
				//giveplayerid = strval(tmp);
		        giveplayerid = ReturnUser(tmp);
		        if(IsPlayerConnected(giveplayerid))
		        {
		            if(giveplayerid != INVALID_PLAYER_ID)
		            {
		                GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
		                new nstring[MAX_PLAYER_NAME];
						format(nstring, sizeof(nstring), "%s", giveplayer);
						strmid(Titel[TitelName], nstring, 0, strlen(nstring), 255);
						Titel[TitelWins] = PlayerInfo[giveplayerid][pWins];
						Titel[TitelLoses] = PlayerInfo[giveplayerid][pLoses];
						SaveBoxer();
						format(string, sizeof(string), "Vous avez sacré %s champion de boxe.", giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
		            }
		        }
		        else
		        {
		            SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté!");
		            return 1;
		        }
	        }
			else
			{
				SendClientMessage(playerid, COLOR_BLUE, "Vous n'êtes pas autorisé à utiliser cette commande!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/boxstats", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pJob] != 12)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas Boxer!");
	            return 1;
	        }
	        new ttext[20];//Title
	        new clevel = PlayerInfo[playerid][pBoxSkill];
			if(clevel >= 0 && clevel <= 50) { ttext = "Beginner"; }
			else if(clevel >= 51 && clevel <= 200) { ttext = "Amateur"; }
			else if(clevel >= 201 && clevel <= 400) { ttext = "Prefessionnel"; }
	        new ntext[20];//NickName
	        new level = PlayerInfo[playerid][pWins];
	        if(level > 0 && PlayerInfo[playerid][pLoses] == 0)
	        {
	            ntext = "Invincu";
	        }
	        else
	        {
	            if(level >= 0 && level <= 10) { ntext = "Nouveau venu"; }
	            else if(level >= 11 && level <= 20) { ntext = "Poing Susceptible"; }
	            else if(level >= 21 && level <= 30) { ntext = "Casseur de Noix"; }
	            else if(level >= 31 && level <= 40) { ntext = "Tommygun"; }
	            else if(level >= 41 && level <= 50) { ntext = "Briseur de Crâne"; }
	            else if(level >= 51 && level <= 60) { ntext = "Argneux"; }
	            else if(level >= 61 && level <= 70) { ntext = "Warrior"; }
	            else if(level >= 71) { ntext = "Etalon Italien"; }
	        }
	        SendClientMessage(playerid, COLOR_WHITE, "|__________________ Records de Boxe __________________|");
	        format(string, sizeof(string), "| Champion Actuel: %s, avec [%d] Victoires et [%d] Défaites.", Titel[TitelName],Titel[TitelWins],Titel[TitelLoses]);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "| Titre Actuel: 			%s.", ttext);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "| Surnom Actuel:			%s.", ntext);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "| Nombre de Victoire Total: %d.", PlayerInfo[playerid][pWins]);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "| Nombre de Défaites Total: %d.", PlayerInfo[playerid][pLoses]);
			SendClientMessage(playerid, COLOR_GREY, string);
	        SendClientMessage(playerid, COLOR_WHITE, "|____________________________________________________|");
		}
		return 1;
	}
    if(strcmp(cmd, "/combat", true) == 0 || strcmp(cmd, "/duel", true) == 0 || strcmp(cmd, "/fight", true) == 0)
	//if(strcmp(cmd, "/combat", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pJob] != 12)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas Boxer!");
	            return 1;
	        }
	        if(InRing > 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Il y à déjà un matche en cours, attendez qu'il se termine!");
	            return 1;
	        }
	        if(PlayerBoxing[playerid] > 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous êtes déjà en combat!");
	            return 1;
	        }
	        if(!PlayerToPoint(20.0,playerid,765.9343,0.2761,1000.7173))
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vou sn'êtes pas au gymnase de Ganton!");
	            return 1;
	        }
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /combat [Playerid/PartOfName]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
		    if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez pas vous battre contre vous même!"); return 1; }
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "Vous offré un combat de boxe à %s.", giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
						format(string, sizeof(string), "Le Boxer %s veut se battre avec vous (Tapez /accepter combat) pour accepter.", sendername);
						SendClientMessage(giveplayerid, COLOR_WHITE, string);
				        BoxOffer[giveplayerid] = playerid;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas près de vous!");
						return 1;
					}
			    }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté!");
			    return 1;
			}
	    }
	    return 1;
	}
	if(!strcmp(cmd, "/stylecombat", true)||!strcmp(cmd, "/choixcombat", true))
	{
	    if(IsPlayerConnected(playerid))
	    {
	        new x_f[256];
			x_f = strtok(cmdtext, idx);
			if(!strlen(x_f))
			{
                SendClientMessage(playerid, COLOR_WHITE, "USAGE: /choixcombat [Style]");
                SendClientMessage(playerid, COLOR_WHITE, "Pour de l'aide, utilisez : /choixcombat aide");
				return 1;
			}
			if(!strcmp(x_f,"aide",true))
			{
			    SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
				SendClientMessage(playerid, COLOR_GRAD3,"* Aide Combat ** Normal - Boxing - Kungfu - Kneehead - Grabkick - Elbow");
				SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
				return 1;
			}
			else if(!strcmp(x_f,"Normal",true))
                SetPlayerFightingStyle (playerid, FIGHT_STYLE_NORMAL);
            else if(!strcmp(x_f,"Boxing",true))
                SetPlayerFightingStyle (playerid, FIGHT_STYLE_BOXING);
            else if(!strcmp(x_f,"Kungfu",true))
                SetPlayerFightingStyle (playerid, FIGHT_STYLE_KUNGFU);
            else if(!strcmp(x_f,"Kneehead",true))
                SetPlayerFightingStyle (playerid, FIGHT_STYLE_KNEEHEAD);
            else if(!strcmp(x_f,"Grabkick",true))
                SetPlayerFightingStyle (playerid, FIGHT_STYLE_GRABKICK);
            else if(!strcmp(x_f,"Elbow",true))
                SetPlayerFightingStyle (playerid, FIGHT_STYLE_ELBOW);
			else
				return SendClientMessage(playerid, COLOR_GREY, "   Mauvais choix ! Veuillez choisir un style de combat parmis ceux proposés.");
            format(string, sizeof(string), "Vous avez changé votre style de combat en %s.", x_f);
            SendClientMessage(playerid, COLOR_WHITE, string);
	    }
	}
	/*if(strcmp(cmd, "/music", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pCrashed])
	        {
		        new x_nr[256];
				x_nr = strtok(cmdtext, idx);
				if(!strlen(x_nr)) {
					SendClientMessage(playerid, COLOR_WHITE, "|__________________ Music __________________|");
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /music [name]");
			  		SendClientMessage(playerid, COLOR_GREY, "Available names: On, Off, Next");
					SendClientMessage(playerid, COLOR_WHITE, "|___________________________________________|");
					return 1;
				}
			    if(strcmp(x_nr,"on",true) == 0)
				{
				    GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~g~CD Player On", 5000, 5);
				    new channel = Music[playerid];
				    PlayerPlaySound(playerid, Songs[channel][0], 0.0, 0.0, 0.0);
				}
	            else if(strcmp(x_nr,"off",true) == 0)
				{
				    GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~r~CD Player Off", 5000, 5);
				    PlayerFixRadio(playerid);
				}
				else if(strcmp(x_nr,"next",true) == 0)
				{
				    if(Music[playerid] == 0) { Music[playerid] = 1; }
				    else if(Music[playerid] == 1) { Music[playerid] = 2; }
				    else if(Music[playerid] == 2) { Music[playerid] = 3; }
				    else if(Music[playerid] == 3) { Music[playerid] = 4; }
				    else if(Music[playerid] == 4) { Music[playerid] = 5; }
				    else if(Music[playerid] == 5) { Music[playerid] = 6; }
				    else if(Music[playerid] == 6) { Music[playerid] = 0; }
				    new channel = Music[playerid];
				    PlayerPlaySound(playerid, Songs[channel][0], 0.0, 0.0, 0.0);
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Unknown music command !");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   You don't have a CD-Player !");
			    return 1;
			}
	    }
	    return 1;
	}*/
	/*if(strcmp(cmd, "/service", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new x_nr[256];
			x_nr = strtok(cmdtext, idx);
			if(!strlen(x_nr)) {
				SendClientMessage(playerid, COLOR_WHITE, "|__________________ Service Names __________________|");
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /service [name]");
		  		SendClientMessage(playerid, COLOR_GREY, "Available names: Taxi, Bus, Medic, Mechanic, Pizza");
				SendClientMessage(playerid, COLOR_WHITE, "|________________________________________________|");
				return 1;
			}
		    if(strcmp(x_nr,"taxi",true) == 0)
			{
			    if(TaxiDrivers < 1)
		        {
		            SendClientMessage(playerid, COLOR_GREY, "   There are no Taxi Drivers On Duty at the moment, try again later !");
		            return 1;
		        }
		        if(TransportDuty[playerid] > 0)
		        {
		            SendClientMessage(playerid, COLOR_GREY, "   You can't call for a Taxi now !");
		            return 1;
		        }
		        GetPlayerName(playerid, sendername, sizeof(sendername));
			    format(string, sizeof(string), "* %s is in need of a Taxi Driver. (use /accepter taxi to accept the call)", sendername);
		    	SendFamilyMessage(10, TEAM_AZTECAS_COLOR, string);
		    	SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have called for a Taxi Driver, wait for a reply.");
		    	TaxiCall = playerid;
		    	return 1;
			}
			else if(strcmp(x_nr,"Pizza",true) == 0)//added lookagain
   			{
       			if(PizzaBoys < 1)
          		{
              		SendClientMessage(playerid, COLOR_GREY, "   There are no Pizza boys On Duty at the moment, try again later!");
              		return 1;
          		}
       			GetPlayerName(playerid, sendername, sizeof(sendername));
       			format(string, sizeof(string), "* %s is in need of a Pizza. (use /accepter Pizza to accept the call)", sendername);
       			SendJobMessage(17, COLOR_LIGHTBLUE, string);
       			SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have ordered a Pizza, wait for a reply.");
       			PizzaCall = playerid;
       			return 1;
   			}
			else if(strcmp(x_nr,"bus",true) == 0)
			{
			    new routezonecheck = IsInBusrouteZone(playerid);
				new drivercount = 0;
				if (routezonecheck == 0)
				{
					for (new i=0; i<=MAX_PLAYERS; i++)
					{
						if (IsPlayerConnected(i) && BusrouteEast[i][0] != 0) drivercount++;
					}
					if (drivercount != 0)
					{
						format(string, sizeof(string), "There are currently %d bus drivers on the east route. The route is as follows:", drivercount);
						SendClientMessage(playerid, TEAM_AZTECAS_COLOR, string);
						SendClientMessage(playerid, TEAM_AZTECAS_COLOR, " ");
						SendBusRoute(playerid, 0);
					}
					else SendClientMessage(playerid, COLOR_GREY, "There are no bus drivers on the east route at this time.");
				}
				else if (routezonecheck == 1)
				{
					for (new i=0; i<=MAX_PLAYERS; i++)
					{
						if (IsPlayerConnected(i) && BusrouteWest[i][0] != 0) drivercount++;
					}
					if (drivercount != 0)
					{
						format(string, sizeof(string), "There are currently %d bus drivers on the west route. The route is as follows:", drivercount);
						SendClientMessage(playerid, TEAM_AZTECAS_COLOR, string);
						SendBusRoute(playerid, 1);
					}
					else SendClientMessage(playerid, COLOR_GREY, "There are no bus drivers on the west route at this time.");
				}
				else SendClientMessage(playerid, COLOR_GREY, "No bus services are running in this area at the current time.");
		    	return 1;
			}
			else if(strcmp(x_nr,"medic",true) == 0)
			{
			    if(Medics < 1)
		        {
		            SendClientMessage(playerid, COLOR_GREY, "   There are no Medics On Duty at the moment, try again later !");
		            return 1;
		        }
		        GetPlayerName(playerid, sendername, sizeof(sendername));
			    format(string, sizeof(string), "* %s is in need of a Medic. (use /accepter medic to accept the call)", sendername);
		    	SendRadioMessage(4, TEAM_AZTECAS_COLOR, string);
		    	SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have called for a Medic, wait for a reply.");
		    	MedicCall = playerid;
		    	return 1;
			}
			else if(strcmp(x_nr,"mechanic",true) == 0)
			{
			    if(Mechanics < 1)
		        {
		            SendClientMessage(playerid, COLOR_GREY, "   There are no Car Mechanics On Duty at the moment, try again later !");
		            return 1;
		        }
		        GetPlayerName(playerid, sendername, sizeof(sendername));
			    format(string, sizeof(string), "* %s is in need of a Car Mechanic. (use /accepter mechanic to accept the call)", sendername);
		    	SendJobMessage(7, TEAM_AZTECAS_COLOR, string);
		    	SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have called for a Car Mechanic, wait for a reply.");
		    	MechanicCall = playerid;
		    	return 1;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Unknown service name !");
			    return 1;
			}
		}
		return 1;
	}*/
	if(strcmp(cmd, "/service", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        SendClientMessage(playerid, COLOR_GREY, "Utilisez /annuaire ou /annuaireservice pour la liste des numéros utiles");
			return 1;
	    }
	    return 1;
	}
	if(strcmp(cmd, "/appellerlist", true) ==0 || strcmp(cmd, "/calllist", true) == 0 || strcmp(cmd, "/annuaireservice", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        SendClientMessage(playerid, COLOR_GREEN, "____________Annuaire des Services____________");
	    	SendClientMessage(playerid, COLOR_WHITE, "111: Pizza. 222: Bus.  444: Taxi,");
			SendClientMessage(playerid, COLOR_WHITE, "555: Mecanicien. 3900: ABC studio. 911: Urgence");
			SendClientMessage(playerid, COLOR_GREEN, "_____________________________________________");
			return 1;
	    }
	    return 1;
	}
	if(strcmp(cmd, "/ligotter", true) ==0 || strcmp(cmd, "/tie", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(Rope[playerid] != 0)
			{
			    if(PlayerInfo[playerid][pLevel] < 2)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "Vous devez être niveau 2 pour ligoter quelq'un! ");
			        return 1;
			    }
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /ligotter [Playerid/PartOfName]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
			    if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
					    if(PlayerTied[giveplayerid] > 0)
					    {
					        SendClientMessage(playerid, COLOR_GREY, "Ce joueur est déjà ligotté!");
					        return 1;
					    }
						if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
						    new car = GetPlayerVehicleID(playerid);
						    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez pas vous ligotez vous même!"); return 1; }
						    if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == 2 && IsPlayerInVehicle(giveplayerid, car))
						    {
						        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
						        format(string, sizeof(string), " Vous avez été ligotté par %s.", sendername);
								SendClientMessage(giveplayerid, COLOR_WHITE, string);
								format(string, sizeof(string), " Vous avez ligotté %s.", giveplayer);
								SendClientMessage(playerid, COLOR_WHITE, string);
								format(string, sizeof(string), " %s à ligotté %s, il ne pourra donc  plus allez nul part.", sendername ,giveplayer);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
								GameTextForPlayer(giveplayerid, "~r~Ligotter", 2500, 3);
								TogglePlayerControllable(giveplayerid, 0);
								PlayerTied[giveplayerid] = 1;
								Rope[playerid]--;
						    }
						    else
						    {
						        SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas dans votre voiture ou vous ne conduisez pas!");
						        return 1;
						    }
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas près de vous!");
						    return 1;
						}
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté!");
				    return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas de corde!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/deligotter", true) ==0 || strcmp(cmd, "/untie", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /deligotter [Playerid/PartOfName]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
				    if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez pas vous déligotter vous même!"); return 1; }
						if(PlayerTied[giveplayerid])
						{
						    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
						    format(string, sizeof(string), " Vous avez été déligotté par %s.", sendername);
							SendClientMessage(giveplayerid, COLOR_WHITE, string);
							format(string, sizeof(string), " Vous avez déligotté %s.", giveplayer);
							SendClientMessage(playerid, COLOR_WHITE, string);
							GameTextForPlayer(giveplayerid, "~g~Deligotter", 2500, 3);
							TogglePlayerControllable(giveplayerid, 1);
							PlayerTied[giveplayerid] = 0;
							format(string, sizeof(string), " %s à déligotté %s et prend la corde avec lui.", sendername, giveplayer);
      						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      						Rope[playerid]++;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas ligotté!");
						    return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas près de vous!");
					    return 1;
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté!");
			    return 1;
			}
		}//not connected
		return 1;
	}
	if(strcmp(cmd, "/demenotter", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(IsACop(playerid))
			{
			    /*if(PlayerInfo[playerid][pRank] < 3)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   You need Rank 3 or higher to untie people !");
			        return 1;
			    }*/
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /demenotter [Playerid/PartOfName]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
					if(giveplayerid != INVALID_PLAYER_ID)
					{
					    if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
						    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez pas vous démenotter vous même!"); return 1; }
							if(PlayerCuffed[giveplayerid] > 0)
							{
							    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
							    format(string, sizeof(string), "Vous avez été démenotté par %s.", sendername);
								SendClientMessage(giveplayerid, COLOR_WHITE, string);
								format(string, sizeof(string), "Vous avez demenotté %s.", giveplayer);
								SendClientMessage(playerid, COLOR_WHITE, string);
								GameTextForPlayer(giveplayerid, "~g~Demenotter", 2500, 3);
								TogglePlayerControllable(giveplayerid, 1);
								PlayerCuffed[giveplayerid] = 0;
								format(string, sizeof(string), "%s à démenotté %s.", sendername, giveplayer);
      							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas menotté!");
							    return 1;
							}
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas près de vous!");
						    return 1;
						}
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté!");
				    return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas policier!");
			}
		}//not connected
		return 1;
	}
	if(strcmp(cmd, "/sell", true) ==0 || strcmp(cmd, "/vendre", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new x_nr[256];
			x_nr = strtok(cmdtext, idx);
			if(!strlen(x_nr)) {
				SendClientMessage(playerid, COLOR_WHITE, "|__________________ Vente __________________|");
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /vendre [nom]");
		  		SendClientMessage(playerid, COLOR_GREY, "Noms Disponibles: poisson, plat");
				SendClientMessage(playerid, COLOR_WHITE, "|_____________________________________________|");
				return 1;
			}
		    if(strcmp(x_nr,"poisson",true) == 0)
			{
			    if (!PlayerToPoint(100, playerid,-30.875, -88.9609, 1004.53))//centerpoint 24-7
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Vous n'êtes pas au 24-7 !");
					return 1;
				}
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /vendre poisson [poisson]");
					return 1;
				}
				new price;
				new fishid = strval(tmp);
				if(fishid < 1 || fishid > 5) { SendClientMessage(playerid, COLOR_GREY, "Le numero doit être compris entre 1 et 5!"); return 1; }
				else if(fishid == 1 && Fishes[playerid][pWeight1] < 1) { SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas attrapé de poisson a ce numéro(1)!"); return 1; }
				else if(fishid == 2 && Fishes[playerid][pWeight2] < 1) { SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas attrapé de poisson a ce numéro(2)!"); return 1; }
				else if(fishid == 3 && Fishes[playerid][pWeight3] < 1) { SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas attrapé de poisson a ce numéro(3)!"); return 1; }
				else if(fishid == 4 && Fishes[playerid][pWeight4] < 1) { SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas attrapé de poisson a ce numéro(4)!"); return 1; }
				else if(fishid == 5 && Fishes[playerid][pWeight5] < 1) { SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas attrapé de poisson a ce numéro(5)!"); return 1; }
				//ConsumingMoney[playerid] = 1;
				switch (fishid)
				{
				    case 1:
				    {
				        if(Fishes[playerid][pWeight1] < 20)
				        {
				            SendClientMessage(playerid, COLOR_WHITE, "Nous ne sommes intéressé que par les poissons qui pesent 20LBS ou plus.");
				            return 1;
				        }
                        price = FishCost(playerid, Fishes[playerid][pFid1]) / 3;
                        price = price * Fishes[playerid][pWeight1] / 3;
                        if(PlayerInfo[playerid][pTraderPerk] > 0)
				        {
				            new skill = price / 800;
				            new payout = (skill)*(1);
				            price += payout;
				        }
                        GameTextForPlayer(playerid, "~g~Poisson~n~~r~Vendu", 3000, 1);
                        format(string, sizeof(string), "Vous avez vendu votre %s qui pesait %d, pour $%d.", Fishes[playerid][pFish1],Fishes[playerid][pWeight1],price);
						SendClientMessage(playerid, COLOR_WHITE, string);
						SafeGivePlayerMoney(playerid, price);
						ClearFishID(playerid, 1);
				    }
				    case 2:
				    {
				        if(Fishes[playerid][pWeight2] < 20)
				        {
				            SendClientMessage(playerid, COLOR_WHITE, "Nous ne sommes intéressé que par les poissons qui pesent 20LBS ou plus.");
				            return 1;
				        }
            			price = FishCost(playerid, Fishes[playerid][pFid2]) / 3;
                        price = price * Fishes[playerid][pWeight2] / 3;
                        if(PlayerInfo[playerid][pTraderPerk] > 0)
				        {
				            new skill = price / 800;
				            new payout = (skill)*(1);
				            price += payout;
				        }
                        GameTextForPlayer(playerid, "~g~Poisson~n~~r~Vendu", 3000, 1);
                        format(string, sizeof(string), "Vous avez vendu votre %s qui pesait %d, pour $%d.", Fishes[playerid][pFish2],Fishes[playerid][pWeight2],price);
						SendClientMessage(playerid, COLOR_WHITE, string);
						SafeGivePlayerMoney(playerid, price);
						ClearFishID(playerid, 2);
				    }
				    case 3:
				    {
				        if(Fishes[playerid][pWeight3] < 20)
				        {
				            SendClientMessage(playerid, COLOR_WHITE, "Nous ne sommes intéressé que par les poissons qui pesent 20LBS ou plus.");
				            return 1;
				        }
            			price = FishCost(playerid, Fishes[playerid][pFid3]) / 3;
                        price = price * Fishes[playerid][pWeight3] / 3;
                        if(PlayerInfo[playerid][pTraderPerk] > 0)
				        {
				            new skill = price / 800;
				            new payout = (skill)*(1);
				            price += payout;
				        }
                        GameTextForPlayer(playerid, "~g~Poisson~n~~r~Vendu", 3000, 1);
                        format(string, sizeof(string), "Vous avez vendu votre %s qui pesait %d, pour $%d.", Fishes[playerid][pFish3],Fishes[playerid][pWeight3],price);
						SendClientMessage(playerid, COLOR_WHITE, string);
						SafeGivePlayerMoney(playerid, price);
						ClearFishID(playerid, 3);
				    }
				    case 4:
				    {
				        if(Fishes[playerid][pWeight4] < 20)
				        {
				            SendClientMessage(playerid, COLOR_WHITE, "Nous ne sommes intéressé que par les poissons qui pesent 20LBS ou plus.");
				            return 1;
				        }
            			price = FishCost(playerid, Fishes[playerid][pFid4]) / 3;
                        price = price * Fishes[playerid][pWeight4] / 3;
                        if(PlayerInfo[playerid][pTraderPerk] > 0)
				        {
				            new skill = price / 800;
				            new payout = (skill)*(1);
				            price += payout;
				        }
                        GameTextForPlayer(playerid, "~g~Poisson~n~~r~Vendu", 3000, 1);
                        format(string, sizeof(string), "Vous avez vendu votre %s qui pesait %d, pour $%d.", Fishes[playerid][pFish4],Fishes[playerid][pWeight4],price);
						SendClientMessage(playerid, COLOR_WHITE, string);
						SafeGivePlayerMoney(playerid, price);
						ClearFishID(playerid, 4);
				    }
				    case 5:
				    {
				        if(Fishes[playerid][pWeight5] < 20)
				        {
				            SendClientMessage(playerid, COLOR_WHITE, "Nous ne sommes intéressé que par les poissons qui pesent 20LBS ou plus.");
				            return 1;
				        }
            			price = FishCost(playerid, Fishes[playerid][pFid5]) / 3;
                        price = price * Fishes[playerid][pWeight5] / 3;
                        if(PlayerInfo[playerid][pTraderPerk] > 0)
				        {
				            new skill = price / 800;
				            new payout = (skill)*(1);
				            price += payout;
				        }
                        GameTextForPlayer(playerid, "~g~Poisson~n~~r~Vendu", 3000, 1);
                        format(string, sizeof(string), "Vous avez vendu votre %s qui pesait %d, pour $%d.", Fishes[playerid][pFish5],Fishes[playerid][pWeight5],price);
						SendClientMessage(playerid, COLOR_WHITE, string);
						SafeGivePlayerMoney(playerid, price);
						ClearFishID(playerid, 5);
				    }
				}
				Fishes[playerid][pLastFish] = 0;
				Fishes[playerid][pFishID] = 0;
				return 1;
			}
			else if(strcmp(x_nr,"plat",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /vendre plat [numero] [playerid/PartOfName]");
					return 1;
				}
				new cookid = strval(tmp);
				if(cookid < 1 || cookid > 5) { SendClientMessage(playerid, COLOR_GREY, "Le numero de plat doit être compris entre 1 et 5!"); return 1; }
				else if(cookid == 1 && Cooking[playerid][pCWeight1] < 1) { SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas cuisiner quelque chose a ce numero(1)!"); return 1; }
				else if(cookid == 2 && Cooking[playerid][pCWeight2] < 1) { SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas cuisiner quelque chose a ce numero(2)!"); return 1; }
				else if(cookid == 3 && Cooking[playerid][pCWeight3] < 1) { SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas cuisiner quelque chose a ce numero(3)!"); return 1; }
				else if(cookid == 4 && Cooking[playerid][pCWeight4] < 1) { SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas cuisiner quelque chose a ce numero(4)!"); return 1; }
				else if(cookid == 5 && Cooking[playerid][pCWeight5] < 1) { SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas cuisiner quelque chose a ce numero(5)!"); return 1; }
				tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /vendre cuisiner [numero] [playerid/PartOfName]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
				        switch(cookid)
				        {
							case 1:
							{
							    if(Cooking[giveplayerid][pCWeight1] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook1]);
								    strmid(Cooking[giveplayerid][pCook1], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight1] = Cooking[playerid][pCWeight1];
								    Cooking[giveplayerid][pCookID1] = Cooking[playerid][pCookID1];
								    format(string, sizeof(string), "%s vous à donné un %s qui pesait %d (utilisez /acuisiner pour le voir).",sendername,Cooking[giveplayerid][pCook1],Cooking[giveplayerid][pCWeight1]);
								    SendClientMessage(giveplayerid, COLOR_WHITE, string);
								    format(string, sizeof(string), "Vous avez donné un %s qui pesait %d à %s.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1],giveplayer);
								    SendClientMessage(playerid, COLOR_WHITE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight2] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook1]);
								    strmid(Cooking[giveplayerid][pCook2], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight2] = Cooking[playerid][pCWeight1];
								    Cooking[giveplayerid][pCookID2] = Cooking[playerid][pCookID1];
								    format(string, sizeof(string), "%s vous à donné un %s qui pesait %d (utilisez /acuisiner pour le voir).",sendername,Cooking[giveplayerid][pCook2],Cooking[giveplayerid][pCWeight2]);
								    SendClientMessage(giveplayerid, COLOR_WHITE, string);
								    format(string, sizeof(string), "Vous avez donné un %s qui pesait %d à %s.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1],giveplayer);
								    SendClientMessage(playerid, COLOR_WHITE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight3] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook1]);
								    strmid(Cooking[giveplayerid][pCook3], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight3] = Cooking[playerid][pCWeight1];
								    Cooking[giveplayerid][pCookID3] = Cooking[playerid][pCookID1];
								    format(string, sizeof(string), "%s vous à donné un %s qui pesait %d (utilisez /acuisiner pour le voir).",sendername,Cooking[giveplayerid][pCook3],Cooking[giveplayerid][pCWeight3]);
								    SendClientMessage(giveplayerid, COLOR_WHITE, string);
								    format(string, sizeof(string), "Vous avez donné un %s qui pesait %d à %s.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1],giveplayer);
								    SendClientMessage(playerid, COLOR_WHITE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight4] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook1]);
								    strmid(Cooking[giveplayerid][pCook4], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight4] = Cooking[playerid][pCWeight1];
								    Cooking[giveplayerid][pCookID4] = Cooking[playerid][pCookID1];
								    format(string, sizeof(string), "%s vous à donné un %s qui pesait %d (utilisez /acuisiner pour le voir).",sendername,Cooking[giveplayerid][pCook4],Cooking[giveplayerid][pCWeight4]);
								    SendClientMessage(giveplayerid, COLOR_WHITE, string);
								    format(string, sizeof(string), "Vous avez donné un %s qui pesait %d à %s.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1],giveplayer);
								    SendClientMessage(playerid, COLOR_WHITE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight5] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook1]);
								    strmid(Cooking[giveplayerid][pCook5], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight5] = Cooking[playerid][pCWeight1];
								    Cooking[giveplayerid][pCookID5] = Cooking[playerid][pCookID1];
								    format(string, sizeof(string), "%s vous à donné un %s qui pesait %d (utilisez /acuisiner pour le voir).",sendername,Cooking[giveplayerid][pCook5],Cooking[giveplayerid][pCWeight5]);
								    SendClientMessage(giveplayerid, COLOR_WHITE, string);
								    format(string, sizeof(string), "Vous avez donné un %s qui pesait %d à %s.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1],giveplayer);
								    SendClientMessage(playerid, COLOR_WHITE, string);
							    }
							    else
							    {
							        SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'a plus d'espace libre dans sa liste de plat!");
							        return 1;
							    }
							}
							case 2:
							{
							    if(Cooking[giveplayerid][pCWeight1] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook2]);
								    strmid(Cooking[giveplayerid][pCook1], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight1] = Cooking[playerid][pCWeight2];
								    Cooking[giveplayerid][pCookID1] = Cooking[playerid][pCookID2];
								    format(string, sizeof(string), "%s vous à donné un %s qui pesait %d (utilisez /acuisiner pour le voir).",sendername,Cooking[giveplayerid][pCook1],Cooking[giveplayerid][pCWeight1]);
								    SendClientMessage(giveplayerid, COLOR_WHITE, string);
								    format(string, sizeof(string), "Vous avez donné un %s qui pesait %d à %s.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2],giveplayer);
								    SendClientMessage(playerid, COLOR_WHITE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight2] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook2]);
								    strmid(Cooking[giveplayerid][pCook2], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight2] = Cooking[playerid][pCWeight2];
								    Cooking[giveplayerid][pCookID2] = Cooking[playerid][pCookID2];
								    format(string, sizeof(string), "%s vous à donné un %s qui pesait %d (utilisez /acuisiner pour le voir).",sendername,Cooking[giveplayerid][pCook2],Cooking[giveplayerid][pCWeight2]);
								    SendClientMessage(giveplayerid, COLOR_WHITE, string);
								    format(string, sizeof(string), "Vous avez donné un %s qui pesait %d à %s.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2],giveplayer);
								    SendClientMessage(playerid, COLOR_WHITE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight3] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook2]);
								    strmid(Cooking[giveplayerid][pCook3], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight3] = Cooking[playerid][pCWeight2];
								    Cooking[giveplayerid][pCookID3] = Cooking[playerid][pCookID2];
								    format(string, sizeof(string), "%s vous à donné un %s qui pesait %d (utilisez /acuisiner pour le voir).",sendername,Cooking[giveplayerid][pCook3],Cooking[giveplayerid][pCWeight3]);
								    SendClientMessage(giveplayerid, COLOR_WHITE, string);
								    format(string, sizeof(string), "Vous avez donné un %s qui pesait %d à %s.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2],giveplayer);
								    SendClientMessage(playerid, COLOR_WHITE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight4] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook2]);
								    strmid(Cooking[giveplayerid][pCook4], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight4] = Cooking[playerid][pCWeight2];
								    Cooking[giveplayerid][pCookID4] = Cooking[playerid][pCookID2];
								    format(string, sizeof(string), "%s vous à donné un %s qui pesait %d (utilisez /acuisiner pour le voir).",sendername,Cooking[giveplayerid][pCook4],Cooking[giveplayerid][pCWeight4]);
								    SendClientMessage(giveplayerid, COLOR_WHITE, string);
								    format(string, sizeof(string), "Vous avez donné un %s qui pesait %d à %s.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2],giveplayer);
								    SendClientMessage(playerid, COLOR_WHITE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight5] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook2]);
								    strmid(Cooking[giveplayerid][pCook5], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight5] = Cooking[playerid][pCWeight2];
								    Cooking[giveplayerid][pCookID5] = Cooking[playerid][pCookID2];
								    format(string, sizeof(string), "%s vous à donné un %s qui pesait %d (utilisez /acuisiner pour le voir).",sendername,Cooking[giveplayerid][pCook5],Cooking[giveplayerid][pCWeight5]);
								    SendClientMessage(giveplayerid, COLOR_WHITE, string);
								    format(string, sizeof(string), "Vous avez donné un %s qui pesait %d à %s.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2],giveplayer);
								    SendClientMessage(playerid, COLOR_WHITE, string);
							    }
							    else
							    {
							        SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'a plus d'espace libre dans sa liste de plat!");
							        return 1;
							    }
							}
							case 3:
							{
							    if(Cooking[giveplayerid][pCWeight1] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook3]);
								    strmid(Cooking[giveplayerid][pCook1], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight1] = Cooking[playerid][pCWeight3];
								    Cooking[giveplayerid][pCookID1] = Cooking[playerid][pCookID3];
								    format(string, sizeof(string), "%s vous à donné un %s qui pesait %d (utilisez /acuisiner pour le voir).",sendername,Cooking[giveplayerid][pCook1],Cooking[giveplayerid][pCWeight1]);
								    SendClientMessage(giveplayerid, COLOR_WHITE, string);
								    format(string, sizeof(string), "Vous avez donné un %s qui pesait %d à %s.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3],giveplayer);
								    SendClientMessage(playerid, COLOR_WHITE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight2] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook3]);
								    strmid(Cooking[giveplayerid][pCook2], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight2] = Cooking[playerid][pCWeight3];
								    Cooking[giveplayerid][pCookID2] = Cooking[playerid][pCookID3];
								    format(string, sizeof(string), "%s vous à donné un %s qui pesait %d (utilisez /acuisiner pour le voir).",sendername,Cooking[giveplayerid][pCook2],Cooking[giveplayerid][pCWeight2]);
								    SendClientMessage(giveplayerid, COLOR_WHITE, string);
								    format(string, sizeof(string), "Vous avez donné un %s qui pesait %d à %s.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3],giveplayer);
								    SendClientMessage(playerid, COLOR_WHITE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight3] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook3]);
								    strmid(Cooking[giveplayerid][pCook3], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight3] = Cooking[playerid][pCWeight3];
								    Cooking[giveplayerid][pCookID3] = Cooking[playerid][pCookID3];
								    format(string, sizeof(string), "%s vous à donné un %s qui pesait %d (utilisez /acuisiner pour le voir).",sendername,Cooking[giveplayerid][pCook3],Cooking[giveplayerid][pCWeight3]);
								    SendClientMessage(giveplayerid, COLOR_WHITE, string);
								    format(string, sizeof(string), "Vous avez donné un %s qui pesait %d à %s.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3],giveplayer);
								    SendClientMessage(playerid, COLOR_WHITE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight4] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook3]);
								    strmid(Cooking[giveplayerid][pCook4], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight4] = Cooking[playerid][pCWeight3];
								    Cooking[giveplayerid][pCookID4] = Cooking[playerid][pCookID3];
								    format(string, sizeof(string), "%s vous à donné un %s qui pesait %d (utilisez /acuisiner pour le voir).",sendername,Cooking[giveplayerid][pCook4],Cooking[giveplayerid][pCWeight4]);
								    SendClientMessage(giveplayerid, COLOR_WHITE, string);
								    format(string, sizeof(string), "Vous avez donné un %s qui pesait %d à %s.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3],giveplayer);
								    SendClientMessage(playerid, COLOR_WHITE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight5] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook3]);
								    strmid(Cooking[giveplayerid][pCook5], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight5] = Cooking[playerid][pCWeight3];
								    Cooking[giveplayerid][pCookID5] = Cooking[playerid][pCookID3];
								    format(string, sizeof(string), "%s vous à donné un %s qui pesait %d (utilisez /acuisiner pour le voir).",sendername,Cooking[giveplayerid][pCook5],Cooking[giveplayerid][pCWeight5]);
								    SendClientMessage(giveplayerid, COLOR_WHITE, string);
								    format(string, sizeof(string), "Vous avez donné un %s qui pesait %d à %s.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3],giveplayer);
								    SendClientMessage(playerid, COLOR_WHITE, string);
							    }
							    else
							    {
							        SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'a plus d'espace libre dans sa liste de plat!");
							        return 1;
							    }
							}
							case 4:
							{
							    if(Cooking[giveplayerid][pCWeight1] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook4]);
								    strmid(Cooking[giveplayerid][pCook1], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight1] = Cooking[playerid][pCWeight4];
								    Cooking[giveplayerid][pCookID1] = Cooking[playerid][pCookID4];
								    format(string, sizeof(string), "%s vous à donné un %s qui pesait %d (utilisez /acuisiner pour le voir).",sendername,Cooking[giveplayerid][pCook1],Cooking[giveplayerid][pCWeight1]);
								    SendClientMessage(giveplayerid, COLOR_WHITE, string);
								    format(string, sizeof(string), "Vous avez donné un %s qui pesait %d à %s.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4],giveplayer);
								    SendClientMessage(playerid, COLOR_WHITE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight2] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook4]);
								    strmid(Cooking[giveplayerid][pCook2], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight2] = Cooking[playerid][pCWeight4];
								    Cooking[giveplayerid][pCookID2] = Cooking[playerid][pCookID4];
								    format(string, sizeof(string), "%s vous à donné un %s qui pesait %d (utilisez /acuisiner pour le voir).",sendername,Cooking[giveplayerid][pCook2],Cooking[giveplayerid][pCWeight2]);
								    SendClientMessage(giveplayerid, COLOR_WHITE, string);
								    format(string, sizeof(string), "Vous avez donné un %s qui pesait %d à %s.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4],giveplayer);
								    SendClientMessage(playerid, COLOR_WHITE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight3] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook4]);
								    strmid(Cooking[giveplayerid][pCook3], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight3] = Cooking[playerid][pCWeight4];
								    Cooking[giveplayerid][pCookID3] = Cooking[playerid][pCookID4];
								    format(string, sizeof(string), "%s vous à donné un %s qui pesait %d (utilisez /acuisiner pour le voir).",sendername,Cooking[giveplayerid][pCook3],Cooking[giveplayerid][pCWeight3]);
								    SendClientMessage(giveplayerid, COLOR_WHITE, string);
								    format(string, sizeof(string), "Vous avez donné un %s qui pesait %d à %s.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4],giveplayer);
								    SendClientMessage(playerid, COLOR_WHITE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight4] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook4]);
								    strmid(Cooking[giveplayerid][pCook4], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight4] = Cooking[playerid][pCWeight4];
								    Cooking[giveplayerid][pCookID4] = Cooking[playerid][pCookID4];
								    format(string, sizeof(string), "%s vous à donné un %s qui pesait %d (utilisez /acuisiner pour le voir).",sendername,Cooking[giveplayerid][pCook4],Cooking[giveplayerid][pCWeight4]);
								    SendClientMessage(giveplayerid, COLOR_WHITE, string);
								    format(string, sizeof(string), "Vous avez donné un %s qui pesait %d à %s.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4],giveplayer);
								    SendClientMessage(playerid, COLOR_WHITE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight5] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook4]);
								    strmid(Cooking[giveplayerid][pCook5], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight5] = Cooking[playerid][pCWeight4];
								    Cooking[giveplayerid][pCookID5] = Cooking[playerid][pCookID4];
								    format(string, sizeof(string), "%s vous à donné un %s qui pesait %d (utilisez /acuisiner pour le voir).",sendername,Cooking[giveplayerid][pCook5],Cooking[giveplayerid][pCWeight5]);
								    SendClientMessage(giveplayerid, COLOR_WHITE, string);
								    format(string, sizeof(string), "Vous avez donné un %s qui pesait %d à %s.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4],giveplayer);
								    SendClientMessage(playerid, COLOR_WHITE, string);
							    }
							    else
							    {
							        SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'a plus d'espace libre dans sa liste de plat!");
							        return 1;
							    }
							}
							case 5:
							{
							    if(Cooking[giveplayerid][pCWeight1] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook5]);
								    strmid(Cooking[giveplayerid][pCook1], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight1] = Cooking[playerid][pCWeight5];
								    Cooking[giveplayerid][pCookID1] = Cooking[playerid][pCookID5];
								    format(string, sizeof(string), "%s vous à donné un %s qui pesait %d (utilisez /acuisiner pour le voir).",sendername,Cooking[giveplayerid][pCook1],Cooking[giveplayerid][pCWeight1]);
								    SendClientMessage(giveplayerid, COLOR_WHITE, string);
								    format(string, sizeof(string), "Vous avez donné un %s qui pesait %d à %s.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5],giveplayer);
								    SendClientMessage(playerid, COLOR_WHITE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight2] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook5]);
								    strmid(Cooking[giveplayerid][pCook2], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight2] = Cooking[playerid][pCWeight5];
								    Cooking[giveplayerid][pCookID2] = Cooking[playerid][pCookID5];
								    format(string, sizeof(string), "%s vous à donné un %s qui pesait %d (utilisez /acuisiner pour le voir).",sendername,Cooking[giveplayerid][pCook2],Cooking[giveplayerid][pCWeight2]);
								    SendClientMessage(giveplayerid, COLOR_WHITE, string);
								    format(string, sizeof(string), "Vous avez donné un %s qui pesait %d à %s.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5],giveplayer);
								    SendClientMessage(playerid, COLOR_WHITE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight3] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook5]);
								    strmid(Cooking[giveplayerid][pCook3], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight3] = Cooking[playerid][pCWeight5];
								    Cooking[giveplayerid][pCookID3] = Cooking[playerid][pCookID5];
								    format(string, sizeof(string), "%s vous à donné un %s qui pesait %d (utilisez /acuisiner pour le voir).",sendername,Cooking[giveplayerid][pCook3],Cooking[giveplayerid][pCWeight3]);
								    SendClientMessage(giveplayerid, COLOR_WHITE, string);
								    format(string, sizeof(string), "Vous avez donné un %s qui pesait %d à %s.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5],giveplayer);
								    SendClientMessage(playerid, COLOR_WHITE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight4] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook5]);
								    strmid(Cooking[giveplayerid][pCook4], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight4] = Cooking[playerid][pCWeight5];
								    Cooking[giveplayerid][pCookID4] = Cooking[playerid][pCookID5];
								    format(string, sizeof(string), "%s vous à donné un %s qui pesait %d (utilisez /acuisiner pour le voir).",sendername,Cooking[giveplayerid][pCook4],Cooking[giveplayerid][pCWeight4]);
								    SendClientMessage(giveplayerid, COLOR_WHITE, string);
								    format(string, sizeof(string), "Vous avez donné un %s qui pesait %d à %s.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5],giveplayer);
								    SendClientMessage(playerid, COLOR_WHITE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight5] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook5]);
								    strmid(Cooking[giveplayerid][pCook5], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight5] = Cooking[playerid][pCWeight5];
								    Cooking[giveplayerid][pCookID5] = Cooking[playerid][pCookID5];
								    format(string, sizeof(string), "%s vous à donné un %s qui pesait %d (utilisez /acuisiner pour le voir).",sendername,Cooking[giveplayerid][pCook5],Cooking[giveplayerid][pCWeight5]);
								    SendClientMessage(giveplayerid, COLOR_WHITE, string);
								    format(string, sizeof(string), "Vous avez donné un %s qui pesait %d à %s.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5],giveplayer);
								    SendClientMessage(playerid, COLOR_WHITE, string);
							    }
							    else
							    {
							        SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'a plus d'espace libre dans sa liste de plat!");
							        return 1;
							    }
							}
				        }//switch
				        ClearCookingID(playerid, cookid);
				    }//invalid giveplayerid
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté!");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Nom inconnu!");
			    return 1;
			}
		}
		return 1;
	}
    if(strcmp(cmd, "/prix", true) == 0 || strcmp(cmd, "/fare", true) == 0 || strcmp(cmd, "/apayer", true) == 0)
	//if(strcmp(cmd,"/prix",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pJob] == 13 || PlayerInfo[playerid][pJob] == 14)
			{
				if(TransportDuty[playerid] > 0)
				{
				    if(TransportDuty[playerid] == 1)
				    {
				        TaxiDrivers -= 1;
				    }
				    else if(TransportDuty[playerid] == 2)
				    {
				        BusDrivers -= 1;
				    }
				    TransportDuty[playerid] = 0;
					format(string, sizeof(string), "Vous n'êtes plus en sercie, vous avez gagné $%d.", TransportMoney[playerid]);
					SendClientMessage(playerid, COLOR_WHITE, string);
					if(TransportMoney[playerid] > 0)
					{
						SBizzInfo[10][sbTill] += TransportMoney[playerid];
						ExtortionSBiz(10, TransportMoney[playerid]);
						//SBizzInfo[14][sbProducts]--;
						OnPropUpdate();
					}
					SafeGivePlayerMoney(playerid, TransportMoney[playerid]);
					/*ConsumingMoney[playerid] = 1;*/ TransportValue[playerid] = 0; TransportMoney[playerid] = 0;
					return 1;
				}
				new Veh = GetPlayerVehicleID(playerid);
				if(Veh >= 84 && Veh <= 93)
				{
				    if(GetPlayerState(playerid) == 2)
				    {
					    tmp = strtok(cmdtext, idx);
						if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_WHITE, "USAGE: /prix [prix]");
							return 1;
						}
						moneys = strval(tmp);
						if(moneys < 1 || moneys > 999) { SendClientMessage(playerid, COLOR_GREY, "Le prix doit être compris entre 1$ et 999$!"); return 1; }
					    TaxiDrivers += 1; TransportDuty[playerid] = 1; TransportValue[playerid] = moneys;
					    GetPlayerName(playerid,sendername,sizeof(sendername));
	    				format(string, sizeof(string), "[Pub] Le Chauffeur de Taxi %s est en service, /appeler 444 pour appeler un chauffeur de taxi. Prix: $%d.", sendername, TransportValue[playerid]);
	    				OOCNews(0xEDCA29AA,string);
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas le conducteur!");
					    return 1;
					}
				}
				else if(Veh == 82 || Veh == 83)
				{
				    if(GetPlayerState(playerid) == 2)
				    {
					    tmp = strtok(cmdtext, idx);
						if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_WHITE, "USAGE: /prix [prix]");
							return 1;
						}
						moneys = strval(tmp);
						if(moneys < 1 || moneys > 999) { SendClientMessage(playerid, COLOR_GREY, "Le prix doit être compris entre 1$ et 999$!"); return 1; }
					    BusDrivers += 1; TransportDuty[playerid] = 2; TransportValue[playerid]= moneys;
					    GetPlayerName(playerid,sendername,sizeof(sendername));
	    				format(string, sizeof(string), "[Pub] Le Chauffeur de Bus %s est en service, /appeler 222 pour appeler un chauffeur de bus. Prix: $%d.", sendername, TransportValue[playerid]);
	    				OOCNews(TEAM_GROVE_COLOR,string);
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas le conducteur!");
					    return 1;
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas dans un Bus/Taxi!");
				}
			}
			else
			{
			    SendClientMessage(playerid,COLOR_GREY,"Vous n'êtes pas chauffeur de Bus/Taxi!");
			    return 1;
			}
	    }
	    return 1;
 	}
 	if(strcmp(cmd,"/manger",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        if(PlayerBoxing[playerid] > 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez pas manger une poisson quand vous vous battez!");
	            return 1;
	        }
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /manger [numero]");
				return 1;
			}
			new cookid = strval(tmp);
			if(cookid < 1 || cookid > 5) { SendClientMessage(playerid, COLOR_GREY, "Le numero de plat doit être compris entre 1 et 5!"); return 1; }
				else if(cookid == 1 && Cooking[playerid][pCWeight1] < 1) { SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas cuisiner quelque chose a ce numero(1)!"); return 1; }
				else if(cookid == 2 && Cooking[playerid][pCWeight2] < 1) { SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas cuisiner quelque chose a ce numero(2)!"); return 1; }
				else if(cookid == 3 && Cooking[playerid][pCWeight3] < 1) { SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas cuisiner quelque chose a ce numero(3)!"); return 1; }
				else if(cookid == 4 && Cooking[playerid][pCWeight4] < 1) { SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas cuisiner quelque chose a ce numero(4)!"); return 1; }
				else if(cookid == 5 && Cooking[playerid][pCWeight5] < 1) { SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas cuisiner quelque chose a ce numero(5)!"); return 1; }
            GetPlayerName(playerid, sendername, sizeof(sendername));
			new Float:health;
			if(GetPlayerHealth(playerid, health) < 40)
			{
			    new hp = 0;
			    switch (cookid)
			    {
					case 1:
					{
					    if(Cooking[playerid][pCookID1] == 16 || Cooking[playerid][pCookID1] == 18)
						{//Dolphin or Turtle
						    WantedPoints[playerid] += 2;
							SetPlayerCriminal(playerid,255, "Consomation d'espece protégée");
						}
					    SetPlayerHealth(playerid, health + (Cooking[playerid][pCWeight1] / 3));
					    hp = Cooking[playerid][pCWeight1];
					    format(string, sizeof(string), "%s mange un/une %s.", sendername, Cooking[playerid][pCook1]);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					    format(string, sizeof(string), "Vous avez mangé un/une %s qui pesait %d, et ça été ajouté a votre vie.",Cooking[playerid][pCook1], hp);
						SendClientMessage(playerid, COLOR_WHITE, string);
					}
					case 2:
					{
					    if(Cooking[playerid][pCookID2] == 16 || Cooking[playerid][pCookID2] == 18)
						{//Dolphin or Turtle
						    WantedPoints[playerid] += 2;
							SetPlayerCriminal(playerid,255, "Consuming endangered Species");
						}
					    SetPlayerHealth(playerid, health + (Cooking[playerid][pCWeight2] / 3));
					    hp = Cooking[playerid][pCWeight2];
					    format(string, sizeof(string), "%s mange un/une %s.", sendername, Cooking[playerid][pCook2]);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					    format(string, sizeof(string), "Vous avez mangé un/une %s qui pesait %d, et ça été ajouté a votre vie.",Cooking[playerid][pCook2], hp);
						SendClientMessage(playerid, COLOR_WHITE, string);
					}
					case 3:
					{
					    if(Cooking[playerid][pCookID3] == 16 || Cooking[playerid][pCookID3] == 18)
						{//Dolphin or Turtle
						    WantedPoints[playerid] += 2;
							SetPlayerCriminal(playerid,255, "Consuming endangered Species");
						}
					    SetPlayerHealth(playerid, health + (Cooking[playerid][pCWeight3] / 3));
					    hp = Cooking[playerid][pCWeight3];
					    format(string, sizeof(string), "%s mange un/une %s.", sendername, Cooking[playerid][pCook3]);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					    format(string, sizeof(string), "Vous avez mangé un/une %s qui pesait %d, et ça été ajouté a votre vie.",Cooking[playerid][pCook3], hp);
						SendClientMessage(playerid, COLOR_WHITE, string);
					}
					case 4:
					{
					    if(Cooking[playerid][pCookID4] == 16 || Cooking[playerid][pCookID4] == 18)
						{//Dolphin or Turtle
						    WantedPoints[playerid] += 2;
							SetPlayerCriminal(playerid,255, "Consuming endangered Species");
						}
					    SetPlayerHealth(playerid, health + (Cooking[playerid][pCWeight4] / 3));
					    hp = Cooking[playerid][pCWeight4];
					    format(string, sizeof(string), "%s mange un/une %s.", sendername, Cooking[playerid][pCook4]);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					    format(string, sizeof(string), "Vous avez mangé un/une %s qui pesait %d, et ça été ajouté a votre vie.",Cooking[playerid][pCook4], hp);
						SendClientMessage(playerid, COLOR_WHITE, string);
					}
					case 5:
					{
					    if(Cooking[playerid][pCookID5] == 16 || Cooking[playerid][pCookID5] == 18)
						{//Dolphin or Turtle
						    WantedPoints[playerid] += 2;
							SetPlayerCriminal(playerid,255, "Consuming endangered Species");
						}
					    SetPlayerHealth(playerid, health + (Cooking[playerid][pCWeight5] / 3));
					    hp = Cooking[playerid][pCWeight5];
					    format(string, sizeof(string), "%s mange un/une %s.", sendername, Cooking[playerid][pCook5]);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					    format(string, sizeof(string), "Vous avez mangé un/une %s qui pesait %d, et ça été ajouté a votre vie.",Cooking[playerid][pCook5], hp);
						SendClientMessage(playerid, COLOR_WHITE, string);
					}
			    }
				ClearCookingID(playerid, cookid);
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Votre vie est assez haute (maximum 40)!");
			    return 1;
			}
	    }
	    return 1;
	}
	if(strcmp(cmdtext, "/mangerpizza",true)==0) //added
 	{
		if (bPizza[playerid] != 1)
     	{
			SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas de pizza, /appeler 111");
         	return 1;
  		}
  		SetPlayerHealth(playerid, 100);
  		GetPlayerName(playerid, sendername, sizeof(sendername));
  		format(string, sizeof(string), "Vous avez mangé une pizza, vous vous santé mieux");
  		SendClientMessage(playerid, COLOR_WHITE, string);
  		format(string, sizeof(string), "%s prend une pizza et la mange.", sendername);
  		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
  		bPizza[playerid] = 0;
		return 1;
	}
    if(strcmp(cmd, "/vendrepizza", true) == 0 || strcmp(cmd, "/sellpizza", true) == 0 || strcmp(cmd, "/vendrepiz", true) == 0)
	//if(strcmp(cmd, "/vendrepizza", true) ==0)
	{
    	if (PlayerInfo[playerid][pJob] == 17)
     	{
   			if (sPizza[playerid] == 1)
      		{
    			tmp = strtok(cmdtext, idx);
    			if(!strlen(tmp))
    			{
     				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /vendrepizza [playerid/PartOfName]");
     				return 1;
    			}
    			giveplayerid = ReturnUser(tmp);
    			if(IsPlayerConnected(giveplayerid))
    			{
        			if(giveplayerid != INVALID_PLAYER_ID)
        			{
            			if (ProxDetectorS(8.0, playerid, giveplayerid))
          				{
       						GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
       						GetPlayerName(playerid, sendername, sizeof(sendername));
       						format(string, sizeof(string), "Vous avez vendu une pizza à %s", giveplayer);
       						SendClientMessage(playerid, COLOR_WHITE, string);
       						format(string, sizeof(string), "Le Livreur de pizza %s vous à donné une pizza /eatpizza", sendername);
       						SendClientMessage(giveplayerid, COLOR_WHITE, string);
       						format(string, sizeof(string), "%s prend une pizza et la donne à %s", sendername ,giveplayer);
       						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
       						bPizza[giveplayerid] = 1;
       						sPizza[playerid] = 0;
      					}
      					else
          				{
              				SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas près de vous!");
              				return 1;
      					}
     				}
    			}
    			return 1;
			}
   			else
   			{
    			SendClientMessage(playerid, COLOR_GREY, "Allez prendre une pizza à la cuisine!");
   			}
  		}
		return 1;
 	}
 	if(strcmp(cmd,"/cuisiner",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        if(IsAtCookPlace(playerid))
	        {
	            new x_nr[256];
	            x_nr = strtok(cmdtext, idx);
				if(!strlen(x_nr)) {
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /cuisiner [nom]");
					SendClientMessage(playerid, COLOR_WHITE, "Noms Disponibles: dernierpoisson, poisson, poulet, Hamburger, Pizza.");
					return 1;
				}
				if(strcmp(x_nr,"dernierpoisson",true) == 0)
				{
				    if(Fishes[playerid][pLastFish] > 0)
	        		{
					    new found = 0;
					    if(Cooking[playerid][pCWeight1] == 0)
					    {
						    format(string, sizeof(string), "A Cuisiner un %s", FishNames[Fishes[playerid][pFishID]]);
						    strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight1] = Fishes[playerid][pLastWeight];
						    Cooking[playerid][pCookID1] = Fishes[playerid][pFishID];
						    format(string, sizeof(string), "Vous avez cuisiner un %s, qui pesait %d LBS.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
						    SendClientMessage(playerid,COLOR_WHITE, string);
						    found = 1;
					    }
					    else if(Cooking[playerid][pCWeight2] == 0)
					    {
						    format(string, sizeof(string), "A Cuisiner un %s", FishNames[Fishes[playerid][pFishID]]);
						    strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight2] = Fishes[playerid][pLastWeight];
						    Cooking[playerid][pCookID2] = Fishes[playerid][pFishID];
						    format(string, sizeof(string), "Vous avez cuisiner un %s, qui pesait %d LBS.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
						    SendClientMessage(playerid,COLOR_WHITE, string);
						    found = 1;
					    }
					    else if(Cooking[playerid][pCWeight3] == 0)
					    {
						    format(string, sizeof(string), "A Cuisiner un %s", FishNames[Fishes[playerid][pFishID]]);
						    strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight3] = Fishes[playerid][pLastWeight];
						    Cooking[playerid][pCookID3] = Fishes[playerid][pFishID];
						    format(string, sizeof(string), "Vous avez cuisiner un %s, qui pesait %d LBS.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
						    SendClientMessage(playerid,COLOR_WHITE, string);
						    found = 1;
					    }
					    else if(Cooking[playerid][pCWeight4] == 0)
					    {
						    format(string, sizeof(string), "A Cuisiner un %s", FishNames[Fishes[playerid][pFishID]]);
						    strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight4] = Fishes[playerid][pLastWeight];
						    Cooking[playerid][pCookID4] = Fishes[playerid][pFishID];
						    format(string, sizeof(string), "Vous avez cuisiner un %s, qui pesait %d LBS.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
						    SendClientMessage(playerid,COLOR_WHITE, string);
						    found = 1;
					    }
					    else if(Cooking[playerid][pCWeight5] == 0)
					    {
						    format(string, sizeof(string), "A Cuisiner un %s", FishNames[Fishes[playerid][pFishID]]);
						    strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight5] = Fishes[playerid][pLastWeight];
						    Cooking[playerid][pCookID5] = Fishes[playerid][pFishID];
						    format(string, sizeof(string), "Vous avez cuisiner un %s, qui pesait %d LBS.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
						    SendClientMessage(playerid,COLOR_WHITE, string);
						    found = 1;
					    }
					    else
					    {
					        SendClientMessage(playerid, COLOR_GREY, "Vous avez déjà trop cuisiner, plus d'espace dans votre liste!");
					        return 1;
					    }
					    if(found)
					    {
					        ClearFishID(playerid, Fishes[playerid][pLastFish]);
				            Fishes[playerid][pLastFish] = 0;
				            Fishes[playerid][pFishID] = 0;
					    }
				    }
				    else
				    {
				        SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas attrapé de poisson!");
				        return 1;
				    }
				}
				else if(strcmp(x_nr,"poisson",true) == 0)
				{
				    new found = 0;
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_WHITE, "USAGE: /cuisiner poisson [numeropoisson]");
						return 1;
					}
					new fishid = strval(tmp);
					if(fishid < 1 || fishid > 5) { SendClientMessage(playerid, COLOR_GREY, "Le numero doit être compris entre 1 et 5!"); return 1; }
					else if(fishid == 1 && Fishes[playerid][pWeight1] < 1) { SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas attrapé de poisson sur ce numérp(1)!"); return 1; }
					else if(fishid == 2 && Fishes[playerid][pWeight2] < 1) { SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas attrapé de poisson sur ce numérp(2)!"); return 1; }
					else if(fishid == 3 && Fishes[playerid][pWeight3] < 1) { SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas attrapé de poisson sur ce numérp(3)!"); return 1; }
					else if(fishid == 4 && Fishes[playerid][pWeight4] < 1) { SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas attrapé de poisson sur ce numérp(4)!"); return 1; }
					else if(fishid == 5 && Fishes[playerid][pWeight5] < 1) { SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas attrapé de poisson sur ce numérp(5)!"); return 1; }
					if(Cooking[playerid][pCWeight1] == 0)
					{
					    if(fishid == 1)
					    {
						    format(string, sizeof(string), "A Cuisiner un %s", Fishes[playerid][pFish1]);
						    strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight1] = Fishes[playerid][pWeight1];
						    Cooking[playerid][pCookID1] = Fishes[playerid][pFid1];
						    format(string, sizeof(string), "Vous avez cuisiner un %s, qui pesait %d LBS.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
					    	SendClientMessage(playerid,COLOR_WHITE, string);
					    }
						else if(fishid == 2)
					 	{
						    format(string, sizeof(string), "A Cuisiner un %s", Fishes[playerid][pFish2]);
						    strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight1] = Fishes[playerid][pWeight2];
						    Cooking[playerid][pCookID1] = Fishes[playerid][pFid2];
						    format(string, sizeof(string), "Vous avez cuisiner un %s, qui pesait %d LBS.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
						    SendClientMessage(playerid,COLOR_WHITE, string);
						}
						else if(fishid == 3)
						{
						    format(string, sizeof(string), "A Cuisiner un %s", Fishes[playerid][pFish3]);
						    strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight1] = Fishes[playerid][pWeight3];
						    Cooking[playerid][pCookID1] = Fishes[playerid][pFid3];
						    format(string, sizeof(string), "Vous avez cuisiner un %s, qui pesait %d LBS.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
						    SendClientMessage(playerid,COLOR_WHITE, string);
						}
						else if(fishid == 4)
						{
						    format(string, sizeof(string), "A Cuisiner un %s", Fishes[playerid][pFish4]);
						    strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight1] = Fishes[playerid][pWeight4];
						    Cooking[playerid][pCookID1] = Fishes[playerid][pFid4];
						    format(string, sizeof(string), "Vous avez cuisiner un %s, qui pesait %d LBS.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
						    SendClientMessage(playerid,COLOR_WHITE, string);
						}
						else if(fishid == 5)
						{
						    format(string, sizeof(string), "A Cuisiner un %s", Fishes[playerid][pFish5]);
						    strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight1] = Fishes[playerid][pWeight5];
						    Cooking[playerid][pCookID1] = Fishes[playerid][pFid5];
						    format(string, sizeof(string), "Vous avez cuisiner un %s, qui pesait %d LBS.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
						    SendClientMessage(playerid,COLOR_WHITE, string);
						}
						found = 1;
		    		}
					else if(Cooking[playerid][pCWeight2] == 0)
					{
						if(fishid == 1)
					    {
							format(string, sizeof(string), "A Cuisiner un %s", Fishes[playerid][pFish1]);
							strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight2] = Fishes[playerid][pWeight1];
							Cooking[playerid][pCookID2] = Fishes[playerid][pFid1];
							format(string, sizeof(string), "Vous avez cuisiner un %s, qui pesait %d LBS.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
							SendClientMessage(playerid,COLOR_WHITE, string);
			    		}
						else if(fishid == 2)
						{
						    format(string, sizeof(string), "A Cuisiner un %s", Fishes[playerid][pFish2]);
						    strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight2] = Fishes[playerid][pWeight2];
						    Cooking[playerid][pCookID2] = Fishes[playerid][pFid2];
						    format(string, sizeof(string), "Vous avez cuisiner un %s, qui pesait %d LBS.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
						    SendClientMessage(playerid,COLOR_WHITE, string);
						}
						else if(fishid == 3)
						{
						    format(string, sizeof(string), "A Cuisiner un %s", Fishes[playerid][pFish3]);
						    strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight2] = Fishes[playerid][pWeight3];
						    Cooking[playerid][pCookID2] = Fishes[playerid][pFid3];
						    format(string, sizeof(string), "Vous avez cuisiner un %s, qui pesait %d LBS.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
						    SendClientMessage(playerid,COLOR_WHITE, string);
						}
						else if(fishid == 4)
						{
						    format(string, sizeof(string), "A Cuisiner un %s", Fishes[playerid][pFish4]);
						    strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight2] = Fishes[playerid][pWeight4];
						    Cooking[playerid][pCookID2] = Fishes[playerid][pFid4];
						    format(string, sizeof(string), "Vous avez cuisiner un %s, qui pesait %d LBS.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
						    SendClientMessage(playerid,COLOR_WHITE, string);
						}
						else if(fishid == 5)
						{
						    format(string, sizeof(string), "A Cuisiner un %s", Fishes[playerid][pFish5]);
						    strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight2] = Fishes[playerid][pWeight5];
						    Cooking[playerid][pCookID2] = Fishes[playerid][pFid5];
						    format(string, sizeof(string), "Vous avez cuisiner un %s, qui pesait %d LBS.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
						    SendClientMessage(playerid,COLOR_WHITE, string);
						}
						found = 1;
		    		}
					else if(Cooking[playerid][pCWeight3] == 0)
					{
						if(fishid == 1)
					    {
							format(string, sizeof(string), "A Cuisiner un %s", Fishes[playerid][pFish1]);
							strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight3] = Fishes[playerid][pWeight1];
							Cooking[playerid][pCookID3] = Fishes[playerid][pFid1];
							format(string, sizeof(string), "Vous avez cuisiner un %s, qui pesait %d LBS.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
							SendClientMessage(playerid,COLOR_WHITE, string);
			    		}
						else if(fishid == 2)
						{
							format(string, sizeof(string), "A Cuisiner un %s", Fishes[playerid][pFish2]);
							strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight3] = Fishes[playerid][pWeight2];
							Cooking[playerid][pCookID3] = Fishes[playerid][pFid2];
							format(string, sizeof(string), "Vous avez cuisiner un %s, qui pesait %d LBS.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
							SendClientMessage(playerid,COLOR_WHITE, string);
    					}
						else if(fishid == 3)
						{
							format(string, sizeof(string), "A Cuisiner un %s", Fishes[playerid][pFish3]);
							strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight3] = Fishes[playerid][pWeight3];
							Cooking[playerid][pCookID3] = Fishes[playerid][pFid3];
							format(string, sizeof(string), "Vous avez cuisiner un %s, qui pesait %d LBS.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
							SendClientMessage(playerid,COLOR_WHITE, string);
			    		}
						else if(fishid == 4)
						{
							format(string, sizeof(string), "A Cuisiner un %s", Fishes[playerid][pFish4]);
							strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight3] = Fishes[playerid][pWeight4];
							Cooking[playerid][pCookID3] = Fishes[playerid][pFid4];
							format(string, sizeof(string), "Vous avez cuisiner un %s, qui pesait %d LBS.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
							SendClientMessage(playerid,COLOR_WHITE, string);
			    		}
						else if(fishid == 5)
						{
							format(string, sizeof(string), "A Cuisiner un %s", Fishes[playerid][pFish5]);
							strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight3] = Fishes[playerid][pWeight5];
							Cooking[playerid][pCookID3] = Fishes[playerid][pFid5];
							format(string, sizeof(string), "Vous avez cuisiner un %s, qui pesait %d LBS.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
							SendClientMessage(playerid,COLOR_WHITE, string);
			    		}
						found = 1;
   					}
					else if(Cooking[playerid][pCWeight4] == 0)
					{
						if(fishid == 1)
					    {
							format(string, sizeof(string), "A Cuisiner un %s", Fishes[playerid][pFish1]);
							strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight4] = Fishes[playerid][pWeight1];
							Cooking[playerid][pCookID4] = Fishes[playerid][pFid1];
							format(string, sizeof(string), "Vous avez cuisiner un %s, qui pesait %d LBS.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
							SendClientMessage(playerid,COLOR_WHITE, string);
			    		}
						else if(fishid == 2)
						{
							format(string, sizeof(string), "A Cuisiner un %s", Fishes[playerid][pFish2]);
							strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight4] = Fishes[playerid][pWeight2];
							Cooking[playerid][pCookID4] = Fishes[playerid][pFid2];
							format(string, sizeof(string), "Vous avez cuisiner un %s, qui pesait %d LBS.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
							SendClientMessage(playerid,COLOR_WHITE, string);
			    		}
						else if(fishid == 3)
						{
							format(string, sizeof(string), "A Cuisiner un %s", Fishes[playerid][pFish3]);
							strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight4] = Fishes[playerid][pWeight3];
							Cooking[playerid][pCookID4] = Fishes[playerid][pFid3];
							format(string, sizeof(string), "Vous avez cuisiner un %s, qui pesait %d LBS.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
							SendClientMessage(playerid,COLOR_WHITE, string);
			    		}
						else if(fishid == 4)
						{
							format(string, sizeof(string), "A Cuisiner un %s", Fishes[playerid][pFish4]);
							strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight4] = Fishes[playerid][pWeight4];
							Cooking[playerid][pCookID4] = Fishes[playerid][pFid4];
							format(string, sizeof(string), "Vous avez cuisiner un %s, qui pesait %d LBS.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
							SendClientMessage(playerid,COLOR_WHITE, string);
			    		}
						else if(fishid == 5)
						{
							format(string, sizeof(string), "A Cuisiner un %s", Fishes[playerid][pFish5]);
							strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight4] = Fishes[playerid][pWeight5];
							Cooking[playerid][pCookID4] = Fishes[playerid][pFid5];
							format(string, sizeof(string), "Vous avez cuisiner un %s, qui pesait %d LBS.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
							SendClientMessage(playerid,COLOR_WHITE, string);
    					}
						found = 1;
		    		}
					else if(Cooking[playerid][pCWeight5] == 0)
					{
						if(fishid == 1)
					    {
							format(string, sizeof(string), "A Cuisiner un %s", Fishes[playerid][pFish1]);
							strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight5] = Fishes[playerid][pWeight1];
							Cooking[playerid][pCookID5] = Fishes[playerid][pFid1];
							format(string, sizeof(string), "Vous avez cuisiner un %s, qui pesait %d LBS.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
							SendClientMessage(playerid,COLOR_WHITE, string);
			    		}
						else if(fishid == 2)
						{
							format(string, sizeof(string), "A Cuisiner un %s", Fishes[playerid][pFish2]);
							strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight5] = Fishes[playerid][pWeight2];
							Cooking[playerid][pCookID5] = Fishes[playerid][pFid2];
							format(string, sizeof(string), "Vous avez cuisiner un %s, qui pesait %d LBS.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
							SendClientMessage(playerid,COLOR_WHITE, string);
			    		}
						else if(fishid == 3)
						{
							format(string, sizeof(string), "A Cuisiner un %s", Fishes[playerid][pFish3]);
							strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight5] = Fishes[playerid][pWeight3];
							Cooking[playerid][pCookID5] = Fishes[playerid][pFid3];
							format(string, sizeof(string), "Vous avez cuisiner un %s, qui pesait %d LBS.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
							SendClientMessage(playerid,COLOR_WHITE, string);
			    		}
						else if(fishid == 4)
						{
							format(string, sizeof(string), "A Cuisiner un %s", Fishes[playerid][pFish4]);
							strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight5] = Fishes[playerid][pWeight4];
							Cooking[playerid][pCookID5] = Fishes[playerid][pFid4];
							format(string, sizeof(string), "Vous avez cuisiner un %s, qui pesait %d LBS.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
							SendClientMessage(playerid,COLOR_WHITE, string);
			    		}
						else if(fishid == 5)
						{
							format(string, sizeof(string), "A Cuisiner un %s", Fishes[playerid][pFish5]);
							strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight5] = Fishes[playerid][pWeight5];
							Cooking[playerid][pCookID5] = Fishes[playerid][pFid5];
							format(string, sizeof(string), "Vous avez cuisiner un %s, qui pesait %d LBS.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
							SendClientMessage(playerid,COLOR_WHITE, string);
			    		}
						found = 1;
   					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "Vous avez déjà trop cuisiner, plus d'espace dans votre liste!");
					    return 1;
		    		}
					if(found)
					{
					    ClearFishID(playerid, fishid);
						Fishes[playerid][pLastFish] = 0;
			   			Fishes[playerid][pFishID] = 0;
					}
				}
				else if(strcmp(x_nr,"poulet",true) == 0)
				{
				    if(PlayerToPoint(3.0,playerid,369.9786,-4.0798,1001.8589))
				    {//Cluckin Bell
				        if(Groceries[playerid][pChicken] != 0)
				        {
				            if(Cooking[playerid][pCWeight1] == 0)
						    {
							    format(string, sizeof(string), "A Cuisiner du poulet");
							    strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight1] = Groceries[playerid][pChicken];
							    Cooking[playerid][pCookID1] = 30;
							    Groceries[playerid][pChickens] = 0; Groceries[playerid][pChicken] = 0;
							    format(string, sizeof(string), "Vous avez cuisiner un %s, qui pesait %d LBS.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
							    SendClientMessage(playerid,COLOR_WHITE, string);
						    }
						    else if(Cooking[playerid][pCWeight2] == 0)
						    {
							    format(string, sizeof(string), "A Cuisiner du poulet");
							    strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight2] = Groceries[playerid][pChicken];
							    Cooking[playerid][pCookID2] = 30;
							    Groceries[playerid][pChickens] = 0; Groceries[playerid][pChicken] = 0;
							    format(string, sizeof(string), "Vous avez cuisiner un %s, qui pesait %d LBS.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
							    SendClientMessage(playerid,COLOR_WHITE, string);
						    }
						    else if(Cooking[playerid][pCWeight3] == 0)
						    {
							    format(string, sizeof(string), "A Cuisiner du poulet");
							    strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight3] = Groceries[playerid][pChicken];
							    Cooking[playerid][pCookID3] = 30;
							    Groceries[playerid][pChickens] = 0; Groceries[playerid][pChicken] = 0;
							    format(string, sizeof(string), "Vous avez cuisiner un %s, qui pesait %d LBS.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
							    SendClientMessage(playerid,COLOR_WHITE, string);
						    }
						    else if(Cooking[playerid][pCWeight4] == 0)
						    {
							    format(string, sizeof(string), "A Cuisiner du poulet");
							    strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight4] = Groceries[playerid][pChicken];
							    Cooking[playerid][pCookID4] = 30;
							    Groceries[playerid][pChickens] = 0; Groceries[playerid][pChicken] = 0;
							    format(string, sizeof(string), "Vous avez cuisiner un %s, qui pesait %d LBS.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
							    SendClientMessage(playerid,COLOR_WHITE, string);
						    }
						    else if(Cooking[playerid][pCWeight5] == 0)
						    {
							    format(string, sizeof(string), "A Cuisiner du poulet");
							    strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight5] = Groceries[playerid][pChicken];
							    Cooking[playerid][pCookID5] = 30;
							    Groceries[playerid][pChickens] = 0; Groceries[playerid][pChicken] = 0;
							    format(string, sizeof(string), "Vous avez cuisiner un %s, qui pesait %d LBS.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
							    SendClientMessage(playerid,COLOR_WHITE, string);
						    }
						    else
						    {
						        SendClientMessage(playerid, COLOR_GREY, "Vous avez déjà trop cuisiner, plus d'espace dans votre liste!");
						        return 1;
						    }
				        }
				        else
				        {
				            SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas de poulet avec vous!");
				            return 1;
				        }
				    }
				    else
				    {
				        SendClientMessage(playerid, COLOR_GREY, "Vous devez être au Cluckin Bell pour cuisiner ceci!");
					    return 1;
				    }
				}
				else if(strcmp(x_nr,"hamburger",true) == 0)
				{
				    if(PlayerToPoint(3.0,playerid,376.4466,-60.9574,1001.5078) || PlayerToPoint(3.0,playerid,378.1215,-57.4928,1001.5078))
					{//Burgershot
					    if(Groceries[playerid][pHamburger] != 0)
				        {
				            if(Cooking[playerid][pCWeight1] == 0)
						    {
							    format(string, sizeof(string), "Un hamburger avec du lard");
							    strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight1] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID1] = 30;
							    Groceries[playerid][pHamburgers] = 0; Groceries[playerid][pHamburger] = 0;
							    format(string, sizeof(string), "Vous avez cuisiner un %s, qui pesait %d LBS.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
							    SendClientMessage(playerid,COLOR_WHITE, string);
						    }
						    else if(Cooking[playerid][pCWeight2] == 0)
						    {
							    format(string, sizeof(string), "Un hamburger avec du lard");
							    strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight2] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID2] = 30;
							    Groceries[playerid][pHamburgers] = 0; Groceries[playerid][pHamburger] = 0;
							    format(string, sizeof(string), "Vous avez cuisiner un %s, qui pesait %d LBS.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
							    SendClientMessage(playerid,COLOR_WHITE, string);
						    }
						    else if(Cooking[playerid][pCWeight3] == 0)
						    {
							    format(string, sizeof(string), "Un hamburger avec du lard");
							    strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight3] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID3] = 30;
							    Groceries[playerid][pHamburgers] = 0; Groceries[playerid][pHamburger] = 0;
							    format(string, sizeof(string), "Vous avez cuisiner un %s, qui pesait %d LBS.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
							    SendClientMessage(playerid,COLOR_WHITE, string);
						    }
						    else if(Cooking[playerid][pCWeight4] == 0)
						    {
							    format(string, sizeof(string), "Un hamburger avec du lard");
							    strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight4] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID4] = 30;
							    Groceries[playerid][pHamburgers] = 0; Groceries[playerid][pHamburger] = 0;
							    format(string, sizeof(string), "Vous avez cuisiner un %s, qui pesait %d LBS.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
							    SendClientMessage(playerid,COLOR_WHITE, string);
						    }
						    else if(Cooking[playerid][pCWeight5] == 0)
						    {
							    format(string, sizeof(string), "Un hamburger avec du lard");
							    strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight5] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID5] = 30;
							    Groceries[playerid][pHamburgers] = 0; Groceries[playerid][pHamburger] = 0;
							    format(string, sizeof(string), "Vous avez cuisiner un %s, qui pesait %d LBS.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
							    SendClientMessage(playerid,COLOR_WHITE, string);
						    }
						    else
						    {
						        SendClientMessage(playerid, COLOR_GREY, "Vous avez déjà trop cuisiner, plus d'espace dans votre liste!");
						        return 1;
						    }
				        }
				        else
				        {
				            SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas d'haburger avec vous!");
				            return 1;
				        }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Un hamburger avec devez être au Burger Shot pour cuisiner ceci!");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"pizza",true) == 0)
				{
				    if(PlayerToPoint(3.0,playerid,374.1185,-113.6361,1001.4922) || PlayerToPoint(3.0,playerid,377.7971,-113.7668,1001.4922))
					{//Well Stacked Pizza
					    if(Groceries[playerid][pPizza] != 0)
				        {
				            if(Cooking[playerid][pCWeight1] == 0)
						    {
							    format(string, sizeof(string), "Une pizza");
							    strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight1] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID1] = 30;
							    Groceries[playerid][pPizzas] = 0; Groceries[playerid][pPizza] = 0;
							    format(string, sizeof(string), "Vous avez cuisiner un %s, qui pesait %d LBS.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
							    SendClientMessage(playerid,COLOR_WHITE, string);
						    }
						    else if(Cooking[playerid][pCWeight2] == 0)
						    {
							    format(string, sizeof(string), "Une pizza");
							    strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight2] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID2] = 30;
							    Groceries[playerid][pPizzas] = 0; Groceries[playerid][pPizza] = 0;
							    format(string, sizeof(string), "Vous avez cuisiner un %s, qui pesait %d LBS.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
							    SendClientMessage(playerid,COLOR_WHITE, string);
						    }
						    else if(Cooking[playerid][pCWeight3] == 0)
						    {
							    format(string, sizeof(string), "Une pizza");
							    strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight3] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID3] = 30;
							    Groceries[playerid][pPizzas] = 0; Groceries[playerid][pPizza] = 0;
							    format(string, sizeof(string), "Vous avez cuisiner un %s, qui pesait %d LBS.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
							    SendClientMessage(playerid,COLOR_WHITE, string);
						    }
						    else if(Cooking[playerid][pCWeight4] == 0)
						    {
							    format(string, sizeof(string), "Une pizza");
							    strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight4] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID4] = 30;
							    Groceries[playerid][pPizzas] = 0; Groceries[playerid][pPizza] = 0;
							    format(string, sizeof(string), "Vous avez cuisiner un %s, qui pesait %d LBS.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
							    SendClientMessage(playerid,COLOR_WHITE, string);
						    }
						    else if(Cooking[playerid][pCWeight5] == 0)
						    {
							    format(string, sizeof(string), "Une pizza");
							    strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight5] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID5] = 30;
							    Groceries[playerid][pPizzas] = 0; Groceries[playerid][pPizza] = 0;
							    format(string, sizeof(string), "Vous avez cuisiner un %s, qui pesait %d LBS.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
							    SendClientMessage(playerid,COLOR_WHITE, string);
						    }
						    else
						    {
						        SendClientMessage(playerid, COLOR_GREY, "Vous avez déjà trop cuisiner, plus d'espace dans votre liste!");
						        return 1;
						    }
				        }
				        else
				        {
				            SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas de pizza avec vous!");
				            return 1;
				        }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Vous devez être au Well Stacked Pizza pour cuisiner ceci!");
					    return 1;
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Mauvais nom!");
				    return 1;
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas a un endroit ou on peux cuisiner (Cluckin Bell / Burger Shot / Well Stacked Pizza).");
	            return 1;
	        }
	    }
	    return 1;
	}
	if(strcmp(cmd,"/acuisiner",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        SendClientMessage(playerid, COLOR_WHITE, "|__________________ Cooking __________________|");
	        format(string, sizeof(string), "* (1) Fait: %s.   Poids: %d.", Cooking[playerid][pCook1], Cooking[playerid][pCWeight1]);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "* (2) Fait: %s.   Poids: %d.", Cooking[playerid][pCook2], Cooking[playerid][pCWeight2]);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "* (3) Fait: %s.   Poids: %d.", Cooking[playerid][pCook3], Cooking[playerid][pCWeight3]);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "* (4) Fait: %s.   Poids: %d.", Cooking[playerid][pCook4], Cooking[playerid][pCWeight4]);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "* (5) Fait: %s.   Poids: %d.", Cooking[playerid][pCook5], Cooking[playerid][pCWeight5]);
			SendClientMessage(playerid, COLOR_GREY, string);
			SendClientMessage(playerid, COLOR_WHITE, "|____________________________________________|");
		}
	    return 1;
 	}
    if(strcmp(cmd, "/pecher", true) == 0 || strcmp(cmd, "/fish", true) == 0 || strcmp(cmd, "/peche", true) == 0)
	//if(strcmp(cmd,"/pecher",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pFishTool] != 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas de materiels de peche avec vous!");
			    return 1;
			}
	        if(PlayerInfo[playerid][pFishes] > 5)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous avez attrapé trop de poissons, attendez un peux avant de repecher!");
	            return 1;
	        }
	        if(Fishes[playerid][pWeight1] > 0 && Fishes[playerid][pWeight2] > 0 && Fishes[playerid][pWeight3] > 0 && Fishes[playerid][pWeight4] > 0 && Fishes[playerid][pWeight5] > 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous avez déjà attrapé 5poissons, vender / mangez / relachez les avant!");
	            return 1;
	        }
	        new Veh = GetPlayerVehicleID(playerid);
	        if((IsAtFishPlace(playerid)) || IsABoat(Veh))
	        {
	            new Caught;
	            new rand;
	            new fstring[MAX_PLAYER_NAME];
	            new Level = PlayerInfo[playerid][pFishSkill];
	            if(Level >= 0 && Level <= 50) { Caught = random(20)-7; }
	            else if(Level >= 51 && Level <= 100) { Caught = random(50)-20; }
	            else if(Level >= 101 && Level <= 200) { Caught = random(100)-50; }
	            else if(Level >= 201 && Level <= 400) { Caught = random(160)-60; }
	            else if(Level >= 401) { Caught = random(180)-70; }
	            rand = random(FishNamesNumber);
	            if(Caught <= 0)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "Ligne Cassée!");
	                return 1;
	            }
	            else if(rand == 0)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "Vous avez attrapé une veste et la jettez à cotez de vous!");
	                return 1;
	            }
	            else if(rand == 4)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "Vous avez attrapé un pentalon et le jettez à cotez de vous!");
	                return 1;
	            }
	            else if(rand == 7)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "Vous avez attrapé une cane et la jettez à cotez de vous!");
	                return 1;
	            }
	            else if(rand == 10)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "Vous avez attrapé une paire de chaussure et les jettez à cotez de vous!");
	                return 1;
	            }
	            else if(rand == 13)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "Vous avez attrapé une ordure et la jettez à cotez de vous!");
	                return 1;
	            }
	            else if(rand == 20)
	            {
	                new mrand = random(500);
	                format(string, sizeof(string), "Vous avez attrapé un sac d'argent, contenant $%d.", mrand);
					SendClientMessage(playerid, COLOR_WHITE, string);
	                SafeGivePlayerMoney(playerid, mrand);
	                return 1;
	            }
		        if(PlayerInfo[playerid][pFishLic] < 1)
		        {
	            	WantedPoints[playerid] += 1;
					SetPlayerCriminal(playerid,255, "Pêche Illégale");
				}
		        if(Fishes[playerid][pWeight1] == 0)
		        {
		        	PlayerInfo[playerid][pFishes] += 1;
		            PlayerInfo[playerid][pFishSkill] += 1;
		            format(fstring, sizeof(fstring), "%s", FishNames[rand]);
					strmid(Fishes[playerid][pFish1], fstring, 0, strlen(fstring), 255);
					Fishes[playerid][pWeight1] = Caught;
					format(string, sizeof(string), "Vous avez attrapé un %s, qui pese %d Lbs.", Fishes[playerid][pFish1], Caught);
					SendClientMessage(playerid, COLOR_WHITE, string);
					Fishes[playerid][pLastWeight] = Caught;
					Fishes[playerid][pLastFish] = 1;
					Fishes[playerid][pFid1] = rand;
					Fishes[playerid][pFishID] = rand;
					if(Caught > PlayerInfo[playerid][pBiggestFish])
					{
					    format(string, sizeof(string), "Votre dernier record de %d Lbs à été battu, Votre nouveau plus gros poisson est de %d Lbs.", PlayerInfo[playerid][pBiggestFish], Caught);
						SendClientMessage(playerid, COLOR_WHITE, string);
						PlayerInfo[playerid][pBiggestFish] = Caught;
					}
     			}
		        else if(Fishes[playerid][pWeight2] == 0)
		        {
		            PlayerInfo[playerid][pFishes] += 1;
		            PlayerInfo[playerid][pFishSkill] += 1;
		            format(fstring, sizeof(fstring), "%s", FishNames[rand]);
					strmid(Fishes[playerid][pFish2], fstring, 0, strlen(fstring), 255);
					Fishes[playerid][pWeight2] = Caught;
					format(string, sizeof(string), "Vous avez attrapé un %s, qui pese %d Lbs.", Fishes[playerid][pFish2], Caught);
					SendClientMessage(playerid, COLOR_WHITE, string);
					Fishes[playerid][pLastWeight] = Caught;
					Fishes[playerid][pLastFish] = 2;
					Fishes[playerid][pFid2] = rand;
					Fishes[playerid][pFishID] = rand;
					if(Caught > PlayerInfo[playerid][pBiggestFish])
					{
					    format(string, sizeof(string), "Votre dernier record de %d Lbs à été battu, Votre nouveau plus gros poisson est de %d Lbs.", PlayerInfo[playerid][pBiggestFish], Caught);
						SendClientMessage(playerid, COLOR_WHITE, string);
						PlayerInfo[playerid][pBiggestFish] = Caught;
					}
		        }
		        else if(Fishes[playerid][pWeight3] == 0)
		        {
		            PlayerInfo[playerid][pFishes] += 1;
		            PlayerInfo[playerid][pFishSkill] += 1;
		            format(fstring, sizeof(fstring), "%s", FishNames[rand]);
					strmid(Fishes[playerid][pFish3], fstring, 0, strlen(fstring), 255);
					Fishes[playerid][pWeight3] = Caught;
					format(string, sizeof(string), "Vous avez attrapé un %s, qui pese %d Lbs.", Fishes[playerid][pFish3], Caught);
					SendClientMessage(playerid, COLOR_WHITE, string);
					Fishes[playerid][pLastWeight] = Caught;
					Fishes[playerid][pLastFish] = 3;
					Fishes[playerid][pFid3] = rand;
					Fishes[playerid][pFishID] = rand;
					if(Caught > PlayerInfo[playerid][pBiggestFish])
					{
					    format(string, sizeof(string), "Votre dernier record de %d Lbs à été battu, Votre nouveau plus gros poisson est de %d Lbs.", PlayerInfo[playerid][pBiggestFish], Caught);
						SendClientMessage(playerid, COLOR_WHITE, string);
						PlayerInfo[playerid][pBiggestFish] = Caught;
					}
		        }
		        else if(Fishes[playerid][pWeight4] == 0)
		        {
		            PlayerInfo[playerid][pFishes] += 1;
		            PlayerInfo[playerid][pFishSkill] += 1;
		            format(fstring, sizeof(fstring), "%s", FishNames[rand]);
					strmid(Fishes[playerid][pFish4], fstring, 0, strlen(fstring), 255);
					Fishes[playerid][pWeight4] = Caught;
					format(string, sizeof(string), "Vous avez attrapé un %s, qui pese %d Lbs.", Fishes[playerid][pFish4], Caught);
					SendClientMessage(playerid, COLOR_WHITE, string);
					Fishes[playerid][pLastWeight] = Caught;
					Fishes[playerid][pLastFish] = 4;
					Fishes[playerid][pFid4] = rand;
					Fishes[playerid][pFishID] = rand;
					if(Caught > PlayerInfo[playerid][pBiggestFish])
					{
					    format(string, sizeof(string), "Votre dernier record de %d Lbs à été battu, Votre nouveau plus gros poisson est de %d Lbs.", PlayerInfo[playerid][pBiggestFish], Caught);
						SendClientMessage(playerid, COLOR_WHITE, string);
						PlayerInfo[playerid][pBiggestFish] = Caught;
					}
		        }
		        else if(Fishes[playerid][pWeight5] == 0)
		        {
		            PlayerInfo[playerid][pFishes] += 1;
		            PlayerInfo[playerid][pFishSkill] += 1;
		            format(fstring, sizeof(fstring), "%s", FishNames[rand]);
					strmid(Fishes[playerid][pFish5], fstring, 0, strlen(fstring), 255);
					Fishes[playerid][pWeight5] = Caught;
					format(string, sizeof(string), "Vous avez attrapé un %s, qui pese %d Lbs.", Fishes[playerid][pFish5], Caught);
					SendClientMessage(playerid, COLOR_WHITE, string);
					Fishes[playerid][pLastWeight] = Caught;
					Fishes[playerid][pLastFish] = 5;
					Fishes[playerid][pFid5] = rand;
					Fishes[playerid][pFishID] = rand;
					if(Caught > PlayerInfo[playerid][pBiggestFish])
					{
					    format(string, sizeof(string), "Votre dernier record de %d Lbs à été battu, Votre nouveau plus gros poisson est de %d Lbs.", PlayerInfo[playerid][pBiggestFish], Caught);
						SendClientMessage(playerid, COLOR_WHITE, string);
						PlayerInfo[playerid][pBiggestFish] = Caught;
					}
		        }
		        else
		        {
		            SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas de place pour votre poisson!");
		            return 1;
		        }
	            if(PlayerInfo[playerid][pFishSkill] == 50)
				{ SendClientMessage(playerid, COLOR_YELLOW, "Votre niveau de peche est maintenant de 2, vous pouvez attraper de plus gros poisson."); }
				else if(PlayerInfo[playerid][pFishSkill] == 250)
				{ SendClientMessage(playerid, COLOR_YELLOW, "Votre niveau de peche est maintenant de 3, vous pouvez attraper de plus gros poisson."); }
				else if(PlayerInfo[playerid][pFishSkill] == 500)
				{ SendClientMessage(playerid, COLOR_YELLOW, "Votre niveau de peche est maintenant de 4, vous pouvez attraper de plus gros poisson."); }
				else if(PlayerInfo[playerid][pFishSkill] == 1000)
				{ SendClientMessage(playerid, COLOR_YELLOW, "Votre niveau de peche est maintenant de 5, vous pouvez attraper de plus gros poisson."); }
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas a un endroit de pêche (Big Wheel Rods) ou sur un bateau de pêche!");
	            return 1;
	        }
	    }
	    return 1;
 	}
    if(strcmp(cmd, "/poissons", true) == 0 || strcmp(cmd, "/fishes", true) == 0 || strcmp(cmd, "/poisson", true) == 0)
	//if(strcmp(cmd,"/poissons",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        SendClientMessage(playerid, COLOR_WHITE, "|__________________ Poissins __________________|");
	        format(string, sizeof(string), "* (1) Poisson: %s.   Poid: %d.", Fishes[playerid][pFish1], Fishes[playerid][pWeight1]);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "* (2) Poisson: %s.   Poid: %d.", Fishes[playerid][pFish2], Fishes[playerid][pWeight2]);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "* (3) Poisson: %s.   Poid: %d.", Fishes[playerid][pFish3], Fishes[playerid][pWeight3]);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "* (4) Poisson: %s.   Poid: %d.", Fishes[playerid][pFish4], Fishes[playerid][pWeight4]);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "* (5) Poisson: %s.   Poid: %d.", Fishes[playerid][pFish5], Fishes[playerid][pWeight5]);
			SendClientMessage(playerid, COLOR_GREY, string);
			SendClientMessage(playerid, COLOR_WHITE, "|____________________________________________|");
		}
	    return 1;
 	}
    if(strcmp(cmd, "/releasefish", true) == 0 || strcmp(cmd, "/relacher", true) == 0 || strcmp(cmd, "/relacherpoisson", true) == 0)
    //if(strcmp(cmd,"/relacher",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /relacher [numeropoisson]");
				return 1;
			}
			new fishid = strval(tmp);
			if(fishid < 1 || fishid > 5) { SendClientMessage(playerid, COLOR_GREY, "Le numero doit être compris entre 1 et 5!"); return 1; }
			else if(fishid == 1 && Fishes[playerid][pWeight1] < 1) { SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas attrapé de poisson sur ce numérp(1)!"); return 1; }
			else if(fishid == 2 && Fishes[playerid][pWeight2] < 1) { SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas attrapé de poisson sur ce numérp(2)!"); return 1; }
			else if(fishid == 3 && Fishes[playerid][pWeight3] < 1) { SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas attrapé de poisson sur ce numérp(3)!"); return 1; }
			else if(fishid == 4 && Fishes[playerid][pWeight4] < 1) { SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas attrapé de poisson sur ce numérp(4)!"); return 1; }
			else if(fishid == 5 && Fishes[playerid][pWeight5] < 1) { SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas attrapé de poisson sur ce numérp(5)!"); return 1; }
			ClearFishID(playerid, fishid);
			Fishes[playerid][pLastFish] = 0;
   			Fishes[playerid][pFishID] = 0;
		}
		return 1;
	}
    if(strcmp(cmd, "/throwback", true) == 0 || strcmp(cmd, "/relancer", true) == 0 || strcmp(cmd, "/backthow", true) == 0)
    //if(strcmp(cmd,"/relancer",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        if(Fishes[playerid][pLastFish] > 0)
	        {
	            ClearFishID(playerid, Fishes[playerid][pLastFish]);
	            Fishes[playerid][pLastFish] = 0;
	            Fishes[playerid][pFishID] = 0;
	            SendClientMessage(playerid, COLOR_GREY, "Vous avez relancer le dernier poisson que vous aviez attrapé dans la riviere!");
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas encore attrapé de poisson!");
	            return 1;
	        }
	    }
	    return 1;
 	}
    if(strcmp(cmd, "/relancertous", true) == 0 || strcmp(cmd, "/throwbackall", true) == 0)
	//if(strcmp(cmd,"/relancertous",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        if(Fishes[playerid][pWeight1] > 0 || Fishes[playerid][pWeight2] > 0 || Fishes[playerid][pWeight3] > 0 || Fishes[playerid][pWeight4] > 0 || Fishes[playerid][pWeight5] > 0)
	        {
	            ClearFishes(playerid);
				Fishes[playerid][pLastFish] = 0;
				Fishes[playerid][pFishID] = 0;
				SendClientMessage(playerid, COLOR_GREY, "Vous avez relancé tous les poissons que vous aviez attrapé dans la riviere!");
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas encore attrapé de poisson!");
	            return 1;
	        }
	    }
	    return 1;
 	}
 	//----------------------------- Gravity -------------------------------------------
	if(strcmp(cmd,"/graviter",true)==0 || strcmp(cmd, "/gravité", true) == 0 || strcmp(cmd, "/gravity", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] < 4)
	        {
	            SendClientMessage(playerid, COLOR_RED, "   Vous n'êtes pas Admin !");
	            return 1;
	        }
	        tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp)) {
	            SendClientMessage(playerid, COLOR_WHITE, "[Utilisation:] /graviter [value Default: 0.008]");
	            return 1;
			}
			new Float:gravity;
			floatstr(tmp);
			SetGravity(gravity);
			format(string, sizeof(string), " Gravity changed to %f.",gravity);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		}
		return 1;
	}
	if(strcmp(cmd,"/permis",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        new text1[20];
	        new text2[20];
	        new text3[20];
	        new text4[20];
	        new text5[20];
	        new text6[20];
	        new text7[20];
	        if(PlayerInfo[playerid][pCarLic]) { text1 = "Passé"; } else { text1 = "Non Passé"; }
            if(PlayerInfo[playerid][pFlyLic]) { text4 = "Passé"; } else { text4 = "Non Passé"; }
			if(PlayerInfo[playerid][pBoatLic]) { text2 = "Passé"; } else { text2 = "Non Passé"; }
	        if(PlayerInfo[playerid][pFishLic]) { text3 = "Passé"; } else { text3 = "Non Passé"; }
	        if(PlayerInfo[playerid][pGunLic]) { text5 = "Passé"; } else { text5 = "Non Passé"; }
	        if(PlayerInfo[playerid][pLourdLic]) { text6 = "Passé"; } else { text6 = "Non Passé"; }
	        if(PlayerInfo[playerid][pMotoLic]) { text7 = "Passé"; } else { text7 = "Non Passé"; }
	        SendClientMessage(playerid, COLOR_WHITE, "|__________________ Licenses __________________|");
	        format(string, sizeof(string), "* Permis Conduire: %s.", text1);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "* Point Permis: %d.",PlayerInfo[playerid][pPointPermis]);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "* Permis Vol: %s.", text4);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "* Permis Navigation: %s.", text2);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "* Permis Pêche: %s.", text3);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "* Permis Arme: %s.", text5);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "* Permis Poid Lourd: %s.", text6);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "* Permis Moto: %s.", text7);
			SendClientMessage(playerid, COLOR_GREY, string);
			SendClientMessage(playerid, COLOR_WHITE, "|______________________________________________|");
		}
	    return 1;
 	}
 	/*if(strcmp(cmd,"/members",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new teamnumber;
			if (PlayerInfo[playerid][pLeader] != 0) teamnumber = PlayerInfo[playerid][pLeader];
			else if (PlayerInfo[playerid][pMember] != 0) teamnumber = PlayerInfo[playerid][pMember];
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "You are not a member of a team!");
				return 1;
			}
	    	SendClientMessage(playerid, 0x808000AA, "*Members Online*");
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if (IsPlayerConnected(i))
				{
					GetPlayerName(i, sendername, sizeof(sendername));
					format(string, sizeof(string), "");
					if (PlayerInfo[i][pLeader] == teamnumber) format(string, sizeof(string), "%s (LEADER)",sendername);
					else if (PlayerInfo[i][pMember] == teamnumber) format(string, sizeof(string), "%s, Rank: %d.",sendername, PlayerInfo[i][pRank]);
					if (strlen(string) > 1) SendClientMessage(playerid, 0xF5DEB3AA, string);
				}
			}
		}
		return 1;
	}*/
    if(strcmp(cmd, "/mp", true) == 0 || strcmp(cmd, "/montrerpermis", true) == 0 || strcmp(cmd, "/showlicenses", true) == 0)
    //if(strcmp(cmd,"/montrerpermis",true)==0 || strcmp(cmd,"/mp",true)==0)
    //if(strcmp(cmd,"/montrerpermis",true)==0||strcmp(cmd,"/showlicenses",true)==0)
	{
        if(IsPlayerConnected(playerid))
	    {
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /montrerpermis [playerid/PartOfName]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
				    if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez pas vous montrez votre permis a vous même, use /permis!"); return 1; }
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
					    new text1[20];
				        new text2[20];
				        new text3[20];
				        new text4[20];
				        new text5[20];
				        new text6[20];
				        new text7[20];
						if(PlayerInfo[playerid][pCarLic]) { text1 = "Passé"; } else { text1 = "Non Passé"; }
                        if(PlayerInfo[playerid][pFlyLic]) { text4 = "Passé"; } else { text4 = "Non Passé"; }

						if(PlayerInfo[playerid][pBoatLic]) { text2 = "Passé"; } else { text2 = "Non Passé"; }
				        if(PlayerInfo[playerid][pFishLic]) { text3 = "Passé"; } else { text3 = "Non Passé"; }
				        if(PlayerInfo[playerid][pLourdLic]) { text6 = "Passé"; } else { text6 = "Non Passé"; }
				        if(PlayerInfo[playerid][pMotoLic]) { text7 = "Passé"; } else { text7 = "Non Passé"; }
				        if(PlayerInfo[playerid][pGunLic]) { text5 = "Passé"; } else { text5 = "Non Passé"; }
				        SendClientMessage(giveplayerid, COLOR_WHITE, string);
                        format(string, sizeof(string), "* Permis de conduire: %s.", text1);
			            SendClientMessage(giveplayerid, COLOR_GREY, string);
			            if(PlayerInfo[playerid][pFlyLicf] == 0) { format(string, sizeof(string), "* Permis Avion: %s.", text5); }
		               	else if(PlayerInfo[playerid][pFlyLicf] > 0) { format(string, sizeof(string), "* Permis Avion: Passé.", text3); }
		              	SendClientMessage(giveplayerid, COLOR_GREY, string);
		            	if(PlayerInfo[playerid][pBoatLicf] == 0) { format(string, sizeof(string), "* Permis bateau: %s.", text5); }
                        else if(PlayerInfo[playerid][pBoatLicf] > 0) { format(string, sizeof(string), "* Permis bataeu: Passé.", text3); }
			            SendClientMessage(giveplayerid, COLOR_GREY, string);
			            if(PlayerInfo[playerid][pFishLicf] == 0) { format(string, sizeof(string), "* Permis Pêche: %s.", text3); }
		               	else if(PlayerInfo[playerid][pFishLicf] > 0) { format(string, sizeof(string), "* Permis de péche: Passé.", text3); }
		             	SendClientMessage(giveplayerid, COLOR_GREY, string);
		            	if(PlayerInfo[playerid][pLourdLic] == 0) { format(string, sizeof(string), "* Permis Poid Lourd: %s.", text6); }
                        else if(PlayerInfo[playerid][pLourdLicf] > 0) { format(string, sizeof(string), "* Permis poid lourd: Passé.", text6); }
			            SendClientMessage(giveplayerid, COLOR_GREY, string);
			            if(PlayerInfo[playerid][pMotoLicf] == 0) { format(string, sizeof(string), "* Permis de Moto: %s.", text7); }
		               	else if(PlayerInfo[playerid][pMotoLicf] > 0) { format(string, sizeof(string), "* Permis de moto: Passé.", text7); }
		             	SendClientMessage(giveplayerid, COLOR_GREY, string);
		            	if(PlayerInfo[playerid][pGunLicf] == 0) { format(string, sizeof(string), "* Permis Arme: %s.", text5); }
		             	else if(PlayerInfo[playerid][pGunLicf] > 0) { format(string, sizeof(string), "* Permis Arme: Passé.", text3); }
						SendClientMessage(giveplayerid, COLOR_GREY, string);
						format(string, sizeof(string), " %s vous montre ses permis.", sendername);
						SendClientMessage(giveplayerid, COLOR_WHITE, string);
						format(string, sizeof(string), " Vous avez montré vos permis à %s.", giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas près de vous!");
					    return 1;
					}
				}
			}
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté!");
	            return 1;
	        }
		}
	    return 1;
 	}
    if(strcmp(cmd, "/jetterdrogue", true) == 0 || strcmp(cmd, "/jetterdrogues", true) == 0 || strcmp(cmd, "/lacherdrogue", true) == 0)
	//if(strcmp(cmd, "/dumpdrogues", true) == 0 || strcmp(cmd, "/jetterdrogues", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
		    if(PlayerInfo[playerid][pLevel] > 0)
		    {
		        {
		            if(PlayerInfo[playerid][pDrugs] >= 0)
					{
         			    PlayerInfo[playerid][pDrugs] = 0;
					    GetPlayerName(playerid, sendername, sizeof(sendername));
			            format(string, sizeof(string), "%s à jetté sa drogue.", sendername);
			            ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					else if(PlayerInfo[playerid][pDrugs] == 0)
					{
					SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas de drogue sur vous!");
					}
				 }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas le niveau suffisant!");
			}
		}//not connected
		return 1;
	}
 	if(strcmp(cmd,"/fouiller",true)==0||strcmp(cmd, "/frisk", true) == 0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /fouiller [playerid/PartOfName]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
				    if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez pas vous fouillez vous même!"); return 1; }
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
					    new text1[20], text2[20], text3[20], text4[20], text5[20], text6[20], text7[20], text8[20];
					    if(PlayerInfo[giveplayerid][pDrugs] > 0) { text1 = "| Drogues."; } else { text1 = "| Poche Vide."; }
					    if(PlayerInfo[giveplayerid][pMats] > 0 || PlayerInfo[giveplayerid][pMatsf] > 0) { text2 = "| Materiels."; } else { text2 = "| Poche Vide."; }
					    if(Fishes[giveplayerid][pWeight1] > 0 || Fishes[giveplayerid][pWeight2] > 0 || Fishes[giveplayerid][pWeight3] > 0 || Fishes[giveplayerid][pWeight4] > 0 || Fishes[giveplayerid][pWeight5] > 0) { text3 = "| Poissons."; } else { text3 = "| Poche Vide."; }
					    if(PlayerInfo[giveplayerid][pPhoneBook] > 0) { text4 = "| Annuaire."; } else { text4 = "| Poche Vide."; }
					    if(PlayerInfo[giveplayerid][pWatch] > 0) { text5 = "| Montre."; } else { text5 = "| Poche Vide."; }
					    if(PlayerInfo[giveplayerid][pfpermis] > 0) { text6 = "| Permis Anormal."; } else { text6 = "| Permis."; }
                        if(PlayerInfo[giveplayerid][pskinf] > 0) { text7 = "| Habits Anormaux."; } else { text7 = "| habits Normaux."; }
					    new sweapon, sammo;
					    for (new i=0; i<9; i++)
					    {
					        GetPlayerWeaponData(giveplayerid, i, sweapon, sammo);
					        if(sweapon != 0 && sammo != 0)
					        {
					            text8 = "| Arme.";
					        }
					    }
					    format(string, sizeof(string), "|__________ Objets %s __________|", giveplayer);
				        SendClientMessage(playerid, COLOR_WHITE, string);
				        format(string, sizeof(string), "%s.", text1);
						SendClientMessage(playerid, COLOR_GREY, string);
						format(string, sizeof(string), "%s.", text2);
						SendClientMessage(playerid, COLOR_GREY, string);
						format(string, sizeof(string), "%s.", text3);
						SendClientMessage(playerid, COLOR_GREY, string);
						format(string, sizeof(string), "%s.", text4);
						SendClientMessage(playerid, COLOR_GREY, string);
						format(string, sizeof(string), "%s.", text5);
						SendClientMessage(playerid, COLOR_GREY, string);
						format(string, sizeof(string), "%s.", text6);
						SendClientMessage(playerid, COLOR_GREY, string);
						format(string, sizeof(string), "%s.", text7);
						SendClientMessage(playerid, COLOR_GREY, string);
						format(string, sizeof(string), "%s", text8);
						SendClientMessage(playerid, COLOR_GREY, string);
						if(PlayerInfo[giveplayerid][pSex] == 1) { format(string, sizeof(string), "%s fouille le corp de %s et cherche des objets.", sendername ,giveplayer); }
						else { format(string, sizeof(string), "%s fouille le corp %s et cherche des objets.", sendername ,giveplayer); }
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas près de vous!");
					    return 1;
					}
				}
			}
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté!");
	            return 1;
	        }
		}
	    return 1;
 	}
 	if(strcmp(cmd,"/fouillerinv",true)==0|| strcmp(cmd,"/friskinv",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: (/finv)entory [playerid/PartOfName]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
				    if (ProxDetectorS(5.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez pas vous fouiller vous même!"); return 1; }
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
                        format(string, sizeof(string), "|__________ %s inventaire __________|", giveplayer);
				        SendClientMessage(playerid, COLOR_WHITE, string);
				        if(PlayerInfo[giveplayerid][pInvWeapon] != 0)
				        {
				            new gunname[100];
				            GetWeaponName(PlayerInfo[giveplayerid][pInvWeapon], gunname, sizeof(gunname));
				        	format(string, sizeof(string), "| Arme: %s, Munition: %d", gunname, PlayerInfo[giveplayerid][pInvAmmo]);
							SendClientMessage(playerid, COLOR_GREY, string);
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "| Inventaire Vide.");
						}
						format(string, sizeof(string), "  %s à fouillé votre inventaire.", sendername);
						SendClientMessage(giveplayerid, COLOR_GREY, string);
						return 1;
					}
				}
			}
		}
		return 1;
	}
	if(strcmp(cmd,"/portable",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8)
		    {
			    if(ConnectedToPC[playerid] == 255)
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "Vous avez fermé votre Portable, et vous vous êtes déconnecté de L'agence.");
			        ConnectedToPC[playerid] = 0;
			        return 1;
			    }
			    GetPlayerName(playerid, sendername, sizeof(sendername));
			    SendClientMessage(playerid, COLOR_GREY, "Vous avez ouvert votre Portable et vous vous êtes connecté à l'agence.");
			    SendClientMessage(playerid, COLOR_WHITE, "|___ Hitman Agency ___|");
			    SendClientMessage(playerid, COLOR_YELLOW2, "|");
			    SendClientMessage(playerid, COLOR_YELLOW2, "| - News");
			    SendClientMessage(playerid, COLOR_YELLOW2, "| - Contrats");
			    SendClientMessage(playerid, COLOR_YELLOW2, "| - DonnerContrat");
			    SendClientMessage(playerid, COLOR_YELLOW2, "| - Armes");
			    SendClientMessage(playerid, COLOR_YELLOW2, "| - Rangs");
			    SendClientMessage(playerid, COLOR_YELLOW2, "| - Deconnection");
				SendClientMessage(playerid, COLOR_WHITE, "|_____________________|");
				ConnectedToPC[playerid] = 255;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas Hitman!");
		        return 1;
		    }
		}
	    return 1;
	}
	if(strcmp(cmd,"/sellmats",true)==0) // By LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pJob] != 9)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "  Vous n'êtes pas la Dealer de Matériaux ! ");
	            return 1;
	        }
	        tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp))
	        {
	            SendClientMessage(playerid, COLOR_WHITE, "FORMULE: /sellmats [playerid/PartOfName] [ammount]");
	            return 1;
	        }
	        giveplayerid = ReturnUser(tmp);
	        if(IsPlayerConnected(giveplayerid))
	        {
	            if(giveplayerid != INVALID_PLAYER_ID)
	            {
					if(ProxDetectorS(5.0, playerid, giveplayerid))
					{
					    tmp = strtok(cmdtext, idx);
					    if(!strlen(tmp))
					    {
					        SendClientMessage(playerid, COLOR_WHITE, "FORMULE: /sellmats [playerid/PartOfName] [ammount]");
	            			return 1;
					    }
					    new ammount = strval(tmp);
					    if(ammount < 1) { SendClientMessage(playerid, COLOR_GREY, "  Mauvais montant ! "); return 1; }
					    if(ammount > PlayerInfo[playerid][pMats]) { SendClientMessage(playerid, COLOR_GREY, "  Vou n'avez pas autant de matériaux à vendre !"); return 1; }
					    PlayerInfo[playerid][pMats] -= ammount;
					    PlayerInfo[giveplayerid][pMats] += ammount;
						GetPlayerName(playerid, sendername, sizeof(sendername));
						GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						format(string, sizeof(string), " %sa donné %s %d matos.", sendername,giveplayer,moneys);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Ce joueur n'es pas pres de vous ! ");
					    return 1;
					}
	            }
	        }
	    }
	    return 1;
	}
	if(strcmp(cmd,"/materials",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
		    if (PlayerInfo[playerid][pJob] != 9)
			{
			    SendClientMessage(playerid,COLOR_GREY,"   Vous n'êtes pas un traficant d'armes !");
			    return 1;
			}
			new x_nr[256];
			x_nr = strtok(cmdtext, idx);
			if(!strlen(x_nr)) {
				SendClientMessage(playerid, COLOR_WHITE, "UTILISATION: /materials [name]");
				SendClientMessage(playerid, COLOR_WHITE, "Available names: Get, Deliver.");
				return 1;
			}
			if(strcmp(x_nr,"get",true) == 0)
			{
			    if(PlayerToPoint(3.0,playerid,1424.1024,-1317.6764,13.5547))
			    {
			        if(MatsHolding[playerid] >= 10)
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   Vous ne pouvez plus porter de cargaison de matériaux !");
				        return 1;
			        }
			        tmp = strtok(cmdtext, idx);
			        if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "UTILISATION: /materials get [ammount]");
						return 1;
					}
					moneys = strval(tmp);
					if(moneys < 1 || moneys > 10) { SendClientMessage(playerid, COLOR_GREY, "   Le nombre de cargaison ne peut pas être inférieur à 1 ou supérieur à 10 !"); return 1; }
					new price = moneys * 100;
					if(GetPlayerMoney(playerid) > price)
					{
					    format(string, sizeof(string), " Vous avez acheté %d cargaison(s) de matériaux pour $%d.", moneys, price);
					    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					    SafeGivePlayerMoney(playerid, - price);
					    MatsHolding[playerid] = moneys;
					}
					else
					{
					    format(string, sizeof(string), "   Vous n'avez pas les $%d !", price);
					    SendClientMessage(playerid, COLOR_GREY, string);
					}
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas à la bonne place, allez derrière Ammunation !");
			        return 1;
			    }
			}
			else if(strcmp(x_nr,"deliver",true) == 0)
			{
			    if(PlayerToPoint(3.0,playerid,2847.4922,-2504.8691,14.6081))
			    {
			        if(MatsHolding[playerid] > 0)
			        {
			            new payout = (25)*(MatsHolding[playerid]);
			            format(string, sizeof(string), " L'usine vous a donné %d matériaux pour vos %d cargaison(s).", payout, MatsHolding[playerid]);
					    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			            PlayerInfo[playerid][pMats] += payout;
			            MatsHolding[playerid] = 0;
			        }
			        else
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   Vous n'avez pas de cargaison(s) de matériaux !");
				        return 1;
			        }
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas à l'entrepôt !");
			        return 1;
			    }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Invalid Materials Name !");
			    return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/voler", true) == 0)
	{
		GetPlayerName(playerid, sendername, sizeof(sendername));
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pLeader] == 16 || PlayerInfo[playerid][pMember] == 16 || PlayerInfo[playerid][pLeader] == 50 || PlayerInfo[playerid][pLeader] == 50 || PlayerInfo[playerid][pMember] == 14)
	        {
	            if(PlayerInfo[playerid][pRank] < 2)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "Vous devez être rang 2 pour pouvoir utiliser cette commande");
	                return 1;
	            }
	            new x_nr[256];
				x_nr = strtok(cmdtext, idx);
				if(!strlen(x_nr)) {
					SendClientMessage(playerid, COLOR_WHITE, "|______________ Voler Quelq'un _______________|");
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /voler [nom] [playerid/PartOfName]");
			  		SendClientMessage(playerid, COLOR_GREY, "Noms Disponibles: Telephone, Arme");
					SendClientMessage(playerid, COLOR_WHITE, "|___________________________________________________|");
					return 1;
				}
			    if(strcmp(x_nr,"telephone",true) == 0)
				{
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "USAGE: /voler telephone [playerid/PartOfName]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					new name[MAX_PLAYER_NAME];
					GetPlayerName(giveplayerid, name, sizeof(name));
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
         					if(!(PlayerInfo[giveplayerid][pMember] == 1 || PlayerInfo[giveplayerid][pMember] == 2 || PlayerInfo[giveplayerid][pMember] == 3 || PlayerInfo[giveplayerid][pLeader] == 1 || PlayerInfo[giveplayerid][pLeader] == 2 || PlayerInfo[giveplayerid][pLeader] == 3))
					        {
						        if (ProxDetectorS(3.0, playerid, giveplayerid))
								{
								    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez pas vous volez vous même!"); return 1; }
							        format(string, sizeof(string), "Vous avez voleé le Telephone de %s.", name);
							        SendClientMessage(playerid, COLOR_WHITE, string);
							        format(string, sizeof(string), "%s a volé votre Telephone.", sendername);
							        SendClientMessage(giveplayerid, COLOR_WHITE, string);
							        PlayerInfo[giveplayerid][pPnumber] = 0;
								}
								else
								{
								    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas près de vous!");
								    return 1;
								}
							}
							else
							{
							    return SendClientMessage(playerid, COLOR_GREY, "Ce joueur est policer!");
							}
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté!");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"arme",true) == 0)
				{
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "USAGE: /voler arme [playerid/PartOfName]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					new name[MAX_PLAYER_NAME];
					GetPlayerName(giveplayerid, name, sizeof(name));
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if(!(PlayerInfo[giveplayerid][pMember] == 1 || PlayerInfo[giveplayerid][pMember] == 2 || PlayerInfo[giveplayerid][pMember] == 3 || PlayerInfo[giveplayerid][pLeader] == 1 || PlayerInfo[giveplayerid][pLeader] == 2 || PlayerInfo[giveplayerid][pLeader] == 3))
					        {
						        if (ProxDetectorS(3.0, playerid, giveplayerid))
								{
								    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez pas vous volez vous même!"); return 1; }
							        format(string, sizeof(string), "Vous avez volé les armes de %s.", name);
							        SendClientMessage(playerid, COLOR_WHITE, string);
							        format(string, sizeof(string), "%s à volé vos armes.", sendername);
							        SendClientMessage(giveplayerid, COLOR_WHITE, string);
							        SafeResetPlayerWeapons(giveplayerid);
							        PlayerInfo[giveplayerid][pGun1] = 0; PlayerInfo[giveplayerid][pAmmo1] = 0;
							        PlayerInfo[giveplayerid][pGun2] = 0; PlayerInfo[giveplayerid][pAmmo2] = 0;
							        PlayerInfo[giveplayerid][pGun3] = 0; PlayerInfo[giveplayerid][pAmmo3] = 0;
							        PlayerInfo[giveplayerid][pGun4] = 0; PlayerInfo[giveplayerid][pAmmo4] = 0;
						        }
						        else
								{
								    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas près de vous!");
								    return 1;
								}
							}
							else
							{
							    return SendClientMessage(playerid, COLOR_GREY, "Ce joueur est policer!");
							}
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté!");
					    return 1;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Nom Inconnu!");
					return 1;
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas dans une Faction");
	            return 1;
	        }
	    }
	    return 1;
	}
	if(strcmp(cmd, "/volerorgane", true) == 0)
	{
		if(PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pLeader] == 4)
		{
		    new name[MAX_PLAYER_NAME];
    		GetPlayerName(playerid, name, sizeof(name));
		    tmp = strtok(cmdtext, idx);
		    if(!strlen(tmp))
	        {
	            SendClientMessage(playerid, COLOR_WHITE, "Note: /volerorgane [playerid/PartOfName]");
	            return 1;
	        }
	        giveplayerid = ReturnUser(tmp);
	        if(rein[giveplayerid] == 1)
	        {
	            return SendClientMessage(playerid, COLOR_RED,"Ce joueur a déjà un rein en moin.");
	        }
			if(GetDistanceBetweenPlayers(playerid,giveplayerid) < 5)
			{
				SendClientMessage(giveplayerid,COLOR_LIGHTRED,"Quelqu'un vous fait une entaille, entre sa main, et en sort un rein");
				SendClientMessage(playerid,COLOR_WHITE,"Vous ecorchez l'individu, entrez votre main et en sortez un rein");
				format(string, sizeof(string), " %s vole un rein à un individu", name);
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				printf("%s", string)
				SetPlayerHealth(giveplayerid,1);
				SetPlayerDrunkLevel(giveplayerid,15000);
				rein[giveplayerid] = 1;
				Organe ++;
				return 1;
			}
		}
		else
		{
		    SendClientMessage(playerid,COLOR_RED,"Seul les médecins peuvent faire ceci");
		}
		return 1;
	}

	if(strcmp(cmd, "/vendreorgane", true) == 0)
	{
		if(PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pLeader] == 4)
		{
		    new name[MAX_PLAYER_NAME];
    		GetPlayerName(playerid, name, sizeof(name));
		    tmp = strtok(cmdtext, idx);
		    if(!strlen(tmp))
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Note: /volerorgane [playerid/PartOfName] [prix]");
	            return 1;
	        }
	        giveplayerid = ReturnUser(tmp);
	        new givename[MAX_PLAYER_NAME];
			GetPlayerName(giveplayerid, givename, sizeof(givename));
	        if(rein[giveplayerid] == 0)
	        {
	            return SendClientMessage(playerid, COLOR_RED,"Ce joueur n'a pas besoin d'un rein");
	        }
	        if(Organe <= 0)
	        {
				return SendClientMessage(playerid, COLOR_RED,"Il n'y a pas assez de reins dans le stock");
	        }
	        if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    tmp = strtok(cmdtext, idx);
					    if(!strlen(tmp))
					    {
					        SendClientMessage(playerid, COLOR_GREY, "Note: /vendreorgane [playerid/PartOfName] [prix]");
	            			return 1;
					    }
					    moneys = strval(tmp);
						if(moneys < 1 || moneys > 2000)
						{
							SendClientMessage(playerid, COLOR_GREY, "Le prix de l'organe ne peut pas etre de plus de 2000 dollars!");
							return 1;
						}
						format(string, sizeof(string), "Vous avez vendu un organe à %s pour $%d", givename, moneys);
						SendClientMessage(playerid, COLOR_WHITE, string);
						format(string, sizeof(string), "Le docteur %s vous vend un organe, pour $%d", name, moneys);
						SendClientMessage(giveplayerid, COLOR_WHITE, string);
						SendClientMessage(giveplayerid, COLOR_BLUE, "Tapez /accepter organe, pour accepter.");
						OrganeOffer[giveplayerid] = playerid;
						OrganeMoney[giveplayerid] = moneys;
						return 1;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas près de vous!");
						return 1;
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté!");
			    return 1;
			}
		}
		else
		{
		    SendClientMessage(playerid,COLOR_RED,"Seul les infirmiers peuvent faire ceci");
		}
		return 1;
	}

	if(strcmp(cmd,"/vendrematos",true)==0) // By LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pJob] != 22)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas dealer d'arme! ");
	            return 1;
	        }
	        tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp))
	        {
	            SendClientMessage(playerid, COLOR_WHITE, "Note: /vendrematos [playerid/PartOfName] [montant]");
	            return 1;
	        }
	        giveplayerid = ReturnUser(tmp);
	        if(IsPlayerConnected(giveplayerid))
	        {
	            if(giveplayerid != INVALID_PLAYER_ID)
	            {
					if(ProxDetectorS(5.0, playerid, giveplayerid))
					{
					    tmp = strtok(cmdtext, idx);
					    if(!strlen(tmp))
					    {
					        SendClientMessage(playerid, COLOR_WHITE, "Note: /vendrematos [playerid/PartOfName] [montant]");
	            			return 1;
					    }
					    new ammount = strval(tmp);
					    if(ammount < 1) { SendClientMessage(playerid, COLOR_GREY, "Mauvais montant! "); return 1; }
					    if(ammount > PlayerInfo[playerid][pMats]) { SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas assez de matériels a vendre!"); return 1; }
					    PlayerInfo[playerid][pMats] -= ammount;
					    PlayerInfo[giveplayerid][pMats] += ammount;
						GetPlayerName(playerid, sendername, sizeof(sendername));
						GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						format(string, sizeof(string), " %s donne un sac de matos à %s", sendername, giveplayer);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas près de vous! ");
					    return 1;
					}
	            }
	        }
	    }
	    return 1;
	}
    if(strcmp(cmd,"/sellgun",true) == 0 || strcmp(cmd,"/vendrearme",true) == 0)
    {
        if(IsPlayerConnected(playerid))
	    {
		    if (PlayerInfo[playerid][pJob] != 9)
			{
			    SendClientMessage(playerid,COLOR_GREY,"  Vous n'êtes pas Trafiquant D'armes !");
			    return 1;
			}
			new x_weapon[256],weapon[MAX_PLAYERS],ammo[MAX_PLAYERS],price[MAX_PLAYERS];
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "UTILISATION: /sellgun [playerid/PartOfName] [weaponname]");
				SendClientMessage(playerid, COLOR_GREY, "Weapons: flowers(25) club (25) batte (25) cue (25) katana (50) knife (50) sdpistol(100) ");
				SendClientMessage(playerid, COLOR_GREY, "Weapons: shotgun(150) mp5(300) rifle(800) eagle(1200) ak47(1700) m4(1800) sniper (2500)");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if (IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
					x_weapon = strtok(cmdtext, idx);
					if(!strlen(x_weapon))
					{
						SendClientMessage(playerid, COLOR_GREEN, "________________________________________________");
						SendClientMessage(playerid, COLOR_WHITE, "** Sell Guns **");
						SendClientMessage(playerid, COLOR_GREY, "UTILISATION: /sellgun [playerid/PartOfName] [weaponname]");
						SendClientMessage(playerid, COLOR_GREY, "Weapons: flowers(25) club (25) batte (25) cue (25) katana (50) knife (50) sdpistol(100) ");
						SendClientMessage(playerid, COLOR_GREY, "Weapons: shotgun(150) mp5(300) rifle(800) eagle(1200) ak47(1700) m4(1800) sniper (2500)");
						SendClientMessage(playerid, COLOR_GREEN, "________________________________________________");
						return 1;
					}
				}
				if(strcmp(x_weapon,"knife",true) == 0) { if(PlayerInfo[playerid][pMats] > 49) { weapon[playerid] = 4; price[playerid] = 50; ammo[playerid] = 1; PlayerInfo[giveplayerid][pGun1] = 4; PlayerInfo[giveplayerid][pAmmo1] = 1; } else { SendClientMessage(playerid,COLOR_GREY,"   Pas assez de matériaux pour cette arme!"); return 1; } }
				else if(strcmp(x_weapon,"club",true) == 0) { if(PlayerInfo[playerid][pMats] > 24) { weapon[playerid] = 3; price[playerid] = 25; ammo[playerid] = 1; PlayerInfo[giveplayerid][pGun1] = 3; PlayerInfo[giveplayerid][pAmmo1] = 1; } else { SendClientMessage(playerid,COLOR_GREY,"   Pas assez de matériaux pour cette arme!"); return 1; } }
				else if(strcmp(x_weapon,"batte",true) == 0) { if(PlayerInfo[playerid][pMats] > 24) { weapon[playerid] = 5; price[playerid] = 25; ammo[playerid] = 1; PlayerInfo[giveplayerid][pGun1] = 5; PlayerInfo[giveplayerid][pAmmo1] = 1; } else { SendClientMessage(playerid,COLOR_GREY,"   Pas assez de matériaux pour cette arme!"); return 1; } }
				else if(strcmp(x_weapon,"cue",true) == 0) { if(PlayerInfo[playerid][pMats] > 24) { weapon[playerid] = 7; price[playerid] = 25; ammo[playerid] = 1; PlayerInfo[giveplayerid][pGun1] = 7; PlayerInfo[giveplayerid][pAmmo1] = 1; } else { SendClientMessage(playerid,COLOR_GREY,"   Pas assez de matériaux pour cette arme!"); return 1; } }
				else if(strcmp(x_weapon,"katana",true) == 0) { if(PlayerInfo[playerid][pMats] > 49) { weapon[playerid] = 8; price[playerid] = 50; ammo[playerid] = 1; PlayerInfo[giveplayerid][pGun1] = 8; PlayerInfo[giveplayerid][pAmmo1] = 1; } else { SendClientMessage(playerid,COLOR_GREY,"   Pas assez de matériaux pour cette arme!"); return 1; } }
				else if(strcmp(x_weapon,"sdpistol",true) == 0) { if(PlayerInfo[playerid][pMats] > 99) { weapon[playerid] = 23; price[playerid] = 100; ammo[playerid] = 11000; PlayerInfo[giveplayerid][pGun2] = 23; PlayerInfo[giveplayerid][pAmmo2] = 99999; } else { SendClientMessage(playerid,COLOR_GREY,"   Pas assez de matériaux pour cette arme!"); return 1; } }
				else if(strcmp(x_weapon,"flowers",true) == 0) { if(PlayerInfo[playerid][pMats] > 24) { weapon[playerid] = 14; price[playerid] = 25; ammo[playerid] = 1; PlayerInfo[giveplayerid][pGun1] = 14; PlayerInfo[giveplayerid][pAmmo1] = 1; } else { SendClientMessage(playerid,COLOR_GREY,"   Pas assez de matériaux pour cette arme!"); return 1; } }
				else if(strcmp(x_weapon,"eagle",true) == 0) { if(PlayerInfo[playerid][pMats] > 1199) { weapon[playerid] = 24; price[playerid] = 1200; ammo[playerid] = 11000; PlayerInfo[giveplayerid][pGun2] = 24; PlayerInfo[giveplayerid][pAmmo2] = 99999; } else { SendClientMessage(playerid,COLOR_GREY,"   Pas assez de matériaux pour cette arme!"); return 1; } }
				else if(strcmp(x_weapon,"mp5",true) == 0) {	if(PlayerInfo[playerid][pMats] > 299) { weapon[playerid] = 29; price[playerid] = 300; ammo[playerid] = 11000; PlayerInfo[giveplayerid][pGun2] = 29; PlayerInfo[giveplayerid][pAmmo2] = 99999; } else { SendClientMessage(playerid,COLOR_GREY,"   Pas assez de matériaux pour cette arme!"); return 1; } }
				else if(strcmp(x_weapon,"shotgun",true) == 0) {	if(PlayerInfo[playerid][pMats] > 149) { weapon[playerid] = 25; price[playerid] = 150; ammo[playerid] = 11000; PlayerInfo[giveplayerid][pGun2] = 25; PlayerInfo[giveplayerid][pAmmo2] = 99999; } else { SendClientMessage(playerid,COLOR_GREY,"   Pas assez de matériaux pour cette arme!"); return 1; } }
				//else if(strcmp(x_weapon,"spas12",true) == 0) { if(PlayerInfo[playerid][pMats] > 599) { weapon[playerid] = 27; price[playerid] = 600; ammo[playerid] = 50; PlayerInfo[giveplayerid][pGun2] = 27; PlayerInfo[giveplayerid][pAmmo2] = 50; } else { SendClientMessage(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!"); return 1; } }
				else if(strcmp(x_weapon,"ak47",true) == 0) { if(PlayerInfo[playerid][pMats] > 1699) { weapon[playerid] = 30; price[playerid] = 1700; ammo[playerid] = 11000; PlayerInfo[giveplayerid][pGun2] = 30; PlayerInfo[giveplayerid][pAmmo2] = 99999; } else { SendClientMessage(playerid,COLOR_GREY,"   Pas assez de matériaux pour cette arme!"); return 1; } }
				else if(strcmp(x_weapon,"m4",true) == 0) { if(PlayerInfo[playerid][pMats] > 1799) { weapon[playerid] = 31; price[playerid] = 1800; ammo[playerid] = 11000; PlayerInfo[giveplayerid][pGun2] = 31; PlayerInfo[giveplayerid][pAmmo2] = 99999; } else { SendClientMessage(playerid,COLOR_GREY,"   Pas assez de matériaux pour cette arme!"); return 1; } }
				else if(strcmp(x_weapon,"sniper",true) == 0) { if(PlayerInfo[playerid][pMats] > 2499) { weapon[playerid] = 34; price[playerid] = 2500; ammo[playerid] = 11000; PlayerInfo[giveplayerid][pGun2] = 34; PlayerInfo[giveplayerid][pAmmo2] = 99999; } else { SendClientMessage(playerid,COLOR_GREY,"   Pas assez de matériaux pour cette arme!"); return 1; } }
				else if(strcmp(x_weapon,"rifle",true) == 0) { if(PlayerInfo[playerid][pMats] > 799) { weapon[playerid] = 33; price[playerid] = 800; ammo[playerid] = 11000; PlayerInfo[giveplayerid][pGun2] = 33; PlayerInfo[giveplayerid][pAmmo2] = 99999; } else { SendClientMessage(playerid,COLOR_GREY,"   Pas assez de matériaux pour cette arme!"); return 1; } }
		    	else { SendClientMessage(playerid,COLOR_GREY,"   Nom de l'arme incorrect !"); return 1; }
				if (ProxDetectorS(5.0, playerid, giveplayerid))
				{
        			/*if(giveplayerid == playerid)
					{
						SendClientMessage(playerid, COLOR_GRAD1, "   You can not sell Guns to yourself!");
						return 1;
					}*/
					if(PlayerInfo[playerid][pMiserPerk] > 0)
					{
					    new skill = 2 * PlayerInfo[playerid][pMiserPerk];
					    new mats = price[playerid] / 100;
					    price[playerid] -= (mats)*(skill);
					}
					//ConsumingMoney[playerid] = 1;
					GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "   Vous avez vendu à %s, un(e) %s avec %d munition(s). Pour %d Matériaux.", giveplayer,x_weapon, ammo[playerid], price[playerid]);
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, COLOR_GRAD1, string);
					format(string, sizeof(string), "   Vous avez reçu un %s avec %d munitions par %s.", x_weapon, ammo[playerid], sendername);
					SendClientMessage(giveplayerid, COLOR_GRAD1, string);
					PlayerPlaySound(giveplayerid, 1052, 0.0, 0.0, 0.0);
					format(string, sizeof(string), " %s a créée une arme à partir de ses matériaux, et la donne à %s.", sendername ,giveplayer);
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SafeGivePlayerWeapon(giveplayerid,weapon[playerid],ammo[playerid]);
					PlayerInfo[playerid][pMats] -= price[playerid];
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD1, "   Vous êtes trop loin.");
					return 1;
				}
			}
			else
			{
				format(string, sizeof(string), "   %d is not an active player.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
if(strcmp(cmd, "/prendrejob", true) == 0 || strcmp(cmd, "/renjoindre", true) == 0 || strcmp(cmd, "/prendretravail", true) == 0)
	//if(strcmp(cmd, "/prendrejob", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pJob] == 0)
			{
                if(gTeam[playerid] == 20 || gTeam[playerid] == 21 || gTeam[playerid] == 24 || gTeam[playerid] == 25)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "Vous ne devez pas être recherché pour prendre un travail!");
			        return 1;
			    }
			    else if (GetPlayerState(playerid) == 1 && PlayerToPoint(2.0, playerid,1734.8424,-1660.2156,23.7182)) // Avocat
				{
				    SendClientMessage(playerid, COLOR_WHITE, "Vous êtes sur le point de devenir un Avocat, et d'avoir un contrat de 5 heures.");
				    SendClientMessage(playerid, COLOR_WHITE, "Vous devrez d'abord terminer ce contrat, si vous voulez quitter ce travail plus tard.");
				    SendClientMessage(playerid, COLOR_WHITE, "Si vous ête sûr de vouloir devenir un Avocat, Tapez /accepter job.");
				    GettingJob[playerid] = 2;
				}
				else if (GetPlayerState(playerid) == 1 && PlayerToPoint(2.0, playerid,1734.6305,-1648.2175,23.7444)) // Detective
				{
				    SendClientMessage(playerid, COLOR_WHITE, "Vous êtes sur le point de devenir un Detective, et d'avoir un contrat de 5 heures.");
				    SendClientMessage(playerid, COLOR_WHITE, "Vous devrez d'abord terminer ce contrat, si vous voulez quitter ce travail plus tard.");
				    SendClientMessage(playerid, COLOR_WHITE, "Si vous ête sûr de vouloir devenir un Detective, Tapez /accepter job.");
				    GettingJob[playerid] = 1;
				}
				else if (GetPlayerState(playerid) == 1 && PlayerToPoint(2.0, playerid,1734.7021,-1654.0775,23.7316)) // Serveur
				{
				    SendClientMessage(playerid, COLOR_WHITE, "Vous êtes sur le point de devenir un Serveur, et d'avoir un contrat de 5 heures.");
				    SendClientMessage(playerid, COLOR_WHITE, "Vous devrez d'abord terminer ce contrat, si vous voulez quitter ce travail plus tard.");
				    SendClientMessage(playerid, COLOR_WHITE, "Si vous ête sûr de vouloir devenir un Serveur, Tapez /accepter job.");
				    GettingJob[playerid] = 6;
				}
				else if (GetPlayerState(playerid) == 1 && PlayerToPoint(2.0, playerid,1734.7467,-1642.2520,23.7528)) // Mecanicien
				{
				    SendClientMessage(playerid, COLOR_WHITE, "Vous êtes sur le point de devenir un Mecanicien, et d'avoir un contrat de 5 heures.");
				    SendClientMessage(playerid, COLOR_WHITE, "Vous devrez d'abord terminer ce contrat, si vous voulez quitter ce travail plus tard.");
				    SendClientMessage(playerid, COLOR_WHITE, "Si vous ête sûr de vouloir devenir un Mecanicien, Tapez /accepter job.");
				    GettingJob[playerid] = 7;
				}
				else if (GetPlayerState(playerid) == 1 && PlayerToPoint(2.0, playerid,1709.1626,-1649.2832,23.6953)) // Garde du Corps
				{
				    SendClientMessage(playerid, COLOR_WHITE, "Vous êtes sur le point de devenir un Garde du Corps, et d'avoir un contrat de 5 heures.");
				    SendClientMessage(playerid, COLOR_WHITE, "Vous devrez d'abord terminer ce contrat, si vous voulez quitter ce travail plus tard.");
				    SendClientMessage(playerid, COLOR_WHITE, "Si vous ête sûr de vouloir devenir un Garde du Corps, Tapez /accepter job.");
				    GettingJob[playerid] = 8;
				}
				else if (GetPlayerState(playerid) == 1 && PlayerToPoint(2.0, playerid,1708.9294,-1654.2659,23.7013)) // Boxeur
				{
				    SendClientMessage(playerid, COLOR_WHITE, "Vous êtes sur le point de devenir un Boxeur, et d'avoir un contrat de 5 heures.");
				    SendClientMessage(playerid, COLOR_WHITE, "Vous devrez d'abord terminer ce contrat, si vous voulez quitter ce travail plus tard.");
				    SendClientMessage(playerid, COLOR_WHITE, "Si vous ête sûr de vouloir devenir un Boxeur, Tapez /accepter job.");
				    GettingJob[playerid] = 12;
				}
				else if (GetPlayerState(playerid) == 1 && PlayerToPoint(2.0, playerid,1708.9745,-1659.5791,23.7025)) // Chauffeur de taxi
				{
				    SendClientMessage(playerid, COLOR_WHITE, "Vous êtes sur le point de devenir un Chauffeur de Taxi, et d'avoir un contrat de 5 heures.");
				    SendClientMessage(playerid, COLOR_WHITE, "Vous devrez d'abord terminer ce contrat, si vous voulez quitter ce travail plus tard.");
				    SendClientMessage(playerid, COLOR_WHITE, "Si vous ête sûr de vouloir devenir un Chauffeur de Taxi, Tapez /accepter job.");
				    GettingJob[playerid] = 13;
				}
				else if (GetPlayerState(playerid) == 1 && PlayerToPoint(2.0, playerid,1708.9208,-1664.9775,23.7039)) // Chauffeur de bus
				{
				    SendClientMessage(playerid, COLOR_WHITE, "Vous êtes sur le point de devenir un Chauffeur de Bus, et d'avoir un contrat de 5 heures.");
				    SendClientMessage(playerid, COLOR_WHITE, "Vous devrez d'abord terminer ce contrat, si vous voulez quitter ce travail plus tard.");
				    SendClientMessage(playerid, COLOR_WHITE, "Si vous ête sûr de vouloir devenir un Chauffeur de Bus, Tapez /accepter job.");
				    GettingJob[playerid] = 14;
				}
				else if (GetPlayerState(playerid) == 1 && PlayerToPoint(2.0, playerid,1708.7050,-1670.1184,23.7056)) // Livreur de Journaux
				{
				    SendClientMessage(playerid, COLOR_WHITE, "Vous êtes sur le point de devenir un Livreur de Journaux, et d'avoir un contrat de 5 heures.");
				    SendClientMessage(playerid, COLOR_WHITE, "Vous devrez d'abord terminer ce contrat, si vous voulez quitter ce travail plus tard.");
				    SendClientMessage(playerid, COLOR_WHITE, "Si vous ête sûr de vouloir devenir un Livreur de Journaux, Tapez /accepter job.");
				    GettingJob[playerid] = 15;
				}
				else if (GetPlayerState(playerid) == 1 && PlayerToPoint(2.0, playerid,1709.0852,-1670.3469,27.1953)) // Livreur de Pizza
				{
				    SendClientMessage(playerid, COLOR_WHITE, "Vous êtes sur le point de devenir un Livreur de Pizza, et d'avoir un contrat de 5 heures.");
				    SendClientMessage(playerid, COLOR_WHITE, "Vous devrez d'abord terminer ce contrat, si vous voulez quitter ce travail plus tard.");
				    SendClientMessage(playerid, COLOR_WHITE, "Si vous ête sûr de vouloir devenir un Livreur de Pizza, Tapez /accepter job.");
				    GettingJob[playerid] = 17;
				}
				else if (GetPlayerState(playerid) == 1 && PlayerToPoint(2.0, playerid,1708.9612,-1664.8158,27.1953)) // Fermier
				{
				    SendClientMessage(playerid, COLOR_WHITE, "Vous êtes sur le point de devenir un Fermier, et d'avoir un contrat de 5 heures.");
				    SendClientMessage(playerid, COLOR_WHITE, "Vous devrez d'abord terminer ce contrat, si vous voulez quitter ce travail plus tard.");
				    SendClientMessage(playerid, COLOR_WHITE, "Si vous ête sûr de vouloir devenir un Fermier, Tapez /accepter job.");
				    GettingJob[playerid] = 18;
				}
				else if (GetPlayerState(playerid) == 1 && PlayerToPoint(2.0, playerid,1708.9418,-1659.8331,27.1953)) // Balayeur de Rue
				{
				    SendClientMessage(playerid, COLOR_WHITE, "Vous êtes sur le point de devenir un Balayeur de Rue, et d'avoir un contrat de 5 heures.");
				    SendClientMessage(playerid, COLOR_WHITE, "Vous devrez d'abord terminer ce contrat, si vous voulez quitter ce travail plus tard.");
				    SendClientMessage(playerid, COLOR_WHITE, "Si vous ête sûr de vouloir devenir un Balayeur de Rue, Tapez /accepter job.");
				    GettingJob[playerid] = 21;
				}
				else if (GetPlayerState(playerid) == 1 && PlayerToPoint(2.0, playerid,1708.9545,-1654.4998,27.1953)) // Eboueur
				{
				    SendClientMessage(playerid, COLOR_WHITE, "Vous êtes sur le point de devenir un Eboueur, et d'avoir un contrat de 5 heures.");
				    SendClientMessage(playerid, COLOR_WHITE, "Vous devrez d'abord terminer ce contrat, si vous voulez quitter ce travail plus tard.");
				    SendClientMessage(playerid, COLOR_WHITE, "Si vous ête sûr de vouloir devenir un Eboueur, Tapez /accepter job.");
				    GettingJob[playerid] = 25;
				}
				else if (GetPlayerState(playerid) == 1 && PlayerToPoint(2.0, playerid,1709.1194,-1649.3915,27.1953)) // Ouvrier
				{
				    SendClientMessage(playerid, COLOR_WHITE, "Vous êtes sur le point de devenir un Ouvrier, et d'avoir un contrat de 5 heures.");
				    SendClientMessage(playerid, COLOR_WHITE, "Vous devrez d'abord terminer ce contrat, si vous voulez quitter ce travail plus tard.");
				    SendClientMessage(playerid, COLOR_WHITE, "Si vous ête sûr de vouloir devenir un Ouvrier, Tapez /accepter job.");
				    GettingJob[playerid] = 26;
				}
				else if (GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,2268.6116,1388.8862,42.8203)) // faussaire
				{
				    SendClientMessage(playerid, COLOR_WHITE, "Vous êtes sur le point de devenir un Faussaire, et d'avoir un contrat de 5 heures.");
				    SendClientMessage(playerid, COLOR_WHITE, "Vous devrez d'abord terminer ce contrat, si vous voulez quitter ce travail plus tard.");
				    SendClientMessage(playerid, COLOR_WHITE, "Si vous ête sûr de vouloir devenir un Faussaire, Tapez /accepter job.");
				    GettingJob[playerid] = 24;
				}
				else if (GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,1215.1304,-11.8431,1000.9219)) // prostituée
				{
				    SendClientMessage(playerid, COLOR_WHITE, "Vous êtes sur le point de devenir une postituée, et d'avoir un contrat de 5 heures.");
				    SendClientMessage(playerid, COLOR_WHITE, "Vous devrez d'abord terminer ce contrat, si vous voulez quitter ce travail plus tard.");
				    SendClientMessage(playerid, COLOR_WHITE, "Si vous ête sure de vouloir devenir une prostituée, Tapez /accepter job.");
				    GettingJob[playerid] = 3;
				}
				else if (GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,1856.3259,2368.5259,10.9799)) // dealer de drogue
				{
				    SendClientMessage(playerid, COLOR_WHITE, "Vous êtes sur le point de devenir dealer de drogue, et d'avoir un contrat de 5 heures.");
				    SendClientMessage(playerid, COLOR_WHITE, "Vous devrez d'abord terminer ce contrat, si vous voulez quitter ce travail plus tard.");
				    SendClientMessage(playerid, COLOR_WHITE, "Si vous ête sure de vouloir devenir dealer de drogue, Tapez /accepter job.");
				    GettingJob[playerid] = 4;
				}
				else if (GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,2566.3870,2252.6050,2.189)) // voleur de voiture
				{
				    SendClientMessage(playerid, COLOR_WHITE, " Tu veux être un Voleur de Voiture et avoir un contrat de 5 heures.");
				    SendClientMessage(playerid, COLOR_WHITE, " Tu dois finir le contrat en premier, si plus tard tu veux quitter ce job.");
				    SendClientMessage(playerid, COLOR_WHITE, " Si tu es sûr de vouloir être un Voleur de Voiture, tape /accepter job.");
				    GettingJob[playerid] = 10;
				}
		  		else if (GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,2826.6938,1632.9011,10.8203)) // contrebandier d'arme
		  		{
		  		    SendClientMessage(playerid, COLOR_WHITE, "Vous êtes sur le point de devenir contrebandier d'arme, et d'avoir un contrat de 5 heures.");
				    SendClientMessage(playerid, COLOR_WHITE, "Vous devrez d'abord terminer ce contrat, si vous voulez quitter ce travail plus tard.");
				    SendClientMessage(playerid, COLOR_WHITE, "Si vous ête sure de vouloir devenir contrebandier d'arme, Tapez /accepter job.");
				    GettingJob[playerid] = 22;
		  		}
				else if (GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,2849.3208,1246.0183,11.3906)) // contrebandier de drogue
				{
				   	SendClientMessage(playerid, COLOR_WHITE, "Vous êtes sur le point de devenir contrebandier de drogue, et d'avoir un contrat de 5 heures.");
				   	SendClientMessage(playerid, COLOR_WHITE, "Vous devrez d'abord terminer ce contrat, si vous voulez quitter ce travail plus tard.");
				   	SendClientMessage(playerid, COLOR_WHITE, "Si vous ête sure de vouloir devenir contrebandier de drogue, Tapez /accepter job.");
				   	GettingJob[playerid] = 20;
				}
   				else if (GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,-86.1251,2.6412,3.1172)) // cultivateur de drogue
				{
				   	SendClientMessage(playerid, COLOR_WHITE, "Vous êtes sur le point de devenir Cultivateur de drogue, et d'avoir un contrat de 5 heures.");
				   	SendClientMessage(playerid, COLOR_WHITE, "Vous devrez d'abord terminer ce contrat, si vous voulez quitter ce travail plus tard.");
				   	SendClientMessage(playerid, COLOR_WHITE, "Si vous ête sure de vouloir devenir Cultivateur de drogue, Tapez /accepter job.");
				   	GettingJob[playerid] = 19;
				}
				else if (GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,2493.2258,1874.6377,10.8203)) // fabricant d'arme
				{
				   	SendClientMessage(playerid, COLOR_WHITE, "Vous êtes sur le point de devenir Fabricant d'armes, et d'avoir un contrat de 5 heures.");
				   	SendClientMessage(playerid, COLOR_WHITE, "Vous devrez d'abord terminer ce contrat, si vous voulez quitter ce travail plus tard.");
				   	SendClientMessage(playerid, COLOR_WHITE, "Si vous ête sure de vouloir devenir Fabricant d'armes, Tapez /accepter job.");
				   	GettingJob[playerid] = 23;
				}
				else if (GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,1734.6354,-1660.2012,27.2164)) // Conducteur de Train
				{
				   	SendClientMessage(playerid, COLOR_WHITE, "Vous êtes sur le point de devenir Conducteur de Train, et d'avoir un contrat de 5 heures.");
				   	SendClientMessage(playerid, COLOR_WHITE, "Vous devrez d'abord terminer ce contrat, si vous voulez quitter ce travail plus tard.");
				   	SendClientMessage(playerid, COLOR_WHITE, "Si vous ête sure de vouloir devenir Conducteur de Train, Tapez /accepter job.");
				   	GettingJob[playerid] = 27;
				}
				else if (GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,1734.4001,-1654.1403,27.2271)) // Pilote de Ligne
				{
				   	SendClientMessage(playerid, COLOR_WHITE, "Vous êtes sur le point de devenir Pilote de Ligne, et d'avoir un contrat de 5 heures.");
				   	SendClientMessage(playerid, COLOR_WHITE, "Vous devrez d'abord terminer ce contrat, si vous voulez quitter ce travail plus tard.");
				   	SendClientMessage(playerid, COLOR_WHITE, "Si vous ête sure de vouloir devenir Pilote de Ligne, Tapez /accepter job.");
				   	GettingJob[playerid] = 28;
				}
		  		else
		  		{
		  		    SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas près d'une place d'embauche!");
		  		}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Vous avez déjà un travail, utilisez /quitterjob avant!");
			}
		}//not connected
	    return 1;
	}
	//if(strcmp(cmd, "/remplir", true) == 0)
    if(strcmp(cmd, "/fill", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(IsAtGasStation(playerid))
			{
			    if(Gas[idcar] <= 99)
			    {
			    	TogglePlayerControllable(playerid, 0);
			    	GameTextForPlayer(playerid,"~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~Le plein se fait, veuillez patienter",2000,3);
					SetTimer("Fillup",RefuelWait,0);
					Refueling[playerid] = 1;
					desactivetext[playerid] = 1;
					SetTimerEx("DesactiverSpeedo", 5000, 0, "i", playerid);
				}
				else
				{
				    GameTextForPlayer(playerid,"~r~~n~~n~~n~~n~~n~~n~~n~~n~~n~Le plein est fait",2000,3);
				    desactivetext[playerid] = 1;
					SetTimerEx("DesactiverSpeedo", 5000, 0, "i", playerid);
				}
			}
			else
			{
				SendClientMessage(playerid,COLOR_GREY,"Vous n'êtes pas à la station essence!");
			}
		}
    	return 1;
	}
    if(strcmp(cmd, "/remplirvoiture", true) == 0 || strcmp(cmd, "/jerrican", true) == 0 || strcmp(cmd, "/essencecar", true) == 0)
	//if(strcmp(cmd, "/remplircar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(PlayerInfo[playerid][pFuel] > 0)
		    {
		        if(Gas[gLastCar[playerid]] < 81)
		        {
			        SendClientMessage(playerid, COLOR_WHITE, "Vous avez remplis votre reservoir avec votre bidon.");
			        Gas[gLastCar[playerid]] += 20;
			        PlayerInfo[playerid][pFuel] = 0;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Votre véhicule à assez d'essence dans son réservoir pour roulé encore quelque KM!");
				}
		    }
		    else
		    {
		        SendClientMessage(playerid, COLOR_GREY, "Vous n'avez plus assez d'essence dans votre bidon !");
		        SendClientMessage(playerid, COLOR_GREY, "Faites /get essence a une sation essence pour le remplir.");
		    }
		}
		return 1;
	}
	if(strcmp(cmd,"/get",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
			new x_job[256];
			x_job = strtok(cmdtext, idx);

			if(!strlen(x_job)) {
				SendClientMessage(playerid, COLOR_WHITE, "|__________________ Obtenir __________________|");
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /get [Nom]");
		  		SendClientMessage(playerid, COLOR_GREY, "Noms Valibles: Essence, Drugs");
				SendClientMessage(playerid, COLOR_GREEN, "|_________________________________________|");
				return 1;
			}

			if(strcmp(x_job,"Drugs",true) == 0 || strcmp(x_job,"Drogue",true) == 0 || strcmp(x_job,"Drogues",true) == 0)
			{
		        if(PlayerInfo[playerid][pDrugs] > 6)
		        {
		            format(string, sizeof(string), "Vous avez %d grammes sur vous, vendez-les !", PlayerInfo[playerid][pDrugs]);
					SendClientMessage(playerid, COLOR_GREY, string);
		            return 1;
		        }
		        new tel;
			    new price;
			    new ammount;
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "UTTILISATION: /get drogues [montant]");
					return 1;
				}
				new level = PlayerInfo[playerid][pDrugsSkill];
				ammount = strval(tmp);
				if(level >= 0 && level <= 50)
				{ tel = 200; if(ammount < 1 || ammount > 6) { SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez prendre que 1 à 6 grammes de drogue."); return 1; } }
				else if(level >= 51 && level <= 100)
				{ tel = 150; if(ammount < 1 || ammount > 12) { SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez prendre que 1 à 12 grammes de drogue."); return 1; } }
				else if(level >= 101 && level <= 200)
				{ tel = 100; if(ammount < 1 || ammount > 20) { SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez prendre que 1 à 20 grammes de drogue."); return 1; } }
				else if(level >= 201 && level <= 400)
				{ tel = 50; if(ammount < 1 || ammount > 30) { SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez prendre que 1 à 30 grammes de drogue."); return 1; } }
				else if(level >= 401)
				{ tel = 10; if(ammount < 1 || ammount > 99) { SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez prendre que 1 à 99 grammes de drogue."); return 1; } }
			    if (PlayerInfo[playerid][pJob] == 4 && PlayerToPoint(4.0, playerid, 1489.0118,-1720.1245,8.2369))
				{
				    price = ammount * tel;
				    if(GetPlayerMoney(playerid) > price)
				    {
				        format(string, sizeof(string), "Vous achetez %d grammes pour $%d", ammount, price);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				        SafeGivePlayerMoney(playerid, -price);
						PlayerInfo[playerid][pDrugs] = ammount;
				    }
				    else
				    {
				        SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas assez d'argent !");
				        return 1;
				    }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez pas! (Pas dealer ou pas au bonne endroit)");
				    return 1;
				}
			}
			if(strcmp(x_job,"essence",true) == 0)
			{
			    if(IsAtGasStation(playerid))
				{
				    new price = 100;
				    format(string, sizeof(string), " Vous avez rempli votre jerrican avec 20% d'essence pour $%d",price);
				    SendClientMessage(playerid, COLOR_WHITE, string);
				    format(string, sizeof(string), " Utilisez votre en faisant /jerrican",price);
				    SendClientMessage(playerid, COLOR_WHITE, string);
				    PlayerInfo[playerid][pFuel] = 20;
					SafeGivePlayerMoney(playerid, - price);
					return 1;
				}
				else
				{
					SendClientMessage(playerid,COLOR_GREY,"Vous n'êtes pas à la station service !");
					return 1;
				}
			}
			else { return 1; }
		}//not connected
		return 1;
	}
	if(strcmp(cmd, "/tazer", true) ==0 || strcmp(cmd, "/ta", true) ==0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
			if(gTeam[playerid] == 2  || IsACop(playerid))
			{
				if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2)
			    if(IsPlayerInAnyVehicle(playerid))
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Vous ne pouvez pas visé a travers une voiture!");
			        return 1;
			    }
			    new suspect = GetClosestPlayer(playerid);
			    if(IsPlayerConnected(suspect))
				{
				    if(PlayerCuffed[suspect] > 0)
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   Joueur déjà menotté!");
				        return 1;
				    }
				    if(GetDistanceBetweenPlayers(playerid,suspect) < 5)
					{
					    if(gTeam[suspect] == 2)
					    {
					        SendClientMessage(playerid, COLOR_GREY, "   Vous pouvez pas tazer un coéquipier !");
					        return 1;
					    }
					    if(IsPlayerInAnyVehicle(suspect))
					    {
					        SendClientMessage(playerid, COLOR_GREY, "   Suspect embarqué !");
					        return 1;
					    }
					    GetPlayerName(suspect, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new randt = random(4)+1;
						if(randt == 1)
						{
						    format(string, sizeof(string), "%s sort son tazer et taze %s , mais rate.", sendername ,giveplayer);
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						}
						else
						{
							format(string, sizeof(string), " Vous avez été Tazé par un Officier pendant 8 secondes.");
							SendClientMessage(suspect, COLOR_WHITE, string);
							format(string, sizeof(string), " Vous Tazer le suspect pour 8 secondes.");
							SendClientMessage(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), " %s sort son tazer et taze %s.", sendername ,giveplayer);
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							GameTextForPlayer(suspect, "~r~Tazer", 2500, 3);
							TogglePlayerControllable(suspect, 0);
							LoopingAnim(suspect, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
							PlayerCuffed[suspect] = 1;
							PlayerCuffedTime[suspect] = 8;
						}
		            }
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Personne à tazer!");
					    return 1;
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas un Policier / FBI!");
			}
		}//not connected
	    return 1;
	}

		if(strcmp(cmd,"/demanderaide",true)==0 || strcmp(cmd,"/bk",true)==0)
	{
		if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
			{
				if (PlayerInfo[playerid][pRequestingBackup] != 1)
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "HQ: %s demande à toutes les unitées un renfort d'urgence et immédiat (marquer en rouge).", sendername);
					PlayerInfo[playerid][pRequestingBackup] = 1;
					for(new i = 0; i < MAX_PLAYERS; i++)
					{
						if(IsPlayerConnected(i))
						{
							if(PlayerInfo[i][pMember] == 1 || PlayerInfo[i][pLeader] == 1 || PlayerInfo[i][pMember] == 2 || PlayerInfo[i][pLeader] == 2 || PlayerInfo[i][pMember] == 3 || PlayerInfo[i][pLeader] == 3)
							{
								SetPlayerMarkerForPlayer(i, playerid, 0xFF0000FF);
								SendClientMessage(i, TEAM_BLUE_COLOR, string);
							}
						}
					}
					SendClientMessage(playerid, TEAM_BLUE_COLOR, "Faites /bc pour enlever votre demande de renfort.");
					SetTimerEx("BackupClear", 180000, false, "ii", playerid, 1);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Vous demandez deja des renforts!");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas un policier!");
			}
		}
		return 1;
	}
	if(strcmp(cmd,"/arreterdemanderaide",true)==0 || strcmp(cmd,"/rbk",true)==0 || strcmp(cmd,"/bc",true)==0 )
	{
		BackupClear(playerid, 0);
		return 1;
	}
	if(strcmp(cmdtext, "/barrage", true)==0 || strcmp(cmdtext, "/ba", true) ==0 || strcmp(cmd, "/rb", true) == 0)
	{
	    if (PlayerInfo[playerid][pRank] < 3)
		{
			SendClientMessage(playerid, COLOR_GREY, "Vous devez être au moins rang 3");
			return 1;
		}
		if (PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1 ||PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2)
		{
			if (PlayerInfo[playerid][pRoadblock] != 0) return SendClientMessage(playerid, COLOR_GREY, "Vous pouvez installé seulement 1 barrage a la fois, utilisez /rrb pour l'enlever.");
			if (roadblocktimer != 0) return SendClientMessage(playerid, COLOR_GREY, "Attendez avant d'en remettre un.");
			new Float:X, Float:Y, Float:Z, Float:A;
			GetPlayerPos(playerid, X, Y, Z);
			GetPlayerFacingAngle(playerid, A);
			PlayerInfo[playerid][pRoadblock] = CreateObject(981, X, Y, Z, 0.0, 0.0, A+180);
			SetPlayerPos(playerid, X, Y, Z+4);
			GameTextForPlayer(playerid, "~w~Barrage Routier ~r~Place", 5000, 5);
			SendClientMessage(playerid, COLOR_GREEN, "Le barrage routier a été placé avec succès. Tapez /eb pour le suprimer.");
			roadblocktimer = 1;
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "QG: Un barrage routier a été placé par %s, il a été marqué sur le radar par un checkpoint.", sendername);
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(PlayerInfo[i][pMember] == 1 || PlayerInfo[i][pLeader] == 1 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2)
					{
						SetPlayerCheckpoint(playerid, X, Y, Z-10, 1.0);
						SendClientMessage(i, TEAM_BLUE_COLOR, string);
						if (PlayerInfo[i][pRank] >= 5 && PlayerInfo[i][pMember] == 1 || PlayerInfo[i][pLeader] == 1 ||PlayerInfo[i][pRank] >= 5 && PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2)
						{
							SendClientMessage(i, COLOR_YELLOW, "Vous pouvez enlevé tous les barrages en utilisant /ebtous");
						}
					}
				}
			}
			SetTimer("ResetRoadblockTimer", 60000, false);
		}
		return 1;
	}
	if(strcmp(cmd, "/agent", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pMember]== 18 || PlayerInfo[playerid][pLeader]== 18)
	        {
				new x_nr[256];
				x_nr = strtok(cmdtext, idx);
 				if(!strlen(x_nr))
				{
				    SendClientMessage (playerid, COLOR_WHITE, "USAGE: /agent liste /agent [idskin]");
				    return 1;
				}
				if (PlayerToPoint(20, playerid, 246.5625,120.3976,1003.2629))
				{
				    if(strcmp(x_nr,"list",true) == 0)
				    {
						SendClientMessage(playerid, COLOR_YELLOW, "______________Skin_List______________");
						SendClientMessage(playerid, COLOR_GRAD1, "1: Agent A1         2: Agent A2");
      					SendClientMessage(playerid, COLOR_GRAD2, "3: Agent B1         4: Agent B2");
      					SendClientMessage(playerid, COLOR_GRAD3, "5: Public Agent     6: Agency Intern A");
      					SendClientMessage(playerid, COLOR_GRAD4, "7: Agency Intern B  8: Agency Intern C");
           				SendClientMessage(playerid, COLOR_GRAD5, "9: Lab Agent        10: Analyst");
             	  		SendClientMessage(playerid, COLOR_GRAD6, "11: Fem. Agent A    12: Fem. Agent B");
               			return 1;
				    }
                 	else if(strcmp(x_nr,"1",true) == 0)
                    {
	                    SetPlayerSkin(playerid, 163);
                        SendClientMessage(playerid, COLOR_GRAD2, "Vous vous êtes habillé en agent A1.");
						return 1;
					}
                 	else if(strcmp(x_nr,"2",true) == 0)
                    {
	                    SetPlayerSkin(playerid, 164);
                        SendClientMessage(playerid, COLOR_GRAD2, "Vous vous êtes habillé en agent A2.");
                        return 1;
					}
                 	else if(strcmp(x_nr,"3",true) == 0)
                    {
	                    SetPlayerSkin(playerid, 165);
                        SendClientMessage(playerid, COLOR_GRAD2, "Vous vous êtes habillé en agent B1.");
                        return 1;
					}
                 	else if(strcmp(x_nr,"4",true) == 0)
                    {
	                    SetPlayerSkin(playerid, 166);
                        SendClientMessage(playerid, COLOR_GRAD2, "Vous vous êtes habillé en agent B2.");
                        return 1;
					}
                 	else if(strcmp(x_nr,"5",true) == 0)
                    {
	                    SetPlayerSkin(playerid, 166);
                        SendClientMessage(playerid, COLOR_GRAD2, "Vous vous êtes habillé en agent agent public.");
                        return 1;
					}
                 	else if(strcmp(x_nr,"6",true) == 0)
                    {
	                    SetPlayerSkin(playerid, 187);
                        SendClientMessage(playerid, COLOR_GRAD2, "Vous vous êtes habillé en agent Interne A.");
                        return 1;
					}
                 	else if(strcmp(x_nr,"7",true) == 0)
                    {
	                    SetPlayerSkin(playerid, 17);
                        SendClientMessage(playerid, COLOR_GRAD2, "Vous vous êtes habillé en agent interne B .");
                        return 1;
					}
                 	else if(strcmp(x_nr,"8",true) == 0)
                    {
	                    SetPlayerSkin(playerid, 186);
                        SendClientMessage(playerid, COLOR_GRAD2, "Vous vous êtes habillé en agent interne C.");
                        return 1;
					}
                 	else if(strcmp(x_nr,"9",true) == 0)
                    {
	                    SetPlayerSkin(playerid, 70);
                        SendClientMessage(playerid, COLOR_GRAD2, "Vous vous êtes habillé en agent lab.");
                        return 1;
					}
                 	else if(strcmp(x_nr,"10",true) == 0)
                    {
	                    SetPlayerSkin(playerid, 57);
                        SendClientMessage(playerid, COLOR_GRAD2, "Vous vous êtes habillé en agent analiste.");
                        return 1;
					}
					else if(strcmp(x_nr,"11",true) == 0)
					{
					    SetPlayerSkin(playerid, 150);
					    SendClientMessage(playerid, COLOR_GRAD2, "Vous vous êtes habillé en agent femme A.");
					}
					else if(strcmp(x_nr,"12",true) == 0)				{
					    SetPlayerSkin(playerid, 141);
					    SendClientMessage(playerid, COLOR_GRAD2, "Vous vous êtes habillé en agent femme B.");
					}
				}
				else
                {
                   	SendClientMessage(playerid, COLOR_GRAD2, "Vous n'êtes pas au QG!");
                   	return 1;
                }
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Vous n'etes pas agent du FBI ou de la C.I.A !");
                return 1;
 			}
   		}
		return 1;
   	}
   	if(strcmp(cmd, "/couverture", true) ==0 || strcmp(cmd, "/undercover", true) == 0)
    {
    	if(IsPlayerConnected(playerid))
     	{
      		if(PlayerInfo[playerid][pMember]==1||PlayerInfo[playerid][pLeader]==1)
        	{
				if(PlayerInfo[playerid][pRank] < 3)
				{
					SendClientMessage(playerid, COLOR_GREY, "   You need to be Rank 3 or Higher for this action!");
     				return 1;
				}
				new x_nr[256];
				x_nr = strtok(cmdtext, idx);
				if(!strlen(x_nr))
				{
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /undercover liste // /undercover [id]");
					return 1;
  				}
    			if (PlayerToPoint(6, playerid,255.3,77.4,1003.6) || PlayerToPoint(6,playerid,-1616.1294,681.1594,7.1875) || PlayerInfo[playerid][pLocal] != 255)
     			{
      				if(strcmp(x_nr,"liste",true) == 0)
        			{
						SendClientMessage(playerid, COLOR_YELLOW, "_________Skin_Liste_________");
						SendClientMessage(playerid, COLOR_GRAD1, "1: Agent 2: Staff");
      					SendClientMessage(playerid, COLOR_GRAD2, "3: Gay man 4: Hustler");
      					SendClientMessage(playerid, COLOR_GRAD3, "5: Random Male 6: Swampy Hippy");
      					SendClientMessage(playerid, COLOR_GRAD4, "7: Hotel serveur (Girl) 8: Random Female");
           				SendClientMessage(playerid, COLOR_GRAD5, "9: Michelle Cannes 10: Katie Zhan");
             	  		SendClientMessage(playerid, COLOR_GRAD6, "11: Biker uniforme 0: Retour a ton ancien uniforme");
               			return 1;
               		}
                 	else if(strcmp(x_nr,"1",true) == 0)
                    {
	                    SetPlayerSkin(playerid, 165);
                        SendClientMessage(playerid, COLOR_GRAD2, "Tu t'es infiltré en Agent.");
                        return 1;
					}
		            else if(strcmp(x_nr,"2",true) == 0)
                    {
                      	SetPlayerSkin(playerid, 217);
                        SendClientMessage(playerid, COLOR_GRAD2, "Tu t'es infiltré en Staff member.");
                        return 1;
                    }
                    else if(strcmp(x_nr,"3",true) == 0)
					{
						SetPlayerSkin(playerid, 170);
						SendClientMessage(playerid, COLOR_GRAD2, "Tu t'es infiltré en Gay man.");
						return 1;
					}
                    else if(strcmp(x_nr,"4",true) == 0)
                    {
                       	SetPlayerSkin(playerid, 21);
                        SendClientMessage(playerid, COLOR_GRAD2, "Tu t'es infiltré en Hustler.");
                        return 1;
					}
					else if(strcmp(x_nr,"5",true) == 0)
					{
                       	SetPlayerSkin(playerid, 60);
                        SendClientMessage(playerid, COLOR_GRAD2, "Tu t'es infiltré en Random guy.");
                        return 1;
					}
                    else if(strcmp(x_nr,"6",true) == 0)
                    {
                       	SetPlayerSkin(playerid, 72);
                        SendClientMessage(playerid, COLOR_GRAD2, "Tu t'es infiltré en Swampy Hippy.");
                        return 1;
                    }
                    else if(strcmp(x_nr,"7",true) == 0)
                   	{
                        SetPlayerSkin(playerid, 152);
                        SendClientMessage(playerid, COLOR_GRAD2, "Tu t'es infiltré en Hotel serveur.");
                        return 1;
                    }
      				else if(strcmp(x_nr,"8",true) == 0)
				 	{
 						SetPlayerSkin(playerid, 233);
      					SendClientMessage(playerid, COLOR_GRAD2, "Tu t'es infiltré en Random girl.");
           				return 1;
           			}
          			else if(strcmp(x_nr,"9",true) == 0)
           			{
               			SetPlayerSkin(playerid, 192);
                   		SendClientMessage(playerid, COLOR_GRAD2, "Tu t'es inflitré en Michelle Cannes.");
                   		return 1;
                   	}
                    else if(strcmp(x_nr,"10",true) == 0)
                    {
                  		SetPlayerSkin(playerid, 193);
                       	SendClientMessage(playerid, COLOR_GRAD2, "Tu t'es infiltré en Katie Zahn.");
                        return 1;
                    }
                    else if(strcmp(x_nr,"11",true) == 0)
                    {
                  		SetPlayerSkin(playerid, 284);
                       	SendClientMessage(playerid, COLOR_GRAD2, "You have put on your Biker Uniform.");
                        return 1;
                    }
                    else if(strcmp(x_nr,"0",true) == 0)
                    {
                   		if(PlayerInfo[playerid][pRank] == 3)
                       	{
                        	GetPlayerName(playerid, sendername, sizeof(sendername));
                        	format(string,sizeof(string), " %s A mis son uniforme d'infiltré dans le casier.", sendername);
                          	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                           	SafeGivePlayerWeapon(playerid, 3, 1);
                           	SafeGivePlayerWeapon(playerid, 24, 50);
                            SetPlayerSkin(playerid, 280);
                        }
                        else if(PlayerInfo[playerid][pRank] > 3)
                       	{
                        	GetPlayerName(playerid, sendername, sizeof(sendername));
                        	format(string,sizeof(string), " %s A mis son uniforme d'infiltré dans le casier.", sendername);
                          	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                           	SafeGivePlayerWeapon(playerid, 3, 1);
                           	SafeGivePlayerWeapon(playerid, 24, 50);
                            SetPlayerSkin(playerid, 281);
                        }
                        else if(PlayerInfo[playerid][pRank] == 6)
                        {
                            GetPlayerName(playerid, sendername, sizeof(sendername));
                            format(string,sizeof(string), " %s A mis son uniforme d'infiltré dans le casier.", sendername);
                            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                            SafeGivePlayerWeapon(playerid, 3, 1);
                            SafeGivePlayerWeapon(playerid, 24, 50);
                            SetPlayerSkin(playerid, 283);
                        }
					}
				}
				else
                {
                   	SendClientMessage(playerid, COLOR_GRAD2, "Tu n'es pas dans le vestiaire!");
                   	return 1;
                }
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Tu n'es pas un flic!");
                return 1;
 			}
   		}
		return 1;
   	}
    if(strcmp(cmd, "/menotter", true)==0||strcmp(cmd, "/cu", true) ==0 || strcmp(cmd, "/cuff", true) == 0)
	//if(strcmp(cmd, "/menotter", true) == 0 || strcmp(cmd, "/men", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(gTeam[playerid] == 2 || IsACop(playerid))
			{
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /menotter [Playerid/PartOfName]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
			    if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        if(gTeam[giveplayerid] == 2 || IsACop(giveplayerid))
				        {
				            SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez pas menotter un policier!");
					        return 1;
				        }
					    if(PlayerCuffed[giveplayerid] == 2)
					    {
					        SendClientMessage(playerid, COLOR_GREY, "Joueur déjà menotté!");
					        return 1;
					    }
						if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
						    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez pas vous menotte vous même!"); return 1; }
						    if(GetPlayerState(giveplayerid) != GetPlayerState(playerid)) { SendClientMessage(playerid, COLOR_GREY, "Ce joueur doit etre en dehors du véhicule (ou vous devez etre en dehors)"); return 1; }
						    if(GetPlayerState(playerid) == 1)
						    {
						        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
						        format(string, sizeof(string), "Vous avez été menotté par %s, jusqu'à ce qu'un policier vous démenotte.", sendername);
								SendClientMessage(giveplayerid, COLOR_WHITE, string);
								format(string, sizeof(string), "Vous avez menotté %s, jusqu'a ce qu'un policier vous démenotte.", giveplayer);
								SendClientMessage(playerid, COLOR_WHITE, string);
								format(string, sizeof(string), " %s à menotté %s, il ne poura allez nul part.", sendername ,giveplayer);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
								GameTextForPlayer(giveplayerid, "~r~Menotter", 2500, 3);
								TogglePlayerControllable(giveplayerid, 0);
								PlayerCuffed[giveplayerid] = 2;
								PlayerCuffedTime[giveplayerid] = 99999999999999;
						    }
						    else
						    {
						        SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas dans votre voiture, ou vous n'êtes pas le conducteur!");
						        return 1;
						    }
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas près de vous!");
						    return 1;
						}
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté!");
				    return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas policier!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/uncuff", true) == 0 || strcmp(cmd, "/demenotter", true) == 0 || strcmp(cmd, "/demenoter", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(gTeam[playerid] == 2)
			{
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /demenotter [Playerid/PartOfName]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
					if(giveplayerid != INVALID_PLAYER_ID)
					{
					    if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
						    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez pas vous demenotter vous même!"); return 1; }
							if(PlayerCuffed[giveplayerid] == 2)
							{
							    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
							    format(string, sizeof(string), "Vous avez été demenotté par %s.", sendername);
								SendClientMessage(giveplayerid, COLOR_WHITE, string);
								format(string, sizeof(string), "Vous avez démenotté %s.", giveplayer);
								SendClientMessage(playerid, COLOR_WHITE, string);
								GameTextForPlayer(giveplayerid, "~g~Demenotter", 2500, 3);
								TogglePlayerControllable(giveplayerid, 1);
								PlayerCuffed[giveplayerid] = 0;
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas menotté!");
							    return 1;
							}
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas près de vous!");
						    return 1;
						}
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté!");
				    return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas policier!");
			}
		}//not connected
		return 1;
	}
    if(strcmp(cmd, "/find", true) == 0 || strcmp(cmd, "/trouver", true) == 0 || strcmp(cmd, "/trouversuspect", true) == 0)
	//if(strcmp(cmd, "/trouver", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(PlayerInfo[playerid][pJob] != 1)
		    {
				SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas Detective!");
				return 1;
		    }
		    if(PlayerOnMission[playerid] > 0)
			{
				SendClientMessage(playerid, COLOR_GREY, "Vous êtes en mission, vous ne pouvez pas utiliser cette commande!");
			    return 1;
			}
			if(UsedFind[playerid] != 0 && PlayerInfo[playerid][pDetSkill] < 401)
			{
			    SendClientMessage(playerid, COLOR_GREY, "Vous avez déjà cherché quelqu'un, attendez 2 minutes!");
			    return 1;
			}
		    tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /trouver [playerid/PartOfName]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez pas vous trouvé vous même!"); return 1; }
			        new points;
			        new level = PlayerInfo[playerid][pDetSkill];
					if(level >= 0 && level <= 50)
					{ points = 4; }
					else if(level >= 51 && level <= 100)
					{ points = 6; }
					else if(level >= 101 && level <= 200)
					{ points = 8; }
					else if(level >= 201 && level <= 400)
					{ points = 10; }
					else if(level >= 401)
					{ points = 12; }
				    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					new Float:X,Float:Y,Float:Z;
					GetPlayerPos(giveplayerid, X,Y,Z);
					SetPlayerCheckpoint(playerid, X,Y,Z, 6);
					FindTime[playerid] = 1;
					FindTimePoints[playerid] = points;
					PlayerInfo[playerid][pDetSkill] ++;
					UsedFind[playerid] = 1;
					if(PlayerInfo[playerid][pDetSkill] == 50)
					{ SendClientMessage(playerid, COLOR_YELLOW, "Votre skil de Detective est de niveau 2, bientôt vous pourrez chercher des membres de Factions."); }
					else if(PlayerInfo[playerid][pDetSkill] == 100)
					{ SendClientMessage(playerid, COLOR_YELLOW, "Votre skil de Detective est de niveau 3, bientôt vous pourrez chercher des membres de Factions."); }
					else if(PlayerInfo[playerid][pDetSkill] == 200)
					{ SendClientMessage(playerid, COLOR_YELLOW, "Votre skil de Detective est de niveau 2,  vous pouvez chercher des membres de Factions."); }
					else if(PlayerInfo[playerid][pDetSkill] == 400)
					{ SendClientMessage(playerid, COLOR_YELLOW, "Votre skil de Detective est de niveau 2,  vous pouvez chercher des membres de Factions."); }
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté!");
			}
		}
	    return 1;
	}
    if(strcmp(cmd, "/enlevergps", true) == 0 || strcmp(cmd, "/removegps", true) == 0 || strcmp(cmd, "/retirergps", true) == 0)
	//if(strcmp(cmd,"/enlevergps",true)==0)
 	{
		if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1)
			{
				DisablePlayerCheckpoint(playerid);
			}
			else if(PlayerInfo[playerid][pMember] == 4||PlayerInfo[playerid][pLeader] == 4)
			{
				DisablePlayerCheckpoint(playerid);
			}
		}
		return 1;
	}
    if(strcmp(cmd, "/garde", true) == 0 || strcmp(cmd, "/guard", true) == 0 || strcmp(cmd, "/gardducorps", true) == 0)
	//if(strcmp(cmd, "/garde", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(PlayerInfo[playerid][pJob] != 8)
		    {
				SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas garde du corp!");
				return 1;
		    }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /garde [playerid/PartOfName] [prix]");
				return 1;
			}
			new money;
			giveplayerid = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) { return 1; }
			money = strval(tmp);
			if(money < 1 || money > 99999) { SendClientMessage(playerid, COLOR_GREY, "Le prix ne peut pas être en dessous de 1$ et au desus de 99999!"); return 1; }
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid)
					    {
					        SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez pas vous proposé de la protection à vous même!");
					        return 1;
					    }
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
					    format(string, sizeof(string), "Vous protégez à %s de le proteger pour $%d.", giveplayer, money);
						SendClientMessage(playerid, COLOR_WHITE, string);
						format(string, sizeof(string), "Le garde du corp %s vous propose de vous protéger pour $%d, (Tapez /accepter gardeducorp) pour accepter.", sendername, money);
						SendClientMessage(giveplayerid, COLOR_WHITE, string);
						GuardOffer[giveplayerid] = playerid;
						GuardPrice[giveplayerid] = money;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas près de vous!");
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté!");
			}
		}
		return 1;
	}
    if(strcmp(cmd, "/gratuit", true) == 0 || strcmp(cmd, "/libre", true) == 0 || strcmp(cmd, "/libere", true) == 0)
	//if(strcmp(cmd, "/gratuit", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(PlayerInfo[playerid][pJob] != 2)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas avocat!");
		        return 1;
		    }
		    if(PlayerInfo[playerid][pLawSkill] >= 401)
		    {
		        ApprovedLawyer[playerid] = 1;
		    }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /gratuit [playerid/PartOfName]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
            if(IsPlayerConnected(giveplayerid))
            {
                if(giveplayerid != INVALID_PLAYER_ID)
                {
                    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez pas faire cette commande a vous même!"); return 1; }
					if(PlayerInfo[giveplayerid][pJailed] == 1 && ApprovedLawyer[playerid] == 1)
					{
						GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "Vous avez libéré %s de prison.", giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
						format(string, sizeof(string), "Vous avez été libéré de prison, par l'avocat %s.", sendername);
						SendClientMessage(giveplayerid, COLOR_WHITE, string);
						ApprovedLawyer[playerid] = 0;
						WantLawyer[giveplayerid] = 0;
						CallLawyer[giveplayerid] = 0;
						JailPrice[giveplayerid] = 0;
						PlayerInfo[giveplayerid][pJailTime] = 1;
						PlayerInfo[playerid][pLawSkill] ++;
						if(PlayerInfo[playerid][pLawSkill] == 50)
						{ SendClientMessage(playerid, COLOR_YELLOW, "Votre niveau avocat est de 2, vous gagnerez plus d'argent."); }
						else if(PlayerInfo[playerid][pLawSkill] == 100)
						{ SendClientMessage(playerid, COLOR_YELLOW, "Votre niveau avocat est de 3, vous gagnerez plus d'argent."); }
						else if(PlayerInfo[playerid][pLawSkill] == 200)
						{ SendClientMessage(playerid, COLOR_YELLOW, "Votre niveau avocat est de 4, vous gagnerez plus d'argent."); }
						else if(PlayerInfo[playerid][pLawSkill] == 400)
						{ SendClientMessage(playerid, COLOR_YELLOW, "Votre niveau avocat est de 5, vous gagnerez plus d'argent."); }
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD1, "Ce joueur n'à pas besoin d'avocat!");
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté!");
			}
		}//not connected
		return 1;


		}
		if(strcmp(cmd, "/asuspect", true) == 0 || strcmp(cmd, "/asu", true) == 0)
	    {
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pAdmin] < 2)
			{
			    SendClientMessage(playerid, COLOR_GREY, "* You are not Authorized to use This Command!");
			    return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/asu)spect [playerid/PartOfName] [crime discription]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
   				if(giveplayerid != INVALID_PLAYER_ID)
			    {
					GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));

					new length = strlen(cmdtext);
					while ((idx < length) && (cmdtext[idx] <= ' '))
					{
						idx++;
					}
					new offset = idx;
					new result[128];
					while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
					{
						result[idx - offset] = cmdtext[idx];
						idx++;
					}
					result[idx - offset] = EOS;
					if(!strlen(result))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/asu)spect [playerid/PartOfName] [crime text]");
						return 1;
					}
					if(WantedPoints[giveplayerid] == 0)
					{
						WantedPoints[giveplayerid] = 6;
					}
					else
					{
						WantedPoints[giveplayerid] = 6;
					}
					SetPlayerCriminalEx(giveplayerid,playerid, result);
					new y, m, d;
					new h,mi,s;
					getdate(y,m,d);
					gettime(h,mi,s);
					format(string,sizeof(string), "(%d/%d/%d)[%d:%d:%d] %s [CMD] -> /asuspect %s %s",d,m,y,h,mi,s,sendername, giveplayer, (result));
					return 1;
				}
			}
			else
			{
				format(string, sizeof(string), "* %d is not an active player.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
				return 1;
			}
		}
		return 1;


//----------------------------------[PayDay]------------------------------------------------
    }
    if(strcmp(cmd, "/spayday", true) == 0 || strcmp(cmd, "/apayday", true) == 0)
	{
	    {
	    	for(new i=0; i<MAX_PLAYERS; i++)
	    	{
				if (PlayerInfo[playerid][pAdmin] < 1339)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   Vous n'êtes pas autorisé à utilisez cette commande !");
					return 1;
                }
				PlayerInfo[i][pPayDay] = 5;
   				PayDay();
   				return 1;
			}
		}
	}

	if(strcmp(cmd,"/annuler",true)==0 || strcmp(cmd, "/anuler", true) == 0)
    {
        if(IsPlayerConnected(playerid))
	    {
			new x_job[256];
			x_job = strtok(cmdtext, idx);
			if(!strlen(x_job)) {
				SendClientMessage(playerid, COLOR_WHITE, "|__________________ Annuler __________________|");
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /annuler [nom]");
				SendClientMessage(playerid, COLOR_GREY, "Noms Disponibles: Sex, Drogues, Permi, Reparation, Avocat, gardeducorp, Live, Plein, Véhicule, Combat");
				SendClientMessage(playerid, COLOR_GREY, "Noms Disponibles: Taxi, Bus, Medecin, Mecanicien, Journal, Amende, Témoin, Mariage, Divorce, vehicule, serrermain");
				SendClientMessage(playerid, COLOR_WHITE, "|____________________________________________|");
				return 1;
			}
			if(strcmp(x_job,"sex",true) == 0) {	SexOffer[playerid] = 999; SexPrice[playerid] = 0; }
			else if(strcmp(x_job,"drogues",true) == 0) { DrugOffer[playerid] = 999; DrugPrice[playerid] = 0; DrugGram[playerid] = 0; }
			else if(strcmp(x_job,"Permis",true) == 0) { LicenseOffer[playerid] = 999; LicensePrice[playerid] = 0; LicenseType[playerid] = 0; }
			else if(strcmp(x_job,"reparation",true) == 0) {	RepairOffer[playerid] = 999; RepairPrice[playerid] = 0; RepairCar[playerid] = 0; }
			else if(strcmp(x_job,"avocat",true) == 0) { WantLawyer[playerid] = 0; CallLawyer[playerid] = 0; }
			else if(strcmp(x_job,"gardeducorp",true) == 0) { GuardOffer[playerid] = 999; GuardPrice[playerid] = 0; }
			else if(strcmp(x_job,"live",true) == 0) { LiveOffer[playerid] = 999; }
			else if(strcmp(x_job,"plein",true) == 0) { RefillOffer[playerid] = 999; RefillPrice[playerid] = 0; }
			else if(strcmp(x_job,"vehicule",true) == 0) { CarOffer[playerid] = 9999; CarPrice[playerid] = 0; CarID[playerid] = 0; }
			else if(strcmp(x_job,"combat",true) == 0) { BoxOffer[playerid] = 999; }
			else if(strcmp(x_job,"journal",true) == 0) { PaperOffer[playerid] = 999; }
			else if(strcmp(x_job,"temoin",true) == 0) { MarryWitnessOffer[playerid] = 999; }
			else if(strcmp(x_job,"mariage",true) == 0) { ProposeOffer[playerid] = 999; }
			else if(strcmp(x_job,"divorce",true) == 0) { DivorceOffer[playerid] = 999; }
			else if(strcmp(x_job,"serrermain",true) == 0) { HandshakeOffer[playerid] = 999; HandshakeType[playerid] = 0; }
			else if(strcmp(x_job,"vehicule",true) == 0) { OwnableCarOffer[playerid] = 9999; OwnableCarID[playerid] = 0; OwnableCarPrice[playerid] = 0; }
			else if(strcmp(x_job,"amende",true) == 0) { TicketOffer[playerid] = 999; TicketMoney[playerid] = 0; }
			else if(strcmp(x_job,"organe",true) == 0) { OrganeOffer[playerid] = 999; OrganeMoney[playerid] = 0; }
			else if(strcmp(x_job,"medecin",true) == 0) { if(IsPlayerConnected(MedicCall)) { if(MedicCall == playerid) { MedicCall = 999; } else { SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas l'appelant actuel!"); return 1; } } }
			else if(strcmp(x_job,"mecanicien",true) == 0) { if(IsPlayerConnected(MechanicCall)) { if(MechanicCall == playerid) { MechanicCall = 999; } else { SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas l'appelant actuel !"); return 1; } } }
			else if(strcmp(x_job,"pizza",true) == 0) { if(IsPlayerConnected(PizzaCall)) { if(PizzaCall == playerid) { PizzaCall = 999; } else { SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas l'appelant actuel!"); return 1; } } }
			else if(strcmp(x_job,"taxi",true) == 0)
			{
			    if(TaxiCall < 999)
			    {
			        if(TransportDuty[playerid] == 1 && TaxiCallTime[playerid] > 0)
			        {
			            TaxiAccepted[playerid] = 999;
						GameTextForPlayer(playerid, "~w~Vous avez~n~~r~Annuler l'appel", 5000, 1);
						TaxiCallTime[playerid] = 0;
						DisablePlayerCheckpoint(playerid);
						TaxiCall = 999;
			        }
			        else
			        {
						if(IsPlayerConnected(TaxiCall)) { if(TaxiCall == playerid) { TaxiCall = 999; } }
						for(new i = 0; i < MAX_PLAYERS; i++)
						{
						    if(IsPlayerConnected(i))
						    {
						        if(TaxiAccepted[i] < 999)
						        {
							        if(TaxiAccepted[i] == playerid)
							        {
							            TaxiAccepted[i] = 999;
							            GameTextForPlayer(i, "~w~Le chauffeur de Taxi~n~~r~a annuler l'appel", 5000, 1);
							            TaxiCallTime[i] = 0;
							            DisablePlayerCheckpoint(i);
							        }
						        }
						    }
						}
					}
				}
			}
			else if(strcmp(x_job,"bus",true) == 0)
			{
			    if(BusCall < 999)
			    {
			        if(TransportDuty[playerid] == 2 && BusCallTime[playerid] > 0)
			        {
			            BusAccepted[playerid] = 999;
						GameTextForPlayer(playerid, "~w~Vous avez~n~~r~Annuler l'appel", 5000, 1);
						BusCallTime[playerid] = 0;
						DisablePlayerCheckpoint(playerid);
						BusCall = 999;
			        }
			        else
			        {
						if(IsPlayerConnected(BusCall)) { if(BusCall == playerid) { BusCall = 999; } }
						for(new i = 0; i < MAX_PLAYERS; i++)
						{
						    if(IsPlayerConnected(i))
						    {
						        if(BusAccepted[i] < 999)
						        {
							        if(BusAccepted[i] == playerid)
							        {
							            BusAccepted[i] = 999;
							            GameTextForPlayer(i, "~w~Le chauffeur de Bus~n~~r~a annuler l'appel", 5000, 1);
							            BusCallTime[i] = 0;
							            DisablePlayerCheckpoint(i);
							        }
						        }
						    }
						}
					}
				}
			}
			else { return 1; }
			format(string, sizeof(string), "Vous avez annulé: %s.", x_job);
			SendClientMessage(playerid, COLOR_YELLOW, string);
		}//not connected
		return 1;
	}
//ACCEPT COMMANDS (Cops)
	if(strcmp(cmd,"/accepter",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
			new x_job[256];
			x_job = strtok(cmdtext, idx);
			if(!strlen(x_job)) {
				SendClientMessage(playerid, COLOR_WHITE, "|__________________ Accepter __________________|");
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: accepter [nom]");
				SendClientMessage(playerid, COLOR_GREY, "Noms Disponibles: Sex, Drogues, Reparation, Avocat, Gardeducorp, Job, Live, Plein, peinture");
				SendClientMessage(playerid, COLOR_GREY, "Noms Disponibles: Taxi, Bus, Combat, Medecin, Mecanicien, Journal, Amende, Pizza, Permis, organe");
				SendClientMessage(playerid, COLOR_WHITE, "|____________________________________________|");
				return 1;
			}
	        /*if(strcmp(x_job,"car",true) == 0)
			{
			    if(CarOffer[playerid] < 999)
			    {
			        if(IsPlayerConnected(CarOffer[playerid]))
			        {
			            if(GetPlayerMoney(playerid) > CarPrice[playerid])
			            {
			                if(IsPlayerInVehicle(CarOffer[playerid], CarID[playerid]))
			                {
				                GetPlayerName(CarOffer[playerid], giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
				                new points;
				                PlayerInfo[CarOffer[playerid]][pCarSkill] ++;
				                if(PlayerInfo[CarOffer[playerid]][pCarSkill] == 50)
								{ SendClientMessage(CarOffer[playerid], COLOR_YELLOW, " Your Car Dealer Skill is now Level 2, Players that buy Cars from you can call it more often."); }
								else if(PlayerInfo[CarOffer[playerid]][pCarSkill] == 100)
								{ SendClientMessage(CarOffer[playerid], COLOR_YELLOW, " Your Car Dealer Skill is now Level 3, Players that buy Cars from you can call it more often."); }
								else if(PlayerInfo[CarOffer[playerid]][pCarSkill] == 200)
								{ SendClientMessage(CarOffer[playerid], COLOR_YELLOW, " Your Car Dealer Skill is now Level 4, Players that buy Cars from you can call it more often."); }
								else if(PlayerInfo[CarOffer[playerid]][pCarSkill] == 400)
								{ SendClientMessage(CarOffer[playerid], COLOR_YELLOW, " Your Car Dealer Skill is now Level 5, Players that buy Cars from you can call it more often."); }
								new level = PlayerInfo[CarOffer[playerid]][pCarSkill];
								if(level >= 0 && level <= 50) { points = 1; }
								else if(level >= 51 && level <= 100) { points = 2; }
								else if(level >= 101 && level <= 200) { points = 3; }
								else if(level >= 201 && level <= 400) { points = 4; }
								else if(level >= 401) { points = 4; }
				                format(string, sizeof(string), " You bought a Car for $%d, from Car Dealer %s. (You can use /callcar %d times)",CarPrice[playerid],giveplayer,points);
								SendClientMessage(playerid, COLOR_WHITE, string);
								format(string, sizeof(string), " You sold your Car to %s for $%d, the player can use /callcar %d times.",sendername,CarPrice[playerid],points);
								SendClientMessage(CarOffer[playerid], COLOR_WHITE, string);
								PlayerInfo[CarOffer[playerid]][pPayCheck] += CarPrice[playerid] * 5;
								SafeGivePlayerMoney(playerid, -CarPrice[playerid]);
								RemovePlayerFromVehicle(CarOffer[playerid]);
								CarCalls[playerid] = points;
						        CarOffer[playerid] = 999;
								CarPrice[playerid] = 0;
								return 1;
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   The Car Dealer is not in the offerd Car !");
						    	return 1;
							}
			            }
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   You cant afford the Car !");
						    return 1;
						}
			        }
			        return 1;
			    }
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   No-one offered to buy a Car !");
				    return 1;
				}
			}*/
			else if(strcmp(x_job,"divorce",true) == 0)
			{
			    if(DivorceOffer[playerid] < 999)
			    {
			        if(IsPlayerConnected(DivorceOffer[playerid]))
			        {
			            if(ProxDetectorS(10.0, playerid, DivorceOffer[playerid]))
						{
						    GetPlayerName(DivorceOffer[playerid], giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "Vous avez accepté la demande de divorce de %s.", giveplayer);
							SendClientMessage(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), "%s à accepté votre demande de divorce.", sendername);
							SendClientMessage(DivorceOffer[playerid], COLOR_WHITE, string);
							ClearMarriage(playerid);
							ClearMarriage(DivorceOffer[playerid]);
							PlayerInfo[playerid][pPhousekey] = 255;
							PlayerInfo[playerid][pPbiskey] = 255;
							return 1;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas près de vous!");
						    return 1;
						}
			        }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Personne ne vous a envoyé les papiers de divorce!");
				    return 1;
				}
			}
			else if(strcmp(x_job,"temoin",true) == 0)
			{
			    if(MarryWitnessOffer[playerid] < 999)
			    {
			        if(IsPlayerConnected(MarryWitnessOffer[playerid]))
			        {
			            if(ProxDetectorS(10.0, playerid, MarryWitnessOffer[playerid]))
						{
						    GetPlayerName(MarryWitnessOffer[playerid], giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "Vous avez acceptez la demande %s pour que vous oyez son témoin à son mariage.", giveplayer);
							SendClientMessage(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), "%s à accepté votre demande pour qu'il soit votre témoin.", sendername);
							SendClientMessage(MarryWitnessOffer[playerid], COLOR_WHITE, string);
							MarryWitness[MarryWitnessOffer[playerid]] = playerid;
							MarryWitnessOffer[playerid] = 999;
							return 1;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas près de vous!");
						    return 1;
						}
			        }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Personne ne vous à demandé pour que vous soyez son témoin!");
				    return 1;
				}
			}
	        else if(strcmp(x_job,"mariage",true) == 0)
			{
			    if(ProposeOffer[playerid] < 999)
			    {
			        if(!PlayerToPoint(10.0, playerid, 2232.3047,-1333.1543,23.9815))
			        {
                    SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas à l'église de Jefferson!");
			            return 1;
			        }
			        if(IsPlayerConnected(ProposeOffer[playerid]))
			        {
			            if(ProxDetectorS(10.0, playerid, ProposeOffer[playerid]))
						{
						    if(MarryWitness[ProposeOffer[playerid]] == 999)
						    {
						        SendClientMessage(playerid, COLOR_GREY, "Celui qui vous propose de vous marrié n'à pas de témoin!");
						        return 1;
						    }
						    if(IsPlayerConnected(MarryWitness[ProposeOffer[playerid]]))
						    {
							    if(ProxDetectorS(12.0, ProposeOffer[playerid], MarryWitness[ProposeOffer[playerid]]))
								{
								    GetPlayerName(ProposeOffer[playerid], giveplayer, sizeof(giveplayer));
									GetPlayerName(playerid, sendername, sizeof(sendername));
									format(string, sizeof(string), "Vous avez accepté la demande de marriage de %s.", giveplayer);
									SendClientMessage(playerid, COLOR_WHITE, string);
									format(string, sizeof(string), "%s à accepté d'être votre femme.", sendername);
									SendClientMessage(ProposeOffer[playerid], COLOR_WHITE, string);
									format(string, sizeof(string), "Prêtre: %s voulez vous prendre %s comme marri? (Tapez 'Oui', autre chose pour refuser)", sendername, giveplayer);
									SendClientMessage(playerid, COLOR_WHITE, string);
									MarriageCeremoney[playerid] = 1;
									ProposedTo[ProposeOffer[playerid]] = playerid;
									GotProposedBy[playerid] = ProposeOffer[playerid];
									MarryWitness[ProposeOffer[playerid]] = 999;
									ProposeOffer[playerid] = 999;
									return 1;
								}
								else
								{
								    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas près de vous!");
								    return 1;
								}
							}
							return 1;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "Le joueur qui vous a demandé an marriage n'est pas près de vous!");
						    return 1;
						}
			        }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Personne ne vous demande en marriage!");
				    return 1;
				}
			}
			else if(strcmp(x_job,"pizza",true) == 0)
   			{
       			if(PlayerInfo[playerid][pJob] != 17)
       			{
           			SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas livreur de pizza!");
        			return 1;
       			}
        		if(PizzaCallTime[playerid] > 0)
             	{
					SendClientMessage(playerid, COLOR_GREY, "Vous avez déjà une commande!");
        			return 1;
             	}
             	if(PlayerOnMission[playerid] > 0)
       			{
           			SendClientMessage(playerid, COLOR_GREY, "Vous êtes en mission, vous ne pouvez pas utiliser cette commande!");
           			return 1;
       			}
             	if(PizzaCall < 999)
             	{
					if(IsPlayerConnected(PizzaCall))
					{
                    	GetPlayerName(playerid, sendername, sizeof(sendername));
                  		GetPlayerName(PizzaCall, giveplayer, sizeof(giveplayer));
                  		format(string, sizeof(string), "Vous avez accepter la commande de %s, vous avez 90 sencondes pour y allez.",giveplayer);
      					SendClientMessage(playerid, COLOR_WHITE, string);
      					SendClientMessage(playerid, COLOR_WHITE, "Apres 90 secondes le marqueur rouge disparaitra.");
                        format(string, sizeof(string), "Le Livreur de Pizza %s à accepté votre commande, restez où vous êtes.",sendername);
      					SendClientMessage(PizzaCall, COLOR_WHITE, string);
      					new Float:X,Float:Y,Float:Z;
      					GetPlayerPos(PizzaCall, X, Y, Z);
      					SetPlayerCheckpoint(playerid, X, Y, Z, 5);
      					GameTextForPlayer(playerid, "~w~Commande~n~~r~Allez au marqueur rouge", 5000, 1);
      					PizzaCallTime[playerid] = 1;
      					PizzaCall = 999;
						return 1;
     				}
             	}
             	else
             	{
              		SendClientMessage(playerid, COLOR_GREY, "Personne n'à commandé de pizza!");
        			return 1;
             	}
   			}
			else if(strcmp(x_job,"amende",true) == 0)
			{
			    if(TicketOffer[playerid] < 999)
			    {
			        if(IsPlayerConnected(TicketOffer[playerid]))
			        {
			            if (ProxDetectorS(5.0, playerid, TicketOffer[playerid]))
						{
				           	GetPlayerName(TicketOffer[playerid], giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "Vous avez payé l'amende à $%d à l'Officier %s.", TicketMoney[playerid], giveplayer);
							SendClientMessage(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), "%s à payé votre amende de $%d.", sendername, TicketMoney[playerid]);
							SendClientMessage(TicketOffer[playerid], COLOR_WHITE, string);
							SafeGivePlayerMoney(playerid, - TicketMoney[playerid]);
							SafeGivePlayerMoney(TicketOffer[playerid], TicketMoney[playerid]);
							TicketOffer[playerid] = 999;
							TicketMoney[playerid] = 0;
							return 1;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "L'officier n'est pas près de vous!");
						    return 1;
						}
			        }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Personne ne vous offre d'amande!");
				    return 1;
				}
			}
			else if(strcmp(x_job,"organe",true) == 0)
			{
			    if(OrganeOffer[playerid] < 999)
       			{
       					if(IsPlayerConnected(TicketOffer[playerid]))
				        {
				            if (ProxDetectorS(5.0, playerid, OrganeOffer[playerid]))
							{
					           	GetPlayerName(OrganeOffer[playerid], giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "Vous avez payé l'organe $%d au medecin %s.", OrganeMoney[playerid], giveplayer);
								SendClientMessage(playerid, COLOR_WHITE, string);
								format(string, sizeof(string), "%s à payé votre organe $%d.", sendername, OrganeMoney[playerid]);
								SendClientMessage(OrganeOffer[playerid], COLOR_WHITE, string);
								SafeGivePlayerMoney(playerid, - OrganeMoney[playerid]);
								SafeGivePlayerMoney(OrganeOffer[playerid], OrganeMoney[playerid]);
								OrganeOffer[playerid] = 999;
								OrganeMoney[playerid] = 0;
								SetPlayerHealth(giveplayerid,100);
								SetPlayerDrunkLevel(giveplayerid,0);
								rein[giveplayerid] = 0;
								Organe --;
								return 1;
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "Le medecin n'est pas près de vous!");
							    return 1;
							}
				        }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Personne ne vous offre d'organe!");
				    return 1;
				}
			}
			else if(strcmp(x_job,"journal",true) == 0)
			{
			    if(PaperOffer[playerid] < 999)
			    {
			        if(IsPlayerConnected(PaperOffer[playerid]))
			        {
			            if(BringingPaper[PaperOffer[playerid]] > 0)
			            {
			                if (ProxDetectorS(5.0, playerid, PaperOffer[playerid]))
							{
				            	GetPlayerName(PaperOffer[playerid], giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "Vous avez pris le journal du Livreur de Journaux %s (Utilisez /lire journal, pour le lire).", giveplayer);
								SendClientMessage(playerid, COLOR_WHITE, string);
								format(string, sizeof(string), "%s à accepté votre journal.", sendername);
								SendClientMessage(PaperOffer[playerid], COLOR_WHITE, string);
								format(string, sizeof(string), "%s", Paper[PaperOffer[playerid]][pTitle]);
								strmid(Paper[playerid][pTitle], string, 0, strlen(string), 255);
								format(string, sizeof(string), "%s", Paper[PaperOffer[playerid]][pMaker]);
								strmid(Paper[playerid][pMaker], string, 0, strlen(string), 255);
								format(string, sizeof(string), "%s", Paper[PaperOffer[playerid]][pLine1]);
								strmid(Paper[playerid][pLine1], string, 0, strlen(string), 255);
								format(string, sizeof(string), "%s", Paper[PaperOffer[playerid]][pLine2]);
								strmid(Paper[playerid][pLine2], string, 0, strlen(string), 255);
								format(string, sizeof(string), "%s", Paper[PaperOffer[playerid]][pLine3]);
								strmid(Paper[playerid][pLine3], string, 0, strlen(string), 255);
								format(string, sizeof(string), "%s", Paper[PaperOffer[playerid]][pLine4]);
								strmid(Paper[playerid][pLine4], string, 0, strlen(string), 255);
								format(string, sizeof(string), "%s", Paper[PaperOffer[playerid]][pLine5]);
								strmid(Paper[playerid][pLine5], string, 0, strlen(string), 255);
								format(string, sizeof(string), "%s", Paper[PaperOffer[playerid]][pLine6]);
								strmid(Paper[playerid][pLine6], string, 0, strlen(string), 255);
								format(string, sizeof(string), "%s", Paper[PaperOffer[playerid]][pLine7]);
								strmid(Paper[playerid][pLine7], string, 0, strlen(string), 255);
								GotPaper[playerid] = 1;
								PaperOffer[playerid] = 999;
								return 1;
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "Le Livreur de journaux n'est pas près de vous!");
							    return 1;
							}
						}
			        }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Personne ne vous offre un journal !");
				    return 1;
				}
			}
			else if(strcmp(x_job,"combat",true) == 0)
			{
			    if(BoxOffer[playerid] < 999)
			    {
			        if(IsPlayerConnected(BoxOffer[playerid]))
			        {
			            new points;
			            new mypoints;
			            GetPlayerName(BoxOffer[playerid], giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
			            new level = PlayerInfo[BoxOffer[playerid]][pBoxSkill];
						if(level >= 0 && level <= 50) { points = 40; }
						else if(level >= 51 && level <= 100) { points = 50; }
						else if(level >= 101 && level <= 200) { points = 60; }
						else if(level >= 201 && level <= 400) { points = 70; }
						else if(level >= 401) { points = 80; }
						if(PlayerInfo[playerid][pJob] == 12)
						{
							new clevel = PlayerInfo[playerid][pBoxSkill];
							if(clevel >= 0 && clevel <= 50) { mypoints = 40; }
							else if(clevel >= 51 && clevel <= 100) { mypoints = 50; }
							else if(clevel >= 101 && clevel <= 200) { mypoints = 60; }
							else if(clevel >= 201 && clevel <= 400) { mypoints = 70; }
							else if(clevel >= 401) { mypoints = 80; }
						}
						else
						{
						    mypoints = 30;
						}
						format(string, sizeof(string), "Vous avez accepté la demande de combat de %s, vous allez vous battre avec %d de vie.",giveplayer,mypoints);
						SendClientMessage(playerid, COLOR_WHITE, string);
						format(string, sizeof(string), "%s à accepté votre demande de combat, vous allez vous battre avec %d de vie.",sendername,points);
						SendClientMessage(BoxOffer[playerid], COLOR_WHITE, string);
						SetPlayerHealth(playerid, mypoints);
						SetPlayerHealth(BoxOffer[playerid], points);
						SetPlayerInterior(playerid, 5); SetPlayerInterior(BoxOffer[playerid], 5);
						SetPlayerPos(playerid, 762.9852,2.4439,1001.5942); SetPlayerFacingAngle(playerid, 131.8632);
						SetPlayerPos(BoxOffer[playerid], 758.7064,-1.8038,1001.5942); SetPlayerFacingAngle(BoxOffer[playerid], 313.1165);
						TogglePlayerControllable(playerid, 0); TogglePlayerControllable(BoxOffer[playerid], 0);
						GameTextForPlayer(playerid, "~r~Veuillez Patienter", 3000, 1); GameTextForPlayer(BoxOffer[playerid], "~r~Waiting", 3000, 1);
						new name[MAX_PLAYER_NAME];
						new dstring[MAX_PLAYER_NAME];
						new wstring[MAX_PLAYER_NAME];
						GetPlayerName(playerid, name, sizeof(name));
						format(dstring, sizeof(dstring), "%s", name);
						strmid(wstring, dstring, 0, strlen(dstring), 255);
						if(strcmp(Titel[TitelName] ,wstring, true ) == 0 )
						{
						    format(string, sizeof(string), "Arbitre: Champion de Boxe %s VS %s, dans 60 secondes (Gymnase de Ganton).",  sendername, giveplayer);
							OOCOff(COLOR_WHITE,string);
							TBoxer = playerid;
							BoxDelay = 60;
						}
						GetPlayerName(BoxOffer[playerid], name, sizeof(name));
						format(dstring, sizeof(dstring), "%s", name);
						strmid(wstring, dstring, 0, strlen(dstring), 255);
						if(strcmp(Titel[TitelName] ,wstring, true ) == 0 )
						{
						    format(string, sizeof(string), "Arbitre: Champion de Boxe %s VS %s, dans 60 secondes (Gymnase de Ganton).",  giveplayer, sendername);
							OOCOff(COLOR_WHITE,string);
							TBoxer = BoxOffer[playerid];
							BoxDelay = 60;
						}
						BoxWaitTime[playerid] = 1; BoxWaitTime[BoxOffer[playerid]] = 1;
						if(BoxDelay < 1) { BoxDelay = 20; }
						InRing = 1;
						Boxer1 = BoxOffer[playerid];
						Boxer2 = playerid;
						PlayerBoxing[playerid] = 1;
						PlayerBoxing[BoxOffer[playerid]] = 1;
						BoxOffer[playerid] = 999;
						return 1;
			        }
			        return 1;
			    }
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Personne ne vous offre un combat de boxe!");
				    return 1;
				}
			}
			else if(strcmp(x_job,"taxi",true) == 0)
			{
			    if(TransportDuty[playerid] != 1)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas chauffeur de taxi!");
				    return 1;
			    }
	            if(TaxiCallTime[playerid] > 0)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "Vous avez déjà accepté un appel!");
				    return 1;
	            }
	            if(PlayerOnMission[playerid] > 0)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "Vous êtes en mission, vous ne pouvez pas utiliser cette commande!");
			        return 1;
			    }
	            if(TaxiCall < 999)
	            {
	                if(IsPlayerConnected(TaxiCall))
	                {
	                    GetPlayerName(playerid, sendername, sizeof(sendername));
	                	GetPlayerName(TaxiCall, giveplayer, sizeof(giveplayer));
	                	format(string, sizeof(string), "Vous avez accepté l'appel de %s, sa position est marquée sur votre carte ( marqueur rouge ).",giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
                        format(string, sizeof(string), "Le Chauffeur de taxi %s à accepté votre appel, attendez ici.",sendername);
						SendClientMessage(TaxiCall, COLOR_WHITE, string);
						GameTextForPlayer(playerid, "~w~Client~n~~r~Allez au marqueur rouge", 5000, 1);
						TaxiCallTime[playerid] = 1;
						TaxiAccepted[playerid] = TaxiCall;
						TaxiCall = 999;
						return 1;
					}
	            }
	            else
	            {
	                SendClientMessage(playerid, COLOR_GREY, "Personne n'à appelé de taxi!");
			    	return 1;
	            }
			}
			else if(strcmp(x_job,"bus",true) == 0)
			{
			    if(TransportDuty[playerid] != 2)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas chauffeur de Bus!");
				    return 1;
			    }
	            if(BusCallTime[playerid] > 0)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "Vous avez déjà accepter un appel!");
				    return 1;
	            }
	            if(PlayerOnMission[playerid] > 0)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "Vous êtes en mission, vous ne pouvez pas utiliser cette commande!");
			        return 1;
			    }
	            if(BusCall < 999)
	            {
	                if(IsPlayerConnected(BusCall))
	                {
	                    GetPlayerName(playerid, sendername, sizeof(sendername));
	                	GetPlayerName(BusCall, giveplayer, sizeof(giveplayer));
	                	format(string, sizeof(string), "Vous avez l'appel %s, sa position est marquée sur votre carte ( marqueur rouge ).",giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
                        format(string, sizeof(string), "Le Chauffeur de bus %s à accepté votre appel, attendez ici.",sendername);
						SendClientMessage(BusCall, COLOR_WHITE, string);
						new Float:X,Float:Y,Float:Z;
						GetPlayerPos(BusCall, X, Y, Z);
						SetPlayerCheckpoint(playerid, X, Y, Z, 5);
						GameTextForPlayer(playerid, "~w~Client~n~~r~Allez au marqueur rouge", 5000, 1);
						BusCallTime[playerid] = 1;
						BusAccepted[playerid] = BusCall;
						BusCall = 999;
						return 1;
					}
	            }
	            else
	            {
	                SendClientMessage(playerid, COLOR_GREY, "Personne n'à appelé de BusS!");
			    	return 1;
	            }
			}
			else if(strcmp(x_job,"medecin",true) == 0)
			{
			    if(PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pLeader] == 4)
			    {
		            if(MedicCallTime[playerid] > 0)
		            {
		                SendClientMessage(playerid, COLOR_GREY, "Vous avez déjà accepté un appel!");
					    return 1;
		            }
		            if(PlayerOnMission[playerid] > 0)
				    {
				        SendClientMessage(playerid, COLOR_GREY, "Vous êtes en mission, vous ne pouvez pas utiliser cette commande!");
				        return 1;
				    }
		            if(MedicCall < 999)
		            {
		                if(IsPlayerConnected(MedicCall))
		                {
		                    GetPlayerName(playerid, sendername, sizeof(sendername));
		                	GetPlayerName(MedicCall, giveplayer, sizeof(giveplayer));
		                	format(string, sizeof(string), "Vous acceptez l'appel de %s, sa position est marquée sur votre carte ( marqueur rouge ).",giveplayer);
							SendClientMessage(playerid, COLOR_WHITE, string);
							SendClientMessage(playerid, COLOR_WHITE, "Après 30 secondes le marqueur disparetra.");
	                        format(string, sizeof(string), "Le Medecin %s à accepté votre appel, restez ici.",sendername);
							SendClientMessage(MedicCall, COLOR_WHITE, string);
							new Float:X,Float:Y,Float:Z;
							GetPlayerPos(MedicCall, X, Y, Z);
							SetPlayerCheckpoint(playerid, X, Y, Z, 5);
							GameTextForPlayer(playerid, "~w~Client~n~~r~Allez au marqueur rouge", 5000, 1);
							MedicCallTime[playerid] = 1;
							MedicCall = 999;
							return 1;
						}
		            }
		            else
		            {
		                SendClientMessage(playerid, COLOR_GREY, "Personne n'à appelé de medecin!");
				    	return 1;
		            }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas medecin!");
				    return 1;
				}
			}
			else if(strcmp(x_job,"mecanicien",true) == 0)
			{
			    if(PlayerInfo[playerid][pJob] != 7)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas mécanicien!");
				    return 1;
			    }
	            if(MechanicCallTime[playerid] > 0)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "Vous avez déjà accepté un appel!");
				    return 1;
	            }
	            if(PlayerOnMission[playerid] > 0)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "Vous êtes en mission, vous ne pouvez pas utiliser cette commande!");
			        return 1;
			    }
	            if(MechanicCall < 999)
	            {
	                if(IsPlayerConnected(MechanicCall))
	                {
	                    GetPlayerName(playerid, sendername, sizeof(sendername));
	                	GetPlayerName(MechanicCall, giveplayer, sizeof(giveplayer));
	                	format(string, sizeof(string), "Vous avez accepté l'appel de %s, sa position est marquée sur votre carte ( marqueur rouge ).",giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
						SendClientMessage(playerid, COLOR_WHITE, "Après 90 secondes le marqueur disparetra.");
                        format(string, sizeof(string), "Le Mecanicien %s à accepté votre appel, restez ici.",sendername);
						SendClientMessage(MechanicCall, COLOR_WHITE, string);
						new Float:X,Float:Y,Float:Z;
						GetPlayerPos(MechanicCall, X, Y, Z);
						SetPlayerCheckpoint(playerid, X, Y, Z, 5);
						GameTextForPlayer(playerid, "~w~Client~n~~r~Allez au marqueur rouge", 5000, 1);
						MechanicCallTime[playerid] = 1;
						MechanicCall = 999;
						return 1;
					}
	            }
	            else
	            {
	                SendClientMessage(playerid, COLOR_GREY, "Personne n'à appelé de mécanicien!");
			    	return 1;
	            }
			}
            else if(strcmp(x_job,"job",true) == 0)
			{
			    if(GettingJob[playerid] > 0)
			    {
			        /*if(PlayerInfo[playerid][pMember] >= 1 && PlayerInfo[playerid][pMember] <= 4 || PlayerInfo[playerid][pMember] > 5 && PlayerInfo[playerid][pMember] < 15 || PlayerInfo[playerid][pFMember] < 255)
			        {
						SendClientMessage(playerid, COLOR_GREY, "   Cant get a Job, you are in a Family !");
     					return 1;
			        }*/
			        SendClientMessage(playerid, COLOR_WHITE, "Vous avez confirmé que vous vouliez ce travail, vous avez reçu un contrat de 5 heures.");
			        SendClientMessage(playerid, COLOR_WHITE, "Félicitation pour votre nouveau travail, Tapez /aide pour voir vos nouvelles commandes.");
			        PlayerInfo[playerid][pJob] = GettingJob[playerid];
			        GettingJob[playerid] = 0;
			        return 1;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas à une place d'embauche!");
			        return 1;
			    }
			}
			else if(strcmp(x_job,"plein",true) == 0)
			{
			    if(RefillOffer[playerid] < 999)
			    {
			        if(IsPlayerConnected(RefillOffer[playerid]))
			        {
			            if(GetPlayerMoney(playerid) > RefillPrice[playerid])
			            {
			                GetPlayerName(RefillOffer[playerid], giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
			                new car = gLastCar[playerid];
			                new fuel;
			                PlayerInfo[RefillOffer[playerid]][pMechSkill] ++;
			                if(PlayerInfo[RefillOffer[playerid]][pMechSkill] == 50)
							{ SendClientMessage(RefillOffer[playerid], COLOR_YELLOW, "Votre niveau mécanicien est de 2, vous pouvez ajouté plus d'essence dans les voitures."); }
							else if(PlayerInfo[RefillOffer[playerid]][pMechSkill] == 100)
							{ SendClientMessage(RefillOffer[playerid], COLOR_YELLOW, "Votre niveau mécanicien est de 3, vous pouvez ajouté plus d'essence dans les voitures."); }
							else if(PlayerInfo[RefillOffer[playerid]][pMechSkill] == 200)
							{ SendClientMessage(RefillOffer[playerid], COLOR_YELLOW, "Votre niveau mécanicien est de 4, vous pouvez ajouté plus d'essence dans les voitures."); }
							else if(PlayerInfo[RefillOffer[playerid]][pMechSkill] == 400)
							{ SendClientMessage(RefillOffer[playerid], COLOR_YELLOW, "Votre niveau mécanicien est de 5, vous pouvez ajouté plus d'essence dans les voitures."); }
							new level = PlayerInfo[RefillOffer[playerid]][pMechSkill];
							if(level >= 0 && level <= 50)
							{ fuel = 15; }
							else if(level >= 51 && level <= 100)
							{ fuel = 40; }
							else if(level >= 101 && level <= 200)
							{ fuel = 60; }
							else if(level >= 201 && level <= 400)
							{ fuel = 80; }
							else if(level >= 401)
							{ fuel = 100; }
			                format(string, sizeof(string), "%d% d'essence ont été ajouté dans votre reservoir pour $%d par le mécanicien %s.",fuel,RefillPrice[playerid],giveplayer);
							SendClientMessage(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), "Vous avez remplis le réservoir de %s avec %d%, pour $%d, qui seront ajouté à votre Paye.",sendername,fuel,RefillPrice[playerid]);
							SendClientMessage(RefillOffer[playerid], COLOR_WHITE, string);
							PlayerInfo[RefillOffer[playerid]][pPayCheck] += RefillPrice[playerid] * 5;
							SafeGivePlayerMoney(playerid, -RefillPrice[playerid]);
							if(Gas[car] < 110) { Gas[car] += fuel; }
					        RefillOffer[playerid] = 999;
							RefillPrice[playerid] = 0;
							return 1;
			            }
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas assez d'argent!");
						    return 1;
						}
			        }
			        return 1;
			    }
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Personne ne vous propose d'ajouté de l'essence dans votre réservoir !");
				    return 1;
				}
			}
			else if(strcmp(x_job,"serrermain",true) == 0)
			{
			    if(HandshakeOffer[playerid] < 999)
			    {
			        if(IsPlayerConnected(HandshakeOffer[playerid]))
			        {
			            if(!IsPlayerInAnyVehicle(playerid))
			            {
			            	if(ProxDetectorS(2.0, playerid, HandshakeOffer[playerid]))
							{
				           		GetPlayerName(HandshakeOffer[playerid], giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), " Vous avez serrer la main de %s.", giveplayer);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), " %s a accepté de vous serrer la main.", sendername);
								SendClientMessage(HandshakeOffer[playerid], COLOR_LIGHTBLUE, string);
								ClearAnimations(playerid);
								ClearAnimations(HandshakeOffer[playerid]);
								SetPlayerFacingPlayer(playerid, HandshakeOffer[playerid]);
								SetPlayerFacingPlayer(HandshakeOffer[playerid], playerid);
								if(HandshakeType[playerid] == 1)
								{
									ApplyAnimation(playerid, "GANGS","hndshkaa", 4.0,0,0,0,0,0);
									ApplyAnimation(HandshakeOffer[playerid],"GANGS","hndshkaa",4.0,0,0,0,0,0);
								}
								else if(HandshakeType[playerid] == 2)
								{
									ApplyAnimation(playerid,"GANGS","hndshkba",4.0,0,0,0,0,0);
									ApplyAnimation(HandshakeOffer[playerid],"GANGS","hndshkba",4.0,0,0,0,0,0);
								}
								else if(HandshakeType[playerid] == 3)
								{
									ApplyAnimation(playerid,"GANGS","hndshkda",4.0,0,0,0,0,0);
									ApplyAnimation(HandshakeOffer[playerid],"GANGS","hndshkda",4.0,0,0,0,0,0);
								}
								else if(HandshakeType[playerid] == 4)
								{
									ApplyAnimation(playerid,"GANGS","hndshkea",4.0,0,0,0,0,0);
									ApplyAnimation(HandshakeOffer[playerid],"GANGS","hndshkea",4.0,0,0,0,0,0);
								}
								else if(HandshakeType[playerid] == 5)
								{
									ApplyAnimation(playerid,"GANGS","hndshkfa",4.0,0,0,0,0,0);
									ApplyAnimation(HandshakeOffer[playerid],"GANGS","hndshkfa",4.0,0,0,0,0,0);
								}
								else if(HandshakeType[playerid] == 6)
								{
								    ApplyAnimation(playerid,"GANGS","prtial_hndshk_biz_01",4.0,0,0,0,0,0);
								    ApplyAnimation(HandshakeOffer[playerid],"GANGS","prtial_hndshk_biz_01",4.0,0,0,0,0,0);
								}
								HandshakeOffer[playerid] = 999;
								HandshakeType[playerid] = 0;
								return 1;
							}
							else
							{
						    	SendClientMessage(playerid, COLOR_GREY, "   Vous devez être a coté du joueur !");
						    	return 1;
							}
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Vous devez être hors d'un véhicule !");
							return 1;
						}
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Personne ne bous a proposé de serrer votre main !");
				    return 1;
				}
			}
			else if(strcmp(x_job,"live",true) == 0)
			{
			    if(LiveOffer[playerid] < 999)
			    {
			        if(IsPlayerConnected(LiveOffer[playerid]))
			        {
				        if (ProxDetectorS(5.0, playerid, LiveOffer[playerid]))
						{
						    SendClientMessage(playerid, COLOR_WHITE, "Vous ne pouvez plus bouger jusqu'a la fin du live.");
							SendClientMessage(LiveOffer[playerid], COLOR_WHITE, "Vous ne pouvez plus bouger jusqu'a la fin du live (Utilisez /live pour finir).");
							TogglePlayerControllable(playerid, 0);
							TogglePlayerControllable(LiveOffer[playerid], 0);
							TalkingLive[playerid] = LiveOffer[playerid];
							TalkingLive[LiveOffer[playerid]] = playerid;
							LiveOffer[playerid] = 999;
							return 1;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "Vous êtes trop loin du journaliste!");
							return 1;
						}
					}
					return 1;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Aucun journaliste ne vous à proposé de live!");
				    return 1;
				}
			}
			else if(strcmp(x_job,"avocat",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /accepter avocat [playerid/PartOfName]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if (gTeam[playerid] == 2)
				{
				    if(IsPlayerConnected(giveplayerid))
				    {
				        if(giveplayerid != INVALID_PLAYER_ID)
				        {
				            if(PlayerInfo[giveplayerid][pJob] == 2)
				            {
							    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "Vous avez autorisé %s à sortir quelqu'un de prison.", giveplayer);
								SendClientMessage(playerid, COLOR_WHITE,string);
								format(string, sizeof(string), "L'Officier %s vous à autorisé à libéré un prisonier. (Utilisez /gratuit)", sendername);
								SendClientMessage(giveplayerid, COLOR_WHITE,string);
								ApprovedLawyer[giveplayerid] = 1;
							    return 1;
							}
						}
					}
					return 1;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas policier, avocat");
				    return 1;
				}
			}
			else if(strcmp(x_job,"gardeducorp",true) == 0)
			{
			    if(GuardOffer[playerid] < 999)
			    {
			        if(GetPlayerMoney(playerid) > GuardPrice[playerid])
				    {
					    if(IsPlayerConnected(GuardOffer[playerid]))
					    {
					        GetPlayerName(GuardOffer[playerid], giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "Vous avez accepté la protection pour $%d du Garde du Corp %s.",GuardPrice[playerid],giveplayer);
							SendClientMessage(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), "%s à accepté votre protection, et les $%d seront ajouté a votre Paye.",sendername,GuardPrice[playerid]);
							SendClientMessage(GuardOffer[playerid], COLOR_WHITE, string);
							PlayerInfo[GuardOffer[playerid]][pPayCheck] += GuardPrice[playerid] * 5;
							SafeGivePlayerMoney(playerid, -GuardPrice[playerid]);
					        GuardOffer[playerid] = 999;
							GuardPrice[playerid] = 0;
							return 1;
						}
						return 1;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas assez d'argent!");
					    return 1;
					}
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "Personne ne vous offre un protection!");
			        return 1;
			    }
			}
			else if(strcmp(x_job,"drogues",true) == 0 || strcmp(x_job,"drogue",true) == 0)
			{
			    if(DrugOffer[playerid] < 999)
			    {
			        if(GetPlayerMoney(playerid) > DrugPrice[playerid])
				    {
				        if(PlayerInfo[playerid][pDrugs] < 7)
				        {
					        if(IsPlayerConnected(DrugOffer[playerid]))
					        {
					            GetPlayerName(DrugOffer[playerid], giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "Vous avez acheté %d grammes pour $%d du dealer de drogue %s.",DrugGram[playerid],DrugPrice[playerid],giveplayer);
								SendClientMessage(playerid, COLOR_WHITE, string);
								format(string, sizeof(string), "%s à acheté vos %d grammes, les $%d seront ajouté à votre Paye.",sendername,DrugGram[playerid],DrugPrice[playerid]);
								SendClientMessage(DrugOffer[playerid], COLOR_WHITE, string);
								PlayerInfo[DrugOffer[playerid]][pPayCheck] += DrugPrice[playerid] * 5;
								PlayerInfo[DrugOffer[playerid]][pDrugsSkill] ++;
								SafeGivePlayerMoney(playerid, -DrugPrice[playerid]);
								PlayerInfo[playerid][pDrugs] += DrugGram[playerid];
								PlayerInfo[DrugOffer[playerid]][pDrugs] -= DrugGram[playerid];
								if(PlayerInfo[DrugOffer[playerid]][pDrugsSkill] == 50)
								{ SendClientMessage(DrugOffer[playerid], COLOR_YELLOW, "Votre niveau de dealer de drogue est de 2, vous pouvez acheté plus de drogue, et moins cher."); }
								else if(PlayerInfo[DrugOffer[playerid]][pDrugsSkill] == 100)
								{ SendClientMessage(DrugOffer[playerid], COLOR_YELLOW, "Votre niveau de dealer de drogue est de 3, vous pouvez acheté plus de drogue, et moins cher."); }
								else if(PlayerInfo[DrugOffer[playerid]][pDrugsSkill] == 200)
								{ SendClientMessage(DrugOffer[playerid], COLOR_YELLOW, "Votre niveau de dealer de drogue est de 4, vous pouvez acheté plus de drogue, et moins cher."); }
								else if(PlayerInfo[DrugOffer[playerid]][pDrugsSkill] == 400)
								{ SendClientMessage(DrugOffer[playerid], COLOR_YELLOW, "Votre niveau de dealer de drogue est de 5, vous pouvez acheté plus de drogue, et moins cher."); }
					            DrugOffer[playerid] = 999;
								DrugPrice[playerid] = 0;
								DrugGram[playerid] = 0;
								return 1;
							}
							return 1;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "Vous avez déjà déjà assez de drogue, utilisez ce que vous avez d'abord!");
						    return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas assez d'argent!");
					    return 1;
					}
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "Personne ne vous offre de drogues!");
			        return 1;
			    }
			}
			else if(strcmp(x_job,"permis",true) == 0)
			{
			    if(LicenseOffer[playerid] < 999)
			    {
			        if(GetPlayerMoney(playerid) > LicensePrice[playerid])
				    {
				        /*if(PlayerInfo[playerid][pDrugs] < 7)
				        {
					        if(IsPlayerConnected(DrugOffer[playerid]))
					        {
					            GetPlayerName(DrugOffer[playerid], giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), " You bought %d gram for $%d from Drug Dealer %s.",DrugGram[playerid],DrugPrice[playerid],giveplayer);
								SendClientMessage(playerid, COLOR_WHITE, string);
								format(string, sizeof(string), " %s has bought your %d gram, the $%d was added to your PayCheck.",sendername,DrugGram[playerid],DrugPrice[playerid]);
								SendClientMessage(DrugOffer[playerid], COLOR_WHITE, string);
								PlayerInfo[DrugOffer[playerid]][pPayCheck] += DrugPrice[playerid] * 5;
								PlayerInfo[DrugOffer[playerid]][pDrugsSkill] ++;
								SafeGivePlayerMoney(playerid, -DrugPrice[playerid]);
								PlayerInfo[playerid][pDrugs] += DrugGram[playerid];
								PlayerInfo[DrugOffer[playerid]][pDrugs] -= DrugGram[playerid];
								if(PlayerInfo[DrugOffer[playerid]][pDrugsSkill] == 50)
								{ SendClientMessage(DrugOffer[playerid], COLOR_YELLOW, " Your Drug Dealer Skill is now Level 2, you can buy more Grams and Cheaper."); }
								else if(PlayerInfo[DrugOffer[playerid]][pDrugsSkill] == 100)
								{ SendClientMessage(DrugOffer[playerid], COLOR_YELLOW, " Your Drug Dealer Skill is now Level 3, you can buy more Grams and Cheaper."); }
								else if(PlayerInfo[DrugOffer[playerid]][pDrugsSkill] == 200)
								{ SendClientMessage(DrugOffer[playerid], COLOR_YELLOW, " Your Drug Dealer Skill is now Level 4, you can buy more Grams and Cheaper."); }
								else if(PlayerInfo[DrugOffer[playerid]][pDrugsSkill] == 400)
								{ SendClientMessage(DrugOffer[playerid], COLOR_YELLOW, " Your Drug Dealer Skill is now Level 5, you can buy more Grams and Cheaper."); }
					            DrugOffer[playerid] = 999;
								DrugPrice[playerid] = 0;
								DrugGram[playerid] = 0;
								return 1;
							}
							return 1;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   You are fully loaded with Drugs, use them first !");
						    return 1;
						}*/
						if(LicenseType[playerid] == 0 || LicenseType[playerid] > 7)
						{
						    return 1;
						}
						if(IsPlayerConnected(LicenseOffer[playerid]))
						{
						    GetPlayerName(LicenseOffer[playerid], giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							if(LicenseType[playerid] == 1)
							{
							    if(PlayerInfo[playerid][pCarLic] == 1)
							    {
							        SendClientMessage(playerid, COLOR_GREY, "Vous avez déjà le permis de Conduire.");
							    }
							    else
							    {
							    	format(string, sizeof(string), " You bought Drivers License for $%d from Instructor %s.",LicensePrice[playerid],giveplayer);
									SendClientMessage(playerid, COLOR_WHITE, string);
									format(string, sizeof(string), " %s has bought your Drivers License for $%d and it was added to your PayCheck.",sendername,LicensePrice[playerid]);
									SendClientMessage(LicenseOffer[playerid], COLOR_WHITE, string);
									PlayerInfo[playerid][pCarLic] = 1;
									SafeGivePlayerMoney(playerid, -LicensePrice[playerid]);
									PlayerInfo[LicenseOffer[playerid]][pPayCheck] += LicensePrice[playerid] * 5;
								}
							}
							if(LicenseType[playerid] == 2)
							{
							    if(PlayerInfo[playerid][pFlyLic] == 1)
							    {
							        SendClientMessage(playerid, COLOR_GREY, "Vous avez déjà le permis de vol.");
							    }
							    else
							    {
							    	format(string, sizeof(string), " You bought Flying License for $%d from Instructor %s.",LicensePrice[playerid],giveplayer);
									SendClientMessage(playerid, COLOR_WHITE, string);
									format(string, sizeof(string), " %s has bought your Flying License for $%d and it was added to your PayCheck.",sendername,LicensePrice[playerid]);
									SendClientMessage(LicenseOffer[playerid], COLOR_WHITE, string);
									PlayerInfo[playerid][pFlyLic] = 1;
									SafeGivePlayerMoney(playerid, -LicensePrice[playerid]);
									PlayerInfo[LicenseOffer[playerid]][pPayCheck] += LicensePrice[playerid] * 5;
								}
							}
							if(LicenseType[playerid] == 3)
							{
							    if(PlayerInfo[playerid][pBoatLic] == 1)
							    {
							        SendClientMessage(playerid, COLOR_GREY, "Vous avez déjà le permis de navigation.");
							    }
							    else
							    {
							    	format(string, sizeof(string), " You bought Sailing License for $%d from Instructor %s.",LicensePrice[playerid],giveplayer);
									SendClientMessage(playerid, COLOR_WHITE, string);
									format(string, sizeof(string), " %s has bought your Sailing License for $%d and it was added to your PayCheck.",sendername,LicensePrice[playerid]);
									SendClientMessage(LicenseOffer[playerid], COLOR_WHITE, string);
									PlayerInfo[playerid][pBoatLic] = 1;
									SafeGivePlayerMoney(playerid, -LicensePrice[playerid]);
									PlayerInfo[LicenseOffer[playerid]][pPayCheck] += LicensePrice[playerid] * 5;
								}
							}
							if(LicenseType[playerid] == 4)
							{
							    if(PlayerInfo[playerid][pFishLic] == 1)
							    {
							        SendClientMessage(playerid, COLOR_GREY, "Vous avez déjà le permis de pêche.");
							    }
							    else
							    {
							    	format(string, sizeof(string), " You bought Fishing License for $%d from Instructor %s.",LicensePrice[playerid],giveplayer);
									SendClientMessage(playerid, COLOR_WHITE, string);
									format(string, sizeof(string), " %s has bought your Fishing License for $%d and it was added to your PayCheck.",sendername,LicensePrice[playerid]);
									SendClientMessage(LicenseOffer[playerid], COLOR_WHITE, string);
									PlayerInfo[playerid][pFishLic] = 1;
									SafeGivePlayerMoney(playerid, -LicensePrice[playerid]);
									PlayerInfo[LicenseOffer[playerid]][pPayCheck] += LicensePrice[playerid] * 5;
								}
							}
							if(LicenseType[playerid] == 5)
							{
							    if(PlayerInfo[playerid][pGunLic] == 1)
							    {
							        SendClientMessage(playerid, COLOR_GREY, "Vous avez déjà le permis d'arme.");
								}
								else
								{
							    	format(string, sizeof(string), " You bought Weapon License for $%d from Instructor %s.",LicensePrice[playerid],giveplayer);
									SendClientMessage(playerid, COLOR_WHITE, string);
									format(string, sizeof(string), " %s has bought your Weapon License for $%d and it was added to your PayCheck.",sendername,LicensePrice[playerid]);
									SendClientMessage(LicenseOffer[playerid], COLOR_WHITE, string);
									PlayerInfo[playerid][pGunLic] = 1;
									SafeGivePlayerMoney(playerid, -LicensePrice[playerid]);
									PlayerInfo[LicenseOffer[playerid]][pPayCheck] += LicensePrice[playerid] * 5;
								}
							}
							if(LicenseType[playerid] == 6)
							{
							    if(PlayerInfo[playerid][pLourdLic] == 1)
							    {
							        SendClientMessage(playerid, COLOR_GREY, "Vous avez déjà le permis poid lourd.");
								}
								else
								{
							    	format(string, sizeof(string), " You bought poid lourd License for $%d from Instructor %s.",LicensePrice[playerid],giveplayer);
									SendClientMessage(playerid, COLOR_WHITE, string);
									format(string, sizeof(string), " %s has bought your poid lourd License for $%d and it was added to your PayCheck.",sendername,LicensePrice[playerid]);
									SendClientMessage(LicenseOffer[playerid], COLOR_WHITE, string);
									PlayerInfo[playerid][pLourdLic] = 1;
									SafeGivePlayerMoney(playerid, -LicensePrice[playerid]);
									PlayerInfo[LicenseOffer[playerid]][pPayCheck] += LicensePrice[playerid] * 5;
								}
							}
							if(LicenseType[playerid] == 7)
							{
							    if(PlayerInfo[playerid][pMotoLic] == 1)
							    {
							        SendClientMessage(playerid, COLOR_GREY, "Vous avez déjà le permis moto.");
								}
								else
								{
							    	format(string, sizeof(string), " You bought moto License for $%d from Instructor %s.",LicensePrice[playerid],giveplayer);
									SendClientMessage(playerid, COLOR_WHITE, string);
									format(string, sizeof(string), " %s has bought your moto License for $%d and it was added to your PayCheck.",sendername,LicensePrice[playerid]);
									SendClientMessage(LicenseOffer[playerid], COLOR_WHITE, string);
									PlayerInfo[playerid][pMotoLic] = 1;
									SafeGivePlayerMoney(playerid, -LicensePrice[playerid]);
									PlayerInfo[LicenseOffer[playerid]][pPayCheck] += LicensePrice[playerid] * 5;
								}
							}
							LicenseOffer[playerid] = 999;
							LicensePrice[playerid] = 0;
							LicenseType[playerid] = 0;
							return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   You can't afford that License !");
					    return 1;
					}
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   No-one offerd you any License !");
			        return 1;
			    }
			}
			else if(strcmp(x_job,"sex",true) == 0)
			{
			    if(SexOffer[playerid] < 999)
				{
					if(GetPlayerMoney(playerid) > SexPrice[playerid])
			  		{
						if (IsPlayerConnected(SexOffer[playerid]))
						{
						    new Car = GetPlayerVehicleID(playerid);
						    if(IsPlayerInAnyVehicle(playerid) && IsPlayerInVehicle(SexOffer[playerid], Car))
						    {
								GetPlayerName(SexOffer[playerid], giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "Vous avez couché avec une la prostituée %s, pour $%d.", giveplayer, SexPrice[playerid]);
								SendClientMessage(playerid, COLOR_WHITE, string);
								format(string, sizeof(string), "%s à couché avec vous, les $%d seront ajouté a votre Paye.", sendername, SexPrice[playerid]);
								SendClientMessage(SexOffer[playerid], COLOR_WHITE, string);
								PlayerInfo[SexOffer[playerid]][pPayCheck] += SexPrice[playerid] * 5;
								SafeGivePlayerMoney(playerid, -SexPrice[playerid]);
								PlayerInfo[SexOffer[playerid]][pSexSkill] ++;
								if(PlayerInfo[SexOffer[playerid]][pSexSkill] == 50)
								{ SendClientMessage(SexOffer[playerid], COLOR_YELLOW, "Votre niveau de prosituée est de 2, vous offrez un meilleur service (vie) et moins de chance d'avoir une MST."); }
								else if(PlayerInfo[SexOffer[playerid]][pSexSkill] == 100)
								{ SendClientMessage(SexOffer[playerid], COLOR_YELLOW, "Votre niveau de prosituée est de 3, vous offrez un meilleur service (vie) et moins de chance d'avoir une MST."); }
								else if(PlayerInfo[SexOffer[playerid]][pSexSkill] == 200)
								{ SendClientMessage(SexOffer[playerid], COLOR_YELLOW, "Votre niveau de prosituée est de 4, vous offrez un meilleur service (vie) et moins de chance d'avoir une MST."); }
								else if(PlayerInfo[SexOffer[playerid]][pSexSkill] == 400)
								{ SendClientMessage(SexOffer[playerid], COLOR_YELLOW, "Votre niveau de prosituée est de 5, vous offrez un meilleur service (vie) et moins de chance d'avoir une MST."); }
								if(STDPlayer[playerid] == 0)
								{
								    if(Condom[playerid] < 1)
									{
									    new Float:health;
									    new level = PlayerInfo[SexOffer[playerid]][pSexSkill];
									    if(level >= 0 && level <= 50)
									    {
									        if(GetPlayerHealth(playerid, health) < 150) {
											SetPlayerHealth(playerid, health + 30.0); }
											new rand = random(sizeof(STD1));
											STDPlayer[playerid] = STD1[rand];
											STDPlayer[SexOffer[playerid]] = STD1[rand];
											if(STD1[rand] == 0 || Condom[playerid] > 0) { SendClientMessage(playerid, COLOR_WHITE, "Vous avez gagné 30 de vie sans MST."); SendClientMessage(SexOffer[playerid], COLOR_WHITE, "Vous n'avez pas eu de MST pendant que vous avez fait l'amour."); }
											else if(STD1[rand] == 1) { SendClientMessage(playerid, COLOR_WHITE, "Vous avez gagné 30 de vie + le SIDA."); SendClientMessage(SexOffer[playerid], COLOR_WHITE, "Vous avez eu le SIDA pendant que vous faisiez l'amour."); }
											else if(STD1[rand] == 2) { SendClientMessage(playerid, COLOR_WHITE, "Vous avez gagné 30 de vie + plus la Gonorrhée."); SendClientMessage(SexOffer[playerid], COLOR_WHITE, "Vous avez eu la Gonorrhée pendant que vous faisiez l'amour."); }
											else if(STD1[rand] == 3) { SendClientMessage(playerid, COLOR_WHITE, "Vous avez gagné 30 de vie + la Syphilis."); SendClientMessage(SexOffer[playerid], COLOR_WHITE, "Vous avez eu la Syphilis pendant que vous faisiez l'amour."); }
										}
										else if(level >= 51 && level <= 100)
									    {
									        if(GetPlayerHealth(playerid, health) < 150) {
											SetPlayerHealth(playerid, health + 60.0); }
											new rand = random(sizeof(STD2));
											STDPlayer[playerid] = STD2[rand];
											STDPlayer[SexOffer[playerid]] = STD2[rand];
											if(STD2[rand] == 0 || Condom[playerid] > 0) { SendClientMessage(playerid, COLOR_WHITE, "Vous avez gagné 60 de vie sans MST."); SendClientMessage(SexOffer[playerid], COLOR_WHITE, "Vous n'avez pas eu de MST pendant que vous avez fait l'amour."); }
											else if(STD2[rand] == 1) { SendClientMessage(playerid, COLOR_WHITE, "Vous avez gagné 60 de vie + le SIDA."); SendClientMessage(SexOffer[playerid], COLOR_WHITE, "Vous avez eu le SIDA pendant que vous faisiez l'amour."); }
											else if(STD2[rand] == 2) { SendClientMessage(playerid, COLOR_WHITE, "Vous avez gagné 60 de vie + plus la Gonorrhée."); SendClientMessage(SexOffer[playerid], COLOR_WHITE, "Vous avez eu la Gonorrhée pendant que vous faisiez l'amour."); }
											else if(STD2[rand] == 3) { SendClientMessage(playerid, COLOR_WHITE, "Vous avez gagné 60 de vie + la Syphilis."); SendClientMessage(SexOffer[playerid], COLOR_WHITE, "Vous avez eu la Syphilis pendant que vous faisiez l'amour."); }
										}
										else if(level >= 101 && level <= 200)
									    {
									        if(GetPlayerHealth(playerid, health) < 150) {
											SetPlayerHealth(playerid, health + 90.0); }
											new rand = random(sizeof(STD3));
											STDPlayer[playerid] = STD3[rand];
											STDPlayer[SexOffer[playerid]] = STD3[rand];
											if(STD3[rand] == 0 || Condom[playerid] > 0) { SendClientMessage(playerid, COLOR_WHITE, "Vous avez gagné 90 de vie sans MST."); SendClientMessage(SexOffer[playerid], COLOR_WHITE, "Vous n'avez pas eu de MST pendant que vous avez fait l'amour."); }
											else if(STD3[rand] == 1) { SendClientMessage(playerid, COLOR_WHITE, "Vous avez gagné 90 de vie + le SIDA."); SendClientMessage(SexOffer[playerid], COLOR_WHITE, "Vous avez eu le SIDA pendant que vous faisiez l'amour."); }
											else if(STD3[rand] == 2) { SendClientMessage(playerid, COLOR_WHITE, "Vous avez gagné 90 de vie + plus la Gonorrhée."); SendClientMessage(SexOffer[playerid], COLOR_WHITE, "Vous avez eu la Gonorrhée pendant que vous faisiez l'amour."); }
											else if(STD3[rand] == 3) { SendClientMessage(playerid, COLOR_WHITE, "Vous avez gagné 90 de vie + la Syphilis."); SendClientMessage(SexOffer[playerid], COLOR_WHITE, "Vous avez eu la Syphilis pendant que vous faisiez l'amour."); }
										}
										else if(level >= 201 && level <= 400)
									    {
									        if(GetPlayerHealth(playerid, health) < 150) {
											SetPlayerHealth(playerid, health + 120.0); }
											new rand = random(sizeof(STD4));
											STDPlayer[playerid] = STD4[rand];
											STDPlayer[SexOffer[playerid]] = STD4[rand];
											if(STD4[rand] == 0 || Condom[playerid] > 0) { SendClientMessage(playerid, COLOR_WHITE, "Vous avez gagné 120 de vie sans MST."); SendClientMessage(SexOffer[playerid], COLOR_WHITE, "Vous n'avez pas eu de MST pendant que vous avez fait l'amour."); }
											else if(STD4[rand] == 1) { SendClientMessage(playerid, COLOR_WHITE, "Vous avez gagné 120 de vie + le SIDA."); SendClientMessage(SexOffer[playerid], COLOR_WHITE, "Vous avez eu le SIDA pendant que vous faisiez l'amour."); }
											else if(STD4[rand] == 2) { SendClientMessage(playerid, COLOR_WHITE, "Vous avez gagné 120 de vie + plus la Gonorrhée."); SendClientMessage(SexOffer[playerid], COLOR_WHITE, "Vous avez eu la Gonorrhée pendant que vous faisiez l'amour."); }
											else if(STD4[rand] == 3) { SendClientMessage(playerid, COLOR_WHITE, "Vous avez gagné 120 de vie + la Syphilis."); SendClientMessage(SexOffer[playerid], COLOR_WHITE, "Vous avez eu la Syphilis pendant que vous faisiez l'amour."); }
										}
										else if(level >= 401)
										{
										    if(GetPlayerHealth(playerid, health) < 150) {
											SetPlayerHealth(playerid, health + 150.0); }
											SendClientMessage(playerid, COLOR_WHITE, "Votre niveau de prostituée est si haut que vos client et vous n'aurez plus de MST.");
											SendClientMessage(SexOffer[playerid], COLOR_WHITE, "Le niveau de cette prostituée est si haut que vous avez gagné beaucoup de vie et pas de MST.");
										}
				      				}
									else
									{
									    SendClientMessage(SexOffer[playerid], COLOR_WHITE, "Ce joueur avait un préservatif.");
									    SendClientMessage(playerid, COLOR_WHITE, "Vous avez utilisé un préservatif.");
									    Condom[playerid] --;
									}
								}
								else
								{
								    SendClientMessage(SexOffer[playerid], COLOR_GREY, "Ce joueur à déjà une MST.");
								    return 1;
								}
								SexOffer[playerid] = 999;
								return 1;
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "Vous ou la prostituée n'êtes pas dans la voiture!");
							    return 1;
							}
						}//Connected or not
						return 1;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas assez d'argent!");
					    return 1;
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Aucune prostituée ne vous a offert du sex!");
				    return 1;
				}
			}
			else if(strcmp(x_job,"reparation",true) == 0)
			{
			    if(RepairOffer[playerid] < 999)
			    {
			        if(GetPlayerMoney(playerid) > RepairPrice[playerid])
				    {
					    if(IsPlayerInAnyVehicle(playerid))
					    {
					        if(IsPlayerConnected(RepairOffer[playerid]))
					        {
						        GetPlayerName(RepairOffer[playerid], giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
						        RepairCar[playerid] = GetPlayerVehicleID(playerid);
						        SetVehicleHealth(RepairCar[playerid], 1000.0);
						        RepairVehicle(RepairCar[playerid]);
								format(string, sizeof(string), "Votre véhicule à été réparé pour $%d par le Mécanicien %s.",RepairPrice[playerid],giveplayer);
								SendClientMessage(playerid, COLOR_WHITE, string);
								format(string, sizeof(string), "Vous avez réparé le véhicule de %s, les $%d seront ajouté a votre Paye.",sendername,RepairPrice[playerid]);
								SendClientMessage(RepairOffer[playerid], COLOR_WHITE, string);
								PlayerInfo[RepairOffer[playerid]][pMechSkill] ++;
				                if(PlayerInfo[RepairOffer[playerid]][pMechSkill] == 50)
								{ SendClientMessage(RepairOffer[playerid], COLOR_YELLOW, "Votre niveau de mécanicien est de 2, vous pouvez mettre plus d'essence dans les réservoire des véhicules."); }
								else if(PlayerInfo[RepairOffer[playerid]][pMechSkill] == 100)
								{ SendClientMessage(RepairOffer[playerid], COLOR_YELLOW, "Votre niveau de mécanicien est de 3, vous pouvez mettre plus d'essence dans les réservoire des véhicules."); }
								else if(PlayerInfo[RepairOffer[playerid]][pMechSkill] == 200)
								{ SendClientMessage(RepairOffer[playerid], COLOR_YELLOW, "Votre niveau de mécanicien est de 4, vous pouvez mettre plus d'essence dans les réservoire des véhicules."); }
								else if(PlayerInfo[RepairOffer[playerid]][pMechSkill] == 400)
								{ SendClientMessage(RepairOffer[playerid], COLOR_YELLOW, "Votre niveau de mécanicien est de 5, vous pouvez mettre plus d'essence dans les réservoire des véhicules."); }
								PlayerInfo[RepairOffer[playerid]][pPayCheck] += RepairPrice[playerid] * 5;
								SafeGivePlayerMoney(playerid, -RepairPrice[playerid]);
						        RepairOffer[playerid] = 999;
								RepairPrice[playerid] = 0;
								return 1;
							}
							return 1;
						}
						return 1;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas assez d'argent!");
					    return 1;
					}
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "Personne ne vous offre de réparation!");
			        return 1;
			    }
			}
			else { return 1; }
		}//not connected
		return 1;
	}
    if(strcmp(cmd, "/plein", true) == 0 || strcmp(cmd, "/refill", true) == 0 || strcmp(cmd, "/remplir", true) == 0)
	//if(strcmp(cmd, "/plein", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(PlayerInfo[playerid][pJob] != 7)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas mécanicien!");
		        return 1;
		    }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /plein [playerid/PartOfName] [prix]");
				return 1;
			}
			new playa;
			new money;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			money = strval(tmp);
			if(money < 1 || money > 99999) { SendClientMessage(playerid, COLOR_GREY, "Le prix ne peux pas être en dessous de 1 et au desus de 99999!"); return 1; }
			if(IsPlayerConnected(playa))
			{
			    if(playa != INVALID_PLAYER_ID)
			    {
			        if(ProxDetectorS(8.0, playerid, playa)&& IsPlayerInAnyVehicle(playa))
					{
					    if(playa == playerid) { SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez pas faire ça à vous même!"); return 1; }
					    GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
					    format(string, sizeof(string), "Vous offrez à %s de remplir le réservoir de son véhicule pour $%d .",giveplayer,money);
						SendClientMessage(playerid, COLOR_WHITE, string);
						format(string, sizeof(string), "Le Mécanicien %s vous propose de remplir votre réservoir pour $%d, (Tapez /accepter plein) pour accepter.",sendername,money);
						SendClientMessage(playa, COLOR_WHITE, string);
						RefillOffer[playa] = playerid;
						RefillPrice[playa] = money;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas près de vous ou dans son véhicule.");
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté.");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/repaindre", true) == 0 || strcmp(cmd, "/peinture", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(PlayerInfo[playerid][pJob] != 7)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas mécanicien.");
		        return 1;
		    }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Usage: | /peinture [PlayerID] [Couleur 1] [Couleur 2] [Prix]");
				return 1;
			}
			new playa;
			new money;
			new c1,c2;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Usage: | /peinture [PlayerID] [Couleur 1] [Couleur 2] [Prix]");
				return 1;
			}
			c1 = strval(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Usage: | /peinture [PlayerID] [Couleur 1] [Couleur 2] [Prix]");
				return 1;
			}
			c2 = strval(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Usage: | /peinture [PlayerID] [Couleur 1] [Couleur 2] [Prix]");
				return 1;
			}
			money = strval(tmp);
			if(money < 1 || money > 10000) { SendClientMessage(playerid, COLOR_GREY, "   Le prix doit être compris entre 1 et 10 000."); return 1; }
			if(IsPlayerConnected(playa))
			{
			    if(playa != INVALID_PLAYER_ID)
			    {
			        if(ProxDetectorS(8.0, playerid, playa)&& IsPlayerInAnyVehicle(playa))
					{
					    if(playa == playerid) { SendClientMessage(playerid, COLOR_GREY, "   Vous ne pouvez pas faire ça en étant assis dans le véhicule."); return 1; }
					    if(!IsAtMechanicGarage(playerid))
					    {
					        SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas au garage.");
					        return 1;
					    }
				    	GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), " %s propose a %s de lui repeindre son véhicule pour $%d.",sendername, giveplayer, money);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					    format(string, sizeof(string), "Vous proposez a %s de repeindre sa voiture en %d/%d pour $%d .",giveplayer, c1, c2, money);
						SendClientMessage(playerid, COLOR_GREEN, string);
						format(string, sizeof(string), "Le Mécanicien %s vous propose de repreindre votre véhicule en %d/%d pour $%d. [/accepter peinture]",sendername, c1, c2, money);
						SendClientMessage(playa, COLOR_GREEN, string);
						ChangeColorOffer[playa] = playerid;
						ChangeColorPrice[playa] = money;
						ChangeColor1[playa] = c1;
						ChangeColor2[playa] = c2;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas près de vous / il n'est pas dans une voiture.");
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté.");
			}
		}
		return 1;
	}
    if(strcmp(cmd, "/reparer", true) == 0 || strcmp(cmd, "/repair", true) == 0 || strcmp(cmd, "/repar", true) == 0)
	//if(strcmp(cmd, "/reparer", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(PlayerInfo[playerid][pJob] != 7)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas mécanicien!");
		        return 1;
		    }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /reparer [playerid/PartOfName] [prix]");
				return 1;
			}
			new playa;
			new money;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			money = strval(tmp);
			if(money < 1 || money > 99999) { SendClientMessage(playerid, COLOR_GREY, "Le prix ne peut pas être en dessous de 1 et au desus de 99999!"); return 1; }
			if(IsPlayerConnected(playa))
			{
			    if(playa != INVALID_PLAYER_ID)
			    {
			       /* if (PlayerToPoint(30, playerid,1644.0358,2198.2336,10.8203))//centerpoint 24-7
					{*/
				        if(ProxDetectorS(8.0, playerid, playa)&& IsPlayerInAnyVehicle(playa))
						{
						    if(playa == playerid) { SendClientMessage(playerid, COLOR_GREY, "   Tu ne peux pas te réparer!"); return 1; }
					    	GetPlayerName(playa, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
						    format(string, sizeof(string), "Vous offrez à %s de réparer son véhicule pour $%d .",giveplayer,money);
							SendClientMessage(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), "Le Mécanicien %s vous propose de réparer votre véhicule pour $%d, (tappez /accepter reparation) pour accepter.",sendername,money);
							SendClientMessage(playa, COLOR_WHITE, string);
							RepairOffer[playa] = playerid;
							RepairPrice[playa] = money;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas près de vous/ il n'est pas dans une voiture.");
						}
					/*}
					else
					{
                        SendClientMessage(playerid, COLOR_RED, "Tu n'est pas au garage pour reparer");
					}*/
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté.");
			}
		}
		return 1;
	}

	/*if(strcmp(cmd, "/callcar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(CarCalls[playerid] > 0)
		    {
		        new Float:plocx,Float:plocy,Float:plocz;
	            GetPlayerPos(playerid, plocx, plocy, plocz);
				SetVehiclePos(CarID[playerid],plocx,plocy+4, plocz);
				SendClientMessage(playerid, COLOR_WHITE, " Bought Car has arrived.");
				CarCalls[playerid] -= 1;
				format(string, sizeof(string), " You can call your Bought Car for %d times more.", CarCalls[playerid]);
				SendClientMessage(playerid, COLOR_WHITE, string);
		    }
		    else
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   Invalid action !");
		    }
		}
	    return 1;
	}*/
	if(strcmp(cmd, "/family", true)==0||strcmp(cmd, "/f", true)==0||strcmp(cmd, "/faction", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(PlayerInfo[playerid][pMuted] == 1)
			{
				SendClientMessage(playerid, TEAM_CYAN_COLOR, "Vous ne pouvez pas parler, vous avez été reduis au silence .");
				return 1;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			UnderscoreToSpace( sendername );
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "UTILISATION: (/f)action [Faction OOC Chat]");
				return 1;
			}
			if (PlayerInfo[playerid][pLeader] > 0 || PlayerInfo[playerid][pMember] > 0 || PlayerInfo[playerid][pFMember] < 255)
			{
			    new leader = PlayerInfo[playerid][pLeader];
			    new member = PlayerInfo[playerid][pMember];
       if(member==1)
			    {
			        if(PlayerInfo[playerid][pRank] == 8) { format(string, sizeof(string), "* (( Chéf %s: %s )) *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 7) { format(string, sizeof(string), "* (( Chef adjoint %s: %s ))  *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "* (( Capitaine %s: %s )) *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "* (( Lieutenant %s: %s ))  *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "* (( Sergent %s: %s )) *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "* (( Officier Senior %s: %s ))  *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "* (( Officier %s: %s ))  *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "* (( Cadet %s: %s ))  *", sendername, result); }
					else { format(string, sizeof(string), "* (( Cadet %s: %s )) *", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMember], 0x7BDDA5AA, string);
			    }
       if(member==2)
			    {
			        if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "* (( Directeur du F.B.I %s: %s )) *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "* (( Sous-Directeur du F.B.I %s: %s )) *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "* (( Agent Spécial Du F.B.I %s: %s ))  *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "* (( Agent Formateur du F.B.I %s: %s ))  *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "* (( Agent De Terrain %s: %s ))  *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "* (( Agent Débutant Du F.B.I %s: %s ))  *", sendername, result); }
					else { format(string, sizeof(string), "* (( Agent Débutant Du F.B.I %s: %s )) *", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMember], 0x7BDDA5AA, string);
			    }
			    if(member==3)
			    {
					if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "* (( General %s: %s )) *", sendername, result); }
                    else if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "* (( Colonel %s: %s )) *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "* (( Capitaine %s: %s )) *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "* (( Lieutenant %s: %s ))  *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "* (( Sergent %s: %s ))  *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "* (( Caporal %s: %s ))  *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "* (( Soldat %s: %s ))  *", sendername, result); }
					else { format(string, sizeof(string), "* (( Soldat %s: %s )) *", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMember], 0x7BDDA5AA, string);
			    }
			    if(member==4)
			    {
					if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "* (( Chef %s: %s )) *", sendername, result); }
                    else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "* (( Medecin %s: %s )) *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "* (( Infirmier %s: %s )) *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "* (( Secouriste %s: %s ))  *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "* (( Interime %s: %s ))  *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "* (( Stagière %s: %s ))  *", sendername, result); }
					else { format(string, sizeof(string), "* (( Stagière %s: %s )) *", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMember], 0x7BDDA5AA, string);
			    }
			    if(member==5)
			    {
			        if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "* (( Leader Vagos %s: %s )) *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "* (( Sous Chef Vagos %s: %s )) *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "* (( Vagos Senior %s: %s ))  *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "* (( Vagos Accompli %s: %s ))  *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "* (( Apprenti Vagos %s: %s ))  *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "* (( Mecano %s: %s ))  *", sendername, result); }
					else { format(string, sizeof(string), "* (( Guero %s: %s )) *", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMember], 0x7BDDA5AA, string);
			    }
			    if(member==6)
			    {
			        if(PlayerInfo[playerid][pRank] == 8) { format(string, sizeof(string), "* (( Capo Crimini %s: %s )) *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 7) { format(string, sizeof(string), "* (( Capo Bastone %s: %s )) *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "* (( Consiglieri %s: %s ))  *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "* (( Capo Regime %s: %s )) *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "* (( Sgarrista %s: %s ))  *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "* (( Piciotto %s: %s ))  *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "* (( Giovane D'honore %s: %s ))  *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "* (( Outsider %s: %s ))  *", sendername, result); }
					else { format(string, sizeof(string), "* (( Outsider %s: %s )) *", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMember], 0x7BDDA5AA, string);
				}
				else if(member==7)
				{
				    if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "* (( Bodyguard %s: %s )) *", sendername, result); }
				    if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "* (( Driver %s: %s )) *", sendername, result); }
				    else { format(string, sizeof(string), "* (( Not-assigned %s: %s )) *", sendername, result); }
				    SendFamilyMessage(PlayerInfo[playerid][pMember], 0x7BDDA5AA, string);
				}
				else if(member==8)
				{
				    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "* (( Director %s: %s )) *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "* (( Vice-Director %s: %s )) *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "* (( Special Agent %s: %s ))  *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "* (( Agent %s: %s ))  *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "* (( Marksman %s: %s ))  *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "* (( Freelancer %s: %s ))  *", sendername, result); }
					else { format(string, sizeof(string), "* (( Freelancer %s: %s )) *", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMember], 0x7BDDA5AA, string);
				}
				else if(member==9)
				{
				    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "* (( Network Producer %s: %s )) *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "* (( Network Editor %s: %s )) *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "* (( Network Anchor %s: %s ))  *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "* (( Local Editor %s: %s ))  *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "* (( Local Reporter %s: %s ))  *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "* (( Intern %s: %s ))  *", sendername, result); }
					else { format(string, sizeof(string), "* (( Intern %s: %s )) *", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMember], 0x7BDDA5AA, string);
				}
				else if(member==10)
				{
				    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "* (( Chef %s: %s )) *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "* (( Sous Chef %s: %s )) *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "* (( Sous Chef 2 %s: %s ))  *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "* (( Bon Element %s: %s ))  *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "* (( Initié %s: %s ))  *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "* (( Le Bleu %s: %s ))  *", sendername, result); }
					else { format(string, sizeof(string), "* (( Le Bleu %s: %s )) *", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMember], 0x7BDDA5AA, string);
				}
				else if(member==11)
				{
				    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "* (( Don %s: %s )) *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "* (( Don's right hand %s: %s )) *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "* (( Capo %s: %s ))  *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "* (( Shatei %s: %s ))  *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "* (( Wakashu %s: %s ))  *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "* (( Gaij in %s: %s ))  *", sendername, result); }
					else { format(string, sizeof(string), "* (( Gaij in %s: %s )) *", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMember], 0x7BDDA5AA, string);
				}
				else if(member==12)
			    {
			        if(PlayerInfo[playerid][pRank] == 7) { format(string, sizeof(string), "* (( Top O.G %s: %s )) *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "* (( Senior O.G %s: %s )) *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "* (( O.G %s: %s )) *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "* (( Soulja %s: %s ))  *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "* (( Thug %s: %s ))  *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "* (( Gangsta %s: %s ))  *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "* (( Outsider %s: %s ))  *", sendername, result); }
					else { format(string, sizeof(string), "* (( Outsider %s: %s )) *", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMember], 0x7BDDA5AA, string);
				}
				else if(member==13)
				{
				    if(PlayerInfo[playerid][pRank] == 9) { format(string, sizeof(string), "* (( Kingpin %s: %s )) *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 8) { format(string, sizeof(string), "* (( Double O.G %s: %s )) *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 7) { format(string, sizeof(string), "* (( O.G %s: %s ))  *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "* (( Thug %s: %s ))  *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "* (( Blood Pusher %s: %s )) *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "* (( Blood Runner %s: %s ))  *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "* (( Soulja %s: %s ))  *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "* (( Outsider %s: %s ))  *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "* (( Dumb Hoe %s: %s ))  *", sendername, result); }
					else { format(string, sizeof(string), "* (( Dumb Hoe %s: %s )) *", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMember], 0x7BDDA5AA, string);
                }
				else if(member==14)
				{
				    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "* (( Chef %s: %s )) *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "* (( Sous Chef %s: %s )) *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "* (( Sous Chef 2 %s: %s ))  *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "* (( Bon Element %s: %s ))  *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "* (( Initié %s: %s ))  *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "* (( Le Bleu %s: %s ))  *", sendername, result); }
					else { format(string, sizeof(string), "* (( Le Bleu %s: %s )) *", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMember], 0x7BDDA5AA, string);
                }
				else if(member==15)
				{
				    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "* (( Chef %s: %s )) *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "* (( Sous Chef %s: %s )) *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "* (( Sous Chef 2 %s: %s ))  *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "* (( Bon Element %s: %s ))  *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "* (( Initié %s: %s ))  *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "* (( Le Bleu %s: %s ))  *", sendername, result); }
					else { format(string, sizeof(string), "* (( Le Bleu %s: %s )) *", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMember], 0x7BDDA5AA, string);
                }
				else if(member==16)
				{
				    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "* (( Chef %s: %s )) *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "* (( Sous Chef %s: %s )) *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "* (( Sous Chef 2 %s: %s ))  *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "* (( Bon Element %s: %s ))  *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "* (( Initié %s: %s ))  *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "* (( Le Bleu %s: %s ))  *", sendername, result); }
					else { format(string, sizeof(string), "* (( Le Bleu %s: %s )) *", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMember], 0x7BDDA5AA, string);
                }
				else if(member==17)
				{
				    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "* (( Chef %s: %s )) *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "* (( Sous Chef %s: %s )) *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "* (( Sous Chef 2 %s: %s ))  *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "* (( Bon Element %s: %s ))  *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "* (( Initié %s: %s ))  *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "* (( Le Bleu %s: %s ))  *", sendername, result); }
					else { format(string, sizeof(string), "* (( Le Bleu %s: %s )) *", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMember], 0x7BDDA5AA, string);
				}
				if(member==18)
			    {
			        if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "* (( Directeur du C.I.A %s: %s )) *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "* (( Sous-Directeur du C.I.A %s: %s )) *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "* (( Agent Spécial Du C.I.A %s: %s ))  *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "* (( Agent Formateur du C.I.A %s: %s ))  *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "* (( Agent De Terrain %s: %s ))  *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "* (( Agent Débutant Du C.I.A %s: %s ))  *", sendername, result); }
					else { format(string, sizeof(string), "* (( Agent Débutant Du C.I.A %s: %s )) *", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMember], 0x7BDDA5AA, string);
			    }
				else if(leader==1)
				{
				    format(string, sizeof(string), "* (( Chef %s: %s )) *", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLeader], 0x7BDDA5AA, string);
				}
				else if(leader==2)
				{
				    format(string, sizeof(string), "* (( Director %s: %s )) *", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLeader], 0x7BDDA5AA, string);
				}
				else if(leader==3)
				{
				    format(string, sizeof(string), "* (( General %s: %s )) *", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLeader], 0x7BDDA5AA, string);
				}
				else if(leader==4)
				{
				    format(string, sizeof(string), "* (( Paramedic %s: %s )) *", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLeader], 0x7BDDA5AA, string);
				}
				else if(leader==5)
				{
				    format(string, sizeof(string), "* (( Jefe %s: %s )) *", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLeader], 0x7BDDA5AA, string);
				}
				else if(leader==6)
				{
				    format(string, sizeof(string), "* (( Godfather %s: %s )) *", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLeader], 0x7BDDA5AA, string);
				}
				else if(leader==7)
				{
				    format(string, sizeof(string), "* (( Maire %s: %s )) *", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLeader], 0x7BDDA5AA, string);
				}
				else if(leader==8)
				{
				    format(string, sizeof(string), "* (( Directeur %s: %s )) *", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLeader], 0x7BDDA5AA, string);
				}
				else if(leader==9)
				{
				    format(string, sizeof(string), "* (( Network Producer %s: %s )) *", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLeader], 0x7BDDA5AA, string);
				}
				else if(leader==10)
				{
				    format(string, sizeof(string), "* (( Boss %s: %s )) *", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLeader], 0x7BDDA5AA, string);
				}
				else if(leader==11)
				{
				    format(string, sizeof(string), "* (( Boss %s: %s )) *", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLeader], 0x7BDDA5AA, string);
                }
				else if(leader==12)
				{
				    format(string, sizeof(string), "* (( Boss %s: %s )) *", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLeader], 0x7BDDA5AA, string);
               }
				else if(leader==13)
				{
				    format(string, sizeof(string), "* (( Boss %s: %s )) *", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLeader], 0x7BDDA5AA, string);
				}
				else if(leader==14)
				{
				    format(string, sizeof(string), "* (( Don %s: %s )) *", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLeader], 0x7BDDA5AA, string);
				}
				else if(leader==15)
				{
				    format(string, sizeof(string), "* (( Top O.G %s: %s )) *", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLeader], 0x7BDDA5AA, string);
				}
				else if(leader==16)
				{
				    format(string, sizeof(string), "* (( Kingpin %s: %s )) *", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLeader], 0x7BDDA5AA, string);
                }
				else if(leader==17)
				{
				    format(string, sizeof(string), "* (( Boss %s: %s )) *", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLeader], 0x7BDDA5AA, string);
				}
				else if(leader==17)
				{
				    format(string, sizeof(string), "* (( Directeur %s: %s )) *", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLeader], 0x7BDDA5AA, string);
				}
				else if(PlayerInfo[playerid][pFMember] < 255)
			    {
			        if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "* (( Godfather %s: %s )) *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "* (( Underboss %s: %s )) *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "* (( Capo %s: %s ))  *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "* (( Soldier %s: %s ))  *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "* (( Associate %s: %s ))  *", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "* (( Outsider %s: %s ))  *", sendername, result); }
					else { format(string, sizeof(string), "* (( Outsider %s: %s )) *", sendername, result); }
					SendNewFamilyMessage(PlayerInfo[playerid][pFMember], 0x7BDDA5AA, string);
				}
				printf("%s", string);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   you are not part of a Family!");
				return 1;
			}
		}//not connected
		return 1;
	}
	if (strcmp(cmd, "/membres", true) ==0||strcmp(cmd, "/membre", true) == 0)
	{
        if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)
	        {
				SendClientMessage(playerid, COLOR_GRAD1, "Policiers connectés:");
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
				    	if(PlayerInfo[i][pMember] == 1 || PlayerInfo[i][pLeader] == 1)
				    	{
				    	    GetPlayerName(i, sendername, sizeof(sendername));
				    	    if(PlayerInfo[i][pRank] == 7)
							{
				    	        format(string, 256, "* Sheriff ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 6)
							{
				    	        format(string, 256, "* Sheriff Adjoint ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
                            }
							else if(PlayerInfo[i][pRank] == 5)
							{
				    	        format(string, 256, "* Captaine ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
			                }
							else if(PlayerInfo[i][pRank] == 4)
							{
				    	        format(string, 256, "* Lieutenant ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 3)
							{
				    	        format(string, 256, "* Sergent ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 2)
							{
				    	        format(string, 256, "* Officer ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 1)
							{
				    	        format(string, 256, "* Cadet ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else
							{
				    	        format(string, 256, "* Cadet ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
						}
					}
				}
			}
			if(PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2)
	        {
				SendClientMessage(playerid, COLOR_GRAD1, "Membres du FBI en ligne :");
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
				    	if(PlayerInfo[i][pMember] == 2 || PlayerInfo[i][pLeader] == 2)
				    	{
				    	    GetPlayerName(i, sendername, sizeof(sendername));
				    	    if(PlayerInfo[i][pRank] == 6)
							{
				    	        format(string, 256, "* Directeur Fédéral ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 5)
							{
				    	        format(string, 256, "* Co-Directeur Fédéral ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 4)
							{
				    	        format(string, 256, "* Lieutenant Fédéral ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 3)
							{
				    	        format(string, 256, "* Agent Spécial ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 2)
							{
				    	        format(string, 256, "* Agent ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 1)
							{
				    	        format(string, 256, "* Agent Stagiaire ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else
							{
				    	        format(string, 256, "* Agent Stagiaire ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
						}
					}
				}
			}
			if(PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
	        {
				SendClientMessage(playerid, COLOR_GRAD1, "Millitaires en ligne:");
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
				    	if(PlayerInfo[i][pMember] == 3 || PlayerInfo[i][pLeader] == 3)
				    	{
				    	    GetPlayerName(i, sendername, sizeof(sendername));
				    	    if(PlayerInfo[i][pRank] == 6)
							{
				    	        format(string, 256, "* Colonel ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 5)
							{
				    	        format(string, 256, "* Lieutenant-Colonel ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 4)
							{
				    	        format(string, 256, "* Major ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 3)
							{
				    	        format(string, 256, "* Caporal ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 2)
							{
				    	        format(string, 256, "* Soldat ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 1)
							{
				    	        format(string, 256, "* Soldat Stagiaire ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else
							{
				    	        format(string, 256, "* Soldat Stagiaire ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
						}
					}
				}
			}
			if(PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pLeader] == 4)
	        {
				SendClientMessage(playerid, COLOR_GRAD1, "Paramedics online:");
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
				    	if(PlayerInfo[i][pMember] == 4 || PlayerInfo[i][pLeader] == 4)
				    	{
				    	    GetPlayerName(i, sendername, sizeof(sendername));
    	        			format(string, 256, "* Paramedic ** %s", sendername);
					    	SendClientMessage(playerid, COLOR_GRAD2, string);

						}
					}
				}
			}
	        if(PlayerInfo[playerid][pMember] == 5 || PlayerInfo[playerid][pLeader] == 5)
	        {
				SendClientMessage(playerid, COLOR_GRAD1, "Membres Vagos en ligne :");
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
				    	if(PlayerInfo[i][pMember] == 5 || PlayerInfo[i][pLeader] == 5)
				    	{
				    	    GetPlayerName(i, sendername, sizeof(sendername));
				    	    if(PlayerInfo[i][pRank] == 6)
							{
				    	        format(string, 256, "* Leader Vagos ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 5)
							{
				    	        format(string, 256, "* Sous Chef Vagos ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 4)
							{
				    	        format(string, 256, "* Vagos Senior ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 3)
							{
				    	        format(string, 256, "* Vagos Accompli ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 2)
							{
				    	        format(string, 256, "* Apprenti Vagos ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 1)
							{
				    	        format(string, 256, "* Mecano ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else
							{
				    	        format(string, 256, "* Mecano ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
						}
					}
				}
			}
			else if(PlayerInfo[playerid][pMember] == 6 || PlayerInfo[playerid][pLeader] == 6)
	        {
				SendClientMessage(playerid, COLOR_GRAD1, "Familglia Vercetti en ligne");
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
				    	if(PlayerInfo[i][pMember] == 6 || PlayerInfo[i][pLeader] == 6)
				    	{
				    	    GetPlayerName(i, sendername, sizeof(sendername));
				    	    if(PlayerInfo[i][pRank] == 6)
							{
				    	        format(string, 256, "* Padrino ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 5)
							{
				    	        format(string, 256, "* Braccio Droteto ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 4)
							{
				    	        format(string, 256, "* Consigliere ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
			                }
							else if(PlayerInfo[i][pRank] == 3)
							{
				    	        format(string, 256, "* Capos ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 2)
							{
				    	        format(string, 256, "* Soldato ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 1)
							{
				    	        format(string, 256, "* Picciotto ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else
							{
				    	        format(string, 256, "* Picciotto ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
						}
					}
				}
			}
			else if(PlayerInfo[playerid][pMember] == 7 || PlayerInfo[playerid][pLeader] == 7)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Gouvernment en ligne:");
			    for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
				    	if(PlayerInfo[i][pMember] == 7 || PlayerInfo[i][pLeader] == 7)
				    	{
				    	    if(PlayerInfo[i][pRank] == 7)
				    	    {
				    	        format(string, 256, "* Maire ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
				    	    }
				    	    else if(PlayerInfo[i][pRank] == 1)
				    	    {
				    	        format(string, 256, "* Chauffeur ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
				    	    }
				    	    else if(PlayerInfo[i][pRank] == 2)
				    	    {
				    	        format(string, 256, "* Secrétaire ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
				    	    }
				    	    else if(PlayerInfo[i][pRank] == 3)
				    	    {
				    	        format(string, 256, "* Garde du corps ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
				    	    }
				    	    else if(PlayerInfo[i][pRank] == 4)
				    	    {
				    	        format(string, 256, "* Chef de la sécuritée ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
				    	    }
				    	    else if(PlayerInfo[i][pRank] == 5)
				    	    {
				    	        format(string, 256, "* Inspecteur des affaires internes ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
				    	    }
				    	    else if(PlayerInfo[i][pRank] == 6)
				    	    {
				    	        format(string, 256, "* Maire Adjoint ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
				    	    }
				    	    else
				    	    {
				    	        format(string, 256, "* Role not assigned ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
				    	    }
				    	}
					}
				}
			}
			else if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8)
	        {
				SendClientMessage(playerid, COLOR_GRAD1, "Hitmans en ligne:");
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
				    	if(PlayerInfo[i][pMember] == 8 || PlayerInfo[i][pLeader] == 8)
				    	{
				    	    GetPlayerName(i, sendername, sizeof(sendername));
				    	    if(PlayerInfo[i][pRank] == 6)
							{
				    	        format(string, 256, "* Director ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 5)
							{
				    	        format(string, 256, "* Vice-Director ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 4)
							{
				    	        format(string, 256, "* Special Agent ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 3)
							{
				    	        format(string, 256, "* Agent ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 2)
							{
				    	        format(string, 256, "* Marksman ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 1)
							{
				    	        format(string, 256, "* Freelancer ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else
							{
				    	        format(string, 256, "* Freelancer ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
						}
					}
				}
			}
			else if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9)
	        {
				SendClientMessage(playerid, COLOR_GRAD1, "Reportaires en ligne:");
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
				    	if(PlayerInfo[i][pMember] == 9 || PlayerInfo[i][pLeader] == 9)
				    	{
				    	    GetPlayerName(i, sendername, sizeof(sendername));
				    	    if(PlayerInfo[i][pRank] == 6)
							{
				    	        format(string, 256, "* Network Producer ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 5)
							{
				    	        format(string, 256, "* Network Editor ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 4)
							{
				    	        format(string, 256, "* Network Anchor ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 3)
							{
				    	        format(string, 256, "* Local Editor ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 2)
							{
				    	        format(string, 256, "* Local Reporter ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 1)
							{
				    	        format(string, 256, "* Intern ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else
							{
				    	        format(string, 256, "* Intern ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
						}
					}
				}
			}
			else if(PlayerInfo[playerid][pMember] == 10 || PlayerInfo[playerid][pLeader] == 10)
	        {
				SendClientMessage(playerid, COLOR_GRAD1, "Groove en ligne:");
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
				    	if(PlayerInfo[i][pMember] == 10 || PlayerInfo[i][pLeader] == 10)
				    	{
				    	    GetPlayerName(i, sendername, sizeof(sendername));
				    	    if(PlayerInfo[i][pRank] == 6)
							{
				    	        format(string, 256, "* Chef de Groove Street ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 5)
							{
				    	        format(string, 256, "* Sous Chef de Groove Street ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 4)
							{
				    	        format(string, 256, "* Sous Chef 2 de Groove Street ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 3)
							{
				    	        format(string, 256, "* Bon élement Groove Street ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 2)
							{
				    	        format(string, 256, "* L'initier de Groove Street ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 1)
							{
				    	        format(string, 256, "* Le Bleu Groove Street ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else
							{
				    	        format(string, 256, "* Le Bleu de Groove Street ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
						}
					}
				}
			}
			else if(PlayerInfo[playerid][pMember] == 11 || PlayerInfo[playerid][pLeader] == 11)
	        {
				SendClientMessage(playerid, COLOR_GRAD1, "Permisrs online:");
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
				    	if(PlayerInfo[i][pMember] == 11 || PlayerInfo[i][pLeader] == 11)
				    	{
				    	    GetPlayerName(i, sendername, sizeof(sendername));
				    	    if(PlayerInfo[i][pRank] == 6)
							{
				    	        format(string, 256, "* Boss ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 5)
							{
				    	        format(string, 256, "* Under Boss ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 4)
							{
				    	        format(string, 256, "* Manager ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 3)
							{
				    	        format(string, 256, "* Senior Instructor ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 2)
							{
				    	        format(string, 256, "* Instructor ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 1)
							{
				    	        format(string, 256, "* Trainee ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else
							{
				    	        format(string, 256, "* Trainee ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
						}
					}
				}
			}
			else if(PlayerInfo[playerid][pMember] == 14 || PlayerInfo[playerid][pLeader] == 14)
	        {
				SendClientMessage(playerid, COLOR_GRAD1, "Membres de la Mafia en ligne:");
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
				    	if(PlayerInfo[i][pMember] == 14 || PlayerInfo[i][pLeader] == 14)
				    	{
				    	    GetPlayerName(i, sendername, sizeof(sendername));
				    	    if(PlayerInfo[i][pRank] == 6)
							{
				    	        format(string, 256, "* Oyabun ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 5)
							{
				    	        format(string, 256, "* Wakagashira ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 4)
							{
				    	        format(string, 256, "* Shateigashira ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 3)
							{
				    	        format(string, 256, "* Kyodaï ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 2)
							{
				    	        format(string, 256, "* Shateï ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 1)
							{
				    	        format(string, 256, "* Kumi-in ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else
							{
				    	        format(string, 256, "* Kumi-in ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
						}
					}
				}
			}

			else if(PlayerInfo[playerid][pMember] == 15 || PlayerInfo[playerid][pLeader] == 15)
	        {
				SendClientMessage(playerid, COLOR_GRAD1, "Membres de Gang en ligne :");
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
				    	if(PlayerInfo[i][pMember] == 15 || PlayerInfo[i][pLeader] == 15)
				    	{
				    	    GetPlayerName(i, sendername, sizeof(sendername));
				    	    if(PlayerInfo[i][pRank] == 6)
							{
				    	        format(string, 256, "* Top Gangsta ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 5)
							{
				    	        format(string, 256, "* Big Gangsta ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
			                }
							else if(PlayerInfo[i][pRank] == 4)
							{
				    	        format(string, 256, "* Gangsta ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 3)
							{
				    	        format(string, 256, "* Gros bras ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 2)
							{
				    	        format(string, 256, "* Voyou ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 1)
							{
				    	        format(string, 256, "* Delinquant ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else
							{
				    	        format(string, 256, "* Delinquant ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
						}
					}
				}
			}
			else if(PlayerInfo[playerid][pMember] == 16 || PlayerInfo[playerid][pLeader] == 16)
	        {
				SendClientMessage(playerid, COLOR_GRAD1, "Membres de Gang en ligne :");
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
				    	if(PlayerInfo[i][pMember] == 16 || PlayerInfo[i][pLeader] == 16)
				    	{
				    	    GetPlayerName(i, sendername, sizeof(sendername));
				    	    if(PlayerInfo[i][pRank] == 9)
							{
				    	        format(string, 256, "* Kingpin ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 8)
							{
				    	        format(string, 256, "* Double O.G ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 7)
							{
				    	        format(string, 256, "* O.G ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 6)
							{
				    	        format(string, 256, "* Thug ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
			                }
							else if(PlayerInfo[i][pRank] == 5)
							{
				    	        format(string, 256, "* Blood Runner ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 4)
							{
				    	        format(string, 256, "* Blood Pusher ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 3)
							{
				    	        format(string, 256, "* Soulja ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 2)
							{
				    	        format(string, 256, "* Outsider ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 1)
							{
				    	        format(string, 256, "* Dumb Hoe ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else
							{
				    	        format(string, 256, "* Dumb Hoe ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
						}
					}
				}
			}
			else if(PlayerInfo[playerid][pMember] == 17 || PlayerInfo[playerid][pLeader] == 17)
	        {
				SendClientMessage(playerid, COLOR_GRAD1, "Membres de la Mafia Corleone en ligne :");
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
				    	if(PlayerInfo[i][pMember] == 17 || PlayerInfo[i][pLeader] == 17)
				    	{
				    	    GetPlayerName(i, sendername, sizeof(sendername));
				    	    if(PlayerInfo[i][pRank] == 6)
							{
				    	        format(string, 256, "* Padrino ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 5)
							{
				    	        format(string, 256, "* Braccio Droteto ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 4)
							{
				    	        format(string, 256, "* Consigliere ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
			                }
							else if(PlayerInfo[i][pRank] == 3)
							{
				    	        format(string, 256, "* Capos ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 2)
							{
				    	        format(string, 256, "* Soldato ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 1)
							{
				    	        format(string, 256, "* Picciotto ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else
							{
				    	        format(string, 256, "* Picciotto ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
						}
					}
				}
			}
			else if(PlayerInfo[playerid][pMember] == 18 || PlayerInfo[playerid][pLeader] == 18)
	        {
				SendClientMessage(playerid, COLOR_GRAD1, "Membres de Gang en ligne :");
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
				    	if(PlayerInfo[i][pMember] == 18 || PlayerInfo[i][pLeader] == 18)
				    	{
				    	    GetPlayerName(i, sendername, sizeof(sendername));
				    	    if(PlayerInfo[i][pRank] == 6)
							{
				    	        format(string, 256, "* Directeur Fédéral ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 5)
							{
				    	        format(string, 256, "* Co-Directeur Fédéral ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 4)
							{
				    	        format(string, 256, "* Lieutenant Fédéral ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 3)
							{
				    	        format(string, 256, "* Agent Spécial ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 2)
							{
				    	        format(string, 256, "* Agent ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 1)
							{
				    	        format(string, 256, "* Agent Stagiaire ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else
							{
				    	        format(string, 256, "* Agent Stagiaire ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
						}
					}
				}
			}
			else { SendClientMessage(playerid, COLOR_GRAD2, "You're not in the family/organisation."); }
		}
		return 1;
	}
	if(strcmp(cmd, "/news", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9)
			{
			    new newcar = GetPlayerVehicleID(playerid);
		        if(PlayerInfo[playerid][pMuted] == 1)
				{
					SendClientMessage(playerid, COLOR_GREY, "   Vous ne pouvez pas parler, vous avez été mutté.");
					return 1;
				}
				if(!IsALATimeCar(newcar))
				{
					SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas dans le Van de L.A News !");
					return 1;
				}
				GetPlayerName(playerid, sendername, sizeof(sendername));
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[96];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /news [newstext]");
					return 1;
				}
				new rtext[64];
				if(PlayerInfo[playerid][pRank] == 1) { rtext = "Travailleur Interne"; }
				else if(PlayerInfo[playerid][pRank] == 2) { rtext = "Journaliste"; }
				else if(PlayerInfo[playerid][pRank] == 3) { rtext = "Journaliste Cehf"; }
				else if(PlayerInfo[playerid][pRank] == 4) { rtext = "Secrétaire"; }
		    	else if(PlayerInfo[playerid][pRank] == 5) { rtext = "ABC Manager"; }
		   		else if(PlayerInfo[playerid][pRank] == 6) { rtext = "Producteur"; }
				else { rtext = "Travailleur Interne"; }
				SendClientMessageToAll(COLOR_WHITE, "|___________NEWS ___________|");
				format(string, sizeof(string), "%s %s: %s", rtext, sendername, result);
				OOCNews(COLOR_BLUE,string);
				PlayerInfo[playerid][pNewsSkill] ++;
				if(PlayerInfo[playerid][pNewsSkill] == 50)
				{ SendClientMessage(playerid, COLOR_YELLOW, "Votre niveau de journaliste est de 2, vous serez bientôt capable d'utiliser le /news et le /live."); }
				else if(PlayerInfo[playerid][pNewsSkill] == 100)
				{ SendClientMessage(playerid, COLOR_YELLOW, "Votre niveau de journaliste est de 3, vous serez bientôt capable d'utiliser le /news et le /live."); }
				else if(PlayerInfo[playerid][pNewsSkill] == 200)
				{ SendClientMessage(playerid, COLOR_YELLOW, "Votre niveau de journaliste est de 4, vous pouvez utilisez /news."); }
				else if(PlayerInfo[playerid][pNewsSkill] == 400)
				{ SendClientMessage(playerid, COLOR_YELLOW, "Votre niveau de journaliste est de 5, vous pouvez utilisez le /live."); }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   You are not a News Reporter !");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/j", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9)
			{
		        if(PlayerInfo[playerid][pMuted] == 1)
				{
					SendClientMessage(playerid, TEAM_CYAN_COLOR, "Vous ne pouvez pas parlé vous êtes muté");
					return 1;
				}
    			else
    			{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					new length = strlen(cmdtext);
					while ((idx < length) && (cmdtext[idx] <= ' '))
					{
						idx++;
					}
					new offset = idx;
					new result[64];
					while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
					{
						result[idx - offset] = cmdtext[idx];
						idx++;
					}
					result[idx - offset] = EOS;
					if(!strlen(result))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /j [text]");
						return 1;
					}
					format(string, sizeof(string), "[ABC] Journaliste %s: %s", sendername, result);
					OOCNews(COLOR_LIGHTBLUE,string);
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas journaliste!");
			}
		}//not connected
		return 1;
	}
	if(strcmp(cmd, "/live", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9)
			{
			    if(TalkingLive[playerid] != 255)
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "Live terminé.");
			        SendClientMessage(TalkingLive[playerid], COLOR_WHITE, "Live terminé.");
			        TogglePlayerControllable(playerid, 1);
			        TogglePlayerControllable(TalkingLive[playerid], 1);
		            TalkingLive[TalkingLive[playerid]] = 255;
			        TalkingLive[playerid] = 255;
			        return 1;
			    }
			    if(PlayerInfo[playerid][pNewsSkill] < 10)
				{
				    SendClientMessage(playerid, COLOR_GREY, "Votre niveau journaliste ets trop bas pour faire des lives!");
				    return 1;
				}
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /live [playerid/PartOfName]");
					return 1;
				}
				//giveplayerid = strval(tmp);
		        giveplayerid = ReturnUser(tmp);
				if (IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
						if (ProxDetectorS(5.0, playerid, giveplayerid))
						{
						    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez pas faire de live avec vous même!"); return 1; }
						    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "Vous avez offert à %s la possibilité faire un live.", giveplayer);
							SendClientMessage(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), "%s vous propose de faire un live, tappez (/accepter live) pour accepter.", sendername);
							SendClientMessage(giveplayerid, COLOR_WHITE, string);
							LiveOffer[giveplayerid] = playerid;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas près de vous!");
						    return 1;
						}
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Le joueur ayant cet ID n'est pas conneté!");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas journaliste!");
			}
		}//not connected
		return 1;
	}
    if(strcmp(cmd, "/vendredrogue", true) == 0 || strcmp(cmd, "/selldrugs", true) == 0 || strcmp(cmd, "/selldrogue", true) == 0)
	//if(strcmp(cmd, "/vendredrogue", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(PlayerInfo[playerid][pJob] != 4)
		    {
				SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas dealer de drogue!");
				return 1;
		    }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /vendredrogue [playerid/PartOfName] [montant] [prix]");
				return 1;
			}
			new playa;
			new money;
			new needed;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) { return 1; }
			needed = strval(tmp);
			if(needed < 1 || needed > 99) { SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez pas vendre moins de 1G et plus de 99G!"); return 1; }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) { return 1; }
			money = strval(tmp);
			if(money < 1 || money > 99999) { SendClientMessage(playerid, COLOR_GREY, "Le prix ne peux pas être en desous de 1$ et au desus de 99999!"); return 1; }
			if(needed > PlayerInfo[playerid][pDrugs]) { SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas assez de drogue!"); return 1; }
			if(IsPlayerConnected(playa))
			{
			    if(playa != INVALID_PLAYER_ID)
			    {
					if (ProxDetectorS(8.0, playerid, playa))
					{
					    if(playa == playerid)
					    {
					        SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez pas vous vendre de la drogue à vous même!");
					        return 1;
					    }
					    GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
					    format(string, sizeof(string), "Vous proposé à %s d'acheter de la drogue $%d .", giveplayer, needed, money);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "Le Dealer de Drogues %s vous propose d'acheter %d grammes de drogue pour $%d, (type /accepter drogues) to buy.", sendername, needed, money);
						SendClientMessage(playa, COLOR_LIGHTBLUE, string);
						DrugOffer[playa] = playerid;
						DrugPrice[playa] = money;
						DrugGram[playa] = needed;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas près de vous!");
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté.");
			}
		}
		return 1;
	}
    if(strcmp(cmd, "/vendredroguea", true) == 0 || strcmp(cmd, "/selldrugsto", true) == 0 || strcmp(cmd, "/selldroguea", true) == 0)
	//if(strcmp(cmd, "/vendredroguea", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(PlayerInfo[playerid][pJob] != 20)
		    {
				SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas contrebandier de drogue!");
				return 1;
		    }
		    /*if(!PlayerToPoint(15.0,playerid,1484.3933,-1731.2124,6.7213))
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   You are not at black market!");
				return 1;
		    }*/
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /vendredroguea [playerid/PartOfName] [montant] [prix]");
				return 1;
			}
			new playa;
			new money;
			new needed;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) { return 1; }
			needed = strval(tmp);
			if(needed < 1 || needed > 99) { SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez pas vendre moins de 1G et plus de 99G!"); return 1; }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) { return 1; }
			money = strval(tmp);
			if(money < 1 || money > 99999) { SendClientMessage(playerid, COLOR_GREY, "Le prix ne peux pas être en desous de 1$ et au desus de 99999!"); return 1; }
			if(needed > PlayerInfo[playerid][pDrugs]) { SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas assez de drogue!"); return 1; }
			if(IsPlayerConnected(playa))
			{
			    if(playa != INVALID_PLAYER_ID)
			    {
					if (ProxDetectorS(8.0, playerid, playa))
					{
					    if(playa == playerid)
					    {
					        SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez pas vous vendre de la drogue à vous même!");
					        return 1;
					    }
					    if(PlayerInfo[playa][pJob] != 4)
					    {
					        SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez vendre de la drogue qu'ai dealer!");
					        return 1;
					    }
					    GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
					    format(string, sizeof(string), "Vous proposé à %s d'acheter de la drogue $%d .", giveplayer, needed, money);
						SendClientMessage(playerid, COLOR_WHITE, string);
						format(string, sizeof(string), "Les Contrebandier de drogue %s vous propose d'acheter %d grammes de drogue pour $%d, (Tapez /accepter drogues) pour l' acheter.", sendername, needed, money);
						SendClientMessage(playa, COLOR_WHITE, string);
						DrugOffer[playa] = playerid;
						DrugPrice[playa] = money;
						DrugGram[playa] = needed;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas près de vous!");
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté.");
			}
		}
		return 1;
    }
    /*if(strcmp(cmdtext, "/uliserdrogue", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
	   	    if(PlayerBoxing[playerid] > 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Cant use Drugs while you are fighting !");
	            return 1;
	        }
	        if(UsingDrugs[playerid] == 1)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   You are high already !");
	            return 1;
	        }
			if(PlayerInfo[playerid][pDrugs] > 1)
			{
			    PlayerStoned[playerid] += 1;
			    if(PlayerStoned[playerid] >= 3) { GameTextForPlayer(playerid, "~w~You are~n~~p~Stoned", 4000, 1); }
			    new Float:PlayersArmour;
			    GetPlayerArmour(playerid, PlayersArmour);
			    if(PlayerInfo[playerid][pDrugPerk] > 0)
			    {
			        SetPlayerArmour(playerid, PlayersArmour + 10.0);
			    }
			    SendClientMessage(playerid, COLOR_GREY, "   2 Drug Grams used !");
			    PlayerInfo[playerid][pDrugs] -= 2;
			    SetPlayerArmour(playerid, PlayersArmour + 6.0);
			    SetPlayerWeather(playerid, -68);
			    UsingDrugs[playerid] = 1;
			    //SetTimer("DrugEffectGone", 25000, 0);
			    SetTimerEx("DrugEffectGone", 25000, false, "i", playerid);
			    if(STDPlayer[playerid]==1)
				{
				     STDPlayer[playerid] = 0;
				     SendClientMessage(playerid, COLOR_LIGHTBLUE, " You are no longer infected with a STD anymore because of the Drugs !");
				}
				else if(STDPlayer[playerid]==2)
				{
				     STDPlayer[playerid] = 1;
				     SendClientMessage(playerid, COLOR_LIGHTBLUE, " You lowered the STD to SIDA because of the Drugs !");
				}
				else if(STDPlayer[playerid]==3)
				{
				     STDPlayer[playerid] = 2;
				     SendClientMessage(playerid, COLOR_LIGHTBLUE, " You lowered the STD to Gonorrhée because of the Drugs !");
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   You dont have any Drug Grams left !");
			}
		}//not connected
		return 1;
	}*/
	if(strcmp(cmd, "/utiliserdrogue", true) ==0 || strcmp(cmd, "/utiliserdrogues", true) == 0) // Drug system by Ellis
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerBoxing[playerid] > 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez pas prendre de drogue quand vous êtes en combat!");
	            return 1;
	        }
	        if(UsingDrugs[playerid] == 1)
	        {
	            SendClientMessage(playerid, COLOR_WHITE, "Vous utilisez déjà de la drogue!");
	            return 1;
	        }
	        new x_nr[256];
	        x_nr = strtok(cmdtext, idx);
	        if(!strlen(x_nr))
	        {
	            SendClientMessage(playerid, COLOR_WHITE, "USAGE: /utiliserdrogue [nom]");
	            SendClientMessage(playerid, COLOR_WHITE, "Noms Disponibles: Marijuana, Heroine, Cocaine, Ecstasy");
	            return 1;
	        }
	        if(strcmp(x_nr,"marijuana",true) == 0)
	        {
	            if(PlayerInfo[playerid][pDrugs] > 1)
	            {
	                PlayerStoned[playerid] += 1;
	                if(PlayerStoned[playerid] >= 3) { GameTextForPlayer(playerid, "~w~Vous etes~n~~p~Defoncer", 4000, 1); }
	                new Float:PlayersArmour;
	                GetPlayerArmour(playerid, PlayersArmour);
	                if(PlayerInfo[playerid][pDrugPerk] > 0)
			    	{
			        	SetPlayerArmour(playerid, PlayersArmour + 10.0);
			    	}
			    	PlayerInfo[playerid][pDrugs] -= 2;
			    	SetPlayerArmour(playerid, PlayersArmour + 10.0);
			    	SetPlayerWeather(playerid, -68);
			    	UsingDrugs[playerid] = 1;
			    	SetTimerEx("DrugEffectGone", 25000, false, "i", playerid);
			    	GetPlayerName(playerid, sendername, sizeof(sendername));
			    	format(string, sizeof(string), "%s prend un peu de marijuana de sa poche et la fume.", sendername);
			    	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			    	ApplyAnimation(playerid,"SMOKING", "M_smklean_loop", 4.0, 1, 0, 0, 0, 0);
			    	if(STDPlayer[playerid]==1)
					{
				    	STDPlayer[playerid] = 0;
				    	SendClientMessage(playerid, COLOR_WHITE, "Vous n'avez plus de MST puis que vous avez pris de la drogue!");
					}
					else if(STDPlayer[playerid]==2)
					{
    					STDPlayer[playerid] = 1;
				    	SendClientMessage(playerid, COLOR_WHITE, "Vous avez diminué l'effet du SIDA grâce a la drogue!");
					}
					else if(STDPlayer[playerid]==3)
					{
				    	STDPlayer[playerid] = 2;
				    	SendClientMessage(playerid, COLOR_WHITE, "Vous avez diminué l'effet de la Gonorrhée grâce a la drogue!");
					}
	            }
	            else
	            {
	                SendClientMessage(playerid, COLOR_GREY, "Vous n'avez plus assez de drogues!");
	            }
	        }
	        if(strcmp(x_nr,"cocaine",true) == 0)
	        {
	            if(PlayerInfo[playerid][pDrugs] > 1)
	            {
	                PlayerStoned[playerid] += 1;
	                if(PlayerStoned[playerid] >= 3) { GameTextForPlayer(playerid, "~w~Vous etes~n~~p~Defoncer", 4000, 1); }
	                new Float:PlayersArmour;
	                GetPlayerArmour(playerid, PlayersArmour);
	                if(PlayerInfo[playerid][pDrugPerk] > 0)
			    	{
			        	SetPlayerArmour(playerid, PlayersArmour + 10.0);
			    	}
			    	PlayerInfo[playerid][pDrugs] -= 2;
			    	SetPlayerArmour(playerid, PlayersArmour + 10.0);
			    	SetPlayerWeather(playerid, -68);
			    	UsingDrugs[playerid] = 1;
			    	SetTimerEx("Animcoke", 100, 0, "i", playerid);
			    	SetTimerEx("DrugEffectGone", 25000, false, "i", playerid);
			    	GetPlayerName(playerid, sendername, sizeof(sendername));
			    	format(string, sizeof(string), "%s prend un sachet de cocaine, l'ouvre et le snif.", sendername);
			    	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			    	if(STDPlayer[playerid]==1)
					{
				    	STDPlayer[playerid] = 0;
				    	SendClientMessage(playerid, COLOR_WHITE, "Vous n'avez plus de MST puis que vous avez pris de la drogue!");
					}
					else if(STDPlayer[playerid]==2)
					{
    					STDPlayer[playerid] = 1;
				    	SendClientMessage(playerid, COLOR_WHITE, "Vous avez diminué l'effet du SIDA grâce a la drogue!");
					}
					else if(STDPlayer[playerid]==3)
					{
				    	STDPlayer[playerid] = 2;
				    	SendClientMessage(playerid, COLOR_WHITE, "Vous avez diminué l'effet de la Gonorrhée grâce a la drogue!");
					}
	            }
	            else
	            {
	                SendClientMessage(playerid, COLOR_GREY, "Vous n'avez plus assez de drogues!");
	                }
	        }
	        if(strcmp(x_nr,"ecstasy",true) == 0)
	        {
	            if(PlayerInfo[playerid][pDrugs] > 1)
	            {
	                PlayerStoned[playerid] += 1;
	                if(PlayerStoned[playerid] >= 3) { GameTextForPlayer(playerid, "~w~Vous etes~n~~p~Defoncer", 4000, 1); }
	                new Float:PlayersArmour;
	                GetPlayerArmour(playerid, PlayersArmour);
	                if(PlayerInfo[playerid][pDrugPerk] > 0)
			    	{
			        	SetPlayerArmour(playerid, PlayersArmour + 10.0);
			    	}
			    	PlayerInfo[playerid][pDrugs] -= 2;
			    	SetPlayerArmour(playerid, PlayersArmour + 10.0);
			    	SetPlayerWeather(playerid, -68);
			    	UsingDrugs[playerid] = 1;
			    	SetTimerEx("Animcoke", 100, 0, "i", playerid);
			    	SetTimerEx("DrugEffectGone", 25000, false, "i", playerid);
			    	GetPlayerName(playerid, sendername, sizeof(sendername));
			    	format(string, sizeof(string), "%s prend une pilule d'ecstasy et l'avale.", sendername);
			    	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			    	if(STDPlayer[playerid]==1)
					{
				    	STDPlayer[playerid] = 0;
				    	SendClientMessage(playerid, COLOR_WHITE, "Vous n'avez plus de MST puis que vous avez pris de la drogue!");
					}
					else if(STDPlayer[playerid]==2)
					{
    					STDPlayer[playerid] = 1;
				    	SendClientMessage(playerid, COLOR_WHITE, "Vous avez diminué l'effet du SIDA grâce a la drogue!");
					}
					else if(STDPlayer[playerid]==3)
					{
				    	STDPlayer[playerid] = 2;
				    	SendClientMessage(playerid, COLOR_WHITE, "Vous avez diminué l'effet de la Gonorrhée grâce a la drogue!");
					}
	            }
	            else
	            {
	                SendClientMessage(playerid, COLOR_GREY, "Vous n'avez plus assez de drogues!");
	                }
	        }
	        else if(strcmp(x_nr,"heroine",true) == 0)
	        {
	            if(PlayerInfo[playerid][pDrugs] > 2)
	            {
	                PlayerStoned[playerid] += 1;
	                if(PlayerStoned[playerid] >= 3) { GameTextForPlayer(playerid, "~w~Vous etes~n~~p~Defoncer", 4000, 1); }
	                new Float:PlayersArmour;
	                GetPlayerArmour(playerid, PlayersArmour);
	                if(PlayerInfo[playerid][pDrugPerk] > 0)
			    	{
			        	SetPlayerArmour(playerid, PlayersArmour + 15.0);
			    	}
			    	PlayerInfo[playerid][pDrugs] -= 3;
			    	SetPlayerArmour(playerid, PlayersArmour + 15.0);
			    	SetPlayerWeather(playerid, -30);
			    	UsingDrugs[playerid] = 1;
			    	SetTimerEx("DrugEffectGone", 25000, false, "i", playerid);
			    	GetPlayerName(playerid, sendername, sizeof(sendername));
			    	format(string, sizeof(string), " %s prend une seringue et se pique.", sendername);
			    	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			    	ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
			    	if(STDPlayer[playerid]==1)
					{
				    	STDPlayer[playerid] = 0;
				    	SendClientMessage(playerid, COLOR_WHITE, "Vous n'avez plus de MST puis que vous avez pris de la drogue!");
					}
					else if(STDPlayer[playerid]==2)
					{
    					STDPlayer[playerid] = 1;
				    	SendClientMessage(playerid, COLOR_WHITE, "Vous avez diminué l'effet du SIDA grâce a la drogue!");
					}
					else if(STDPlayer[playerid]==3)
					{
				    	STDPlayer[playerid] = 2;
				    	SendClientMessage(playerid, COLOR_WHITE, "Vous avez diminué l'effet de la Gonorrhée grâce a la drogue!");
					}
	            }
	            else
	            {
	                SendClientMessage(playerid, COLOR_GREY, "Vous n'avez plus assez de drogues!");
	            }
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_WHITE, "USAGE: /utiliserdrogue [nom]");
	            SendClientMessage(playerid, COLOR_WHITE, "Noms Disponibles: Marijuana, Heroine, Cocaine, Ecstasy");
			}
	    }
	    return 1;
	}
	if(strcmp(cmd, "/healme", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
	        if (PlayerToPoint(3, playerid,349.5560,161.6693,1019.9912)||PlayerToPoint(3, playerid,2029.5945,-1404.6426,17.2512))
			{
	            if(STDPlayer[playerid] > 0)
	            {
					STDPlayer[playerid] = 0;
					SendClientMessage(playerid, COLOR_WHITE, "Vous n'avez plus de MST grâce aux Docteurs de l'Hopital.");
					SafeGivePlayerMoney(playerid, -250);
					SendClientMessage(playerid, TEAM_CYAN_COLOR, "Médecin: Votre facture s'éleve à $250. Bonne journée!");
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas de MST.");
				    return 1;
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas à l'hopital!");
	        }
        }
		return 1;
	}
	if(strcmp(cmd, "/dinner", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
			if(BizzInfo[7][bProducts] == 1)
			{
				GameTextForPlayer(playerid, "~r~Plus de nourriture", 5000, 1);
				return 1;
			}
			if(GetPlayerMoney(playerid) <  BizzInfo[7][bEntranceCost])
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Vous n'avez pas assez d'argent!");
				return 1;
			}
   			else if(PlayerToPoint(30, playerid,446.0222,-16.9298,1001.1328))
			{
				if(PlayerInfo[playerid][pPbiskey] == 7)
				{
					SendClientMessage(playerid, COLOR_GREEN, "Gratuit pour le Patron");
				}
				else
				{
					SafeGivePlayerMoney(playerid,-BizzInfo[7][bEntranceCost]);
				}
				BizzInfo[7][bTill] += BizzInfo[7][bEntranceCost];
				ExtortionBiz(7, BizzInfo[7][bEntranceCost]);
				BizzInfo[7][bProducts]--;
				OnPropUpdate();
				SetPlayerHealth(playerid, 100);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "Miam bonne appetit ta vie est a 100 et sa ta couté %s",BizzInfo[7][bEntranceCost]);
				GameTextForPlayer(playerid, string, 5000, 3);
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas dans un Restaurant!");
	        }
        }
		return 1;
	}
	if(strcmp(cmd, "/ejecter", true) ==0 || strcmp(cmd, "/eject", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
	        new State;
	        if(IsPlayerInAnyVehicle(playerid))
	        {
         		State=GetPlayerState(playerid);
		        if(State!=PLAYER_STATE_DRIVER)
		        {
		        	SendClientMessage(playerid,COLOR_GREY,"Vous devez être conducteur pour pouvoir ejecter quelqu'un!");
		            return 1;
		        }
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /ejecter [playerid/PartOfName]");
					return 1;
				}
				new playa;
				playa = ReturnUser(tmp);
				new test;
				test = GetPlayerVehicleID(playerid);
				if(IsPlayerConnected(playa))
				{
				    if(playa != INVALID_PLAYER_ID)
				    {
				        if(playa == playerid) { SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez pas vous éjectez vous même!"); return 1; }
				        if(IsPlayerInVehicle(playa,test))
				        {
							new PName[MAX_PLAYER_NAME];
							GetPlayerName(playerid,PName,sizeof(PName));
							GetPlayerName(playa, giveplayer, sizeof(giveplayer));
							format(string, sizeof(string), "Vous avez éjecté %s de la voiture!", giveplayer);
							SendClientMessage(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), "%s vous à éjecté du véhicule!", PName);
							SendClientMessage(playa, COLOR_WHITE, string);
							RemovePlayerFromVehicle(playa);
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas dans votre véhicule!");
						    return 1;
						}
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté!");
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Vous devez être dans un véhicule pour utiliser cette commande!");
			}
		}
		return 1;
	}
    if(strcmp(cmd, "/sex", true) == 0 || strcmp(cmd, "/sexe", true) == 0 || strcmp(cmd, "/sexes", true) == 0)
	//if(strcmp(cmd, "/sex", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
	        if(PlayerInfo[playerid][pJob] == 3)
			{
			    new Car = GetPlayerVehicleID(playerid);
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /sex [playerid/PartOfName] [prix]");
					return 1;
				}
				//giveplayerid = strval(tmp);
				giveplayerid = ReturnUser(tmp);
				tmp = strtok(cmdtext, idx);
				new money;
				money = strval(tmp);
				if(money < 1 || money > 99999) { SendClientMessage(playerid, COLOR_GREY, "Le prix ne peux pas être en desous de 1$ et au desus de 99999$!"); return 1; }
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
						if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
						    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez pas faire  l'amour avec vous même!"); return 1; }
						    if(IsPlayerInAnyVehicle(playerid) && IsPlayerInVehicle(giveplayerid, Car))
						    {
							    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "Vous offrez %s de faire l'amour avec vous, pour $%d.", giveplayer, money);
								SendClientMessage(playerid, COLOR_WHITE, string);
								format(string, sizeof(string), "La Prostituée %s vous offre de faire l'amour avec elle, pour $%d (Tapez /accepter sex) pour accepter.", sendername, money);
								SendClientMessage(giveplayerid, COLOR_WHITE, string);
					            SexOffer[giveplayerid] = playerid;
					            SexPrice[giveplayerid] = money;
				            }
				            else
				            {
				                SendClientMessage(playerid, COLOR_GREY, "   You or the other player must be in a Car together !");
				                return 1;
				            }
						}
						else
						{
							SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas près de vous!");
							return 1;
						}
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté!");
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas une prostituée !");
			}
		}//not connected
		return 1;
		}
		if(strcmp(cmd, "/masturber", true) == 0)
		{
		    if(IsPlayerConnected(playerid))
		   	{
		        if(PlayerInfo[playerid][pJob] == 3)
				{
					if(Masturber[playerid] == 1)
					{
						SendClientMessage(playerid, COLOR_GRAD1, "Tu ne peux plus masturber avant le prochain payday !");
						return 1;
					}
					if(GetPlayerWeapon(playerid) == 10 || GetPlayerWeapon(playerid) == 11 || GetPlayerWeapon(playerid) == 12 || GetPlayerWeapon(playerid) == 13)
					{
						GameTextForPlayer(playerid, "~p~Oh Oui ! ~b~Ouah !", 5000, 6);
						ApplyAnimation(playerid, "PAULNMAC", "wank_loop", 4.0, 1, 0, 0, 1, 0);
						SetTimer("Semasturber", 5000, 0);
						Masturber[playerid] = 1;
						return 1;
					}
					else {SendClientMessage(playerid, COLOR_GREY, "J'ai besoin de god pour masturber !");return 1;}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas une prostituée !");
				}
			}//not connected
			return 1;
		}
    if(strcmp(cmd, "/rechercher", true) == 0 || strcmp(cmd, "/wanted", true) == 0 || strcmp(cmd, "/wansted", true) == 0)
	//if(strcmp(cmd, "/rechercher", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
			if(gTeam[playerid] == 2 || IsACop(playerid))
			{
				new x;
				SendClientMessage(playerid, COLOR_GREEN, "Suspect actuelement recherché:");
			    for(new i=0; i < MAX_PLAYERS; i++) {
					if(IsPlayerConnected(i))
					{
					    if(WantedLevel[i] > 1)
					    {
							GetPlayerName(i, giveplayer, sizeof(giveplayer));
							format(string, sizeof(string), "%s%s: %d", string,giveplayer,WantedLevel[i]);
							x++;
							if(x > 3) {
							    SendClientMessage(playerid, COLOR_YELLOW, string);
							    x = 0;
								format(string, sizeof(string), "");
							} else {
								format(string, sizeof(string), "%s, ", string);
							}
						}
					}
				}
				if(x <= 3 && x > 0) {
					string[strlen(string)-2] = '.';
				    SendClientMessage(playerid, COLOR_YELLOW, string);
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas policier!");
			}
		}//not connected
		return 1;
	}
	if(strcmp(cmd, "/cracher", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /cracher [playerid/PartiDuNom]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
                        new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[64];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
						if(!strlen(result))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /cracher [playerid/PartiDuNom]");
							return 1;
						}
						GetPlayerName(playerid, sendername, sizeof(sendername));
                        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				        format(string, sizeof(string), "* %s manque de respect a %s en lui crashant dessus.", sendername,giveplayer);
				        ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						return 1;
					}
				}
			}
			else
			{
				format(string, sizeof(string), "  Joueur non connecter.");
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		return 1;
	}
	if(strcmp(cmd, "/volervoiture", true) == 0 || strcmp(cmd, "/volervehicule", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
	        if(PlayerInfo[playerid][pJob] == 10)
			{
			    if(IsAnOwnableCar(idcar))
			    {
				    if(PlayerOnMission[playerid] > 0)
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   Tu peut pas voler de voiture durant une mission !");
				        return 1;
				    }
			        if(PlayerInfo[playerid][pCarTime] == 0)
			        {
			            GameTextForPlayer(playerid, "~w~Voiture volée ~n~~r~Apporte le vehicule au port de Sanfierro", 5000, 1);
			            CP[playerid] = 1;
			            SetPlayerCheckpoint(playerid, -1548.3618,123.6438,3.2966,8.0);
			        }
			        else
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   Tu as déjà voler une voiture attend 20 minutes !");
			        }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_RED, "   Ce véhicule n'apartient a personne !");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   Tu n'es pas un voleur de voiture !");
			}
		}//not connected
		return 1;
	}
    if(strcmp(cmd, "/quitjob", true) == 0 || strcmp(cmd, "/quitterjob", true) == 0 || strcmp(cmd, "/quittejob", true) == 0)
	//if(strcmp(cmd, "/quitterjob", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
		    if(PlayerInfo[playerid][pJob] > 0)
		    {
		        if(PlayerInfo[playerid][pDonateRank] > 0)
		        {
		            if(PlayerInfo[playerid][pContractTime] >= 0)
					{
					    SendClientMessage(playerid, COLOR_WHITE, "Vous avez terminer votre contrat et quittez votre travail.");
					    PlayerInfo[playerid][pJob] = 0;
					    PlayerInfo[playerid][pChar] = 0;
					    PlayerInfo[playerid][pContractTime] = 0;
					}
					else
					{
					    new chours = 2 - PlayerInfo[playerid][pContractTime];
					    format(string, sizeof(string), " Tu dois encore attendre %d heure pour pouvoir quitter ton job.", chours / 2);
						SendClientMessage(playerid, COLOR_WHITE, string);
					}
		        }
		        else
		        {
					if(PlayerInfo[playerid][pContractTime] >= 10)
					{
					    SendClientMessage(playerid, COLOR_WHITE, "Vous avez terminer votre contrat et quittez votre travail.");
					    PlayerInfo[playerid][pJob] = 0;
					    PlayerInfo[playerid][pChar] = 0;
					    PlayerInfo[playerid][pContractTime] = 0;
					}
					else
					{
					    new chours = 10 - PlayerInfo[playerid][pContractTime];
					    format(string, sizeof(string), " Tu dois encore attendre %d heure pour pouvoir quitter ton job.", chours / 2);
						SendClientMessage(playerid, COLOR_WHITE, string);
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas de Travail!");
			}
		}//not connected
		return 1;
	}
    if(strcmp(cmd, "/caution", true) == 0 || strcmp(cmd, "/bail", true) == 0 || strcmp(cmd, "/cautions", true) == 0)
	//if(strcmp(cmd, "/caution", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
			if(PlayerInfo[playerid][pJailed]==1)
			{
			    if(JailPrice[playerid] > 0)
			    {
			        if(GetPlayerMoney(playerid) > JailPrice[playerid])
			        {
			            format(string, sizeof(string), "Votre caution s'éleve à: $%d", JailPrice[playerid]);
						SendClientMessage(playerid, COLOR_WHITE, string);
						SafeGivePlayerMoney(playerid, -JailPrice[playerid]);
						JailPrice[playerid] = 0;
						WantLawyer[playerid] = 0; CallLawyer[playerid] = 0;
						PlayerInfo[playerid][pJailTime] = 1;
			        }
			        else
			        {
			            SendClientMessage(playerid, COLOR_GRAD1, "Vous navez pas assez d'argent!");
			        }
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GRAD1, "Il n'y à pas de caution!");
			    }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Vous n'êtes pas en prison!");
			}
		}//not connected
		return 1;
	}
	if(strcmp(cmd, "/clear", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
			new member = PlayerInfo[playerid][pMember];
			new leader = PlayerInfo[playerid][pLeader];
			new rank = PlayerInfo[playerid][pRank];
	 		if(gTeam[playerid] == 2)
			{
				if (!PlayerToPoint(3.0, playerid, 253.9280,69.6094,1003.6406))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Vous devez être au commisariat!");
					return 1;
				}
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /clear [playerid/PartOfName]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
                        if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez pas le faire a vous même!"); return 1; }
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "Vous avez nettoyé le casier judiciaure de de %s.", giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
						format(string, sizeof(string), "Officier %s à nettoyer votre casier judiciare.", sendername);
						SendClientMessage(giveplayerid, COLOR_WHITE, string);
						WantedPoints[giveplayerid] = 0;
						WantedLevel[giveplayerid] = 0;
						ClearCrime(giveplayerid);
						if(gTeam[giveplayerid]==4)
						{
						    gTeam[giveplayerid] = 3;
						    SetPlayerToTeamColor(giveplayerid);
						}
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté!");
				}
			}
			else if(member == 6||leader == 6)
			{
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /clear [playerid/PartOfName]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez pas le faire a vous même!"); return 1; }
					    if(rank < 4) { SendClientMessage(playerid, COLOR_GREY, "Vous devez être rang pour pouvoir utiliser cette commande  !"); return 1; }
					    if(GetPlayerMoney(playerid) < 5000) { SendClientMessage(playerid, COLOR_GREY, "Vous avez besoin de $5000 pour nettoyer le casier d'un membre de votre faction!"); return 1; }
		                GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
					    if(member > 0)
					    {
						    if(PlayerInfo[giveplayerid][pMember] != member)
							{
								SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas dans votre faction!");
								return 1;
							}
							format(string, sizeof(string), "Vous avez netoyer le casier judiciaire de %s pour $5000.", giveplayer);
							SendClientMessage(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), "Un membre de votre Faction %s avec le rang %d, à nettoyé votre casier judiciaire.", sendername, rank);
							SendClientMessage(giveplayerid, COLOR_WHITE, string);
						}
						else if(leader > 0)
						{
			                if(PlayerInfo[giveplayerid][pMember] != leader)
							{
								SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas dans votre faction!");
								return 1;
							}
						    format(string, sizeof(string), "Vous avez netoyer le casier judiciaire de %s pour $5000.", giveplayer);
							SendClientMessage(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), "Le Leader de votre faction %s, à nettoyer votre casier judiciaire.", sendername);
							SendClientMessage(giveplayerid, COLOR_WHITE, string);
						}
						WantedPoints[giveplayerid] = 0;
						WantedLevel[giveplayerid] = 0;
						ClearCrime(giveplayerid);
						SafeGivePlayerMoney(playerid, - 5000);
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté!");
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas policier ou membres d'un faction!");
			}
		}//not connected
		return 1;
	}
	if(strcmp(cmdtext, "/cleartchat", true)==0 || strcmp(cmd, "/clearchat", true) == 0)
	{
	   	if(PlayerInfo[playerid][pAdmin] >= 2 || IsPlayerAdmin(playerid))
	   	{
	       	for(new chat=0; chat<51; chat++)
	       	{
	           SendClientMessageToAll(0xFFFFFFAA, " ");
			}
		return 1;
		}
		else
		{
		   SendClientMessage(playerid, RED, "Commande reservée aux Admins.");
		}
		return 1;
	}
	if(strcmp(cmd, "/serrermain", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
			{
				SendClientMessage(playerid, 0xFF0000FF, "USAGE: /serrermain [playerid/PartOfName] [1-6]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, 0xFF0000FF, "USAGE: /serrermain [playerid/PartOfName] [1-6]");
				return 1;
			}
			new snumber;
			snumber = strval(tmp);
			if(snumber < 1 || snumber > 6) { SendClientMessage(playerid, 0xFF0000FF, "USAGE: /serrermain [playerid/PartOfName] [1-6]"); return 1; }
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(ProxDetectorS(2.0, playerid, giveplayerid))
			        {
			            if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "   Vous ne pouvez pas vous serrer votre propre main !"); return 1; }
			            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
			            format(string, sizeof(string), " Vous proposez a %s de lui serrer la main.", giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), " %s vous propose de serrer votre main. (Utilisez /accepter serrermain pour accepter.)", sendername);
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
			            HandshakeOffer[giveplayerid] = playerid;
						HandshakeType[giveplayerid] = snumber;
			        }
			        else
					{
						SendClientMessage(playerid, COLOR_GREY, "   Ce joueur n'est pas prêt de vous !");
						return 1;
					}
			    }
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   Ce joueur n'est pas connecté !");
				return 1;
			}
	    }
	    return 1;
	}
    if(strcmp(cmd, "/amende", true) == 0 || strcmp(cmd, "/pv", true) == 0 || strcmp(cmd, "/ticket", true) == 0)
	//if(strcmp(cmd, "/amende", true) == 0)
    //if(strcmp(cmd, "/pv", true) ==0 || strcmp(cmd, "/ticket", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gTeam[playerid] != 2)
			{
			    SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas policier!");
			    return 1;
			}
	        if(OnDuty[playerid] != 1 && PlayerInfo[playerid][pMember] == 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas en service!");
			    return 1;
			}
	    	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /amende [playerid/PartOfName] [prix] [raison]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
            tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /amende [playerid/PartOfName] [prix] [raison]");
				return 1;
			}
			moneys = strval(tmp);
			if(moneys < 1 || moneys > 50000) { SendClientMessage(playerid, COLOR_GREY, "Le prix de l'amande ne peux pas être en desous de 1$ et au desus de 99999!"); return 1; }
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[64];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
						if(!strlen(result))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /amende [playerid/PartOfName] [prix] [raison]");
							return 1;
						}
						format(string, sizeof(string), "Vous avez donné une amende à %s pour $%d, raison: %s", giveplayer, moneys, (result));
						SendClientMessage(playerid, COLOR_WHITE, string);
						format(string, sizeof(string), "Officier %s vous donne une amende, pour $%d, raison: %s", sendername, moneys, (result));
						SendClientMessage(giveplayerid, COLOR_WHITE, string);
						SendClientMessage(giveplayerid, COLOR_WHITE, "Tapez /accepter amende, pour accepter.");
						TicketOffer[giveplayerid] = playerid;
						TicketMoney[giveplayerid] = moneys;
						return 1;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas près de vous!");
						return 1;
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté!");
			    return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd,"/droits",true)==0)
	{
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' '))
		{
			idx++;
		}
		new offset = idx;
		new result[256];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
		{
			result[idx - offset] = cmdtext[idx];
			idx++;
		}
		result[idx - offset] = EOS;
		if(IsPlayerConnected(playerid))
		{
        	if(PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 2||PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pMember] == 3||PlayerInfo[playerid][pLeader] == 3)
        	{
            	if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "USAGE: /droits [motif]");
					return 1;
				}
				new nom[MAX_PLAYER_NAME];
				GetPlayerName(playerid, nom, sizeof(nom));
				format(string, sizeof(string), "%s dit: Vous êtes en état d'arrestation.", nom);
                ProxDetector(30.0, playerid, string, COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE);
				format(string, sizeof(string), "%s dit: Pour avoir commis le délit suivant %s.", nom, result);
                ProxDetector(30.0, playerid, string, COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE);
				format(string, sizeof(string), "%s dit: Vous avez le droit de garder le silence.", nom);
                ProxDetector(30.0, playerid, string, COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE);
				format(string, sizeof(string), "%s dit: Tout ce que vous direz pourra être retenu contre vous devant le tribunal.", nom);
                ProxDetector(30.0, playerid, string, COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE);
				format(string, sizeof(string), "%s dit: Vous pouvez appeler un avocat.", nom);
                ProxDetector(30.0, playerid, string, COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE);
                printf("%s", string);
			}
			else
			{
                SendClientMessage(playerid,COLOR_RED,"Vous n'êtes pas Policier / FBI / Militaire / C.I.A");
			}
		}
		else
		{
		    SendClientMessage(playerid,COLOR_RED,"Vous n'êtes pas connecté.");
		}
		return 1;
	}
	if(strcmp(cmd, "/arreter", true) == 0 || strcmp(cmd, "/arrest", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
			if(gTeam[playerid] == 2  || IsACop(playerid) || PlayerInfo[playerid][pMember] == 18 || PlayerInfo[playerid][pLeader] == 18)
			{
				if(OnDuty[playerid] != 1 && PlayerInfo[playerid][pMember] == 1)
				{
				    SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas en service!");
				    return 1;
				}
		        /*if(!PlayerToPoint(6.0, playerid, 268.3327,77.8972,1001.0391) || !PlayerToPoint(15.0, playerid,1537.2515,-1674.9572,13.3828))
				{// Jail spot
				    SendClientMessage(playerid, COLOR_GREY, "   You are not near the Jail, can't Arrest!");
				    return 1;
				}*/

				if(PlayerToPoint(6.0, playerid, 268.3327,77.8972,1001.0391) || PlayerToPoint(50.0, playerid,266.7490,77.5669,1001.0391) || PlayerToPoint(15.0, playerid,1537.2515,-1674.9572,13.3828) || PlayerToPoint(6.0, playerid, 1528.9080,-1678.0759,5.8906)|| PlayerToPoint(15.0, playerid,2292.0945,2452.4775,10.8203)|| PlayerToPoint(6.0, playerid,1658.6390,-1691.3785,15.6094)|| PlayerToPoint(15.0, playerid,2293.1460,2467.8892,10.8203))
				{//New arrest system

					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /arreter [prix] [temps (minutes)] [caution (0=non 1=Oui)] [prixcaution]");
						return 1;
					}
					moneys = strval(tmp);
					if(moneys < 1 || moneys > 99999) { SendClientMessage(playerid, COLOR_GREY, "Le prix de prison ne peux être en desous de $1 et au desus de $99999!"); return 1; }
					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /arreter [prix] [temps (minutes)] [caution (0=non 1=Oui)] [prixcaution]");
						return 1;
					}
					new time = strval(tmp);
					if(time < 1 || time > 60) { SendClientMessage(playerid, COLOR_GREY, "Le temps de prison ne peux être en desous de 1 et au desus de 20 minutes!"); return 1; }
					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /arreter [prix] [temps (minutes)] [caution (0=non 1=Oui)] [prixcaution]");
						return 1;
					}
					new bail = strval(tmp);
					if(bail < 0 || bail > 1) { SendClientMessage(playerid, COLOR_GREY, "La caution doit être de 0 ou 1!"); return 1; }
					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /arreter [prix] [temps (minutes)] [caution (0=non 1=Oui)] [prixcaution]");
						return 1;
					}
					new bailprice = strval(tmp);
					if(bailprice < 0 || bailprice > 3000000) { SendClientMessage(playerid, COLOR_GREY, "Le prix de la caution ne peu être en desous de $0 et au desus de $3000000!"); return 1; }
					new suspect = GetClosestPlayer(playerid);
					if(IsPlayerConnected(suspect))
					{
						if(GetDistanceBetweenPlayers(playerid,suspect) < 5)
						{
							GetPlayerName(suspect, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							if(WantedLevel[suspect] < 1)
							{
						    	SendClientMessage(playerid, COLOR_GREY, "Ce joueur doit avoir au moin 1 niveau de recherche!");
						    	return 1;
							}
							format(string, sizeof(string), "Vous avez arreté %s!", giveplayer);
							SendClientMessage(playerid, COLOR_WHITE, string);
							SafeGivePlayerMoney(suspect, -moneys);
							format(string, sizeof(string), "Arreter par %s ~n~  pour $%d", sendername, moneys);
							GameTextForPlayer(suspect, string, 5000, 5);
							SafeResetPlayerWeapons(suspect);
							if(PlayerInfo[playerid][pMember]==1||PlayerInfo[playerid][pLeader]==1)
							{
							    new currank[64];
		    					if(PlayerInfo[playerid][pRank] == 1) { currank = "Cadet"; }
								else if(PlayerInfo[playerid][pRank] == 2) { currank = "Officier"; }
								else if(PlayerInfo[playerid][pRank] == 3) { currank = "Corporal"; }
								else if(PlayerInfo[playerid][pRank] == 4) { currank = "Sergeant"; }
								else if(PlayerInfo[playerid][pRank] == 5) { currank = "Lieutenant"; }
	        					else if(PlayerInfo[playerid][pRank] == 6) { currank = "Capitaine"; }
	        					else if(PlayerInfo[playerid][pRank] == 7) { currank = "Chef Adjoint"; }
	        					else if(PlayerInfo[playerid][pRank] == 8) { currank = "Chef"; }
								else { currank = "Cadet"; }
								format(string, sizeof(string), "[Police] %s %s vient d'arreter %s", currank ,sendername, giveplayer);
								OOCNews(COLOR_BLUE, string);
							}
							else if(PlayerInfo[playerid][pMember]==2||PlayerInfo[playerid][pLeader]==2)
							{
								format(string, sizeof(string), "[Police] Agent %s vient d'arreter %s", sendername, giveplayer);
								OOCNews(COLOR_BLUE, string);
							}
							SetPlayerInterior(suspect, 6);
							SetPlayerPos(suspect,264.6288,77.5742,1001.0391);
							PlayerInfo[suspect][pJailTime] = time * 60;
							PlayerCuffed[suspect] = 0;
							TogglePlayerControllable(suspect, 1);
							if(bail == 1)
							{
								JailPrice[suspect] = bailprice;
								format(string, sizeof(string), "Vous êtes en prison pour %d secondes.   Bail: $%d", PlayerInfo[suspect][pJailTime], JailPrice[suspect]);
								SendClientMessage(suspect, COLOR_WHITE, string);
							}
							else
							{
							    JailPrice[suspect] = 0;
								format(string, sizeof(string), "Vous avez emprisonné le suspect pour %d secondes.   Caution: Aucune", PlayerInfo[suspect][pJailTime]);
								SendClientMessage(suspect, COLOR_WHITE, string);
							}
							PlayerInfo[suspect][pJailed] = 1;
				     	   	PlayerInfo[suspect][pArrested] += 1;
							SetPlayerFree(suspect,playerid, "Arreter");
							WantedPoints[suspect] = 0;
							WantedLevel[suspect] = 0;
							WantLawyer[suspect] = 1;
							PlayerCuffed[suspect] = 0;
							PlayerCuffedTime[suspect] = 0;
							if(GotoCheck[playerid] == 100)//hahahaha truc.
							{
							    if(braquageencours == 1)
							    {
							        SendClientMessage(playerid, COLOR_RED, "Vous êtes mort, tout l'argent que vous avez gagné vous a été retiré.");
							        robmoney = 0;
							        ilbraque[playerid] = 0;
							        GotoCheck[playerid] = 0;
						    		format(string, sizeof(string), "*** A TOUTES LES UNITES : %s est en prison, l'argent a été remis à la banque. ! ***",giveplayer);
									SendRadioMessage(1, TEAM_RADIO_COLOR, string);
									SendRadioMessage(2, TEAM_RADIO_COLOR, string);
									SendRadioMessage(3, TEAM_RADIO_COLOR, string);
									SendRadioMessage(18, TEAM_RADIO_COLOR, string);
								}
							}
						}//distance
					}//not connectednected
					else
					{
				    	SendClientMessage(playerid, COLOR_GREY, "Personne à emprisonné.");
				    	return 1;
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas dans la cellule.");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas policier!");
			    return 1;
			}
		}//not connected
		return 1;
	}
	if(strcmp(cmd, "/joinevent", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(ActiveEvent == 1)
			{
			    if(EventLocked == 1)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   The event is currently locked !");
			        return 1;
			    }
			    if(IsAtEvent[playerid] == 1)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   You have already joined the event !");
			        return 1;
			    }
			    if(EventX == 0.0 && EventY == 0.0 && EventZ == 0.0)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   The event spawn has not been set !");
			        return 1;
			    }
			    SetPlayerPos(playerid, EventX, EventY, EventZ);
			    IsAtEvent[playerid] = 1;
			    SetPlayerVirtualWorld(playerid, EventWorld);
			    SetPlayerInterior(playerid, EventInt);
			    SetPlayerHealth(playerid, EventHP);
			    SetPlayerArmour(playerid, EventArmour);
			    SafeResetPlayerWeapons(playerid);
			    ResetPlayerWeapons(playerid);
			    GivePlayerAdminGun(playerid, EventWeapon1);
			    GivePlayerAdminGun(playerid, EventWeapon2);
			    GivePlayerAdminGun(playerid, EventWeapon3);
			    GivePlayerAdminGun(playerid, EventWeapon4);
			    GivePlayerAdminGun(playerid, EventWeapon5);
			    if(EventJoinText == 1)
			    {
			        GameTextForPlayer(playerid, EventText, 5000, 0);
			    }
			    SendClientMessage(playerid, COLOR_WHITE, "You have been teleported to the event.");
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   There are currently no events active !");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/anevent", true) == 0 || strcmp(cmd, "/annonceevent", true) == 0 || strcmp(cmd, "/annevent", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] >= 4)
	        {
	            if(ActiveEvent == 1)
	            {
					SendClientMessageToAll(COLOR_LIGHTBLUE, " An event has been started by an Administrator, type /joinevent to participate.");
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   You need to start the event first (/startevent) !");
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GRAD1, "   You are not authorized to use that command !");
	        }
	    }
	    return 1;
	}
	if(strcmp(cmd, "/startevent", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(PlayerInfo[playerid][pAdmin] >= 4)
		    {
		        if(ActiveEvent == 0)
		        {
		            if(EventX == 0.0 && EventY == 0.0 && EventZ == 0.0)
			    	{
				        SendClientMessage(playerid, COLOR_GREY, "   The event spawn has not been set !");
				        return 1;
			    	}
			        GetPlayerName(playerid, sendername, sizeof(sendername));
			        SendClientMessage(playerid, COLOR_WHITE, "You have started an event, use /announceevent to announce it to the server.");
			        ActiveEvent = 1;
		        }
		        else
		        {
		            SendClientMessage(playerid, COLOR_GREY, "   An event is already active, use /endevent to finish the current event !");
		        }
		    }
		    else
		    {
		    	SendClientMessage(playerid, COLOR_GRAD1, "   You are not authorized to use that command !");
		    }
	    }
	    return 1;
	}
	if(strcmp(cmd, "/lockevent", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] >= 4)
	        {
		        if(ActiveEvent == 1)
		        {
		            EventLocked = 1;
		            SendClientMessageToAll(COLOR_LIGHTBLUE, " The event has been locked by an Administrator.");
		        }
		        else
				{
					SendClientMessage(playerid, COLOR_GREY, "   There are currently no events active !");
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "   You are not authorized to use that command !");
			}
	    }
	    return 1;
	}
	if(strcmp(cmdtext, "/quitevent", true) == 0)
	{
		if(IsAtEvent[playerid] != 0)
		{
			SetPlayerWeapons(playerid);
			IsAtEvent[playerid] = 0;
			SafeResetPlayerWeapons(playerid);
		}
		return 1;
	}
	if(strcmp(cmd, "/endevent", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] >= 4)
	        {
	            if(ActiveEvent == 1)
	            {
	                EventX = 0.0;
	                EventY = 0.0;
	                EventZ = 0.0;
	                EventInt = 0;
	                EventWorld = 0;
		            EventHP = 100;
		            EventArmour = 0;
		            ActiveEvent = 0;
		            EventLocked = 0;
		            EventWeapon1 = 0;
		            EventWeapon2 = 0;
		            EventWeapon3 = 0;
		            EventWeapon4 = 0;
		            EventWeapon5 = 0;
		            EventJoinText = 0;
		            format(EventText, sizeof(EventText), "None");
					SendClientMessageToAll(COLOR_LIGHTBLUE, " The event has been finished by an Administrator.");
					//foreach(Player, i)
                    for(new i; i<MAX_PLAYERS; i++)
					{
						if(IsPlayerConnected(i))
						{
				   			if(IsAtEvent[i] == 1)
				   			{
				   			    SetPlayerWeapons(i);
				   			    IsAtEvent[i] = 0;
				   			    SafeResetPlayerWeapons(i);
				   			}
						}
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   There are currently no events active !");
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GRAD1, "   You are not authorized to use that command !");
	        }
	    }
	    return 1;
	}
	if(strcmp(cmd, "/seteventinfo", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] >= 4)
	        {
	            if(ActiveEvent == 0)
	            {
		            tmp = strtok(cmdtext, idx);
		            if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_WHITE, "USAGE: /seteventinfo [name]");
						SendClientMessage(playerid, COLOR_GRAD1, "Available names: Jointext, Health, Armor, Gun1, Gun2, Gun3, Gun4, Gun5");
						return 1;
					}
					if(strcmp(tmp,"jointext",true) == 0)
					{
					    new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[128];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
						if(!strlen(result))
						{
							SendClientMessage(playerid, COLOR_WHITE, "USAGE: /seteventinfo jointext [text]");
							return 1;
						}
						format(EventText, sizeof(EventText), "%s", result);
					 	SendClientMessage(playerid, COLOR_WHITE, "You have been set the event jointext to the following.");
					 	GameTextForPlayer(playerid, EventText, 5000, 0);
					 	EventJoinText = 1;
					 	return 1;
					}
				 	if(strcmp(tmp,"health",true) == 0)
				 	{
				 	    tmp = strtok(cmdtext, idx);
					    if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_WHITE, "USAGE: /seteventinfo [health] [amount]");
							return 1;
						}
						new ehp = strvalEx(tmp);
						if(ehp < 1 || ehp > 100) { SendClientMessage(playerid, COLOR_GREY, "   Health can't be below 1 or above 100 !"); return 1; }
						EventHP = ehp;
						format(string, sizeof(string), "You have been set the event health to %d.", ehp);
						SendClientMessage(playerid, COLOR_WHITE, string);
				 	    return 1;
				 	}
				 	if(strcmp(tmp,"armor",true) == 0)
				 	{
				 	    tmp = strtok(cmdtext, idx);
					    if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_WHITE, "USAGE: /seteventinfo [armor] [amount]");
							return 1;
						}
						new earmor = strvalEx(tmp);
						if(earmor < 0 || earmor > 100) { SendClientMessage(playerid, COLOR_GREY, "   Armor can't be below 0 or above 100 !"); return 1; }
						EventArmour = earmor;
						format(string, sizeof(string), "You have been set the event armor to %d.", earmor);
						SendClientMessage(playerid, COLOR_WHITE, string);
				 	    return 1;
				 	}
				 	if(strcmp(tmp,"gun1",true) == 0)
				 	{
				 	    tmp = strtok(cmdtext, idx);
					    if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_WHITE, "USAGE: /seteventinfo [gun1] [gunid]");
							return 1;
						}
						new egun = strvalEx(tmp);
						EventWeapon1 = egun;
						format(string, sizeof(string), "You have been set the event gun1 to %d.", egun);
						SendClientMessage(playerid, COLOR_WHITE, string);
				 	    return 1;
				 	}
				 	if(strcmp(tmp,"gun2",true) == 0)
				 	{
				 	    tmp = strtok(cmdtext, idx);
					    if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_WHITE, "USAGE: /seteventinfo [gun2] [gunid]");
							return 1;
						}
						new egun = strvalEx(tmp);
						EventWeapon2 = egun;
						format(string, sizeof(string), "You have been set the event gun2 to %d.", egun);
						SendClientMessage(playerid, COLOR_WHITE, string);
				 	    return 1;
				 	}
				 	if(strcmp(tmp,"gun3",true) == 0)
				 	{
				 	    tmp = strtok(cmdtext, idx);
					    if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_WHITE, "USAGE: /seteventinfo [gun3] [gunid]");
							return 1;
						}
						new egun = strvalEx(tmp);
						EventWeapon3 = egun;
						format(string, sizeof(string), "You have been set the event gun3 to %d.", egun);
						SendClientMessage(playerid, COLOR_WHITE, string);
				 	    return 1;
				 	}
					if(strcmp(tmp,"gun4",true) == 0)
				 	{
				 	    tmp = strtok(cmdtext, idx);
					    if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_WHITE, "USAGE: /seteventinfo [gun4] [gunid]");
							return 1;
						}
						new egun = strvalEx(tmp);
						EventWeapon4 = egun;
						format(string, sizeof(string), "You have been set the event gun4 to %d.", egun);
						SendClientMessage(playerid, COLOR_WHITE, string);
				 	    return 1;
				 	}
					if(strcmp(tmp,"gun5",true) == 0)
				 	{
				 	    tmp = strtok(cmdtext, idx);
					    if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_WHITE, "USAGE: /seteventinfo [gun5] [gunid]");
							return 1;
						}
						new egun = strvalEx(tmp);
						EventWeapon5 = egun;
						format(string, sizeof(string), "You have been set the event gun5 to %d.", egun);
						SendClientMessage(playerid, COLOR_WHITE, string);
				 	    return 1;
				 	}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   An event is already active, use /endevent to finish the current event !");
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GRAD1, "   You are not authorized to use that command !");
	        }
	    }
	    return 1;
	}
	if(strcmp(cmd, "/seteventpos", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] >= 4)
	        {
	            if(ActiveEvent == 0)
	            {
		            GetPlayerPos(playerid, EventX, EventY, EventZ);
				    EventInt = GetPlayerInterior(playerid);
				    EventWorld = GetPlayerVirtualWorld(playerid);
				    SendClientMessage(playerid, COLOR_WHITE, "You have sucessfully adjusted the event position.");
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "   An event is already active, use /endevent to finish the current event !");
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GRAD1, "   You are not authorized to use that command !");
	        }
	    }
	    return 1;
	}
	//	new string[128],tmp[128];
//	new idx;
	//cmd = strtok(cmdtext, idx);

	#if defined USE_MENU

		if(strcmp("/avmenu", cmdtext, true, 10) == 0)   // (strcmp("/aide", cmdtext, true, 10) == 0)  // if(strcmp(cmdtext, "/avmenu", true) == 0)
		{
		    if(IsPlayerConnected(playerid) && PlayerInfo[playerid][pAdmin] >= 3)
		    {
		        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		        {
	     			ShowMenuForPlayer(MenuAdmin,playerid);
	       			TogglePlayerControllable(playerid, 0);
				}
				else SendClientMessage(playerid,COL_LIGHTRED,"Vous n'ête pas au volant d'un vehicule!");
		    }
		    else SendClientMessage(playerid,COL_LIGHTRED,"Vous n'ête pas autoriser a utiliser cette commande!");
		    return 1;
		}
		if(strcmp("/vlist", cmdtext, true, 10) == 0)
		{
		    if(IsPlayerConnected(playerid))
		    {
				SendClientMessage(playerid,COL_WHITE,"------[LIST DES COMMANDE VEHICULE]------");
				SendClientMessage(playerid,COL_WHITE,"/vechange /acceptveh");
				SendClientMessage(playerid,COL_WHITE,"----------------------------------------");
			}
			return 1;
		}
		if(strcmp("/avlist", cmdtext, true, 10) == 0)
		{
		    if(IsPlayerConnected(playerid) && PlayerInfo[playerid][pAdmin] >= 3)
		    {
				SendClientMessage(playerid,COL_WHITE,"------[LIST ADMIN DES COMMANDE VEHICULE]------");
				SendClientMessage(playerid,COL_WHITE," /avmenu , /veh, /vehsave , /vehdestroy , /avcolor, /avrenamep");
				SendClientMessage(playerid,COL_WHITE," /allessence , /avsave , /convert , /avgoto , /avmodel");
				SendClientMessage(playerid,COL_WHITE,"----------------------------------------------");
			}
			return 1;
		}
	#else
		if(strcmp("/vlist", cmdtext, true, 10) == 0)
		{
		    if(IsPlayerConnected(playerid))
		    {
				ShowPlayerDialog(playerid, VEHMENU, DIALOG_STYLE_LIST, "Menu des commandes de gestion de véhicule","Acheter\nVendre\nGarer\nAlarme\nEssence\nTableau\nEchanger\nAccepeter Vehicle", "Selectionnez", "Annuler");
			}
			else SendClientMessage(playerid,COL_LIGHTRED,"Vous n'êtes pas autoriser a utiliser cette commande!");
			return 1;
		}
		if(strcmp("/vmenu", cmdtext, true, 10) == 0)
		{
		    if(IsPlayerConnected(playerid))
		    {
				ShowPlayerDialog(playerid, VEHMENU, DIALOG_STYLE_LIST, "Menu des commandes de gestion de véhicule","Acheter une Voiture\nVendre\nGarer\nAlarme\nEssence\nTableau\nAccepeter Vehicule", "Selectionnez", "Annuler");
			}
			else SendClientMessage(playerid,COL_LIGHTRED,"Vous n'êtes pas autoriser a utiliser cette commande!");
			return 1;
		}
		if(strcmp("/avlist", cmdtext, true, 10) == 0)
		{
		    if(IsPlayerConnected(playerid) && PlayerInfo[playerid][pAdmin] >= 3)
		    {
				SendClientMessage(playerid,COL_WHITE,"------[LIST ADMIN DES COMMANDE VEHICULE]------");
				SendClientMessage(playerid,COL_WHITE,"/avprix , /avalarme , /avvendre , /avstatus, /avrenamep");
				SendClientMessage(playerid,COL_WHITE,"/avgarer , /avessence , /avmaxessence , /avsave ");
				SendClientMessage(playerid,COL_WHITE,"/vehsave , /vehdestroy , /allessence, /avtuning");
				SendClientMessage(playerid,COL_WHITE,"/veh , /convert , /avgoto , /avmodel , /avcolor");
				SendClientMessage(playerid,COL_WHITE,"----------------------------------------------");
			}
			else SendClientMessage(playerid,COL_LIGHTRED,"Vous n'ête pas autoriser a utiliser cette commande!");
			return 1;
		}
		if(strcmp("/vacheter", cmdtext, true, 10) == 0)
		{
		    if(IsPlayerConnected(playerid))
		    {
		        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		        {
		        	AcheterVehicule(playerid);
				}
				else SendClientMessage(playerid,COL_LIGHTRED,"Vous n'ête pas au volant d'un vehicule!");
		    }
		    return 1;
		}
		if(strcmp("/vvendre", cmdtext, true, 10) == 0)
		{
		    if(IsPlayerConnected(playerid))
		    {
		        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		        {
		        	VendreVehicule(playerid, 0);
				}
				else SendClientMessage(playerid,COL_LIGHTRED,"Vous n'ête pas au volant d'un vehicule!");
		    }
		    return 1;
		}
		if(strcmp("/vgarer", cmdtext, true, 10) == 0)
		{
		    if(IsPlayerConnected(playerid))
		    {
		        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		        {
		        	GarerVehicule(playerid, 0);
				}
				else SendClientMessage(playerid,COL_LIGHTRED,"Vous n'ête pas au volant d'un vehicule!");
		    }
		    return 1;
		}
		if(strcmp("/valarme", cmdtext, true, 10) == 0)
		{
		    if(IsPlayerConnected(playerid))
		    {
		        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		        {
		        	AlarmeVehicule(playerid, 0);
				}
				else SendClientMessage(playerid,COL_LIGHTRED,"Vous n'ête pas au volant d'un vehicule!");
		    }
		    return 1;
		}
		if(strcmp("/vessence", cmdtext, true, 10) == 0)
		{
		    if(IsPlayerConnected(playerid))
		    {
		        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		        {
		            EssenceVehicule(playerid, 0);
				}
				else SendClientMessage(playerid,COL_LIGHTRED,"Vous n'ête pas au volant d'un vehicule!");
		    }
		    return 1;
		}
		if(strcmp("/vtableau", cmdtext, true, 10) == 0)
		{
		    if(IsPlayerConnected(playerid))
		    {
		        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		        {
					TableauDeBord(playerid);
				}
				else SendClientMessage(playerid,COL_LIGHTRED,"Vous n'ête pas au volant d'un vehicule!");
		    }
		    return 1;
		}
		if(strcmp("/callcar", cmdtext, true, 10) == 0)
		{
		    if(IsPlayerConnected(playerid))
		    {
 				#if defined USE_CALLCAR
					new count = 0;
					new playername[MAX_PLAYER_NAME];
					GetPlayerName(playerid,playername,sizeof(playername));
					for(new v=1;v<NbVeh;v++)
					{
					    if(VehiculeInfo[v][VehID] != INVALID_VEH_ID)
					    {
			 				if(strcmp(VehiculeInfo[v][Proprio],playername,true) == 0)
				    		{
								MyVehicleID[playerid][count] = v;
								count++;
							}
						}
					}
					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
			   			SendClientMessage(playerid,COL_WHITE,"UTILISATION: /callcar [numero]");
			   			count = 0;
						for(new v=1;v<NbVeh;v++)
						{
		    				if(VehiculeInfo[v][VehID] != INVALID_VEH_ID)
						   	{
					 			if(strcmp(VehiculeInfo[v][Proprio],playername,true) == 0)
						   		{
									format(string,sizeof(string),"%d: %s",count+1,VehiculeInfo[v][Nom]);
									SendClientMessage(playerid,COL_WHITE,string);
									count++;
			 					}
							}
						}
			   			return 1;
         			}
					new veh = strval(tmp);
					if(veh < 1 || veh > MAX_PLAYER_VEHICLES)
					{
					    format(string,sizeof(string),"Le numero du vehicule ne peux être inferieur a 1 ou superieur a %d",MAX_PLAYER_VEHICLES);
					    SendClientMessage(playerid,COL_LIGHTRED,string);
					    return 1;
					}
					new vehicleid = MyVehicleID[playerid][veh-1];
					if(vehicleid == 0)
					{
			   			SendClientMessage(playerid,COL_LIGHTRED,"Vous n'avez pas de vehicule a se numéro");
					    return 1;
					}
   					format(string,sizeof(string),"Ce vehicule (%s) a été appeler par sont proprietaire (%s)!",VehiculeInfo[vehicleid][Nom],VehiculeInfo[vehicleid][Proprio]);
					for(new i=0;i<MAX_PLAYERS;i++)
					{
					    if(IsPlayerConnected(i))
					    {
					        if(IsPlayerInAnyVehicle(i) && GetPlayerVehicleID(i) == vehicleid)
					        {
					            SendClientMessage(i,COL_LIGHTRED,string);
					            RemovePlayerFromVehicle(i);
							}
						}
					}
					for(new m=0;m<MAX_PLAYER_VEHICLES;m++)
					{
					    MyVehicleID[playerid][m] = 0;
					}
					SetTimerEx("DestroyVeh",2500,0,"i",vehicleid);
					SetTimerEx("CallCar",3000,0,"ii",playerid,vehicleid);
					format(string,sizeof(string),"Votre vehicule (%s) arrivera dans quelque seconde veuillez patienter!",VehiculeInfo[vehicleid][Nom]);
					SendClientMessage(playerid,COL_LIGHTRED,string);
				#else
					SendClientMessage(playerid,COL_LIGHTRED,"Cette option a été desactiver!");
				#endif
			}
			return 1;
		}

		if(strcmp("/avprix", cmdtext, true, 10) == 0)
		{
		    if(IsPlayerConnected(playerid) && PlayerInfo[playerid][pAdmin] >= 3)
		    {
		        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		        {
					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
		   				SendClientMessage(playerid,COL_WHITE,"UTILISATION: /avprix [prix]");
					    return 1;
		            }
		            new vehicleid = GetPlayerVehicleID(playerid);
		            VehiculeInfo[vehicleid][Prix] = strval(tmp);
	       	    	format(string,sizeof(string),"Vous avez changer le prix de ce vehicule (%s). Nouveau prix: %d$",VehiculeInfo[vehicleid][Nom],VehiculeInfo[vehicleid][Prix]);
		    		SendClientMessage(playerid,COL_GREEN,string);
				}
				else SendClientMessage(playerid,COL_LIGHTRED,"Vous n'ête pas au volant d'un vehicule!");
		    }
		    else SendClientMessage(playerid,COL_LIGHTRED,"Vous n'ête pas autoriser a utiliser cette commande!");
		    return 1;
		}
		if(strcmp("/avalarme", cmdtext, true, 10) == 0)
		{
		   	if(IsPlayerConnected(playerid) && PlayerInfo[playerid][pAdmin] >= 3)
		    {
		        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		        {
					AlarmeVehicule(playerid, 1);
				}
				else SendClientMessage(playerid,COL_LIGHTRED,"Vous n'êtes pas au volant d'un vehicule!");
		    }
		    else SendClientMessage(playerid,COL_LIGHTRED,"Vous n'ête pas autoriser a utiliser cette commande!");
		    return 1;
		}
		if(strcmp("/avvendre", cmdtext, true, 10) == 0)
		{
		   	if(IsPlayerConnected(playerid) && PlayerInfo[playerid][pAdmin] >= 3)
		    {
		        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		        {
					VendreVehicule(playerid, 1);
				}
				else SendClientMessage(playerid,COL_LIGHTRED,"Vous n'ête pas au volant d'un vehicule!");
		    }
		    else SendClientMessage(playerid,COL_LIGHTRED,"Vous n'ête pas autoriser a utiliser cette commande!");
		    return 1;
		}
		if(strcmp("/avstatus", cmdtext, true, 10) == 0)
		{
		   	if(IsPlayerConnected(playerid) && PlayerInfo[playerid][pAdmin] >= 3)
		    {
		        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		        {
					StatusVehicule(playerid);
				}
				else SendClientMessage(playerid,COL_LIGHTRED,"Vous n'ête pas au volant d'un vehicule!");
		    }
		    else SendClientMessage(playerid,COL_LIGHTRED,"Vous n'ête pas autoriser a utiliser cette commande!");
		    return 1;
		}
		if(strcmp("/avgarer", cmdtext, true, 10) == 0)
		{
		   	if(IsPlayerConnected(playerid) && PlayerInfo[playerid][pAdmin] >= 3)
		    {
		        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		        {
					GarerVehicule(playerid, 1);
				}
				else SendClientMessage(playerid,COL_LIGHTRED,"Vous n'ête pas au volant d'un vehicule!");
		    }
		    else SendClientMessage(playerid,COL_LIGHTRED,"Vous n'ête pas autoriser a utiliser cette commande!");
		    return 1;
		}
		if(strcmp("/avessence", cmdtext, true, 10) == 0)
		{
		   	if(IsPlayerConnected(playerid) && PlayerInfo[playerid][pAdmin] >= 3)
		    {
		        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		        {
					EssenceVehicule(playerid, 1);
				}
				else SendClientMessage(playerid,COL_LIGHTRED,"Vous n'ête pas au volant d'un vehicule!");
		    }
		    else SendClientMessage(playerid,COL_LIGHTRED,"Vous n'ête pas autoriser a utiliser cette commande!");

		    return 1;
		}
		if(strcmp("/avmaxessence", cmdtext, true, 10) == 0)
		{
		    if(IsPlayerConnected(playerid) && PlayerInfo[playerid][pAdmin] >= 3)
		    {
		        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		        {
					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
		   				SendClientMessage(playerid,COL_WHITE,"UTILISATION: /avmaxessence [litres]");
					    return 1;
		            }
		            new vehicleid = GetPlayerVehicleID(playerid);
		            VehiculeInfo[vehicleid][MaxEssence] = strval(tmp);
				    format(string,sizeof(string),"Vous avez changer le reservoir de ce vehicule (%s). Nouvelle quantiter maxiumum d'essence: %d$",VehiculeInfo[vehicleid][Nom],VehiculeInfo[vehicleid][MaxEssence]);
				    SendClientMessage(playerid,COL_GREEN,string);
				}
				else SendClientMessage(playerid,COL_LIGHTRED,"Vous n'ête pas au volant d'un vehicule!");
		    }
		    else SendClientMessage(playerid,COL_LIGHTRED,"Vous n'ête pas autoriser a utiliser cette commande!");
		    return 1;
		}
		if(strcmp("/avtuning", cmdtext, true, 10) == 0)
		{
		   	if(IsPlayerConnected(playerid) && PlayerInfo[playerid][pAdmin] >= 3)
		    {
		        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		        {
					ResetTuning(playerid);
				}
				else SendClientMessage(playerid,COL_LIGHTRED,"Vous n'ête pas au volant d'un vehicule!");
		    }
		    else SendClientMessage(playerid,COL_LIGHTRED,"Vous n'ête pas autoriser a utiliser cette commande!");
		    return 1;
		}
	#endif
	if(strcmp(cmdtext, "/avrenamep", true) == 0)
	{
	    if(IsPlayerConnected(playerid) && PlayerInfo[playerid][pAdmin] >= 3)
	    {
	        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	        {
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[64];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COL_RED, "USAGE: /avrenamep [nom du proprietaire]");
					return 1;
				}
	            new vehicleid = GetPlayerVehicleID(playerid);
	            strmid(VehiculeInfo[vehicleid][Proprio],result,0,strlen(result),MAX_PLAYER_NAME);
       	    	format(string,sizeof(string),"Vous avez changer le proprietaire de ce vehicule (%s) a %s",VehiculeInfo[vehicleid][Nom],VehiculeInfo[vehicleid][Proprio]);
	    		SendClientMessage(playerid,COL_GREEN,string);
			}
			else SendClientMessage(playerid,COL_LIGHTRED,"Vous n'ête pas au volant d'un vehicule!");
	    }
	    else SendClientMessage(playerid,COL_LIGHTRED,"Vous n'ête pas autoriser a utiliser cette commande!");
	    return 1;
	}
	if(strcmp(cmdtext, "/vechange", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	        {
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
		   			SendClientMessage(playerid,COL_WHITE,"UTILISATION: /vechange [id]");
				    return 1;
        		}
				new giveplayerid = strval(tmp);
				if(playerid == giveplayerid)
				{
				    SendClientMessage(playerid,COL_GREEN,"id incorect!");
				    return 1;
				}
				if(IsPlayerConnected(playerid))
				{
				    if(GetPlayerState(giveplayerid) != PLAYER_STATE_DRIVER)
				    {
				        SendClientMessage(playerid,COL_LIGHTRED,"Ce joueur n'est pas dans un vehicule");
				        return 1;
					}
					new playername[MAX_PLAYER_NAME];
					new vehicleid = GetPlayerVehicleID(playerid);
					GetPlayerName(playerid,playername,sizeof(playername));
					if(strcmp(VehiculeInfo[vehicleid][Proprio],playername, true) != 0)
					{
					    SendClientMessage(playerid,COL_LIGHTRED,"Ce vehicule ne vous appartient pas!");
						return 1;
					}
					new giveplayername[MAX_PLAYER_NAME];
					new givevehicleid = GetPlayerVehicleID(giveplayerid);
					GetPlayerName(giveplayerid,giveplayername,sizeof(giveplayername));
					if(strcmp(VehiculeInfo[givevehicleid][Proprio],giveplayername, true) != 0)
					{
					    SendClientMessage(playerid,COL_LIGHTRED,"Le vehicule dans lequel est ce joueur ne lui appartient pas!");
					    return 1;
					}
					format(string,sizeof(string),"Vous proposer a %s d'echanger sont vehicule (%s) contre votre vehicule (%s)",giveplayername,VehiculeInfo[givevehicleid][Nom],VehiculeInfo[vehicleid][Nom]);
					SendClientMessage(playerid,COL_GREEN,string);
					format(string,sizeof(string),"%s vous propose d'echanger sont vehicule (%s) contre votre vehicule (%s). Taper /acceptveh pour accepter l'echange!",playername,VehiculeInfo[vehicleid][Nom],VehiculeInfo[givevehicleid][Nom]);
					SendClientMessage(giveplayerid,COL_GREEN,string);
					EchangeVeh[giveplayerid][0] = playerid;
					EchangeVeh[giveplayerid][1] = vehicleid;
					EchangeVeh[giveplayerid][2] = givevehicleid;
				}
				else SendClientMessage(playerid,COL_LIGHTRED,"Ce joueur n'est pas connecter!");
			}
			else SendClientMessage(playerid,COL_LIGHTRED,"Vous n'ête pas au volant d'un vehicule!");
		}
		return 1;
	}
	if(strcmp(cmdtext, "/acceptveh", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	        {
				if(EchangeVeh[playerid][0] == 255)
				{
				    SendClientMessage(playerid,COL_LIGHTRED,"Vous n'avez pas de proposition d'echange de vehicule");
				    return 1;
				}
				new giveplayerid = EchangeVeh[playerid][0];
				if(!IsPlayerConnected(giveplayerid))
				{
				    SendClientMessage(playerid,COL_LIGHTRED,"Le joueur qui vous a proposer d'echanger de vehicule c'est deconecter");
				    EchangeVeh[playerid][0] = 255;
				    EchangeVeh[playerid][1] = 0;
				    EchangeVeh[playerid][2] = 0;
				    return 1;
				}
				if(GetPlayerState(giveplayerid) != PLAYER_STATE_DRIVER)
				{
				    SendClientMessage(playerid,COL_LIGHTRED,"Le joueur qui propose l'echange n'est plus dans un vehicule!");
				    EchangeVeh[playerid][0] = 255;
				    EchangeVeh[playerid][1] = 0;
				    EchangeVeh[playerid][2] = 0;
				    return 1;
				}
				new vehicleid = GetPlayerVehicleID(playerid);
				if(vehicleid != EchangeVeh[playerid][2])
				{
				    SendClientMessage(playerid,COL_LIGHTRED,"Vous avez changer de vehicule!");
				    EchangeVeh[playerid][0] = 255;
				    EchangeVeh[playerid][1] = 0;
				    EchangeVeh[playerid][2] = 0;
				    return 1;
				}
				new givevehicleid = GetPlayerVehicleID(giveplayerid);
				if(givevehicleid != EchangeVeh[playerid][1])
				{
				    SendClientMessage(playerid,COL_LIGHTRED,"Le joueur qui vous a proposer l'echange a changer de vehicule!");
				    EchangeVeh[playerid][0] = 255;
				    EchangeVeh[playerid][1] = 0;
				    EchangeVeh[playerid][2] = 0;
				    return 1;
				}
				new playername[MAX_PLAYER_NAME],giveplayername[MAX_PLAYER_NAME];
				GetPlayerName(playerid,playername,sizeof(playername));
				GetPlayerName(giveplayerid,giveplayername,sizeof(giveplayername));
				strmid(VehiculeInfo[vehicleid][Proprio],giveplayername,0,strlen(giveplayername),MAX_PLAYER_NAME);
				strmid(VehiculeInfo[givevehicleid][Proprio],playername,0,strlen(playername),MAX_PLAYER_NAME);
				format(string,sizeof(string),"%s a accepter l'echange de vehicule!",playername);
				SendClientMessage(giveplayerid,COL_GREEN,string);
				format(string,sizeof(string),"Vous avez accepter l'echange de vehicule avec %s",giveplayername);
				SendClientMessage(giveplayerid,COL_GREEN,string);
    			EchangeVeh[playerid][0] = 255;
			    EchangeVeh[playerid][1] = 0;
			    EchangeVeh[playerid][2] = 0;
 			}
			else SendClientMessage(playerid,COL_LIGHTRED,"Vous n'ête pas au volant d'un vehicule!");
		}
		return 1;
	}
	if(strcmp(cmdtext, "/avsave", true) == 0)
	{
	    if(IsPlayerConnected(playerid) && PlayerInfo[playerid][pAdmin] >= 1337)
	    {
	        SauvegardeVeh();
	        SendClientMessage(playerid,COL_GREEN,"Sauvegarde vehicule reussie!");
	    }
	    else SendClientMessage(playerid,COL_LIGHTRED,"Vous n'ête pas autoriser a utiliser cette commande!");
	    return 1;
	}
	if(strcmp(cmdtext, "/avcolor", true) == 0)
	{
	    if(IsPlayerConnected(playerid) && PlayerInfo[playerid][pAdmin] >= 3)
	    {
	        if(!IsPlayerInAnyVehicle(playerid))
	        {
	            SendClientMessage(playerid,COL_LIGHTRED,"Vous n'ête pas dans un vehicule!");
	            return 1;
	        }
	        tmp = strtok2(cmdtext,idx);
	        if(!strlen(tmp))
	        {
	            SendClientMessage(playerid,COL_WHITE,"UTILISATION: /avcolor [color1] [color2]");
	            return 1;
	        }
	        new col1 = strval(tmp);
	        tmp = strtok2(cmdtext,idx);
	        if(!strlen(tmp))
	        {
	            SendClientMessage(playerid,COL_WHITE,"UTILISATION: /avcolor [color1] [color2]");
	            return 1;
	        }
			new col2 = strval(tmp);
			new vehicleid = GetPlayerVehicleID(playerid);
			ChangeVehicleColor(vehicleid,col1,col2);
			VehiculeInfo[vehicleid][Couleur1] = col1;
			VehiculeInfo[vehicleid][Couleur2] = col2;
			SendClientMessage(playerid,COL_GREEN,"Vehicule repeint!");
		}
	    else SendClientMessage(playerid,COL_LIGHTRED,"Vous n'ête pas autoriser a utiliser cette commande!");
	    return 1;
	}
	if(strcmp(cmdtext, "/avmodel", true) == 0)
	{
	    if(IsPlayerConnected(playerid) && PlayerInfo[playerid][pAdmin] >= 1337)
	    {
	        if(!IsPlayerInAnyVehicle(playerid))
	        {
	            SendClientMessage(playerid,COL_LIGHTRED,"Vous n'ête pas dans un vehicule!");
	            return 1;
	        }
	        tmp = strtok2(cmdtext,idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COL_WHITE, "UTILISATION: /avmodel [nom/moedelid]");
				return 1;
			}
			new modelid = ReturnModelByName(tmp);
			if(modelid == 0)
			{
				SendClientMessage(playerid, COL_WHITE, "Modelid incorect! Assurer vous d'avoir mit un nom de vehicule existant ou d'un modelid corect!");
				return 1;
			}
			new vehicleid = GetPlayerVehicleID(playerid);
			new Float:x,Float:y,Float:z,Float:a;
			GetVehiclePos(vehicleid,x,y,z);
			GetVehicleZAngle(vehicleid,a);
			RemoveAllPlayerFromVehicle(vehicleid);
			VehiculeInfo[vehicleid][Model] = modelid;
			strmid(VehiculeInfo[vehicleid][Nom],VehicleName[VehiculeInfo[vehicleid][Model]-400],0,strlen(VehicleName[VehiculeInfo[vehicleid][Model]-400]),64);
			SetTimerEx("DestroyVeh",1500,0,"i",vehicleid);
			SetTimerEx("CreateVeh",2000,0,"iffff",vehicleid,x,y,z,a);
			SauvegardeVeh();
			SendClientMessage(playerid,COL_GREEN,"Model du vehicule changer!");
		}
	    else SendClientMessage(playerid,COL_LIGHTRED,"Vous n'ête pas autoriser a utiliser cette commande!");
	    return 1;
	}
	if(strcmp(cmdtext, "/avgoto", true) == 0)
	{
	    if(IsPlayerConnected(playerid) && PlayerInfo[playerid][pAdmin] >= 1)
	    {
	        tmp = strtok(cmd,idx);
	        if(!strlen(tmp))
	        {
	            SendClientMessage(playerid,COL_WHITE,"UTILISATION: /avgoto [VehID]");
	            SendClientMessage(playerid,COL_LIGHTRED,"INFO: Utiliser le VehID pour vous teleporter sur un vehicule!");
				return 1;
			}
			new vehid = strval(tmp);
			new Float:x,Float:y,Float:z;
			for(new v=1;v<NbVeh;v++)
			{
	  			if(VehiculeInfo[v][VehID] != INVALID_VEH_ID && VehiculeInfo[v][VehID] == vehid)
		    	{
		    	    GetVehiclePos(v,x,y,z);
		    	    SetPlayerPos(playerid,x,y,z+1.5);
					return 1;
				}
			}
	        SendClientMessage(playerid,COL_GREEN,"Ce VehID est incorect!");
	    }
	    else SendClientMessage(playerid,COL_LIGHTRED,"Vous n'ête pas autoriser a utiliser cette commande!");
	    return 1;
	}
	if(strcmp(cmdtext, "/vehsave", true) ==0 )
	{
	    if(IsPlayerConnected(playerid) && PlayerInfo[playerid][pAdmin] >= 1337)
	    {
	        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	        {
	            new vehicleid = GetPlayerVehicleID(playerid);
	            if(VehiculeInfo[vehicleid][VehID] != INVALID_VEH_ID)
	            {
	                SendClientMessage(playerid,COL_LIGHTRED,"Ce vehicule est deja sauvegarder!");
	                return 1;
				}
				new Float:x,Float:y,Float:z,Float:a;
				GetVehiclePos(vehicleid,x,y,z);
				GetVehicleZAngle(vehicleid,a);

				VehiculeInfo[vehicleid][VehID]		= vehicleid;
				VehiculeInfo[vehicleid][Model]		= GetVehicleModel(vehicleid);
				VehiculeInfo[vehicleid][XSpawn]		= x;
				VehiculeInfo[vehicleid][YSpawn]	 	= y;
				VehiculeInfo[vehicleid][ZSpawn] 	= z;
				VehiculeInfo[vehicleid][ASpawn]	  	= a;
				VehiculeInfo[vehicleid][Prix]       = 0;
				VehiculeInfo[vehicleid][Status]     = 0;
				VehiculeInfo[vehicleid][Alarme]	  	= 2;
				VehiculeInfo[vehicleid][Tuning1]	= 0;
				VehiculeInfo[vehicleid][Tuning2]	= 0;
				VehiculeInfo[vehicleid][Tuning3]	= 0;
				VehiculeInfo[vehicleid][Tuning4]	= 0;
				VehiculeInfo[vehicleid][Tuning5]	= 0;
				VehiculeInfo[vehicleid][Tuning6]	= 0;
				VehiculeInfo[vehicleid][Tuning7]	= 0;
				VehiculeInfo[vehicleid][Tuning8]	= 0;
				VehiculeInfo[vehicleid][Tuning9]	= 0;
				VehiculeInfo[vehicleid][Tuning10]	= 0;
				VehiculeInfo[vehicleid][Tuning11]	= 0;
				VehiculeInfo[vehicleid][Tuning12]	= 0;
				VehiculeInfo[vehicleid][Tuning13]	= 0;
				VehiculeInfo[vehicleid][Tuning14]	= 0;
				VehiculeInfo[vehicleid][Tuning15]	= 0;
				VehiculeInfo[vehicleid][Tuning16]	= 0;
				VehiculeInfo[vehicleid][Tuning17]	= 0;
				VehiculeInfo[vehicleid][Peinture]	= 0;
				VehiculeInfo[vehicleid][MaxEssence] = 50;
				VehiculeInfo[vehicleid][Essence] 	= 50;
				strmid(VehiculeInfo[vehicleid][Proprio],"Aucun", 0, strlen("Aucun"),MAX_PLAYER_NAME);
				strmid(VehiculeInfo[vehicleid][Nom],VehicleName[VehiculeInfo[vehicleid][Model]-400],0,strlen(VehicleName[VehiculeInfo[vehicleid][Model]-400]),64);
				VehiculeInfo[vehicleid][Essence] = VehiculeInfo[vehicleid][MaxEssence];
				EssenceCount[vehicleid] = 0;
				NbVeh++;

				format(string,sizeof(string),"Ce vehicule (%s) a bien été sauvegarder!",VehiculeInfo[vehicleid][Nom]);
				SendClientMessage(playerid,COL_GREEN,string);
				SauvegardeVeh();
	        }
			else SendClientMessage(playerid,COL_LIGHTRED,"Vous n'ête pas au volant d'un vehicule!");
	    }
	    else SendClientMessage(playerid,COL_LIGHTRED,"Vous n'ête pas autoriser a utiliser cette commande!");
	    return 1;
	}
	if(strcmp(cmdtext, "/vehdestroy", true) ==0 )
	{
	    if(IsPlayerConnected(playerid) && PlayerInfo[playerid][pAdmin] >= 1337)
	    {
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
			    new vehicleid = GetPlayerVehicleID(playerid);
				format(string,sizeof(string),"Ce vehicule (%s) a bien été suprimer!",VehiculeInfo[vehicleid][Nom]);
				SendClientMessage(playerid,COL_GREEN,string);
				VehiculeInfo[vehicleid][VehID] = INVALID_VEH_ID;
				RemoveAllPlayerFromVehicle(vehicleid);
				SetTimerEx("DestroyVeh",5000,0,"i",vehicleid);
				SauvegardeVeh();
			}
			else SendClientMessage(playerid,COL_LIGHTRED,"Vous n'ête pas au volant d'un vehicule!");
	    }
	    else SendClientMessage(playerid,COL_LIGHTRED,"Vous n'ête pas autoriser a utiliser cette commande!");
	    return 1;
	}
	if(strcmp(cmdtext, "/allessence", true) ==0 )
	{
	    if(IsPlayerConnected(playerid) && PlayerInfo[playerid][pAdmin] >= 1337)
	    {
	        for(new v=1;v<NbVeh;v++)
	        {
				VehiculeInfo[v][Essence] = VehiculeInfo[v][MaxEssence];
			}
			SendClientMessage(playerid,COL_GREEN,"Tout les vehicule on été remplis!");
	    }
	    else SendClientMessage(playerid,COL_LIGHTRED,"Vous n'ête pas autoriser a utiliser cette commande!");
	    return 1;
	}
	if(strcmp(cmdtext,"/convert", true) == 0)
	{
		if(IsPlayerConnected(playerid) && PlayerInfo[playerid][pAdmin] >= 1337)
		{
		    tmp = strtok(cmdtext, idx);
		    if(!strlen(tmp))
		    {
		        SendClientMessage(playerid,COL_WHITE,"UTILISATION: /convert [nom fichier]");
		        return 1;
			}
			if(!fexist(tmp))
	 		{
	 		    format(string,sizeof(string),"Le fichier %s n'existe pas!",tmp);
	 		    SendClientMessage(playerid,COL_LIGHTRED,string);
	 		    return 1;
	 		}
		    new File:convert = fopen(tmp, io_read);
      		new filestring[256];
	       	new CountConvert = 1;
	        while(fread(convert, filestring))
	        {
         		if(strfind(filestring,"AddStaticVehicle(") != -1 && strfind(filestring,")") != -1)
           		{
	            	new find = strfind(filestring,"(");
		            new find2 = strfind(filestring,")");
		            new info[128];
		            strmid(info,filestring,find+1,find2,128);
		            split2(info, Field, ',');

		            new CVeh = CreateVehicle(strval(Field[0]),floatstr(Field[1]),floatstr(Field[2]),floatstr(Field[3]),floatstr(Field[4]),strval(Field[5]),strval(Field[6]),RESPAWN_DELAY);

					VehiculeInfo[CVeh][VehID]		= CVeh;
					VehiculeInfo[CVeh][Model]		= strval(Field[0]);
					VehiculeInfo[CVeh][XSpawn]		= floatstr(Field[1]);
					VehiculeInfo[CVeh][YSpawn]	 	= floatstr(Field[2]);
					VehiculeInfo[CVeh][ZSpawn] 		= floatstr(Field[3]);
					VehiculeInfo[CVeh][ASpawn]	  	= floatstr(Field[4]);
					VehiculeInfo[CVeh][Couleur1]	= strval(Field[5]);
					VehiculeInfo[CVeh][Couleur2]	= strval(Field[6]);
					VehiculeInfo[CVeh][Prix]       	= 0;
					VehiculeInfo[CVeh][Status]     	= 0;
					VehiculeInfo[CVeh][Alarme]	  	= 2;
					VehiculeInfo[CVeh][Tuning1]		= 0;
					VehiculeInfo[CVeh][Tuning2]		= 0;
					VehiculeInfo[CVeh][Tuning3]		= 0;
					VehiculeInfo[CVeh][Tuning4]		= 0;
					VehiculeInfo[CVeh][Tuning5]		= 0;
					VehiculeInfo[CVeh][Tuning6]		= 0;
					VehiculeInfo[CVeh][Tuning7]		= 0;
					VehiculeInfo[CVeh][Tuning8]		= 0;
					VehiculeInfo[CVeh][Tuning9]		= 0;
					VehiculeInfo[CVeh][Tuning10]	= 0;
					VehiculeInfo[CVeh][Tuning11]	= 0;
					VehiculeInfo[CVeh][Tuning12]	= 0;
					VehiculeInfo[CVeh][Tuning13]	= 0;
					VehiculeInfo[CVeh][Tuning14]	= 0;
					VehiculeInfo[CVeh][Tuning15]	= 0;
					VehiculeInfo[CVeh][Tuning16]	= 0;
					VehiculeInfo[CVeh][Tuning17]	= 0;
					VehiculeInfo[CVeh][Peinture]	= 0;
					VehiculeInfo[CVeh][MaxEssence] 	= 50;
					VehiculeInfo[CVeh][Essence] 	= 50;
					strmid(VehiculeInfo[CVeh][Proprio],"Aucun", 0, strlen("Aucun"),128);
					strmid(VehiculeInfo[CVeh][Nom],VehicleName[VehiculeInfo[CVeh][Model]-400],0,strlen(VehicleName[VehiculeInfo[CVeh][Model]-400]),128);

					format(string,sizeof(string),"Vehicule (%s) cree!",VehiculeInfo[CVeh][Nom]);
					SendClientMessage(playerid,COL_GREEN,string);

					CVeh++;
					CountConvert++;
				}
    		}
   			if(CountConvert > 1)
   			{
				format(string,sizeof(string),"%d vehicule on été converti et ajouter!",CountConvert);
    			SendClientMessage(playerid,COL_LIGHTRED,string);
       			SauvegardeVeh();
	   		}
			else SendClientMessage(playerid,COL_LIGHTRED,"Il n'ya pas de ligne 'AddStaticVehicle' dans ce fichier!");
		}
	    else SendClientMessage(playerid,COL_WHITE,"Vous n'ête pas autoriser a utiliser cette commande!");
		return 1;
	}
	if(strcmp(cmd, "/veh", true) == 0)
	{
	    if(IsPlayerConnected(playerid) && PlayerInfo[playerid][pAdmin] >= 1337)
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COL_WHITE, "UTILISATION: /veh [nom/moedelid] [color1] [color2]");
				return 1;
			}
			new modelid = ReturnModelByName(tmp);
			if(modelid == 0)
			{
				SendClientMessage(playerid, COL_WHITE, "Modelid incorect! Assurer vous d'avoir mit un nom de vehicule existant ou d'un modelid corect!");
				return 1;
			}
			new color1 = 0;
			tmp = strtok(cmdtext, idx);
			if(strlen(tmp)) color1 = strval(tmp);
			new color2 = 0;
			tmp = strtok(cmdtext, idx);
			if(strlen(tmp)) color2 = strval(tmp);

			new Float:x,Float:y,Float:z,Float:a;
			GetPlayerPos(playerid,x,y,z);
			GetPlayerFacingAngle(playerid,a);
			GetXYFront(x, y, a, 3.0);
			new Cveh = CreateVehicle(modelid,x,y,z,a,color1,color2,RESPAWN_DELAY);

			VehiculeInfo[Cveh][VehID]		= INVALID_VEH_ID;
			VehiculeInfo[Cveh][Model]		= modelid;
			VehiculeInfo[Cveh][XSpawn]		= x;
			VehiculeInfo[Cveh][YSpawn]	 	= y;
			VehiculeInfo[Cveh][ZSpawn] 		= z;
			VehiculeInfo[Cveh][ASpawn]	  	= a;
			VehiculeInfo[Cveh][Couleur1]	= color1;
			VehiculeInfo[Cveh][Couleur2]	= color2;
			VehiculeInfo[Cveh][Prix]       	= 0;
			VehiculeInfo[Cveh][Status]     	= 0;
			VehiculeInfo[Cveh][Alarme]	  	= 2;
			VehiculeInfo[Cveh][Tuning1]		= 0;
			VehiculeInfo[Cveh][Tuning2]		= 0;
			VehiculeInfo[Cveh][Tuning3]		= 0;
			VehiculeInfo[Cveh][Tuning4]		= 0;
			VehiculeInfo[Cveh][Tuning5]		= 0;
			VehiculeInfo[Cveh][Tuning6]		= 0;
			VehiculeInfo[Cveh][Tuning7]		= 0;
			VehiculeInfo[Cveh][Tuning8]		= 0;
			VehiculeInfo[Cveh][Tuning9]		= 0;
			VehiculeInfo[Cveh][Tuning10]	= 0;
			VehiculeInfo[Cveh][Tuning11]	= 0;
			VehiculeInfo[Cveh][Tuning12]	= 0;
			VehiculeInfo[Cveh][Tuning13]	= 0;
			VehiculeInfo[Cveh][Tuning14]	= 0;
			VehiculeInfo[Cveh][Tuning15]	= 0;
			VehiculeInfo[Cveh][Tuning16]	= 0;
			VehiculeInfo[Cveh][Tuning17]	= 0;
			VehiculeInfo[Cveh][Peinture]	= 0;
			VehiculeInfo[Cveh][MaxEssence] 	= 50;
			VehiculeInfo[Cveh][Essence] 	= 50;
			strmid(VehiculeInfo[Cveh][Proprio],"Aucun", 0, strlen("Aucun"),128);
			strmid(VehiculeInfo[Cveh][Nom],VehicleName[modelid-400],0,strlen(VehicleName[modelid-400]),128);

			format(string,sizeof(string),"Vehicule (%s) cree!",VehiculeInfo[Cveh][Nom]);
			SendClientMessage(playerid,COL_GREEN,string);
			SendClientMessage(playerid,COL_LIGHTRED,"Pour ajouter ce vehicule a la liste des vehicule sauvegarder taper /vehsave ");
		}
	    else SendClientMessage(playerid,COL_WHITE,"Vous n'ête pas autoriser a utiliser cette commande!");
		return 1;
	}
    if(strcmp(cmdtext, "/contrat", true) == 0 || strcmp(cmdtext, "/contract", true) == 0 || strcmp(cmdtext, "/contracts", true) == 0)
	//if(strcmp(cmd, "/contrat", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /contrat [playerid/PartOfName] [montant]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /contrat [playerid/PartOfName] [montant]");
				return 1;
			}
			moneys = strval(tmp);
			if(moneys < 1000 || moneys > 100000) { SendClientMessage(playerid, COLOR_GREY, "   Tu ne peux pas mettre un contrat au dessous de 1'000 dollars"); return 1; }
			if(PlayerInfo[playerid][pLevel] < 2)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Vous devez être niveau 2 pour metre un contrat sur la tête de quelqu'un.");
				return 1;
			}
			if (IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
				    if(PlayerInfo[giveplayerid][pMember] == 8 && PlayerInfo[playerid][pMember] == 8)
				    {
				        SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez pas placer un contrat sur un Hitman!");
				        return 1;
				    }
				    else if(PlayerInfo[giveplayerid][pLeader] == 8 && PlayerInfo[playerid][pMember] == 8)
				    {
				        SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez pas placer un contrat sur un Hitman!");
				        return 1;
				    }
				    else if(PlayerInfo[giveplayerid][pMember] == 8||PlayerInfo[giveplayerid][pLeader] == 8)
				    {
				        SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez pas placer un contrat sur un Hitman!");
				        return 1;
				    }
				    if(gTeam[giveplayerid] == 2 && moneys != 100000)
				    {
				        SendClientMessage(playerid, COLOR_GREY, "Seulement $100000 peuvent être placé sur la tête d'un policier!");
				        return 1;
				    }
				    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Tu ne peut pas faire un contrat sur ta tete!"); return 1; }
					GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					playermoney = GetPlayerMoney(playerid);
					if (moneys > 0 && playermoney >= moneys)
					{
						SafeGivePlayerMoney(playerid, (0 - moneys));
						PlayerInfo[giveplayerid][pHeadValue]+=moneys;
						format(string, sizeof(string), "%s à placé un contrat sur %s, pour $%d.",sendername, giveplayer, moneys);
						SendFamilyMessage(8, COLOR_YELLOW, string);
						format(string, sizeof(string), "Vous avez placé un contrat sur %s, pour $%d.",giveplayer, moneys);
						SendClientMessage(playerid, COLOR_WHITE, string);
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD1, "Mauvais montant.");
					}
				}
			}
			else
			{
				format(string, sizeof(string), "L'ID %d n'est pas connecté.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
	else
	{
	    SendClientMessage(playerid, COLOR_WHITE, "[SERVEUR] La commande demandée est inexistante, utiliser /aide pour consulter les commandes.");
	}
	return 1;
}


//------------------------------------------------------------------------------------------------------
public HouseLevel(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new h = PlayerInfo[playerid][pPhousekey];
		if(h == 255) { return 0; }
		if(h <= 4) { return 1; }
		if(h >= 5 && h <= 9)  { return 2; }
		if(h >= 10 && h <= 18) { return 3; }
		if(h >= 19 && h <= 22) { return 4; }
		if(h >= 23 && h <= 25) { return 5; }
		if(h == 26) { return 6; }
		if(h == 27) { return 7; }
		if(h >= 28 && h <= 31) { return 7; }
	}
	return 0;
}

public CHouseLevel(houseid)
{
	if(houseid <= 4) { return 3; }
	if(houseid >= 29 && houseid <= 30) { return 4; }
	if(houseid >= 5 && houseid <= 9) { return 5; }
	if(houseid >= 10 && houseid <= 18 || houseid == 28) { return 7; }
	if(houseid >= 19 && houseid <= 22) { return 8; }
	if(houseid >= 23 && houseid <= 25) { return 9; }
	if(houseid == 26) { return 10; }
	if(houseid == 27) { return 11; }
	if(houseid >= 28 && houseid <= 31) { return 12; }
	return 0;
}

public ProxDetector(Float:radi, playerid, string[],col1,col2,col3,col4,col5)
{
	if(IsPlayerConnected(playerid))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		//radi = 2.0; //Trigger Radius
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i) && (GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i)))
			{
				if(!BigEar[i])
				{
					GetPlayerPos(i, posx, posy, posz);
					tempposx = (oldposx -posx);
					tempposy = (oldposy -posy);
					tempposz = (oldposz -posz);
					//printf("DEBUG: X:%f Y:%f Z:%f",posx,posy,posz);
					if (((tempposx < radi/16) && (tempposx > -radi/16)) && ((tempposy < radi/16) && (tempposy > -radi/16)) && ((tempposz < radi/16) && (tempposz > -radi/16)))
					{
						SendClientMessage(i, col1, string);
					}
					else if (((tempposx < radi/8) && (tempposx > -radi/8)) && ((tempposy < radi/8) && (tempposy > -radi/8)) && ((tempposz < radi/8) && (tempposz > -radi/8)))
					{
						SendClientMessage(i, col2, string);
					}
					else if (((tempposx < radi/4) && (tempposx > -radi/4)) && ((tempposy < radi/4) && (tempposy > -radi/4)) && ((tempposz < radi/4) && (tempposz > -radi/4)))
					{
						SendClientMessage(i, col3, string);
					}
					else if (((tempposx < radi/2) && (tempposx > -radi/2)) && ((tempposy < radi/2) && (tempposy > -radi/2)) && ((tempposz < radi/2) && (tempposz > -radi/2)))
					{
						SendClientMessage(i, col4, string);
					}
					else if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
					{
						SendClientMessage(i, col5, string);
					}
				}
				else
				{
					SendClientMessage(i, col1, string);
				}
			}
		}
	}//not connected
	return 1;
}

public CrimInRange(Float:radi, playerid,copid)
{
	if(IsPlayerConnected(playerid)&&IsPlayerConnected(copid))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		GetPlayerPos(copid, posx, posy, posz);
		tempposx = (oldposx -posx);
		tempposy = (oldposy -posy);
		if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)))
		{
			return 1;
		}
	}
	return 0;
}

public ProxDetectorS(Float:radi, playerid, targetid)
{
    if(IsPlayerConnected(playerid)&&IsPlayerConnected(targetid))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		//radi = 2.0; //Trigger Radius
		GetPlayerPos(targetid, posx, posy, posz);
		tempposx = (oldposx -posx);
		tempposy = (oldposy -posy);
		tempposz = (oldposz -posz);
		//printf("DEBUG: X:%f Y:%f Z:%f",posx,posy,posz);
		if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
		{
			return 1;
		}
	}
	return 0;
}

public PlayerToPoint(Float:radi, playerid, Float:x, Float:y, Float:z)
{
    if(IsPlayerConnected(playerid))
	{
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		tempposx = (oldposx -x);
		tempposy = (oldposy -y);
		tempposz = (oldposz -z);
		//printf("DEBUG: X:%f Y:%f Z:%f",posx,posy,posz);
		if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
		{
			return 1;
		}
	}
	return 0;
}

public PlayerToPointStripped(Float:radi, playerid, Float:x, Float:y, Float:z, Float:curx, Float:cury, Float:curz)
{
    if(IsPlayerConnected(playerid))
	{
		new Float:tempposx, Float:tempposy, Float:tempposz;
		tempposx = (curx -x);
		tempposy = (cury -y);
		tempposz = (curz -z);
		if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi))) return 1;
	}
	return 0;
}

public NameTimer1()
{
	for(new i = 0;i < MAX_PLAYERS;i++)
 	{
	 	if(IsPlayerConnected(i))
 		{
 			for(new q = 0;q < MAX_PLAYERS;q++)
 			{
				if(IsPlayerConnected(q))
				{
 					new Float:p1x;
					new Float:p1y;
					new Float:p1z;
					new Float:p2x;
					new Float:p2y;
					new Float:p2z;
					if(IsPlayerConnected(i) && IsPlayerConnected(q))
					{
						GetPlayerPos(i,p1x,p1y,p1z);
    					GetPlayerPos(q,p2x,p2y,p2z);
						if(GetPointDistanceToPointExMorph(p1x,p1y,p1z,p2x,p2y,p2z) < pdistance)
						{
							if(PlayerInfo[q][pMaskuse] != 1)
	    					{
								ShowPlayerNameTagForPlayer(i,q,1);
							}
	    				}
						else
						{
							ShowPlayerNameTagForPlayer(i,q,0);
						}
                    }
                }
            }
        }
	}
}

public CustomPickups()
{
	new Float:oldposx, Float:oldposy, Float:oldposz;
	new string[128];
	NameTimer1();
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			GetPlayerPos(i, oldposx, oldposy, oldposz);
			new tmpcar = GetPlayerVehicleID(i);
			if(oldposx!=0.0 && oldposy!=0.0 && oldposz!=0.0)
			{
				for(new h = 0; h < sizeof(SBizzInfo); h++)
				{
					if(IsATruck(tmpcar) && PlayerToPoint(10.0, i, SBizzInfo[h][sbEntranceX], SBizzInfo[h][sbEntranceY], SBizzInfo[h][sbEntranceZ]))
					{
						format(string, sizeof(string), "~w~%s~n~~r~Produits Voulus~w~: %d~n~~y~Prix par Produit: ~w~: $%d~n~~g~Caisse: ~w~: $%d",SBizzInfo[h][sbMessage],(SBizzInfo[h][sbMaxProducts]-SBizzInfo[h][sbProducts]),SBizzInfo[h][sbPriceProd],SBizzInfo[h][sbTill]);
						GameTextForPlayer(i, string, 5000, 3);
						return 1;
					}
					if(PlayerToPoint(2.0, i, SBizzInfo[h][sbEntranceX], SBizzInfo[h][sbEntranceY], SBizzInfo[h][sbEntranceZ]))
					{
						if(SBizzInfo[h][sbOwned] == 1)
						{
							format(string, sizeof(string), "~w~%s~w~~n~Proprietaire : %s~n~Extortion par : %s~n~Prix Entree : ~g~$%d ~n~~w~pour entrer tappez /entrer",SBizzInfo[h][sbMessage],SBizzInfo[h][sbOwner],SBizzInfo[h][sbExtortion],SBizzInfo[h][sbEntranceCost]);
						}
						else
						{
							format(string, sizeof(string), "~w~%s~w~~n~Ce biz est a vendre~n~Prix: ~g~$%d ~w~Niveau : %d ~n~Pour acheter ce Biz tappez ~n~/acheterbiz",SBizzInfo[h][sbMessage],SBizzInfo[h][sbBuyPrice],SBizzInfo[h][sbLevelNeeded]);
						}
						GameTextForPlayer(i, string, 5000, 3);
						return 1;
					}
				}
				for(new h = 0; h < sizeof(HouseInfo); h++)
				{
					if(PlayerToPoint(2.0, i, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]))
					{
						if(HouseInfo[h][hOwned] == 1)
						{
							if(HouseInfo[h][hRentabil] == 0)
							{
								format(string, sizeof(string), "~w~Cette Maison est la propriete de~n~%s~n~Niveau : %d",HouseInfo[h][hOwner],HouseInfo[h][hLevel]);
							}
							else
							{
								format(string, sizeof(string), "~w~Cette Maison est la propriete de~n~%s~n~Loyer: $%d Niveau : %d~n~Utilisez /louerchambre pour louer ",HouseInfo[h][hOwner],HouseInfo[h][hRent],HouseInfo[h][hLevel]);
							}
							GameTextForPlayer(i, string, 5000, 3);
							return 1;
						}
						else
						{
							//format(string, sizeof(string), "~w~Cette Maison est a vendre~n~Description: %s ~n~Cout: ~g~$%d~n~~w~ Niveau : %d~n~pour acheter utiliser /achetermaison",HouseInfo[h][hDiscription],HouseInfo[h][hValue],HouseInfo[h][hLevel]);
							format(string, sizeof(string), "Cout: ~g~$%d~n~~w~ Niveau : %d~n~pour acheter cette maison, utiliser /achetermaison",HouseInfo[h][hValue],HouseInfo[h][hLevel]);
						}
						GameTextForPlayer(i, string, 5000, 3);
						return 1;
					}
				}
				for(new h = 0; h < sizeof(BizzInfo); h++)
				{
					if(IsATruck(tmpcar) && PlayerToPoint(10.0, i, BizzInfo[h][bEntranceX], BizzInfo[h][bEntranceY], BizzInfo[h][bEntranceZ]))
					{
						format(string, sizeof(string), "~w~%s~n~~r~Produits Voulus~w~: %d~n~~y~Prix par Produit: ~w~: $%d~n~~g~Caisse: ~w~: $%d",BizzInfo[h][bMessage],(BizzInfo[h][bMaxProducts]-BizzInfo[h][bProducts]),BizzInfo[h][bPriceProd],BizzInfo[h][bTill]);
						GameTextForPlayer(i, string, 5000, 3);
						return 1;
					}
					if(PlayerToPoint(2.0, i, BizzInfo[h][bEntranceX], BizzInfo[h][bEntranceY], BizzInfo[h][bEntranceZ]))
					{
						if(BizzInfo[h][bOwned] == 1)
						{
							format(string, sizeof(string), "~w~%s~w~~n~Proprietaire : %s~n~Extortion par : %s~n~Prix Entree : ~g~$%d ~n~~w~pour entrer tappez /entrer",BizzInfo[h][bMessage],BizzInfo[h][bOwner],BizzInfo[h][bExtortion],BizzInfo[h][bEntranceCost]);
						}
						else
						{
							format(string, sizeof(string), "~w~%s~w~~n~Ce Biz est a vendre~n~Prix: ~g~$%d ~w~Niveau : %d ~n~pour acheter ce biz tappez ~n~/acheterbiz",BizzInfo[h][bMessage],BizzInfo[h][bBuyPrice],BizzInfo[h][bLevelNeeded]);
						}
						GameTextForPlayer(i, string, 5000, 3);
						return 1;
					}
				}
			}//custompickups end
			/*else if (PlayerToPoint(2.0, i, 1488.6949,-1721.7136,8.2067))
			{
			    GameTextForPlayer(i, "~w~Black ~r~Market", 5000, 3);
			}*/
			if (PlayerToPoint(3.0, i, 2847.4922,-2504.8691,14.6081))
			{// Hospital near speedway
				GameTextForPlayer(i, "~w~Tapez /materials deliver pour deposer vos cargaison(s).", 5000, 5);
          	}
            else if (PlayerToPoint(1.0, i, 349.5560,161.6693,1019.9912))
			{// All Saints hospital
				GameTextForPlayer(i, "~w~Tapez /healme pour vous soignez vous même.", 5000, 5);
			}
  			else if (PlayerToPoint(3.0, i, 1424.1024,-1317.6764,13.5547))
			{//Buyable Drugs for gun Dealers
			    GameTextForPlayer(i, "~w~Tapez /materials get, pour prendre des ~r~materiaux", 5000, 3);
            }
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,1793.02,-1296.56,13.44))
			{
			    if(PlayerInfo[i][pJob] == 6) { GameTextForPlayer(i, "~w~Type ~r~/paper ~w~to create a newspaper",5000,3); }
			    else if(PlayerInfo[i][pJob] == 15) { GameTextForPlayer(i, "~w~Type ~r~/papers ~w~to see all the made newspapers",5000, 3); }
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,2146.3523,-2267.7498,14.2344))
			{
			    GameTextForPlayer(i, "~y~You can get ~r~Materials~y~ from your packages here ~n~~w~Type /materials deliver", 5000, 3);
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,213.8549,-230.5761,1.7786))
			{
			    if(PlayerInfo[i][pJob] > 0 || PlayerInfo[i][pMember] > 0) {}
			    else { GameTextForPlayer(i, "~g~Bienvenue,~n~~y~vous pouvez devenir ~r~Contrebandier de matériaux~n~~w~Type /prendrejob si vous souhaitez en devenir un", 5000, 3); }
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,2072.5486,-1582.8029,13.4741))
			{
			    if(PlayerInfo[i][pJob] > 0 || PlayerInfo[i][pMember] > 0) {}
			    else { GameTextForPlayer(i, "~g~Bienvenue,~n~~y~vous pouvez devenir ~r~Trafiquant de drogues~y~~n~~w~Type /prendrejob si vous souhaitez devenir en un", 5000, 3); }
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,1611.5129,-1893.6997,13.5469))
			{
			    if(PlayerInfo[i][pJob] > 0 || PlayerInfo[i][pMember] > 0) {}
			    else { GameTextForPlayer(i, "~g~Bienvenue,~n~~y~vous pouvez devenir ~r~Balayeur de rue~n~~w~Type /prendrejob si vous souhaitez devenir en un", 5000, 3); }
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,1215.1304,-11.8431,1000.9219))
			{
                if(PlayerInfo[i][pJob] > 0 || PlayerInfo[i][pMember] > 0) {}
			    else { GameTextForPlayer(i, "~g~Bienvenue,~n~~y~Ici tu peux devenir une ~r~Prostitué~y~~n~~w~Tape /takejob si tu veux en devenir une", 5000, 3); }
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,1793.02,-1296.56,13.44))
			{
			    if(PlayerInfo[i][pMember] == 9 || PlayerInfo[i][pLeader] == 9) { GameTextForPlayer(i, "~w~Type ~r~/paper ~w~to create a newspaper",5000,3); }
			    else if(PlayerInfo[i][pJob] == 15) { GameTextForPlayer(i, "~w~Type ~r~/papers ~w~to see all the made newspapers",5000, 3); }
			}
			else if (PlayerToPoint(2.0, i,1366.4325,-1275.2096,13.5469))
			{
			    GameTextForPlayer(i, "~g~Bienvenue,~n~~y~vous pouvez devenir un ~r~Trafiquant D'armes~y~~n~~w~Tape /join Si vous souhaitez en devenir un", 5000, 3);
			/*}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,2146.3523,-2267.7498,14.2344))
			{
			    GameTextForPlayer(i, "~y~You can get ~r~Materials~y~ from your packages here ~n~~w~Type /materials deliver", 5000, 3);*/
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,2072.5486,-1582.8029,13.4741))
			{
			    if(PlayerInfo[i][pJob] > 0 || PlayerInfo[i][pMember] > 0) {}
				else { GameTextForPlayer(i, "~g~Bienvenue,~n~~y~vous pouvez devenir un ~r~Drugs Dealer~y~~n~~w~Tape /join Si vous souhaitez en devenir un", 5000, 3); }
			}
			else if (PlayerToPoint(3.0, i,379.1396,-114.2661,1001.4922))
   			{// Pizza Pickup
        		if (PlayerInfo[i][pJob] != 17)
    			{
    			    SendClientMessage(i, COLOR_GREY, "Vous n'êtes pas un Livreur de pizza");
     				return 1;
    			}
    			if (sPizza[i] != 1)
    			{
     				SendClientMessage(i, COLOR_WHITE, "Vous avez ramassé une pizza et vous pouvez a nouveau livrer les clients.");
       				sPizza[i] = 1;
      			}
   			}
			else if (PlayerToPoint(2.0, i,1142.8541,-1319.9788,1019.6968))
			{
			    if(PlayerInfo[i][pMember] == 4 || PlayerInfo[i][pLeader] == 4) { SetTimerEx("elevator1", 1000, false, "i", i); }
			    else { GameTextForPlayer(i, "~r~Vous n'etes pas Medecin !", 5000, 3); }
			}
			else if (PlayerToPoint(2.0, i,2049.7078,-1405.7129,48.3359))
			{
			    if(PlayerInfo[i][pMember] == 4 || PlayerInfo[i][pLeader] == 4) { SetTimerEx("elevator2", 1000, false, "i", i); }
			    else { GameTextForPlayer(i, "~r~Vous n'etes pas Medecin !", 5000, 3); }
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,1381.0413,-1088.8511,27.3906))
			{
			    GameTextForPlayer(i, "~g~Bievenue,~n~~y~Utilise /mission pour prendre une mission", 5000, 3);
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(1.0, i,242.7591,66.4315,1003.6406))
			{
			    if(PlayerInfo[i][pMember] == 1 || PlayerInfo[i][pLeader] == 1)
			    {
			        GameTextForPlayer(i, "~g~Elevateur de la LSPD~n~~w~Tappez ~r~/+1 ~w~Pour aller sur le toit~n~Tappez ~r~/-1 ~w~Pour aller au sous sol", 5000, 3);
			    }
			    else
			    {
			        GameTextForPlayer(i, "~r~Personnel seulement!", 5000, 3);
			    }
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,1734.2914,-1660.2087,23.7178))
			{
			    GameTextForPlayer(i, "~y~Avocat~n~ Faites ~r~/prendrejob ~y~si vous voulez ce Job", 5000, 3);
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,1734.4084,-1654.3083,23.7309))
			{
			    GameTextForPlayer(i, "~y~Serveur~n~ Faites ~r~/prendrejob ~y~si vous voulez ce Job", 5000, 3);
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,1734.5419,-1648.5579,23.7436))
			{
			    GameTextForPlayer(i, "~y~Detective~n~ Faites ~r~/prendrejob ~y~si vous voulez ce Job", 5000, 3);
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,1734.4458,-1642.4052,23.7519))
			{
			    GameTextForPlayer(i, "~y~Mecanicien~n~ Faites ~r~/prendrejob ~y~si vous voulez ce Job", 5000, 3);
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,1708.9329,-1649.1675,23.6953))
			{
			    GameTextForPlayer(i, "~y~Garde du Corps~n~ Faites ~r~/prendrejob ~y~si vous voulez ce Job", 5000, 3);
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,1708.9597,-1654.3541,23.7012))
			{
			    GameTextForPlayer(i, "~y~Boxeur~n~ Faites ~r~/prendrejob ~y~si vous voulez ce Job", 5000, 3);
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,1709.0222,-1659.6246,23.7024))
			{
			    GameTextForPlayer(i, "~y~Chauffeur de Taxi~n~ Faites ~r~/prendrejob ~y~si vous voulez ce Job", 5000, 3);
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,1708.9978,-1664.8838,23.7037))
			{
			    GameTextForPlayer(i, "~y~Chauffeur de Bus~n~ Faites ~r~/prendrejob ~y~si vous voulez ce Job", 5000, 3);
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,1709.1526,-1670.0980,23.7046))
			{
			    GameTextForPlayer(i, "~y~Livreur de Journaux~n~ Faites ~r~/prendrejob ~y~si vous voulez ce Job", 5000, 3);
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,1709.2399,-1670.1592,27.1953))
			{
			    GameTextForPlayer(i, "~y~Livreur de Pizza~n~ Faites ~r~/prendrejob ~y~si vous voulez ce Job", 5000, 3);
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,1709.0657,-1664.8726,27.1953))
			{
			    GameTextForPlayer(i, "~y~Fermier~n~ Faites ~r~/prendrejob ~y~si vous voulez ce Job", 5000, 3);
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,1708.9312,-1659.2906,27.1953))
			{
			    GameTextForPlayer(i, "~y~Balayeur de Rue~n~ Faites ~r~/prendrejob ~y~si vous voulez ce Job", 5000, 3);
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,1708.8202,-1654.2233,27.1953))
			{
			    GameTextForPlayer(i, "~y~Eboueur~n~ Faites ~r~/prendrejob ~y~si vous voulez ce Job", 5000, 3);
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,1708.9236,-1649.0898,27.1953))
			{
			    GameTextForPlayer(i, "~y~Ouvrier~n~ Faites ~r~/prendrejob ~y~si vous voulez ce Job", 5000, 3);
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,1734.6354,-1660.2012,27.2164))
			{
			    GameTextForPlayer(i, "~y~Conducteur de Train~n~ Faites ~r~/prendrejob ~y~si vous voulez ce Job", 5000, 3);
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,1734.4001,-1654.1403,27.2271))
			{
			    GameTextForPlayer(i, "~y~Pilote de Ligne~n~ Faites ~r~/prendrejob ~y~si vous voulez ce Job", 5000, 3);
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,1600.8793,-2333.3535,13.5390))
			{
			    GameTextForPlayer(i, "~y~Vous avez trouvé un guide~n~ Type ~r~/guide ~y~pour le lire", 5000, 3);
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,359.6820,207.0294,1008.3828))
			{
			    GameTextForPlayer(i, "~w~Centre de Pub De Los Santos City~n~Utilisez ~g~/pub~w~ Pour Faire passer une Pub", 5000, 3);
			}
		    /*else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,1054.8140,2148.3220,10.8203) && ilbraque[i] == 1)
			{
				SafeGivePlayerMoney(i, robmoney); // a adapter suivant le GM pour pas avoir de problème avec l'anti-cheat money
				braquageencours = 0;
				format(string, sizeof(string), "** Tu as reçu l'argent ! $%d !!!",robmoney);
				SendClientMessage(i,COLOR_YELLOW,string);
				ilbraque[i] = 0;
			}*/
			else if (PlayerToPoint(3.0, i, 2142.5330,1625.7997,993.6882))
			{
			    GameTextForPlayer(i, "~w~Tape ~r~/decoder ~w~pour decoder la porte blinde~n~Ou Tape ~r~/mdpbanque [code]~w~pour ouvrir la porte", 5000, 3);
			}
			else if (PlayerToPoint(3.0, i, 2144.0420,1638.5311,993.5761))
			{
			    GameTextForPlayer(i, "~w~Tape ~r~/braquer ~w~pour braquer la banque", 5000, 3);
			}
			else if (PlayerToPoint(2.0, i, 2217.3882,-1146.9778,1025.7969))
			{
			    GameTextForPlayer(i, "~w~pour louer une chambre ~r~/louerchambrehotel", 5000, 3);
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,1054.8140,2148.3220,10.8203) && ilbraque[i] == 1)
			{
				SafeGivePlayerMoney(i, robmoney); // a adapter suivant le GM pour pas avoir de problème avec l'anti-cheat money
				braquageencours = 0;
				format(string, sizeof(string), "** Félicitation ! Vous avez réussi le braquage. Vous reçevez l'argent : %d$ !!!",robmoney);
				SendClientMessage(i,COLOR_YELLOW,string);
				ilbraque[i] = 0;
			    format(string, sizeof(string), "** Les braqueurs ont blanchis l'argent ! C' est trop tard ! **");
	        	SendRadioMessage(1, TEAM_RADIO_COLOR, string);
	        	SendRadioMessage(2, TEAM_RADIO_COLOR, string);
	         	SendRadioMessage(3, TEAM_RADIO_COLOR, string);
	         	SendRadioMessage(18, TEAM_RADIO_COLOR, string);
	         	NombreBraqueur = 0;
			}
            else if (GetPlayerState(i) == 1 && PlayerToPoint(1.5, i, 2408.5229,1837.7008,6.0156))
			{
			    if(PlayerInfo[i][pJob] == 22)
			    {
			        GameTextForPlayer(i, "~w~Usine d'Arme~n~Vous pouvez ~r~/contrebandematos ou /cm ~w~ici", 5000, 3);
			    }
			    else
			    {
			        GameTextForPlayer(i, "~r~Personnel seulement!", 5000, 3);
			    }
			}
			else if (PlayerToPoint(3.0, i,2798.5601,-2416.6804,13.6310))
			{
			    if(PlayerInfo[i][pJob] == 19)
			    {
			    	format(string, sizeof(string), "~r~Drogues dans la Grange: %d", drugsys[DrugAmmount]);
					GameTextForPlayer(i, string, 5000, 3);
				}
				else if(PlayerInfo[i][pJob] == 20)
				{
					format(string, sizeof(string), "~w~Ferme de Drogues~n~Proprietaire: La Famille MS 13 ~n~Drogues Disponible:~r~ %d~n~~w~Vous pouvez /contrebandedrogue ici", drugsys[DrugAmmount]);
					GameTextForPlayer(i, string, 5000, 3);
				}
				else
				{
				    GameTextForPlayer(i, "~r~Personnel seulement!", 5000, 3);
				}
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(1.0, i, 930.4985,2150.1475,10.8203))
			{
			    if(PlayerInfo[i][pJob] == 22)
			    {
			        format(string, sizeof(string), "~w~Banque de Matos~n~Materiels Disponible: ~r~%d", matssys[MatsAmmount]);
			        GameTextForPlayer(i, string, 5000, 3);
			    }
			    else if(PlayerInfo[i][pJob] == 23)
			    {
			        format(string, sizeof(string), "~w~Banque de Matos~n~Materiels Disponible: ~r~%d ~n~~w~Vous pouvez ~g~/achetermatos ~w~ici", matssys[MatsAmmount]);
			        GameTextForPlayer(i, string, 5000, 3);
			    }
			    else
			    {
			        GameTextForPlayer(i, "~r~Personnel seulement !", 5000, 3);
			    }
                }//custompickups end
			if (PlayerToPoint(3.0, i, 2847.4922,-2504.8691,14.6081))
			{// Hospital near speedway
				GameTextForPlayer(i, "~w~Tapez /materials deliver pour deposer vos cargaison(s).", 5000, 5);
         	}
			/*else if (PlayerToPoint(3.0, i,-38.8664,56.3031,3.1172))
			{
			    if(PlayerInfo[i][pMember] == 6 || PlayerInfo[i][pLeader] == 6  || PlayerInfo[i][pMember] == 12 || PlayerInfo[i][pLeader] == 12 || PlayerInfo[i][pJob] == 19)
			    {
			    	format(string, sizeof(string), "~r~Drugs ammount: %d", drugsys[DrugAmmount]);
					GameTextForPlayer(i, string, 5000, 3);
				}
				else if(PlayerInfo[i][pMember] == 16 || PlayerInfo[i][pLeader] == 16 || PlayerInfo[i][pJob] == 20)
				{
					format(string, sizeof(string), "~w~Drugs Farm~n~Farm Owner: La Famiglia Italia~n~Drugs ammount:~r~ %d~n~~w~You can /smuggledrugs here", drugsys[DrugAmmount]);
					GameTextForPlayer(i, string, 5000, 3);
				}
				else
				{
				    GameTextForPlayer(i, "~r~Staff only!", 5000, 3);
				}
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,2022.1492,-1108.7837,26.2031))
			{
				if(PlayerInfo[i][pMember] == 16 || PlayerInfo[i][pLeader] == 16)
				{
					GameTextForPlayer(i, "~g~Bievenue,~n~~y~vous pouvez devenir ~r~Contrebandier de drogues~n~~w~Type /prendrejob si vous souhaitez en devenir un", 5000, 3);
				}
				else
				{
				    GameTextForPlayer(i, "~r~Staff only", 5000, 3);
				}
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(1.0, i,246.8096,126.7141,1003.2188))
			{
			    if(PlayerInfo[i][pMember] == 1 || PlayerInfo[i][pLeader] == 1 || PlayerInfo[i][pMember] == 2 || PlayerInfo[i][pLeader] == 2 || PlayerInfo[i][pMember] == 3 || PlayerInfo[i][pLeader] == 3 || PlayerInfo[i][pLeader] == 7)
			    {
			        GameTextForPlayer(i, "~g~Ascenseur de la LSPD ~n~~w~Tape ~r~/toit ~w~pour monter~n~Tape ~r~/garage ~w~pour descendre", 5000, 3);
			    }
			    else
			    {
			        GameTextForPlayer(i, "~r~Acces reserves a la LSPD!", 5000, 3);
			    }
			}
			else if (GetPlayerState(i) == 2 && PlayerToPoint(3, i,2073.2979,-1831.1228,13.5469) || GetPlayerState(i) == 2 && PlayerToPoint(3, i,1024.9756,-1030.7930,32.0257) || GetPlayerState(i) == 2 && PlayerToPoint(3, i,488.3819,-1733.0563,11.1752) || GetPlayerState(i) == 2 && PlayerToPoint(3, i,719.8940,-464.8272,16.3359))
			{
			    format(string, sizeof(string), "~y~Pay ~r~& ~g~Spray~w~~n~Owner : %s~n~Entrance Fee : ~g~$%d ~w~~n~to enter type /entrer",SBizzInfo[5][sbOwner],SBizzInfo[5][sbEntranceCost]);
				GameTextForPlayer(i, string, 5000, 3);
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(1.5, i, 248.4994,-33.1366,1.5781))
			{
			    if(PlayerInfo[i][pJob] == 20)
			    {
			        GameTextForPlayer(i, "~w~Materials factory~n~You can ~r~/smugglemats ~w~here", 5000, 3);
			    }
			    else
			    {
			        GameTextForPlayer(i, "~r~Staff seulement !", 5000, 3);
			    }
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(1.0, i, 2230.3579,-2286.2107,14.3751))
			{
			    if(PlayerInfo[i][pJob] == 22)
			    {
			        format(string, sizeof(string), "~w~Materials Bank~n~Materials ammount: ~r~%d", matssys[MatsAmmount]);
			        GameTextForPlayer(i, string, 5000, 3);
			    }
			    else if(PlayerInfo[i][pJob] == 20)
			    {
			        format(string, sizeof(string), "~w~Materials Bank~n~Materials ammount: ~r~%d ~n~~w~You can ~g~/achetermateriaux ~w~here", matssys[MatsAmmount]);
			        GameTextForPlayer(i, string, 5000, 3);
			    }
			    else
			    {
			        GameTextForPlayer(i, "~r~Staff seulement !", 5000, 3);
			    }
			}*/
			else if(PlayerToPoint(20, i,2778.0432,-1618.5311,10.9219) || PlayerToPoint(50, i,948.5014,2103.9685,1011.0234))
			{
			    if(OrderReady[i] > 0)
			    {
			        switch (OrderReady[i])
			        {
			            case 1:
			            {
			                SafeGivePlayerWeapon(i, 24, 50); SafeGivePlayerWeapon(i, 29, 500); SafeGivePlayerWeapon(i, 25, 50); SafeGivePlayerWeapon(i, 4, 1);
			                SafeGivePlayerMoney(i, - 5000);
			                SendClientMessage(i, COLOR_WHITE, "* Vous avez pris votre paquet commandé.");
			            }
			            case 2:
			            {
			                SafeGivePlayerWeapon(i, 24, 50); SafeGivePlayerWeapon(i, 29, 500); SafeGivePlayerWeapon(i, 25, 50); SafeGivePlayerWeapon(i, 31, 500); SafeGivePlayerWeapon(i, 4, 1);
			                SafeGivePlayerMoney(i, - 6000);
			                SendClientMessage(i, COLOR_WHITE, "* Vous avez pris votre paquet commandé.");
			            }
			            case 3:
			            {
			                SafeGivePlayerWeapon(i, 24, 50); SafeGivePlayerWeapon(i, 29, 500); SafeGivePlayerWeapon(i, 25, 50); SafeGivePlayerWeapon(i, 30, 500); SafeGivePlayerWeapon(i, 4, 1);
			                SafeGivePlayerMoney(i, - 6000);
			                SendClientMessage(i, COLOR_WHITE, "* Vous avez pris votre paquet commandé.");
			            }
			            case 4:
			            {
			                SafeGivePlayerWeapon(i, 24, 50); SafeGivePlayerWeapon(i, 29, 500); SafeGivePlayerWeapon(i, 25, 50); SafeGivePlayerWeapon(i, 31, 500); SafeGivePlayerWeapon(i, 4, 1); SafeGivePlayerWeapon(i, 34, 20);
			                SafeGivePlayerMoney(i, - 8000);
			                SendClientMessage(i, COLOR_WHITE, "* Vous avez pris votre paquet commandé.");
			            }
			            case 5:
			            {
			                SafeGivePlayerWeapon(i, 24, 50); SafeGivePlayerWeapon(i, 29, 500); SafeGivePlayerWeapon(i, 25, 50); SafeGivePlayerWeapon(i, 30, 500); SafeGivePlayerWeapon(i, 4, 1); SafeGivePlayerWeapon(i, 34, 20);
			                SafeGivePlayerMoney(i, - 8000);
			                SendClientMessage(i, COLOR_WHITE, "* Vous avez pris votre paquet commandé.");
			            }
			            case 6:
			            {
			                SafeGivePlayerWeapon(i, 24, 50); SafeGivePlayerWeapon(i, 29, 500); SafeGivePlayerWeapon(i, 25, 50); SafeGivePlayerWeapon(i, 31, 500); SafeGivePlayerWeapon(i, 4, 1); SafeGivePlayerWeapon(i, 34, 20);
							SafeGivePlayerMoney(i, - 8500);
							SendClientMessage(i, COLOR_WHITE, "* Vous avez pris votre paquet commandé.");
			            }
			            case 7:
			            {
			                SafeGivePlayerWeapon(i, 24, 50); SafeGivePlayerWeapon(i, 29, 500); SafeGivePlayerWeapon(i, 25, 50); SafeGivePlayerWeapon(i, 30, 500); SafeGivePlayerWeapon(i, 4, 1); SafeGivePlayerWeapon(i, 34, 20);
			                SafeGivePlayerMoney(i, - 8500);
			                SendClientMessage(i, COLOR_WHITE, "* You picked up your Ordered Package.");
			            }
			        }
			        OrderReady[i] = 0;
			    }
			}//Hitman delivery stuff
			else if(PlayerOnMission[i] > 0 && PlayMission[kToggle] == 0)
			{
			    if(MissionCheckpoint[i] == 1 && PlayerToPoint(10.0, i,PlayMission[kCP1][0],PlayMission[kCP1][1],PlayMission[kCP1][2]))
				{
				    RingTone[i] = 20;
				    format(string, sizeof(string), "%s", PlayMission[kGText1]);
					GameTextForPlayer(i, string, 8000, 3);
					format(string, sizeof(string), "%s", PlayMission[kText4]);
					SendClientMessage(i, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText5]);
					SendClientMessage(i, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText6]);
					SendClientMessage(i, COLOR_YELLOW2, string);
					MissionCheckpoint[i] = 2;
				}
				else if(MissionCheckpoint[i] == 2 && PlayerToPoint(10.0, i,PlayMission[kCP2][0],PlayMission[kCP2][1],PlayMission[kCP2][2]))
				{
				    RingTone[i] = 20;
				    format(string, sizeof(string), "%s", PlayMission[kGText2]);
					GameTextForPlayer(i, string, 8000, 3);
					format(string, sizeof(string), "%s", PlayMission[kText7]);
					SendClientMessage(i, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText8]);
					SendClientMessage(i, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText9]);
					SendClientMessage(i, COLOR_YELLOW2, string);
					MissionCheckpoint[i] = 3;
				}
				else if(MissionCheckpoint[i] == 3 && PlayerToPoint(10.0, i,PlayMission[kCP3][0],PlayMission[kCP3][1],PlayMission[kCP3][2]))
				{
				    RingTone[i] = 20;
				    format(string, sizeof(string), "%s", PlayMission[kGText3]);
					GameTextForPlayer(i, string, 8000, 3);
					format(string, sizeof(string), "%s", PlayMission[kText10]);
					SendClientMessage(i, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText11]);
					SendClientMessage(i, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText12]);
					SendClientMessage(i, COLOR_YELLOW2, string);
					MissionCheckpoint[i] = 4;
				}
				else if(MissionCheckpoint[i] == 4 && PlayerToPoint(10.0, i,PlayMission[kCP4][0],PlayMission[kCP4][1],PlayMission[kCP4][2]))
				{
				    RingTone[i] = 20;
				    format(string, sizeof(string), "%s", PlayMission[kGText4]);
					GameTextForPlayer(i, string, 8000, 3);
					format(string, sizeof(string), "%s", PlayMission[kText13]);
					SendClientMessage(i, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText14]);
					SendClientMessage(i, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText15]);
					SendClientMessage(i, COLOR_YELLOW2, string);
					MissionCheckpoint[i] = 5;
				}
				else if(MissionCheckpoint[i] == 5 && PlayerToPoint(10.0, i,PlayMission[kCP5][0],PlayMission[kCP5][1],PlayMission[kCP5][2]))
				{
				    RingTone[i] = 20;
				    format(string, sizeof(string), "%s", PlayMission[kGText5]);
					GameTextForPlayer(i, string, 8000, 3);
					format(string, sizeof(string), "%s", PlayMission[kText16]);
					SendClientMessage(i, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText17]);
					SendClientMessage(i, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText18]);
					SendClientMessage(i, COLOR_YELLOW2, string);
					MissionCheckpoint[i] = 6;
				}
				else if(MissionCheckpoint[i] == 6 && PlayerToPoint(10.0, i,PlayMission[kCP6][0],PlayMission[kCP6][1],PlayMission[kCP6][2]))
				{
				    RingTone[i] = 20;
				    format(string, sizeof(string), "%s", PlayMission[kGText6]);
					GameTextForPlayer(i, string, 8000, 3);
					format(string, sizeof(string), "..:: Mission Passed : %s | Reward received: $%d ::..", PlayMission[kTitle], PlayMission[kReward]);
					SendClientMessage(i, COLOR_GREEN, string);
					SafeGivePlayerMoney(i, PlayMission[kReward]);
					PlayerInfo[i][pMissionNr] = PlayerOnMission[i];
					MissionCheckpoint[i] = 0;
					PlayerOnMission[i] = 0;
				}
			}
		}
	}
	return 1;
}
/*public IsPlayerAdminCall(playerid)
{
	if(PlayerInfo[playerid][pAdmin] >= 1)
		return 1;
	else
		return 0;

}*/
public OnPlayerText(playerid, text[])
{
    CheckTextForBadWords(playerid, text);
	new giver[MAX_PLAYER_NAME];
	new sendername[MAX_PLAYER_NAME];
	new giveplayer[MAX_PLAYER_NAME];
	new tmp[256];
	new string[256];
	new giveplayerid;
	assert( AntiFlood_Check( playerid ) );
	//AFKMin[playerid] = 0;
	if(FindIP(text)) /// Anti-Reclama
    {
        SendClientMessage(playerid, COLOR_RED, "[Anti-PUB] Vous avez été kick pour avoir fait une pub ");
        new advertiser[MAX_PLAYER_NAME];
		GetPlayerName(playerid, advertiser, sizeof(advertiser));
		format(string, sizeof(string), "[Anti-PUB] %s a été kické. Raison: Pub",advertiser);
		SendClientMessageToAll(COLOR_LIGHTRED,string);
		KickLog(string);
        Kick(playerid);
        return 1;
    }
    #if defined USE_MENU
//	    new tmp[128];
//        new string[128],idx;
       	new idx;
		if(DefinirPrix[playerid] == 1)
		{
		    tmp = strtok2(text, idx);
		    if(!strlen(tmp))
		    {
		        SendClientMessage(playerid,COL_LIGHTRED,"Veuillez entrer un prix pour ce vehicule!");
		        return 1;
			}
			if(!IsNumeric2(tmp))
			{
			    SendClientMessage(playerid,COL_LIGHTRED,"Veuillez entrer un nombre correct!");
			    return 1;
			}
			new vehicleid = GetPlayerVehicleID(playerid);
		    VehiculeInfo[vehicleid][Prix] = strval(tmp);
		    format(string,sizeof(string),"Vous avez changer le prix de ce vehicule (%s). Nouveau prix: %d$",VehiculeInfo[vehicleid][Nom],VehiculeInfo[vehicleid][Prix]);
		    SendClientMessage(playerid,COL_GREEN,string);
		    TogglePlayerControllable(playerid,1);
		    DefinirPrix[playerid] = 0;
		    return 1;
		}
		if(DefinirEssence[playerid] == 1)
		{
		    tmp = strtok2(text, idx);
		    if(!strlen(tmp))
		    {
		        SendClientMessage(playerid,COL_LIGHTRED,"Veuillez entrer un valeur maxium d'essence pour ce vehicule!");
		        return 1;
			}
			if(!IsNumeric2(tmp))
			{
			    SendClientMessage(playerid,COL_LIGHTRED,"Veuillez entrer un nombre correct!");
			    return 1;
			}
			new vehicleid = GetPlayerVehicleID(playerid);
		    VehiculeInfo[vehicleid][MaxEssence] = strval(tmp);
		    format(string,sizeof(string),"Vous avez changer le reservoir de ce vehicule (%s). Nouvelle quantiter maxiumum d'essence: %d$",VehiculeInfo[vehicleid][Nom],VehiculeInfo[vehicleid][MaxEssence]);
		    SendClientMessage(playerid,COL_GREEN,string);
		    TogglePlayerControllable(playerid,1);
		    DefinirEssence[playerid] = 0;
		    return 1;
		}
		#if defined USE_CALLCAR
			if(MyVehicleID[playerid][0] != 0)
			{
				tmp = strtok2(text, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid,COL_WHITE,"Veuillez entrer un numero de vehicule!");
				    return 1;
	       		}
				new veh = strval(tmp);
				if(veh < 1 || veh > MAX_PLAYER_VEHICLES)
				{
	   				format(string,sizeof(string),"Le numero du vehicule ne peux être inferieur a 1 ou superieur a %d",MAX_PLAYER_VEHICLES);
			    	SendClientMessage(playerid,COL_LIGHTRED,string);
				    return 1;
				}
				new vehicleid = MyVehicleID[playerid][veh-1];
				if(vehicleid == 0)
				{
	   				SendClientMessage(playerid,COL_LIGHTRED,"Vous n'avez pas de vehicule a se numéro");
				    return 1;
				}
			    format(string,sizeof(string),"Ce vehicule (%s) a été appeler par sont proprietaire (%s)!",VehiculeInfo[vehicleid][Nom],VehiculeInfo[vehicleid][Proprio]);
				for(new i=0;i<MAX_PLAYERS;i++)
				{
				    if(IsPlayerConnected(i))
				    {
				        if(IsPlayerInAnyVehicle(i) && GetPlayerVehicleID(i) == vehicleid)
				        {
				            SendClientMessage(i,COL_LIGHTRED,string);
				            RemovePlayerFromVehicle(i);
						}
					}
				}
				for(new m=0;m<MAX_PLAYER_VEHICLES;m++)
				{
				    MyVehicleID[playerid][m] = 0;
				}
				SetTimerEx("DestroyVeh",2500,0,"i",vehicleid);
				SetTimerEx("CallCar",3000,0,"ii",playerid,vehicleid);
				format(string,sizeof(string),"Votre vehicule (%s) arrivera dans quelque seconde veuillez patienter!",VehiculeInfo[vehicleid][Nom]);
				SendClientMessage(playerid,COL_LIGHTRED,string);
			    TogglePlayerControllable(playerid,1);
			    return 1;
			}
		#endif
	#else
		#pragma unused playerid
		#pragma unused text
	#endif
	if(PlayerInfo[playerid][pMuted] == 1)
	{
		SendClientMessage(playerid, TEAM_CYAN_COLOR, "Vous ne pouvez pas parler, vous avez été muté.");
		return 0;
	}
	if(SelectChar[playerid] == 255)
	{
	    new idx;
	    tmp = strtok(text, idx);
	    if ((strcmp("suivant", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("suivant")))
		{
		    switch (SelectCharID[playerid])
			{
				case 1: //Police Force
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 28); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 28; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 265); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = 265; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, JoinPed[2][0]); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = JoinPed[2][0]; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, JoinPed[3][0]); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = JoinPed[3][0]; }
				    else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, JoinPed[4][0]); SelectCharPlace[playerid] = 6; ChosenSkin[playerid] = JoinPed[4][0]; }
				    else if(SelectCharPlace[playerid] == 6) { SetPlayerSkin(playerid, JoinPed[5][0]); SelectCharPlace[playerid] = 7; ChosenSkin[playerid] = JoinPed[5][0]; }
				    else if(SelectCharPlace[playerid] == 7) { SetPlayerSkin(playerid, JoinPed[6][0]); SelectCharPlace[playerid] = 8; ChosenSkin[playerid] = JoinPed[6][0]; }
				    else if(SelectCharPlace[playerid] == 8) { SetPlayerSkin(playerid, JoinPed[7][0]); SelectCharPlace[playerid] = 9; ChosenSkin[playerid] = JoinPed[7][0]; }
				    else if(SelectCharPlace[playerid] == 9) { SetPlayerSkin(playerid, JoinPed[8][0]); SelectCharPlace[playerid] = 10; ChosenSkin[playerid] = JoinPed[8][0]; }
				    else if(SelectCharPlace[playerid] == 10) { SetPlayerSkin(playerid, JoinPed[9][0]); SelectCharPlace[playerid] = 11; ChosenSkin[playerid] = JoinPed[9][0]; }
				    else if(SelectCharPlace[playerid] == 11) { SetPlayerSkin(playerid, JoinPed[10][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = JoinPed[10][0]; }
				}
				case 2: //FBI/ATF
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 163); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 163; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 164); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = 164; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, 165); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = 165; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, 166); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = 166; }
				    else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, 166); SelectCharPlace[playerid] = 6; ChosenSkin[playerid] = 166; }
				    else if(SelectCharPlace[playerid] == 6) { SetPlayerSkin(playerid, 286); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 286; }
    			}
				case 3: //National Guard
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, JoinPed[14][0]); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = JoinPed[14][0]; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, JoinPed[15][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = JoinPed[15][0]; }
				}
				case 4: //Fire&Ambulance
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, JoinPed[16][0]); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = JoinPed[16][0]; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, JoinPed[17][0]); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = JoinPed[17][0]; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, JoinPed[18][0]); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = JoinPed[18][0]; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, JoinPed[19][0]); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = JoinPed[19][0]; }
				    else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, JoinPed[20][0]); SelectCharPlace[playerid] = 6; ChosenSkin[playerid] = JoinPed[20][0]; }
				    else if(SelectCharPlace[playerid] == 6) { SetPlayerSkin(playerid, JoinPed[21][0]); SelectCharPlace[playerid] = 7; ChosenSkin[playerid] = JoinPed[21][0]; }
				    else if(SelectCharPlace[playerid] == 7) { SetPlayerSkin(playerid, JoinPed[22][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = JoinPed[22][0]; }
				}
				case 5: //Vagos
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 114); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 114; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 114); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = 114; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, 116); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = 116; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, 116); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = 116; }
				    else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, 116); SelectCharPlace[playerid] = 6; ChosenSkin[playerid] = 116; }
				    else if(SelectCharPlace[playerid] == 6) { SetPlayerSkin(playerid, 115); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 115; }
				}
				case 6: //Corleonne
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 186); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 186; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 122); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = 122; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, 206); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = 206; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, 125); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = 125; }
                    else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, 127); SelectCharPlace[playerid] = 6; ChosenSkin[playerid] = 127; }
                    else if(SelectCharPlace[playerid] == 6) { SetPlayerSkin(playerid, 126); SelectCharPlace[playerid] = 7; ChosenSkin[playerid] = 126; }
                    else if(SelectCharPlace[playerid] == 7) { SetPlayerSkin(playerid, 124); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 124; }
				}
				case 8: //yakuza Agency
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, JoinPed[38][0]); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = JoinPed[38][0]; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, JoinPed[39][0]); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = JoinPed[39][0]; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, JoinPed[40][0]); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = JoinPed[40][0]; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, JoinPed[41][0]); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = JoinPed[41][0]; }
				    else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, JoinPed[42][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = JoinPed[42][0]; }
				}
				case 9: //Bloods
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 102); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 102; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 102); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = 102; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, 103); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = 103; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, 103); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = 103; }
				    else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, 104); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 104; }
				}
				/*case 10: //Taxi Cab Company
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, JoinPed[46][0]); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = JoinPed[46][0]; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, JoinPed[47][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = JoinPed[47][0]; }
				}*/
				case 11: //Driving/Flying School
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, JoinPed[48][0]); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = JoinPed[48][0]; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, JoinPed[49][0]); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = JoinPed[49][0]; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, JoinPed[50][0]); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = JoinPed[50][0]; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, JoinPed[51][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = JoinPed[51][0]; }
				}
				case 13: //Cripz
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 114); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 114; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 116); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = 116; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, 174); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = 174; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, 175); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = 175; }
				    else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, 173); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 173; }
				}
				case 14: //Yamaguchi
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 110); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 110; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 110); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = 110; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, 109); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = 109; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, 109); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = 109; }
				    else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, 108); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 108; }
				}
				case 15: //Chornaya Bratva
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 223); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 223; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 46); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = 46; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, 186); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = 186; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, 120); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = 120; }
				    else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, 147); SelectCharPlace[playerid] = 6; ChosenSkin[playerid] = 147; }
				    else if(SelectCharPlace[playerid] == 6) { SetPlayerSkin(playerid, 113); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 113; }
				}
				case 16: //Top Shottas
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 212); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 212; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 212); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = 212; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, 230); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = 230; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, 230); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = 230; }
				    else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, 137); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 137; }
				}
				case 17: //Corleone
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 212); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 212; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 212); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = 212; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, 230); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = 230; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, 230); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = 230; }
				    else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, 137); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 137; }
				    else if(SelectCharPlace[playerid] == 6) { SetPlayerSkin(playerid, 113); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 113; }
				}
				case 18: //CIA
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 163); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 163; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 164); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = 164; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, 165); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = 165; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, 165); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = 165; }
				    else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, 165); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 165; }
				    else if(SelectCharPlace[playerid] == 6) { SetPlayerSkin(playerid, 166); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 166; }
				}
				case 20: //Male civilian (by LordMan)
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, CivMalePeds[1][0]); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = CivMalePeds[1][0]; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, CivMalePeds[2][0]); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = CivMalePeds[2][0]; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, CivMalePeds[3][0]); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = CivMalePeds[3][0]; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, CivMalePeds[4][0]); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = CivMalePeds[4][0]; }
				    else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, CivMalePeds[5][0]); SelectCharPlace[playerid] = 6; ChosenSkin[playerid] = CivMalePeds[5][0]; }
				    else if(SelectCharPlace[playerid] == 6) { SetPlayerSkin(playerid, CivMalePeds[6][0]); SelectCharPlace[playerid] = 7; ChosenSkin[playerid] = CivMalePeds[6][0]; }
				    else if(SelectCharPlace[playerid] == 7) { SetPlayerSkin(playerid, CivMalePeds[7][0]); SelectCharPlace[playerid] = 8; ChosenSkin[playerid] = CivMalePeds[7][0]; }
				    else if(SelectCharPlace[playerid] == 8) { SetPlayerSkin(playerid, CivMalePeds[8][0]); SelectCharPlace[playerid] = 9; ChosenSkin[playerid] = CivMalePeds[8][0]; }
				    else if(SelectCharPlace[playerid] == 9) { SetPlayerSkin(playerid, CivMalePeds[9][0]); SelectCharPlace[playerid] = 10; ChosenSkin[playerid] = CivMalePeds[9][0]; }
				    else if(SelectCharPlace[playerid] == 10) { SetPlayerSkin(playerid, CivMalePeds[10][0]); SelectCharPlace[playerid] = 11; ChosenSkin[playerid] = CivMalePeds[10][0]; }
				    else if(SelectCharPlace[playerid] == 11) { SetPlayerSkin(playerid, CivMalePeds[11][0]); SelectCharPlace[playerid] = 12; ChosenSkin[playerid] = CivMalePeds[11][0]; }
				    else if(SelectCharPlace[playerid] == 12) { SetPlayerSkin(playerid, CivMalePeds[12][0]); SelectCharPlace[playerid] = 13; ChosenSkin[playerid] = CivMalePeds[12][0]; }
				    else if(SelectCharPlace[playerid] == 13) { SetPlayerSkin(playerid, CivMalePeds[13][0]); SelectCharPlace[playerid] = 14; ChosenSkin[playerid] = CivMalePeds[13][0]; }
				    else if(SelectCharPlace[playerid] == 14) { SetPlayerSkin(playerid, CivMalePeds[14][0]); SelectCharPlace[playerid] = 15; ChosenSkin[playerid] = CivMalePeds[14][0]; }
				    else if(SelectCharPlace[playerid] == 15) { SetPlayerSkin(playerid, CivMalePeds[15][0]); SelectCharPlace[playerid] = 16; ChosenSkin[playerid] = CivMalePeds[15][0]; }
				    else if(SelectCharPlace[playerid] == 16) { SetPlayerSkin(playerid, CivMalePeds[16][0]); SelectCharPlace[playerid] = 17; ChosenSkin[playerid] = CivMalePeds[16][0]; }
				    else if(SelectCharPlace[playerid] == 17) { SetPlayerSkin(playerid, CivMalePeds[17][0]); SelectCharPlace[playerid] = 18; ChosenSkin[playerid] = CivMalePeds[17][0]; }
				    else if(SelectCharPlace[playerid] == 18) { SetPlayerSkin(playerid, CivMalePeds[18][0]); SelectCharPlace[playerid] = 19; ChosenSkin[playerid] = CivMalePeds[18][0]; }
				    else if(SelectCharPlace[playerid] == 19) { SetPlayerSkin(playerid, CivMalePeds[19][0]); SelectCharPlace[playerid] = 20; ChosenSkin[playerid] = CivMalePeds[19][0]; }
				    else if(SelectCharPlace[playerid] == 20) { SetPlayerSkin(playerid, CivMalePeds[20][0]); SelectCharPlace[playerid] = 21; ChosenSkin[playerid] = CivMalePeds[20][0]; }
				    else if(SelectCharPlace[playerid] == 21) { SetPlayerSkin(playerid, CivMalePeds[21][0]); SelectCharPlace[playerid] = 22; ChosenSkin[playerid] = CivMalePeds[21][0]; }
				    else if(SelectCharPlace[playerid] == 22) { SetPlayerSkin(playerid, CivMalePeds[22][0]); SelectCharPlace[playerid] = 23; ChosenSkin[playerid] = CivMalePeds[22][0]; }
				    else if(SelectCharPlace[playerid] == 23) { SetPlayerSkin(playerid, CivMalePeds[23][0]); SelectCharPlace[playerid] = 24; ChosenSkin[playerid] = CivMalePeds[23][0]; }
				    else if(SelectCharPlace[playerid] == 24) { SetPlayerSkin(playerid, CivMalePeds[24][0]); SelectCharPlace[playerid] = 25; ChosenSkin[playerid] = CivMalePeds[24][0]; }
				    else if(SelectCharPlace[playerid] == 25) { SetPlayerSkin(playerid, CivMalePeds[25][0]); SelectCharPlace[playerid] = 26; ChosenSkin[playerid] = CivMalePeds[25][0]; }
				    else if(SelectCharPlace[playerid] == 26) { SetPlayerSkin(playerid, CivMalePeds[26][0]); SelectCharPlace[playerid] = 27; ChosenSkin[playerid] = CivMalePeds[26][0]; }
				    else if(SelectCharPlace[playerid] == 27) { SetPlayerSkin(playerid, CivMalePeds[27][0]); SelectCharPlace[playerid] = 28; ChosenSkin[playerid] = CivMalePeds[27][0]; }
				    else if(SelectCharPlace[playerid] == 28) { SetPlayerSkin(playerid, CivMalePeds[28][0]); SelectCharPlace[playerid] = 29; ChosenSkin[playerid] = CivMalePeds[28][0]; }
				    else if(SelectCharPlace[playerid] == 29) { SetPlayerSkin(playerid, CivMalePeds[29][0]); SelectCharPlace[playerid] = 30; ChosenSkin[playerid] = CivMalePeds[29][0]; }
				    else if(SelectCharPlace[playerid] == 30) { SetPlayerSkin(playerid, CivMalePeds[30][0]); SelectCharPlace[playerid] = 31; ChosenSkin[playerid] = CivMalePeds[30][0]; }
				    else if(SelectCharPlace[playerid] == 31) { SetPlayerSkin(playerid, CivMalePeds[31][0]); SelectCharPlace[playerid] = 32; ChosenSkin[playerid] = CivMalePeds[31][0]; }
				    else if(SelectCharPlace[playerid] == 32) { SetPlayerSkin(playerid, CivMalePeds[32][0]); SelectCharPlace[playerid] = 33; ChosenSkin[playerid] = CivMalePeds[32][0]; }
				    else if(SelectCharPlace[playerid] == 33) { SetPlayerSkin(playerid, CivMalePeds[33][0]); SelectCharPlace[playerid] = 34; ChosenSkin[playerid] = CivMalePeds[33][0]; }
				    else if(SelectCharPlace[playerid] == 34) { SetPlayerSkin(playerid, CivMalePeds[34][0]); SelectCharPlace[playerid] = 35; ChosenSkin[playerid] = CivMalePeds[34][0]; }
				    else if(SelectCharPlace[playerid] == 35) { SetPlayerSkin(playerid, CivMalePeds[35][0]); SelectCharPlace[playerid] = 36; ChosenSkin[playerid] = CivMalePeds[35][0]; }
				    else if(SelectCharPlace[playerid] == 36) { SetPlayerSkin(playerid, CivMalePeds[36][0]); SelectCharPlace[playerid] = 37; ChosenSkin[playerid] = CivMalePeds[36][0]; }
				    else if(SelectCharPlace[playerid] == 37) { SetPlayerSkin(playerid, CivMalePeds[37][0]); SelectCharPlace[playerid] = 38; ChosenSkin[playerid] = CivMalePeds[37][0]; }
				    else if(SelectCharPlace[playerid] == 38) { SetPlayerSkin(playerid, CivMalePeds[38][0]); SelectCharPlace[playerid] = 39; ChosenSkin[playerid] = CivMalePeds[38][0]; }
				    else if(SelectCharPlace[playerid] == 39) { SetPlayerSkin(playerid, CivMalePeds[39][0]); SelectCharPlace[playerid] = 40; ChosenSkin[playerid] = CivMalePeds[39][0]; }
				    else if(SelectCharPlace[playerid] == 40) { SetPlayerSkin(playerid, CivMalePeds[40][0]); SelectCharPlace[playerid] = 41; ChosenSkin[playerid] = CivMalePeds[40][0]; }
				    else if(SelectCharPlace[playerid] == 41) { SetPlayerSkin(playerid, CivMalePeds[41][0]); SelectCharPlace[playerid] = 42; ChosenSkin[playerid] = CivMalePeds[41][0]; }
				    else if(SelectCharPlace[playerid] == 42) { SetPlayerSkin(playerid, CivMalePeds[42][0]); SelectCharPlace[playerid] = 43; ChosenSkin[playerid] = CivMalePeds[42][0]; }
				    else if(SelectCharPlace[playerid] == 43) { SetPlayerSkin(playerid, CivMalePeds[43][0]); SelectCharPlace[playerid] = 44; ChosenSkin[playerid] = CivMalePeds[43][0]; }
				    else if(SelectCharPlace[playerid] == 44) { SetPlayerSkin(playerid, CivMalePeds[44][0]); SelectCharPlace[playerid] = 45; ChosenSkin[playerid] = CivMalePeds[44][0]; }
				    else if(SelectCharPlace[playerid] == 45) { SetPlayerSkin(playerid, CivMalePeds[45][0]); SelectCharPlace[playerid] = 46; ChosenSkin[playerid] = CivMalePeds[45][0]; }
				    else if(SelectCharPlace[playerid] == 46) { SetPlayerSkin(playerid, CivMalePeds[46][0]); SelectCharPlace[playerid] = 47; ChosenSkin[playerid] = CivMalePeds[46][0]; }
				    else if(SelectCharPlace[playerid] == 47) { SetPlayerSkin(playerid, CivMalePeds[47][0]); SelectCharPlace[playerid] = 48; ChosenSkin[playerid] = CivMalePeds[47][0]; }
				    else if(SelectCharPlace[playerid] == 48) { SetPlayerSkin(playerid, CivMalePeds[48][0]); SelectCharPlace[playerid] = 49; ChosenSkin[playerid] = CivMalePeds[48][0]; }
				    else if(SelectCharPlace[playerid] == 49) { SetPlayerSkin(playerid, CivMalePeds[49][0]); SelectCharPlace[playerid] = 50; ChosenSkin[playerid] = CivMalePeds[49][0]; }
				    else if(SelectCharPlace[playerid] == 50) { SetPlayerSkin(playerid, CivMalePeds[50][0]); SelectCharPlace[playerid] = 51; ChosenSkin[playerid] = CivMalePeds[50][0]; }
				    else if(SelectCharPlace[playerid] == 51) { SetPlayerSkin(playerid, CivMalePeds[51][0]); SelectCharPlace[playerid] = 52; ChosenSkin[playerid] = CivMalePeds[51][0]; }
				    else if(SelectCharPlace[playerid] == 52) { SetPlayerSkin(playerid, CivMalePeds[52][0]); SelectCharPlace[playerid] = 53; ChosenSkin[playerid] = CivMalePeds[52][0]; }
				    else if(SelectCharPlace[playerid] == 53) { SetPlayerSkin(playerid, CivMalePeds[53][0]); SelectCharPlace[playerid] = 54; ChosenSkin[playerid] = CivMalePeds[53][0]; }
				    else if(SelectCharPlace[playerid] == 54) { SetPlayerSkin(playerid, CivMalePeds[54][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = CivMalePeds[54][0]; }
				}
				case 30: //Female civilian (by LordMan)
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, CivFemalePeds[1][0]); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = CivFemalePeds[1][0]; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, CivFemalePeds[2][0]); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = CivFemalePeds[2][0]; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, CivFemalePeds[3][0]); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = CivFemalePeds[3][0]; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, CivFemalePeds[4][0]); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = CivFemalePeds[4][0]; }
				    else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, CivFemalePeds[5][0]); SelectCharPlace[playerid] = 6; ChosenSkin[playerid] = CivFemalePeds[5][0]; }
				    else if(SelectCharPlace[playerid] == 6) { SetPlayerSkin(playerid, CivFemalePeds[6][0]); SelectCharPlace[playerid] = 7; ChosenSkin[playerid] = CivFemalePeds[6][0]; }
				    else if(SelectCharPlace[playerid] == 7) { SetPlayerSkin(playerid, CivFemalePeds[7][0]); SelectCharPlace[playerid] = 8; ChosenSkin[playerid] = CivFemalePeds[7][0]; }
				    else if(SelectCharPlace[playerid] == 8) { SetPlayerSkin(playerid, CivFemalePeds[8][0]); SelectCharPlace[playerid] = 9; ChosenSkin[playerid] = CivFemalePeds[8][0]; }
				    else if(SelectCharPlace[playerid] == 9) { SetPlayerSkin(playerid, CivFemalePeds[9][0]); SelectCharPlace[playerid] = 10; ChosenSkin[playerid] = CivFemalePeds[9][0]; }
				    else if(SelectCharPlace[playerid] == 10) { SetPlayerSkin(playerid, CivFemalePeds[10][0]); SelectCharPlace[playerid] = 11; ChosenSkin[playerid] = CivFemalePeds[10][0]; }
				    else if(SelectCharPlace[playerid] == 11) { SetPlayerSkin(playerid, CivFemalePeds[11][0]); SelectCharPlace[playerid] = 12; ChosenSkin[playerid] = CivFemalePeds[11][0]; }
				    else if(SelectCharPlace[playerid] == 12) { SetPlayerSkin(playerid, CivFemalePeds[12][0]); SelectCharPlace[playerid] = 13; ChosenSkin[playerid] = CivFemalePeds[12][0]; }
				    else if(SelectCharPlace[playerid] == 13) { SetPlayerSkin(playerid, CivFemalePeds[13][0]); SelectCharPlace[playerid] = 14; ChosenSkin[playerid] = CivFemalePeds[13][0]; }
				    else if(SelectCharPlace[playerid] == 14) { SetPlayerSkin(playerid, CivFemalePeds[14][0]); SelectCharPlace[playerid] = 15; ChosenSkin[playerid] = CivFemalePeds[14][0]; }
				    else if(SelectCharPlace[playerid] == 15) { SetPlayerSkin(playerid, CivFemalePeds[15][0]); SelectCharPlace[playerid] = 16; ChosenSkin[playerid] = CivFemalePeds[15][0]; }
				    else if(SelectCharPlace[playerid] == 16) { SetPlayerSkin(playerid, CivFemalePeds[16][0]); SelectCharPlace[playerid] = 17; ChosenSkin[playerid] = CivFemalePeds[16][0]; }
				    else if(SelectCharPlace[playerid] == 17) { SetPlayerSkin(playerid, CivFemalePeds[17][0]); SelectCharPlace[playerid] = 18; ChosenSkin[playerid] = CivFemalePeds[17][0]; }
				    else if(SelectCharPlace[playerid] == 18) { SetPlayerSkin(playerid, CivFemalePeds[18][0]); SelectCharPlace[playerid] = 19; ChosenSkin[playerid] = CivFemalePeds[18][0]; }
				    else if(SelectCharPlace[playerid] == 19) { SetPlayerSkin(playerid, CivFemalePeds[19][0]); SelectCharPlace[playerid] = 20; ChosenSkin[playerid] = CivFemalePeds[19][0]; }
				    else if(SelectCharPlace[playerid] == 20) { SetPlayerSkin(playerid, CivFemalePeds[20][0]); SelectCharPlace[playerid] = 21; ChosenSkin[playerid] = CivFemalePeds[20][0]; }
				    else if(SelectCharPlace[playerid] == 21) { SetPlayerSkin(playerid, CivFemalePeds[21][0]); SelectCharPlace[playerid] = 22; ChosenSkin[playerid] = CivFemalePeds[21][0]; }
				    else if(SelectCharPlace[playerid] == 22) { SetPlayerSkin(playerid, CivFemalePeds[22][0]); SelectCharPlace[playerid] = 23; ChosenSkin[playerid] = CivFemalePeds[22][0]; }
				    else if(SelectCharPlace[playerid] == 23) { SetPlayerSkin(playerid, CivFemalePeds[23][0]); SelectCharPlace[playerid] = 24; ChosenSkin[playerid] = CivFemalePeds[23][0]; }
				    else if(SelectCharPlace[playerid] == 24) { SetPlayerSkin(playerid, CivFemalePeds[24][0]); SelectCharPlace[playerid] = 25; ChosenSkin[playerid] = CivFemalePeds[24][0]; }
				    else if(SelectCharPlace[playerid] == 25) { SetPlayerSkin(playerid, CivFemalePeds[25][0]); SelectCharPlace[playerid] = 26; ChosenSkin[playerid] = CivFemalePeds[25][0]; }
				    else if(SelectCharPlace[playerid] == 26) { SetPlayerSkin(playerid, CivFemalePeds[26][0]); SelectCharPlace[playerid] = 27; ChosenSkin[playerid] = CivFemalePeds[26][0]; }
				    else if(SelectCharPlace[playerid] == 27) { SetPlayerSkin(playerid, CivFemalePeds[27][0]); SelectCharPlace[playerid] = 28; ChosenSkin[playerid] = CivFemalePeds[27][0]; }
				    else if(SelectCharPlace[playerid] == 28) { SetPlayerSkin(playerid, CivFemalePeds[28][0]); SelectCharPlace[playerid] = 29; ChosenSkin[playerid] = CivFemalePeds[28][0]; }
				    else if(SelectCharPlace[playerid] == 29) { SetPlayerSkin(playerid, CivFemalePeds[29][0]); SelectCharPlace[playerid] = 30; ChosenSkin[playerid] = CivFemalePeds[29][0]; }
				    else if(SelectCharPlace[playerid] == 30) { SetPlayerSkin(playerid, CivFemalePeds[30][0]); SelectCharPlace[playerid] = 31; ChosenSkin[playerid] = CivFemalePeds[30][0]; }
				    else if(SelectCharPlace[playerid] == 31) { SetPlayerSkin(playerid, CivFemalePeds[31][0]); SelectCharPlace[playerid] = 32; ChosenSkin[playerid] = CivFemalePeds[31][0]; }
				    else if(SelectCharPlace[playerid] == 32) { SetPlayerSkin(playerid, CivFemalePeds[32][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = CivFemalePeds[32][0]; }
				}

			}
		    return 0;
		}
		else if ((strcmp("terminer", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("terminer")))
		{
		    if(ChangePos2[playerid][1] == 1)
		    {
		        SetPlayerInterior(playerid, ChangePos2[playerid][0]);
		        SetPlayerPos(playerid, ChangePos[playerid][0],ChangePos[playerid][1],ChangePos[playerid][2]);
		        ChangePos2[playerid][1] = 0;
		        //return 0;
		    }
		    PlayerInfo[playerid][pModel] = ChosenSkin[playerid];
		    PlayerInfo[playerid][pChar] = ChosenSkin[playerid];
		    SetSpawnInfo(playerid, PlayerInfo[playerid][pTeam], PlayerInfo[playerid][pModel],0.0,0.0,0.0,0,0,0,0,0,0,0);
		    gTeam[playerid] = PlayerInfo[playerid][pTeam];
			SetPlayerToTeamColor(playerid);
			MedicBill[playerid] = 0;
			//SetPlayerSpawn(playerid); je crois que cette fonction n'a rien a faire là.
			SetCameraBehindPlayer(playerid);
		    SelectCharPlace[playerid] = 0;
		    SelectCharID[playerid] = 0;
		    SelectChar[playerid] = 0;
		    TogglePlayerControllable(playerid, 1);
		    changementvetements[playerid] = 0;
		    SetTimerEx("backtoclothes", 500, false, "i", playerid);
		    return 0;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_WHITE, "Utilisez 'suivant' ou 'terminer'.");
		    return 0;
		}
	}
	if(RegistrationStep[playerid] > 0)
	{
	    if(RegistrationStep[playerid] == 1)
	    {
	        new idx;
	    	tmp = strtok(text, idx);
		    if((strcmp("homme", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("homme")))
			{
			    PlayerInfo[playerid][pSex] = 1;
			    SendClientMessage(playerid, 0x87C1D7F6, "~~~~~~~~~~~~~~~~Etape 2~~~~~~~~~~~~~~~~");
			    SendClientMessage(playerid, COLOR_YELLOW2, "D'accord, donc vous êtes un Homme.");
			    SendClientMessage(playerid, COLOR_WHITE, "Quelle est votre date de naissance? (Utilisez jj/mm/aaaa)");
			    SendClientMessage(playerid, 0x87C1D7F6, "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
			    new maleskin;
			    maleskin = random(sizeof(CivMalePeds));
			    SetPlayerSkin(playerid, maleskin);
			    PlayerInfo[playerid][pChar] = maleskin;
			    RegistrationStep[playerid] = 2;
			    return 0;
			}
			else if((strcmp("femme", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("femme")))
			{
			    PlayerInfo[playerid][pSex] = 2;
			    SendClientMessage(playerid, 0x87C1D7F6, "~~~~~~~~~~~~~~~~Etape 2~~~~~~~~~~~~~~~~");
			    SendClientMessage(playerid, COLOR_YELLOW2, "D'accord, donc vous êtes une Femme.");
			    SendClientMessage(playerid, COLOR_WHITE, "Quelle est votre date de naissance? (Utilisez jj/mm/aaaa)");
			    SendClientMessage(playerid, 0x87C1D7F6, "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
			    new femaleskin;
			    femaleskin = random(sizeof(CivFemalePeds));
			    SetPlayerSkin(playerid, femaleskin);
			    SetPlayerSkin(playerid, femaleskin);
			    PlayerInfo[playerid][pChar] = femaleskin;
			    RegistrationStep[playerid] = 2;
			    return 0;
			}
			else
			{
			    SendClientMessage(playerid, 0x87C1D7F6, "~~~~~~~~~~~~~~~~Etape 1~~~~~~~~~~~~~~~~");
			    SendClientMessage(playerid, COLOR_WHITE, "Êtes vous un Homme ou une Femme? (Tapez ce que vous êtes).");
			    SendClientMessage(playerid, 0x87C1D7F6, "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
			}
			return 0;
		}
		else if(RegistrationStep[playerid] == 2)
	    {
	        new year, month,day;
			getdate(year, month, day);
	        new DateInfo[3][20];
			split(text, DateInfo, '/');
			if(year - strvalEx(DateInfo[2]) > 100 || strvalEx(DateInfo[2]) < 1 || strvalEx(DateInfo[2]) >= year)
			{
			    SendClientMessage(playerid, 0x87C1D7F6, "~~~~~~~~~~~~~~~~Etape 3~~~~~~~~~~~~~~~~");
			    SendClientMessage(playerid, COLOR_WHITE, "Quelle est votre date de naissance? (Utilisez jj/mm/aaaa)");
			    SendClientMessage(playerid, 0x87C1D7F6, "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
			    return 0;
			}
			new check = year - strvalEx(DateInfo[2]);
			if(check == year)
			{
			    SendClientMessage(playerid, 0x87C1D7F6, "~~~~~~~~~~~~~~~~Etape 3~~~~~~~~~~~~~~~~");
			    SendClientMessage(playerid, COLOR_WHITE, "Quelle est votre date de naissance? (Utilisez jj/mm/aaaa)");
			    SendClientMessage(playerid, 0x87C1D7F6, "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
			    return 0;
			}
			if(strvalEx(DateInfo[1]) > month)
			{
			    check -= 1;
			}
			else if(strvalEx(DateInfo[1]) == month && strval(DateInfo[0]) > day)
			{
			    check -= 1;
			}
			PlayerInfo[playerid][pAge] = check;
			SendClientMessage(playerid, 0x87C1D7F6, "~~~~~~~~~~~~~~~~Etape 4~~~~~~~~~~~~~~~~");
			format(string, sizeof(string), "D'accord, vous avez donc %d ans.",PlayerInfo[playerid][pAge]);
			SendClientMessage(playerid, COLOR_YELLOW2, string);
			RegistrationStep[playerid] = 3;
			SendClientMessage(playerid, COLOR_WHITE, "Quelle est votre Origine? (Tapez : USA, Europe, Asie ou Afrique)");
			SendClientMessage(playerid, 0x87C1D7F6, "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
			return 0;
	    }
	    else if(RegistrationStep[playerid] == 3)
	    {
	        new idx;
	    	tmp = strtok(text, idx);
		    if((strcmp("usa", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("usa")))
			{
			    PlayerInfo[playerid][pOrigin] = 1;
			    SendClientMessage(playerid, 0x87C1D7F6, "~~~~~~~~~~~~~~~~Etape 4~~~~~~~~~~~~~~~~");
			    SendClientMessage(playerid, COLOR_YELLOW2, "D'accord, vous venez donc des USA.");
			    SendClientMessage(playerid, COLOR_WHITE, "Merci de nous avoir fournis ces renseignements.");
			    SendClientMessage(playerid, 0x87C1D7F6, "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
				RegistrationStep[playerid] = 0;
				ClearChatbox(playerid, 1);
				SendClientMessage(playerid, COLOR_YELLOW2, "Nous allons maintenant passé au Test sur le RolePlay.");
				SendClientMessage(playerid, COLOR_YELLOW2, "");
				SendClientMessage(playerid, COLOR_NICEBLUE, ".:: Que veut dire 'RP' ?? ::.");
				SendClientMessage(playerid, COLOR_WHITE, "1. Roulez Proprement");
				SendClientMessage(playerid, COLOR_WHITE, "2. Role Play");
				SendClientMessage(playerid, COLOR_WHITE, "3. Cela ne veut rien dire");
				RegistrationQuestion[playerid] = 1;
			    return 0;
			}
			else if((strcmp("europe", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("europe")))
			{
			    PlayerInfo[playerid][pOrigin] = 2;
			    SendClientMessage(playerid, 0x87C1D7F6, "~~~~~~~~~~~~~~~~Etape 4~~~~~~~~~~~~~~~~");
			    SendClientMessage(playerid, COLOR_YELLOW2, "D'accord, vous venez donc d'Europe.");
			    SendClientMessage(playerid, COLOR_WHITE, "Merci de nous avoir fournis ces renseignements.");
			    SendClientMessage(playerid, 0x87C1D7F6, "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
				RegistrationStep[playerid] = 0;
                SendClientMessage(playerid, COLOR_YELLOW2, "");
				SendClientMessage(playerid, COLOR_YELLOW2, "Nous allons maintenant passé au Test sur le RolePlay.");
				SendClientMessage(playerid, COLOR_YELLOW2, "");
				SendClientMessage(playerid, COLOR_NICEBLUE, ".:: Que veut dire 'RP' ?? ::.");
				SendClientMessage(playerid, COLOR_WHITE, "1. Roulez Proprement");
				SendClientMessage(playerid, COLOR_WHITE, "2. Role Play");
				SendClientMessage(playerid, COLOR_WHITE, "3. Cela ne veut rien dire");
				RegistrationQuestion[playerid] = 1;
			    return 0;
			}
			else if((strcmp("asie", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("asie")))
			{
			    PlayerInfo[playerid][pOrigin] = 3;
			    SendClientMessage(playerid, 0x87C1D7F6, "~~~~~~~~~~~~~~~~Etape 4~~~~~~~~~~~~~~~~");
			    SendClientMessage(playerid, COLOR_YELLOW2, "D'accord, vous venez donc d'Asie.");
			    SendClientMessage(playerid, COLOR_WHITE, "Merci de nous avoir fournis ces renseignements.");
			    SendClientMessage(playerid, 0x87C1D7F6, "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
				RegistrationStep[playerid] = 0;
				ClearChatbox(playerid, 1);
				SendClientMessage(playerid, COLOR_YELLOW2, "Nous allons maintenant passé au Test sur le RolePlay.");
				SendClientMessage(playerid, COLOR_YELLOW2, "");
				SendClientMessage(playerid, COLOR_NICEBLUE, ".:: Que veut dire 'RP' ?? ::.");
				SendClientMessage(playerid, COLOR_WHITE, "1. Roulez Proprement");
				SendClientMessage(playerid, COLOR_WHITE, "2. Role Play");
				SendClientMessage(playerid, COLOR_WHITE, "3. Cela ne veut rien dire");
				RegistrationQuestion[playerid] = 1;
			    return 0;
			}
			else if((strcmp("afrique", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("afrique")))
			{
			    PlayerInfo[playerid][pOrigin] = 4;
			    SendClientMessage(playerid, 0x87C1D7F6, "~~~~~~~~~~~~~~~~Etape 4~~~~~~~~~~~~~~~~");
			    SendClientMessage(playerid, COLOR_YELLOW2, "D'accord, vous venez donc d'Afrique.");
			    SendClientMessage(playerid, COLOR_WHITE, "Merci de nous avoir fournis ces renseignements.");
			    SendClientMessage(playerid, 0x87C1D7F6, "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
				RegistrationStep[playerid] = 0;
				ClearChatbox(playerid, 1);
				SendClientMessage(playerid, COLOR_YELLOW2, "Nous allons maintenant passé au Test sur le RolePlay.");
				SendClientMessage(playerid, COLOR_YELLOW2, "");
				SendClientMessage(playerid, COLOR_NICEBLUE, ".:: Que veut dire 'RP' ?? ::.");
				SendClientMessage(playerid, COLOR_WHITE, "1. Roulez Proprement");
				SendClientMessage(playerid, COLOR_WHITE, "2. Role Play");
				SendClientMessage(playerid, COLOR_WHITE, "3. Cela ne veut rien dire");
				RegistrationQuestion[playerid] = 1;
			    return 0;
			}
			else
			{
			    SendClientMessage(playerid, 0x87C1D7F6, "~~~~~~~~~~~~~~~~Etape 4~~~~~~~~~~~~~~~~");
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Quelle est votre Origine? (Tapez : USA, Europe, Asie or Afrique)");
			    SendClientMessage(playerid, 0x87C1D7F6, "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
			}
			return 0;
	    }
		return 0;
	}
	if(RegistrationQuestion[playerid] > 0)
	{
        if(RegistrationQuestion[playerid] == 1)
	    {
	        new idx;
	    	tmp = strtok(text, idx);
		    if((strcmp("2", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("2")))
			{
			    ClearChatbox(playerid, 2);
			    SendClientMessage(playerid, COLOR_YELLOW2, "Excellent!");
			    ClearChatbox(playerid, 1);
			    SendClientMessage(playerid, COLOR_NICEBLUE, ".:: Que signifie le Mixe ? ::.");
				SendClientMessage(playerid, COLOR_WHITE, "1. C'est un terme culinaire");
				SendClientMessage(playerid, COLOR_WHITE, "2. Agir comme un super héros.");
				SendClientMessage(playerid, COLOR_WHITE, "3. Mélanger des informations OOC en IC")
				ClearChatbox(playerid, 2);
				RegistrationQuestion[playerid] = 2;
				return 0;
			}
			else
			{
				ClearChatbox(playerid, 10);
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Allez lire les règles du Mix sur notre forum.");
			    ClearChatbox(playerid, 1);
			    SendClientMessage(playerid, COLOR_WHITE, "Le lien de notre forum pour consulter les règles : .:: http://u2c-rp.forum-pro.fr ::.");
				Kick(playerid);
				return 0;
			}
		}
		else if(RegistrationQuestion[playerid] == 2)
	    {
	        new idx;
	    	tmp = strtok(text, idx);
		    if((strcmp("3", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("3")))
			{
			    ClearChatbox(playerid, 2);
			    SendClientMessage(playerid, COLOR_YELLOW2, "Bonne réponse !");
			    ClearChatbox(playerid, 1);
                SendClientMessage(playerid, COLOR_NICEBLUE, ".:: Si vous avez une envie de tuer des gens. Qu'allez vous faire ? ::.");
				SendClientMessage(playerid, COLOR_WHITE, "1. Allez acheter une arme a l'Ammu-nation et allez tuer tout le monde. ");
				SendClientMessage(playerid, COLOR_WHITE, "2. Déconnectez vous et allez sur un serveur DM/Freeroam.");
				SendClientMessage(playerid, COLOR_WHITE, "3. Demander a un Admin si vous avez la permission de tuer quelques personnes.");
				ClearChatbox(playerid, 2);
				RegistrationQuestion[playerid] = 3;
			    return 0;
			}
			else
			{
				ClearChatbox(playerid, 4);
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Le Death Match est la pire des choses !");
			    ClearChatbox(playerid, 1);
			    SendClientMessage(playerid, COLOR_WHITE, "Allez sur notre forum relire les règles. .:: http://u2c-rp.forum-pro.fr ::.");
				Kick(playerid);
				return 0;
			}
		}
		else if(RegistrationQuestion[playerid] == 3)
	    {
	        new idx;
	    	tmp = strtok(text, idx);
		    if((strcmp("2", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("2")))
			{
			    ClearChatbox(playerid, 2);
			    SendClientMessage(playerid, COLOR_YELLOW2, "Excellent!");
			    ClearChatbox(playerid, 1);
                SendClientMessage(playerid, COLOR_NICEBLUE, ".:: Si vous vous faites kidnappé, comment agissez vous ? ::.");
				SendClientMessage(playerid, COLOR_WHITE, "1. Faites ESC (Echap) pour sauver votre peau.");
				SendClientMessage(playerid, COLOR_WHITE, "2. Agissez de façon RolePlay et essayez de survivre.");
				SendClientMessage(playerid, COLOR_WHITE, "3. Demandez OOC a un de vos potes de venir vous aider.");
				ClearChatbox(playerid, 2);
				RegistrationQuestion[playerid] = 4;
			    return 0;
			}
			else
			{
				ClearChatbox(playerid, 4);
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Faux ! Agissez comme vous le feriez dans la réalité !");
			    ClearChatbox(playerid, 1);
			    SendClientMessage(playerid, COLOR_WHITE, "Allez sur notre forum relire les règles. .:: http://u2c-rp.forum-pro.fr ::.");
				Kick(playerid);
				return 0;
			}
		}
		else if(RegistrationQuestion[playerid] == 4)
	    {
	        new idx;
	    	tmp = strtok(text, idx);
		    if((strcmp("2", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("2")))
			{
			    ClearChatbox(playerid, 2);
			    SendClientMessage(playerid, COLOR_YELLOW2, "Bravo ! Question suivante :");
			    ClearChatbox(playerid, 1);
                SendClientMessage(playerid, COLOR_NICEBLUE, ".:: Si vous deviez faire une publicitée, laquelle choissiriez vous ? ::.");
				SendClientMessage(playerid, COLOR_WHITE, "1. /pub [Vente] Sultan, tunnée de 300Ch. Appelez pour plus d'information.");
				SendClientMessage(playerid, COLOR_WHITE, "2. /pub [Vente] 10 kilos de Drogue. Haute qualitée !");
				SendClientMessage(playerid, COLOR_WHITE, "3. /pub [Vente] Sultan, tunnée de 300Ch. Envoyez moi un MP si vous la voulez.");
				ClearChatbox(playerid, 2);
				RegistrationQuestion[playerid] = 5;
			    return 0;
			}
			else
			{
				ClearChatbox(playerid, 4);
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Ceci est un serveur RP, alors publiez une publicité comme vous le feriez en vrai.");
			    ClearChatbox(playerid, 1);
			    SendClientMessage(playerid, COLOR_WHITE, "Allez sur notre forum relire les règles. .:: http://u2c-rp.forum-pro.fr ::.");
				Kick(playerid);
				return 0;
			}
		}
		else if(RegistrationQuestion[playerid] == 5)
	    {
	        new idx;
	    	tmp = strtok(text, idx);
		    if((strcmp("1", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("1")))
			{
			    ClearChatbox(playerid, 2);
			    SendClientMessage(playerid, COLOR_YELLOW2, "Très bien ! Continuez comme ca !");
			    ClearChatbox(playerid, 1);
                SendClientMessage(playerid, COLOR_NICEBLUE, ".:: Utilisation du /me. Quelle réponse vous parait le plus probable ? ::.");
				SendClientMessage(playerid, COLOR_WHITE, "1. /me s'envole dans les airs.");
				SendClientMessage(playerid, COLOR_WHITE, "2. /me se démenotte puis s'échappe.");
				SendClientMessage(playerid, COLOR_WHITE, "3. /me prend sa main, et boucle sa ceinture.");
				ClearChatbox(playerid, 2);
				RegistrationQuestion[playerid] = 6;
			    return 0;
			}
			else
			{
				ClearChatbox(playerid, 4);
			    SendClientMessage(playerid, COLOR_LIGHTRED, "C'est completement NO RP car c'est irréaliste !");
			    ClearChatbox(playerid, 1);
			    SendClientMessage(playerid, COLOR_WHITE, "Allez sur notre forum relire les règles. .:: http://u2c-rp.forum-pro.fr ::.");
				Kick(playerid);
				return 0;
			}
		}
		else if(RegistrationQuestion[playerid] == 6)
	    {
	        new idx;
	    	tmp = strtok(text, idx);
		    if((strcmp("3", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("3")))
			{
			    ClearChatbox(playerid, 2);
			    SendClientMessage(playerid, COLOR_YELLOW2, "Bonne réponse !");
			    ClearChatbox(playerid, 1);
                SendClientMessage(playerid, COLOR_NICEBLUE, ".:: Votre voiture est cassée. Que faites vous ? ::.");
				SendClientMessage(playerid, COLOR_WHITE, "1. Vous appelez un Admin pour qu'il vous TP.");
				SendClientMessage(playerid, COLOR_WHITE, "2. Appelez un taxi ou un mécanicien.");
				SendClientMessage(playerid, COLOR_WHITE, "3. Déconnectez vous et reconnectez vous pour spawn a votre maison.");
				ClearChatbox(playerid, 2);
				RegistrationQuestion[playerid] = 7;
			    return 0;
			}
			else
			{
				ClearChatbox(playerid, 4);
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Ce n'est pas RP !");
			    ClearChatbox(playerid, 1);
			    SendClientMessage(playerid, COLOR_WHITE, "Allez sur notre forum relire les règles. .:: http://u2c-rp.forum-pro.fr ::.");
				Kick(playerid);
				return 0;
			}
		}
		else if(RegistrationQuestion[playerid] == 7)
	    {
	        new idx;
	    	tmp = strtok(text, idx);
		    if((strcmp("2", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("2")))
			{
			    ClearChatbox(playerid, 2);
			    SendClientMessage(playerid, COLOR_YELLOW2, "Super ! Passons a la question suivante :");
			    ClearChatbox(playerid, 1);
                SendClientMessage(playerid, COLOR_NICEBLUE, ".:: Vous voyez un Cheater. Que faites vous ? ::.");
				SendClientMessage(playerid, COLOR_WHITE, "1. Vous le /report a un Admin.");
				SendClientMessage(playerid, COLOR_WHITE, "2. Vous lui demandez ou il s'est procuré son logiciel.");
				SendClientMessage(playerid, COLOR_WHITE, "3. Ignorez le.");
				ClearChatbox(playerid, 2);
				RegistrationQuestion[playerid] = 8;
			    return 0;
			}
			else
			{
				ClearChatbox(playerid, 4);
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Faux ! Vous devez a tout pris les dénoncer !");
			    ClearChatbox(playerid, 1);
			    SendClientMessage(playerid, COLOR_WHITE, "Allez sur notre forum relire les règles. .:: http://u2c-rp.forum-pro.fr ::.");
				Kick(playerid);
				return 0;
			}
		}
		else if(RegistrationQuestion[playerid] == 8)
	    {
	        new idx;
	    	tmp = strtok(text, idx);
		    if((strcmp("1", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("1")))
			{
			    ClearChatbox(playerid, 2);
			    SendClientMessage(playerid, COLOR_YELLOW2, "Félécitation ! Question suivante :");
			    ClearChatbox(playerid, 1);
                SendClientMessage(playerid, COLOR_NICEBLUE, ".:: Vous trouvez un Bug. Que faites vous ? ::.");
				SendClientMessage(playerid, COLOR_WHITE, "1. Vous en abusez.");
				SendClientMessage(playerid, COLOR_WHITE, "2. Vous prenez des Screens (F8) et vous les postés sur le Forum.");
				SendClientMessage(playerid, COLOR_WHITE, "3. Vous appelez un amis et vous en profitez avec lui.");
				ClearChatbox(playerid, 2);
				RegistrationQuestion[playerid] = 9;
			    return 0;
			}
			else
			{
				ClearChatbox(playerid, 4);
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Abuseurs de Bug !");
			    ClearChatbox(playerid, 1);
			    SendClientMessage(playerid, COLOR_WHITE, "Allez sur notre forum relire les règles. .:: http://u2c-rp.forum-pro.fr ::.");
				Kick(playerid);
				return 0;
			}
		}
		else if(RegistrationQuestion[playerid] == 9)
	    {
	        new idx;
	    	tmp = strtok(text, idx);
		    if((strcmp("2", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("2")))
			{
			    ClearChatbox(playerid, 2);
			    SendClientMessage(playerid, COLOR_YELLOW2, " Excellent !");
			    ClearChatbox(playerid, 1);
				SendClientMessage(playerid, COLOR_WHITE, "Vous avez réussi les tests. Bienvenue sur Une 2eme Chance RolePlay !");
				SendClientMessage(playerid, COLOR_WHITE, "Comme vous avez réussi les tests, vous êtes priés d'appliquer ces règles.");
				RegistrationQuestion[playerid] = 0;
				PlayerInfo[playerid][pTut] = 1;
			    SendClientMessage(playerid, COLOR_WHITE, "En cas de problème ou autre, utilisez /question pour contacter un admin/modo.");
			   	RegistrationStep[playerid] = 0;
			    TutTime[playerid] = 1;
				PlayerInfo[playerid][pTut] = 1;
				gOoc[playerid] = 0; gNews[playerid] = 0; gFam[playerid] = 0;
				TogglePlayerControllable(playerid, 1);
				MedicBill[playerid] = 0;
				AfterTutorial[playerid] = 1;
				SetTimerEx("UnsetAfterTutorial", 2500, false, "i", playerid);
				SetTimerEx("UnsetFirstSpawn", 5000, false, "i", playerid);
				SetPlayerSpawn(playerid);
			    return 0;
			}
			else
			{
				ClearChatbox(playerid, 4);
			    SendClientMessage(playerid, COLOR_LIGHTRED, "C'est faux ! Dommage !");
			    ClearChatbox(playerid, 1);
			    SendClientMessage(playerid, COLOR_WHITE, "Allez sur notre forum relire les règles. .:: http://u2c-rp.forum-pro.fr ::.");
				Kick(playerid);
				return 0;
			}

		}
	}
	if(DKT[playerid] > 0)
	{
	    if(DKT[playerid] == 1)
	    {
	        new idx;
	    	tmp = strtok(text, idx);
		    if((strcmp("2", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("2")))
			{
			    SendClientMessage(playerid, COLOR_GREEN, "Correcte");
                SetTimerEx("DKT3", 5000, 0, "d", playerid);
			    return 0;
			}
			else
			{
			    SetPlayerPos(playerid, 1492.9873,1304.9100,1093.2891);
    			SetPlayerInterior(playerid, 3);
			    GameTextForPlayer(playerid, "~r~ Echouer", 5000, 3);
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Incorrecte");
			    TogglePlayerControllable(playerid, 1);
			    DKT[playerid] = 0;
			}
			return 0;
		}
  		else if(DKT[playerid] == 2)
	    {
	        new idx;
	    	tmp = strtok(text, idx);
		    if((strcmp("2", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("2")))
			{
			    SendClientMessage(playerid, COLOR_GREEN, "Correcte");
                SetTimerEx("DKT4", 5000, 0, "d", playerid);
			    return 0;
			}
			else
			{
			    SetPlayerPos(playerid, 1492.9873,1304.9100,1093.2891);
    			SetPlayerInterior(playerid, 3);
			    GameTextForPlayer(playerid, "~r~ Echouer", 5000, 3);
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Incorrecte");
			    TogglePlayerControllable(playerid, 1);
			    DKT[playerid] = 0;
			}
			return 0;
		}
		else if(DKT[playerid] == 3)
	    {
	        new idx;
	    	tmp = strtok(text, idx);
		    if((strcmp("3", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("3")))
			{
			    SendClientMessage(playerid, COLOR_GREEN, "Correcte");
                SetTimerEx("DKT5", 5000, 0, "d", playerid);
			    return 0;
			}
			else
			{
			    SetPlayerPos(playerid, 1492.9873,1304.9100,1093.2891);
    			SetPlayerInterior(playerid, 3);
			    GameTextForPlayer(playerid, "~r~ Echouer", 5000, 3);
			    SendClientMessage(playerid, COLOR_GREEN, "Incorrecte");
			    TogglePlayerControllable(playerid, 1);
			    DKT[playerid] = 0;
			}
			return 0;
		}
  		else if(DKT[playerid] == 4)
	    {
	        new idx;
	    	tmp = strtok(text, idx);
		    if((strcmp("2/3", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("2/3")))
			{
			    SendClientMessage(playerid, COLOR_GREEN, "Correcte");
                SetTimerEx("DKT6", 5000, 0, "d", playerid);
			    return 0;
			}
			else
			{
			    SetPlayerPos(playerid, 1492.9873,1304.9100,1093.2891);
    			SetPlayerInterior(playerid, 3);
			    GameTextForPlayer(playerid, "~r~ Echouer", 5000, 3);
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Incorrecte");
			    TogglePlayerControllable(playerid, 1);
			    DKT[playerid] = 0;
			}
			return 0;
		}
  		else if(DKT[playerid] == 5)
	    {
	        new idx;
	    	tmp = strtok(text, idx);
		    if((strcmp("1/4", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("1/4")))
			{
			    SendClientMessage(playerid, COLOR_GREEN, "Correcte");
				SetPlayerPos(playerid, 1492.9873,1304.9100,1093.2891);
    			SetPlayerInterior(playerid, 3);
    			DKT[playerid] = 0;
 				SendClientMessage(playerid, COLOR_LIGHTRED, "___________________________________");
 				SendClientMessage(playerid, COLOR_YELLOW, "Fin du test du code de la route");
 				SendClientMessage(playerid, COLOR_YELLOW, "L'instructeur vient de vous donner votre diplôme.");
				//SetTimerEx("DrivingTest1", 7000, 0, "d", playerid);
				GameTextForPlayer(playerid, "~g~ Code de la route : Recu", 5000, 3);
				SendClientMessage(playerid, COLOR_YELLOW, "Soyez prudent sur les routes !!! ");
				TogglePlayerControllable(playerid, 1);
				PlayerPlayMusic(playerid);
				pTest[playerid] = 0;
				SafeGivePlayerMoney(playerid, -2500);
				PlayerInfo[playerid][pCarLic] = 1;
			}
			else
			{
			    SetPlayerPos(playerid, 1492.9873,1304.9100,1093.2891);
    			SetPlayerInterior(playerid, 3);
			    GameTextForPlayer(playerid, "~r~Code de la route : Echouer", 5000, 3);
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Mauvaise réponse, recommencez !");
			    TogglePlayerControllable(playerid, 1);
			    DKT[playerid] = 0;
			}
			return 0;
		}
		return 0;
	}
	if(MarriageCeremoney[playerid] > 0)
	{
	    new idx;
	    tmp = strtok(text, idx);
	    if ((strcmp("Oui", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("Oui")))
		{
		    if(GotProposedBy[playerid] < 999)
		    {
			    if(IsPlayerConnected(GotProposedBy[playerid]))
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerName(GotProposedBy[playerid], giveplayer, sizeof(giveplayer));
				    format(string, sizeof(string), "Prêtre: %s voulez vous prendre %s pour épouse? (Tapez 'Oui', autre chose annulera le marriage).", giveplayer,sendername);
					SendClientMessage(GotProposedBy[playerid], COLOR_WHITE, string);
					MarriageCeremoney[GotProposedBy[playerid]] = 1;
					MarriageCeremoney[playerid] = 0;
					GotProposedBy[playerid] = 999;
				    return 1;
			    }
			    else
			    {
			        MarriageCeremoney[playerid] = 0;
			        GotProposedBy[playerid] = 999;
			        return 0;
			    }
			}
			else if(ProposedTo[playerid] < 999)
			{
			    if(IsPlayerConnected(ProposedTo[playerid]))
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerName(ProposedTo[playerid], giveplayer, sizeof(giveplayer));
					if(PlayerInfo[playerid][pSex] == 1 && PlayerInfo[ProposedTo[playerid]][pSex] == 2)
					{
						format(string, sizeof(string), "Prêtre: %s et %s Je vous déclare...Marri et Femme, Vous pouvez embrasser la Marriée.", sendername, giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
				   		format(string, sizeof(string), "Prêtre: %s et %s Je vous déclare...Marri et Femme, Vous pouvez embrasser la Marriée.", giveplayer, sendername);
						SendClientMessage(ProposedTo[playerid], COLOR_WHITE, string);
						format(string, sizeof(string), "Nouvelles de Marriage: Nous avons un nouveau couple à LA, %s & %s ont été marrié.", sendername, giveplayer);
						OOCNews(COLOR_WHITE, string);
					}
					else if(PlayerInfo[playerid][pSex] == 1 && PlayerInfo[ProposedTo[playerid]][pSex] == 1)
					{
					    format(string, sizeof(string), "Prêtre: %s et %s Je vous déclare...Marri et Marri, Vous pouvez vous embrassez.", sendername, giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
				   		format(string, sizeof(string), "Prêtre: %s et %s Je vous déclare...Marri et Marri, Vous pouvez vous embrassez.", giveplayer, sendername);
						SendClientMessage(ProposedTo[playerid], COLOR_WHITE, string);
						format(string, sizeof(string), "Nouvelles de Marriage: Nous avons un nouveau couple Gay à LA, %s & %s ont été marrié.", sendername, giveplayer);
						OOCNews(COLOR_WHITE, string);
					}
					else if(PlayerInfo[playerid][pSex] == 2 && PlayerInfo[ProposedTo[playerid]][pSex] == 2)
					{
					    format(string, sizeof(string), "Prêtre: %s et %s Je vous déclare...Marriée et Marriée, Vous pouvez vous embrassez.", sendername, giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
				   		format(string, sizeof(string), "Prêtre: %s et %s Je vous déclare...Marriée et Marriée, Vous pouvez vous embrassez.", giveplayer, sendername);
						SendClientMessage(ProposedTo[playerid], COLOR_WHITE, string);
						format(string, sizeof(string), "Nouvelles de Marriage: Nous avons un nouveau couple de lesbiennes à LA, %s & %s ont été marrié.", sendername, giveplayer);
						OOCNews(COLOR_WHITE, string);
					}
					//MarriageCeremoney[ProposedTo[playerid]] = 1;
					MarriageCeremoney[ProposedTo[playerid]] = 0;
					MarriageCeremoney[playerid] = 0;
					format(string, sizeof(string), "%s", sendername);
					strmid(PlayerInfo[ProposedTo[playerid]][pMarriedTo], string, 0, strlen(string), 255);
					format(string, sizeof(string), "%s", giveplayer);
					strmid(PlayerInfo[playerid][pMarriedTo], string, 0, strlen(string), 255);
					SafeGivePlayerMoney(playerid, - 20000);
					PlayerInfo[playerid][pMarried] = 1;
					PlayerInfo[ProposedTo[playerid]][pMarried] = 1;
					PlayerInfo[ProposedTo[playerid]][pPhousekey] = PlayerInfo[playerid][pPhousekey];
					PlayerInfo[ProposedTo[playerid]][pPbiskey] = PlayerInfo[playerid][pPbiskey];
					ProposedTo[playerid] = 999;
					MarriageCeremoney[playerid] = 0;
				    return 1;
			    }
			    else
			    {
			        MarriageCeremoney[playerid] = 0;
			        ProposedTo[playerid] = 999;
			        return 0;
			    }
			}
		}
		else
		{
		    if(GotProposedBy[playerid] < 999)
		    {
				if(IsPlayerConnected(GotProposedBy[playerid]))
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerName(GotProposedBy[playerid], giveplayer, sizeof(giveplayer));
					format(string, sizeof(string), "Vous ne voulez pas vous marrié avec %s, aucun 'Oui' n'à été dit.",giveplayer);
				    SendClientMessage(playerid, COLOR_YELLOW, string);
				    format(string, sizeof(string), "%s ne veut pas se marrié avec vous, aucun 'Oui' n'à été dit.",sendername);
				    SendClientMessage(GotProposedBy[playerid], COLOR_YELLOW, string);
				    return 0;
			    }
			    else
			    {
			        MarriageCeremoney[playerid] = 0;
			        GotProposedBy[playerid] = 999;
			        return 0;
			    }
		    }
		    else if(ProposedTo[playerid] < 999)
			{
			    if(IsPlayerConnected(ProposedTo[playerid]))
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerName(ProposedTo[playerid], giveplayer, sizeof(giveplayer));
					format(string, sizeof(string), "Vous ne voulez pas vous marrié avec %s, aucun 'Oui' n'à été dit.",giveplayer);
				    SendClientMessage(playerid, COLOR_YELLOW, string);
				    format(string, sizeof(string), "%s ne veut pas se marrié avec vous, aucun 'Oui' n'à été dit.",sendername);
				    SendClientMessage(ProposedTo[playerid], COLOR_YELLOW, string);
				    return 0;
			    }
			    else
			    {
			        MarriageCeremoney[playerid] = 0;
			        ProposedTo[playerid] = 999;
			        return 0;
			    }
			}
		}
	    return 0;
	}
	if(WritingPaper[playerid] > 0)
	{
	    new line;
        new nstring[256];
        new idx;
        new length = strlen(text);
		while ((idx < length) && (text[idx] <= ' '))
		{
			idx++;
		}
		new offset = idx;
		new result[64];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
		{
			result[idx - offset] = text[idx];
			idx++;
		}
		result[idx - offset] = EOS;
		if(!strlen(result))
		{
		    if(WritingLine[playerid] == 1) { SendClientMessage(playerid, COLOR_GRAD2, "S'il vous plait, inscrivez le titre que vous désirez mettre pour votre Journal."); }
		    else { SendClientMessage(playerid, COLOR_LIGHTRED, "S'il vous plait, mettez un texte dans votre article."); }
			return 0;
		}
		format(nstring, sizeof(nstring), "%s", text);
		switch(WritingLine[playerid])
		{
		    case 1:
		    {
		        new fstring[MAX_PLAYER_NAME];
		        GetPlayerName(playerid, sendername, sizeof(sendername));
				format(fstring, sizeof(fstring), "%s", sendername);
				strmid(PaperInfo[WritingPaperNumber[playerid]][PaperMaker], fstring, 0, strlen(fstring), 255);
		        strmid(PaperInfo[WritingPaperNumber[playerid]][PaperTitle], nstring, 0, strlen(nstring), 255);
		        line = 0; WritingLine[playerid] = 2;
		        SendClientMessage(playerid, COLOR_LIGHTRED, "Vous pouvez a présent commencer a rédiger votre article, 7 lignes restantes.");
		    }
		    case 2:
		    {
		        strmid(PaperInfo[WritingPaperNumber[playerid]][PaperText1], nstring, 0, strlen(nstring), 255);
		        line = 1; WritingLine[playerid] = 3;
		    }
		    case 3:
		    {
		        strmid(PaperInfo[WritingPaperNumber[playerid]][PaperText2], nstring, 0, strlen(nstring), 255);
		        line = 2; WritingLine[playerid] = 4;
		    }
		    case 4:
		    {
		        strmid(PaperInfo[WritingPaperNumber[playerid]][PaperText3], nstring, 0, strlen(nstring), 255);
		        line = 3; WritingLine[playerid] = 5;
		    }
		    case 5:
		    {
		        strmid(PaperInfo[WritingPaperNumber[playerid]][PaperText4], nstring, 0, strlen(nstring), 255);
		        line = 4; WritingLine[playerid] = 6;
		    }
		    case 6:
		    {
		        strmid(PaperInfo[WritingPaperNumber[playerid]][PaperText5], nstring, 0, strlen(nstring), 255);
		        line = 5; WritingLine[playerid] = 7;
		    }
		    case 7:
		    {
		        strmid(PaperInfo[WritingPaperNumber[playerid]][PaperText6], nstring, 0, strlen(nstring), 255);
		        line = 6; WritingLine[playerid] = 8;
		    }
		    case 8:
		    {
		        strmid(PaperInfo[WritingPaperNumber[playerid]][PaperText7], nstring, 0, strlen(nstring), 255);
		        PaperInfo[WritingPaperNumber[playerid]][PaperUsed] = 1;
		        SavePapers();
		        line = 7; WritingLine[playerid] = 0; WritingPaper[playerid] = 0; WritingPaperNumber[playerid] = 999;
		    }
		}
		if(line > 0)
		{
			format(string, sizeof(string), "Vous avez écris %d lignes dans votre journal.", line);
			SendClientMessage(playerid, COLOR_WHITE, string);
			if(line == 7)
			{
			    SendClientMessage(playerid, COLOR_WHITE, "Votre journal à été ajouté a la liste des journaux.");
			    SendClientMessage(playerid, COLOR_WHITE, "Il faut dès a présent que les livreurs de journaux livrent votre article.");
			}
		}
	    return 0;
	}
	if(ConnectedToPC[playerid] == 255)
	{
		new idx;
	    tmp = strtok(text, idx);
	    if ((strcmp("Contrats", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("Contrats")))
		{
		    if(PlayerInfo[playerid][pRank] < 4)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "Seulement les Hitman rang 4 peuvent chercher et assigner des contrats!");
		        return 0;
		    }
		    SearchingHit(playerid);
			return 0;
		}
		else if ((strcmp("News", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("News")))
		{
		    	new x_nr[256];
				x_nr = strtok(text, idx);

				if(!strlen(x_nr)) {
					SendClientMessage(playerid, COLOR_WHITE, "|__________________ Nouvelles Agence Hitman __________________|");
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: News [numero] ou News suprimer [numero] ou News suprimer tout");
					format(string, sizeof(string), "1: %s :: Hitman: %s", News[hAdd1], News[hContact1]);
					SendClientMessage(playerid, COLOR_GREY, string);
					format(string, sizeof(string), "2: %s :: Hitman: %s", News[hAdd2], News[hContact2]);
					SendClientMessage(playerid, COLOR_GREY, string);
					format(string, sizeof(string), "3: %s :: Hitman: %s", News[hAdd3], News[hContact3]);
					SendClientMessage(playerid, COLOR_GREY, string);
					format(string, sizeof(string), "4: %s :: Hitman: %s", News[hAdd4], News[hContact4]);
					SendClientMessage(playerid, COLOR_GREY, string);
					format(string, sizeof(string), "5: %s :: Hitman: %s", News[hAdd5], News[hContact5]);
					SendClientMessage(playerid, COLOR_GREY, string);
					SendClientMessage(playerid, COLOR_WHITE, "|________________________________________________________|");
					return 0;
				}//lets start
				if(strcmp(x_nr,"1",true) == 0)
				{
				    if(PlacedNews[playerid] == 1) { SendClientMessage(playerid, COLOR_GREY, "Il y a déjà un message, suprimé le d'abord!"); return 0; }
				    if(PlayerInfo[playerid][pRank] < 3) { SendClientMessage(playerid, COLOR_GREY, "Vous devez être rang 3 pour pouvoir ecrire un message dans la catégorie News!"); return 0; }
				    if(News[hTaken1] == 0)
				    {
				        GetPlayerName(playerid, sendername, sizeof(sendername));
				        if(strlen(text)-(strlen(x_nr)) < 9) { SendClientMessage(playerid, COLOR_GREY, "Message trop court!"); return 0; }
						format(string, sizeof(string), "%s",right(text,strlen(text)-7)); strmid(News[hAdd1], string, 0, strlen(string), 255);
						format(string, sizeof(string), "%s",sendername); strmid(News[hContact1], string, 0, strlen(string), 255);
						News[hTaken1] = 1; PlacedNews[playerid] = 1;
						SendClientMessage(playerid, COLOR_WHITE, "Vous avez mis un nouveau message dans les News de l'agence Hitman.");
						return 0;
				    }
				    else
				    {
				        SendClientMessage(playerid, COLOR_GREY, "Spot 1 déjà pris!");
				        return 0;
				    }
				}
				else if(strcmp(x_nr,"2",true) == 0)
				{
				    if(PlacedNews[playerid] == 1) { SendClientMessage(playerid, COLOR_GREY, "Il y a déjà un message, suprimé le d'abord!"); return 0; }
				    if(PlayerInfo[playerid][pRank] < 3) { SendClientMessage(playerid, COLOR_GREY, "Vous devez être rang 3 pour pouvoir ecrire un message dans la catégorie News!"); return 0; }
				    if(News[hTaken2] == 0)
				    {
				        GetPlayerName(playerid, sendername, sizeof(sendername));
				        if(strlen(text)-(strlen(x_nr)) < 9) { SendClientMessage(playerid, COLOR_GREY, "Message trop court!"); return 0; }
						format(string, sizeof(string), "%s",right(text,strlen(text)-7)); strmid(News[hAdd2], string, 0, strlen(string), 255);
						format(string, sizeof(string), "%s",sendername); strmid(News[hContact2], string, 0, strlen(string), 255);
						News[hTaken2] = 1; PlacedNews[playerid] = 1;
						SendClientMessage(playerid, COLOR_WHITE, "Vous avez mis un nouveau message dans les News de l'agence Hitman.");
						return 0;
				    }
				    else
				    {
				        SendClientMessage(playerid, COLOR_GREY, "Spot 2 déjà pris!");
				        return 0;
				    }
				}
				else if(strcmp(x_nr,"3",true) == 0)
				{
				    if(PlacedNews[playerid] == 1) { SendClientMessage(playerid, COLOR_GREY, "Il y a déjà un message, suprimé le d'abord!"); return 0; }
				    if(PlayerInfo[playerid][pRank] < 3) { SendClientMessage(playerid, COLOR_GREY, "Vous devez être rang 3 pour pouvoir ecrire un message dans la catégorie News!"); return 0; }
				    if(News[hTaken3] == 0)
				    {
				        GetPlayerName(playerid, sendername, sizeof(sendername));
				        if(strlen(text)-(strlen(x_nr)) < 9) { SendClientMessage(playerid, COLOR_GREY, "Message trop court!"); return 0; }
						format(string, sizeof(string), "%s",right(text,strlen(text)-7)); strmid(News[hAdd3], string, 0, strlen(string), 255);
						format(string, sizeof(string), "%s",sendername); strmid(News[hContact3], string, 0, strlen(string), 255);
						News[hTaken3] = 1; PlacedNews[playerid] = 1;
						SendClientMessage(playerid, COLOR_WHITE, "Vous avez mis un nouveau message dans les News de l'agence Hitman.");
						return 0;
				    }
				    else
				    {
				        SendClientMessage(playerid, COLOR_GREY, "Spot 3 déjà pris!");
				        return 0;
				    }
				}
				else if(strcmp(x_nr,"4",true) == 0)
				{
				    if(PlacedNews[playerid] == 1) { SendClientMessage(playerid, COLOR_GREY, "Il y a déjà un message, suprimé le d'abord!"); return 0; }
				    if(PlayerInfo[playerid][pRank] < 3) { SendClientMessage(playerid, COLOR_GREY, "Vous devez être rang 3 pour pouvoir ecrire un message dans la catégorie News!"); return 0; }
				    if(News[hTaken4] == 0)
				    {
				        GetPlayerName(playerid, sendername, sizeof(sendername));
				        if(strlen(text)-(strlen(x_nr)) < 9) { SendClientMessage(playerid, COLOR_GREY, "Message trop court!"); return 0; }
						format(string, sizeof(string), "%s",right(text,strlen(text)-7)); strmid(News[hAdd4], string, 0, strlen(string), 255);
						format(string, sizeof(string), "%s",sendername); strmid(News[hContact4], string, 0, strlen(string), 255);
						News[hTaken4] = 1; PlacedNews[playerid] = 1;
						SendClientMessage(playerid, COLOR_WHITE, "Vous avez mis un nouveau message dans les News de l'agence Hitman.");
						return 0;
				    }
				    else
				    {
				        SendClientMessage(playerid, COLOR_GREY, "Spot 4 déjà pris!");
				        return 0;
				    }
				}
				else if(strcmp(x_nr,"5",true) == 0)
				{
				    if(PlacedNews[playerid] == 1) { SendClientMessage(playerid, COLOR_GREY, "Il y a déjà un message, suprimé le d'abord!"); return 0; }
				    if(PlayerInfo[playerid][pRank] < 3) { SendClientMessage(playerid, COLOR_GREY, "Vous devez être rang 3 pour pouvoir ecrire un message dans la catégorie News!"); return 0; }
				    if(News[hTaken5] == 0)
				    {
				        GetPlayerName(playerid, sendername, sizeof(sendername));
				        if(strlen(text)-(strlen(x_nr)) < 9) { SendClientMessage(playerid, COLOR_GREY, "Message trop court!"); return 0; }
						format(string, sizeof(string), "%s",right(text,strlen(text)-7)); strmid(News[hAdd5], string, 0, strlen(string), 255);
						format(string, sizeof(string), "%s",sendername); strmid(News[hContact5], string, 0, strlen(string), 255);
						News[hTaken5] = 1; PlacedNews[playerid] = 1;
						SendClientMessage(playerid, COLOR_WHITE, "Vous avez mis un nouveau message dans les News de l'agence Hitman.");
						return 0;
				    }
				    else
				    {
				        SendClientMessage(playerid, COLOR_GREY, "Spot 5 déjà pris!");
				        return 0;
				    }
				}
				else if(strcmp(x_nr,"suprimer",true) == 0)
				{
				    if(PlayerInfo[playerid][pRank] < 4)
				    {
				        SendClientMessage(playerid, COLOR_GREY, "Vous devez être rang 4 pour pouvoir suprimer un message de la catégories News!");
				        return 0;
				    }
				    new string1[MAX_PLAYER_NAME];
				    new x_tel[256];
					x_tel = strtok(text, idx);
					if(!strlen(x_tel)) {
					    SendClientMessage(playerid, COLOR_WHITE, "USAGE: News suprimer [numero] ou News suprimer tout.");
					    return 0;
					}
                    if(strcmp(x_tel,"1",true) == 0)
                    {
                        format(string, sizeof(string), "Rien"); strmid(News[hAdd1], string, 0, strlen(string), 255);
						format(string1, sizeof(string1), "Personne");	strmid(News[hContact1], string1, 0, strlen(string1), 255);
						News[hTaken1] = 0;
						SendClientMessage(playerid, COLOR_WHITE, "Vous avez suprimé ce message (1) des News de l'Agence Hitman.");
						return 0;
                    }
                    else if(strcmp(x_tel,"2",true) == 0)
                    {
                        format(string, sizeof(string), "Rien"); strmid(News[hAdd2], string, 0, strlen(string), 255);
						format(string1, sizeof(string1), "Personne");	strmid(News[hContact2], string1, 0, strlen(string1), 255);
						News[hTaken2] = 0;
						SendClientMessage(playerid, COLOR_WHITE, "Vous avez suprimé ce message (2) des News de l'Agence Hitman.");
						return 0;
                    }
                    else if(strcmp(x_tel,"3",true) == 0)
                    {
                        format(string, sizeof(string), "Rien"); strmid(News[hAdd3], string, 0, strlen(string), 255);
						format(string1, sizeof(string1), "Personne");	strmid(News[hContact3], string1, 0, strlen(string1), 255);
						News[hTaken3] = 0;
						SendClientMessage(playerid, COLOR_WHITE, "Vous avez suprimé ce message (3) des News de l'Agence Hitman.");
						return 0;
                    }
                    else if(strcmp(x_tel,"4",true) == 0)
                    {
                        format(string, sizeof(string), "Rien"); strmid(News[hAdd4], string, 0, strlen(string), 255);
						format(string1, sizeof(string1), "Personne");	strmid(News[hContact4], string1, 0, strlen(string1), 255);
						News[hTaken4] = 0;
						SendClientMessage(playerid, COLOR_WHITE, "Vous avez suprimé ce message (4) des News de l'Agence Hitman.");
						return 0;
                    }
                    else if(strcmp(x_tel,"5",true) == 0)
                    {
                        format(string, sizeof(string), "Rien"); strmid(News[hAdd5], string, 0, strlen(string), 255);
						format(string1, sizeof(string1), "Personne");	strmid(News[hContact5], string1, 0, strlen(string1), 255);
						News[hTaken5] = 0;
						SendClientMessage(playerid, COLOR_WHITE, "Vous avez suprimé ce message (5) des News de l'Agence Hitman.");
						return 0;
                    }
                    else if(strcmp(x_tel,"all",true) == 0)
                    {
                        format(string, sizeof(string), "Rien"); strmid(News[hAdd1], string, 0, strlen(string), 255);
						format(string1, sizeof(string1), "Personne");	strmid(News[hContact1], string1, 0, strlen(string1), 255);
						News[hTaken1] = 0;
						format(string, sizeof(string), "Rien"); strmid(News[hAdd2], string, 0, strlen(string), 255);
						format(string1, sizeof(string1), "Personne");	strmid(News[hContact2], string1, 0, strlen(string1), 255);
						News[hTaken2] = 0;
						format(string, sizeof(string), "Rien"); strmid(News[hAdd3], string, 0, strlen(string), 255);
						format(string1, sizeof(string1), "Personne");	strmid(News[hContact3], string1, 0, strlen(string1), 255);
						News[hTaken3] = 0;
						format(string, sizeof(string), "Rien"); strmid(News[hAdd4], string, 0, strlen(string), 255);
						format(string1, sizeof(string1), "Personne");	strmid(News[hContact4], string1, 0, strlen(string1), 255);
						News[hTaken4] = 0;
						format(string, sizeof(string), "Rien"); strmid(News[hAdd5], string, 0, strlen(string), 255);
						format(string1, sizeof(string1), "Personne");	strmid(News[hContact5], string1, 0, strlen(string1), 255);
						News[hTaken5] = 0;
						SendClientMessage(playerid, COLOR_WHITE, "Vous avez supprimé tous les messages des News de l'Agence Hitman.");
						return 0;
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_WHITE, "USAGE: News suprimer [numero] or News suprimer tout.");
					    return 0;
                    }
				}
				else { return 0; }
		}
		else if ((strcmp("DonnerContrat", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("DonnerContrat")))
		{
		    if(PlayerInfo[playerid][pRank] < 4)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "Vous devez être rang 4 pour pouvoir donner un contrat à un Hitman!");
		        return 0;
		    }
		    if(hitfound == 0)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "Pas de cible trouvée, utiliser contrat avant!");
		        return 0;
		    }
		    tmp = strtok(text, idx);
		    if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USAGE: DonnerContrat [playerid/PartOfName]");
				return 0;
			}
			//giveplayerid = strval(tmp);
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
				    if(PlayerInfo[giveplayerid][pMember] == 8 || PlayerInfo[giveplayerid][pLeader] == 8)
				    {
					    if(GoChase[giveplayerid] < 999)
					    {
					        SendClientMessage(playerid, COLOR_GREY, "Ce Hitman à déjà un contrat à exécuter!");
							return 0;
					    }
					    if(IsPlayerConnected(hitid))
				    	{
				        	GetPlayerName(playerid, sendername, sizeof(sendername));
				        	GetPlayerName(giveplayerid, giver, sizeof(giver));
				        	GetPlayerName(hitid, giveplayer, sizeof(giveplayer));
				        	//format(string, sizeof(string), " You assigned%s to kill: %s(ID:%d), for $%d.", giver, giveplayer, hitid, PlayerInfo[hitid][pValue]);
		    				//SendClientMessage(playerid, COLOR_YELLOW, string);
				        	//format(string, sizeof(string), " yakuza %s has assigned you to kill: %s(ID:%d), for $%d.", sendername, giveplayer, hitid, PlayerInfo[hitid][pValue]);
		    				//SendClientMessage(giveplayerid, COLOR_YELLOW, string);
		    				format(string, sizeof(string), "Le Hitman %s, à donné un un contrat au Hitman %s. La cible est: %s(ID:%d). Pour $%d.", sendername, giver, giveplayer, hitid, PlayerInfo[hitid][pHeadValue]);
		    				SendFamilyMessage(8, COLOR_YELLOW, string);
		    				GoChase[giveplayerid] = hitid;
		    				GetChased[hitid] = giveplayerid;
		    				GotHit[hitid] = 1;
		    				hitid = 0;
		    				hitfound = 0;
				        	return 0;
				    	}
				    	else
				    	{
				        	SendClientMessage(playerid, COLOR_GREY, "Cette personne n'est plus connecté, réutiliser contrats sur votre portable!");
				        	return 0;
				    	}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas un Hitman!");
						return 0;
					}
				}
				return 0;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Cet Hitman n'est pas en ligne!");
			    return 0;
			}
		}
		else if ((strcmp("Rangs", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("Rangs")))
		{
			SendClientMessage(playerid, COLOR_WHITE, "|__________________ Les Rangs Hitman de L'Agence __________________|");
		    for(new i=0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
				    if(PlayerInfo[i][pMember] == 8||PlayerInfo[i][pLeader] == 8)
				    {
						GetPlayerName(i, giveplayer, sizeof(giveplayer));
				        format(string, sizeof(string), "%s: Rang %d", giveplayer,PlayerInfo[i][pRank]);
						SendClientMessage(playerid, COLOR_GREY, string);
					}
				}
			}
		}
		else if ((strcmp("Armes", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("Armes")))
		{
		    if(OrderReady[playerid] > 0)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "Vous avez déjà fait une commande d'Armes, allez la récuperer au QG avant d'en faire une nouvelle!");
		        return 0;
		    }
		    tmp = strtok(text, idx);
		    if ((strcmp("1", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("1"))) // Le Rang 1 peut prendre seulement ce pack
			{
                if(PlayerInfo[playerid][pRank] < 1)
                {
                    SendClientMessage(playerid,COLOR_GREEN,"Vous n'avez pas le rang requis pour faire cette commande!");
                    return 1;
                }
			    if(GetPlayerMoney(playerid) > 4999)
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "Vous avez commandé le Pack d'Arme 1 ($5000), Allez le chercher au QG.");
			        OrderReady[playerid] = 1;
			        return 0;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY,"Vous n'avez pas assez d'argent pour cette commande!");
			        return 0;
			    }
			}
			else if ((strcmp("2", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("2")))
			{
			    if(PlayerInfo[playerid][pRank] < 2)
                {
                    SendClientMessage(playerid,COLOR_GREEN,"Vous n'avez pas le rang requis pour faire cette commande!");
                    return 1;
                }
			    if(GetPlayerMoney(playerid) > 5999)
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "Vous avez commandé le Pack d'Arme 2 ($6000), Allez le chercher au QG.");
			        OrderReady[playerid] = 2;
			        return 0;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY,"Vous n'avez pas assez d'argent pour cette commande!");
			        return 0;
			    }
			}
			else if ((strcmp("3", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("3")))
			{
			    if(PlayerInfo[playerid][pRank] < 2)
                {
                    SendClientMessage(playerid,COLOR_GREEN,"Vous n'avez pas le rang requis pour faire cette commande!");
                    return 1;
                }
			    if(GetPlayerMoney(playerid) > 5999)
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "Vous aveez commandé le Pack d'Arme 3 ($6000), Allez le chercher au QG.");
			        OrderReady[playerid] = 3;
			        return 0;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY,"Vous n'avez pas assez d'argent pour cette commande!");
			        return 0;
			    }
			}
			else if ((strcmp("4", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("4")))
			{
			    if(PlayerInfo[playerid][pRank] < 3)
                {
                    SendClientMessage(playerid,COLOR_GREEN,"Vous n'avez pas le rang requis pour faire cette commande!");
                    return 1;
                }
			    if(GetPlayerMoney(playerid) > 7999)
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "Vous aveez commandé le Pack d'Arme 4 ($8000), Allez le chercher au QG.");
			        OrderReady[playerid] = 4;
			        return 0;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY,"Vous n'avez pas assez d'argent pour cette commande!");
			        return 0;
			    }
			}
			else if ((strcmp("5", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("5")))
			{
			    if(PlayerInfo[playerid][pRank] < 3)
                {
                    SendClientMessage(playerid,COLOR_GREEN,"Vous n'avez pas le rang requis pour faire cette commande!");
                    return 1;
                }
			    if(GetPlayerMoney(playerid) > 7999)
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "Vous aveez commandé le Pack d'Arme 5 ($8000), Allez le chercher au QG.");
			        OrderReady[playerid] = 5;
			        return 0;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY,"Vous n'avez pas assez d'argent pour cette commande!");
			        return 0;
			    }
			}
			else if ((strcmp("6", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("6")))
			{
			    if(PlayerInfo[playerid][pRank] < 4)
                {
                    SendClientMessage(playerid,COLOR_GREEN,"Vous n'avez pas le rang requis pour faire cette commande!");
                    return 1;
                }
			    if(GetPlayerMoney(playerid) > 8499)
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "Vous aveez commandé le Pack d'Arme 6 ($8500), Allez le chercher au QG.");
			        OrderReady[playerid] = 6;
			        return 0;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY,"Vous n'avez pas assez d'argent pour cette commande!");
			        return 0;
			    }
			}
			else if ((strcmp("7", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("7")))
			{
			    if(PlayerInfo[playerid][pRank] < 4)
                {
                    SendClientMessage(playerid,COLOR_GREEN,"Vous n'avez pas le rang requis pour faire cette commande!");
                    return 1;
                }
			    if(GetPlayerMoney(playerid) > 8499)
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "Vous aveez commandé le Pack d'Arme 7 ($8500), Allez le chercher au QG.");
			        OrderReady[playerid] = 7;
			        return 0;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY,"Vous n'avez pas assez d'argent pour cette commande!");
			        return 0;
			    }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_WHITE, "|_____________________ Commandes Disponibles ______________________|");
			    if(PlayerInfo[playerid][pRank] >= 1) { SendClientMessage(playerid, COLOR_GREY, "|(1) ($5000 ) Rang 1 - 5: Couteau, Desert Eagle, MP5, Shotgun"); }
			    if(PlayerInfo[playerid][pRank] >= 2) { SendClientMessage(playerid, COLOR_GREY, "|(2) ($6000 ) Rang 2 - 5: Couteau, Desert Eagle, M4, MP5, Shotgun"); }
			    if(PlayerInfo[playerid][pRank] >= 2) { SendClientMessage(playerid, COLOR_GREY, "|(3) ($6000 ) Rang 2 - 5: Couteau, Desert Eagle, AK47, MP5, Shotgun"); }
			    if(PlayerInfo[playerid][pRank] >= 3) { SendClientMessage(playerid, COLOR_GREY, "|(4) ($8000) Rang 3 - 5: Couteau, Desert Eagle, M4, MP5, Shotgun, Sniper"); }
			    if(PlayerInfo[playerid][pRank] >= 3) { SendClientMessage(playerid, COLOR_GREY, "|(5) ($8000) Rang 3 - 5: Couteau, Desert Eagle, AK47, MP5, Shotgun, Sniper"); }
			    if(PlayerInfo[playerid][pRank] >= 4) { SendClientMessage(playerid, COLOR_GREY, "|(6) ($8500) Rang 4 - 5: Couteau, Desert Eagle, M4, MP5, Shotgun, Sniper"); }
			    if(PlayerInfo[playerid][pRank] >= 4) { SendClientMessage(playerid, COLOR_GREY, "|(7) ($8500) Rang 4 - 5: Couteau, Desert Eagle, AK47, MP5, Shotgun, Sniper"); }
			    SendClientMessage(playerid, COLOR_WHITE, "|__________________________________________________________________|");
			    return 0;
			}
		}
		else if ((strcmp("deconnection", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("deconnection")))
		{
		    SendClientMessage(playerid, COLOR_WHITE, "Vous vous êtes déconnecté de l'Agence et avez fermé votre portable.");
      		ConnectedToPC[playerid] = 0;
		    return 0;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_WHITE, "|___ Hitman Agency ___|");
		    SendClientMessage(playerid, COLOR_YELLOW2, "| - News");
		    SendClientMessage(playerid, COLOR_YELLOW2, "| - Contrats");
		    SendClientMessage(playerid, COLOR_YELLOW2, "| - DonnerContrat");
		    SendClientMessage(playerid, COLOR_YELLOW2, "| - Backup");
		    SendClientMessage(playerid, COLOR_YELLOW2, "| - Armes");
		    SendClientMessage(playerid, COLOR_YELLOW2, "| - Rangs");
		    SendClientMessage(playerid, COLOR_YELLOW2, "| - Deconnection");
		    SendClientMessage(playerid, COLOR_YELLOW2, "|");
			SendClientMessage(playerid, COLOR_WHITE, "|______________|00:00|");
		    return 0;
		}
	    return 0;
	}
	if(CallLawyer[playerid] == 111)
	{
	    new idx;
	    tmp = strtok(text, idx);
	    if ((strcmp("Oui", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("Oui")))
		{
		    GetPlayerName(playerid, sendername, sizeof(sendername));
		    format(string, sizeof(string), "* %s est en prison, et a besoin d'un Avocat. Allez au commisariat.", sendername);
	    	SendJobMessage(2, TEAM_AZTECAS_COLOR, string);
	    	SendJobMessage(2, TEAM_AZTECAS_COLOR, "Quand vous serez au commisariat, demander l'autorisation à un Officier /accepter avocat.");
	    	SendClientMessage(playerid, COLOR_LIGHTRED, "Un message à été envoyé a tous les Avocats disponibles, veuiller patienter.");
	    	WantLawyer[playerid] = 0;
			CallLawyer[playerid] = 0;
	    	return 0;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "Il n'y à pas d'Avocat disponible, le temps de prison commence.");
		    WantLawyer[playerid] = 0;
			CallLawyer[playerid] = 0;
		    return 0;
		}
	}
	if(TalkingLive[playerid] != 255)
	{
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(PlayerInfo[playerid][pMember] == 9)
		{
		    format(string, sizeof(string), "Interview %s: %s", sendername, text);
			OOCNews(COLOR_LIGHTBLUE, string);
		}
		else
		{
		    format(string, sizeof(string), "Interview %s: %s", sendername, text);
			OOCNews(COLOR_LIGHTBLUE, string);
		}
		return 0;
	}
	if(Mobile[playerid] != 255)
	{
		new idx;
		tmp = strtok(text, idx);
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(UnidentifedCall[playerid] == 1)
		{
		    format(string, sizeof(string), "Inconnu (telephone): %s", text);
		    SetPlayerChatBubble(playerid, text, COLOR_FADE1, 20.0, 10000);
		}
		else
		{
            UnderscoreToSpace( sendername );
			format(string, sizeof(string), "%s (telephone): %s", sendername, text);
			SetPlayerChatBubble(playerid, text, COLOR_FADE1, 20.0, 10000);
		}
		ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		//printf("callers line %d called %d caller %d",Mobile[Mobile[playerid]],Mobile[playerid],playerid);
		if(Mobile[playerid] == 914)
		{
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, TEAM_CYAN_COLOR, "Dispatch: Exusez moi, je ne comprend pas.");
				return 0;
			}
			new turner[MAX_PLAYER_NAME];
			new wanted[128];
			GetPlayerName(playerid, turner, sizeof(turner));
			SendClientMessage(playerid, TEAM_CYAN_COLOR, "Dispatch: Nous avons allerté toutes les Unités disponibles.");
			SendClientMessage(playerid, TEAM_CYAN_COLOR, "Merci de nous avoir prévenu de cet incident");
			format(wanted, sizeof(wanted), "Dispatch: A toutes les unité: Corespondant: %s",turner);
			SendTeamBeepMessage(1, TEAM_CYAN_COLOR, wanted);
			format(wanted, sizeof(wanted), "Dispatch: Incident: %s",text);
			SendTeamMessage(1, TEAM_CYAN_COLOR, wanted);
			new Float:trace_x, Float:trace_y, Float:trace_z;
			GetPlayerPos(playerid, trace_x, trace_y, trace_z);
			emdtrace = 1; emdtrace_x = trace_x; emdtrace_y = trace_y; emdtrace_z = trace_z;
			SendClientMessage(playerid, COLOR_GRAD2, "La ligne racroche...");
			Mobile[playerid] = 255;
			return 0;
		}
		if(Mobile[playerid] == 913)
		{
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_ALLDEPT, "Urgence: Exusez moi, je ne comprend pas.");
				return 0;
			}
			if ((strcmp("non", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("non")))
			{
				new turner[MAX_PLAYER_NAME];
				new wanted[128];
				GetPlayerName(playerid, turner, sizeof(turner));
				SendClientMessage(playerid, COLOR_DBLUE, "Police: Nous avons allerté toutes les unités disponibles.");
				SendClientMessage(playerid, COLOR_DBLUE, "Merci de nous avoir prévenu de ce crime");
				format(wanted, sizeof(wanted), "QG: A toutes les unités: Corespondant: %s",turner);
				SendFamilyMessage(1, COLOR_DBLUE, wanted);
				format(wanted, sizeof(wanted), "QG: Crime: %s, Suspet: Inconnu",PlayerCrime[playerid][pAccusing]);
				SendFamilyMessage(1, COLOR_DBLUE, wanted);
				new Float:trace_x, Float:trace_y, Float:trace_z;
				GetPlayerPos(playerid, trace_x, trace_y, trace_z);
				pdtrace = 1; pdtrace_x = trace_x; pdtrace_y = trace_y; pdtrace_z = trace_z;
				SendClientMessage(playerid, COLOR_GRAD2, "La ligne racroche...");
				Mobile[playerid] = 255;
				return 0;
			}
			new badguy;
			//badguy = strval(tmp);
			badguy = ReturnUser(tmp);
			if (IsPlayerConnected(badguy))
			{
			    if(badguy != INVALID_PLAYER_ID)
			    {
					if (gTeam[badguy] == 2 || gTeam[badguy] == 1)
					{
						SendClientMessage(playerid, COLOR_DBLUE, "Police: Vous devrez contacter les affaires internes. C'est une ligne d'urgence");
						SendClientMessage(playerid, COLOR_GRAD2, "La ligne racroche...");
						Mobile[playerid] = 255;
						return 0;
					}
					if (WantedPoints[badguy] > 0)
					{
						SendClientMessage(playerid, COLOR_DBLUE, "Police: Toutes les unités sont déjà sur cette affaire");
						SendClientMessage(playerid, COLOR_DBLUE, "Thank you for reporting this crime");
						SendClientMessage(playerid, COLOR_GRAD2, "La ligne racroche...");
						Mobile[playerid] = 255;
						return 0;
					}
					if (badguy == playerid)
					{
						SendClientMessage(playerid, COLOR_DBLUE, "Police Dispatch: Dont Fool Around, This is an emergency line.");
						SendClientMessage(playerid, COLOR_GRAD2, "La ligne racroche...");
						Mobile[playerid] = 255;
						return 0;
					}
					SendClientMessage(playerid, COLOR_DBLUE, "Police: Toutes les unités sont déjà prévenue.");
					SendClientMessage(playerid, COLOR_DBLUE, "Merci de nous avoir prévenu de ce crime");
					new Float:trace_x, Float:trace_y, Float:trace_z;
					GetPlayerPos(playerid, trace_x, trace_y, trace_z);
					pdtrace = 1; pdtrace_x = trace_x; pdtrace_y = trace_y; pdtrace_z = trace_z;
					SetPlayerCriminal(badguy,playerid, PlayerCrime[playerid][pAccusing]);
					if(WantedPoints[badguy] > 0) { } else { WantedPoints[badguy] += 2; }
					SendClientMessage(playerid, COLOR_GRAD2, "La ligne racroche...");
					Mobile[playerid] = 255;
					return 0;
				}//invalid id
				return 0;
			}//not connected
			else
			{
				format(string, sizeof(string), "Police: Je n'ai aucune information sur %s, êtes vous sûr que ce soit le bon nom?",tmp);
				SendClientMessage(playerid, COLOR_DBLUE, string);
				return 0;
			}
		}
		if(Mobile[playerid] == 912)
		{
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_ALLDEPT, "Urgence: Exusez moi, je ne comprend pas.");
				return 0;
			}
			strmid(PlayerCrime[playerid][pAccusing], text, 0, strlen(text), 255);
			SendClientMessage(playerid, COLOR_DBLUE, "Commisariat: Si vous connaisez le nom du criminel, dites le nous, ou répondez non.");
			Mobile[playerid] = 913;
			return 0;
		}
		if(Mobile[playerid] == 911)
		{
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_ALLDEPT, "Urgence: Excusez moi, je ne comprend pas, Police ou Medecin ?");
				return 0;
			}
			else if ((strcmp("police", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("police")))
			{
				SendClientMessage(playerid, COLOR_ALLDEPT, "Urgence: J'appele la Police, tenez bon!.");
				Mobile[playerid] = 912;
				SendClientMessage(playerid, COLOR_DBLUE, "QG: Décrivez moi le crime, et où ça se passe s'il vous plait.");
				return 0;
			}
			else if ((strcmp("medecin", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("medecin")))
			{
				SendClientMessage(playerid, COLOR_ALLDEPT, "Urgence: J'appele un Medecin, tenez bon!.");
				Mobile[playerid] = 914;
				SendClientMessage(playerid, TEAM_CYAN_COLOR, "Dispatch: Decrivez moi l'incident s'il vous plait.");
				return 0;
			}
			else
			{
				SendClientMessage(playerid, COLOR_ALLDEPT, "Urgence: Exusez moi, je ne comprend pas, Police ou Medecin?");
				return 0;
			}
		}
		if(Mobile[playerid] == 3900)
		{
			SendFamilyMessage(9, COLOR_GREEN, "Vous avez un nouveau message:");
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "[ID:%d] %s : %s", playerid, sendername, text);
			SetPlayerChatBubble(playerid, text, COLOR_FADE1, 20.0, 10000);
			SendFamilyMessage(9, COLOR_GREEN, string);
			SendClientMessage(playerid, COLOR_GREEN, "ABC Studio: Merci pour votre information!");
			SendClientMessage(playerid, COLOR_GRAD2, "La ligne racroche...");
			Mobile[playerid] = 255;
			return 0;
		}
		/*if(Mobile[playerid] == 1180)
		{
		    if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GREEN, "Advertisement business: What would you like to advertise?");
				return 0;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(text);
			while ((idx < length) && (text[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = text[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if ((!adds) && (PlayerInfo[playerid][pAdmin] < 1))
			{
				format(string, sizeof(string), "   Please try again later %d seconds between Advertisements !",  (addtimer/1000));
				SendClientMessage(playerid, COLOR_GRAD2, string);
				return 1;

			}
			new payout = idx * 10;
			if(GetPlayerMoney(playerid) < payout + 200)
	        {
	            format(string, sizeof(string), " You used %d characters which cost $%d, you don't have enough.", offset, payout);
	            SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	            return 1;
	        }
	        SafeGivePlayerMoney(playerid, - payout);
	        SafeGivePlayerMoney(playerid, - 200);
			SBizzInfo[7][sbTill] += payout + 200;
			ExtortionSBiz(7, payout + 200);
			format(string, sizeof(string), "[Advert] %s, Phone: %d",  result, PlayerInfo[playerid][pPnumber]);
			OOCNews(TEAM_GROVE_COLOR,string);
			format(string, sizeof(string), "~r~Paid $%d~n~~w~Message contained: %d Characters~n~~w~Plus ~g~200$~w~ for ad through phone", payout, idx);
			GameTextForPlayer(playerid, string, 5000, 1);
			if (PlayerInfo[playerid][pAdmin] < 1){SetTimer("AddsOn", addtimer, 0);adds = 0;}
		}*/
		if(IsPlayerConnected(Mobile[playerid]))
		{
		    if(Mobile[Mobile[playerid]] == playerid)
		    {
				if(PlayerInfo[Mobile[playerid]][pSpeaker] == 1)
				{
					ProxDetector(20.0, Mobile[playerid], string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				}
				else
				{
				    SendClientMessage(Mobile[playerid], COLOR_YELLOW,string);
				}
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_YELLOW,"Il n'y à personne ici.");
		}
		return 0;
	}
	if (BusShowLocation[playerid][0] == 1)
	{
	    new idx;
	    tmp = strtok(text, idx);
	    if ((strcmp("Oui", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("Oui")))
		{
			SetPlayerCheckpoint(playerid, BusShowLocation[playerid][1], BusShowLocation[playerid][2], BusShowLocation[playerid][3], 3.0);
			SendClientMessage(playerid, COLOR_YELLOW, "La position à été marquée sur votre carte ( marqueur rouge ), vous feriez mieux de vous dépêcher!");
			BusShowLocation[playerid][0] = 0;
			BusShowLocationC[playerid] = 1;
			return 0;
		}
		else
		{
			BusShowLocation[playerid][0] = 0;
			return 0;
		}
	}
	if (realchat)
	{
	    if(gPlayerLogged[playerid] == 0)
	    {
	        return 0;
      	}
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(!IsPlayerInAnyVehicle(playerid))
		{
			if(PlayerInfo[playerid][pMaskuse] == 1)
			{
				format(string, sizeof(string), "Inconnu : %s", text);
				ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				SetPlayerChatBubble(playerid, text, COLOR_FADE1, 20.0, 10000);
			}
			else
			{
                UnderscoreToSpace( sendername );
		    	format(string, sizeof(string), "%s : %s", sendername, text);
		    	ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		    	SetPlayerChatBubble(playerid, text, COLOR_FADE1, 20.0, 10000);
			}
		}
		else
		{
		    new carid = GetPlayerVehicleID(playerid);
		    new pveh = GetVehicleModel(GetPlayerVehicleID(playerid));
		    if(IsABike(carid) || IsAOBike(carid) || IsAPizzabike(carid) || IsAPlane(carid) || IsABoat(carid) || IsASweeper(carid) || IsAHarvest(carid) || IsADrugHarvest(carid) || IsATank(carid) || pveh == 523 || pveh == 480 || pveh == 567 || pveh == 533 || pveh == 555 || pveh == 539 || pveh == 572 || pveh == 571 || pveh == 530 || pveh == 457 || pveh == 575 || pveh == 536 || pveh == 424)
		    {
		        if(PlayerInfo[playerid][pMaskuse] == 1)
				{
					format(string, sizeof(string), "Inconnu : %s", text);
					ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
					SetPlayerChatBubble(playerid, text, COLOR_FADE1, 20.0, 10000);
				}
				else
				{
                    UnderscoreToSpace( sendername );
		    		format(string, sizeof(string), "%s : %s", sendername, text);
		    		ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		    		SetPlayerChatBubble(playerid, text, COLOR_FADE1, 20.0, 10000);
				}
		    }
		    else
		    {
		    	if(VehicleWindows[GetPlayerVehicleID(playerid)] == 0)
		    	{
		    		if(PlayerInfo[playerid][pMaskuse] == 1)
					{
						format(string, sizeof(string), "(Fenêtre Fermée) Inconnu : %s", text);
						ProxDetector(10.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
					}
					else
					{
                        UnderscoreToSpace( sendername );
		    			format(string, sizeof(string), "(Fenêtre Fermée) %s : %s", sendername, text);
		    			ProxDetector(10.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
					}
				}
				else
				{
			    	if(PlayerInfo[playerid][pMaskuse] == 1)
					{
						format(string, sizeof(string), "(Fenêtre Ouverte) Inconnu : %s", text);
						ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
					}
					else
					{
                        UnderscoreToSpace( sendername );
		    			format(string, sizeof(string), "(Fenêtre Ouverte) %s : %s", sendername, text);
		    			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
					}
				}
			}
		}
		return 0;
	}
	return 1;
}

public SetCamBack(playerid)
{
    if(IsPlayerConnected(playerid))
    {
		new Float:plocx,Float:plocy,Float:plocz;
		GetPlayerPos(playerid, plocx, plocy, plocz);
		SetPlayerPos(playerid, -1863.15, -21.6598, 1060.15); // Warp the player
		SetPlayerInterior(playerid,14);
	}
}

public AddsOn()
{
	adds=1;
	return 1;
}

public BackupClear(playerid, calledbytimer)
{
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1)
		{
			if (PlayerInfo[playerid][pRequestingBackup] == 1)
			{
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
						if(PlayerInfo[i][pMember] == 1||PlayerInfo[i][pLeader] == 1)
						{
							SetPlayerMarkerForPlayer(i, playerid, TEAM_HIT_COLOR);
						}
					}
				}
				if (calledbytimer != 1)
				{
					SendClientMessage(playerid, TEAM_BLUE_COLOR, "Votre demande d'assistance à été suprimée.");
				}
				else
				{
					SendClientMessage(playerid, TEAM_BLUE_COLOR, "Votre demande d'assistance à été suprimée automatiquement.");
				}
				PlayerInfo[playerid][pRequestingBackup] = 0;
			}
			else
			{
				if (calledbytimer != 1)
				{
					SendClientMessage(playerid, COLOR_DARKNICERED, "Vous n'avez pas fait de demande d'assistance!");
				}
			}
		}
		else
		{
			if (calledbytimer != 1)
			{
				SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas policier!");
			}
		}
	}
	return 1;
}

public ResetRoadblockTimer()
{
	new lol = roadblocktimer;
	if(roadblocktimer == lol)
	{
		roadblocktimer = 0;
	}
	return 1;
}

public RemoveRoadblock(playerid)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PlayerInfo[i][pMember] == 1 || PlayerInfo[i][pLeader] == 1)
			{
				DisablePlayerCheckpoint(i);
			}
		}
	}
	DestroyStreamObject(PlayerInfo[playerid][pRoadblock]);
	PlayerInfo[playerid][pRoadblock] = 0;
	return 1;
}

public IsPlayerInArea(playerid, Float:minx, Float:maxx, Float:miny, Float:maxy)
{
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);
    if (x > minx && x < maxx && y > miny && y < maxy) return 1;
    return 0;
}

public AdvertiseToPlayersAtBusStop(Float:stopX, Float:stopY, Float:stopZ, eastorwest)
{
	for (new i; i<=MAX_PLAYERS; i++)
	{
		if (IsPlayerConnected(i) && BusrouteWest[i][0] == 0 && BusrouteEast[i][0] == 0)
		{
			if (PlayerToPoint(100, i, stopX, stopY, stopZ))
			{
				SendClientMessage(i, TEAM_AZTECAS_COLOR, "Un bus est près un arrêt proche. Le trajet est comme suit:");
				if (eastorwest == 0) SendBusRoute(i, 0);
				else SendBusRoute(i, 1);
				SendClientMessage(i, TEAM_AZTECAS_COLOR, "Voulez vous voir la position de l'arret? (Oui/non)");
				BusShowLocation[i][0] = 1;
				BusShowLocation[i][1] = stopX;
				BusShowLocation[i][2] = stopY;
				BusShowLocation[i][3] = stopZ;
			}
		}
	}
	return 1;
}

public SendBusRoute(playerid, eastorwest)
{
	if (eastorwest == 0)
	{
		// East
		SendClientMessage(playerid, COLOR_LIGHT_BLUE, "BDépôt de Bus >> Airport >> Willowfield Factory >> Loco >>");
		SendClientMessage(playerid, COLOR_LIGHT_BLUE, "6 Street Plaza >> 10 Green Bottles >> Pigpen >> Golden Palm >>");
		SendClientMessage(playerid, COLOR_LIGHT_BLUE, "Jefferson Motel >> Glen Park >> Dépôt de Bus <<");
	}
	else
	{
		// West
		SendClientMessage(playerid, COLOR_LIGHT_BLUE, "Dépôt de Bus >> Alhambra >> Glen Park >> Vinewood Burger >>");
		SendClientMessage(playerid, COLOR_LIGHT_BLUE, "Vice Theater >> Bank >> Rodeo >> Sana Maria Beach >> Verona Beach >>");
		SendClientMessage(playerid, COLOR_LIGHT_BLUE, "Pershing Square >> Dépôt de Bus <<");
	}
	return 1;
}

public IsInBusrouteZone(playerid)
{
	if (IsPlayerInArea(playerid, 1722.3599, 2901.8652, -2694.5417, -904.3515)) return 0; // east
	else if (IsPlayerInArea(playerid, 127.4722, 1722.3599, -2694.5417, -904.3515)) return 1; // west
	return 1;
}

public BusrouteEnd(playerid, vehicleid)
{
	if (BusrouteEast[playerid][0] != 0 || BusrouteWest[playerid][0] != 0)
	{
		SendClientMessage(playerid, COLOR_BLUE, "Parcourt Fini.");
		GameTextForPlayer(playerid, "~r~Parcourt Fini", 5000, 3);
		PlayerPlaySound(playerid, 1055, 0.0, 0.0, 0.0);
	}
	DisablePlayerCheckpoint(playerid);
	if (vehicleid != 0) SetVehicleToRespawn(vehicleid);
	BusrouteEast[playerid][0] = 0;
	BusrouteEast[playerid][1] = 0;
	//BusrouteEast[playerid][2] = 0;
	BusrouteWest[playerid][0] = 0;
	BusrouteWest[playerid][1] = 0;
	//BusrouteWest[playerid][2] = 0;
	return 1;
}

public CheckForWalkingTeleport(playerid) // only put teleports ON FOOT here, use another function for vehicle ones - LordMan
{
	/*
	 *  HOW TO USE THIS FUNCTION:
	 *
	 *  Just use your normal PlayerToPoint functions but make them use PlayerToPointStripped instead.
	 *  Use the arguments cx,cy,cz at the end of each call (look at the others for an example).
	 *
	 */
	new Float:cx, Float:cy, Float:cz;
	GetPlayerPos(playerid, cx, cy, cz);

 //--------Voici les entrée des 24/7---------------------------------------------
    if (PlayerToPointStripped(1, playerid, 1122.9399,-2037.0083,69.8939, cx,cy,cz))
	{
		// Corleone Enter
		SetPlayerPos(playerid, 1264.7614,-781.3372,1091.9063);
		GameTextForPlayer(playerid, "~w~Corleone HQ",5000,1);
		SetPlayerInterior(playerid,5);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pLocal] = 103;
		PlayerInfo[playerid][pInt] = 5;
	}
	else if (PlayerToPointStripped(1, playerid, 1261.1471,-785.4453,1091.9063, cx,cy,cz))
	{
		// Corleone Exit
		SetPlayerPos(playerid, 1126.4570,-2037.1461,69.8836);
		GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pLocal] = 103;
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPointStripped(2.0, playerid,1727.0645,-1636.1204,20.2153, cx,cy,cz))
	{ // ANPE Enter
		SetPlayerPos(playerid, 1726.7281,-1641.0282,20.2245);
		GameTextForPlayer(playerid, "~y~ANPE",5000,3);
		SendClientMessage(playerid, COLOR_YELLOW, "Liste des Jobs dispobibles a l'A.N.P.E :");
		SendClientMessage(playerid, COLOR_WHITE, "Detective -  Avocat - Serveur - Mecanicien - Garde du Corp - Boxeur");
		SendClientMessage(playerid, COLOR_WHITE, "Chauffeur de Taxi - Chauffeur de Bus - Livreur de Journaux");
		SendClientMessage(playerid, COLOR_WHITE, "Cammioneur - Livreur de Pizza - Fermier - Balayeur de Rue - Eboueur - Ouvrier");
		SendClientMessage(playerid, COLOR_WHITE, "Conducteur de Train - Pilote de Ligne");
		SetPlayerInterior(playerid,18);
		PlayerInfo[playerid][pInt] = 18;
	}
	else if (PlayerToPointStripped(2, playerid, 1726.9630,-1638.1464,20.2231, cx,cy,cz))
	{
		// ANPE Exit
		SetPlayerPos(playerid, 1728.0148,-1629.1830,20.2136);
		GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pLocal] = 103;
		PlayerInfo[playerid][pInt] = 0;
	}
	if (PlayerToPointStripped(1, playerid, 2233.2068,-1333.2169,23.9815, cx,cy,cz))
	{
		// Eglise Enter
		SetPlayerPos(playerid, 1964.0393,-352.7712,1092.9454);
		GameTextForPlayer(playerid, "~w~Eglise de L.A",5000,1);
		SetTimerEx("chargement",2000,0,"i",playerid);
		TogglePlayerControllable(playerid, 0);
		SetPlayerInterior(playerid,1);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pLocal] = 103;
		PlayerInfo[playerid][pInt] = 1;
	}
	else if (PlayerToPointStripped(1, playerid, 1964.0740,-349.7452,1092.9454, cx,cy,cz))
	{
		// Eglise Exit
		SetPlayerPos(playerid, 2229.5237,-1332.8982,23.9844);
		GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pLocal] = 103;
		PlayerInfo[playerid][pInt] = 0;
	}
	if (PlayerToPointStripped(1, playerid, 1303.1649,-980.2634,38.3527, cx,cy,cz))
	{
		// C.I.A Enter
		SetPlayerPos(playerid, 246.5013,112.4106,1003.2188);
		GameTextForPlayer(playerid, "~w~C.I.A HQ",5000,1);
		SetPlayerInterior(playerid,10);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pLocal] = 103;
		PlayerInfo[playerid][pInt] = 10;
	}
	else if (PlayerToPointStripped(1, playerid, 246.4302,107.4845,1003.2188, cx,cy,cz))
	{
		// C.I.A Exit
		SetPlayerPos(playerid, 1294.2954,-980.6455,38.3935);
		GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pLocal] = 103;
		PlayerInfo[playerid][pInt] = 0;
	}
	if (PlayerToPointStripped(1, playerid, 1219.2813,-1811.9434,16.5938, cx,cy,cz))
	{
		// Ecole De Langues Enter
		SetPlayerPos(playerid, 1207.9841,-901.9551,1094.1084);
		GameTextForPlayer(playerid, "~w~Ecole De Langues",5000,1);
		SetTimerEx("chargement",2000,0,"i",playerid);
		TogglePlayerControllable(playerid, 0);
		SetPlayerInterior(playerid,3);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pLocal] = 103;
		PlayerInfo[playerid][pInt] = 3;
	}
	else if (PlayerToPointStripped(1, playerid, 1207.8934,-903.6239,1094.1084, cx,cy,cz))
	{
		// Ecole De Langues Exit
		SetPlayerPos(playerid, 1219.2831,-1814.6205,16.5938);
		GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pLocal] = 103;
		PlayerInfo[playerid][pInt] = 0;
	}
    /*if (PlayerToPointStripped(1, playerid,2232.9993,-1159.7517,25.8906, cx,cy,cz))
	{
		// Jefferson Motel Enter
		SetPlayerPos(playerid, 2217.8687,-1150.7157,1025.7969);
		GameTextForPlayer(playerid, "~w~Jefferson Motel",5000,1);
		SetPlayerInterior(playerid,15);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pLocal] = 103;
		PlayerInfo[playerid][pInt] = 15;
	}
	else if (PlayerToPointStripped(1, playerid, 2214.8450,-1150.4794,1025.7969, cx,cy,cz))
	{
		// Jefferson Motel Exit
		SetPlayerPos(playerid, 2229.6143,-1159.7418,25.8071);
		GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pLocal] = 103;
		PlayerInfo[playerid][pInt] = 0;
	}*/
	if (PlayerToPointStripped(1, playerid,2315.4529,0.3478,26.7422, cx,cy,cz))
	{
		// Banque braquage
		SetPlayerPos(playerid, 2157.3953,1598.8130,999.9725);
		GameTextForPlayer(playerid, "~w~Salle des Coffres",5000,1);
		SendClientMessage(playerid, COLOR_GREEN, "Espace reservé au personnel, partez d'ici.");
		SetPlayerInterior(playerid,1);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pLocal] = 103;
		PlayerInfo[playerid][pInt] = 1;
	}
	else if (PlayerToPointStripped(1, playerid,2157.6169,1596.9044,999.9712, cx,cy,cz))
	{
		// Banque braquage
		SetPlayerPos(playerid, 2315.6575,-1.6000,26.7422);
		GameTextForPlayer(playerid, "~w~Banque",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pLocal] = 103;
		PlayerInfo[playerid][pInt] = 0;
	}
	if(PlayerToPointStripped(1, playerid,1554.9537,-1675.6584,16.1953, cx,cy,cz))
	{//LSPD Entrance
		GameTextForPlayer(playerid, "~w~Commisariat", 5000, 1);
		SetPlayerInterior(playerid, 6);
		SetPlayerPos(playerid,246.7079,66.2239,1003.6406);
		PlayerInfo[playerid][pInt] = 6;
	}
	else if(PlayerToPointStripped(1, playerid,246.5325,62.4251,1003.6406, cx,cy,cz))
	{//LSPD Exit
		GameTextForPlayer(playerid, "~w~Los Santos", 5000, 1);
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid,1552.3231,-1674.6780,16.1953);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPointStripped(1.0, playerid,488.2531,-82.7632,998.7578, cx,cy,cz))
	{
		//Misty/10 Green Toilets
		SetPlayerPos(playerid,2277.5942,-1139.8883,1050.8984);
		GameTextForPlayer(playerid, "~w~Restroom", 5000, 3);
		SetPlayerInterior(playerid,11);
		PlayerInfo[playerid][pInt] = 11;
	}
	else if (PlayerToPointStripped(2.0, playerid,2280.0476,-1139.5413,1050.8984, cx,cy,cz))
	{
		//Misty/10 Green Toilets
		SetPlayerPos(playerid,490.9059,-81.4256,998.7578);
		GameTextForPlayer(playerid, "~w~Ten Green Bottles", 5000, 3);
		SetPlayerInterior(playerid,11);
		PlayerInfo[playerid][pInt] = 11;
	}
	else if(PlayerToPointStripped(1, playerid,1352.1194,-1759.2534,13.5078, cx,cy,cz))
	{//24/7 near PD Entrance
		GameTextForPlayer(playerid, "~w~24/7", 5000, 1);
		SendClientMessage(playerid, COLOR_WHITE, "COMMANDE: Tappez /acheter pour acheter ce dont vous avez besoin.");
		SetPlayerInterior(playerid, 6);
		SetPlayerPos(playerid,-26.6916,-55.7149,1003.5469);
		PlayerInfo[playerid][pInt] = 6;
	}
	else if(PlayerToPointStripped(1, playerid,-27.3919, -58.2529, 1003.5469, cx,cy,cz))
	{//24/7 near PD Exit
		GameTextForPlayer(playerid, "~w~Une 2eme Chance", 5000, 1);
		//SendClientMessage(playerid, COLOR_WHITE, "COMMANDE: Tappez /acheter pour acheter ce dont vous avez besoin.");
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid,1352.3282,-1755.4298,13.3542);
		PlayerInfo[playerid][pInt] = 0;
    }
	else if(PlayerToPointStripped(1, playerid,-1862.306, -145.4717, 11.89841, cx,cy,cz))
	{// the crip'z HQ
		GameTextForPlayer(playerid, "~w~The Crip'z HQ", 5000, 1);
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid,-2496.0061, -1693.5202, 1014.7421);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if(PlayerToPointStripped(1, playerid,1833.6124,-1842.4968,13.5781, cx,cy,cz))
	{//24/7 near 8-ball entrance Unity / Gare
		GameTextForPlayer(playerid, "~w~24/7", 5000, 1);
		SendClientMessage(playerid, COLOR_WHITE, "COMMANDE: Tappez /acheter pour acheter ce dont vous avez besoin.");
		SetPlayerInterior(playerid, 18);
		SetPlayerPos(playerid,-30.9467,-89.6096,1003.5469);
		PlayerInfo[playerid][pInt] = 18;
	}
	else if(PlayerToPointStripped(1, playerid,-30.9299,-92.0114,1003.5469, cx,cy,cz))
	{//24/7 near 8-ball exit Unity / Gare
		if(GetPlayerVirtualWorld(playerid) == 0)
		{
			GameTextForPlayer(playerid, "~w~Los Santos", 5000, 1);
			//SendClientMessage(playerid, COLOR_WHITE, "COMMANDE: Tappez /acheter pour acheter ce dont vous avez besoin.");
			SetPlayerInterior(playerid, 0);
			SetPlayerPos(playerid,1831.5413,-1843.3785,13.5781);
			PlayerInfo[playerid][pInt] = 0;
		}
		else if(GetPlayerVirtualWorld(playerid) == 2)
		{
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVirWorld] = 0;
			GameTextForPlayer(playerid, "~w~Los Santos", 5000, 1);
			SetPlayerInterior(playerid, 0);
			SetPlayerPos(playerid,1315.7769,-901.4099,39.5781);
			PlayerInfo[playerid][pInt] = 0;
		}
	}
	else if(PlayerToPointStripped(1, playerid,1315.4581,-897.6843,39.5781, cx,cy,cz))
	{//24/7 vinewood
		SetPlayerVirtualWorld(playerid, 2);
		PlayerInfo[playerid][pVirWorld] = 2;
		GameTextForPlayer(playerid, "~w~24/7", 5000, 1);
		SendClientMessage(playerid, COLOR_WHITE, "COMMANDE: Tappez /acheter pour acheter ce dont vous avez besoin.");
		SetPlayerInterior(playerid, 18);
		SetPlayerPos(playerid,-30.9467,-89.6096,1003.5469);
		PlayerInfo[playerid][pInt] = 18;
	}
	else if(PlayerToPointStripped(1, playerid,1836.4064,-1682.4403,13.3493, cx,cy,cz))
	{//Alhambra Entrance
		GameTextForPlayer(playerid, "~w~Alhambra", 5000, 1);
		SetPlayerInterior(playerid, 17);
		SetPlayerPos(playerid,493.3891,-22.7212,1000.6797);
		PlayerInfo[playerid][pInt] = 17;
	}
	else if(PlayerToPointStripped(1, playerid,493.4393,-24.9169,1000.6719, cx,cy,cz))
	{//Alhambra Exit
		GameTextForPlayer(playerid, "~w~Los Santos", 5000, 1);
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid,1834.4000,-1681.7500,13.4331);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPointStripped(1, playerid,2315.4529,0.3478,26.7422, cx,cy,cz))
	{
		// Banque braquage
		SetPlayerPos(playerid, 2157.3953,1598.8130,999.9725);
		GameTextForPlayer(playerid, "~w~Banque de Los Santos",5000,1);
		SendClientMessage(playerid, COLOR_YELLOW, "Securité : Il est interdit de rester ici sous peine de sanction juridique.");
		SetPlayerInterior(playerid,1);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pLocal] = 103;
		PlayerInfo[playerid][pInt] = 1;
	}
	else if (PlayerToPointStripped(1, playerid,2157.6169,1596.9044,999.9712, cx,cy,cz))
	{
		// Banque braquage
		SetPlayerPos(playerid, 2315.6575,-1.6000,26.7422);
		GameTextForPlayer(playerid, "~w~Banque",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pLocal] = 103;
		PlayerInfo[playerid][pInt] = 0;
	}
	else if(PlayerToPointStripped(1, playerid,2310.0183,-1643.4669,14.8270, cx,cy,cz))
	{//10 green
		GameTextForPlayer(playerid, "~w~Ten Green Bottles", 5000, 1);
		SetPlayerInterior(playerid, 11);
		SetPlayerPos(playerid,502.0531,-70.2137,998.7578);
		PlayerInfo[playerid][pInt] = 11;
	}
	else if(PlayerToPointStripped(1, playerid,501.8708,-67.5820,998.7578, cx,cy,cz))
	{//Some teleports are fucked up but they are working 10 green exit
		GameTextForPlayer(playerid, "~w~Los Santos", 5000, 1);
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid,2307.0027,-1645.2213,14.6882);
		OnPlayerExitFood(playerid); // ?
		PlayerInfo[playerid][pInt] = 0;
	}
	else if(PlayerToPointStripped(1, playerid,2244.3423,-1665.5542,15.4766, cx,cy,cz))
	{//Binco next to 10 green
		GameTextForPlayer(playerid, "~w~Binco", 5000, 1);
		SendClientMessage(playerid, COLOR_WHITE, "BINCO: Tappez /vetement pour changer vos vêtements et 'suivant' pour passer au suivant.");
		SetPlayerInterior(playerid, 15);
		SetPlayerPos(playerid,207.7336,-108.6231,1005.1328);
		PlayerInfo[playerid][pInt] = 15;
	}
	else if(PlayerToPointStripped(1, playerid,207.7662,-111.2663,1005.1328, cx,cy,cz))
	{//Some teleports are fucked up but they are working
		GameTextForPlayer(playerid, "~w~Los Santos", 5000, 1);
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid,2245.2778,-1661.1738,15.4690);
		OnPlayerExitFood(playerid); // ?
		PlayerInfo[playerid][pInt] = 0;
	}
	else if(PlayerToPointStripped(1, playerid,2229.9011,-1721.2582,13.5613, cx,cy,cz))
	{//Ganton Gym
		GameTextForPlayer(playerid, "~w~Gym", 5000, 1);
		SetPlayerInterior(playerid, 5);
		SetPlayerPos(playerid,771.9399,-2.2574,1000.7292);
		PlayerInfo[playerid][pInt] = 5;
	}
	else if(PlayerToPointStripped(1, playerid,772.3594,-5.5157,1000.7286, cx,cy,cz))
	{//Some teleports are fucked up but they are working Ganton Gym Exit
		GameTextForPlayer(playerid, "~w~Los Santos", 5000, 1);
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid,2225.6699,-1725.3134,13.5586);
		OnPlayerExitFood(playerid); // ?
		PlayerInfo[playerid][pInt] = 0;
	}
	else if(PlayerToPointStripped(1, playerid,2421.4998,-1219.2438,25.5617, cx,cy,cz))
	{//Pigpen
		GameTextForPlayer(playerid, "~w~The Pig Pen", 5000, 1);
		SetPlayerInterior(playerid, 2);
		SetPlayerPos(playerid,1205.0803,-9.9519,1000.9219);
		PlayerInfo[playerid][pInt] = 2;
	}
	else if(PlayerToPointStripped(1, playerid,1204.8462,-13.8521,1000.9219, cx,cy,cz))
	{//Some teleports are fucked up but they are working Pigpen Exit
		GameTextForPlayer(playerid, "~w~Los Santos", 5000, 1);
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid,2419.5559,-1226.5612,24.9379);
		OnPlayerExitFood(playerid); // ?
		PlayerInfo[playerid][pInt] = 0;
	}
    else if(PlayerToPointStripped(1, playerid,2419.9941,-1509.5865,24.0000, cx,cy,cz))
	{//Cluckin Bell near pigpen
		OnPlayerEnterFood(playerid, 1);
	}
	else if(PlayerToPointStripped(1, playerid,364.0594,-11.7518,1001.8516, cx,cy,cz))
	{//Some teleports are fucked up but they are working
		if(GetPlayerVirtualWorld(playerid) == 0)
		{
			GameTextForPlayer(playerid, "~w~Los Santos", 5000, 1);
			SetPlayerInterior(playerid, 0);
			SetPlayerPos(playerid,2423.8145,-1510.2896,23.9922);
			PlayerInfo[playerid][pInt] = 0;
		}//cluckin bell near 10 green
		else if(GetPlayerVirtualWorld(playerid) == 2)
		{
			GameTextForPlayer(playerid, "~w~Los Santos", 5000, 1);
			SetPlayerInterior(playerid, 0);
			SetPlayerPos(playerid,2398.5508,-1894.6324,13.3828);
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVirWorld] = 0;
			PlayerInfo[playerid][pInt] = 0;
		}//cluckin bell marina
		else if(GetPlayerVirtualWorld(playerid) == 1)
		{
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVirWorld] = 0;
			GameTextForPlayer(playerid, "~w~Los Santos", 5000, 1);
			SetPlayerInterior(playerid, 0);
			SetPlayerPos(playerid,923.8998,-1352.9694,13.3768);
			PlayerInfo[playerid][pInt] = 0;
		}
		OnPlayerExitFood(playerid); // ?
		return 1;
	}
	else if(PlayerToPointStripped(1, playerid,2398.6240,-1899.2014,13.5469, cx,cy,cz))
	{//Cluckin Bell near 10 green
		SetPlayerVirtualWorld(playerid, 2);
		PlayerInfo[playerid][pVirWorld] = 2;
		OnPlayerEnterFood(playerid, 1);
	}
	else if(PlayerToPointStripped(1, playerid,810.4849,-1616.2451,13.5469, cx,cy,cz))
	{//Marina Burger shot
		OnPlayerEnterFood(playerid, 2);
	}
	else if(PlayerToPointStripped(1, playerid,362.8835,-75.1787,1001.5078, cx,cy,cz))
	{//Some teleports are fucked up but they are working
		if(GetPlayerVirtualWorld(playerid) == 0)
		{
			GameTextForPlayer(playerid, "~w~Los Santos", 5000, 1);
			SetPlayerInterior(playerid, 0);
			SetPlayerPos(playerid,815.5034,-1616.7700,13.7521);
			PlayerInfo[playerid][pInt] = 0;
		}
		else if(GetPlayerVirtualWorld(playerid) == 1)// vinewood burger shot
		{
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVirWorld] = 0;
			GameTextForPlayer(playerid, "~w~Los Santos", 5000, 1);
			SetPlayerInterior(playerid, 0);
			SetPlayerPos(playerid,1200.8680,-921.9525,43.0104);
			PlayerInfo[playerid][pInt] = 0;
		}
		OnPlayerExitFood(playerid);
		return 1;
	}
	else if(PlayerToPointStripped(1, playerid,928.9110,-1352.9958,13.3438, cx,cy,cz))
	{//Marina Cluckin bell
		SetPlayerVirtualWorld(playerid, 1);
		PlayerInfo[playerid][pVirWorld] = 1;
		OnPlayerEnterFood(playerid, 1);
	}
	else if(PlayerToPointStripped(1, playerid,1199.2477,-918.1447,43.1233, cx,cy,cz))
	{//Vinewood Burger shot
		SetPlayerVirtualWorld(playerid, 1);
		PlayerInfo[playerid][pVirWorld] = 1;
		OnPlayerEnterFood(playerid, 2);
	}
	else if(PlayerToPointStripped(1, playerid,1000.5861,-919.8832,42.3281, cx,cy,cz))
	{//24/7 gas station
		GameTextForPlayer(playerid, "~w~24/7", 5000, 1);
		SendClientMessage(playerid, COLOR_WHITE, "COMMANDE: Tappez /acheter pour acheter ce dont vous avez besoin.");
		SetPlayerInterior(playerid, 4);
		SetPlayerPos(playerid,-28.2619,-26.2015,1003.5573);
		PlayerInfo[playerid][pInt] = 4;
	}
	else if(PlayerToPointStripped(1, playerid,-28.0241,-31.7674,1003.5573, cx,cy,cz))
	{//Some teleports are fucked up but they are working
		GameTextForPlayer(playerid, "~w~Los Santos", 5000, 1);
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid,994.6481,-920.7285,42.1797);
		OnPlayerExitFood(playerid); // ?
		PlayerInfo[playerid][pInt] = 0;
	}
	else if(PlayerToPointStripped(1, playerid,227.5614,-7.3146,1002.2109, cx,cy,cz))
	{//Some teleports are fucked up but they are working
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVirWorld] = 0;
		GameTextForPlayer(playerid, "~w~Los Santos", 5000, 1);
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid,454.5949,-1500.6449,30.8821);
		OnPlayerExitFood(playerid); // ?
		PlayerInfo[playerid][pInt] = 0;
	}
	else if(PlayerToPointStripped(1, playerid,2105.4858,-1806.4725,13.5547, cx,cy,cz))
	{//Pizzaboy
		OnPlayerEnterFood(playerid, 3);
	}
	else if(PlayerToPointStripped(1, playerid,203.5140,-202.2578,1.5781, cx,cy,cz))
	{//Pizzaboy
	    SetPlayerVirtualWorld(playerid, 2);
	    PlayerInfo[playerid][pVirWorld] = 2;
		OnPlayerEnterFood(playerid, 3);
	}
	else if(PlayerToPointStripped(1, playerid,372.3847,-133.5248,1001.4922, cx,cy,cz))
	{//Some teleports are fucked up but they are working
	    if(GetPlayerVirtualWorld(playerid) == 2)
	    {
	        GameTextForPlayer(playerid, "~w~Los Santos", 5000, 1);
	        SetPlayerInterior(playerid, 0);
	        SetPlayerPos(playerid,203.2209,-204.6613,1.5781);
	        OnPlayerExitFood(playerid); // ?
	        PlayerInfo[playerid][pInt] = 0;
	        SetPlayerVirtualWorld(playerid, 0);
	        PlayerInfo[playerid][pVirWorld] = 0;
	    }
	    else
	    {
			GameTextForPlayer(playerid, "~w~Los Santos", 5000, 1);
			SetPlayerInterior(playerid, 0);
			SetPlayerPos(playerid,2099.9783,-1806.4928,13.5547);
			OnPlayerExitFood(playerid); // ?
			PlayerInfo[playerid][pInt] = 0;
		}
	}
	else if(PlayerToPointStripped(1, playerid,2105.4858,-1806.4725,13.5547, cx,cy,cz))
	{//Pizzaboy
		OnPlayerEnterFood(playerid, 3);
	}
	else if (PlayerToPointStripped(2.0, playerid,-2441.9749,754.0135,35.1786, cx,cy,cz))
	{
		//24-7
		//SetPlayerPos(playerid, -25.1326,-139.0670,1003.5469);
		SendClientMessage(playerid, COLOR_WHITE, "COMMANDE: Tappez /acheter pour acheter ce dont vous avez besoin.");
		GameTextForPlayer(playerid, "~w~Welcome to the ~r~24-7",5000,3);
		SetPlayerInterior(playerid,16);
		PlayerInfo[playerid][pInt] = 16;
	}
	else if (PlayerToPointStripped(2.0, playerid,-25.1326,-141.0670,1003.5469, cx,cy,cz))
	{
		//24-7
		//SetPlayerPos(playerid, -2441.9749,752.0135,35.1786);
		GameTextForPlayer(playerid, "~r~Las venturas",5000,3);
		SendClientMessage(playerid, COLOR_WHITE, "COMMANDE: Tappez /acheter pour acheter ce dont vous avez besoin.");
		SetPlayerInterior(playerid,0);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPointStripped(1, playerid,1654.0858,-1655.9982,22.5156, cx,cy,cz))
	{
		//FBI Enter
		SetPlayerPos(playerid, 289.4371,172.0723,1007.1794);
		GameTextForPlayer(playerid, "~w~FBI Departement",5000,1);
		SetPlayerInterior(playerid,3);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pInt] = 3;
	}
	else if (PlayerToPointStripped(1, playerid,288.7287,168.5377,1007.1719, cx,cy,cz))
	{
		//FBI Exit
		SetPlayerPos(playerid, 1654.2328,-1661.9573,22.5156);
		GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPointStripped(1, playerid,238.6509,139.2591,1003.0234, cx,cy,cz))
	{
		//FBI Exit
		SetPlayerPos(playerid, 1654.2328,-1661.9573,22.5156);
		GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
	}
	/*else if (PlayerToPointStripped(1, playerid,1518.5179,-1452.9224,14.2031, cx,cy,cz))
	{
		//FBI Enter
		SetPlayerPos(playerid, 288.7287,168.5377,1007.1719);
		GameTextForPlayer(playerid, "~w~FBI Department",5000,1);
		SetPlayerInterior(playerid,3);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pInt] = 3;
	}
	else if (PlayerToPointStripped(1, playerid,288.7287,168.5377,1007.1719, cx,cy,cz))
	{
		//FBI Exit
		SetPlayerPos(playerid, 1518.4724,-1450.2354,13.5469);
		GameTextForPlayer(playerid, "~w~Une 2eme Chance",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPointStripped(1, playerid,1518.5179,-1452.9224,14.2031, cx,cy,cz))
	{
		//FBI Exit
		SetPlayerPos(playerid, 1518.4724,-1450.2354,13.5469);
		GameTextForPlayer(playerid, "~w~Une 2eme Chance",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
	}*/
	/*else if (PlayerToPointStripped(1, playerid,1173.2563,-1323.3102,15.3943, cx,cy,cz))
	{
		//Hospital enter
		SetPlayerPos(playerid, 800.4775,-2388.9082,4067.4277);
		GameTextForPlayer(playerid, "~w~Hopital",5000,1);
		SetPlayerInterior(playerid,6);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pInt] = 6;
	}
	else if (PlayerToPointStripped(1, playerid,1172.1730,-1333.9272,1006.4965, cx,cy,cz))
	{
		//Hospital exit
		SetPlayerPos(playerid, 1174.2563,-1323.3102,15.3943);
		GameTextForPlayer(playerid, "~w~Une 2eme Chance",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 270);
		PlayerInfo[playerid][pInt] = 0;

	}*/
	else if (PlayerToPointStripped(1, playerid,1173.2563,-1323.3102,15.3943, cx,cy,cz))
	{
		//Hospital enter
		SetPlayerPos(playerid, -3436.2021,476.3759,57.6132);
		GameTextForPlayer(playerid, "~w~Hopital",5000,1);
		SetTimerEx("chargement",2000,0,"i",playerid);
		TogglePlayerControllable(playerid, 0);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
  		return 1;
	}
	else if (PlayerToPointStripped(1, playerid,-3436.2354,472.8241,57.6132, cx,cy,cz))
	{
		//Hospital exit
		SetPlayerPos(playerid, 1174.2563,-1323.3102,15.3943);
		GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 270);
		PlayerInfo[playerid][pInt] = 0;
	}
	/*else if (PlayerToPointStripped(1, playerid,854.5645,-605.0123,18.4219, cx,cy,cz))
	{
		//HQ biker enter
		SetPlayerPos(playerid, 963.418762,2108.292480,1011.030273);
		GameTextForPlayer(playerid, "~w~HQ Biker",5000,1);
		SetTimerEx("chargement",2000,0,"i",playerid);
		TogglePlayerControllable(playerid, 0);
		SetPlayerInterior(playerid,1);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pInt] = 1;
  		return 1;
	}
	else if (PlayerToPointStripped(1, playerid,965.2029,2107.7048,1011.0303, cx,cy,cz))
	{
		//HQ biker  exit
		SetPlayerPos(playerid, 853.3782,-598.9855,18.4219);
		GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 270);
		PlayerInfo[playerid][pInt] = 0;
	}*/
	/*else if (PlayerToPointStripped(1, playerid,1038.0298,-1339.9967,13.7361, cx,cy,cz))
	{
		//Jim's sticky ring
		OnPlayerEnterFood(playerid, 4);
	}
	else if (PlayerToPointStripped(1, playerid,377.1724,-193.3045,1000.6328, cx,cy,cz))
	{
		//Jim's sticky ring
		SetPlayerPos(playerid, 1038.5148,-1338.0944,13.7266);
		GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		OnPlayerExitFood(playerid);
	}*/
	else if (PlayerToPointStripped(1, playerid,691.5770,-1276.0026,13.5607, cx,cy,cz))
	{
		//La Famiglia Vercetti  gang hq
		if(PlayerInfo[playerid][pMember] == 6 || PlayerInfo[playerid][pLeader] == 6)
		{
			SetPlayerPos(playerid, 962.0352,-53.4519,1001.1246);
			GameTextForPlayer(playerid, "~w~QG de La Famiglia Vercetti",5000,1);
			SetPlayerInterior(playerid,3);
			SetPlayerFacingAngle(playerid, 181);
			PlayerInfo[playerid][pInt] = 3;
		}
		else if(hqlock[luclock] == 0)
		{
		    SetPlayerPos(playerid, 962.0352,-53.4519,1001.1246);
			GameTextForPlayer(playerid, "~w~QG de La Famiglia Vercetti",5000,1);
			SetPlayerInterior(playerid,3);
			SetPlayerFacingAngle(playerid, 181);
			PlayerInfo[playerid][pInt] = 3;
		}
		else
		{
		    GameTextForPlayer(playerid, "~r~Fermer",5000,1);
		}
	}
	else if (PlayerToPointStripped(1, playerid,967.6099,-53.1411,1001.1246, cx,cy,cz))
	{
		//La Famiglia Vercetti gang hq
		SetPlayerPos(playerid, 689.8694,-1276.0619,13.5595);
		GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 1);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPointStripped(1, playerid,2770.6982,-1628.7228,12.1775, cx,cy,cz))
	{
		//Hitman
		if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8)
		{
			SetPlayerPos(playerid, 948.3666,2107.0986,1011.0234);
			GameTextForPlayer(playerid, "~w~QG des Hitman",5000,1);
			SetPlayerInterior(playerid,1);
			SetPlayerFacingAngle(playerid, 181);
			PlayerInfo[playerid][pInt] = 1;
		}
		else if(hqlock[luclock] == 0)
		{
		    SetPlayerPos(playerid, 948.3666,2107.0986,1011.0234);
			GameTextForPlayer(playerid, "~w~QG des Hitman",5000,1);
			SetPlayerInterior(playerid,1);
			SetPlayerFacingAngle(playerid, 181);
			PlayerInfo[playerid][pInt] = 1;
		}
		else
		{
		    GameTextForPlayer(playerid, "~r~Fermer",5000,1);
		}
	}
	else if (PlayerToPointStripped(1, playerid,948.4939,2103.8442,1011.0234, cx,cy,cz))
	{
		//Hitman
		SetPlayerPos(playerid, 2773.8545,-1628.1183,12.1775);
		GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 1);
		PlayerInfo[playerid][pInt] = 0;
	}
/*	else if (PlayerToPointStripped(1, playerid,854.5645,-605.0123,18.4219, cx,cy,cz))
	{
		//Bikers gang hq
		if(PlayerInfo[playerid][pMember] == 14 || PlayerInfo[playerid][pLeader] == 14)
		{
			SetPlayerPos(playerid, 592.3893,-545.8354,2699.8735);
			GameTextForPlayer(playerid, "~w~Bikers HQ",5000,1);
			SetPlayerInterior(playerid,0);
			SetPlayerFacingAngle(playerid, 181);
			PlayerInfo[playerid][pInt] = 0;
		}
		else if(hqlock[guclock] == 0)
		{
		    SetPlayerPos(playerid, 592.3893,-545.8354,2699.8735);
			GameTextForPlayer(playerid, "~w~Bikers HQ",5000,1);
			SetPlayerInterior(playerid,0);
			SetPlayerFacingAngle(playerid, 181);
			PlayerInfo[playerid][pInt] = 0;
		}
		else
		{
		    GameTextForPlayer(playerid, "~r~Fermer",5000,1);
		}
	}
	else if (PlayerToPointStripped(1, playerid,594.1618,-545.8964,2699.8735, cx,cy,cz))
	{
		//Bikers gang hq
		SetPlayerPos(playerid, 854.4448,-602.1243,18.4219);
		GameTextForPlayer(playerid, "~w~Dillimort",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 1);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPointStripped(1, playerid,826.6191,-613.4954,16.3359, cx,cy,cz))
	{
		//GARAGE Bikers gang hq
		if(PlayerInfo[playerid][pMember] == 14 || PlayerInfo[playerid][pLeader] == 14)
		{
			SetPlayerPos(playerid, 587.5443,-549.1948,2703.6406);
			GameTextForPlayer(playerid, "~w~Garage Bikers HQ",5000,1);
			SetPlayerInterior(playerid,0);
			SetPlayerFacingAngle(playerid, 181);
			PlayerInfo[playerid][pInt] = 0;
		}
		else if(hqlock[guclock] == 0)
		{
		    SetPlayerPos(playerid, 587.5443,-549.1948,2703.6406);
			GameTextForPlayer(playerid, "~w~Garage Bikers HQ",5000,1);
			SetPlayerInterior(playerid,0);
			SetPlayerFacingAngle(playerid, 181);
			PlayerInfo[playerid][pInt] = 0;
		}
		else
		{
		    GameTextForPlayer(playerid, "~r~Fermer",5000,1);
		}
	}
	else if (PlayerToPointStripped(1, playerid,587.7666,-547.0664,2703.6406, cx,cy,cz))
	{
		//GARAGE Bikers gang hq
		SetPlayerPos(playerid, 826.4645,-611.4710,16.3359);
		GameTextForPlayer(playerid, "~w~Dillimort",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 1);
		PlayerInfo[playerid][pInt] = 0;
	}*/
	else if (PlayerToPointStripped(1, playerid,2000.0508,-1114.0536,27.1250, cx,cy,cz))
	{
		//Ballas gang hq
		if(PlayerInfo[playerid][pMember] == 15 || PlayerInfo[playerid][pLeader] == 15)
		{
			SetPlayerPos(playerid, 318.6823,1116.8296,1083.8828);
			GameTextForPlayer(playerid, "~w~Ballas HQ",5000,1);
			SetPlayerInterior(playerid,5);
			SetPlayerFacingAngle(playerid, 181);
			PlayerInfo[playerid][pInt] = 5;
		}
		else if(hqlock[stlock] == 0)
		{
		    SetPlayerPos(playerid, 318.6823,1116.8296,1083.8828);
			GameTextForPlayer(playerid, "~w~Ballas HQ",5000,1);
			SetPlayerInterior(playerid,5);
			SetPlayerFacingAngle(playerid, 181);
			PlayerInfo[playerid][pInt] = 5;
		}
		else
		{
		    GameTextForPlayer(playerid, "~r~Fermer",5000,1);
		}
	}
	else if (PlayerToPointStripped(1, playerid,318.6051,1114.4801,1083.8828, cx,cy,cz))
	{
		//Ballas gang hq
		SetPlayerPos(playerid, 2000.1522,-1116.9473,26.7813);
		GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 1);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPointStripped(1, playerid,2495.3254,-1691.1366,14.7656, cx,cy,cz))
	{
		//Groove gang hq
		if(PlayerInfo[playerid][pMember] == 16 || PlayerInfo[playerid][pLeader] == 16)
		{
			SetPlayerPos(playerid, 2495.9868,-1693.8186,1014.7422);
			GameTextForPlayer(playerid, "~w~Groove HQ",5000,1);
			SetPlayerInterior(playerid,3);
			SetPlayerFacingAngle(playerid, 1);
			PlayerInfo[playerid][pInt] = 3;
		}
		else if(hqlock[iolock] == 0)
		{
		    SetPlayerPos(playerid, 2495.9868,-1693.8186,1014.7422);
			GameTextForPlayer(playerid, "~w~Groove HQ",5000,1);
			SetPlayerInterior(playerid,3);
			SetPlayerFacingAngle(playerid, 0);
			PlayerInfo[playerid][pInt] = 3;
		}
		else
		{
		    GameTextForPlayer(playerid, "~r~Fermer",5000,1);
		}
	}
	else if (PlayerToPointStripped(1, playerid,2495.8391,-1692.3677,1014.7422, cx,cy,cz))
	{
		//Groove gang hq
		SetPlayerPos(playerid, 2495.3262,-1688.8191,14.0442);
		GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 179);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPointStripped(1, playerid,1828.1594,-1980.4380,13.5469, cx,cy,cz))
	{
		//Vagos HQ
		if(PlayerInfo[playerid][pMember] == 5 || PlayerInfo[playerid][pLeader] == 5)
		{
			SetPlayerPos(playerid, 2351.0479,-1180.8905,1027.9766);
			GameTextForPlayer(playerid, "~w~Vagos HQ",5000,1);
			SetPlayerInterior(playerid,5);
			SetPlayerFacingAngle(playerid, 90);
			PlayerInfo[playerid][pInt] = 5;
		}
		else if(hqlock[surlock] == 0)
		{
		    SetPlayerPos(playerid, 2351.0479,-1180.8905,1027.9766);
			GameTextForPlayer(playerid, "~w~Vagos HQ",5000,1);
			SetPlayerInterior(playerid,5);
			SetPlayerFacingAngle(playerid, 90);
			PlayerInfo[playerid][pInt] = 5;
		}
		else
		{
		    GameTextForPlayer(playerid, "~r~Fermer",5000,1);
		}
	}
	else if (PlayerToPointStripped(1, playerid,2352.9187,-1180.9679,1027.9766, cx,cy,cz))
	{
		//Vagos HQ
		SetPlayerPos(playerid, 1830.1904,-1983.0223,13.5469);
		GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 179);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPointStripped(1, playerid,1481.0206,-1771.1138,18.7958, cx,cy,cz))
	{
		//City hall
		SetPlayerPos(playerid, 386.2978,173.8582,1008.3828);
		GameTextForPlayer(playerid, "~w~Mairie",5000,1);
		SetPlayerInterior(playerid,3);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pInt] = 3;
	}
	else if (PlayerToPointStripped(1, playerid,390.0630,173.5741,1008.3828, cx,cy,cz))
	{
		//City hall
		SetPlayerPos(playerid, 1481.0206,-1769.5138,18.7958);
		GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
	}
	/*else if (PlayerToPointStripped(1, playerid,1784.58,-1297.52,13.37, cx,cy,cz))
	{
		//ABC studio
		SetPlayerPos(playerid, 366.6735,198.7897,1008.3828);
		GameTextForPlayer(playerid, "~w~ABC studio",5000,1);
		SetPlayerInterior(playerid,3);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pInt] = 3;
	}
	else if (PlayerToPointStripped(3, playerid,366.3892,190.9860,1008.3828, cx,cy,cz))
	{
		//ABC studio
		SetPlayerPos(playerid, 1784.3687,-1294.7397,13.4606);
		GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
	}*/
	else if (PlayerToPointStripped(1, playerid,1752.8452,-1894.1328,13.5573, cx,cy,cz))
	{
		//LA Yellow Cab Co.
		SetPlayerPos(playerid, 371.8502,182.0368,1014.1875);
		GameTextForPlayer(playerid, "~w~LA Yellow Cab Co.",5000,1);
		SetPlayerInterior(playerid,3);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pInt] = 3;
	}
	else if (PlayerToPointStripped(1, playerid,371.4523,180.2195,1014.1875, cx,cy,cz))
	{
		//LA Yellow Cab Co.
		SetPlayerPos(playerid, 1755.7578,-1894.1992,13.5566);
		GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
    }
	else if (PlayerToPointStripped(1, playerid,2495.3481,-1691.1355,14.7656, cx,cy,cz))
	{
		//Groove Street  gang hq
		if(PlayerInfo[playerid][pMember] == 10 || PlayerInfo[playerid][pLeader] == 10)
		{
			SetPlayerPos(playerid, 2496.0061,-1693.5201,1014.7422);
			GameTextForPlayer(playerid, "~w~Groove Street HQ",5000,1);
			SetPlayerInterior(playerid,3);
			SetPlayerFacingAngle(playerid, 181);
			PlayerInfo[playerid][pInt] = 3;
		}
		else if(hqlock[iolock] == 0)
		{
		    SetPlayerPos(playerid, 2496.0061,-1693.5201,1014.7422);
			GameTextForPlayer(playerid, "~w~Groove Street HQ",5000,1);
			SetPlayerInterior(playerid,3);
			SetPlayerFacingAngle(playerid, 181);
			PlayerInfo[playerid][pInt] = 3;
		}
		else
		{
		    GameTextForPlayer(playerid, "~r~Fermer",5000,1);
		}
	}
	else if (PlayerToPointStripped(1, playerid,2496.0039,-1692.2004,1014.7422, cx,cy,cz))
	{
		//Groove Street gang hq
		SetPlayerPos(playerid, 2496.3718,-1688.8561,14.0673);
		GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 1);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPointStripped(1, playerid,2045.3928,-1908.0372,13.5469, cx,cy,cz))
	{
		//DMW
		SetPlayerPos(playerid, 1494.6207,1305.2336,1093.2891);
		GameTextForPlayer(playerid, "~w~Auto-Ecole",5000,1);
		SetPlayerInterior(playerid,3);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pInt] = 3;
	}
	else if (PlayerToPointStripped(1, playerid,1494.2778,1303.7288,1093.2891, cx,cy,cz))
	{
		//DMW Exit
		SetPlayerPos(playerid, 2046.8928,-1908.0372,13.5469);
		GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 280);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPointStripped(1, playerid,1524.5724,-1677.8043,6.2188, cx,cy,cz))
	{
	    //PD Elevator
	    SetPlayerPos(playerid, 244.0099,66.4152,1003.6406);
	    GameTextForPlayer(playerid, "~w~Police Departement",5000,1);
	    SetPlayerInterior(playerid,6);
	    SetPlayerFacingAngle(playerid, 270);
		PlayerInfo[playerid][pInt] = 6;
	}
	else if (PlayerToPointStripped(1, playerid,1557.7257,-1675.2711,28.3955, cx,cy,cz))
	{
	    //PD Elevator
	    SetPlayerPos(playerid, 244.0099,66.4152,1003.6406);
	    GameTextForPlayer(playerid, "~w~Police Departement",5000,1);
	    SetPlayerInterior(playerid,6);
	    SetPlayerFacingAngle(playerid, 270);
		PlayerInfo[playerid][pInt] = 6;
	}
	else if (PlayerToPointStripped(1.5, playerid,1570.3828,-1333.8882,16.4844, cx,cy,cz))
	{
	    //Next to PD building
	    SetPlayerPos(playerid, 1545.0068,-1366.5094,327.2868);
	    GameTextForPlayer(playerid, "~w~Immeuble News",5000,1);
	    SetPlayerInterior(playerid,0);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPointStripped(1.5, playerid,1548.8167,-1366.2247,326.2109, cx,cy,cz))
	{
	    //Next to PD building
	    SetPlayerPos(playerid, 1572.1115,-1332.5288,16.4844);
	    GameTextForPlayer(playerid, "~w~Immeuble News",5000,1);
	    SetPlayerInterior(playerid,0);
		PlayerInfo[playerid][pInt] = 0;
	}
	return 1;
}
public CreateFoodMenus() // by LordMan (Donut part by LordMan)
{
	// Burger Shot
	burgermenu = CreateMenu("Burger Shot", 2, 200.0, 100.0, 150.0, 150.0);
	AddMenuItem(burgermenu,0,"Plats");
	AddMenuItem(burgermenu,0,"Sharp Shooter");
	AddMenuItem(burgermenu,0,"Cheeseburger");
	AddMenuItem(burgermenu,0,"Double Patty Sandwich");
	AddMenuItem(burgermenu,0,"Beefy Salad");
	AddMenuItem(burgermenu,0," ");
	AddMenuItem(burgermenu,0,"Boissons");
	AddMenuItem(burgermenu,0,"Eau");
	AddMenuItem(burgermenu,0,"Soda");
	AddMenuItem(burgermenu,0," ");
	AddMenuItem(burgermenu,0,"Quitter");
	AddMenuItem(burgermenu,1," ");
	AddMenuItem(burgermenu,1,"$2"); // Sharp Shooter
	AddMenuItem(burgermenu,1,"$4"); // Cheeseburger
	AddMenuItem(burgermenu,1,"$5"); // DP Sandwich
	AddMenuItem(burgermenu,1,"$3"); // Beefy Salad
	AddMenuItem(burgermenu,1," ");
	AddMenuItem(burgermenu,1," ");
	AddMenuItem(burgermenu,1,"$1"); // Water
	AddMenuItem(burgermenu,1,"$1"); // Sprunk
	AddMenuItem(burgermenu,1," ");
	AddMenuItem(burgermenu,1," ");
	DisableMenuRow(burgermenu, 0);
	DisableMenuRow(burgermenu, 5);
	DisableMenuRow(burgermenu, 6);
	DisableMenuRow(burgermenu, 9);

	// Cluckin Bell
	chickenmenu = CreateMenu("Cluckin' Bell", 2, 200.0, 100.0, 150.0, 150.0);
	AddMenuItem(chickenmenu,0,"Plats");
	AddMenuItem(chickenmenu,0,"Little Clucker");
	AddMenuItem(chickenmenu,0,"Chicken Nuggets");
	AddMenuItem(chickenmenu,0,"Chicken Sandwich");
	AddMenuItem(chickenmenu,0,"Chicken Salad");
	AddMenuItem(chickenmenu,0," ");
	AddMenuItem(chickenmenu,0,"Boissons");
	AddMenuItem(chickenmenu,0,"Eau");
	AddMenuItem(chickenmenu,0,"Soda");
	AddMenuItem(chickenmenu,0," ");
	AddMenuItem(chickenmenu,0,"Sortir");
	AddMenuItem(chickenmenu,1," ");
	AddMenuItem(chickenmenu,1,"$2"); // Little Clucker
	AddMenuItem(chickenmenu,1,"$4"); // Nuggets
	AddMenuItem(chickenmenu,1,"$5"); // C Sandwich
	AddMenuItem(chickenmenu,1,"$3"); // Salad
	AddMenuItem(chickenmenu,1," ");
	AddMenuItem(chickenmenu,1," ");
	AddMenuItem(chickenmenu,1,"$1"); // Water
	AddMenuItem(chickenmenu,1,"$1"); // Sprunk
	AddMenuItem(chickenmenu,1," ");
	AddMenuItem(chickenmenu,1," ");
	DisableMenuRow(chickenmenu, 0);
	DisableMenuRow(chickenmenu, 5);
	DisableMenuRow(chickenmenu, 6);
	DisableMenuRow(chickenmenu, 9);

	// Pizza Stack
	pizzamenu = CreateMenu("Well Stacked Pizza", 2, 200.0, 100.0, 150.0, 150.0);
	AddMenuItem(pizzamenu,0,"Plats");
	AddMenuItem(pizzamenu,0,"Little Sicilian");
	AddMenuItem(pizzamenu,0,"Personal Pan Pizza");
	AddMenuItem(pizzamenu,0,"Sheet Pizza");
	AddMenuItem(pizzamenu,0,"Pepperoni Salad");
	AddMenuItem(pizzamenu,0," ");
	AddMenuItem(pizzamenu,0,"Boissons");
	AddMenuItem(pizzamenu,0,"Eau");
	AddMenuItem(pizzamenu,0,"Soda");
	AddMenuItem(pizzamenu,0," ");
	AddMenuItem(pizzamenu,0,"Quitter");
	AddMenuItem(pizzamenu,1," ");
	AddMenuItem(pizzamenu,1,"$2"); // Sicilian
	AddMenuItem(pizzamenu,1,"$4"); // Personal Pan
	AddMenuItem(pizzamenu,1,"$5"); // Sheet
	AddMenuItem(pizzamenu,1,"$3"); // Salad
	AddMenuItem(pizzamenu,1," ");
	AddMenuItem(pizzamenu,1," ");
	AddMenuItem(pizzamenu,1,"$1"); // Water
	AddMenuItem(pizzamenu,1,"$1"); // Sprunk
	AddMenuItem(pizzamenu,1," ");
	AddMenuItem(pizzamenu,1," ");
	DisableMenuRow(pizzamenu, 0);
	DisableMenuRow(pizzamenu, 5);
	DisableMenuRow(pizzamenu, 6);
	DisableMenuRow(pizzamenu, 9);

	// Jim's sticky ring
	donutshop = CreateMenu("Jim's sticky ring", 2, 200.0, 100.0, 150.0, 150.0);
	AddMenuItem(donutshop,0,"Donuts");
	AddMenuItem(donutshop,0,"Peit Donut");
	AddMenuItem(donutshop,0,"Donut Normal");
	AddMenuItem(donutshop,0,"Donut du Chef");
	AddMenuItem(donutshop,0,"Donut extrat large");
	AddMenuItem(donutshop,0," ");
	AddMenuItem(donutshop,0,"Boissons");
	AddMenuItem(donutshop,0,"Eau");
	AddMenuItem(donutshop,0,"Soda");
	AddMenuItem(donutshop,0," ");
	AddMenuItem(donutshop,0,"Sotir");
	AddMenuItem(donutshop,1," ");
	AddMenuItem(donutshop,1,"$2"); // Little Donut
	AddMenuItem(donutshop,1,"$4"); // Regular Donut
	AddMenuItem(donutshop,1,"$5"); // Chief Donut
	AddMenuItem(donutshop,1,"$4"); // Extra large Donut
	AddMenuItem(donutshop,1," ");
	AddMenuItem(donutshop,1," ");
	AddMenuItem(donutshop,1,"$1"); // Water
	AddMenuItem(donutshop,1,"$1"); // Sprunk
	AddMenuItem(donutshop,1," ");
	AddMenuItem(donutshop,1," ");
	DisableMenuRow(donutshop, 0);
	DisableMenuRow(donutshop, 5);
	DisableMenuRow(donutshop, 6);
	DisableMenuRow(donutshop, 9);
}

public OnPlayerEnterFood(playerid, foodid)
{
	switch (foodid)
	{
		case 1: // chicken
		{
			SetPlayerInterior(playerid, 9);
			PlayerInfo[playerid][pInt] = 9;
			SetPlayerPos(playerid,365.7793,-9.1699,1001.8516);
			SetPlayerCheckpoint(playerid, 368.9714,-6.2486,1001.8516, 1.5);
			GameTextForPlayer(playerid, "~w~Cluckin Bell", 5000, 1);
			InAFoodPlace[playerid] = 1;
		}
		case 2: // burger
		{
			SetPlayerInterior(playerid, 10);
			PlayerInfo[playerid][pInt] = 10;
			SetPlayerPos(playerid,366.0324,-72.6400,1001.5078);
			SetPlayerCheckpoint(playerid, 376.8571,-67.6620,1001.5151, 1.5);
			GameTextForPlayer(playerid, "~w~Burger Shot", 5000, 1);
			InAFoodPlace[playerid] = 2;
		}
		case 3: // pizza
		{
			SetPlayerInterior(playerid, 5);
			PlayerInfo[playerid][pInt] = 5;
			SetPlayerPos(playerid,372.4117,-130.4577,1001.4922);
			SetPlayerCheckpoint(playerid, 375.6895,-118.9683,1001.4995, 1.5);
			GameTextForPlayer(playerid, "~w~Well Stacked Pizza", 5000, 1);
			InAFoodPlace[playerid] = 3;
		}
		case 4: // donuts
		{
			SetPlayerInterior(playerid, 17);
			PlayerInfo[playerid][pInt] = 17;
			SetPlayerPos(playerid,377.5237,-191.6597,1000.6328);
			SetPlayerCheckpoint(playerid, 379.0611,-186.6032,1000.6328, 0.8);
			GameTextForPlayer(playerid, "~w~Jim's sticky ring", 5000, 1);
			InAFoodPlace[playerid] = 4;
		}
	}
	return 1;
}

public OnPlayerExitFood(playerid)
{
	DisablePlayerCheckpoint(playerid);
	InAFoodPlace[playerid] = 0;
	return 1;
}

public ClearChatbox(playerid, lines)
{
	if (IsPlayerConnected(playerid))
	{
		for(new i=0; i<lines; i++)
		{
			SendClientMessage(playerid, COLOR_GREY, " ");
		}
	}
	return 1;
}
////////////////////////////License Menu
public CreateLicensesMenus()
{
	Licenses = CreateMenu("Permis", 1, 50.0, 180.0, 200.0, 200.0);
	AddMenuItem(Licenses, 0, "Permis de Conduire");
	AddMenuItem(Licenses, 0, "Permis de Vol");
	AddMenuItem(Licenses, 0, "Permis de Navigation");
    AddMenuItem(Licenses, 0, "Permis Arme");
	AddMenuItem(Licenses, 0, "[Sortir]");

}

/////////////////////////////
public CreateLegalJobsMenus()
{
	LegalJobs = CreateMenu("Jobs Legaux", 1, 50.0, 180.0, 200.0, 200.0);
	AddMenuItem(LegalJobs, 0, "Detective");
	AddMenuItem(LegalJobs, 0, "Avocat");
	AddMenuItem(LegalJobs, 0, "Serveur");
	AddMenuItem(LegalJobs, 0, "Boxeur");
	AddMenuItem(LegalJobs, 0, "Cammioneur");
	AddMenuItem(LegalJobs, 0, "Fermier");
	AddMenuItem(LegalJobs, 0, "Eboueur");
	AddMenuItem(LegalJobs, 0, "Ouvrier");
	AddMenuItem(LegalJobs, 0, "[Page Suivante]");
	AddMenuItem(LegalJobs, 0, "[Sortir]");

	LegalJobs2 = CreateMenu("Jobs Legaux", 1, 50.0, 180.0, 200.0, 200.0);
	AddMenuItem(LegalJobs2, 0, "Chauffeur de Taxi");
	AddMenuItem(LegalJobs2, 0, "Chauffeur de Bus");
	AddMenuItem(LegalJobs2, 0, "Livreur de Journaux");
	AddMenuItem(LegalJobs2, 0, "Livreur de Pizza");
	AddMenuItem(LegalJobs2, 0, "Balayeur de Rue");
	AddMenuItem(LegalJobs2, 0, "Mecanicien");
	AddMenuItem(LegalJobs2, 0, "Garde du Corp");
	AddMenuItem(LegalJobs2, 0, "[Page Precedente]");
	AddMenuItem(LegalJobs2, 0, "[Sortir]");

}

public CreateIlegalJobsMenus()
{
	IlegalJobs = CreateMenu("Jobs Illegaux", 1, 50.0, 180.0, 200.0, 200.0);
	AddMenuItem(IlegalJobs, 0, "Prostituee");
	AddMenuItem(IlegalJobs, 0, "Dealer de Drogues");
	AddMenuItem(IlegalJobs, 0, "Dealer Armes");
	AddMenuItem(IlegalJobs, 0, "Voleur de voitures");
	AddMenuItem(IlegalJobs, 0, "Cultivateur Drogue");
	AddMenuItem(IlegalJobs, 0, "Contrebandier Drogue");
	AddMenuItem(IlegalJobs, 0, "Contrebandier Armes");
	AddMenuItem(IlegalJobs, 0, "Fabricant Armes");
	AddMenuItem(IlegalJobs, 0, "Faussaire");
	AddMenuItem(IlegalJobs, 0, "[Sortir]");
}

public CreateGuideMenus()
{
	Guide = CreateMenu("newspaper", 1, 50.0, 180.0, 200.0, 200.0);
	AddMenuItem(Guide, 0, "Regles");
	AddMenuItem(Guide, 0, "Le RolePlay");
	AddMenuItem(Guide, 0, "Auto Ecole");
	AddMenuItem(Guide, 0, "Location Vehicule");
	AddMenuItem(Guide, 0, "Magasin de Vetement");
	AddMenuItem(Guide, 0, "A.N.P.E");
	AddMenuItem(Guide, 0, "[Sortir]");
}

public Startup(playerid, vehicleid)
{
    new pveh = GetVehicleModel(GetPlayerVehicleID(playerid));
    new newcar = GetPlayerVehicleID(playerid);
	if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER || engineOn[vehicleid])
	{
	    voiturepaslui[playerid] = 0;
		//I do nothing!
	}
	else if(IsPlayerInAnyVehicle(playerid) && !engineOn[vehicleid] && !vehicleEntered[playerid][vehicleid] && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && pveh != 510 && pveh != 462 && newcar != 107 && newcar != 108 && newcar != 109 && newcar != 110 && !IsAHarvest(newcar) && !IsADrugHarvest(newcar) && !IsASweeper(newcar))
	{
	    if(voiturepaslui[playerid] == 1)
	    {
	        TogglePlayerControllable(playerid, false);
			vehicleEntered[playerid][vehicleid] = true;
	    }
	    if(CarInfo[vehicleid][cOwned]==0 && IsAnOwnableCar(vehicleid))
	    {
	        // Nothing
	    }
	    else
	    {
			SendClientMessage(playerid, COLOR_LIGHT_BLUE, "Faites /clef ou utilisez le clic gauche de la sourie pour démarrer le véhicule.");
			TogglePlayerControllable(playerid, 1);
			vehicleEntered[playerid][vehicleid] = true;
		}
	}
	else if(IsPlayerInAnyVehicle(playerid) && !engineOn[vehicleid] && vehicleEntered[playerid][vehicleid] && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && pveh != 510 && pveh != 462 && newcar != 107 && newcar != 108 && newcar != 109 && newcar != 110 && !IsAHarvest(newcar) && !IsADrugHarvest(newcar) && !IsASweeper(newcar))
	{
	    if(voiturepaslui[playerid] == 1)
	    {
	        TogglePlayerControllable(playerid, false);
	    }
	    if(CarInfo[vehicleid][cOwned]==0 && IsAnOwnableCar(vehicleid))
	    {
	        // Nothing
	    }
	    else
	    {
			SendClientMessage(playerid, COLOR_LIGHT_BLUE, "Faites /clef ou utilisez le clic gauche de la sourie pour démarrer le véhicule.");
			TogglePlayerControllable(playerid, 1);
		}
	}
}

public engine2(playerid)
{
	if(!IsPlayerInAnyVehicle(playerid))
	{
	    TogglePlayerControllable(playerid, 1);
	}
}

public busroutestoptimer(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new newcar = GetPlayerVehicleID(playerid);
	    if(IsABus(newcar))
	    {
	        TogglePlayerControllable(playerid, 1);
	        SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Vous pouvez y allez!");
	    }
	    if(IsAJobPlane(newcar))
	    {
	        TogglePlayerControllable(playerid, 1);
	        SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Vous pouvez y allez!");
	    }
        if(IsATrain(newcar))
	    {
	        TogglePlayerControllable(playerid, 1);
	        SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Vous pouvez y allez!"); 
	    }
	}
}

stock strvalEx( const string[] ) // fix for strval-bug with > 50 letters.
{
	// written by mabako in less than a minute :X
	if( strlen( string ) >= 50 ) return 0; // It will just return 0 if the string is too long
	return strval(string);
/*}

public NameTimer()
{
	for(new i = 0;i < MAX_PLAYERS;i++)
 	{
	 	if(IsPlayerConnected(i))
 		{
 			for(new q = 0;q < MAX_PLAYERS;q++)
 			{
				if(IsPlayerConnected(q))
				{
 					new Float:p1x;
					new Float:p1y;
					new Float:p1z;
					new Float:p2x;
					new Float:p2y;
					new Float:p2z;
					if(IsPlayerConnected(i) && IsPlayerConnected(q))
					{
						GetPlayerPos(i,p1x,p1y,p1z);
    					GetPlayerPos(q,p2x,p2y,p2z);
						if(GetPointDistanceToPointExMorph(p1x,p1y,p1z,p2x,p2y,p2z) < pdistance)
						{
							if(PlayerInfo[q][pMaskuse] != 1)
	    					{
								ShowPlayerNameTagForPlayer(i,q,1);
							}
	    				}
						else
						{
							ShowPlayerNameTagForPlayer(i,q,0);
						}
                    }
                }
            }
        }
	}*/
}


public CheckCarHealth()
{
    new string[256];
    new sendername[MAX_PLAYER_NAME];
    for (new i=0; i < MAX_PLAYERS; i++)
    {
        if (IsPlayerConnected(i) && IsPlayerInAnyVehicle(i) && GetPlayerState(i) == PLAYER_STATE_DRIVER)
        {
             new Float:health;
             GetVehicleHealth(GetPlayerVehicleID(i),health);
             new newcar = GetPlayerVehicleID(i);
             if (health <= 500 && !IsABoat(newcar) && !IsABike(newcar) && !IsAPlane(newcar) && !IsAHarvest(newcar) && !IsADrugHarvest(newcar) && !IsASweeper(newcar))
             {
                 if(engineOn[GetPlayerVehicleID(i)] == 1)
                 {
                    if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
                    {
                    	new enginem, lights, alarm, doors, bonnet, boot, objective;
						GetVehicleParamsEx(GetPlayerVehicleID(i),enginem, lights, alarm, doors, bonnet, boot, objective);
                    	SetVehicleParamsEx(GetPlayerVehicleID(i), VEHICLE_PARAMS_OFF, lights, alarm, doors, bonnet, boot, objective);
                 		SendClientMessage(i, COLOR_LIGHT_BLUE, "Votre véhicule est HS, appeler un mécanicien pour qu'il répare votre moteur.");
                 		engineOn[GetPlayerVehicleID(i)] = false;
                 		GetPlayerName(i, sendername, sizeof(sendername));
                 		format(string, sizeof(string), "Le moteur du véhicule de %s est HS.", sendername);
						ProxDetector(30.0, i, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				 }
             }
         }
    }
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
    new car = GetPlayerVehicleID(playerid);
	if(IsPlayerConnected(playerid))
	{
	    if(newkeys & KEY_SECONDARY_ATTACK)
	    {
	        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && EnPanne[playerid] == 1)
			{
			    TogglePlayerControllable(playerid,1);
	            RemovePlayerFromVehicle(playerid);
	            EnPanne[playerid] = 5;
			}
		}
	}
    if(newkeys == KEY_FIRE)
    {
        if(IsPlayerInAnyVehicle(playerid))
        {
	        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	        {
				if(IsPlayerConnected(playerid))
				{
					new sendername[32];
					new string[126];
					new engine,lighttss,alarm,doors,bonnet,boot,objective;
					GetPlayerName(playerid, sendername, sizeof(sendername));
					if(VehiculeInfo[car][Phares] == 0)
					{
				    	format(string, sizeof(string), "* %s allume les phares du vehicule.", sendername);
				   		ProxDetectorVeh(30.0, playerid, string, COL_PURPLE,COL_PURPLE,COL_PURPLE,COL_PURPLE,COL_PURPLE);
					    GetVehicleParamsEx(car,engine,lighttss,alarm,doors,bonnet,boot,objective);
	        			SetVehicleParamsEx(car,engine,1,alarm,doors,bonnet,boot,objective);
						GameTextForPlayer(playerid, "~w~Phares Allumes...",3500,3);
						VehiculeInfo[car][Phares] = 1;
						return 1;
					}
					else
					{
				    	format(string, sizeof(string), "* %s eteind les phares du vehicule.", sendername);
				    	ProxDetectorVeh(30.0, playerid, string, COL_PURPLE,COL_PURPLE,COL_PURPLE,COL_PURPLE,COL_PURPLE);
						GetVehicleParamsEx(car,engine,lighttss,alarm,doors,bonnet,boot,objective);
	        			SetVehicleParamsEx(car,engine,0,alarm,doors,bonnet,boot,objective);
						GameTextForPlayer(playerid, "~w~Phares Eteinds...",3500,3);
						VehiculeInfo[car][Phares] = 0;
						return 1;
					}
				}
			}
	    }
    }
    new string[256];
	new sendername[MAX_PLAYER_NAME];
	new pveh = GetVehicleModel(GetPlayerVehicleID(playerid));
	new newcar = GetPlayerVehicleID(playerid);
    if (newkeys & 16 && InShamal[playerid])
	{
        new Float:X, Float:Y, Float:Z, Float:A;
        GetVehiclePos(InShamal[playerid], X, Y, Z);
        GetVehicleZAngle(InShamal[playerid], A);
        X += (5 * floatsin(-floatsub(A, 45.0), degrees)),
        Y += (5 * floatcos(-floatsub(A, 45.0), degrees));
        SetPlayerInterior(playerid, 0);
        SetPlayerPos(playerid, X, Y, floatsub(Z, 0.94));
        SetPlayerFacingAngle(playerid, A);
        SetCameraBehindPlayer(playerid);
        InShamal[playerid] = 0;
	}
    if(newkeys == KEY_JUMP)
    {
        if(IsPlayerInAnyVehicle(playerid))
        {
			if(IsPlayerConnected(playerid))
			{
				if(!engineOn[GetPlayerVehicleID(playerid)])
				{
					if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
					{
						return 1;
					}
					/*if(IsAnOwnableCar(newcar))
					{
					    if(PlayerInfo[playerid][pPvehkey] == newcar) { }
						else if(PlayerInfo[playerid][pPvehkey2] == newcar) { }
						else if(PlayerInfo[playerid][pPvehkey3] == newcar) { }
						else if(PlayerInfo[playerid][pPvehkey4] == newcar) { }
						else { return 1; }
					}*/
					if(pveh == 510 || pveh == 462 || pveh == 481 || pveh == 509)
					{
						return 1;
					}
					if(VoitureASabot[newcar] == 1)
					{
						return 1;
					}
					if(IsAHarvest(newcar))
					{
					    return 1;
					}
					if(IsADrugHarvest(newcar))
					{
					    return 1;
					}
					if(IsASweeper(newcar))
					{
					    return 1;
					}
					if(CarInfo[newcar][cOwned]==0 && IsAnOwnableCar(newcar))
					{
						return 1;
					}
					if(gEngine[playerid] == 1) { return 1; }

					PutPlayerInVehicle(playerid, newcar, 0);
					GetPlayerName(playerid, sendername, sizeof(sendername));
     format(string, sizeof(string), "%s tourne ses clefs et essaye de démarrer le moteur de son véhicule.", sendername);
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetTimerEx("StartingTheVehicle",2500,0,"i",playerid);
					GameTextForPlayer(playerid, "~w~Le Moteur demarre...",2500,3);
					gEngine[playerid] = 1;
					desactivetext[playerid] = 1;
					SetTimerEx("DesactiverSpeedo", 5000, 0, "i", playerid);
					return 1;
				}
			}
		}
    }
    else if ((newkeys == KEY_SECONDARY_ATTACK))
    {
        if(IsAtCandySprunk(playerid))
        {
            if(TookSprunk[playerid] == 0)
            {
                new Float:health;
                GetPlayerHealth(playerid, health);
                if(health != 0)
                {
		            SafeGivePlayerMoney(playerid, -25);
		            SendClientMessage(playerid, COLOR_GREY, " Vous venez de payer 25$ pour votre Soda ");
					TookSprunk[playerid] = 1;
		            SetTimerEx("SetHP",3750,false, "i", playerid);
				}
			}
		}
	}
    else if(newkeys == KEY_SECONDARY_ATTACK)// KEY_SPRINT
    {
        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
        {
            if(gEngine[playerid] == 0 && engineOn[newcar] == 0)
            {
				RemovePlayerFromVehicle(playerid);
				TogglePlayerControllable(playerid, 1);
				return 1;
            }
            else if(NoFuel[playerid] == 1)
			{
			    TogglePlayerControllable(playerid, 1);
				RemovePlayerFromVehicle(playerid);
				NoFuel[playerid] = 0;
				return 1;
			}
        }
    }
    else if(newkeys == KEY_CROUCH && GetPlayerState(playerid) == 2)// H
    {
	    if(grilleouverte[playerid] == 0)
		{
		    if(PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pMember] == 3)
		    {
		        if (PlayerToPoint(15, playerid,1599.053344,-1638.123168,14.122960))
				{
		      		MoveStreamObject(pdgate1,1599.053344,-1638.123168,14.122960, 0.8);
		      		SetTimer("GateClose", 12000, 0);
		            SetTimerEx("OuvertureGrille", 25000, 0, "i", playerid);
			        SendClientMessage(playerid, COLOR_BLUE,"La grille du garage du commissariat s'ouvre, elle se refermera dans 7 secondes.");
		      		GetPlayerName(playerid, sendername, sizeof(sendername));
	                grilleouverte[playerid] = 0;
			        format(string, sizeof(string), " %s prend sa télécommande et ouvre le garage.", sendername);
			        ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		      		PlayerPlaySound(playerid, 1153, 1589.053344,-1638.123168,14.122960);
				}
				else if (PlayerToPoint(15, playerid,1544.700317,-1630.735717,13.096980))
				{
		      		DestroyStreamObject( pdgate2 );
		      		pdgate3 = CreateObject(968,1544.700317,-1630.735717,12.924660,0.000000,0.000000,270.972869);
		      		SetTimer("GateClose5", 6000, 0);
		            SetTimerEx("OuvertureGrille", 13000, 0, "i", playerid);
		            SendClientMessage(playerid, COLOR_BLUE,"La barrière est ouverte, elle se fermera dans 6 secondes.");
		      		GetPlayerName(playerid, sendername, sizeof(sendername));
		            grilleouverte[playerid] = 0;
		            format(string, sizeof(string), " %s prend sa télécommande et ouvre la barrière.", sendername);
		      		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				/*}
				else if (PlayerToPoint(15, playerid,2720.3772,-2409.7523,12.6))
				{
		      		MoveStreamObject(armygate1,2720.3772, -2401.2523, 12.6, 3.5);
		      		SetTimer("GateClose2", 7000, 0);
		            SetTimerEx("OuvertureGrille", 25000, 0, "i", playerid);
		            SendClientMessage(playerid, COLOR_BLUE,"The Army gate Nr. 1 is opened and will close in 7 seconds.");
		      		GetPlayerName(playerid, sendername, sizeof(sendername));
		            grilleouverte[playerid] = 1;
		            format(string, sizeof(string), " %s takes his/her remote and opens the army gate #1.", sendername);
		      		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				else if (PlayerToPoint(15, playerid,2720.3772,-2508.3069,12.6))
				{
		      		MoveStreamObject(armygate2,2720.3772, -2499.8069, 12.6, 3.5);
		      		SetTimer("GateClose2", 7000, 0);
		            SetTimerEx("OuvertureGrille", 25000, 0, "i", playerid);
		            SendClientMessage(playerid, COLOR_BLUE,"The Army gate Nr. 2 is opened and will close in 7 seconds.");
		      		GetPlayerName(playerid, sendername, sizeof(sendername));
		            grilleouverte[playerid] = 1;
		            format(string, sizeof(string), " %s takes his/her remote and opens the army gate #2.", sendername);
		      		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);*/
				}
				else if (PlayerToPoint(15, playerid,1534.9020,-1451.5979,14.4882))
				{
			      		MoveStreamObject(fbigate,1534.9020,-1451.5979,20.4882, 1.5);
			      		SetTimer("GateClose3", 7000, 0);
			      		SetTimerEx("OuvertureGrille", 15000, 0, "i", playerid);
			      		SendClientMessage(playerid, COLOR_BLUE,"La grille du FBI est ouverte, elle se refermera dans 7 secondes.");
			      		GetPlayerName(playerid, sendername, sizeof(sendername));
			      		grilleouverte[playerid] = 0;
			      		format(string, sizeof(string), " %s prend sa télécommande et ouvre la grille.", sendername);
		      		    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				else if (PlayerToPoint(15, playerid,1643.3379,-1714.9338,15.3067))
				{
			      		MoveStreamObject(hspdgate,1643.3379,-1705.9338,15.3067, 1.5);
			      		SetTimer("GateClose4", 7000, 0);
			      		SetTimerEx("OuvertureGrille", 15000, 0, "i", playerid);
			      		SendClientMessage(playerid, COLOR_BLUE,"La grille du FBI est ouverte, elle se refermera dans 7 secondes.");
			      		GetPlayerName(playerid, sendername, sizeof(sendername));
			      		grilleouverte[playerid] = 0;
			      		format(string, sizeof(string), " %s prend sa télécommande et ouvre la grille.", sendername);
		      		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					else { SendClientMessage(playerid, COLOR_GREY,"Vous êtes trop loin de la grille."); }
	}
	else if(PlayerInfo[playerid][pMember] == 6 || PlayerInfo[playerid][pLeader] == 6)
	{
	    if (PlayerToPoint(15, playerid,1246.0033,-767.3727,91.1473))
	    {
	        MoveStreamObject(lucianogate,1256.2033,-767.3727,91.1473, 2.2);
			SetTimer("GateClose6", 7000, 0);
            SetTimerEx("OuvertureGrille", 25000, 0, "i", playerid);
			GetPlayerName(playerid, sendername, sizeof(sendername));
            grilleouverte[playerid] = 0;
			format(string, sizeof(string), " %s prend sa télécommande et ouvre la grille de La Famiglia Sinatra.", sendername);
      		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			    }
			    else { SendClientMessage(playerid, COLOR_GREY,"Vous êtes trop loin de la grille."); }
			}
		 	else
		 	{
			 	//SendClientMessage(playerid, COLOR_GREY,"Vous n'avez pas de télécommande.");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_RED,"Attendez que la grille soit fermée s'il vous plait.");
  		}
    }
   	return 1;
}

public StartingTheVehicle(playerid)
{
    if(IsPlayerConnected(playerid))
    {
        if(IsPlayerInAnyVehicle(playerid))
        {
            new RandomStart;
    		new string[256];
    		new sendername[MAX_PLAYER_NAME];
            RandomStart = random(5);
            switch(RandomStart)
            {
                case 0,1,2,3,4,5,6,7,8:
                {
                    engineOn[GetPlayerVehicleID(playerid)] = true;
                    TogglePlayerControllable(playerid, true);
                    GetPlayerName(playerid, sendername, sizeof(sendername));
                    format(string, sizeof(string), "Le véhicule de %s démarre.", sendername);
                    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    new playerveh = GetPlayerVehicleID(playerid);
                    new engine,lights,alarm,doors,bonnet,boot,objective;
         		    GetVehicleParamsEx(playerveh,engine,lights,alarm,doors,bonnet,boot,objective);
                    SetVehicleParamsEx(playerveh,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
                    gEngine[playerid] = 1;
                }
                case 9:
                {
                    GetPlayerName(playerid, sendername, sizeof(sendername));
                    format(string, sizeof(string), "Le véhicule de %s a callé.", sendername);
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		            new playerveh = GetPlayerVehicleID(playerid);
                    new engine,lights,alarm,doors,bonnet,boot,objective;
         		    GetVehicleParamsEx(playerveh,engine,lights,alarm,doors,bonnet,boot,objective);
                    SetVehicleParamsEx(playerveh,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
					gEngine[playerid] = 0;
                }
            }
        }
		else
		{
		    gEngine[playerid] = 0;
		}
    }
    return 1;
}

public StartingTheVehicleVoler(playerid)
{
    if(IsPlayerConnected(playerid))
    {
        if(IsPlayerInAnyVehicle(playerid))
        {
            new RandomStart;
    		new string[256];
    		new sendername[MAX_PLAYER_NAME];
            RandomStart = random(7);
            switch(RandomStart)
            {
                case 0,6:
                {
                    engineOn[GetPlayerVehicleID(playerid)] = true;
                    TogglePlayerControllable(playerid, true);
                    GetPlayerName(playerid, sendername, sizeof(sendername));
                    format(string, sizeof(string), "%s à reussi a raccorder les files et le véhicule demarre.", sendername);
                    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    new playerveh = GetPlayerVehicleID(playerid);
                    new engine,lights,alarm,doors,bonnet,boot,objective;
         		    GetVehicleParamsEx(playerveh,engine,lights,alarm,doors,bonnet,boot,objective);
                    SetVehicleParamsEx(playerveh,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
                    gEngine[playerid] = 1;
                    tempvoiturevoler[playerid] = 1;
                }
                case 1,2,3,4,5:
                {
                    GetPlayerName(playerid, sendername, sizeof(sendername));
                    format(string, sizeof(string), "%s n'a pas réussi a raccorder les files.", sendername);
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		            new playerveh = GetPlayerVehicleID(playerid);
                    new engine,lights,alarm,doors,bonnet,boot,objective;
         		    GetVehicleParamsEx(playerveh,engine,lights,alarm,doors,bonnet,boot,objective);
                    SetVehicleParamsEx(playerveh,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
					gEngine[playerid] = 0;
					tempvoiturevoler[playerid] = 1;
                }
            }
        }
		else
		{
		    gEngine[playerid] = 0;
		}
    }
    return 1;
}

public FarmerExit(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
	    if(IsAHarvest(vehicleid))
	    {
	        return 1;
	    }
	    if(FarmerVar[playerid] == 0)
	    {
	        return 1;
	    }
	    if(FarmerPickup[playerid][0] >= 1 && FarmerPickup[playerid][0] <= 22)
		{
			FarmerPickup[playerid][0]--;
		}
    	DisablePlayerCheckpoint(playerid);
    	FarmerVar[playerid] = 0;
	}
	return 1;
}

public DrugFarmerExit(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
	    if(IsADrugHarvest(vehicleid))
	    {
	        return 1;
	    }
	    if(DrugFarmerVar[playerid] == 0)
	    {
	        return 1;
	    }
	    if(DrugFarmerPickup[playerid][0] >= 1 && DrugFarmerPickup[playerid][0] <= 37)
		{
			DrugFarmerPickup[playerid][0]--;
		}
    	DisablePlayerCheckpoint(playerid);
    	DrugFarmerVar[playerid] = 0;
	}
	return 1;
}

public LoadDrugSystem()
{
	new arrCoords[1][64];
	new strFromFile2[256];
	new File: file = fopen("drugs_system.ini", io_read);
	if (file)
	{
		fread(file, strFromFile2);
		split(strFromFile2, arrCoords, ',');
		drugsys[DrugAmmount] = strval(arrCoords[0]);
		fclose(file);
	}
	return 1;
}

public SaveDrugSystem()
{
	new coordsstring[256];
	format(coordsstring, sizeof(coordsstring), "%d", drugsys[DrugAmmount]);
	new File: file2 = fopen("drugs_system.ini", io_write);
	fwrite(file2, coordsstring);
	fclose(file2);
	return 1;
}

public LoadMatsSystem()
{
	new arrCoords[1][64];
	new strFromFile2[256];
	new File: file = fopen("mats_system.ini", io_read);
	if (file)
	{
		fread(file, strFromFile2);
		split(strFromFile2, arrCoords, ',');
		matssys[MatsAmmount] = strval(arrCoords[0]);
		fclose(file);
	}
	return 1;
}

public SaveMatsSystem()
{
	new coordsstring[256];
	format(coordsstring, sizeof(coordsstring), "%d", matssys[MatsAmmount]);
	new File: file2 = fopen("mats_system.ini", io_write);
	fwrite(file2, coordsstring);
	fclose(file2);
	return 1;
}

public LoadingDrugsForSmugglers(playerid)
{
    new idcar = GetPlayerVehicleID(playerid);
	if(IsPlayerConnected(playerid))
	{
	    if(PlayerInfo[playerid][pJob] != 20)
     	{
      		SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas contrebandier de drogue.");
        	return 1;
		}
		if(!PlayerToPoint(7.0,playerid,2798.5601,-2416.6804,13.6310))
		{
		    SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas à la ferme de drogue.");
		    return 1;
		}
		if(GetPlayerMoney(playerid) < 299)
		{
		    SendClientMessage(playerid, COLOR_GREY, "Vous devez avoir 300$ sur vous quand vous faites de la contrebande de drogue.");
		    return 1;
		}
		if(IsASmuggleCar(idcar))
		{
		    if(drugsys[DrugAmmount] == 0)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "Pas de drogue dans la ferme.");
		        TogglePlayerControllable(playerid, true);
		        return 1;
		    }
		    if(drugsys[DrugAmmount] == 1)
		    {
		        SendClientMessage(playerid, COLOR_YELLOW, "Vous chargez 1 gramme de drogue... (pour 25$)");
		        SmuggledDrugs[playerid] = 1;
		        drugsys[DrugAmmount]--;
		        SafeGivePlayerMoney(playerid, -25);
		    }
		    if(drugsys[DrugAmmount] == 2)
		    {
		        SendClientMessage(playerid, COLOR_YELLOW, "Vous chargez 2 grammes de drogue... (pour 50$)");
		        SmuggledDrugs[playerid] = 2;
		        drugsys[DrugAmmount] -= 2;
		        SafeGivePlayerMoney(playerid, -50);
		    }
		    if(drugsys[DrugAmmount] == 3)
		    {
		        SendClientMessage(playerid, COLOR_YELLOW, "Vous chargez 3 grammes de drogue... (pour 75$)");
		        SmuggledDrugs[playerid] = 3;
		        drugsys[DrugAmmount] -= 3;
		        SafeGivePlayerMoney(playerid, -75);
		    }
		    if(drugsys[DrugAmmount] == 4)
		    {
		        SendClientMessage(playerid, COLOR_YELLOW, "Vous chargez 4 grammes de drogue... (pour 100$)");
		        SmuggledDrugs[playerid] = 4;
		        drugsys[DrugAmmount] -= 4;
		        SafeGivePlayerMoney(playerid, -100);
		    }
		    if(drugsys[DrugAmmount] == 5)
		    {
		        SendClientMessage(playerid, COLOR_YELLOW, "Vous chargez 5 grammes de drogue... (pour 125$)");
		        SmuggledDrugs[playerid] = 5;
		        drugsys[DrugAmmount] -= 5;
		        SafeGivePlayerMoney(playerid, -125);
		    }
		    if(drugsys[DrugAmmount] == 6)
		    {
		        SendClientMessage(playerid, COLOR_YELLOW, "Vous chargez 6 grammes de drogue... (pour 150$)");
		        SmuggledDrugs[playerid] = 6;
		        drugsys[DrugAmmount] -= 6;
		        SafeGivePlayerMoney(playerid, -150);
		    }
		    if(drugsys[DrugAmmount] == 7)
		    {
		        SendClientMessage(playerid, COLOR_YELLOW, "Vous chargez 7 grammes de drogue... (pour 175$)");
		        SmuggledDrugs[playerid] = 7;
		        drugsys[DrugAmmount] -= 7;
		        SafeGivePlayerMoney(playerid, -175);
		    }
		    if(drugsys[DrugAmmount] == 8)
		    {
		        SendClientMessage(playerid, COLOR_YELLOW, "Vous chargez 8 grammes de drogue... (pour 200$)");
		        SmuggledDrugs[playerid] = 8;
		        drugsys[DrugAmmount] -= 8;
		        SafeGivePlayerMoney(playerid, -200);
		    }
		    if(drugsys[DrugAmmount] == 9)
		    {
		        SendClientMessage(playerid, COLOR_YELLOW, "Vous chargez 9 grammes de drogue... (pour 225$)");
		        SmuggledDrugs[playerid] = 9;
		        drugsys[DrugAmmount] -= 9;
		        SafeGivePlayerMoney(playerid, -225);
		    }
		    if(drugsys[DrugAmmount] >= 10)
		    {
		        SendClientMessage(playerid, COLOR_YELLOW, "Vous chargez 10 grammes de drogue... (pour 250$)");
		        SmuggledDrugs[playerid] = 10;
		        drugsys[DrugAmmount] -= 10;
		        SafeGivePlayerMoney(playerid, -250);
		    }
		    SetPlayerCheckpoint(playerid, 2872.1375,945.4442,10.7500, 5.0);
		    SendClientMessage(playerid, COLOR_YELLOW, "Drogue chargée.");
		    SendClientMessage(playerid, COLOR_YELLOW, "Vite ! Livrez la drogue avant que la police ne vous arrete (marqueur rouge).");
		    SaveDrugSystem();
		    SetPlayerCriminal(playerid,255, "Contrebande de Drogue");
		    TogglePlayerControllable(playerid, true);
		}
	}
	return 1;
}

public SmugglerExit(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
	    if(IsASmuggleCar(vehicleid))
	    {
	        return 1;
	    }
	    if(SmugglerWork[playerid] == 0)
	    {
	        return 1;
	    }
    	DisablePlayerCheckpoint(playerid);
    	SmugglerWork[playerid] = 0;
	}
	return 1;
}

public JobPlaneExit(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
	    if(IsAJobPlane(vehicleid))
	    {
	         TogglePlayerControllable(playerid, 1);
	        return 1;
	    }
	    if(AirRoute[playerid] == 0)
	    {
	        return 1;
	    }
    	DisablePlayerCheckpoint(playerid);
    	AirRoute[playerid] = 0;
    	GameTextForPlayer(playerid, "Trajet Termine", 5000, 6);
    	SetVehicleToRespawn(vehicleid);
		TogglePlayerControllable(playerid, 1);
		PlayerInfo[playerid][pWork] += 1;
	}
	return 1;
}

public TrainPlaneExit(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
	    if(IsATrain(vehicleid))
	    {
	         TogglePlayerControllable(playerid, 1);
	        return 1;
	    }
	    if(TrainRoute[playerid] == 0)
	    {
	        return 1;
	    }
    	DisablePlayerCheckpoint(playerid);
    	TrainRoute[playerid] = 0;
    	GameTextForPlayer(playerid, "Trajet Termine", 5000, 6);
    	SetVehicleToRespawn(vehicleid);
		TogglePlayerControllable(playerid, 1);
		PlayerInfo[playerid][pWork] += 1;
	}
	return 1;
}

/*public SafeGivePlayerMoney(plyid, amounttogive)
{
	new curHour, curMinute, curSecond;
	gettime(curHour, curMinute, curSecond);
	ScriptMoneyUpdated[plyid] = curSecond;
	if (amounttogive < 0)
	{
		GivePlayerMoney(plyid, amounttogive);
		ScriptMoney[plyid] = (ScriptMoney[plyid] + amounttogive);
	}
	else
	{
		ScriptMoney[plyid] = (ScriptMoney[plyid] + amounttogive);
		GivePlayerMoney(plyid, amounttogive);
	}
	return 1;
}*/

public SafeGivePlayerMoney(plyid, amounttogive)
{
	ScriptMoneyUpdated[plyid] = 1;
	new RemoveMoney = ScriptMoney[plyid] + amounttogive;
	new AddMoney = ScriptMoney[plyid] + amounttogive;
	new string[20];
	format(string, sizeof(string),"$%d",amounttogive);
	if (amounttogive < 0)
	{
	    if(ReceivedMoney[plyid] == 0)
		{
		    {
			    TextDrawHideForPlayer(plyid, Textdraw52[plyid]);
				ReceivedMoney[plyid] = 1;
				TextDrawColor(Textdraw52[plyid], 0xFF0000FF);
				TextDrawSetString(Textdraw52[plyid], string);
				TextDrawShowForPlayer(plyid, Textdraw52[plyid]);
				MoneyTimer[plyid] = SetTimerEx("RedMoney",125,true,"i",plyid);
			}
		}
		else
		{
		    {
		 		KillTimer(MoneyTimer[plyid]);
		 		ReceivedMoney[plyid] = 1;
		 		TextDrawHideForPlayer(plyid, Textdraw52[plyid]);
			    TextDrawColor(Textdraw52[plyid], 0xFF0000FF);
			    TextDrawSetString(Textdraw52[plyid], string);
			    TextDrawShowForPlayer(plyid, Textdraw52[plyid]);
			    MoneyTimer[plyid] = SetTimerEx("RedMoney",125,true,"i",plyid);
			}
		}
		GivePlayerMoney(plyid, amounttogive);
		ScriptMoney[plyid] = RemoveMoney;
	}
	else
	{
		if(ReceivedMoney[plyid] == 0)
		{
		    {
			    TextDrawHideForPlayer(plyid, Textdraw52[plyid]);
				ReceivedMoney[plyid] = 1;
				TextDrawColor(Textdraw52[plyid], 0x00FF00FF);
				TextDrawSetString(Textdraw52[plyid], string);
				TextDrawShowForPlayer(plyid, Textdraw52[plyid]);
				MoneyTimer[plyid] = SetTimerEx("GreenMoney",125,true,"i",plyid);
			}
		}
		else
		{
		    {
		 		KillTimer(MoneyTimer[plyid]);
		 		ReceivedMoney[plyid] = 1;
		 		TextDrawHideForPlayer(plyid, Textdraw52[plyid]);
			    TextDrawColor(Textdraw52[plyid], 0x00FF00FF);
			    TextDrawSetString(Textdraw52[plyid], string);
			    TextDrawShowForPlayer(plyid, Textdraw52[plyid]);
			    MoneyTimer[plyid] = SetTimerEx("GreenMoney",125,true,"i",plyid);
			}
		}
		ScriptMoney[plyid] = AddMoney;
		GivePlayerMoney(plyid, amounttogive);
	}
 	ScriptMoneyUpdated[plyid] = 0;
	return 1;
}

public GreenMoney(playerid)
{
	if(ReceivedMoney[playerid] == 1)
	{
	    TextDrawHideForPlayer(playerid,Textdraw52[playerid]);
	    TextDrawColor(Textdraw52[playerid],0x00FF00EE);
	    TextDrawShowForPlayer(playerid, Textdraw52[playerid]);
	    ReceivedMoney[playerid] = 2;
	}
	else if(ReceivedMoney[playerid] == 2)
	{
	    TextDrawHideForPlayer(playerid,Textdraw52[playerid]);
	    TextDrawColor(Textdraw52[playerid],0x00FF00DD);
	    TextDrawShowForPlayer(playerid, Textdraw52[playerid]);
	    ReceivedMoney[playerid] = 3;
	}
	else if(ReceivedMoney[playerid] == 3)
	{
	    TextDrawHideForPlayer(playerid,Textdraw52[playerid]);
	    TextDrawColor(Textdraw52[playerid],0x00FF00CC);
	    TextDrawShowForPlayer(playerid, Textdraw52[playerid]);
	    ReceivedMoney[playerid] = 4;
	}
	else if(ReceivedMoney[playerid] == 4)
	{
	    TextDrawHideForPlayer(playerid,Textdraw52[playerid]);
	    TextDrawColor(Textdraw52[playerid],0x00FF00BB);
	    TextDrawShowForPlayer(playerid, Textdraw52[playerid]);
	    ReceivedMoney[playerid] = 5;
	}
	else if(ReceivedMoney[playerid] == 5)
	{
	    TextDrawHideForPlayer(playerid,Textdraw52[playerid]);
	    TextDrawColor(Textdraw52[playerid],0x00FF00AA);
	    TextDrawShowForPlayer(playerid, Textdraw52[playerid]);
	    ReceivedMoney[playerid] = 6;
	}
	else if(ReceivedMoney[playerid] == 6)
	{
	    TextDrawHideForPlayer(playerid,Textdraw52[playerid]);
	    TextDrawColor(Textdraw52[playerid],0x00FF0099);
	    TextDrawShowForPlayer(playerid, Textdraw52[playerid]);
	    ReceivedMoney[playerid] = 7;
	}
	else if(ReceivedMoney[playerid] == 7)
	{
	    TextDrawHideForPlayer(playerid,Textdraw52[playerid]);
	    TextDrawColor(Textdraw52[playerid],0x00FF0088);
	    TextDrawShowForPlayer(playerid, Textdraw52[playerid]);
	    ReceivedMoney[playerid] = 8;
	}
	else if(ReceivedMoney[playerid] == 8)
	{
	    TextDrawHideForPlayer(playerid,Textdraw52[playerid]);
	    TextDrawColor(Textdraw52[playerid],0x00FF0077);
	    TextDrawShowForPlayer(playerid, Textdraw52[playerid]);
	    ReceivedMoney[playerid] = 9;
	}
	else if(ReceivedMoney[playerid] == 9)
	{
	    TextDrawHideForPlayer(playerid,Textdraw52[playerid]);
	    TextDrawColor(Textdraw52[playerid],0x00FF0066);
	    TextDrawShowForPlayer(playerid, Textdraw52[playerid]);
	    ReceivedMoney[playerid] = 10;
	}
	else if(ReceivedMoney[playerid] == 10)
	{
	    TextDrawHideForPlayer(playerid,Textdraw52[playerid]);
	    TextDrawColor(Textdraw52[playerid],0x00FF0055);
	    TextDrawShowForPlayer(playerid, Textdraw52[playerid]);
	    ReceivedMoney[playerid] = 11;
	}
	else if(ReceivedMoney[playerid] == 11)
	{
	    TextDrawHideForPlayer(playerid,Textdraw52[playerid]);
	    TextDrawColor(Textdraw52[playerid],0x00FF0044);
	    TextDrawShowForPlayer(playerid, Textdraw52[playerid]);
	    ReceivedMoney[playerid] = 12;
	}
	else if(ReceivedMoney[playerid] == 12)
	{
	    TextDrawHideForPlayer(playerid,Textdraw52[playerid]);
	    TextDrawColor(Textdraw52[playerid],0x00FF0033);
	    TextDrawShowForPlayer(playerid, Textdraw52[playerid]);
	    ReceivedMoney[playerid] = 13;
	}
	else if(ReceivedMoney[playerid] == 13)
	{
	    TextDrawHideForPlayer(playerid, Textdraw52[playerid]);
	    TextDrawColor(Textdraw52[playerid], 0xFFFFFFFF);
	    KillTimer(MoneyTimer[playerid]);
	}
}

public RedMoney(playerid)
{
	if(ReceivedMoney[playerid] == 1)
	{
	    TextDrawHideForPlayer(playerid,Textdraw52[playerid]);
	    TextDrawColor(Textdraw52[playerid],0xFF0000EE);
	    TextDrawShowForPlayer(playerid, Textdraw52[playerid]);
	    ReceivedMoney[playerid] = 2;
	}
	else if(ReceivedMoney[playerid] == 2)
	{
	    TextDrawHideForPlayer(playerid,Textdraw52[playerid]);
	    TextDrawColor(Textdraw52[playerid],0xFF0000DD);
	    TextDrawShowForPlayer(playerid, Textdraw52[playerid]);
	    ReceivedMoney[playerid] = 3;
	}
	else if(ReceivedMoney[playerid] == 3)
	{
	    TextDrawHideForPlayer(playerid,Textdraw52[playerid]);
	    TextDrawColor(Textdraw52[playerid],0xFF0000CC);
	    TextDrawShowForPlayer(playerid, Textdraw52[playerid]);
	    ReceivedMoney[playerid] = 4;
	}
	else if(ReceivedMoney[playerid] == 4)
	{
	    TextDrawHideForPlayer(playerid,Textdraw52[playerid]);
	    TextDrawColor(Textdraw52[playerid],0xFF0000BB);
	    TextDrawShowForPlayer(playerid, Textdraw52[playerid]);
	    ReceivedMoney[playerid] = 5;
	}
	else if(ReceivedMoney[playerid] == 5)
	{
	    TextDrawHideForPlayer(playerid,Textdraw52[playerid]);
	    TextDrawColor(Textdraw52[playerid],0xFF0000AA);
	    TextDrawShowForPlayer(playerid, Textdraw52[playerid]);
	    ReceivedMoney[playerid] = 6;
	}
	else if(ReceivedMoney[playerid] == 6)
	{
	    TextDrawHideForPlayer(playerid,Textdraw52[playerid]);
	    TextDrawColor(Textdraw52[playerid],0xFF000099);
	    TextDrawShowForPlayer(playerid, Textdraw52[playerid]);
	    ReceivedMoney[playerid] = 7;
	}
	else if(ReceivedMoney[playerid] == 7)
	{
	    TextDrawHideForPlayer(playerid,Textdraw52[playerid]);
	    TextDrawColor(Textdraw52[playerid],0xFF000088);
	    TextDrawShowForPlayer(playerid, Textdraw52[playerid]);
	    ReceivedMoney[playerid] = 8;
	}
	else if(ReceivedMoney[playerid] == 8)
	{
	    TextDrawHideForPlayer(playerid,Textdraw52[playerid]);
	    TextDrawColor(Textdraw52[playerid],0xFF000077);
	    TextDrawShowForPlayer(playerid, Textdraw52[playerid]);
	    ReceivedMoney[playerid] = 9;
	}
	else if(ReceivedMoney[playerid] == 9)
	{
	    TextDrawHideForPlayer(playerid,Textdraw52[playerid]);
	    TextDrawColor(Textdraw52[playerid],0xFF000066);
	    TextDrawShowForPlayer(playerid, Textdraw52[playerid]);
	    ReceivedMoney[playerid] = 10;
	}
	else if(ReceivedMoney[playerid] == 10)
	{
	    TextDrawHideForPlayer(playerid,Textdraw52[playerid]);
	    TextDrawColor(Textdraw52[playerid],0xFF000055);
	    TextDrawShowForPlayer(playerid, Textdraw52[playerid]);
	    ReceivedMoney[playerid] = 11;
	}
	else if(ReceivedMoney[playerid] == 11)
	{
	    TextDrawHideForPlayer(playerid,Textdraw52[playerid]);
	    TextDrawColor(Textdraw52[playerid],0xFF000044);
	    TextDrawShowForPlayer(playerid, Textdraw52[playerid]);
	    ReceivedMoney[playerid] = 12;
	}
	else if(ReceivedMoney[playerid] == 12)
	{
	    TextDrawHideForPlayer(playerid,Textdraw52[playerid]);
	    TextDrawColor(Textdraw52[playerid],0xFF000033);
	    TextDrawShowForPlayer(playerid, Textdraw52[playerid]);
	    ReceivedMoney[playerid] = 13;
	}
	else if(ReceivedMoney[playerid] == 13)
	{
	    TextDrawHideForPlayer(playerid, Textdraw52[playerid]);
	    TextDrawColor(Textdraw52[playerid], 0xFFFFFFFF);
	    KillTimer(MoneyTimer[playerid]);
	}
}


public SafeResetPlayerMoney(plyid)
{
	new curHour, curMinute, curSecond;
	gettime(curHour, curMinute, curSecond);
	ScriptMoneyUpdated[plyid] = curSecond;
	ResetPlayerMoney(plyid);
	ScriptMoney[plyid] = 0;
	return 1;
}

public SafeGivePlayerWeapon(plyid, weaponid, ammo)
{
/*	new curHour, curMinute, curSecond;
	gettime(curHour, curMinute, curSecond);
	ScriptWeaponsUpdated[plyid] = curSecond;*/
	GivePlayerWeapon(plyid, weaponid, ammo);
	//UpdateWeaponSlots(plyid);
	return 1;
}

public SafeResetPlayerWeapons(plyid)
{
/*	new curHour, curMinute, curSecond;
	gettime(curHour, curMinute, curSecond);
	ScriptWeaponsUpdated[plyid] = curSecond;*/
	ResetPlayerWeapons(plyid);
	//UpdateWeaponSlots(plyid);
	return 1;
}

public UpdateWeaponSlots(plyid)
{
	new weaponid, ammo;
	for (new i=0; i<13; i++)
	{
		GetPlayerWeaponData(plyid, i, weaponid, ammo);
		ScriptWeapons[plyid][i] = weaponid;
	}
	return 1;
}

/*public BanAdd(bantype, sqlplayerid, ip[], hackamount)
{
	new query[128];
	format(query, sizeof(query), "INSERT INTO bans (type,player,ip,time,amount) VALUES ('%d',%d,'%s',UNIX_TIMESTAMP(),%d)", bantype,sqlplayerid,ip,hackamount);
	samp_mysql_query(query);
	return 1;
}*/

public UnsetFirstSpawn(playerid)
{
	FirstSpawn[playerid] = 0;
}

public LoadHQLocks()
{
	new arrCoords[5][64];
	new strFromFile2[256];
	new File: file = fopen("hq_locks.ini", io_read);
	if (file)
	{
		fread(file, strFromFile2);
		split(strFromFile2, arrCoords, ',');
		hqlock[surlock] = strval(arrCoords[0]);
		hqlock[luclock] = strval(arrCoords[1]);
		hqlock[guclock] = strval(arrCoords[2]);
		hqlock[stlock] = strval(arrCoords[3]);
		hqlock[iolock] = strval(arrCoords[4]);
		fclose(file);
	}
	return 1;
}

public SaveCoffreHQ()
{
	new coordsstring[256];
	format(coordsstring, sizeof(coordsstring), "%d", coffrehq[cosacoffre]);
	new File: file2 = fopen("hq_coffre.ini", io_write);
	fwrite(file2, coordsstring);
	fclose(file2);
	return 1;
}

public LoadCoffreHQ()
{
	new arrCoords[1][64];
	new strFromFile2[256];
	new File: file = fopen("hq_coffre.ini", io_read);
	if (file)
	{
		fread(file, strFromFile2);
		split(strFromFile2, arrCoords, ',');
		coffrehq[cosacoffre] = strval(arrCoords[0]);
		fclose(file);
	}
	return 1;
}

public SaveHQLocks()
{
	new coordsstring[256];
	format(coordsstring, sizeof(coordsstring), "%d,%d,%d,%d", hqlock[surlock], hqlock[luclock], hqlock[guclock], hqlock[stlock], hqlock[iolock]);
	new File: file2 = fopen("hq_locks.ini", io_write);
	fwrite(file2, coordsstring);
	fclose(file2);
	return 1;
}

public ClearKnock(playerid)
{
	TogglePlayerControllable(playerid, 1);
	ClearAnimations(playerid);
	KnockedDown[playerid] = 0;
}

public DrugEffectGone(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(UsingDrugs[playerid] == 1)
	    {
	    	SetPlayerWeather(playerid, DefaultWeather);
	    	GameTextForPlayer(playerid, "~w~Effet de la Drogue ~p~Dissipe", 3000, 1);
	    	ClearAnimations(playerid);
	    	SetTimerEx("UsingDrugsUnset", 25000, false, "i", playerid);
		}
	}
	return 1;
}

public UsingDrugsUnset(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    UsingDrugs[playerid] = 0;
	}
	return 1;
}

/*public UpdatePlayerPosition(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(gPlayerLogged[playerid])
	    {
	    	new Float:x, Float:y, Float:z;
     		GetPlayerPos(playerid,x,y,z);
			PlayerInfo[playerid][pPos_x] = x;
			PlayerInfo[playerid][pPos_y] = y;
			PlayerInfo[playerid][pPos_z] = z;
			MySQLCheckConnection();
			new query[MAX_STRING];
			format(query, MAX_STRING, "UPDATE players SET ");
			MySQLUpdatePlayerFlo(query, PlayerInfo[playerid][pSQLID], "Pos_x", PlayerInfo[playerid][pPos_x]);
			MySQLUpdatePlayerFlo(query, PlayerInfo[playerid][pSQLID], "Pos_y", PlayerInfo[playerid][pPos_y]);
			MySQLUpdatePlayerFlo(query, PlayerInfo[playerid][pSQLID], "Pos_z", PlayerInfo[playerid][pPos_z]);
			MySQLUpdatePlayerInt(query, PlayerInfo[playerid][pSQLID], "Inte", PlayerInfo[playerid][pInt]);
			MySQLUpdatePlayerInt(query, PlayerInfo[playerid][pSQLID], "VirWorld", PlayerInfo[playerid][pVirWorld]);
			MySQLUpdatePlayerInt(query, PlayerInfo[playerid][pSQLID], "Crashed", PlayerInfo[playerid][pCrashed]);
			MySQLUpdateFinish(query, PlayerInfo[playerid][pSQLID]);
		}
	}
	return 1;
}*/

public UnsetAfterTutorial(playerid)
{
	if(IsPlayerConnected(playerid))
	{
        AfterTutorial[playerid] = 0;
	}
	return 1;
}

public AfterSpray1(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
    		new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, 2076.5461,-1832.5647,13.5545);
		}
	}
	return 1;
}

public AfterSpray2(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(GetPlayerState(playerid) == 2)
	    {
    		new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, 1025.4225,-1033.1587,31.8380);
		}
	}
	return 1;
}

public AfterSpray3(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(GetPlayerState(playerid) == 2)
	    {
    		new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, 488.3767,-1731.1235,11.2469);
		}
	}
	return 1;
}

public AfterSpray4(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(GetPlayerState(playerid) == 2)
	    {
    		new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, 720.2908,-467.6113,16.3437);
		}
	}
	return 1;
}

public UnsetCrash(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    PlayerInfo[playerid][pCrashed] = 0;
	}
	return 1;
}

public backtoclothes(playerid)
{
	if(IsPlayerConnected(playerid))
	{
 		SetPlayerPos(playerid, ChangePos[playerid][0],ChangePos[playerid][1],ChangePos[playerid][2]);
   		SetPlayerInterior(playerid,ChangePos2[playerid][0]);
	}
	return 1;
}

public RemovePlayerWeapon(playerid, weaponid)
{
	new plyWeapons[12] = 0;
	new plyAmmo[12] = 0;
	for(new slot = 0; slot != 12; slot++)
	{
		new wep, ammo;
		GetPlayerWeaponData(playerid, slot, wep, ammo);

		if(wep != weaponid && ammo != 0)
		{
			GetPlayerWeaponData(playerid, slot, plyWeapons[slot], plyAmmo[slot]);
		}
	}

	SafeResetPlayerWeapons(playerid);
	for(new slot = 0; slot != 12; slot++)
	{
	    if(plyAmmo[slot] != 0)
	    {
			SafeGivePlayerWeapon(playerid, plyWeapons[slot], plyAmmo[slot]);
		}
	}
	return 1;
}

stock CheckPlayerDistanceToVehicle(Float:radi, playerid, vehicleid)
{
	if(IsPlayerConnected(playerid))
	{
	    new Float:PX,Float:PY,Float:PZ,Float:X,Float:Y,Float:Z;
	    GetPlayerPos(playerid,PX,PY,PZ);
	    GetVehiclePos(vehicleid, X,Y,Z);
	    new Float:DistanceS = (X-PX)*(X-PX)+(Y-PY)*(Y-PY)+(Z-PZ)*(Z-PZ);
	    if(DistanceS <= radi*radi)
	    {
	        return 1;
	    }
	}
	return 0;
}

public UpdateBurgerPositions()
{
	for(new i = 0; i < MAX_PLAYERS; i ++)
	{
	    if(IsMenuShowed[i] == 0 && GetPlayerInterior(i) == 0)
	    {
			for(new j = 0; j < sizeof(BurgerDriveIn); j ++)
			{
			    new Float:dist;
			    dist = GetDistance(i, BurgerDriveIn[j][0], BurgerDriveIn[j][1]);
			    if(dist < 5)
			    {
			        GameTextForPlayer(i, "~n~~n~~n~~w~Bienvenue au ~r~Burger King~w~, svp faites votre commande", 2000, 3);
			        TogglePlayerControllable(i, 0);
			        SetTimerEx("ShowMenuBurger", 2000, 0, "i", i);
			    }
			}
		}
	}
}

public ShowMenuBurger(i)
{
    BurgerShot = CreateMenu("Burger Shot", 2, 125, 150, 300);
	AddMenuItem(BurgerShot, 0, "Baby Burger");
	AddMenuItem(BurgerShot, 1, "$3");
	AddMenuItem(BurgerShot, 0, "Double Cheese");
	AddMenuItem(BurgerShot, 1, "$6");
	AddMenuItem(BurgerShot, 0, "Triple Whopper");
	AddMenuItem(BurgerShot, 1, "$9");
	AddMenuItem(BurgerShot, 0, "- Exit -");
	ShowMenuForPlayer(BurgerShot, i);
	IsMenuShowed[i] = 1;
}

public UpdateChickenPositions()
{
    for(new i = 0; i < MAX_PLAYERS; i ++)
	{
	    if(IsMenuShowed[i] == 0)
	    {
			for(new j = 0; j < sizeof(ChickenDriveIn); j ++)
			{
			    new Float:dist;
			    dist = GetDistance(i, ChickenDriveIn[j][0], ChickenDriveIn[j][1]);
			    if(dist < 5)
			    {
			        GameTextForPlayer(i, "~n~~n~~n~~w~Bienvenue au ~r~Cluckin' Bell~w~, svp faites votre commande", 2000, 3);
			        TogglePlayerControllable(i, 0);
			        SetTimerEx("ShowMenuChicken", 2000, 0, "i", i);
				}
			}
		}
	}
}

public ShowMenuChicken(i)
{
    CluckinBell = CreateMenu("Cluckin' Bell", 2, 125, 150, 300);
	AddMenuItem(CluckinBell, 0, "Chicken Nuggets");
	AddMenuItem(CluckinBell, 1, "$3");
	AddMenuItem(CluckinBell, 0, "Chicken Wing");
	AddMenuItem(CluckinBell, 1, "$6");
	AddMenuItem(CluckinBell, 0, "Crisp Chicken");
	AddMenuItem(CluckinBell, 1, "$9");
	AddMenuItem(CluckinBell, 0, "- Exit -");
	ShowMenuForPlayer(CluckinBell, i);
	IsMenuShowed[i] = 1;
}

public CanDriveThruAgain(playerid)
{
	IsMenuShowed[playerid] = 0;
}

public Float:GetDistance(playerid, Float:x, Float:y)
{
	new Float:x2, Float:y2, Float:z2;
	GetPlayerPos(playerid, x2, y2, z2);
	x = x - x2;
	y = y - y2;
	return floatsqroot(x*x+y*y);
}

public TraceLastCall()
{
	pdtrace = 0;
	pdtrace_x = 0;
	pdtrace_y = 0;
	pdtrace_z = 0;
	emdtrace = 0;
	emdtrace_x = 0;
	emdtrace_y = 0;
	emdtrace_z = 0;
}

public ReportReset(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(JustReported[playerid] == 1)
	    {
			JustReported[playerid] = 0;
	    }
	}
}

public ReduceTimer(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(ReduceTime[playerid] == 1)
	    {
			ReduceTime[playerid] = 0;
	    }
	}
}

public RobTimer(playerid)
{
	if(PlayerInfo[playerid][probbank] > 1)
	{
		PlayerInfo[playerid][probbank]--;
	}
	if(PlayerInfo[playerid][probbank] == 1)
	{
		PlayerInfo[playerid][probbank] = 0;
		SendClientMessage(playerid, COLOR_RED, "* Vous pouvez à nouveau braquer la Banque.");
	}
	if(PlayerInfo[playerid][probbank] < 0)
	{
		PlayerInfo[playerid][probbank] = 0;
		SendClientMessage(playerid, COLOR_RED, "* Vous pouvez à nouveau braquer la Banque.");
	}
	if(lavoituregarer[playerid] > 0)
	{
	    lavoituregarer[playerid] --;
	}
	return 1;
}

public DonnerArgentBraquage(playerid)
{
	if(PlayerToPoint(45, playerid,2144.0420,1638.5311,993.5761))
	{
        new string[256];
        format(string, sizeof(string), "*** A TOUTES LES UNITES : Les braqueurs ont l'argent ! Faites tout pour les arreter ! ***");
		SendRadioMessage(1, TEAM_RADIO_COLOR, string);
		SendRadioMessage(2, TEAM_RADIO_COLOR, string);
		SendRadioMessage(3, TEAM_RADIO_COLOR, string);
		SendRadioMessage(18, TEAM_RADIO_COLOR, string);
		//new sendername[MAX_PLAYER_NAME];
		//GetPlayerName(playerid, sendername, sizeof(sendername));
		if(PlayerToPoint(30, playerid, 2144.0420,1638.5311,993.5761))
		{
			//robmoney = random(50000) + random(100000);
			robmoney = 55000 + random(75000);
		}
		else
		{
		    //robmoney = random(10000) + random(10000);
		    SendClientMessage(playerid, COLOR_RED, "* Vous avez quitté la zone, le braquage a échoué.");
		    braquageencours = 0;
		}
		format(string, sizeof(string), "* Vous avez volé %d$ !!!",robmoney);
		SendClientMessage(playerid,COLOR_YELLOW,string);
		SetPlayerCheckpoint(playerid,1054.8140,2148.3220,10.8203,3);
		SendClientMessage(playerid,COLOR_YELLOW,"Allez vite blanchir l'argent ! (Point Rouge)");
		SendClientMessage(playerid, COLOR_RED, "Ne vous faites surtout pas attraper par la police !");
		return 0;
	}
	else
	{
        ilbraque[playerid] = 0;
	    braquageencours = 0;
	    NombreBraqueur = 0;
	    SendClientMessage(playerid, COLOR_RED, "* Vous avez quitté la zone, le braquage a échoué.");
	}
	return 1;
}

public Braquage()
{
    braquageencours = 0;
}

public PointPermis(playerid)
{
	if(PlayerInfo[playerid][pPointPermis] == 0)
		{
			PlayerInfo[playerid][pPointPermis] = 0;
			PlayerInfo[playerid][pCarLic] = 0;
			PlayerInfo[playerid][pMotoLic] = 0;
			PlayerInfo[playerid][pLourdLic] = 0;
			SendClientMessage(playerid, COLOR_RED, "* Vous n'avez plus de point sur votre permis de conduire. Vous venez de le perdre.");
		}
 	if(PlayerInfo[playerid][pPointPermis] < 0)
	    {
            PlayerInfo[playerid][pPointPermis] = 0;
			PlayerInfo[playerid][pCarLic] = 0;
			PlayerInfo[playerid][pMotoLic] = 0;
			PlayerInfo[playerid][pLourdLic] = 0;
		}
	return 1;
}

public Float:GetPlayerSpeed(playerid)
{
    new Float:X, Float:Y, Float:Z;
	GetVehicleVelocity(GetPlayerVehicleID(playerid), X, Y, Z);
    return (floatsqroot(X * X + Y * Y + Z * Z) * 145);
}

public EnvoiAnnonce() //By MrT
{
	switch (Ann)
	{
	    case 0:
 		{
	 		SendClientMessageToAll(0x32CD32AA, Annonces[0]); Ann++;
 		} /*Envoi de premier message*/
	    case 1:
		{
			SendClientMessageToAll(Orange, Annonces[1]); Ann++;
		}
	    case 2:
		{
			SendClientMessageToAll(0xF5DEB3AA, Annonces[2]); Ann++;
		}
	    case 3:
		{
			SendClientMessageToAll(COLOR_RED, Annonces[3]); Ann++;
		}
	    case 4:
		{
			SendClientMessageToAll(BLANC, Annonces[4]); Ann++;
		}
		case 5:
		{
			SendClientMessageToAll(0x9FB1EEAA, Annonces[5]); Ann++;
		}
		case 6:
		{
			SendClientMessageToAll(COLOR_GREEN, Annonces[6]); Ann++;
		}
		case 7:
		{
			SendClientMessageToAll(0x2641FEAA, Annonces[7]); Ann=0;
		} /*Envoi du dernier message*/
	}

	return 1;
}
public OuvertureGrille(playerid)
{
	grilleouverte[playerid] = 0;
}
public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
    new sendername[MAX_PLAYER_NAME];
	new string[256];
	if(dialogid == GPSD)
    {
    GetPlayerName(playerid, sendername, sizeof(sendername));
  		if(response)
		{
		    format(string, sizeof(string), " %s active son GPS", sendername);
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
 			if(listitem == 0)
			{
                SendClientMessage(playerid, COLOR_GREEN, "Alhambra");
                SetPlayerCheckpoint(playerid,1833.1398,-1681.9974,13.4858,3.0);
			}
			if(listitem == 1)
			{
			    SendClientMessage(playerid, COLOR_GREEN, "Pig Pen");
                SetPlayerCheckpoint(playerid,2414.5964,-1221.0416,25.2290,3.0);
			}
			if(listitem == 2)
			{
			    SendClientMessage(playerid, COLOR_GREEN, "Aztecas Club");
                SetPlayerCheckpoint(playerid,1194.8167,-1654.6688,13.8962,3.0);
			}
			if(listitem == 3)
			{
			    SendClientMessage(playerid, COLOR_GREEN, "Binco");
                SetPlayerCheckpoint(playerid,2246.6794,-1665.2826,15.4766,3.0);
			}
			if(listitem == 4)
			{
                SendClientMessage(playerid, COLOR_GREEN, "Mairie");
                SetPlayerCheckpoint(playerid,1481.3687,-1756.4496,17.5313,3.0);
			}
			if(listitem == 5)
			{
			    SendClientMessage(playerid, COLOR_GREEN, "Dillimore Club");
                SetPlayerCheckpoint(playerid,681.0392,-477.4043,16.3359,3.0);
			}
			if(listitem == 6)
			{
			    SendClientMessage(playerid, COLOR_GREEN, "Dillimore PD");
                SetPlayerCheckpoint(playerid,631.3008,-572.4238,16.3359,3.0);
			}
			if(listitem == 7)
			{
                SendClientMessage(playerid, COLOR_GREEN, "Jefferson");
                SetPlayerCheckpoint(playerid,2220.9824,-1148.7661,25.3504,3.0);
			}
			if(listitem == 8)
			{
			    SendClientMessage(playerid, COLOR_GREEN, "Ganton Gym");
                SetPlayerCheckpoint(playerid,2227.0481,-1719.8958,13.5357,3.0);
			}
			if(listitem == 9)
			{
			    SendClientMessage(playerid, COLOR_GREEN, "Grove Street");
                SetPlayerCheckpoint(playerid,2492.7354,-1687.2053,13.5135,3.0);
			}
			if(listitem == 10)
			{
                SendClientMessage(playerid, COLOR_GREEN, "Hospital");
                SetPlayerCheckpoint(playerid,2028.0903,-1403.9392,17.2369,3.0);
			}
			if(listitem == 11)
			{
			    SendClientMessage(playerid, COLOR_GREEN, "Ten Green Bottles");
                SetPlayerCheckpoint(playerid,2308.1775,-1647.0482,14.8270,3.0);
			}
			if(listitem == 12)
			{
			    SendClientMessage(playerid, COLOR_GREEN, "Skate Park");
                SetPlayerCheckpoint(playerid,1919.3882,-1415.2595,13.5703,3.0);
			}
			if(listitem == 13)
			{
			    SendClientMessage(playerid, COLOR_GREEN, "Banque");
                SetPlayerCheckpoint(playerid,1462.4005,-1017.4537,25.4479,3.0);
			}
			if(listitem == 14)
			{
			    SendClientMessage(playerid, COLOR_GREEN, "Commissariat");
                SetPlayerCheckpoint(playerid,1549.4847,-1675.7738,14.9880,3.0);
			}
			if(listitem == 15)
			{
			    SendClientMessage(playerid, COLOR_GREEN, "Unity Station (Gare)");
                SetPlayerCheckpoint(playerid,805.1725,-1865.0989,13.5797,3.0);
			}
			if(listitem == 16)
			{
			    SendClientMessage(playerid, COLOR_GREEN, "A.N.P.E");
                SetPlayerCheckpoint(playerid,1722.7952,-1603.5991,15.1365,3.0);
			}
		}
   }
   if(dialogid == RETIRERMENU)
   {
		if(response)
		{
			new log[256];
			format(log, 256, "/retirer %s", inputtext);//
			return OnPlayerCommandText(playerid, log);//
		}
   }
   if(dialogid == DEPOSERMENU)
   {
		if(response)
		{
			new log[256];
			format(log, 256, "/deposer %s", inputtext);//
			return OnPlayerCommandText(playerid, log);//
		}
   }
	if(dialogid == menuaide)
    {
  		if(response)
		{
 			if(listitem == 0)
			{
			    SendClientMessage(playerid, COLOR_WHITE,":: Compte :: /regles /ident /stats /changerpass /levelup /upgrade /restaurerskin");
				SendClientMessage(playerid, COLOR_WHITE,":: Générale :: /payer /chariter /heure /acheter /delouervoiture /delouermoto /changerclef /id /boire /vetements /ouvrirporte(/op) /fermerporte (/fp)");
				SendClientMessage(playerid, COLOR_WHITE,":: Générale :: /resetupgrades(50k) /acheterarme /fermer /skill /permis /montrerpermis(/mp) /rapport /question /animlist /stopanim /jerrican");
				SendClientMessage(playerid, COLOR_WHITE,":: Générale :: (/ra)pport /annuler /accepter /ejecter /utiliserdrogue /contrat /remplir /membres /louerchambre /accident /choixcombat");
				SendClientMessage(playerid, COLOR_WHITE,":: Générale :: /fenetre /piece /coffre (/inv)entaire /visiter /ko /donner /ouvrirgrille (/ouvrirg) /carteidentite /fumer /serrermain");
		  		SendClientMessage(playerid, COLOR_WHITE,":: Chat :: (/p)m (/c)rier (/o)oc /bas (/b) (/f)action /me /do /essayer (/n)ewbie)");
				SendClientMessage(playerid, COLOR_WHITE,":: Banque :: /compte /retirer /deposer /virement /atm /rangera /sortira");
				if (PlayerInfo[playerid][pAdmin] >= 1)
				{
					SendClientMessage(playerid, COLOR_YELLOW, ":: ADMIN :: (/a)dmin (/aa)ide");
				}
			}
			if(listitem == 1)
			{
				if(PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 1)
				{
        SendClientMessage(playerid, COLOR_YELLOW2, ":: LSPD :: (/r)adio (/d)epartments (/m)egaphone (/su)spect /mdc /arreter /duty /rechercher (/men)otter (/ta)zer /camerapolice /enleversabot");
					SendClientMessage(playerid, COLOR_YELLOW2, ":: LSPD :: /fouiller /fouillerinv /confisquer /amende (/gov)ernment /delivrer /defoncer /tirer /demenotter /verifierceinture /mettresabot");
					SendClientMessage(playerid, COLOR_YELLOW2, ":: LSPD :: /undercover /besoinassistance(/ba) /defoncer /swaton /swatoff /fermerporte /ouvrirporte /equiper /stopbesoinasistance(/sba) /droits");
					SendClientMessage(playerid, COLOR_YELLOW2, ":: LSPD :: /barrage(/bar) /enleverbarrage(/eb) /enleverbarragetous(/ebtous) /montrerbadge /tracerdernierappel(/tda) /donnerpermisarme");
					SendClientMessage(playerid, COLOR_YELLOW2, ":: Fourriere :: /ouvrirf /servicefouriere /camerafouriere  /fgarer");
	   			}
	   			if(PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pMember] == 2)
			{
   				SendClientMessage(playerid, GREEN, ":: FBI :: (/r)adio (/d)epartments (/m)egaphone (/su)spect /mdc /arreter /duty /rechercher (/men)otter (/ta)zer /agent /montrerid /fouillerinv");
				SendClientMessage(playerid, GREEN, ":: FBI :: /fouiller /confisquer /amende (/gov)ernment /delivrer /defoncer /tirer /demenotter /tactiqueon /tactiqueoff /tactique /droits");
   			}
   			if(PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pMember] == 3)
			{
   				SendClientMessage(playerid, GREEN, ":: Militaire :: (/r)adio (/d)epartments (/m)egaphone (/su)spect /mdc /arreter /rechercher (/men)otter (/ta)zer");
				SendClientMessage(playerid, GREEN, ":: Militaire :: /fouiller /fouillerinv /confisquer /amende (/gouv)ernment /delivrer /defoncer /tirer /demenotter");
   			}
   			if(PlayerInfo[playerid][pLeader] == 14 || PlayerInfo[playerid][pMember] == 14)
			{
   				SendClientMessage(playerid, GREEN, ":: Bikers :: (/r)adio (/ang)lais /ouvrirqg /gpb");
   			}
   			if(PlayerInfo[playerid][pLeader] == 15 || PlayerInfo[playerid][pMember] == 15)
			{
   				SendClientMessage(playerid, GREEN, ":: Ballas :: (/r)adio (/af)ricain /ouvrirqg /gpb");
   			}
   			if(PlayerInfo[playerid][pLeader] == 5 || PlayerInfo[playerid][pMember] == 5)
			{
   				SendClientMessage(playerid, GREEN, ":: Vagos :: (/r)adio (/esp)agnol /ouvrirqg /gpb");
   			}
   			if(PlayerInfo[playerid][pLeader] == 4 || PlayerInfo[playerid][pMember] == 4)
			{
   				SendClientMessage(playerid, GREEN, ":: Hopital :: /duty (/r)adio /f (/hos)ital /soigner /tda");
   			}
   			if(PlayerInfo[playerid][pLeader] == 6 || PlayerInfo[playerid][pMember] == 6)
			{
   				SendClientMessage(playerid, GREEN, ":: La Famiglia Vercetti :: /ouvrirgrille (/og) /ouvrirtunning /fermertunning (/r)adio /italien /gpb");
   			}
            if(PlayerInfo[playerid][pLeader] == 8 || PlayerInfo[playerid][pMember] == 8)
			{
			    SendClientMessage(playerid, GREEN, ":: HITMAN :: /portable");
            }
            if(PlayerInfo[playerid][pLeader] == 9 || PlayerInfo[playerid][pMember] == 9)
			{
			    SendClientMessage(playerid, GREEN, ":: JOB :: /journal /journaux /live /news [text] /j");
		    }
		    if(PlayerInfo[playerid][pLeader] == 16 || PlayerInfo[playerid][pMember] == 16)
			{
   				SendClientMessage(playerid, GREEN, ":: Groove :: (/r)adio (/Ja)maicain /ouvrirqg /gpb");
   			}
   			if(PlayerInfo[playerid][pLeader] == 17 || PlayerInfo[playerid][pMember] == 17)
			{
   				SendClientMessage(playerid, GREEN, ":: Corleone :: (/r)adio /gpb");
   			}
   			if(PlayerInfo[playerid][pLeader] == 18 || PlayerInfo[playerid][pMember] == 18)
			{
   				SendClientMessage(playerid, GREEN, ":: C.I.A :: (/r)adio /gpb /droits /arreter /menotter /tazer");
   			}
		    if(PlayerInfo[playerid][pLeader] == 7 || PlayerInfo[playerid][pMember] == 7)
			{
   				SendClientMessage(playerid, GREEN, ":: Gouvernement :: /duty /gpb /gouv");
   				SendClientMessage(playerid, GREEN, ":: Gouvernement :: LEADER: /voirtax /deposertax /retirertax /donnertaxe (Donne de l'argent aux policiers)");
   				SendClientMessage(playerid, GREEN, ":: Gouvernement :: LEADER: /virergov /rolegov /changertaxe");
   			}
			}
			if(listitem == 2)
			{
			    if(PlayerInfo[playerid][pJob] == 1) {
			    SendClientMessage(playerid,COLOR_YELLOW2,":: JOB :: /trouver"); }
			    else if(PlayerInfo[playerid][pJob] == 2) {
			    SendClientMessage(playerid,COLOR_YELLOW2,":: JOB :: /gratuit"); }
			    else if(PlayerInfo[playerid][pJob] == 3) {
			    SendClientMessage(playerid,COLOR_YELLOW2,":: JOB :: /sex /masturber"); }
			    else if(PlayerInfo[playerid][pJob] == 4) {
			    SendClientMessage(playerid,COLOR_YELLOW2,":: JOB :: /vendredrogue /prendre drogue"); }
			    else if(PlayerInfo[playerid][pJob] == 5) {
			    SendClientMessage(playerid,COLOR_YELLOW2,":: JOB :: /journal /journaux /live /news [text] /j"); }
			    else if(PlayerInfo[playerid][pJob] == 6) {
			    SendClientMessage(playerid,COLOR_YELLOW2,":: JOB :: /montrermenu /uniforme"); }
			    else if(PlayerInfo[playerid][pJob] == 7) {
			    SendClientMessage(playerid,COLOR_YELLOW2,":: JOB :: /reparer /remplir /peinture /(tr)avail /rem"); }
			    else if(PlayerInfo[playerid][pJob] == 8) {
			    SendClientMessage(playerid,COLOR_YELLOW2,":: JOB :: /garde"); }
			    else if(PlayerInfo[playerid][pJob] == 9) {
			    SendClientMessage(playerid,COLOR_YELLOW2,":: JOB :: /vendrearme"); }
			    else if(PlayerInfo[playerid][pJob] == 10) {
			    SendClientMessage(playerid,COLOR_YELLOW2,":: JOB :: /volervoiture"); }
			    else if(PlayerInfo[playerid][pJob] == 11) {
			    SendClientMessage(playerid,COLOR_YELLOW2,":: JOB :: /commencercascade /arretercascade"); }
			    else if(PlayerInfo[playerid][pJob] == 12) {
			    SendClientMessage(playerid,COLOR_YELLOW2,":: JOB :: /combat /boxstats"); }
			    else if(PlayerInfo[playerid][pJob] == 13) {
			    SendClientMessage(playerid,COLOR_YELLOW2,":: JOB :: /prix /(r)adio"); }
			    else if(PlayerInfo[playerid][pJob] == 14) {
			    SendClientMessage(playerid,COLOR_YELLOW2,":: JOB :: /prix"); }
			    else if(PlayerInfo[playerid][pJob] == 15) {
			    SendClientMessage(playerid,COLOR_YELLOW2,":: JOB :: /journals /pjournal /livrer"); }
			    else if(PlayerInfo[playerid][pJob] == 16) {
			    SendClientMessage(playerid,COLOR_YELLOW2,":: JOB :: /acheterproduits /vendreproduits /charger"); }
			    else if(PlayerInfo[playerid][pJob] == 17) {
			    SendClientMessage(playerid,COLOR_YELLOW2,":: JOB :: /(tr)avail /vendrepizza"); }
			    else if(PlayerInfo[playerid][pJob] == 18) {
			    SendClientMessage(playerid,COLOR_YELLOW2,":: JOB :: /commencerrecolte /arreterrecolte"); }
			    else if(PlayerInfo[playerid][pJob] == 19) {
			    SendClientMessage(playerid,COLOR_YELLOW2,":: JOB :: /commencerrecoltedrogue /arreterrecoltedrogue"); }
			    else if(PlayerInfo[playerid][pJob] == 20) {
			    SendClientMessage(playerid,COLOR_YELLOW2,":: JOB :: /contrebandedrogue /vendredroguea"); }
			    else if(PlayerInfo[playerid][pJob] == 21) {
			    SendClientMessage(playerid,COLOR_YELLOW2,":: JOB :: /commencersweep /arretersweep"); }
			    else if(PlayerInfo[playerid][pJob] == 22) {
			    SendClientMessage(playerid,COLOR_YELLOW2,":: JOB :: /contrebandematos (/cm)"); }
			    else if(PlayerInfo[playerid][pJob] == 23) {
			    SendClientMessage(playerid,COLOR_YELLOW2,":: JOB :: /creerarme /achetermatos"); }
			    else if(PlayerInfo[playerid][pJob] == 24) {
			    SendClientMessage(playerid,COLOR_YELLOW2,":: JOB :: /creercostume /creerpermis /mats"); }
			    else if(PlayerInfo[playerid][pJob] == 25) {
			    SendClientMessage(playerid,COLOR_YELLOW2,":: JOB :: /commencerpoubelle /arreterpoubelle"); }
			    else if(PlayerInfo[playerid][pJob] == 26) {
			    SendClientMessage(playerid,COLOR_YELLOW2,":: JOB :: /commencerdozer /arreterdozer"); }
			    else if(PlayerInfo[playerid][pJob] == 27) {
			    SendClientMessage(playerid,COLOR_YELLOW2,":: JOB :: /commencertrain /sortir"); }
			    else if(PlayerInfo[playerid][pJob] == 28) {
			    SendClientMessage(playerid,COLOR_YELLOW2,":: JOB :: /commenceravion /sortir"); }
			}
			if(listitem == 3)
			{
				SendClientMessage(playerid, COLOR_GREEN,"______________________________________________________________________________________________________________________");
				SendClientMessage(playerid, COLOR_WHITE,"** Aide Maison *** Tapez une commande pour plus d'aide.");
				SendClientMessage(playerid, COLOR_WHITE,"** Maison *** /entrer /sortir /ouvrir /maison /sante /upgrademaison (/hu) /mettrelocation /tv (off/player)");
				SendClientMessage(playerid, COLOR_WHITE,"** Maison *** /virertous /prixlocation /evict /retirermaison");
				SendClientMessage(playerid, COLOR_WHITE,"** Autre *** /aidetel /aide /aidenote /aidevehicule /aidelocation /aidebiz /aidechef /aidepeche /aidecuisine /aideirc");
				SendClientMessage(playerid, COLOR_WHITE,"** Autre *** /aidechat /aidekidnaping");
			}
			if(listitem == 4)
			{
			    SendClientMessage(playerid, COLOR_GREEN,"__________________________Aide Vehicule__________________________");
                SendClientMessage(playerid, COLOR_LIGHTBLUE, "USAGE: /v [Action]");
		     	SendClientMessage(playerid, COLOR_YELLOW2, "acheter, spawn, aide, lock, acheterplace, garer, localiser, vendre, vendrea, remplir");
			    SendClientMessage(playerid, COLOR_YELLOW2, "pub, liste, info, accepter, refuser");
				SendClientMessage(playerid, COLOR_WHITE,"** Autre *** /aidetel /aide /aidenote /aidelocation /aidebiz /aidechef /aidepeche /aidecuisine /aidekidnaping");
				SendClientMessage(playerid, COLOR_WHITE,"** Autre *** /aidechat /aidekidnaping");
			}
			if(listitem == 5)
			{
		        SendClientMessage(playerid, COLOR_WHITE,"** Comprendre le RolePlay : /aiderp /metagame /powergame");
			}
			if(listitem == 6)
			{
			    SendClientMessage(playerid, COLOR_WHITE,":: Autre :: /aidetel /aidemaison /aidenote /aidevehicule /aidelocation /aidebiz /aidepeche /aidecuisine /aideirc");
				SendClientMessage(playerid, COLOR_WHITE,":: Autre :: /aidekidnaping /aidechat");
				SendClientMessage(playerid, COLOR_WHITE,"** Autre : /aidetel /aide /aidemaison /aidevehicule /aidelocation /aidebiz /aidechef /aidepeche /aidecuisine /aideirc");
		     	SendClientMessage(playerid, COLOR_WHITE,"** Autre : /aidechat /aidekidnaping");
		    	SendClientMessage(playerid, COLOR_WHITE,"** Autre : Pour plus d'informations : http://u2c-rp.forum-pro.fr");
			}
		}
	}
		if(!response) {
		DeletePVar(playerid,"range");
		DeletePVar(playerid,"limit");
		DeletePVar(playerid,"fine");
		DeletePVar(playerid,"selected");
		return 1;
	}
	switch(dialogid)
	{
		//======================================================
		//                  	Main menu
		//======================================================
	    case DIALOG_MAIN:
	    {
	        switch(listitem)
	        {
				case 0: ShowPlayerDialog(playerid,DIALOG_RANGE,DIALOG_STYLE_INPUT,"Inserer la portée","S'il vous plait, inserer un périmètre (Recommandé: 20-30)","OK","Cancel");
				case 1:
				{
					new cam = GetClosestCamera(playerid);
					if(cam == -1) return SendClientMessage(playerid,COLOR_RED,"Aucun radar n'a été trouvé près de vous !");
					SendClientMessageEx(playerid,COLOR_GREEN,"sis","L'ID du radar le plus proche de vous est : ",cam,".");
				}
				case 2:
				{
					new cam = GetClosestCamera(playerid);
					if(cam == -1) return SendClientMessage(playerid,COLOR_RED,"Aucun radar n'a été trouvé près de vous !");
					SetPVarInt(playerid,"selected",cam);
					ShowPlayerDialog(playerid,DIALOG_EDIT,DIALOG_STYLE_LIST,"{00A5FF}Radar {FFFFFF}- {FFDC00}Editeur","Changer angle\nChanger portée (périmètre)\nChanger limite de vitesse\nChanger cout de l'amende\nActiver le mode mph\nAjouter/Supprimer/Editer Textlabel\n{FF1400}Supprimer Radar","OK","Cancel");
				}
				case 3:
				{
					new cam = GetClosestCamera(playerid);
					if(cam == -1) return SendClientMessage(playerid,COLOR_RED,"Aucun radar n'a été trouvé près de vous !");
					DestroySpeedCam(cam);
				 	SendClientMessage(playerid,COLOR_GREEN,"Ce radar a été supprimé.");
				 	DeletePVar(playerid,"selected");
				}
				case 4:
				{
					for(new i = 0;i<loaded_cameras +1;i++)
					{
					    if(SpeedCameras[i][_active] == true)
					    {
					        DestroySpeedCam(i);
					    }
					}
					SendClientMessage(playerid,COLOR_GREEN,"Tous les radars ont été supprimé.");
				}
	        }
	    }
		//======================================================
		//                  Making a speedcam
		//======================================================
	    case DIALOG_RANGE:
	    {
	        if(!strlen(inputtext)) return ShowPlayerDialog(playerid,DIALOG_RANGE,DIALOG_STYLE_INPUT,"Inserer la portée","S'il vous plait, inserer un périmètre (Recommandé: 20-30)","OK","Cancel");
	        SetPVarInt(playerid,"range",strval(inputtext));
	        ShowPlayerDialog(playerid,DIALOG_LIMIT,DIALOG_STYLE_INPUT,"Inserer la Limite de Vitesse","S'il vous plait, inserer la Limite de Vitesse","OK","Cancel");
	    }
	    case DIALOG_LIMIT:
	    {
	        if(!strlen(inputtext)) return ShowPlayerDialog(playerid,DIALOG_LIMIT,DIALOG_STYLE_INPUT,"Inserer la Limite de Vitesse","S'il vous plait, inserer la Limite de Vitesse","OK","Cancel");
	        SetPVarInt(playerid,"limit",strval(inputtext));
	        ShowPlayerDialog(playerid,DIALOG_FINE,DIALOG_STYLE_INPUT,"Inserer le cout de l'amende","S'il vous plait, inserer le cout de l'amende","OK","Cancel");
	    }
	    case DIALOG_FINE:
	    {
	        if(!strlen(inputtext)) return ShowPlayerDialog(playerid,DIALOG_FINE,DIALOG_STYLE_INPUT,"Inserer le cout de l'amende","S'il vous plait, inserer le cout de l'amende","OK","Cancel");
	        SetPVarInt(playerid,"fine",strval(inputtext));
			new Float:x,Float:y,Float:z,Float:angle;
			GetPlayerPos(playerid,x,y,z);GetPlayerFacingAngle(playerid,angle);
			angle = angle + 180;if(angle > 360){angle = angle - 360;}
			new id = CreateSpeedCam(x,y,z -3,angle,GetPVarInt(playerid,"range"),GetPVarInt(playerid,"limit"),GetPVarInt(playerid,"fine"),CAMERA_USEMPH);
			SetPlayerPos(playerid,x,y+2,z);
			DeletePVar(playerid,"range");
			DeletePVar(playerid,"limit");
			DeletePVar(playerid,"fine");
			SetPVarInt(playerid,"selected",id);
			ShowPlayerDialog(playerid,DIALOG_EDIT,DIALOG_STYLE_LIST,"{00A5FF}Radar {FFFFFF}- {FFDC00}Editeur","Changer angle\nChanger portée(périmètre)\nChanger Limite de Vitesse\nChanger Cout de l'amende\nActiver le mode mph\nAjouter/Supprimer/Editer Textlabel\n{FF1400}Supprimer Radar","OK","Cancel");
	    }

		//======================================================
		//                  	Edit menu
		//======================================================
		case DIALOG_EDIT:
		{
		    switch(listitem)
		    {
		        case 0: ShowPlayerDialog(playerid,DIALOG_EANGLE,DIALOG_STYLE_INPUT,"{00A5FF}Radar {FFFFFF}- {FFDC00}Editeur - Angle","S'il vous plait, inserer un nouvel angle","OK","Cancel");
		        case 1: ShowPlayerDialog(playerid,DIALOG_ERANGE,DIALOG_STYLE_INPUT,"{00A5FF}Radar {FFFFFF}- {FFDC00}Editeur - Périmètre","S'il vous plait, inserer une nouvelle portée","OK","Cancel");
		        case 2: ShowPlayerDialog(playerid,DIALOG_ELIMIT,DIALOG_STYLE_INPUT,"{00A5FF}Radar {FFFFFF}- {FFDC00}Editeur - Limite de Vitesse","S'il vous plait, inserer une nouvelle limite de vitesse","OK","Cancel");
		        case 3: ShowPlayerDialog(playerid,DIALOG_EFINE,DIALOG_STYLE_INPUT,"{00A5FF}Radar {FFFFFF}- {FFDC00}Editeur - Cout de l'amende","S'il vous plait, inserer le nouveau cout de l'amende","OK","Cancel");
		        case 4: ShowPlayerDialog(playerid,DIALOG_ETYPE,DIALOG_STYLE_INPUT,"{00A5FF}Radar {FFFFFF}- {FFDC00}Editeur - Mph/Kmh","Faites 1 pour utiliser le mod mph (déconseillé) et 0 pour le mode kmh","OK","Cancel");
		        case 5: ShowPlayerDialog(playerid,DIALOG_LABEL,DIALOG_STYLE_INPUT,"{00A5FF}Radar {FFFFFF}- {FFDC00}Editeur - Textlabel","S'il vous plait, inscrivez le texte que vous voulez accrocher au radar, ou ne mettez rien pour supprimer un TextLabel existant!","OK","Cancel");
				case 6:
				{
					DestroySpeedCam(GetPVarInt(playerid,"selected"));
				 	SendClientMessage(playerid,COLOR_GREEN,"Ce radar a été supprimé.");
				 	DeletePVar(playerid,"selected");
				}
		    }
		}

		//======================================================
		//                 Editing a speedcam
		//======================================================
		case DIALOG_EANGLE:
		{
		    if(!strlen(inputtext)) return ShowPlayerDialog(playerid,DIALOG_EANGLE,DIALOG_STYLE_INPUT,"{00A5FF}Radar {FFFFFF}- {FFDC00}Editeur - Angle","S'il vous plait, inserer un nouvel angle","OK","Cancel");
		    new id = GetPVarInt(playerid,"selected");
		    new rot = strval(inputtext);
		    rot = rot + 180;
		    if (rot > 360)
		    {
		        rot = rot - 360;
		    }
            SpeedCameras[id][_rot] = rot;
            SetObjectRot(SpeedCameras[id][_objectid],0,0,rot);
            SaveCamera(id);
		    SendClientMessageEx(playerid,COLOR_GREEN,"sisis","L'angle du radarID ",id," a été mis à ",strval(inputtext),".");
		}
		case DIALOG_ERANGE:
		{
		    if(!strlen(inputtext)) return ShowPlayerDialog(playerid,DIALOG_ERANGE,DIALOG_STYLE_INPUT,"{00A5FF}Radar {FFFFFF}- {FFDC00}Editeur - Périmètre","S'il vous plait, inserer une nouvelle portée","OK","Cancel");
		    new id = GetPVarInt(playerid,"selected");
			SpeedCameras[id][_range] = strval(inputtext);
			SaveCamera(id);
		    SendClientMessageEx(playerid,COLOR_GREEN,"sisis","La portée du radarID ",id," a été mise à ",strval(inputtext),".");
		}
		case DIALOG_ELIMIT:
		{
		    if(!strlen(inputtext)) return ShowPlayerDialog(playerid,DIALOG_ELIMIT,DIALOG_STYLE_INPUT,"{00A5FF}Radar {FFFFFF}- {FFDC00}Editeur - Limite de Vitesse","S'il vous plait, inserer une nouvelle limite de vitesse","OK","Cancel");
		    new id = GetPVarInt(playerid,"selected");
			SpeedCameras[id][_limit] = strval(inputtext);
			SaveCamera(id);
		    SendClientMessageEx(playerid,COLOR_GREEN,"sisis","La limite de vitesse du radarID ",id," a été mise à ",strval(inputtext),".");
		}
		case DIALOG_EFINE:
		{
		    if(!strlen(inputtext)) return ShowPlayerDialog(playerid,DIALOG_EFINE,DIALOG_STYLE_INPUT,"{00A5FF}Radar {FFFFFF}- {FFDC00}Editeur - Cout de l'amende","S'il vous plait, inserer le nouveau cout de l'amende","OK","Cancel");
		    new id = GetPVarInt(playerid,"selected");
		    SpeedCameras[id][_fine] = strval(inputtext);
		    SaveCamera(id);
		    SendClientMessageEx(playerid,COLOR_GREEN,"sisis","Le cout de l'amende du radarID ",GetPVarInt(playerid,"selected")," a été mis à ",strval(inputtext),".");
		}
		case DIALOG_ETYPE:
		{
		    if(!strlen(inputtext) || strval(inputtext) != 0 && strval(inputtext) != 1) return ShowPlayerDialog(playerid,DIALOG_ETYPE,DIALOG_STYLE_INPUT,"{00A5FF}Radar {FFFFFF}- {FFDC00}Editeur - Mph/Kmh","Faites 1 pour utiliser le mod mph (déconseillé) et 0 pour le mode kmh","OK","Cancel");
		    new id = GetPVarInt(playerid,"selected");
		    SpeedCameras[id][_usemph] = strval(inputtext);
		    if(strval(inputtext) == 1)
		    {
		        SendClientMessageEx(playerid,COLOR_GREEN,"sis","RadarID ",GetPVarInt(playerid,"selected")," mesure maintenant la vitesse en mph.");
		    } else {
		        SendClientMessageEx(playerid,COLOR_GREEN,"sis","RadarID ",GetPVarInt(playerid,"selected")," mesure maintenant la vitesse en kmh.");
		    }
		}
		case DIALOG_LABEL:
		{
		    new id = GetPVarInt(playerid,"selected");
		    if(!strlen(inputtext))
		    {
		        if(SpeedCameras[id][_activelabel] == true)
		        {
					Delete3DTextLabel(SpeedCameras[id][_label]);
					SpeedCameras[id][_activelabel] = false;
					SpeedCameras[id][_labeltxt] = 0;
		        }
		        SendClientMessageEx(playerid,COLOR_GREEN,"sis","Le textlabel du radarID ",GetPVarInt(playerid,"selected")," a été supprimé.");
		    } else {
		        if(SpeedCameras[id][_activelabel] == true)
		        {
		            format(SpeedCameras[id][_labeltxt],128,"%s",inputtext);
		            UpdateCameraLabel(SpeedCameras[id][_label],inputtext);
		        } else {
			        SpeedCameras[id][_activelabel] = true;
			        format(SpeedCameras[id][_labeltxt],128,"%s",inputtext);
			        SpeedCameras[id][_label] = AttachLabelToCamera(id,inputtext);
				}
				SendClientMessageEx(playerid,COLOR_GREEN,"sisss","Le textlabel du radarID ",GetPVarInt(playerid,"selected")," est maintenant ",inputtext,".");
		    }
		    SaveCamera(id);
		}
	}
	if(dialogid == 12346 || dialogid == 12347)
	{
	    if(strlen(inputtext))
	    {
			new tmppass[64];
			strmid(tmppass, inputtext, 0, strlen(inputtext), 255);
			//Encrypt(tmppass);
			OnPlayerLogin(playerid,tmppass);
		}
		else
		{
			new loginstring[128];
			new loginname[128];
			GetPlayerName(playerid,loginname,sizeof(loginname));
			format(loginstring,sizeof(loginstring),"Mauvais mot de passe.\n\nVeuillez entrer le bon mot de passe ci dessous :",loginname);
			ShowPlayerDialog(playerid,12347,DIALOG_STYLE_INPUT,"Conexion",loginstring,"Valider","Quitter");
	        gPlayerLogTries[playerid] += 1;
	        if(gPlayerLogTries[playerid] == 3) { Kick(playerid); }
		}
	}
	if(dialogid == 12345)
	{
	 	if(strlen(inputtext))
	  	{
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "%s.ini", sendername);
			new File: hFile = fopen(string, io_read);
			if (hFile)
			{
				SendClientMessage(playerid, COLOR_YELLOW, "Ce Pseudo est déjà pris. Choisissez en un autre s'il vous plait.");
				fclose(hFile);
				return 1;
			}
			new tmppass[64];
			strmid(tmppass, inputtext, 0, strlen(inputtext), 255);
			//Encrypt(tmppass);
			OnPlayerRegister(playerid,tmppass);
		}
		else
		{
 			new regstring[128];
			new regname[128];
			GetPlayerName(playerid,regname,sizeof(regname));
			format(regstring,sizeof(regstring),"Ce compte n'est pas enregistré.\n\nInscrivez votre mot de passe ci-dessous pour vous enregistrer et pouvoir jouer :",regname);
			ShowPlayerDialog(playerid,12345,DIALOG_STYLE_INPUT,"Inscription",regstring,"Enregistrer","Sortir");
		}
	}
	return 1;
}

CreerObjetJoueur (playerid, TypeObjet)
{
   if(Objet[playerid] != -1)
   {
      SendClientMessage (playerid, 0xFF0000FF, "Tu ne peux pas te cacher a nouveau. Tape /stopcache.");
   }
   else
   {
      Objet[playerid] = CreateObject (TypeObjet, 0, 0, 0, 0, 0, 0);
      AttachObjectToPlayer (Objet[playerid], playerid, 0.0, 0.0, 0.0, 0, 0, 0);
      SendClientMessage(playerid, 0xFF0000FF, "Tape /stopcache pour faire une surprise.");
   }
}

public DesactiverSpeedo(playerid)
{
	desactivetext[playerid] = 0;
/*}
public BombeCar(playerid)
{
	CreateExplosion(labombex, labombey , labombez, 7, 10);
	SetPlayerHealth(playerid, 0);*/
}
public ObjectRot(Float:x,Float:y,Float:z,objectid)
{
                new Float:xo,Float:yo,Float:zo;
                GetObjectPos(objectid,xo,yo,zo);
                x = x - xo;
                y = y - yo;
                z -= zo;
                new Float:Rot = atan2(y,x);
                x = floatsqroot(x * x + y * y);
                new Float:Rot2 = atan2(z, x);
                SetObjectRot(objectid, 0, Rot2,Rot-180);
}
public Bombardement(playerid,objectid,Float:x,Float:y,Float:z)
{
        new Float:xo,Float:yo,Float:zo;
        GetObjectPos(objectid,xo,yo,zo);
        new Float:distance = floatsqroot(((xo - x) * (xo - x)) + ((yo - y) * (yo - y)) + ((zo-z) * (zo-z)));
        if( distance <= 2 || Boom[playerid] == 1)
        {
                CreateExplosion(xo,yo,zo,6,400);
                DestroyStreamObject(objectid);
              missileactiver[playerid] = 0;
              KillTimer(CibleTimer[playerid]);
              KillTimer(TimerFinMissile[playerid]);
                Boom[playerid] = 0;

        }
        else
        {

                MoveStreamObject(objectid,x,y,z,15);
            ObjectRot(x,y,z,objectid);
                //new str[128];
                //format(str,sizeof(str),"Missile a %.f metres",distance);
                //SendClientMessage(playerid,0xFFFFFF,str);


        }
}
public Cible(playerid,cibleid,objectid)
{

        if(PlayerToObject(cibleid,objectid,1) || Boom[playerid] == 1)
        {
                new Float:xo,Float:yo,Float:zo;
                GetObjectPos(objectid,xo,yo,zo);
                CreateExplosion(xo,yo,zo,6,800);
                DestroyStreamObject(objectid);
              	missileactiver[playerid] = 0;
              	KillTimer(CibleTimer[playerid]);
              	KillTimer(TimerFinMissile[playerid]);
                Boom[playerid] = 0;

        }
        else
        {
                new Float:x,Float:y,Float:z;
                GetPlayerPos(cibleid,x,y,z);
                new Float:xo,Float:yo,Float:zo;
                GetObjectPos(objectid,xo,yo,zo);
                MoveStreamObject(objectid,x,y,z,5);
            	ObjectRot(x,y,z,objectid);
                //new str[128];
                //format(str,sizeof(str),"Missile a %.f metres",floatsqroot(((xo - x) * (xo - x)) + ((yo - y) * (yo - y)) + ((zo-z) * (zo-z))));
                //SendClientMessage(playerid,0xFFFFFF,str);


        }
}
public FinMissile(playerid,objectid)
{
    DestroyStreamObject(objectid);
    missileactiver[playerid] = 0;
    KillTimer(CibleTimer[playerid]);
    KillTimer(TimerFinMissile[playerid]);
    Boom[playerid] = 0;
}
public PlayerToObject(playerid,objectid,Float:radius)
{
        new Float:x,Float:y,Float:z;
        GetPlayerPos(playerid,x,y,z);
        new Float:xo,Float:yo,Float:zo;
        GetObjectPos(objectid,xo,yo,zo);
    xo -= x;    yo -= y;    zo -= z;
    if(((xo * xo) + (yo * yo) + (zo * zo)) <= (radius * radius))
    {
            return 1;
    }
    return 0;
}
ConvertirTexte (Texte[])
{
	new i;

	for (i=0 ; i<strlen (Texte) ; i++)
	{
		switch (Texte[i])
		{
			case 'à': Texte[i] = 128;
			case 'â': Texte[i] = 130;
			case 'ä': Texte[i] = 131;
			case 'ç': Texte[i] = 133;
			case 'è': Texte[i] = 134;
			case 'é': Texte[i] = 135;
			case 'ê': Texte[i] = 136;
			case 'ë': Texte[i] = 137;
			case 'î': Texte[i] = 140;
			case 'ï': Texte[i] = 141;
			case 'ô': Texte[i] = 144;
			case 'ö': Texte[i] = 145;
			case 'ù': Texte[i] = 146;
			case 'û': Texte[i] = 148;
			case 'ü': Texte[i] = 149;
		}
	}
}

public JoueurPasRein(playerid)
{
	if(rein[playerid] == 1)
	{
		new vie = -10;
		SetPlayerHealth(playerid,vie);
		SetPlayerDrunkLevel(playerid,15000);
	}
	else
	{
	    SetPlayerDrunkLevel(playerid,0);
	}
}

stock CreateShamalInt(vehicleid, Float:X, Float:Y, Float:Z)
{
        CreateStreamObject(14404, X, Y, Z, 0.0, 0.0, 0.0);
        CreateStreamObject(1562, floatadd(X, difc[0][0]), floatadd(Y, difc[0][1]), floatsub(Z, difc[0][2]), 0.0, 0.0, difc[0][3]);
        CreateStreamObject(1562, floatadd(X, difc[1][0]), floatsub(Y, difc[1][1]), floatsub(Z, difc[1][2]), 0.0, 0.0, difc[1][3]);
        CreateStreamObject(1562, floatadd(X, difc[2][0]), floatsub(Y, difc[2][1]), floatsub(Z, difc[2][2]), 0.0, 0.0, difc[2][3]);
        CreateStreamObject(1562, floatsub(X, difc[3][0]), floatsub(Y, difc[3][1]), floatsub(Z, difc[3][2]), 0.0, 0.0, difc[3][3]);
        CreateStreamObject(1562, floatsub(X, difc[4][0]), floatsub(Y, difc[4][1]), floatsub(Z, difc[4][2]), 0.0, 0.0, difc[4][3]);
        CreateStreamObject(1562, floatsub(X, difc[5][0]), floatsub(Y, difc[5][1]), floatsub(Z, difc[5][2]), 0.0, 0.0, difc[5][3]);
        CreateStreamObject(1563, floatadd(X, difc[6][0]), floatadd(Y, difc[6][1]), floatsub(Z, difc[6][2]), 0.0, 0.0, difc[6][3]);
        CreateStreamObject(1563, floatadd(X, difc[7][0]), floatsub(Y, difc[7][1]), floatsub(Z, difc[7][2]), 0.0, 0.0, difc[7][3]);
        CreateStreamObject(1563, floatadd(X, difc[8][0]), floatsub(Y, difc[8][1]), floatsub(Z, difc[8][2]), 0.0, 0.0, difc[8][3]);
        CreateStreamObject(1563, floatsub(X, difc[9][0]), floatsub(Y, difc[9][1]), floatsub(Z, difc[9][2]), 0.0, 0.0, difc[9][3]);
        CreateStreamObject(1563, floatsub(X, difc[10][0]), floatsub(Y, difc[10][1]), floatsub(Z, difc[10][2]), 0.0, 0.0, difc[10][3]);
        CreateStreamObject(1563, floatsub(X, difc[11][0]), floatsub(Y, difc[11][1]), floatsub(Z, difc[11][2]), 0.0, 0.0, difc[11][3]);
        CreateStreamObject(14405, X, floatsub(Y, difc[12][1]), floatsub(Z, difc[12][2]), 0.0, 0.0, difc[12][3]);
        ShamalPos[vehicleid][0] = X, ShamalPos[vehicleid][1] = Y, ShamalPos[vehicleid][2] = Z;
}

stock SetPlayerPosInShamal(playerid, shamalid)
{
        SetPlayerPos(playerid, ShamalPos[shamalid][0],
        floatsub(ShamalPos[shamalid][1], 5.87),
        floatsub(ShamalPos[shamalid][2], 0.75));
        SetPlayerFacingAngle(playerid, 0.0);
        SetCameraBehindPlayer(playerid);
}

stock ShamalExists(vehicleid)
{
        if (floatsqroot(floatadd(ShamalPos[vehicleid][0], floatadd(ShamalPos[vehicleid][1], ShamalPos[vehicleid][2]))))
        {
                return 1;
        }
        return 0;
}

stock randomEx(randval)
{
        new rand1 = random(2), rand2;
        if (!rand1) rand2 -= random(randval);
        else rand2 += random(randval);
        return rand2;
}
public OnVehicleDeath(vehicleid, killerid)
{
    //SetVehicleToRespawn(vehicleid);
    gEngine[vehicleid] = 0;
    VehicleWindows[vehicleid] = 0;
    SetTimerEx("RestartVeh",10000,0,"i",vehicleid);
	return 1;
}

public KillCar(vehicleid)
{
	DestroyVehicle(vehicleid);                      // destroy vehicle
	gDestroyVehicle[vehicleid] = 0;
	return 1;
}

public OnVehicleSpawn(vehicleid)
{
    if(gDestroyVehicle[vehicleid])  									// if vehicle id is marked for deletion
    {
        ////foreach(Player, i)                            					// for all players
        for(new i; i<MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i) && IsPlayerInVehicle(i,vehicleid))      	// if connected and in vehicleid
			{
				RemovePlayerFromVehicle(i);                                     	// remove from vehicle
			}
		}
    	SetVehicleVirtualWorld(vehicleid,255);                                  // set vehicle to unused vw to prevent players from using it
    	SetTimerEx("KillCar",10000,0,"d",vehicleid);
		for(new i = 0; i < sizeof(CreatedCars); i++)
    	{
    	    if(CreatedCars[i] == vehicleid)
    	    {
    	        CreatedCars[i] = INVALID_VEHICLE_ID;
    	        break;
			}
    	}
    }
    tCount[vehicleid] = false;
    gEngine[vehicleid] = 0;
    VehicleWindows[vehicleid] = 0;
    new enginem, lights, alarm, doors, bonnet, boot, objective;
    GetVehicleParamsEx(vehicleid,enginem, lights, alarm, doors, bonnet, boot, objective);
	SetVehicleParamsEx(vehicleid,VEHICLE_PARAMS_OFF, lights, alarm, doors, bonnet, boot, objective);
    VehicleWindows[vehicleid] = 0;
	return 1;
}

public ExplodeShamal(vehicleid)
{
        KillTimer(sExplode[vehicleid]);
        if (tCount[vehicleid])
        {
                CreateExplosion(ShamalPos[vehicleid][0], ShamalPos[vehicleid][1], ShamalPos[vehicleid][2], 2, 15.0);
                sExplode[vehicleid] = SetTimerEx("ExplodeShamal", random(1300)+100, 1, "d", vehicleid);
        }
}

public Decodage(playerid)
{
    new string[256];
    new DecodageChance;
    DecodageChance = random(6);
    switch(DecodageChance)
    {
    	case 0,1,2,3,4:
     	{
			format(string,sizeof(string),"Le mot de passe du coffre est %d.",mdpbanque);
			SendClientMessage(playerid,COLOR_GREEN,string)
		    SendClientMessage(playerid, COLOR_GREEN, "/mdpbanque [code] pour ouvrir la porte");
     	}
     	case 5:
     	{
     	    SendClientMessage(playerid, COLOR_RED, "Ton decodeur a freeze pendant le decodage, recommence");
     	}
	}
}
/*
new CrashTimer
public VehicleSpeed(playerid)
{
        new Float:ovx, Float:ovy, Float:ovz;
        if(IsPlayerInAnyVehicle(playerid))
        {
                GetVehicleVelocity(GetPlayerVehicleID(playerid), ovx, ovy, ovz);
                if(ovx < -0.3 || ovx > 0.3 || ovy < -0.3 || ovy > 0.3 && !IsSpeeding[playerid])
                {
                	CrashTimer[playerid] = SetTimerEx("Speeding", 100, 1, "i", playerid);
                	IsSpeeding[playerid] = true;
                }
                else
                {
                    KillTimer(CrashTimer[playerid]);
                    IsSpeeding[playerid] = false;
                }
        }
        return 1;
}

public Speeding(playerid)
{
        new Float:nvx, Float:nvy, Float:nvz;
        if(IsPlayerInAnyVehicle(playerid) && IsSpeeding[playerid])
        {
                GetVehicleVelocity(GetPlayerVehicleID(playerid), nvx, nvy, nvz);
                if(nvx > -0.1 && nvx < 0.1 && nvy > -0.1 && nvy < 0.1)
                {
                    new Float:crashhealth;
                    GetPlayerHealth(playerid, crashhealth);
                    if(ceinture[playerid] == 1)
                    {
                		SetPlayerDrunkLevel(playerid, 25000);
                		SetTimerEx("StopCameraEffect", 5000, 0, "i", playerid);
                    	IsSpeeding[playerid] = false;
                    }
                    else
                    {
                        new vehicleid = GetPlayerVehicleID(playerid);
                        if(IsABike(vehicleid) || IsAOBike(vehicleid))
                        {

                        }
                        else
                        {
	                        crashhealth -= 10.0;
	                    	SetPlayerHealth(playerid, crashhealth);
	                		SetPlayerDrunkLevel(playerid, 50000);
	                		SetTimerEx("StopCameraEffect", 10000, 0, "i", playerid);
	                    	IsSpeeding[playerid] = false;
		                    GetPlayerPos(playerid, nvx, nvy, nvz);
							SetPlayerPos(playerid, nvx, nvy, nvz+3);
						}
                    }
                }
        }
        return 1;
}
*/
public StopCameraEffect(playerid)
{
    SetPlayerDrunkLevel(playerid, 0);
        return 1;
}

public BOtimer()
{
	for(new playerid=0; playerid<MAX_PLAYERS; playerid++)
	{
		if(IsPlayerConnected(playerid) && GetPlayerState(playerid)==PLAYER_STATE_DRIVER)
		{
      	    new keys,leftright,updown;
		    GetPlayerKeys(playerid,keys,updown,leftright);
		    if(keys == 40)
		    {
		        burnout[playerid]++;
		    }else if(burnout[playerid]>10 && keys == 8){
				if(burnout[playerid]>35) burnout[playerid]=35;
		        new Float:speed[2],vehicleid=GetPlayerVehicleID(playerid);
		        GetXYInFrontOfVehicle(vehicleid,speed[0],speed[1],0.007*burnout[playerid]);
                AccelerateTowardsAPoint(vehicleid,speed[0],speed[1]);
		        burnout[playerid]=0;
		    }
		}
	}
}

stock GetXYInFrontOfVehicle(vehicleid, &Float:x, &Float:y, Float:distance)
{       // Created by Y_Less

		new Float:a;
        GetVehiclePos(vehicleid, x, y, a);
        GetVehicleZAngle(vehicleid, a);

        x += (distance * floatsin(-a, degrees));
        y += (distance * floatcos(-a, degrees));
}

stock AccelerateTowardsAPoint(vehicleid,Float:x,Float:y)
{
	new Float:pos[6];
	GetVehicleVelocity(vehicleid,pos[4],pos[5],pos[2]);
	GetVehiclePos(vehicleid,pos[0],pos[1],pos[3]);
	if(GivesSpeed(pos[4],pos[5],pos[2],x-pos[0],y-pos[1],pos[2]))
		SetVehicleVelocity(vehicleid,x-pos[0],y-pos[1],pos[2]);
}

stock GivesSpeed(Float:x,Float:y,Float:z,Float:newx,Float:newy,Float:newz) // Checks if one velocity is bigger than another.
{
    if(floatsqroot(floatpower(floatabs(x),2)+floatpower(floatabs(y),2)+floatpower(floatabs(z),2))<floatsqroot(floatpower(floatabs(newx),2)+floatpower(floatabs(newy),2)+floatpower(floatabs(newz),2))) return true;
	return false;
}

public SpeedoVoiture()
{
    new Float:maxspeed = 270.0;
    new plname[MAX_PLAYER_NAME];
	new string[256];
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	new vehicleid = GetPlayerVehicleID(i);
 	new modelveh = GetVehicleModel(vehicleid);
			if(GetPlayerState(i) == 2)
		    {
					if ((BusrouteEast[i][0] == 0 && BusrouteWest[i][0] == 0))
					{
						if(gSpeedo[i] == 1)
						{
						    if(desactivetext[i] == 1 || AdminDuty[i] == 1)
						    {
						    }
							else if(IsAPlane(vehicleid) || IsATrain(vehicleid) || IsABoat(vehicleid) || IsABike(vehicleid) || IsAHarvest(vehicleid) || IsADrugHarvest(vehicleid) || IsASweeper(vehicleid) || modelveh == 481 || modelveh == 510 || modelveh == 509)
		   		    		{
		   		    		    if(!engineOn[vehicleid])
		   		    		    {
		   		    		    	format(string, 256, "~n~~n~~n~~n~~n~~w~~n~~b~Km/H: ~w~%.f   ~n~~r~Essence:~w~ N/A~n~",GetPlayerSpeed(i))
								}
								else if(engineOn[vehicleid])
								{
								    format(string, 256, "~n~~n~~n~~n~~n~~w~~n~~b~Km/H: ~w~%.f   ~n~~r~Essence:~w~ N/A~n~",GetPlayerSpeed(i))
								}
								GameTextForPlayer(i, string, 5000, 5);
							}
							else
							{
							    if(!engineOn[vehicleid])
		   		    		    {
		   		    		    	format(string, 256, "~n~~n~~n~~n~~n~~w~~n~~b~Km/H: ~w~%.f   ~n~~r~Essence:~w~ %d%~n~",GetPlayerSpeed(i),Gas[vehicleid])
								}
								else if(engineOn[vehicleid])
								{
								    format(string, 256, "~n~~n~~n~~n~~n~~w~~n~~b~Km/H: ~w~%.f   ~n~~r~Essence:~w~ %d%~n~",GetPlayerSpeed(i),Gas[vehicleid])
								}
								GameTextForPlayer(i, string, 5000, 5);
							}
						}
						if(GetPlayerSpeed(i) > maxspeed && PlayerInfo[i][pAdmin] < 1)
						{
							new tmpcar = GetPlayerVehicleID(i);
							if(!IsAPlane(tmpcar))
							{
								GetPlayerName(i, plname, sizeof(plname));
								format(string, 256, "WARNING: [%d] %s %.0f Km/H",i,plname,GetPlayerSpeed(i));
								ABroadCast(COLOR_LIGHTRED,string,1);
							}
						}
					}
			}
	}
	return 1;
}

public DropPlayerWeapons(playerid)
{
    new playerweapons[13][2];
    new Float:x,Float:y,Float:z;
    GetPlayerPos(playerid, x, y, z);

	for(new i=0;i<13;i++){
    	GetPlayerWeaponData(playerid, i, playerweapons[i][0], playerweapons[i][1]);
    	new model=GetWeaponModel(playerweapons[i][0]);
		new times=floatround(playerweapons[i][1]/10.0001);
		new string[256];
        format(string, sizeof(string), "%d", times);
        times=strval(string);
    	new Float:X=x+(random(3)-random(3));
    	new Float:Y=y+(random(3)-random(3));
    	if(playerweapons[i][1]!=0)
		{
		    if(times>6) times=6;
	    	for(new a=0;a<times;a++)
			{
			    if(model!=-1)
				{
					new pickupid=CreatePickup(model, 3, X, Y, z);
					SetTimerEx("DeletePickup", 15*1000, false, "d", pickupid);
				}
			}
		}
	}
	return 1;
}

public DeletePickup(pickupid)
{
	DestroyPickup(pickupid);
	return 1;
}

public Semasturber()
{

						for(new playerid; playerid < MAX_PLAYERS; playerid++) 	{
						new string[120];
						new sendername[32];
    					//GameTextForPlayer(playerid, "~p~Te corriste!", 5000, 6);
    					SetPlayerHealth(playerid, 100);
    					Masturber[playerid] = 1;
    					ApplyAnimation(playerid, "PAULNMAC", "wank_loop", 4.0, 1, 0, 0, 1, 0);
    					GetPlayerName(playerid, sendername, sizeof(sendername));
      					format(string, sizeof(string), "* %s a un orgasme.", sendername);
      					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      					format(string, sizeof(string), "%s: Oh Oui ! Oah!", sendername);
      					ProxDetector(30.0, playerid, string, COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE);
						return 1;
}
return 1;
}

public GetWeaponModel(weaponid)
{
	new model;

	switch(weaponid)
	{
	    case 1: model=331; case 2: model=333; case 3: model=334;
		case 4: model=335; case 5: model=336; case 6: model=337;
		case 7: model=338; case 8: model=339; case 9: model=341;
		case 10: model=321; case 11: model=322; case 12: model=323;
		case 13: model=324; case 14: model=325; case 15: model=326;
		case 16: model=342; case 17: model=343; case 18: model=344;
		case 22: model=346; case 23: model=347; case 24: model=348;
		case 25: model=349; case 26: model=350; case 27: model=351;
		case 28: model=352; case 29: model=353; case 30: model=355;
		case 31: model=356; case 32: model=372; case 33: model=357;
		case 34: model=358; case 35: model=359; case 36: model=360;
		case 37: model=361; case 38: model=362; case 39: model=363;
		case 41: model=365; case 42: model=366; case 46: model=371;
	}
	if(model<300) return -1;

	return model;
}

public OnPlayerPickUpPickup(playerid, pickupid)
{
    for(new p=0;p<sizeof(Pompe);p++)
	{
	    if(PickupPompe[p] == pickupid)
	    {
			#if defined USE_MENU
			    SendClientMessage(playerid,COL_GREEN,"Bienvenu a la pompe a essence. Pour remplir votre vehicule taper /vmenu et selectioner 'Essence'");
			#else
				SendClientMessage(playerid,COL_GREEN,"Bienvenu a la pompe a essence. Pour remplir votre vehicule taper /vessence");
			#endif
		}
	}
	DestroyPickup(pickupid);
	return 1;
}

public OnPlayerFlashed(playerid,radarid,vitesse)
{
    new name[MAX_PLAYER_NAME];
    GetPlayerName(playerid, name, sizeof(name));
	new string[256];
	if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pLeader] == 3)
	{
		format(string,sizeof(string),"Flasher a %d. Vitesse maximum autorisée: %d. Coût : Le gouvernement paye.",vitesse,GetRadarVitesse(radarid));
		SendClientMessage(playerid,COLOR_RED,string);
		format(string, sizeof(string), " %s vient de se faire Flashé à %d.", name,vitesse);
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	else
	{
		format(string,sizeof(string),"Flasher a %d. Vitesse maximum autorisée: %d. Coût : %d et vous perdez 1 point.",vitesse,GetRadarVitesse(radarid),5 * vitesse);
		SendClientMessage(playerid,COLOR_RED,string);
		SafeGivePlayerMoney(playerid, -5 * vitesse);
		format(string, sizeof(string), " %s vient de se faire Flashé à %d.", name,vitesse);
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		PlayerInfo[playerid][pPointPermis] --;
		PointPermis(playerid);
	}
	return true;
}
public MeteoAleatoire()
{
	new Aleatoire = random(sizeof(DescriptionIdMeteo));
	new string[96];
	format(string, sizeof(string), "[Annonce Météo]: %s", DescriptionIdMeteo[Aleatoire][DescriptionMeteo]);
	SetWeather(DescriptionIdMeteo[Aleatoire][IDMeteo]);
	SendClientMessageToAll(BLANC,string);
	print(string);
}

public CanRobAgain()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
 		if(IsPlayerConnected(i))
   		{
   		    if(PlayerInfo[i][pRobTime] > 0)
		    {
                PlayerInfo[i][pRobTime]--;
			}
			if(ScriptMoneyUpdated[i] == 1)
			{
			    ScriptMoneyUpdated[i] = 0;
			}
		}
	}
	return 1;
}

public RobCityHall(playerid)
{
	new string[128];
	if(IsPlayerInRangeOfPoint(playerid, 25, 358.5919,184.2908,1008.3828))
	{
		if(RobbingTime[playerid] > 0)
		{
		    RobbingTime[playerid] --;
		    GameTextForPlayer(playerid, "~w~Reste ici ~w~jusqu a la fin !", 1000,4);
		}
		else
		{
		    RobbingTime[playerid] = 0;
		    KillTimer(RobCityHallTimer);
			new money = random(2000);
		    SafeGivePlayerMoney(playerid, money);
			format(string, sizeof(string),"~w~Vous avez vole ~g~%d$ ~w~a la~y~Mairie !", money);
			GameTextForPlayer(playerid, string, 6000, 4);
			format(string, sizeof(string)," Vous avez gagné %d$ en cambriolant la Mairie !",money);
			SendClientMessage(playerid, COLOR_GREY, string);
			WantedPoints[playerid] = 10;
			SetPlayerCriminal(playerid,255, "Cambriolage de la Mairie");
			braquageencours = 0;
		}
	}
	else
	{
        GameTextForPlayer(playerid, "~w~Vous avez quitte la zone !", 1000,4);
        SendClientMessage(playerid, COLOR_ORANGE, " Le cambriolage a échoué. Vous avez quitté la zone.");
        RobbingTime[playerid] = 0;
 		KillTimer(RobCityHallTimer);
 		braquageencours = 0;
	}
  return 1;
}

public UnsetPlayerRob(playerid)
{
	RobbedRecently[playerid] = 0;
	return 1;
}

public UnsetCityHallRob()
{
	CityHallRobbedRecently = 0;
	return 1;
}

public UnsetGymRob()
{
	GymRobbedRecently = 0;
	return 1;
}
public UnsetDonutRob()
{
	DonutRobbedRecently = 0;
	return 1;
}

public UnsetAlhambraRob()
{
	AlhambraRobbedRecently = 0;
	return 1;
}
public UnsetBarRob()
{
	BarRobbedRecently = 0;
	return 1;
}


public RobGym(playerid)
{
	new string[128];
	if(IsPlayerInRangeOfPoint(playerid, 15, 756.5454,5.4325,1000.6992))
	{
		if(RobbingTime[playerid] > 0)
		{
		    RobbingTime[playerid] --;
		    GameTextForPlayer(playerid, "~w~Reste ici ~w~jusqu a la fin !", 1000,4);
		}
		else
		{
		    RobbingTime[playerid] = 0;
		    KillTimer(RobGymTimer);
			new money = random(500);
		    SafeGivePlayerMoney(playerid, money);
			format(string, sizeof(string),"~w~Vous avez vole ~g~%d$ ~w~au~y~Gymnase !", money);
			GameTextForPlayer(playerid, string, 6000, 4);
			format(string, sizeof(string)," Vous avez gagné %d$ en cambriolant le Gymnase !",money);
			SendClientMessage(playerid, COLOR_GREY, string);
			WantedPoints[playerid] = 10;
			SetPlayerCriminal(playerid,255, "Cambriolage du Gymnase");
			braquageencours = 0;
		}
	}
	else
	{
        GameTextForPlayer(playerid, "~w~Vous avez quitte la zone !", 1000,4);
        SendClientMessage(playerid, COLOR_ORANGE, " Le cambriolage a échoué. Vous avez quitté la zone.");
        RobbingTime[playerid] = 0;
 		KillTimer(RobGymTimer);
 		braquageencours = 0;
	}
  return 1;
}

public RobDonut(playerid)
{
	new string[128];
	if(IsPlayerInRangeOfPoint(playerid, 15, 379.1978,-184.1220,1000.6328))
	{
		if(RobbingTime[playerid] > 0)
		{
		    RobbingTime[playerid] --;
		    GameTextForPlayer(playerid, "~w~Reste ici ~w~jusqu a la fin !", 1000,4);
		}
		else
		{
		    RobbingTime[playerid] = 0;
		    KillTimer(RobDonutTimer);
			new money = random(750);
		    SafeGivePlayerMoney(playerid, money);
			format(string, sizeof(string),"~w~Vous avez vole ~g~%d$ ~w~au~y~Donut Store !", money);
			GameTextForPlayer(playerid, string, 6000, 4);
			format(string, sizeof(string)," Vous avez gagné %d$ en cambriolant le Donut Store !",money);
			SendClientMessage(playerid, COLOR_GREY, string);
			WantedPoints[playerid] = 10;
			SetPlayerCriminal(playerid,255, "Robbing the Donut Store");
			braquageencours = 0;
		}
	}
	else
	{
        GameTextForPlayer(playerid, "~w~Vous avez quitte la zone !", 1000,4);
        SendClientMessage(playerid, COLOR_ORANGE, " Le cambriolage a échoué. Vous avez quitté la zone.");
        RobbingTime[playerid] = 0;
 		KillTimer(RobDonutTimer);
 		braquageencours = 0;
	}
  return 1;
}

public RobAlhambra(playerid)
{
	new string[128];
	if(IsPlayerInRangeOfPoint(playerid, 15,499.6341,-20.3592,1000.6797))
	{
		if(RobbingTime[playerid] > 0)
		{
		    RobbingTime[playerid] --;
		    GameTextForPlayer(playerid, "~w~Reste ici ~w~jusqu a la fin !", 1000,4);
		}
		else
		{
		    RobbingTime[playerid] = 0;
		    KillTimer(RobAlhambraTimer);
			new money = random(1000);
		    SafeGivePlayerMoney(playerid, money);
			format(string, sizeof(string),"~w~Vous avez vole ~g~%d$ ~w~a~y~l Alhambra !", money);
			GameTextForPlayer(playerid, string, 6000, 4);
			format(string, sizeof(string)," Vous avez gagné %d$ en cambriolant l'Alhambra !",money);
			SendClientMessage(playerid, COLOR_GREY, string);
			WantedPoints[playerid] = 10;
			SetPlayerCriminal(playerid,255, "Cambriolage de l'Alhambra");
			braquageencours = 0;
		}
	}
	else
	{
        GameTextForPlayer(playerid, "~w~Vous avez quitte la zone !", 1000,4);
        SendClientMessage(playerid, COLOR_ORANGE, " Le cambriolage a échoué. Vous avez quitté la zone.");
        RobbingTime[playerid] = 0;
 		KillTimer(RobAlhambraTimer);
 		braquageencours = 0;
	}
  return 1;
}

public RobBar(playerid)
{
	new string[128];
	if(IsPlayerInRangeOfPoint(playerid, 15,492.0305,-82.4695,998.7578))
	{
		if(RobbingTime[playerid] > 0)
		{
		    RobbingTime[playerid] --;
		    GameTextForPlayer(playerid, "~w~Reste ici ~w~jusqu a la fin !", 1000,4);
		}
		else
		{
		    RobbingTime[playerid] = 0;
		    KillTimer(RobBarTimer);
			new money = random(950);
		    SafeGivePlayerMoney(playerid, money);
			format(string, sizeof(string),"~w~Vous avez vole ~g~%d$ ~w~au~y~Ten Green Bottles !", money);
			GameTextForPlayer(playerid, string, 6000, 4);
			format(string, sizeof(string)," Vous avez gagné %d$ en cambriolant le Ten Green Bottles !",money);
			SendClientMessage(playerid, COLOR_GREY, string);
			WantedPoints[playerid] = 10;
			SetPlayerCriminal(playerid,255, "Cambriolage du Ten Green Bottles");
			braquageencours = 0;
		}
	}
	else
	{
        GameTextForPlayer(playerid, "~w~Vous avez quitte la zone !", 1000,4);
        SendClientMessage(playerid, COLOR_ORANGE, " Le cambriolage a échoué. Vous avez quitté la zone.");
        RobbingTime[playerid] = 0;
 		KillTimer(RobBarTimer);
 		braquageencours = 0;
	}
  return 1;
}

public RobBurger(playerid)
{
	new string[128];
	if(IsPlayerInRangeOfPoint(playerid, 15,373.8943,-67.4481,1001.5078))
	{
		if(RobbingTime[playerid] > 0)
		{
		    RobbingTime[playerid] --;
		    GameTextForPlayer(playerid, "~w~Reste ici ~w~jusqu a la fin !", 1000,4);
		}
		else
		{
		    RobbingTime[playerid] = 0;
		    KillTimer(RobBurgerTimer);
			new money = random(550);
		    SafeGivePlayerMoney(playerid, money);
			format(string, sizeof(string),"~w~Vous avez vole ~g~%d$ ~w~au~y~Burger Store !", money);
			GameTextForPlayer(playerid, string, 6000, 4);
			format(string, sizeof(string)," Vous avez gagné %d$ en cambriolant le Burger Store !",money);
			SendClientMessage(playerid, COLOR_GREY, string);
			WantedPoints[playerid] = 10;
			SetPlayerCriminal(playerid,255, "Cambriolage du Burger Store");
			braquageencours = 0;
		}
	}
	else
	{
        GameTextForPlayer(playerid, "~w~Vous avez quitte la zone !", 1000,4);
        SendClientMessage(playerid, COLOR_ORANGE, " Le cambriolage a échoué. Vous avez quitté la zone.");
        RobbingTime[playerid] = 0;
 		KillTimer(RobBurgerTimer);
 		braquageencours = 0;
	}
  return 1;
}

public RobCluckin(playerid)
{
	new string[128];
	if(IsPlayerInRangeOfPoint(playerid, 15, 371.7011,-6.2796,1001.8589))
	{
		if(RobbingTime[playerid] > 0)
		{
		    RobbingTime[playerid] --;
		    GameTextForPlayer(playerid, "~w~Reste ici ~w~jusqu a la fin !", 1000,4);
		}
		else
		{
		    RobbingTime[playerid] = 0;
		    KillTimer(RobCluckinTimer);
			new money = random(550);
		    SafeGivePlayerMoney(playerid, money);
			format(string, sizeof(string),"~w~Vous avez vole ~g~%d$ ~w~au~y~Cluckin Bell!", money);
			GameTextForPlayer(playerid, string, 6000, 4);
			format(string, sizeof(string)," Vous avez gagné %d$ en cambriolant le Cluckin' Bell !",money);
			SendClientMessage(playerid, COLOR_GREY, string);
			WantedPoints[playerid] = 10;
			SetPlayerCriminal(playerid,255, "Cambriolage du Cluckin' Bell");
			braquageencours = 0;
		}
	}
	else
	{
        GameTextForPlayer(playerid, "~w~Vous avez quitte la zone !", 1000,4);
        SendClientMessage(playerid, COLOR_ORANGE, " Le cambriolage a échoué. Vous avez quitté la zone.");
        RobbingTime[playerid] = 0;
 		KillTimer(RobCluckinTimer);
 		braquageencours = 0;
	}
  return 1;
}

public RobPizza(playerid)
{
	new string[128];
	if(IsPlayerInRangeOfPoint(playerid, 15,373.6143,-118.8086,1001.4922))
	{
		if(RobbingTime[playerid] > 0)
		{
		    RobbingTime[playerid] --;
		    GameTextForPlayer(playerid, "~w~Reste ici ~w~jusqu a la fin !", 1000,4);
		}
		else
		{
		    RobbingTime[playerid] = 0;
		    KillTimer(RobPizzaTimer);
			new money = random(600);
		    SafeGivePlayerMoney(playerid, money);
			format(string, sizeof(string),"~w~Vous avez vole ~g~%d$ ~w~au~y~Pizza Store!", money);
			GameTextForPlayer(playerid, string, 6000, 4);
			format(string, sizeof(string)," Vous avez gagné %d$ en cambriolant le Pizza Store !",money);
			SendClientMessage(playerid, COLOR_GREY, string);
			WantedPoints[playerid] = 10;
			SetPlayerCriminal(playerid,255, "Cambriolage du Pizza Store");
			braquageencours = 0;
		}
	}
	else
	{
        GameTextForPlayer(playerid, "~w~Vous avez quitte la zone !", 1000,4);
        SendClientMessage(playerid, COLOR_ORANGE, " Le cambriolage a échoué. Vous avez quitté la zone.");
        RobbingTime[playerid] = 0;
 		KillTimer(RobPizzaTimer);
 		braquageencours = 0;
	}
  return 1;
}

public SendVIPMessage(color, string[])
{
    for(new i; i<MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pDonateRank] >= 1)
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}

public SendWTMessage(channel, color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pWTc] == channel)
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}

public SendNewbieMessage(color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if (PlayerInfo[i][pAdmin] >= 1 || PlayerInfo[i][pDonateRank] > 0 || PlayerInfo[i][pLevel] == 1)
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}


public AFKKicker()
{
	for(new i = 0; i <= MAX_PLAYERS; i++)
	{
	    if(PPos[i][1] == 0)
	    {
	        GetPlayerPos(i,PPos[i][0],PPos[i][1],PPos[i][2]);
	        return 1;
		}
		new Float:x,Float:y,Float:z;
		GetPlayerPos(i,x,y,z);
		if(x == PPos[i][0] && y == PPos[i][1] && z == PPos[i][2])
		{
		    AFKMins[i]++;
		    if(AFKMins[i] >= AFKTime)
		    {
                if(pub == 1)
				{
				    new string[128];
				    new name[MAX_PLAYER_NAME];
		    		GetPlayerName(i, name, sizeof(name));
		            format(string, sizeof(string), "[INFO] : %s a été kické. Raison: AFK",name);
		            SendClientMessageToAll(COLOR_RED,string);
				}
		        if(show == 1)
		        {
		            new string[128];
		            format(string, sizeof(string), "Vous avez été absent (AFK) pour trop longtemps.");
		            SendClientMessage(i,0xAA3333AA,string);
				}
				else
				{
  			    	SendClientMessage(i, 0xAA3333AA,"Vous avez été kické. (Raison : AFK)");
				}
				Kick(i);
			}
		}
	}
	return 1;
}


public IO1(playerid)
{
	ClearChatbox(playerid, 5);
	SendClientMessage(playerid, COLOR_YELLOW, "Bienvenue à l'Auto-Ecole de Los Santos !");
	SendClientMessage(playerid, COLOR_YELLOW2, " ");
	SendClientMessage(playerid, COLOR_YELLOW, "________________.::| INTRODUCTION |::.________________");
	SendClientMessage(playerid, COLOR_YELLOW2, "Pour commencer, permettez moi de dire que la conduite sans risque n'existe pas.");
	SendClientMessage(playerid, COLOR_YELLOW2, "A chaque fois que vous prendrez le volant, il y a un risque.");
	SendClientMessage(playerid, COLOR_YELLOW2, "A l'auto-école, nous vous apprenons a réduire ces risques");
	SendClientMessage(playerid, COLOR_YELLOW2, "en vous enseignant les bases fondamentales que vous devrez respécter.");
	SendClientMessage(playerid, COLOR_YELLOW2, " ");
}
public IO2(playerid)
{
	ClearChatbox(playerid, 5);
	SendClientMessage(playerid, COLOR_YELLOW, "________________.::| La Vitesse |::.________________");
	SendClientMessage(playerid, COLOR_YELLOW2, "La gestion de la vitesse est importante. En effet, votre vie en dépend.");
	SendClientMessage(playerid, COLOR_YELLOW2, "Mais aussi celles des autres usagers. Le plus grand facteur d'accident");
	SendClientMessage(playerid, COLOR_YELLOW2, "est la vitesse.");
	SendClientMessage(playerid, COLOR_YELLOW2, "Rappel : 100 hm/h maxi sur les doubles voix et 60 km/h maxi sur les petites routes.");
	SendClientMessage(playerid, COLOR_LIGHTRED, "La ville de L.A a mis en place des radars dans toute la ville.");
	SendClientMessage(playerid, COLOR_YELLOW2, " ");
}
public IO3(playerid)
{
    ClearChatbox(playerid, 5);
	SendClientMessage(playerid, COLOR_YELLOW, "________________.::| L'Utilisation du Téléphone |::.________________");
	SendClientMessage(playerid, COLOR_YELLOW2, "C'est aussi très important de ne pas téléphoner en conduisant ou d'envoyer des SMS.");
	SendClientMessage(playerid, COLOR_YELLOW2, "En parlant sur votre portable, vous ne regardez plus trés bien la route et");
	SendClientMessage(playerid, COLOR_YELLOW2, "vous risquez de provoquer un accident sans le faire exprès.");
	SendClientMessage(playerid, COLOR_YELLOW2, "Donc rangez votre téléphone quand vous prenez le volant. ");
	SendClientMessage(playerid, COLOR_YELLOW2, " ");
}
public IO4(playerid)
{
	ClearChatbox(playerid, 5);
	SendClientMessage(playerid, COLOR_YELLOW, "________________.::| Les Panneaux et Autres Signes |::.________________");
	SendClientMessage(playerid, COLOR_YELLOW2, "La ligne blanche peinte sur la route qui longe le trottoir");
	SendClientMessage(playerid, COLOR_YELLOW2, "signifie qu'aucun stationnement n'est autorisé sauf en cas d'urgence");
	SendClientMessage(playerid, COLOR_YELLOW2, "médical, ou fédéral. Elles servent aussi à se ranger en cas d'arrestation");
	SendClientMessage(playerid, COLOR_YELLOW2, "par un officier de la LSPD.");
	SendClientMessage(playerid, COLOR_YELLOW, " ");
}
public IO5(playerid)
{
	ClearChatbox(playerid, 5);
	SendClientMessage(playerid, COLOR_YELLOW, "________________.::| Code de la Route |::.________________");
	SendClientMessage(playerid, COLOR_YELLOW2, "Regardez a gauche avant de vous insérer sur chaque sens giratoire (rond point).");
	SendClientMessage(playerid, COLOR_YELLOW2, "N'oubliez pas de regarder fréquement derriere vous pour plus de sécurité.");
	SendClientMessage(playerid, COLOR_YELLOW2, "Si vous êtes sur une route 2x2 voies, la voie de gauche est réservé aux dépassements,");
	SendClientMessage(playerid, COLOR_YELLOW2, "ou si vous tounez a gauche a moins de 300 mètres.");
	SendClientMessage(playerid, COLOR_YELLOW2, "Quand vous circulez en ville, faites attention à la propriété à droite.");
	SendClientMessage(playerid, COLOR_YELLOW2, " ");
}
public IO6(playerid)
{
    ClearChatbox(playerid, 5);
    SendClientMessage(playerid, COLOR_YELLOW, "________________.::| Les Intersections |::.________________");
	SendClientMessage(playerid, COLOR_YELLOW2, "Quand vous arrivez à des intersections,");
	SendClientMessage(playerid, COLOR_YELLOW2, "Vous devez les respectés, vous devez donc vous arreter.");
	SendClientMessage(playerid, COLOR_LIGHTRED, "Regardez de chaque coté avant de repartir !");
	SendClientMessage(playerid, COLOR_GREEN, "Quand vous voyez qu'aucune voiture n'arrive des 2 cotés,");
	SendClientMessage(playerid, COLOR_GREEN, "Vous pouvez y aller.");
	SendClientMessage(playerid, COLOR_YELLOW2, " ");
	SendClientMessage(playerid, COLOR_YELLOW, "___________________________________________________________");
}
public IO7(playerid)
{
 	SendClientMessage(playerid, COLOR_YELLOW, "Fin du cours.");
 	SendClientMessage(playerid, COLOR_YELLOW, "Vous allez maintenant passer aux questions. Bonne chance !");
	SendClientMessage(playerid, COLOR_YELLOW, " ");
	SetTimerEx("DKT1", 5000, 0, "d", playerid);
}

public DKT1(playerid)
{
	ClearChatbox(playerid, 5);
	SendClientMessage(playerid, COLOR_NEWS, " ");
 	SendClientMessage(playerid, COLOR_NEWS, "Vous devrez répondre à des questions sur vos connaissances du code de la route.");
 	SendClientMessage(playerid, COLOR_NEWS, "Si vous avez été attentif pendant le cours, vous trouverez les réponses..");
 	SendClientMessage(playerid, COLOR_NEWS, "Si vous vous trompez, vous devrez recommencez, mais vous ne perdrez pas d'argent.");
	SendClientMessage(playerid, COLOR_NEWS, " ");
 	SendClientMessage(playerid, COLOR_NEWS, "Pour répondre aux questions, tappez simplement le numéro de la réponse en utilisant la touche 't'.");
 	SendClientMessage(playerid, COLOR_NEWS, "Si la question à deux réponses, vous devrez mettre deux numéros.");
 	SendClientMessage(playerid, COLOR_LIGHTRED, "Par exemple si la réponse est 1 et 2, vous devrez écrire : 1/2");
	SetTimerEx("DKT2", 20000, 0, "d", playerid);
}

public DKT2(playerid)
{
    DKT[playerid] = 1;
	ClearChatbox(playerid, 6);
 	SendClientMessage(playerid, COLOR_LIGHTRED, "|_____________________Question 1_____________________|");
	SendClientMessage(playerid, COLOR_YELLOW, " Il n'y a aucun risques en conduisant.");
	SendClientMessage(playerid, COLOR_YELLOW, "1: Vrai");
	SendClientMessage(playerid, COLOR_YELLOW, "2: Faux");
	SendClientMessage(playerid, COLOR_LIGHTRED, "|____________________________________________________|");
	SendClientMessage(playerid, COLOR_LIGHTRED, " ");
}

public DKT3(playerid)
{
    DKT[playerid] = 2;
	ClearChatbox(playerid, 5);
 	SendClientMessage(playerid, COLOR_LIGHTRED, "|_____________________Question 2_____________________|");
	SendClientMessage(playerid, COLOR_YELLOW, " La gestion de la vitesse est importante car ?");
	SendClientMessage(playerid, COLOR_YELLOW, "1: Ce n'est pas important.");
	SendClientMessage(playerid, COLOR_YELLOW, "2: Elle peut provoquer des accidents et des morts.");
	SendClientMessage(playerid, COLOR_YELLOW, "3: La vitesse peut causer des mâux de crânes.");
	SendClientMessage(playerid, COLOR_YELLOW, "4: Cela peut provoquer une panne du moteur.");
	SendClientMessage(playerid, COLOR_LIGHTRED, "|____________________________________________________|");
	SendClientMessage(playerid, COLOR_LIGHTRED, " ");
}

public DKT4(playerid)
{
    DKT[playerid] = 3;
	ClearChatbox(playerid, 5);
 	SendClientMessage(playerid, COLOR_LIGHTRED, "|_____________________Question 3_____________________|");
	SendClientMessage(playerid, COLOR_YELLOW, " Pourquoi utiliser le téléphone en conduisant est-il dangereux ?");
	SendClientMessage(playerid, COLOR_YELLOW, "1: L'utiliser en provoque des cloques aux doigts.");
	SendClientMessage(playerid, COLOR_YELLOW, "2: Parler en conduisant provoque des pannes de résaux.");
	SendClientMessage(playerid, COLOR_YELLOW, "3: Parler en conduisant augmente le risque d'accident.");
	SendClientMessage(playerid, COLOR_YELLOW, "4: Ce n'est pas dangereux.");
	SendClientMessage(playerid, COLOR_LIGHTRED, "|____________________________________________________|");
	SendClientMessage(playerid, COLOR_LIGHTRED, " ");
}

public DKT5(playerid)
{
    DKT[playerid] = 4;
	ClearChatbox(playerid, 5);
	SendClientMessage(playerid, COLOR_LIGHTRED, "|_____________________Question 4_____________________|");
	SendClientMessage(playerid, COLOR_LIGHTRED, "Attention: Cette question a deux réponses possibles !");
	SendClientMessage(playerid, COLOR_YELLOW, " La ligne blanche painte le long du trottoir sert à ?");
	SendClientMessage(playerid, COLOR_YELLOW, "1: Ne pas tourner à droite .");
	SendClientMessage(playerid, COLOR_YELLOW, "2: Ne pas stationner même un moment.");
	SendClientMessage(playerid, COLOR_YELLOW, "3: En cas d'urgence médical ou fédéral.");
	SendClientMessage(playerid, COLOR_YELLOW, "4: A décorer.");
	SendClientMessage(playerid, COLOR_LIGHTRED, "|____________________________________________________|");
	SendClientMessage(playerid, COLOR_LIGHTRED, " ");
}

public DKT6(playerid)
{
    DKT[playerid] = 5;
	ClearChatbox(playerid, 5);
 	SendClientMessage(playerid, COLOR_LIGHTRED, "|_____________________Question 5_____________________|");
	SendClientMessage(playerid, COLOR_LIGHTRED, "Attention: Cette question a deux réponses possibles !");
	SendClientMessage(playerid, COLOR_YELLOW, " Quand vous êtes sur une route 2x2 voies, la voie de gauche sert à ?");
	SendClientMessage(playerid, COLOR_YELLOW, "1: Quand on tourne à 300 mètres à gauche.");
	SendClientMessage(playerid, COLOR_YELLOW, "2: Quand on n'est a 500 mètres de l'hopital.");
	SendClientMessage(playerid, COLOR_YELLOW, "3: Chaque fois que l'on veut, aucune règle ne concerne cela.");
	SendClientMessage(playerid, COLOR_YELLOW, "4: Quand on dépasse un véhicule.");
	SendClientMessage(playerid, COLOR_LIGHTRED, "|____________________________________________________|");
	SendClientMessage(playerid, COLOR_LIGHTRED, " ");

}

public IsAtCandySprunk(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 2, -2420.219, 984.578, 44.297)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, -2420.180, 985.945, 44.297)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 2225.203, -1153.422, 1025.906)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 2576.703, -1284.430, 1061.094)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 2155.906, 1606.773, 1000.055)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 2209.906, 1607.195, 1000.055)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 2222.203, 1606.773, 1000.055)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 495.969, -24.320, 1000.734)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 501.828, -1.430, 1000.734)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 373.828, -178.141, 1000.734)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 330.680, 178.500, 1020.070)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 331.922, 178.500, 1020.070)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 350.906, 206.086, 1008.477)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 361.563, 158.617, 1008.477)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 371.594, 178.453, 1020.070)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 374.891, 188.977, 1008.477)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 2155.844, 1607.875, 1000.063)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 2202.453, 1617.008, 1000.063)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 2209.242, 1621.211, 1000.063)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 2222.367, 1602.641, 1000.063)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 500.563, -1.367, 1000.734)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 379.039, -178.883, 1000.734)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 2480.86,-1959.27,12.9609)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 1634.11,-2237.53,12.8906)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 2139.52,-1161.48,23.3594)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 2153.23,-1016.15,62.2344)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, -1350.12,493.859,10.5859)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, -2229.19,286.414,34.7031)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 1659.46,1722.86,10.2188)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 2647.7,1129.66,10.2188)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 2845.73,1295.05,10.7891)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 1398.84,2222.61,10.4219)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, -1455.12,2591.66,55.2344)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, -76.0312,1227.99,19.125)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 662.43,-552.164,15.7109)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, -253.742,2599.76,62.2422)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 2271.73,-76.4609,25.9609)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 1789.21,-1369.27,15.1641)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 1729.79,-1943.05,12.9453)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 2060.12,-1897.64,12.9297)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 1928.73,-1772.45,12.9453)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 2325.98,-1645.13,14.2109)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 2352.18,-1357.16,23.7734)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 1154.73,-1460.89,15.1562)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, -1350.12,492.289,10.5859)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, -2118.97,-423.648,34.7266)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, -2118.62,-422.414,34.7266)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, -2097.27,-398.336,34.7266)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, -2092.09,-490.055,34.7266)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, -2063.27,-490.055,34.7266)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, -2005.65,-490.055,34.7266)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, -2034.46,-490.055,34.7266)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, -2068.56,-398.336,34.7266)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, -2039.85,-398.336,34.7266)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, -2011.14,-398.336,34.7266)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, -1980.79,142.664,27.0703)) return 1;
 	else if(IsPlayerInRangeOfPoint(playerid, 2, 2319.99,2532.85,10.2188)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 1520.15,1055.27,10.00)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 2503.14,1243.7,10.2188)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 2085.77,2071.36,10.4531)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, -862.828,1536.61,21.9844)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, -14.7031,1175.36,18.9531)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, -253.742,2597.95,62.2422)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 201.016,-107.617,0.898438)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 1277.84,372.516,18.9531)) return 1;
	else return 0;
}

public SetHP(playerid)
{
	new Float:Health;
	GetPlayerHealth(playerid, Health);
	if(Health < 80)
	{
		SetPlayerHealth(playerid, (Health -0));
	}
	TookSprunk[playerid] = 0;
	return 1;
}

stock IsValidSkin(skinid)
{
    #define	MAX_BAD_SKINS 35
    new badSkins[MAX_BAD_SKINS] =
    {
        0, 3, 4, 5, 6, 8, 10, 42, 65, 74,
		86, 92, 99, 119, 143, 144, 145, 146,
	 	149, 178, 208, 251, 252, 254, 264,
	 	265, 267, 273, 279, 277, 276, 274, 275,
	 	278, 289
    };
    if (skinid < 0 || skinid > 299) return false;
    for (new i = 0; i < MAX_BAD_SKINS; i++)
    {
        if (skinid == badSkins[i]) return false;
    }
    #undef MAX_BAD_SKINS
    return 1;
}

#if !defined SendRconCommandEx
    #define SendRconCommandEx(%0,%1) \
    do \
    { \
        new \
                string[64]; \
        if(strlen(%0) > 0) \
        { \
            format(string, sizeof(string), %0, %1); \
            SendRconCommand(string); \
        } \
    } \
    while(FALSE)
#endif

stock SetServerName(name[])
{
    SendRconCommandEx("hostname %s", name);
    printf("Setting server name to: \"%s\"", name);
    return true;
}

stock LoadFS(name[])
{
    SendRconCommandEx("loadfs %s", name);
    printf("Load FS name: \"%s\"", name);
    return true;
}

stock UnLoadFS(name[])
{
    SendRconCommandEx("unloadfs %s", name);
    printf("Load FS name: \"%s\"", name);
    return true;
}


stock SetServerGamemode(gamemode[])
{
    SendRconCommandEx("gamemodetext %s", gamemode);
    printf("Setting server gamemode name to: \"%s\"", gamemode);
    return true;
}

stock IsSkinValid(SkinID) return ((SkinID >= 0 && SkinID <= 1)||(SkinID == 2)||(SkinID == 7)||(SkinID >= 9 && SkinID <= 41)||(SkinID >= 43 && SkinID <= 85)||(SkinID >=87 && SkinID <= 118)||(SkinID >= 120 && SkinID <= 148)||(SkinID >= 150 && SkinID <= 207)||(SkinID >= 209 && SkinID <= 272)||(SkinID >= 274 && SkinID <= 288)||(SkinID >= 290 && SkinID <= 299)) ? true:false;

public chargement(playerid) // By DiXoN
{
            TogglePlayerControllable(playerid, 1);
            SendClientMessage(playerid,COLOR_GREEN, "Chargement des objets effectué !" );
			return 1;
}

forward KickAll();
public KickAll()
{
	for (new i = 0; i < MAX_PLAYERS; i++)
	{
 		if (IsPlayerConnected(i))
		{
			Kick(i);
		}
	}
}

UnderscoreToSpace(name[])
{
	new pos = strfind(name,"_", true);
	if( pos != -1 )
		name[pos] = ' ';
}

forward IsAtMechanicGarage(playerid);
public IsAtMechanicGarage(playerid)
{
    if(IsPlayerConnected(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid, 50.0, 1613.4583,-1818.7950,13.4967))
		{
		    return 1;
		}
	}
	return 0;
}

//==============================================================================
public LockRacers()
{
	for(new i;i<MAX_PLAYERS;i++)
	{
		if(RaceParticipant[i] != 0)
		{
			TogglePlayerControllable(i,0);
			if(IsPlayerInAnyVehicle(i)) PlayerVehicles[i]=GetPlayerVehicleID(i);
			else PlayerVehicles[i]=0;
		}
	}
}

public UnlockRacers()
{
	for(new i;i<MAX_PLAYERS;i++)
	{
		if(RaceParticipant[i]>0)
		{
			TogglePlayerControllable(i,1);
			if(PlayerVehicles[i] != 0)
			{
				PutPlayerInVehicle(i,PlayerVehicles[i],0);
				PlayerVehicles[i]=0;
			}
		}
	}
}

public countdown() {
	if(RaceStart == 0)
	{
		RaceStart=1;
		LockRacers();
		new tmpprize, OPot;
		OPot=Pot;
		if(PrizeMode == 1 || PrizeMode == 4)
		{
			if(Racemode == 0 || Racemode == 3) tmpprize = floatround(RLenght);
			else if(Racemode == 1) tmpprize = floatround(LLenght * Racelaps);
			else if(Racemode == 2) tmpprize = floatround(RLenght * 2 * Racelaps);
		}
		tmpprize *= DynaMP;
		if(PrizeMode == 0 || PrizeMode == 3) Pot += Prize;
		else if(PrizeMode == 1 || PrizeMode == 4) Pot += tmpprize;
		if(Participants == 1) Pot=OPot;
	}
	if(cd>0)
	{
		format(ystring, sizeof(ystring), "%d...",cd);
		for(new i=0;i<MAX_PLAYERS;i++)
		{
			if(RaceParticipant[i]>1)
			{
				RaceSound(i,1056);
			    GameTextForPlayer(i,ystring,1000,3);
		    }
	    }
	}
	else if(cd == 0)
	{
		format(ystring, sizeof(ystring), "~g~GO",cd);
	    KillTimer(Countdown);
		for(new i=0;i<MAX_PLAYERS;i++)
		{
			if(RaceParticipant[i]>1)
			{
				RaceSound(i,1057);
			    GameTextForPlayer(i,ystring,3000,3);
				RaceParticipant[i]=4;
				CurrentLap[i]=1;
				if(Racemode == 3) SetRaceCheckpoint(i,LCurrentCheckpoint,LCurrentCheckpoint-1);
				else SetRaceCheckpoint(i,0,1);
		    }
	    }
		UnlockRacers();
		RaceTick=tickcount();
	}
	cd--;
}

public SetNextCheckpoint(playerid)
{
	if(Racemode == 0)
	{
		CurrentCheckpoint[playerid]++;
		if(CurrentCheckpoint[playerid] == LCurrentCheckpoint)
		{
			SetRaceCheckpoint(playerid,CurrentCheckpoint[playerid],-1);
			RaceParticipant[playerid]=6;
		}
		else SetRaceCheckpoint(playerid,CurrentCheckpoint[playerid],CurrentCheckpoint[playerid]+1);
	}
	else if(Racemode == 1)
	{
		CurrentCheckpoint[playerid]++;
		if(CurrentCheckpoint[playerid] == LCurrentCheckpoint+1 && CurrentLap[playerid] == Racelaps)
		{
			SetRaceCheckpoint(playerid,0,-1);
			RaceParticipant[playerid]=6;
		}
		else if (CurrentCheckpoint[playerid] == LCurrentCheckpoint+1 && CurrentLap[playerid] != Racelaps)
		{
			CurrentCheckpoint[playerid]=0;
			SetRaceCheckpoint(playerid,0,1);
			RaceParticipant[playerid]=5;
		}
		else if(CurrentCheckpoint[playerid] == 1 && RaceParticipant[playerid]==5)
		{
			ChangeLap(playerid);
			if(LCurrentCheckpoint==1)
			{
				SetRaceCheckpoint(playerid,CurrentCheckpoint[playerid],0);
			}
			else
			{
				SetRaceCheckpoint(playerid,CurrentCheckpoint[playerid],2);
            }
  		    RaceParticipant[playerid]=4;
		}
		else
		{
			if(LCurrentCheckpoint==1 || CurrentCheckpoint[playerid] == LCurrentCheckpoint) SetRaceCheckpoint(playerid,CurrentCheckpoint[playerid],0);
			else SetRaceCheckpoint(playerid,CurrentCheckpoint[playerid],CurrentCheckpoint[playerid]+1);
		}
	}
	else if(Racemode == 2)
	{
		if(RaceParticipant[playerid]==4)
		{
			if(CurrentCheckpoint[playerid] == LCurrentCheckpoint)
			{
			    RaceParticipant[playerid]=5;
				CurrentCheckpoint[playerid]=LCurrentCheckpoint-1;
				SetRaceCheckpoint(playerid,CurrentCheckpoint[playerid],CurrentCheckpoint[playerid]-1);
			}
			else if(CurrentCheckpoint[playerid] == LCurrentCheckpoint-1)
			{
				CurrentCheckpoint[playerid]++;
				SetRaceCheckpoint(playerid,CurrentCheckpoint[playerid],CurrentCheckpoint[playerid]-1);
			}
			else
			{
				CurrentCheckpoint[playerid]++;
				SetRaceCheckpoint(playerid,CurrentCheckpoint[playerid],CurrentCheckpoint[playerid]+1);
			}
		}
		else if(RaceParticipant[playerid]==5)
		{
			if(CurrentCheckpoint[playerid] == 1 && CurrentLap[playerid] == Racelaps)
			{
				SetRaceCheckpoint(playerid,0,-1);
				RaceParticipant[playerid]=6;
			}
			else if(CurrentCheckpoint[playerid] == 0)
			{
				ChangeLap(playerid);
				if(LCurrentCheckpoint==1)
				{
					SetRaceCheckpoint(playerid,1,0);
				}
				else
				{
					SetRaceCheckpoint(playerid,1,2);
	            }
	  		    RaceParticipant[playerid]=4;
			}
			else if(CurrentCheckpoint[playerid] == 1)
			{
				CurrentCheckpoint[playerid]--;
				SetRaceCheckpoint(playerid,0,1);
			}
			else
			{
				CurrentCheckpoint[playerid]--;
				SetRaceCheckpoint(playerid,CurrentCheckpoint[playerid],CurrentCheckpoint[playerid]-1);
			}
		}
	}
	else if(Racemode == 3)
	{
		CurrentCheckpoint[playerid]--;
		if(CurrentCheckpoint[playerid] == 0)
		{
			SetRaceCheckpoint(playerid,CurrentCheckpoint[playerid],-1);
			RaceParticipant[playerid]=6;
		}
		else
		{
			 SetRaceCheckpoint(playerid,CurrentCheckpoint[playerid],CurrentCheckpoint[playerid]-1);
	    }
	}
}

public SetRaceCheckpoint(playerid,target,next)
{
	if(next == -1 && Airrace == 0) SetPlayerRaceCheckpoint(playerid,1,RaceCheckpoints[target][0],RaceCheckpoints[target][1],RaceCheckpoints[target][2],0.0,0.0,0.0,CPsize);
	else if(next == -1 && Airrace == 1) SetPlayerRaceCheckpoint(playerid,4,RaceCheckpoints[target][0],RaceCheckpoints[target][1],RaceCheckpoints[target][2],0.0,0.0,0.0,CPsize);
	else if(Airrace == 1) SetPlayerRaceCheckpoint(playerid,3,RaceCheckpoints[target][0],RaceCheckpoints[target][1],RaceCheckpoints[target][2],RaceCheckpoints[next][0],
							RaceCheckpoints[next][1],RaceCheckpoints[next][2],CPsize);
	else SetPlayerRaceCheckpoint(playerid,0,RaceCheckpoints[target][0],RaceCheckpoints[target][1],RaceCheckpoints[target][2],RaceCheckpoints[next][0],RaceCheckpoints[next][1],
							RaceCheckpoints[next][2],CPsize);
}
public SetBRaceCheckpoint(playerid,target,next)
{
	new ar = BAirrace[b(playerid)];
	if(next == -1 && ar == 0) SetPlayerRaceCheckpoint(playerid,1,BRaceCheckpoints[b(playerid)][target][0],BRaceCheckpoints[b(playerid)][target][1],
								BRaceCheckpoints[b(playerid)][target][2],0.0,0.0,0.0,BCPsize[b(playerid)]);
	else if(next == -1 && ar == 1) SetPlayerRaceCheckpoint(playerid,4,BRaceCheckpoints[b(playerid)][target][0],
				BRaceCheckpoints[b(playerid)][target][1],BRaceCheckpoints[b(playerid)][target][2],0.0,0.0,0.0,
				BCPsize[b(playerid)]);
	else if(ar == 1) SetPlayerRaceCheckpoint(playerid,3,BRaceCheckpoints[b(playerid)][target][0],BRaceCheckpoints[b(playerid)][target][1],BRaceCheckpoints[b(playerid)][target][2],
						BRaceCheckpoints[b(playerid)][next][0],BRaceCheckpoints[b(playerid)][next][1],BRaceCheckpoints[b(playerid)][next][2],BCPsize[b(playerid)]);
	else SetPlayerRaceCheckpoint(playerid,0,BRaceCheckpoints[b(playerid)][target][0],BRaceCheckpoints[b(playerid)][target][1],BRaceCheckpoints[b(playerid)][target][2],
			BRaceCheckpoints[b(playerid)][next][0],BRaceCheckpoints[b(playerid)][next][1],BRaceCheckpoints[b(playerid)][next][2],BCPsize[b(playerid)]);
}

public GetLapTick(playerid)
{
	new tick, lap;
	tick=tickcount();
	if(CurrentLap[playerid]==1)
	{
		lap=tick-RaceTick;
		LastLapTick[playerid]=tick;
	}
	else
	{
		lap=tick-LastLapTick[playerid];
		LastLapTick[playerid]=tick;
	}
	return lap;
}

public GetRaceTick(playerid)
{
	new tick, race;
	tick=tickcount();
	race=tick-RaceTick;
	return race;
}

public endrace()
{
    SaveScores();
	for(new i=0;i<LCurrentCheckpoint;i++)
	{
	    RaceCheckpoints[i][0]=0.0;
	    RaceCheckpoints[i][1]=0.0;
	    RaceCheckpoints[i][2]=0.0;
	}
	LCurrentCheckpoint=0;
    for(new i=0;i<MAX_PLAYERS;i++)
    {
		LastLapTick[i]=0;
        DisablePlayerRaceCheckpoint(i);
		if(RaceParticipant[i]==3)
		{
				TogglePlayerControllable(i,1);
		        if(PlayerVehicles[i] != 0)
		        {
		            PutPlayerInVehicle(i,PlayerVehicles[i],0);
		            PlayerVehicles[i]=0;
		        }
		}
        RaceParticipant[i]=0;
    }
	RaceActive=0;
	RaceStart=0;
	Participants=0;
	Pot = 0;
	PrizeMP = 3;
    SendClientMessageToAll(COLOR_LIGHTGREEN, "[Info:] La course en cours est maintenant terminée.");
}

public BActiveCP(playerid,sele)
{
	if(BCurrentCheckpoints[b(playerid)]-1 == sele) SetBRaceCheckpoint(playerid,sele,-1);
	else SetBRaceCheckpoint(playerid,sele,sele+1);
}

public RaceSound(playerid,sound)
{
	new Float:x,Float:y,Float:z;
	GetPlayerPos(playerid,x,y,z);
	PlayerPlaySound(playerid,sound,x,y,z);
}

public ReadyRefresh()
{
	if(RaceActive==1)
	{
		new Waiting=0, Ready=0;
		for(new i=0;i<MAX_PLAYERS;i++)
		{
			if(RaceParticipant[i] == 1 || RaceParticipant[i] == 2) Waiting++;
			else if(RaceParticipant[i] == 3) Ready++;
		}
		if(Waiting==0)
		{
			SendClientMessageToAll(COLOR_LIGHTGREEN,"[Info:] Tout le monde est prêt, la course va bientot commencer.");
			cd=5;
			Countdown = SetTimer("countdown",1000,1);
		}
		else if(Ready >= Waiting && MajorityDelay > 0 && MajStart == 0)
		{
			MajStart=1;
			format(ystring,sizeof(ystring),"[Info:] La moitié des pilotes sont prêts, la course débute dans %d secondes", MajorityDelay);
			SendClientMessageToAll(COLOR_LIGHTGREEN,ystring);
			MajStartTimer = SetTimer("mscountdown",10000,1);
			mscd= MajorityDelay;
		}
	}
}

public mscountdown()
{
	if(RaceStart == 1 || MajStart == 0)
	{
		MajStart=0;
		KillTimer(MajStartTimer);
	}
	else
	{
		mscd-=10;
		if(mscd <= 0)
		{
			for(new i;i<MAX_PLAYERS;i++)
			{
				if(RaceParticipant[i] != 3 && RaceParticipant[i] != 0)
				{
					GameTextForPlayer(i,"~r~Vous n etes pas arriver a temps",6000,3);
					DisablePlayerRaceCheckpoint(i);
					RaceParticipant[i]=0;
					Participants--;
				}
				else if (RaceParticipant[i]!=0) SendClientMessage(i,COLOR_WHITE,"[Info:] La course commence maintenant.");
			}
			KillTimer(MajStartTimer);
			cd=5;
			Countdown = SetTimer("countdown",1000,1);
		}
		else
		{

			new hurry_string[64];
			format(ystring,sizeof(ystring),"~y~La course commence dans ~w~%d~y~ secondes",mscd);
			format(hurry_string,sizeof(hurry_string),"%s~n~~r~DEPECHEZ VOUS ET FAITES /READY",ystring);
			for(new i;i<MAX_PLAYERS;i++)
			{
				if(RaceParticipant[i] < 3 && mscd < 31) GameTextForPlayer(i,hurry_string,6000,3);
				else if(RaceParticipant[i] > 0) GameTextForPlayer(i,ystring,6000,3);
			}
		}
	}
}

public CheckBestLap(playerid,laptime)
{
	if(TopLapTimes[4]<laptime && TopLapTimes[4] != 0 || Racemode == 0)
	{
		return 0;
	}
	for(new i;i<5;i++)
	{
	    if(TopLapTimes[i] == 0)
	    {
			new playername[MAX_PLAYER_NAME];
	        GetPlayerName(playerid,playername,MAX_PLAYER_NAME);
	        TopLappers[i]=playername;
	        TopLapTimes[i]=laptime;
			ScoreChange=1;
			return i+1;
	    }
		else if(TopLapTimes[i] > laptime)
		{
		    for(new j=4;j>=i;j--)
		    {
		        TopLapTimes[j+1]=TopLapTimes[j];
		        TopLappers[j+1]=TopLappers[j];
		    }
			new playername[MAX_PLAYER_NAME];
	        GetPlayerName(playerid,playername,MAX_PLAYER_NAME);
		    TopLapTimes[i]=laptime;
			TopLappers[i]=playername;
			ScoreChange=1;
			return i+1;
		}
	}
	return -1;
}

public CheckBestRace(playerid,racetime)
{
	if(TopRacerTimes[4]<racetime && TopRacerTimes[4] != 0) return 0;
	for(new i;i<5;i++)
	{
	    if(TopRacerTimes[i] == 0)
	    {
			new playername[MAX_PLAYER_NAME];
	        GetPlayerName(playerid,playername,MAX_PLAYER_NAME);
	        TopRacers[i]=playername;
	        TopRacerTimes[i]=racetime;
			ScoreChange=1;
			return i+1;
	    }
		else if(TopRacerTimes[i] > racetime)
		{
		    for(new j=4;j>=i;j--)
		    {
		        TopRacerTimes[j+1]=TopRacerTimes[j];
		        TopRacers[j+1]=TopRacers[j];
		    }
			new playername[MAX_PLAYER_NAME];
	        GetPlayerName(playerid,playername,MAX_PLAYER_NAME);
		    TopRacerTimes[i]=racetime;
			TopRacers[i]=playername;
			ScoreChange=1;
			return i+1;
		}
	}
	return -1;
}

public SaveScores()
{
	if(ScoreChange == 1)
	{
		fremove(CFile);
		new File:f,Float:x,Float:y,Float:z, templine[512];
		f = fopen(CFile,io_write);
		format(templine,sizeof(templine),"YRACE %d %s %d %d %d %f\n", RACEFILE_VERSION, CBuilder, ORacemode, ORacelaps, OAirrace, OCPsize);
		fwrite(f,templine);
		format(templine,sizeof(templine),"%s %d %s %d %s %d %s %d %s %d\n",
				TopRacers[0],TopRacerTimes[0],TopRacers[1], TopRacerTimes[1], TopRacers[2],TopRacerTimes[2],
	 			TopRacers[3],TopRacerTimes[3],TopRacers[4], TopRacerTimes[4]);
		fwrite(f,templine);
		format(templine,sizeof(templine),"%s %d %s %d %s %d %s %d %s %d\n",
				TopLappers[0],TopLapTimes[0],TopLappers[1], TopLapTimes[1], TopLappers[2],TopLapTimes[2],
	 			TopLappers[3],TopLapTimes[3],TopLappers[4], TopLapTimes[4]);
		fwrite(f,templine);
		for(new i = 0; i < LCurrentCheckpoint+1;i++)
		{
			x=RaceCheckpoints[i][0];
			y=RaceCheckpoints[i][1];
			z=RaceCheckpoints[i][2];
			format(templine,sizeof(templine),"%f %f %f\n",x,y,z);
			fwrite(f,templine);
		}
		fclose(f);
	}
	ScoreChange=0;
}

public ChangeLap(playerid)
{
	new LapTime, TimeString[10], checklap;
	LapTime=GetLapTick(playerid);
	TimeString=BeHuman(LapTime);
	format(ystring,sizeof(ystring),"~w~Tours: %d/%d - Temps: %s", CurrentLap[playerid], Racelaps, TimeString);
	if(Racemode == ORacemode && ORacelaps == Racelaps)
	{
		checklap=CheckBestLap(playerid,LapTime);
		if(checklap==1) format(ystring,sizeof(ystring),"%s~n~~y~RECORD DU TOUR",ystring);
	}
	CurrentLap[playerid]++;
	if(CurrentLap[playerid] == Racelaps) format(ystring,sizeof(ystring),"%s~n~~g~Dernier Tour",ystring);
	GameTextForPlayer(playerid,ystring,5000,3);
}

BeHuman(ticks)
{
	new HumanTime[10], minutes, seconds, secstring[2], msecstring[3];
	minutes=ticks/60000;
	ticks=ticks-(minutes*60000);
	seconds=ticks/1000;
	ticks=ticks-(seconds*1000);
	if(seconds <10) format(secstring,sizeof(secstring),"0%d",seconds);
	else format(secstring,sizeof(secstring),"%d",seconds);
	format(HumanTime,sizeof(HumanTime),"%d:%s",minutes,secstring);
	if(ticks < 10) format(msecstring,sizeof(msecstring),"00%d", ticks);
	else if(ticks < 100) format(msecstring,sizeof(msecstring),"0%d",ticks);
	else format(msecstring,sizeof(msecstring),"%d",ticks);
	format(HumanTime,sizeof(HumanTime),"%s.%s",HumanTime,msecstring);
	return HumanTime;
}

public LoadTimes(playerid,timemode,tmp[])
{
	new temprace[67], idx;
	format(temprace,sizeof(temprace),"Race/%s.yr",tmp);
    if(strlen(tmp))
    {
		if(!fexist(temprace))
		{
			format(ystring,sizeof(ystring),"[Error:] La course \"%s\" n'existe pas.",tmp);
			SendClientMessage(playerid,COLOR_GREY,ystring);
			return 1;
		}
		else
		{
			new File:f, templine[256], TBuilder[MAX_PLAYER_NAME], TempLapper[MAX_PLAYER_NAME], TempLap;
			idx=0;
			f = fopen(temprace, io_read);
			fread(f,templine,sizeof(templine));
			if(templine[0] == 'Y')
			{
				new fileversion;
			    otherstrtok(templine,idx);
				fileversion = strval(otherstrtok(templine,idx));
				if(fileversion > RACEFILE_VERSION)
				{
				    format(ystring,sizeof(ystring),"[Error:] La course \"%s\" a été créee avec une version plus récente. Impossible de la charger.",tmp);
				    SendClientMessage(playerid,COLOR_GREY,ystring);
				    return 1;
				}
				TBuilder=otherstrtok(templine,idx);
				fread(f,templine,sizeof(templine));
				if(timemode ==1) fread(f,templine,sizeof(templine));
				idx=0;
				if(timemode == 0) format(ystring,sizeof(ystring),"[Info:] %s par %s - Meilleur Temps au Tour:",tmp,TBuilder);
				else if(timemode == 1) format(ystring,sizeof(ystring),"[Info:] %s par %s - Meilleur Tour:",tmp,TBuilder);
				else return 1;
				SendClientMessage(playerid,COLOR_WHITE,ystring);
				for(new i=0;i<5;i++)
				{
				    TempLapper=otherstrtok(templine,idx);
				    TempLap=strval(otherstrtok(templine,idx));
					if(TempLap == 0)
					{
					    format(ystring,sizeof(ystring),"%d. Aucun actuellement.",i+1);
						i=6;
					}
					else format(ystring,sizeof(ystring),"%d. %s - %s",i+1,BeHuman(TempLap),TempLapper);
					SendClientMessage(playerid,COLOR_WHITE,ystring);
				}
				return 1;
			}
			else
			{
				format(ystring,sizeof(ystring),"[Error:] La course \"%s\" ne contient pas de fichier comprenant les temps.",tmp);
				SendClientMessage(playerid,COLOR_GREY,ystring);
				return 1;
			}
		}
    }
	return 0;
}

public IsNotAdmin(playerid)
{
    if (PlayerInfo[playerid][pAdmin] < 1)
	{
	    SendClientMessage(playerid, COLOR_GREY, "[Error:] You are not authorized to use that command");
	    return 1;
    }
    return 0;
}

public GetBuilderSlot(playerid)
{
	for(new i;i < MAX_BUILDERS; i++)
	{
	    if(!(BuilderSlots[i] < MAX_PLAYERS+1))
	    {
	        BuilderSlots[i] = playerid;
	        RaceBuilders[playerid] = i+1;
			return i+1;
	    }
	}
	return 0;
}

public b(playerid) return RaceBuilders[playerid]-1;

public Float:Distance(Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2)
{
	new Float:temp=floatsqroot((x1-x2) * (x1-x2) + (y1-y2) * (y1-y2) + (z1-z2) * (z1-z2));
	if(temp < 0) temp=temp*(-1);
	return temp;
}

public clearrace(playerid)
{
	for(new i=0;i<BCurrentCheckpoints[b(playerid)];i++)
	{
		BRaceCheckpoints[b(playerid)][i][0]=0.0;
		BRaceCheckpoints[b(playerid)][i][1]=0.0;
		BRaceCheckpoints[b(playerid)][i][2]=0.0;
	}
	BCurrentCheckpoints[b(playerid)]=0;
	DisablePlayerRaceCheckpoint(playerid);
	SendClientMessage(playerid, COLOR_WHITE, "[Info:] Your race has been cleared");
	BuilderSlots[b(playerid)] = MAX_PLAYERS+1;
	RaceBuilders[playerid]=0;
}

public startrace()
{
	format(ystring,128,"[Info:] La course \"%s\" a débutée, faites /join pour participer a cette course.",CRaceName);
	SendClientMessageToAll(COLOR_LIGHTGREEN,ystring);
	if(Racemode == 0) format(ystring,sizeof(ystring),"Default");
	else if(Racemode == 1) format(ystring,sizeof(ystring),"Ring");
	else if(Racemode == 2) format(ystring,sizeof(ystring),"Yoyo");
	else if(Racemode == 3) format(ystring,sizeof(ystring),"Mirror");
	format(ystring,sizeof(ystring),"[Info:] Racemode: %s Nombre de Tours: %d",ystring,Racelaps);
	if(PrizeMode >= 2) format(ystring,sizeof(ystring),"%s Prix de l'entrée: %d",ystring,JoinFee);
	if(Airrace == 1) format(ystring,sizeof(ystring),"%s Air Race",ystring);
	if(Racemode == 0 || Racemode == 3) format(ystring,sizeof(ystring),"%s Longueur du Circuit: %0.2fkm", ystring, RLenght/1000);
	else if(Racemode == 1) format(ystring,sizeof(ystring),"%s Longueur du Tour: %.2fkm, Total: %.2fkm", ystring, LLenght/1000, LLenght * Racelaps / 1000);
	SendClientMessageToAll(COLOR_LIGHTGREEN,ystring);
	RaceStart=0;
	RaceActive=1;
	ScoreChange=0;
	Ranking=1;
	PrizeMP=3;
}

ReturnModeName(mode)
{
	new modename[8];
	if(mode == 0) modename="Default";
	else if(mode == 1) modename="Ring";
	else if(mode == 2) modename="Yoyo";
	else if(mode == 3) modename="Mirror";
	return modename;
}

public LoadRace(tmp[])
{
	new race_name[32],templine[512];
	format(CRaceName,sizeof(CRaceName), "%s",tmp);
	format(race_name,sizeof(race_name), "Race/%s.yr",tmp);
	if(!fexist(race_name)) return -1;
	CFile=race_name;
    LCurrentCheckpoint=-1; RLenght=0; RLenght=0;
	new File:f, i;
	f = fopen(race_name, io_read);
	fread(f,templine,sizeof(templine));
	if(templine[0] == 'Y')
	{
		new fileversion;
	    otherstrtok(templine,i);
		fileversion = strval(otherstrtok(templine,i));
		if(fileversion > RACEFILE_VERSION) return -2;
		CBuilder=otherstrtok(templine,i);
		ORacemode = strval(otherstrtok(templine,i));
		ORacelaps = strval(otherstrtok(templine,i));
		if(fileversion > 1)
		{
			Airrace = strval(otherstrtok(templine,i));
			CPsize = floatstr(otherstrtok(templine,i));
		}
		else
		{
			Airrace = 0;
			CPsize = 8.0;
		}
		OAirrace = Airrace;
		OCPsize = CPsize;
		Racemode=ORacemode; Racelaps=ORacelaps;
		fread(f,templine,sizeof(templine));
		i=0;
		for(new j=0;j<5;j++)
		{
		    TopRacers[j]=otherstrtok(templine,i);
		    TopRacerTimes[j]=strval(otherstrtok(templine,i));
		}
		fread(f,templine,sizeof(templine));
		i=0;
		for(new j=0;j<5;j++)
		{
		    TopLappers[j]=otherstrtok(templine,i);
		    TopLapTimes[j]=strval(otherstrtok(templine,i));
		}
	}
	else
	{
		LCurrentCheckpoint++;
		RaceCheckpoints[LCurrentCheckpoint][0] = floatstr(otherstrtok(templine,i));
		RaceCheckpoints[LCurrentCheckpoint][1] = floatstr(otherstrtok(templine,i));
		RaceCheckpoints[LCurrentCheckpoint][2] = floatstr(otherstrtok(templine,i));
		Racemode=0; ORacemode=0; Racelaps=0; ORacelaps=0;
		CPsize = 8.0; Airrace = 0;
		OCPsize = CPsize; OAirrace = Airrace;
		CBuilder="UNKNOWN";
		for(new j;j<5;j++)
		{
		    TopLappers[j]="A"; TopLapTimes[j]=0; TopRacers[j]="A"; TopRacerTimes[j]=0;
		}
	}
	while(fread(f,templine,sizeof(templine),false))
	{
		LCurrentCheckpoint++;
		i=0;
		RaceCheckpoints[LCurrentCheckpoint][0] = floatstr(otherstrtok(templine,i));
		RaceCheckpoints[LCurrentCheckpoint][1] = floatstr(otherstrtok(templine,i));
		RaceCheckpoints[LCurrentCheckpoint][2] = floatstr(otherstrtok(templine,i));
		if(LCurrentCheckpoint >= 1)
		{
		    RLenght+=Distance(RaceCheckpoints[LCurrentCheckpoint][0],RaceCheckpoints[LCurrentCheckpoint][1],
								RaceCheckpoints[LCurrentCheckpoint][2],RaceCheckpoints[LCurrentCheckpoint-1][0],
								RaceCheckpoints[LCurrentCheckpoint-1][1],RaceCheckpoints[LCurrentCheckpoint-1][2]);
		}
	}
	LLenght = RLenght + Distance(RaceCheckpoints[LCurrentCheckpoint][0],RaceCheckpoints[LCurrentCheckpoint][1],
								RaceCheckpoints[LCurrentCheckpoint][2],RaceCheckpoints[0][0],RaceCheckpoints[0][1],
								RaceCheckpoints[0][2]);
	fclose(f);
	return 1;
}

public RaceRotation()
{
	if(!fexist("yrace.rr"))
	{
	    printf("Error in Race Rotation (yrace.rr): yrace.rr does not exist");
	    return -1;
	}

	if(RRotation == -1)
	{
		KillTimer(RotationTimer);
		return -1;
	}
	if(Participants > 0) return 1;

	new File:f, templine[32], rotfile[]="yrace.rr", rraces=-1, rracenames[32][32], idx, fback;
	f = fopen(rotfile, io_read);
	while(fread(f,templine,sizeof(templine),false))
	{
		idx = 0;
		rraces++;
		rracenames[rraces]=otherstrtok(templine,idx);
	}
	fclose(f);
	RRotation++;
	if(RRotation > rraces) RRotation = 0;
	fback = LoadRace(rracenames[RRotation]);
	if(fback == -1) printf("Error in Race Rotation (yrace.rr): Race \"%s\" does not exist",rracenames[RRotation]);
	else if (fback == -2) printf("Error in Race Rotation (yrace.rr): Race \"%s\" is created with a newer version",rracenames[RRotation]);
	else startrace();
	return 1;
}

public CreateRaceMenus()
{
	MAdmin = CreateMenu("Admin menu", 1, 25, 170, 220, 25);
	AddMenuItem(MAdmin,0,"Set prizemode...");
	AddMenuItem(MAdmin,0,"Set fixed prize...");
	AddMenuItem(MAdmin,0,"Set dynamic prize...");
	AddMenuItem(MAdmin,0,"Set entry fees...");
	AddMenuItem(MAdmin,0,"Majority delay...");
	AddMenuItem(MAdmin,0,"End current race");
	AddMenuItem(MAdmin,0,"Toggle Race Admin [RA]");
	AddMenuItem(MAdmin,0,"Toggle Build Admin [BA]");
	AddMenuItem(MAdmin,0,"Toggle Race Rotation [RR]");
	AddMenuItem(MAdmin,0,"Exit");
	if(RaceAdmin == 1) format(ystring,sizeof(ystring),"RA: On");
	else format(ystring,sizeof(ystring),"RA: Off");
	if(BuildAdmin == 1) format(ystring,sizeof(ystring),"%s BA: On",ystring);
	else format(ystring,sizeof(ystring),"%s BA: Off",ystring);
	if(RRotation >= 0) format(ystring,sizeof(ystring),"%s RR: On",ystring);
	else format(ystring,sizeof(ystring),"%s RR: Off",ystring);
	SetMenuColumnHeader(MAdmin,0,ystring);

	MPMode = CreateMenu("Set prizemode:", 1, 25, 170, 220, 25);
	AddMenuItem(MPMode,0,"Fixed");
	AddMenuItem(MPMode,0,"Dynamic");
	AddMenuItem(MPMode,0,"Entry Fee");
	AddMenuItem(MPMode,0,"Entry Fee + Fixed");
	AddMenuItem(MPMode,0,"Entry Fee + Dynamic");
	AddMenuItem(MPMode,0,"Back");
	SetMenuColumnHeader(MPMode,0,"Mode: Fixed");

	MPrize = CreateMenu("Fixed prize:", 1, 25, 170, 220, 25);
	AddMenuItem(MPrize,0,"+100$");
	AddMenuItem(MPrize,0,"+1000$");
	AddMenuItem(MPrize,0,"+10000$");
	AddMenuItem(MPrize,0,"-100$");
	AddMenuItem(MPrize,0,"-1000$");
	AddMenuItem(MPrize,0,"-10000$");
	AddMenuItem(MPrize,0,"Back");
	format(ystring,sizeof(ystring),"Amount: %d",Prize);
	SetMenuColumnHeader(MPrize,0,ystring);

	MDyna = CreateMenu("Dynamic Prize:", 1, 25, 170, 220, 25);
	AddMenuItem(MDyna,0,"+1x");
	AddMenuItem(MDyna,0,"+5x");
	AddMenuItem(MDyna,0,"-1x");
	AddMenuItem(MDyna,0,"-5x");
	AddMenuItem(MDyna,0,"Leave");
	format(ystring,sizeof(ystring),"Multiplier: %dx",DynaMP);
	SetMenuColumnHeader(MDyna,0,ystring);

	MBuild = CreateMenu("Build Menu", 1, 25, 170, 220, 25);
	AddMenuItem(MBuild,0,"Set laps...");
	AddMenuItem(MBuild,0,"Set racemode...");
	AddMenuItem(MBuild,0,"Checkpoint size...");
	AddMenuItem(MBuild,0,"Toggle air race");
	AddMenuItem(MBuild,0,"Clear the race and exit");
	AddMenuItem(MBuild,0,"Leave");
	SetMenuColumnHeader(MBuild,0,"Air race: Off");

	MLaps = CreateMenu("Set laps", 1, 25, 170, 220, 25);
	AddMenuItem(MLaps,0,"+1");
	AddMenuItem(MLaps,0,"+5");
	AddMenuItem(MLaps,0,"+10");
	AddMenuItem(MLaps,0,"-1");
	AddMenuItem(MLaps,0,"-5");
	AddMenuItem(MLaps,0,"-10");
	AddMenuItem(MLaps,0,"Back");

	MRacemode = CreateMenu("Racemode", 1, 25, 170, 220, 25);
	AddMenuItem(MRacemode,0,"Default");
	AddMenuItem(MRacemode,0,"Ring");
	AddMenuItem(MRacemode,0,"Yoyo");
	AddMenuItem(MRacemode,0,"Mirror");
	AddMenuItem(MRacemode,0,"Back");

	MRace = CreateMenu("Race Menu", 1, 25, 170, 220, 25);
	AddMenuItem(MRace,0,"Set laps...");
	AddMenuItem(MRace,0,"Set racemode...");
	AddMenuItem(MRace,0,"Set checkpoint size...");
	AddMenuItem(MRace,0,"Toggle air race");
	AddMenuItem(MRace,0,"Start race");
	AddMenuItem(MRace,0,"Exit");

	MFee = CreateMenu("Entry fees", 1, 25, 170, 220, 25);
	AddMenuItem(MFee,0,"+100");
	AddMenuItem(MFee,0,"+1000");
	AddMenuItem(MFee,0,"+10000");
	AddMenuItem(MFee,0,"-100");
	AddMenuItem(MFee,0,"-1000");
	AddMenuItem(MFee,0,"-10000");
	AddMenuItem(MFee,0,"Back");
	format(ystring,sizeof(ystring),"Fee: %d$",JoinFee);
	SetMenuColumnHeader(MFee,0,ystring);

	MCPsize = CreateMenu("CP size", 1, 25, 170, 220, 25);
	AddMenuItem(MCPsize,0,"+0.1");
	AddMenuItem(MCPsize,0,"+1");
	AddMenuItem(MCPsize,0,"+10");
	AddMenuItem(MCPsize,0,"-0.1");
	AddMenuItem(MCPsize,0,"-1");
	AddMenuItem(MCPsize,0,"-10");
	AddMenuItem(MCPsize,0,"Back");

	MDelay = CreateMenu("Majority Delay", 1, 25, 170, 220, 25);
	AddMenuItem(MDelay,0,"+10s");
	AddMenuItem(MDelay,0,"+60s");
	AddMenuItem(MDelay,0,"-10s");
	AddMenuItem(MDelay,0,"-60s");
	AddMenuItem(MDelay,0,"Back");
	if(MajorityDelay == 0) format(ystring,sizeof(ystring),"Delay: disabled");
	else format(ystring,sizeof(ystring),"Delay: %ds",MajorityDelay);
	SetMenuColumnHeader(MDelay,0,ystring);
}
//==============================================================================
public LoadCar()
{
	new arrCoords[31][64];
	new strFromFile2[256];
	new File: file = fopen("vehinfo.cfg", io_read);
	if (file)
	{
		new idx = carsonserver;
		while (idx < sizeof(CarInfo))
		{
			fread(file, strFromFile2);
			split(strFromFile2, arrCoords, ',');
			CarInfo[idx][cModel] = strval(arrCoords[0]);
			CarInfo[idx][cLocationx] = floatstr(arrCoords[1]);
			CarInfo[idx][cLocationy] = floatstr(arrCoords[2]);
			CarInfo[idx][cLocationz] = floatstr(arrCoords[3]);
			CarInfo[idx][cAngle] = floatstr(arrCoords[4]);
			CarInfo[idx][cColorOne] = strval(arrCoords[5]);
			CarInfo[idx][cColorTwo] = strval(arrCoords[6]);
			strmid(CarInfo[idx][cOwner], arrCoords[7], 0, strlen(arrCoords[7]), 255);
			strmid(CarInfo[idx][cDescription], arrCoords[8], 0, strlen(arrCoords[8]), 255);
			CarInfo[idx][cValue] = strval(arrCoords[9]);
			strmid(CarInfo[idx][cLicense], arrCoords[10], 0, strlen(arrCoords[10]), 255);
			CarInfo[idx][cOwned] = strval(arrCoords[11]);
			CarInfo[idx][cLock] = strval(arrCoords[12]);
			CarInfo[idx][mod1] = strval(arrCoords[13]);
			CarInfo[idx][mod2] = strval(arrCoords[14]);
			CarInfo[idx][mod3] = strval(arrCoords[15]);
			CarInfo[idx][mod4] = strval(arrCoords[16]);
			CarInfo[idx][mod5] = strval(arrCoords[17]);
			CarInfo[idx][mod6] = strval(arrCoords[18]);
			CarInfo[idx][mod7] = strval(arrCoords[19]);
			CarInfo[idx][mod8] = strval(arrCoords[20]);
			CarInfo[idx][mod9] = strval(arrCoords[21]);
			CarInfo[idx][mod10] = strval(arrCoords[22]);
			CarInfo[idx][mod11] = strval(arrCoords[23]);
			CarInfo[idx][mod12] = strval(arrCoords[24]);
			CarInfo[idx][mod13] = strval(arrCoords[25]);
			CarInfo[idx][mod14] = strval(arrCoords[26]);
			CarInfo[idx][mod15] = strval(arrCoords[27]);
			CarInfo[idx][mod16] = strval(arrCoords[28]);
			CarInfo[idx][mod17] = strval(arrCoords[29]);
			CarInfo[idx][paintjob] = strval(arrCoords[30]);
			printf("CarInfo: %d Owner:%s LicensePlate %s",idx,CarInfo[idx][cOwner],CarInfo[idx][cLicense]);
			idx++;
		}
	}
	return 1;
}

public SaveCarCoords()
{
	new idx;
	new File: file2;
	while (idx < sizeof(CarInfo))
	{
	    new coordsstring[256];
	    format(coordsstring, sizeof(coordsstring), "%d|%f|%f|%f|%f|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d\n",
		CarInfo[idx][cModel],
		CarInfo[idx][cLocationx],
		CarInfo[idx][cLocationy],
		CarInfo[idx][cLocationz],
		CarInfo[idx][cAngle],
		CarInfo[idx][cColorOne],
		CarInfo[idx][cColorTwo],
		CarInfo[idx][mod1],
		CarInfo[idx][mod2],
		CarInfo[idx][mod3],
		CarInfo[idx][mod4],
		CarInfo[idx][mod5],
		CarInfo[idx][mod6],
		CarInfo[idx][mod7],
		CarInfo[idx][mod8],
		CarInfo[idx][mod9],
		CarInfo[idx][mod10],
		CarInfo[idx][mod11],
		CarInfo[idx][mod12],
		CarInfo[idx][mod13],
		CarInfo[idx][mod14],
		CarInfo[idx][mod15],
		CarInfo[idx][mod16],
		CarInfo[idx][mod17],
		CarInfo[idx][paintjob]);
		if(idx == carsonserver)
		{
			file2 = fopen("vehinfo.cfg", io_write);
		}
		else
		{
			file2 = fopen("vehinfo.cfg", io_append);
		}
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	return 1;
}

public SaveTrunk()
{
	new idx;
	new File: file2;
	idx = 1;
	while (idx < sizeof(CarInfo))
	{
		new coordsstring[256];
		format(coordsstring, sizeof(coordsstring), "%i,%i,%i,%i,%i,%i,%i,%i,%i,%f\n",
		vehTrunk[idx][1],
		vehTrunkAmmo[idx][1],
		vehTrunk[idx][2],
		vehTrunkAmmo[idx][2],
		vehTrunk[idx][3],
		vehTrunkAmmo[idx][3],
		vehTrunk[idx][4],
		vehTrunkAmmo[idx][4],
		vehTrunkCounter[idx],
		vehTrunkArmour[idx]);
		if(idx == 1)
		{
			file2 = fopen("trunk.cfg", io_write);
		}
		else
		{
			file2 = fopen("trunk.cfg", io_append);
		}
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	return 1;
}

public LoadTrunk()
{
	new arrCoords[13][64];
	new strFromFile2[256];
	new File: file = fopen("trunk.cfg", io_read);
	if (file)
	{
		new idx = 1;
		while (idx < sizeof(CarInfo))
		{
		    fread(file, strFromFile2);
		    split(strFromFile2, arrCoords, ',');
		    vehTrunk[idx][1] = strval(arrCoords[0]);
		    vehTrunkAmmo[idx][1] = strval(arrCoords[1]);
		    vehTrunk[idx][2] = strval(arrCoords[2]);
		    vehTrunkAmmo[idx][2] = strval(arrCoords[3]);
		    vehTrunk[idx][3] = strval(arrCoords[4]);
		    vehTrunkAmmo[idx][3] = strval(arrCoords[5]);
		    vehTrunk[idx][4] = strval(arrCoords[6]);
		    vehTrunkAmmo[idx][4] = strval(arrCoords[7]);
		    vehTrunkCounter[idx] = strval(arrCoords[8]);
		    vehTrunkArmour[idx] = floatstr(arrCoords[9]);
		    idx++;
		}
	}
	return 1;
}

// Radars :
stock LoadCameras()
{
	new file[64];
	for(new i = 0;i<CAMERA_LIMIT;i++)
	{
	    format(file,sizeof file,"/Radars/%i.txt",i);
	    if(fexist(file))
	    {
	        INI_ParseFile(file,"LoadCam",.bExtra = true,.extra = i);
	        #if STREAMER_ENABLED == true
				SpeedCameras[i][_objectid] = STREAMER_ADD(18880,SpeedCameras[i][_x],SpeedCameras[i][_y],SpeedCameras[i][_z],0,0,SpeedCameras[i][_rot]);
			#else
			    SpeedCameras[i][_objectid] = CreateObject(18880,SpeedCameras[i][_x],SpeedCameras[i][_y],SpeedCameras[i][_z],0,0,SpeedCameras[i][_rot]);
			#endif
			SpeedCameras[i][_active] = true;
			if(SpeedCameras[i][_activelabel] == true)
			{
				SpeedCameras[i][_label] = AttachLabelToCamera(i,SpeedCameras[i][_labeltxt]);
			}
			loaded_cameras++;
	    }
	}
	printf("%i radar(s) chargé.",loaded_cameras);
}
forward LoadCam(cameraid,name[],value[]);
public LoadCam(cameraid,name[],value[])
{
	INI_Float("_x",SpeedCameras[cameraid][_x]);
	INI_Float("_y",SpeedCameras[cameraid][_y]);
	INI_Float("_z",SpeedCameras[cameraid][_z]);
	INI_Float("_rot",SpeedCameras[cameraid][_rot]);
	INI_Int("_range",SpeedCameras[cameraid][_range]);
	INI_Int("_limit",SpeedCameras[cameraid][_limit]);
	INI_Int("_fine",SpeedCameras[cameraid][_fine]);
	INI_Int("_usemph",SpeedCameras[cameraid][_usemph]);
	INI_Bool("_activelabel",SpeedCameras[cameraid][_activelabel]);
	INI_String("_labeltxt",SpeedCameras[cameraid][_labeltxt],128);
	return 1;
}
stock RemoveCameras()
{
	for(new i = 0;i<loaded_cameras +1;i++)
	{
	    if(SpeedCameras[i][_active] == true)
	    {
	        #if STREAMER_ENABLED == true
	            STREAMER_REMOVE(SpeedCameras[i][_objectid]);
	        #else
	        	DestroyObject(SpeedCameras[i][_objectid]);
	        #endif
	        if(SpeedCameras[i][_activelabel] == true)
	        {
				Delete3DTextLabel(SpeedCameras[i][_label]);
	        }
	    }
	}
	return 1;
}
stock generate_id()
{
	new file[64];
	for(new i = 0;i<CAMERA_LIMIT;i++)
	{
		format(file,sizeof file,"/Radars/%i.txt",i);
		if(!fexist(file)) return i;
	}
	return -1;
}
stock CreateSpeedCam(Float:x,Float:y,Float:z,Float:rot,range,limit,fine,use_mph = 0)
{
	new newid = generate_id();
	if(newid == -1)
	{
	    print("Radar: Erreur! La limite de radars a été atteinte ! Impossible de créer de nouveaux radars !");
	    return 1;
	}
	if (newid == loaded_cameras || newid > loaded_cameras)
	{
	    loaded_cameras++;
	}
	SpeedCameras[newid][_x] = x;
	SpeedCameras[newid][_y] = y;
	SpeedCameras[newid][_z] = z;
	SpeedCameras[newid][_rot] = rot;
	SpeedCameras[newid][_range] = range;
	SpeedCameras[newid][_limit] = limit;
	SpeedCameras[newid][_fine] = fine;
	SpeedCameras[newid][_usemph] = use_mph;
	#if STREAMER_ENABLED == true
		SpeedCameras[newid][_objectid] = STREAMER_ADD(18880,x,y,z,0,0,rot);
	#else
		SpeedCameras[newid][_objectid] = CreateObject(18880,x,y,z,0,0,rot);
	#endif
	SpeedCameras[newid][_active] = true;
	SpeedCameras[newid][_activelabel] = false;
	SpeedCameras[newid][_labeltxt] = 0;
	new file[64];format(file,sizeof file,"/Radars/%i.txt",newid);
	new INI:handler = INI_Open(file);
	INI_WriteFloat(handler,"_x",SpeedCameras[newid][_x]);
	INI_WriteFloat(handler,"_y",SpeedCameras[newid][_y]);
	INI_WriteFloat(handler,"_z",SpeedCameras[newid][_z]);
	INI_WriteFloat(handler,"_rot",SpeedCameras[newid][_rot]);
	INI_WriteInt(handler,"_range",SpeedCameras[newid][_range]);
	INI_WriteInt(handler,"_limit",SpeedCameras[newid][_limit]);
	INI_WriteInt(handler,"_fine",SpeedCameras[newid][_fine]);
	INI_WriteInt(handler,"_usemph",SpeedCameras[newid][_usemph]);
	INI_WriteBool(handler,"_activelabel",SpeedCameras[newid][_activelabel]);
	INI_WriteString(handler,"_labeltxt",SpeedCameras[newid][_labeltxt]);
	INI_Close(handler);
	return newid;
}
stock SaveCamera(cameraid)
{
	new file[64];format(file,sizeof file,"/Radars/%i.txt",cameraid);
	new INI:handler = INI_Open(file);
	INI_WriteFloat(handler,"_x",SpeedCameras[cameraid][_x]);
	INI_WriteFloat(handler,"_y",SpeedCameras[cameraid][_y]);
	INI_WriteFloat(handler,"_z",SpeedCameras[cameraid][_z]);
	INI_WriteFloat(handler,"_rot",SpeedCameras[cameraid][_rot]);
	INI_WriteInt(handler,"_range",SpeedCameras[cameraid][_range]);
	INI_WriteInt(handler,"_limit",SpeedCameras[cameraid][_limit]);
	INI_WriteInt(handler,"_fine",SpeedCameras[cameraid][_fine]);
	INI_WriteInt(handler,"_usemph",SpeedCameras[cameraid][_usemph]);
	INI_WriteBool(handler,"_activelabel",SpeedCameras[cameraid][_activelabel]);
	INI_WriteString(handler,"_labeltxt",SpeedCameras[cameraid][_labeltxt]);
	INI_Close(handler);
}
stock DestroySpeedCam(cameraid)
{
    SpeedCameras[cameraid][_active] = false;
	#if STREAMER_ENABLED == true
		STREAMER_REMOVE(SpeedCameras[cameraid][_objectid]);
	#else
		DestroyObject(SpeedCameras[cameraid][_objectid]);
	#endif
	if(SpeedCameras[cameraid][_activelabel] == true)
	{
		Delete3DTextLabel(SpeedCameras[cameraid][_label]);
	}
	SpeedCameras[cameraid][_activelabel] = false;
	SpeedCameras[cameraid][_labeltxt] = 0;
    new file[64];format(file,sizeof file,"/Radars/%i.txt",cameraid);
    if(fexist(file)){fremove(file);}
	return 1;
}
stock SetSpeedCamRange(cameraid,limit)
{
	SpeedCameras[cameraid][_limit] = limit;
	return 1;
}
stock SetSpeedCamFine(cameraid,fine)
{
    SpeedCameras[cameraid][_fine] = fine;
	return 1;
}
stock Float:GetDistanceBetweenPoints(Float:x,Float:y,Float:tx,Float:ty)
{
  new Float:temp1, Float:temp2;
  temp1 = x-tx;temp2 = y-ty;
  return floatsqroot(temp1*temp1+temp2*temp2);
}

stock GetClosestCamera(playerid)
{
	new Float:distance = 10,Float:temp,Float:x,Float:y,Float:z,current = -1;GetPlayerPos(playerid,x,y,z);
	for(new i = 0;i<loaded_cameras +1;i++)
	{
	    if(SpeedCameras[i][_active] == true)
	    {
			temp = GetDistanceBetweenPoints(x,y,SpeedCameras[i][_x],SpeedCameras[i][_y]);
			if(temp < distance)
			{
				distance = temp;
				current = i;
			}
		}
	}
	return current;
}

stock Float:GetVehicleVitesse(vehicleid,UseMPH = 0)
{
	new Float:speed_x,Float:speed_y,Float:speed_z,Float:temp_speed;
	GetVehicleVelocity(vehicleid,speed_x,speed_y,speed_z);
	if(UseMPH == 0)
	{
	    temp_speed = floatsqroot(((speed_x*speed_x)+(speed_y*speed_y))+(speed_z*speed_z))*144;
	} else {
	    temp_speed = floatsqroot(((speed_x*speed_x)+(speed_y*speed_y))+(speed_z*speed_z))*85.4166672;
	}
	floatround(temp_speed,floatround_round);return temp_speed;
}
stock SendClientMessageEx(playerid,color,type[],{Float,_}:...)
{
	new string[128];
	for(new i = 0;i<numargs() -2;i++)
	{
	    switch(type[i])
	    {
	        case 's':
	        {
				new result[128];
				for(new a= 0;getarg(i +3,a) != 0;a++)
				{
				    result[a] = getarg(i +3,a);
				}
				if(!strlen(string))
				{
				    format(string,sizeof string,"%s",result);
				} else format(string,sizeof string,"%s%s",string,result);
	        }

	        case 'i':
	        {
	            new result = getarg(i +3);
				if(!strlen(string))
				{
				    format(string,sizeof string,"%i",result);
				} else format(string,sizeof string,"%s%i",string,result);
	        }

	        case 'f':
	        {
				new Float:result = Float:getarg(i +3);
				if(!strlen(string))
				{
				    format(string,sizeof string,"%f",result);
				} else format(string,sizeof string,"%s%f",string,result);
	        }
	    }
	}
    SendClientMessage(playerid,color,string);
    return 1;
}
//===================================================================================================
//                                              Timers
//===================================================================================================
forward UpdateCameras();
public UpdateCameras()
{
	for(new a = 0;a<MAX_PLAYERS;a++)
	{
	    if(!IsPlayerConnected(a)) continue;
	    if(!IsPlayerInAnyVehicle(a)) continue;
	    if(GetPVarInt(a,"PlayerHasBeenFlashed") == 1)
		{
			continue;
		} else if (GetPVarInt(a,"PlayerHasBeenFlashed") == 2)
		{
			DeletePVar(a,"PlayerHasBeenFlashed");
			continue;
		}
	    for(new ba = 0;ba<loaded_cameras +1;ba++)
	    {
	        if(SpeedCameras[ba][_active] == false) continue;
	        if(IsPlayerInRangeOfPoint(a,SpeedCameras[ba][_range],SpeedCameras[ba][_x],SpeedCameras[ba][_y],SpeedCameras[ba][_z]))
	        {
	            new speed = floatround(GetVehicleVitesse(GetPlayerVehicleID(a),SpeedCameras[ba][_usemph]));
	            new limit = SpeedCameras[ba][_limit];
	            if(speed > limit)
	            {
                   	if(GetVehicleModel(GetPlayerVehicleID(a)) == 596 || GetVehicleModel(GetPlayerVehicleID(a)) == 597 || GetVehicleModel(GetPlayerVehicleID(a)) == 598
					|| GetVehicleModel(GetPlayerVehicleID(a)) == 599 || GetVehicleModel(GetPlayerVehicleID(a)) == 544 || GetVehicleModel(GetPlayerVehicleID(a)) == 523
					|| GetVehicleModel(GetPlayerVehicleID(a)) == 490 || GetVehicleModel(GetPlayerVehicleID(a)) == 427 || GetVehicleModel(GetPlayerVehicleID(a)) == 416
					|| GetVehicleModel(GetPlayerVehicleID(a)) == 407){return 1;}
	                TextDrawShowForPlayer(a,flash);
	                #if CAMERA_PERSPECTIVE == true
	                SetPlayerCameraPos(a,SpeedCameras[ba][_x],SpeedCameras[ba][_y],SpeedCameras[ba][_z] + 5);
	                new Float:x,Float:y,Float:z;GetPlayerPos(a,x,y,z);
	                SetPlayerCameraLookAt(a,x,y,z);
	                #endif
	                SetPVarInt(a,"PlayerHasBeenFlashed",1);
	                SetTimerEx("RemoveFlash",CAMERA_FLASH_TIME,false,"i",a);
					if(GetPlayerState(a) == PLAYER_STATE_DRIVER)
					{
							if(SpeedCameras[ba][_usemph] == 0)
							{
								SendClientMessageEx(a,COL_YELLOW,"sisis","Vous venez de vous faire flasher ! Vous avez été flashé à ",speed," Km/h alors que la limite autorisée est de ",limit, " Km/h.");
								SendClientMessageEx(a,COLOR_LIGHTBLUE,"sis","Vous recevez une amende de $",SpeedCameras[ba][_fine],".");
								PlayerPlaySound(a,1132,0.0,0.0,0.0);
								Tax += SpeedCameras[ba][_fine]
							} else {
								SendClientMessageEx(a,COL_YELLOW,"sisis","Vous venez de vous faire flasher ! Vous avez été flashé à ",speed," mph alors que la limite autorisée est de ",limit, " mph.");
								SendClientMessageEx(a,COLOR_LIGHTBLUE,"sis","Vous recevez une amende de $",SpeedCameras[ba][_fine],".");
								PlayerPlaySound(a,1132,0.0,0.0,0.0);
								Tax += SpeedCameras[ba][_fine]
							}
							SafeGivePlayerMoney(a, - SpeedCameras[ba][_fine]);
					}
	            }
	        }
	    }
	}
	return 1;
}
forward RemoveFlash(playerid);
public RemoveFlash(playerid)
{
	TextDrawHideForPlayer(playerid,flash);
	SetPVarInt(playerid,"PlayerHasBeenFlashed",2);
	#if CAMERA_PERSPECTIVE == true
	SetCameraBehindPlayer(playerid);
	#endif
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid,playername,sizeof(playername));
	if(strcmp(VehiculeInfo[vehicleid][Proprio],playername,true) == 0)
	{
	    VehiculeInfo[vehicleid][Couleur1] = color1;
	    VehiculeInfo[vehicleid][Couleur2] = color2;
	}
	SauvegardeVeh();
	return 1;
}


AcheterVehicule(playerid)
{
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
 	{
		new string[128];
		new vehicleid = GetPlayerVehicleID(playerid);
		if(strcmp(VehiculeInfo[vehicleid][Proprio],"Aucun",true) == 0)
		{
		    if(GetPlayerMoney(playerid) < VehiculeInfo[vehicleid][Prix])
			{
	  			format(string,sizeof(string),"Vous n'avez pas assez d'argent pour acheter ce vehicule. Il vous faut %d$!",VehiculeInfo[vehicleid][Prix]);
		        SendClientMessage(playerid,COL_LIGHTRED,string);
		        return 1;
			}
			if(CountPlayerVehicle(playerid) == MAX_PLAYER_VEHICLES)
			{
				format(string,sizeof(string),"Vous avez atteint la limite de vehicule possible (%d). Pour acheter ce vehicule vender l'un de vos vehicule!",MAX_PLAYER_VEHICLES);
				SendClientMessage(playerid,COL_LIGHTRED,string);
				return 1;
			}
			new playername[MAX_PLAYER_NAME];
			GetPlayerName(playerid,playername,sizeof(playername));
			GivePlayerMoney(playerid,-VehiculeInfo[vehicleid][Prix]);
			strmid(VehiculeInfo[vehicleid][Proprio],playername,0,strlen(playername),sizeof(playername));
			format(string,sizeof(string),"Vous avez acheter ce vehicule (%s) pour %d$!",VehiculeInfo[vehicleid][Nom],VehiculeInfo[vehicleid][Prix]);
			SendClientMessage(playerid,COL_GREEN,string);
			SauvegardeVeh();
		}
		else
		{
		    format(string,sizeof(string),"Ce vehicule appartient a %s. Vous ne pouvez pas l'acheter!",VehiculeInfo[vehicleid][Proprio]);
			SendClientMessage(playerid,COL_LIGHTRED,string);
		}
	}
	else SendClientMessage(playerid,COL_LIGHTRED,"Vous n'êtes pas au volant d'un vehicule!");
	return 1;
}
VendreVehicule(playerid, admin)
{
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
 	{
		new string[128];
		new vehicleid = GetPlayerVehicleID(playerid);
		new playername[MAX_PLAYER_NAME];
		if(VehiculeInfo[vehicleid][VehID] == INVALID_VEH_ID)
		{
  			SendClientMessage(playerid,COL_LIGHTRED,"Ce vehicule ne peux pas être vendu!");
	    	return 1;
		}
		if(admin == 0)
		{
			GetPlayerName(playerid,playername,sizeof(playername));
			if(strcmp(VehiculeInfo[vehicleid][Proprio],playername,true) == 0)
			{
			    GivePlayerMoney(playerid,VehiculeInfo[vehicleid][Prix]);
				strmid(VehiculeInfo[vehicleid][Proprio],"Aucun",0,strlen("Aucun"),128);
				if(VehiculeInfo[vehicleid][Alarme]!= 2)
				{
				    VehiculeInfo[vehicleid][Alarme] = 0;
				}
				format(string,sizeof(string),"Vous avez vendu votre vehicule (%s) pour %d$!",VehiculeInfo[vehicleid][Nom],VehiculeInfo[vehicleid][Prix]);
				SendClientMessage(playerid,COL_GREEN,string);
				RemoveAllPlayerFromVehicle(vehicleid);
				SetTimerEx("RestartVeh",2000,0,"i",vehicleid);
				SauvegardeVeh();
			}
			else SendClientMessage(playerid,COL_LIGHTRED,"Ce vehicule ne vous appartient pas!");
		}
		else
		{
			if(strcmp(VehiculeInfo[vehicleid][Proprio],"Aucun",true) == 0)
			{
				if(VehiculeInfo[vehicleid][Alarme]!= 2)
				{
				    VehiculeInfo[vehicleid][Alarme] = 0;
				}
				format(string,sizeof(string),"Vous avez vendu ce vehicule (%s) qui appartenait a %s",VehiculeInfo[vehicleid][Nom],VehiculeInfo[vehicleid][Proprio]);
				SendClientMessage(playerid,COL_GREEN,string);
				for(new i=0;i<MAX_PLAYERS;i++)
				{
				    if(IsPlayerConnected(i))
				    {
						GetPlayerName(i,playername,sizeof(playername));
						if(strcmp(VehiculeInfo[vehicleid][Proprio],playername,true) == 0)
						{
						    format(string,sizeof(string),"Un admin a vendu votre vehicule (%s)",VehiculeInfo[vehicleid][Nom]);
							SendClientMessage(playerid,COL_LIGHTRED,string);
						}
					}
				}
				strmid(VehiculeInfo[vehicleid][Proprio],"Aucun",0,strlen("Aucun"),128);
				RemoveAllPlayerFromVehicle(vehicleid);
				SetTimerEx("RestartVeh",2000,0,"i",vehicleid);
			}
			else SendClientMessage(playerid,COL_LIGHTRED,"Ce vehicule n'a pas de proprietaire!");
		}
	}
	else SendClientMessage(playerid,COL_LIGHTRED,"Vous n'êtes pas au volant d'un vehicule!");
	return 1;
}
GarerVehicule(playerid, admin)
{
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
 	{
		new string[128];
		new vehicleid = GetPlayerVehicleID(playerid);
		if(VehiculeInfo[vehicleid][VehID] == INVALID_VEH_ID)
		{
  			SendClientMessage(playerid,COL_LIGHTRED,"Ce vehicule ne peux pas être garer!");
	    	return 1;
		}
		if(admin == 0)
		{
			new playername[MAX_PLAYER_NAME];
			GetPlayerName(playerid,playername,sizeof(playername));
			if(strcmp(VehiculeInfo[vehicleid][Proprio],playername,true) == 0)
			{
				new Float:x,Float:y,Float:z,Float:a;
				GetVehiclePos(vehicleid,x,y,z);
				GetVehicleZAngle(vehicleid,a);
				VehiculeInfo[vehicleid][XSpawn] = x;
				VehiculeInfo[vehicleid][YSpawn] = y;
				VehiculeInfo[vehicleid][ZSpawn] = z;
				VehiculeInfo[vehicleid][ASpawn] = a;
				format(string,sizeof(string),"Votre vehicule (%s) a bien été garé. Il apparaitra toujours ici!",VehiculeInfo[vehicleid][Nom]);
				SendClientMessage(playerid,COL_GREEN,string);
				SauvegardeVeh();
			}
			else SendClientMessage(playerid,COL_LIGHTRED,"Ce vehicule ne vous appartient pas!");
		}
		else
		{
			new Float:x,Float:y,Float:z,Float:a;
			GetVehiclePos(vehicleid,x,y,z);
			GetVehicleZAngle(vehicleid,a);
			VehiculeInfo[vehicleid][XSpawn] = x;
			VehiculeInfo[vehicleid][YSpawn] = y;
			VehiculeInfo[vehicleid][ZSpawn] = z;
			VehiculeInfo[vehicleid][ASpawn] = a;
			format(string,sizeof(string),"Ce vehicule (%s) a bien été garé. Il apparaitra toujours ici!",VehiculeInfo[vehicleid][Nom]);
			SendClientMessage(playerid,COL_GREEN,string);
			SauvegardeVeh();
		}
	}
	else SendClientMessage(playerid,COL_LIGHTRED,"Vous n'êtes pas au volant d'un vehicule!");
	return 1;
}
AlarmeVehicule(playerid,admin)
{
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
 	{
		new string[128],playername[MAX_PLAYER_NAME];
		new vehicleid = GetPlayerVehicleID(playerid);
		GetPlayerName(playerid,playername,sizeof(playername));
		if(admin == 0)
		{
			if(strcmp(VehiculeInfo[vehicleid][Proprio],playername,true) == 0)
			{
				if(VehiculeInfo[vehicleid][Alarme] == 0)
				{
				    VehiculeInfo[vehicleid][Alarme] = 1;
				    format(string,sizeof(string),"L'alarme de votre vehicule (%s) a été activer!",VehiculeInfo[vehicleid][Nom]);
					SendClientMessage(playerid,COL_GREEN,string);
				}
				else if(VehiculeInfo[vehicleid][Alarme] == 1)
				{
				    VehiculeInfo[vehicleid][Alarme] = 0;
				    format(string,sizeof(string),"L'alarme de votre vehicule (%s) a été desactiver!",VehiculeInfo[vehicleid][Nom]);
				    SendClientMessage(playerid,COL_LIGHTRED,string);
				}
				else if(VehiculeInfo[vehicleid][Alarme] == 2)
				{
				    SendClientMessage(playerid,COL_GREEN,"Ce vehicule est proteger par l'alarme admin!");
				}
			}
			else SendClientMessage(playerid,COL_LIGHTRED,"Ce vehicule ne vous appartient pas!");
		}
		else
		{
			if(VehiculeInfo[vehicleid][Alarme] != 2)
			{
			    VehiculeInfo[vehicleid][Alarme] = 2;
			    format(string,sizeof(string),"Vous avez activer l'alarme admin sur ce vehicule (%s)",VehiculeInfo[vehicleid][Nom]);
			    SendClientMessage(playerid,COL_GREEN,string);
			}
			else
			{
			    VehiculeInfo[vehicleid][Alarme] = 0;
			    format(string,sizeof(string),"Vous avez desactiver l'alarme admin sur ce vehicule (%s)",VehiculeInfo[vehicleid][Nom]);
			    SendClientMessage(playerid,COL_LIGHTRED,string);
			}
		}
	}
	else SendClientMessage(playerid,COL_LIGHTRED,"Vous n'êtes pas au volant d'un vehicule!");
	return 1;
}
EssenceVehicule(playerid, admin)
{
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
 	{
		new string[128];
		new vehicleid = GetPlayerVehicleID(playerid);
		if(admin == 0)
		{
			for(new p=0;p<sizeof(Pompe);p++)
			{
			    if(PlayerToPoint2(4.0,playerid,Pompe[p][0],Pompe[p][1],Pompe[p][2]))
			    {
					if(VehiculeInfo[vehicleid][Essence] == VehiculeInfo[vehicleid][MaxEssence])
					{
					    format(string,sizeof(string),"Le reservoir de votre vehicule (%s) est plein!");
					    SendClientMessage(playerid,COL_GREEN,string);
						return 1;
					}
			        format(string,sizeof(string),"Le remplisage de votre vehicule (%s) commence veuillez patienter!",VehiculeInfo[vehicleid][Nom]);
			        SendClientMessage(playerid,COL_GREEN,string);
			        TimerEssence[playerid] = SetTimerEx("Remplisage",1000,1,"i",playerid);
			        PompeEssence[playerid] = p;
			        return 1;
			    }
			}
			return SendClientMessage(playerid,COL_LIGHTRED,"Vous n'êtes pas devant une pompe a essence!");
		}
		else
		{
		    VehiculeInfo[vehicleid][Essence] = VehiculeInfo[vehicleid][MaxEssence];
		    format(string,sizeof(string),"Vous avez remplis le reservoir de ce vehicule (%s)",VehiculeInfo[vehicleid][Nom]);
		    SendClientMessage(playerid,COL_GREEN,string);
		}
	}
	else SendClientMessage(playerid,COL_LIGHTRED,"Vous n'êtes pas au volant d'un vehicule!");
	return 1;
}
TableauDeBord(playerid)
{
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		if(TableauActive[playerid] == 1)
		{
		    TableauActive[playerid] = 0;
		    SendClientMessage(playerid,COL_GREEN,"Vous avez desactiver le tableau de bord de votre vehicule!");
		}
		else
		{
		    TableauActive[playerid] = 1;
		    SendClientMessage(playerid,COL_GREEN,"Vous avez activer le tableau de bord de votre vehicule!");
		}
	}
	else SendClientMessage(playerid,COL_LIGHTRED,"Vous n'êtes pas au volant d'un vehicule!");
	return 1;
}
StatusVehicule(playerid)
{
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new string[128];
		new vehicleid = GetPlayerVehicleID(playerid);
		if(VehiculeInfo[vehicleid][VehID] == INVALID_VEH_ID)
		{
  			SendClientMessage(playerid,COL_LIGHTRED,"Le status de ce vehicule ne peux pas être changer!");
	    	return 1;
		}
		if(strcmp(VehiculeInfo[vehicleid][Proprio],"Aucun",true) == 0)
		{
			if(VehiculeInfo[vehicleid][Status] == 1)
			{
			    VehiculeInfo[vehicleid][Status] = 0;
			    format(string,sizeof(string),"Ce vehicule (%s) ne pourra plus être acheter!",VehiculeInfo[vehicleid][Nom]);
			    SendClientMessage(playerid,COL_GREEN,string);
			}
			else
			{
			    VehiculeInfo[vehicleid][Status] = 1;
			    format(string,sizeof(string),"Ce vehicule (%s) peux maintenant être acheter!",VehiculeInfo[vehicleid][Nom]);
			    SendClientMessage(playerid,COL_GREEN,string);
			}
			SauvegardeVeh();
		}
		else
		{
		    format(string,sizeof(string),"Ce vehicule (%s) appartient a %s et sont status ne peux donc pas être changer!",VehiculeInfo[vehicleid][Nom],VehiculeInfo[vehicleid][Proprio]);
			SendClientMessage(playerid,COL_LIGHTRED,string);
		}
	}
	else SendClientMessage(playerid,COL_LIGHTRED,"Vous n'êtes pas au volant d'un vehicule!");
	return 1;
}
ResetTuning(playerid)
{
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		VehiculeInfo[vehicleid][Peinture] = 0;
		VehiculeInfo[vehicleid][Tuning1] = 0;
		VehiculeInfo[vehicleid][Tuning2] = 0;
		VehiculeInfo[vehicleid][Tuning3] = 0;
		VehiculeInfo[vehicleid][Tuning4] = 0;
		VehiculeInfo[vehicleid][Tuning5] = 0;
		VehiculeInfo[vehicleid][Tuning6] = 0;
		VehiculeInfo[vehicleid][Tuning7] = 0;
		VehiculeInfo[vehicleid][Tuning8] = 0;
		VehiculeInfo[vehicleid][Tuning9] = 0;
		VehiculeInfo[vehicleid][Tuning10] = 0;
		VehiculeInfo[vehicleid][Tuning11] = 0;
		VehiculeInfo[vehicleid][Tuning12] = 0;
		VehiculeInfo[vehicleid][Tuning13] = 0;
		VehiculeInfo[vehicleid][Tuning14] = 0;
		VehiculeInfo[vehicleid][Tuning15] = 0;
		VehiculeInfo[vehicleid][Tuning16] = 0;
		VehiculeInfo[vehicleid][Tuning17] = 0;
		RemoveAllPlayerFromVehicle(vehicleid);
		SetTimerEx("RestartVeh",2000,0,"i",vehicleid);
		new string[128];
		format(string,sizeof(string),"Le tuning de ce vehicule (%s) a bien été retirer!",VehiculeInfo[vehicleid][Nom]);
		SendClientMessage(playerid,COL_GREEN,string);
	}
	else SendClientMessage(playerid,COL_LIGHTRED,"Vous n'êtes pas au volant d'un vehicule!");
	return 1;
}
TuningVehicule(vehicleid)
{
	ChangeVehicleColor(vehicleid,VehiculeInfo[vehicleid][Couleur1],VehiculeInfo[vehicleid][Couleur2]);
	if(VehiculeInfo[vehicleid][Peinture] != 0) ChangeVehiclePaintjob(vehicleid,VehiculeInfo[vehicleid][Peinture]);
	if(VehiculeInfo[vehicleid][Tuning1] != 0) AddVehicleComponent(vehicleid,VehiculeInfo[vehicleid][Tuning1]);
	if(VehiculeInfo[vehicleid][Tuning2] != 0) AddVehicleComponent(vehicleid,VehiculeInfo[vehicleid][Tuning2]);
	if(VehiculeInfo[vehicleid][Tuning3] != 0) AddVehicleComponent(vehicleid,VehiculeInfo[vehicleid][Tuning3]);
	if(VehiculeInfo[vehicleid][Tuning4] != 0) AddVehicleComponent(vehicleid,VehiculeInfo[vehicleid][Tuning4]);
	if(VehiculeInfo[vehicleid][Tuning5] != 0) AddVehicleComponent(vehicleid,VehiculeInfo[vehicleid][Tuning5]);
	if(VehiculeInfo[vehicleid][Tuning6] != 0) AddVehicleComponent(vehicleid,VehiculeInfo[vehicleid][Tuning6]);
	if(VehiculeInfo[vehicleid][Tuning7] != 0) AddVehicleComponent(vehicleid,VehiculeInfo[vehicleid][Tuning7]);
	if(VehiculeInfo[vehicleid][Tuning8] != 0) AddVehicleComponent(vehicleid,VehiculeInfo[vehicleid][Tuning8]);
	if(VehiculeInfo[vehicleid][Tuning9] != 0) AddVehicleComponent(vehicleid,VehiculeInfo[vehicleid][Tuning9]);
	if(VehiculeInfo[vehicleid][Tuning10] != 0) AddVehicleComponent(vehicleid,VehiculeInfo[vehicleid][Tuning10]);
	if(VehiculeInfo[vehicleid][Tuning11] != 0) AddVehicleComponent(vehicleid,VehiculeInfo[vehicleid][Tuning11]);
	if(VehiculeInfo[vehicleid][Tuning12] != 0) AddVehicleComponent(vehicleid,VehiculeInfo[vehicleid][Tuning12]);
	if(VehiculeInfo[vehicleid][Tuning13] != 0) AddVehicleComponent(vehicleid,VehiculeInfo[vehicleid][Tuning13]);
	if(VehiculeInfo[vehicleid][Tuning14] != 0) AddVehicleComponent(vehicleid,VehiculeInfo[vehicleid][Tuning14]);
	if(VehiculeInfo[vehicleid][Tuning15] != 0) AddVehicleComponent(vehicleid,VehiculeInfo[vehicleid][Tuning15]);
	if(VehiculeInfo[vehicleid][Tuning16] != 0) AddVehicleComponent(vehicleid,VehiculeInfo[vehicleid][Tuning16]);
	if(VehiculeInfo[vehicleid][Tuning17] != 0) AddVehicleComponent(vehicleid,VehiculeInfo[vehicleid][Tuning17]);
}
CountPlayerVehicle(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new playername[MAX_PLAYER_NAME];
		new CountVehP = 0;
		GetPlayerName(playerid,playername,sizeof(playername));
		for(new v=1;v<NbVeh;v++)
		{
			if(VehiculeInfo[v][VehID] != INVALID_VEH_ID)
			{
			    if(strcmp(VehiculeInfo[v][Proprio],playername,true) == 0)
			    {
			        CountVehP++;
			    }
			}
		}
		return CountVehP;
	}
	return 0;
}
RemoveAllPlayerFromVehicle(vehicleid)
{
	for(new i=0;i<MAX_PLAYERS;i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        if(IsPlayerInAnyVehicle(i) && GetPlayerVehicleID(i) == vehicleid)
	        {
	            RemovePlayerFromVehicle(i);
			}
		}
	}
}

public TimerTempsCircuit(playerid)
{
    TimerCourCircuit[playerid] = 0;
	return 1;
}

public TimerTempsAlarm(playerid)
{
    TimerAlarmCircuit[playerid] = 0;
	return 1;
}

public ClignotePhare(car)
{
    new engine,lighttss,alarm,doors,bonnet,boot,objective;
	if(ClignotePhareVar[car] == 1)
	{
		GetVehicleParamsEx(car,engine,lighttss,alarm,doors,bonnet,boot,objective);
		SetVehicleParamsEx(car,engine,1,alarm,doors,bonnet,boot,objective);
		ClignotePhareVar[car] = 0;
	}
	else
	{
		GetVehicleParamsEx(car,engine,lighttss,alarm,doors,bonnet,boot,objective);
		SetVehicleParamsEx(car,engine,0,alarm,doors,bonnet,boot,objective);
		ClignotePhareVar[car] = 1;
	}
	return 1;
}

public StopAlarm(car)
{
    new engine,lighttss,alarm,doors,bonnet,boot,objective;
	if(VehiculeInfo[car][Moteur] == 1)
	{
		GetVehicleParamsEx(car,engine,lighttss,alarm,doors,bonnet,boot,objective);
		SetVehicleParamsEx(car,1,lighttss,0,doors,bonnet,boot,objective);
	}
	else
	{
		GetVehicleParamsEx(car,engine,lighttss,alarm,doors,bonnet,boot,objective);
		SetVehicleParamsEx(car,0,lighttss,0,doors,bonnet,boot,objective);
	}
	VehiculeInfo[car][PiraAlarm] = 0;
	LalarmeEstOn[car] = 0;
	KillTimer(TimerPhare[car]);
	return 1;
}

public PirateAlarm(playerid)
{
    if(IsPlayerConnected(playerid))
    {
        if(IsPlayerInAnyVehicle(playerid))
        {
			new RandomStart;
		 	new car = GetPlayerVehicleID(playerid);
			RandomStart = random(25);
            switch(RandomStart)
            {
                case 0,5,10,15,20,25:
                {
                    StopAlarm(car);
                    ClignotePhareVar[car] = 0;
                    VehiculeInfo[car][PiraAlarm] = 1;
	                SendClientMessage(playerid, COL_WHITE, "Vous avez reussi a trafiquer l'alarme");
	                return 1;
                }
                case 1,2,3,4,6,7,8,9,11,12,13,14,16,17,18,19,21,22,23,24:
                {
					SendClientMessage(playerid, COL_WHITE, "Vous n'avez pas reussi a trafiquer l'alarme");
					return 1;
                }
            }
            return 1;
        }
    }
    return 1;
}

public PirateVehicle(playerid)
{
    if(IsPlayerConnected(playerid))
    {
        if(IsPlayerInAnyVehicle(playerid))
        {
			new RandomStart;
		 	new string[256];
		 	new car = GetPlayerVehicleID(playerid);
		  	new sendernameeee[MAX_PLAYER_NAME];
			RandomStart = random(25);
			new engine,lighttss,alarm,doors,bonnet,boot,objective;
            switch(RandomStart)
            {
                case 0,5,10,15,20,25:
                {
                    VehiculeInfo[car][Moteur] = 1;
                    LalarmeEstOn[car] = 1;
                    SetTimerEx("StopAlarm", 350000, false, "i", car);
                    ClignotePhareVar[car] = 1;
                    TimerPhare[car] = SetTimerEx("ClignotePhare", 500, true, "i", car);

                    //TogglePlayerControllable(playerid, true);
                    GetVehicleParamsEx(car,engine,lighttss,alarm,doors,bonnet,boot,objective);
        			SetVehicleParamsEx(car,1,lighttss,1,doors,bonnet,boot,objective);
                    GetPlayerName(playerid, sendernameeee, sizeof(sendernameeee));
                    format(string, sizeof(string), "* Le véhicule démarre (( %s )).", sendernameeee);
                    ProxDetectorVeh(30.0, playerid, string, COL_PURPLE,COL_PURPLE,COL_PURPLE,COL_PURPLE,COL_PURPLE);
                }
                case 1,2,3,4,6,7,8,9,11,12,13,14,16,17,18,19,21,22,23,24:
                {
                    GetPlayerName(playerid, sendernameeee, sizeof(sendernameeee));
					VehiculeInfo[car][Moteur] = 0;
                    format(string, sizeof(string), "* Demarrage echoué (( %s )).", sendernameeee);
		    		ProxDetectorVeh(30.0, playerid, string, COL_PURPLE,COL_PURPLE,COL_PURPLE,COL_PURPLE,COL_PURPLE);
        			GetVehicleParamsEx(car,engine,lighttss,alarm,doors,bonnet,boot,objective);
        			SetVehicleParamsEx(car,0,lighttss,alarm,doors,bonnet,boot,objective);
                }
            }
        }
    }
    return 1;
}
public Remplisage(playerid)
{
	new pompe = PompeEssence[playerid];
	if(PlayerToPoint2(4.0,playerid,Pompe[pompe][0],Pompe[pompe][1],Pompe[pompe][2]))
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		new string[128];
		VehiculeInfo[vehicleid][Essence]++;
		GivePlayerMoney(playerid, - PRIX_ESSENCE);
		if(VehiculeInfo[vehicleid][Essence] == VehiculeInfo[vehicleid][MaxEssence])
		{
		    PompeEssence[playerid] = 255;
		    KillTimer(TimerEssence[playerid]);
			format(string,sizeof(string),"Le reservoir de votre vehicule (%s) est plein. Passer une bonne journnée",VehiculeInfo[vehicleid][Nom]);
			SendClientMessage(playerid,COL_GREEN,string);
		}
	}
	else
	{
 		PompeEssence[playerid] = 255;
   		KillTimer(TimerEssence[playerid]);
		SendClientMessage(playerid,COL_LIGHTRED,"Vous avez quitter la pompe a essence durant le remplisage de votre vehicule!");
	}
}

public ChargerVehicules()
{
	if(fexist(VEH_FILENAME))
	{
	    print("\n-------------[CHARGEMENT VEHICULE]-------------\n");
	    new File:VehFile = fopen(VEH_FILENAME, io_read);
	    new vehstring[512];
  		while(fread(VehFile, vehstring, sizeof(vehstring)))
   		{
   		    if(split2(vehstring, Field, '|') == 32)
   		    {
				VehiculeInfo[NbVeh][VehID]		= strval(Field[0]);
				VehiculeInfo[NbVeh][Model]		= strval(Field[1]);
				VehiculeInfo[NbVeh][XSpawn]		= floatstr(Field[2]);
				VehiculeInfo[NbVeh][YSpawn]	 	= floatstr(Field[3]);
				VehiculeInfo[NbVeh][ZSpawn] 	= floatstr(Field[4]);
				VehiculeInfo[NbVeh][ASpawn]	  	= floatstr(Field[5]);
				VehiculeInfo[NbVeh][Couleur1]	= strval(Field[6]);
				VehiculeInfo[NbVeh][Couleur2]	= strval(Field[7]);
				VehiculeInfo[NbVeh][Prix]       = strval(Field[8]);
				VehiculeInfo[NbVeh][Status]     = strval(Field[9]);
				VehiculeInfo[NbVeh][Alarme]	  	= strval(Field[10]);
				VehiculeInfo[NbVeh][Tuning1]	= strval(Field[11]);
				VehiculeInfo[NbVeh][Tuning2]	= strval(Field[12]);
				VehiculeInfo[NbVeh][Tuning3]	= strval(Field[13]);
				VehiculeInfo[NbVeh][Tuning4]	= strval(Field[14]);
				VehiculeInfo[NbVeh][Tuning5]	= strval(Field[15]);
				VehiculeInfo[NbVeh][Tuning6]	= strval(Field[16]);
				VehiculeInfo[NbVeh][Tuning7]	= strval(Field[17]);
				VehiculeInfo[NbVeh][Tuning8]	= strval(Field[18]);
				VehiculeInfo[NbVeh][Tuning9]	= strval(Field[19]);
				VehiculeInfo[NbVeh][Tuning10]	= strval(Field[20]);
				VehiculeInfo[NbVeh][Tuning11]	= strval(Field[21]);
				VehiculeInfo[NbVeh][Tuning12]	= strval(Field[22]);
				VehiculeInfo[NbVeh][Tuning13]	= strval(Field[23]);
				VehiculeInfo[NbVeh][Tuning14]	= strval(Field[24]);
				VehiculeInfo[NbVeh][Tuning15]	= strval(Field[25]);
				VehiculeInfo[NbVeh][Tuning16]	= strval(Field[26]);
				VehiculeInfo[NbVeh][Tuning17]	= strval(Field[27]);
				VehiculeInfo[NbVeh][Peinture]	= strval(Field[28]);
				VehiculeInfo[NbVeh][MaxEssence] = strval(Field[29]);
				strmid(VehiculeInfo[NbVeh][Proprio],     Field[30], 0, strlen(Field[30]),128);
				strmid(VehiculeInfo[NbVeh][Plaque], Field[31], 0, strlen(Field[31]),128);
				strmid(VehiculeInfo[NbVeh][Nom],VehicleName[VehiculeInfo[NbVeh][Model]-400],0,strlen(VehicleName[VehiculeInfo[NbVeh][Model]-400]),64);
				VehiculeInfo[NbVeh][Essence] = VehiculeInfo[NbVeh][MaxEssence];
				EssenceCount[NbVeh] = 0;

				CreateVehicle(VehiculeInfo[NbVeh][Model],VehiculeInfo[NbVeh][XSpawn],VehiculeInfo[NbVeh][YSpawn],VehiculeInfo[NbVeh][ZSpawn],VehiculeInfo[NbVeh][ASpawn],VehiculeInfo[NbVeh][Couleur1],VehiculeInfo[NbVeh][Couleur2],RESPAWN_DELAY);
				printf("---- Vehicule %d charger. Proprio: %s , Nom vehicule %s ----",VehiculeInfo[NbVeh][VehID],VehiculeInfo[NbVeh][Proprio],VehiculeInfo[NbVeh][Nom]);
				NbVeh++;
			}
		}
		fclose(VehFile);
	}
	else
	{
	    printf("Le fichier %s n'existe pas!, Aucun vehicule na pu être cree!",VEH_FILENAME);
	}
	print("\n");
	for(new v=1;v<NbVeh;v++)
	{
	    SetVehicleNumberPlate(VehiculeInfo[v][VehID], VehiculeInfo[v][Plaque]);
		SetVehicleToRespawn(v);
		TuningVehicule(v);
		printf("La plaque(%s) du vehicule ID %d charge!",VehiculeInfo[v][Plaque],v);
	}
}

public SauvegardeVeh()
{
	new File:VehFile = fopen(VEH_FILENAME, io_write);
	new vehstring[256];
	for(new v=1;v<NbVeh;v++)
	{
	    if(VehiculeInfo[v][VehID] != INVALID_VEH_ID)
	    {
			format(vehstring, sizeof(vehstring), "%d|%d|%f|%f|%f|%f|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%s|%s|%s\r\n",
			 VehiculeInfo[v][VehID],VehiculeInfo[v][Model],VehiculeInfo[v][XSpawn],VehiculeInfo[v][YSpawn],VehiculeInfo[v][ZSpawn],
			 VehiculeInfo[v][ASpawn],VehiculeInfo[v][Couleur1],VehiculeInfo[v][Couleur2],VehiculeInfo[v][Prix],
				 VehiculeInfo[v][Status],VehiculeInfo[v][Alarme],VehiculeInfo[v][Tuning1],VehiculeInfo[v][Tuning2],
				 VehiculeInfo[v][Tuning3],VehiculeInfo[v][Tuning4],VehiculeInfo[v][Tuning5],VehiculeInfo[v][Tuning6],
				 VehiculeInfo[v][Tuning7],VehiculeInfo[v][Tuning8],VehiculeInfo[v][Tuning9],VehiculeInfo[v][Tuning10],
				 VehiculeInfo[v][Tuning11],VehiculeInfo[v][Tuning12],VehiculeInfo[v][Tuning13],VehiculeInfo[v][Tuning14],
				 VehiculeInfo[v][Tuning15],VehiculeInfo[v][Tuning16],VehiculeInfo[v][Tuning17],VehiculeInfo[v][Peinture],
				 VehiculeInfo[v][MaxEssence],VehiculeInfo[v][Proprio],VehiculeInfo[v][Nom],VehiculeInfo[v][Plaque]
				);
			fwrite(VehFile, vehstring);
			printf("---- Vehicule %d sauvegarder! ----",v);
		}
	}
	fclose(VehFile);
}
public DestroyVeh(vehicleid)
{
	return DestroyVehicle(vehicleid);
}

public CreateVeh(vehicleid,Float:x,Float:y,Float:z,Float:a)
{
	vehicleid = CreateVehicle(VehiculeInfo[vehicleid][Model],x,y,z,a,VehiculeInfo[vehicleid][Couleur1],VehiculeInfo[vehicleid][Couleur2],RESPAWN_DELAY);
}
public RestartVeh(vehicleid)
{
	DestroyVehicle(vehicleid);
	CreateVehicle(VehiculeInfo[vehicleid][Model],VehiculeInfo[vehicleid][XSpawn],VehiculeInfo[vehicleid][YSpawn],VehiculeInfo[vehicleid][ZSpawn],VehiculeInfo[vehicleid][ASpawn],VehiculeInfo[vehicleid][Couleur1],VehiculeInfo[vehicleid][Couleur2],RESPAWN_DELAY);
	VehiculeInfo[vehicleid][Essence] = VehiculeInfo[vehicleid][MaxEssence];
	TuningVehicule(vehicleid);
}
#if defined USE_CALLCAR
public CallCar(playerid,vehicleid)
{
	if(IsPlayerConnected(playerid))
	{
		new Float:x,Float:y,Float:z,Float:a,string[128];
	    GetPlayerPos(playerid, x,y,z);
	    GetPlayerFacingAngle(playerid,a);
     	GetXYFront(x,y,a, 4.0);
		CreateVehicle(VehiculeInfo[vehicleid][Model],x,y,z,a-90,VehiculeInfo[vehicleid][Couleur1],VehiculeInfo[vehicleid][Couleur2],RESPAWN_DELAY);
		TuningVehicule(vehicleid);
		format(string,sizeof(string),"Votre vehicule (%s) a bien été teleporter jusqua vous!",VehiculeInfo[vehicleid][Nom]);
		SendClientMessage(playerid,COL_GREEN,string);
	}
}
#endif

// autre fonction
static split2(const strsrc[], strdest[][], delimiter)
{
	new i, li,aNum,len;
	while(i <= strlen(strsrc))
	{
	    if(strsrc[i]==delimiter || i==strlen(strsrc))
		{
	        len = strmid(strdest[aNum], strsrc, li, i, 128);
	        strdest[aNum][len] = 0;
	        li = i+1;
	        aNum++;
		}
		i++;
	}
	return aNum;
}

static strtok2(const string[], &index,seperator=' ')
{
	new length = strlen(string);
	new offset = index;
	new result[128];
	while ((index < length) && (string[index] != seperator) && ((index - offset) < (sizeof(result) - 1)))
	{
		result[index - offset] = string[index];
		index++;
	}

	result[index - offset] = EOS;
	if ((index < length) && (string[index] == seperator))
	{
		index++;
	}
	return result;
}
static PlayerToPoint2(Float:radi, playerid, Float:x, Float:y, Float:z)
{
    if(IsPlayerConnected(playerid))
	{
	    new Float:pos[3];
	    new Float:tmppos[3];
		GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		tmppos[0] = (pos[0] - x);
		tmppos[1] = (pos[1] - y);
		tmppos[2] = (pos[2] - z);
		if (((tmppos[0] < radi) && (tmppos[0] > -radi)) && ((tmppos[1] < radi) && (tmppos[1] > -radi)) && ((tmppos[2] < radi) && (tmppos[2] > -radi)))
		{
			return 1;
		}
	}
	return 0;
}
static IsNumeric2(const string[])
{
	for (new i = 0, j = strlen(string); i < j; i++)
	{
		if (string[i] > '9' || string[i] < '0') return 0;
	}
	return 1;
}
ReturnModelByName(const text[])
{
	if (IsNumeric2(text))
	{
		if (strval(text) >= 400 && strval(text) <= 611)
		{
			return strval(text);
		}
		return 0;
	}
	new len = strlen(text);
	for (new m=0;m<sizeof(VehicleName);m++)
	{
		if (strcmp(VehicleName[m], text, true, len) == 0)
		{
			return m+400;
		}
	}
	return 0;
}
GetXYFront(&Float:x, &Float:y, Float:a, Float:distance)
{
	x += (distance * floatsin(-a, degrees));
	y += (distance * floatcos(-a, degrees));
}
public ProxDetectorVeh(Float:radi, playerid, string[],col1,col2,col3,col4,col5)
{
	if(IsPlayerConnected(playerid))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i) && (GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i)))
			{
				if(!BigEarr[i])
				{
					GetPlayerPos(i, posx, posy, posz);
					tempposx = (oldposx -posx);
					tempposy = (oldposy -posy);
					tempposz = (oldposz -posz);
					if (((tempposx < radi/16) && (tempposx > -radi/16)) && ((tempposy < radi/16) && (tempposy > -radi/16)) && ((tempposz < radi/16) && (tempposz > -radi/16)))
					{
						SendClientMessage(i, col1, string);
					}
					else if (((tempposx < radi/8) && (tempposx > -radi/8)) && ((tempposy < radi/8) && (tempposy > -radi/8)) && ((tempposz < radi/8) && (tempposz > -radi/8)))
					{
						SendClientMessage(i, col2, string);
					}
					else if (((tempposx < radi/4) && (tempposx > -radi/4)) && ((tempposy < radi/4) && (tempposy > -radi/4)) && ((tempposz < radi/4) && (tempposz > -radi/4)))
					{
						SendClientMessage(i, col3, string);
					}
					else if (((tempposx < radi/2) && (tempposx > -radi/2)) && ((tempposy < radi/2) && (tempposy > -radi/2)) && ((tempposz < radi/2) && (tempposz > -radi/2)))
					{
						SendClientMessage(i, col4, string);
					}
					else if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
					{
						SendClientMessage(i, col5, string);
					}
				}
				else
				{
					SendClientMessage(i, col1, string);
				}
			}
		}
	}
	return 1;
}





//////////////////////////////////////////// PARTI SECURITE/PROTECTION ////////////////////////////////////////////
public GlobalHackCheck()
{
	/*
	 *               DUCK Anti-Cheat v1.0
	 *                   by LordMan
	 *
	 *  Cette fonction est appelé chaque seconde pour vérifier :
	 *  Que les joueurs ne tentent pas de spawn Argent/Armes Interdites.
	 *
	 */

	new curHour, curMinute, curSecond;
	new string[256], plname[64];
	new weaponid, ammo;
	//new hacking;
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        if (PlayerInfo[i][pAdmin] >= 1339)
            {
				return 1;
			}
			gettime(curHour, curMinute, curSecond);
			if (ScriptMoneyUpdated[i]+2 < curSecond)
			{
				new plactualmoney = GetPlayerMoney(i);
				if (plactualmoney > ScriptMoney[i] && plactualmoney-999 > ScriptMoney[i])
				{
                    //TogglePlayerControllable(i, 0);
					GetPlayerName(i, plname, sizeof(plname));
					//new spawnedamount = plactualmoney-ScriptMoney[i];
					/*format(string, sizeof(string), "%s à été banni par l'Anti-Cheat. Raison: Triche Argent ($%d)", plname, spawnedamount);
					SendClientMessageToAll(COLOR_RED,string);
					SendClientMessage(i, COLOR_RED, "Tu as été banni pour Cheat Argent. Toutes demandes d'unban sur : http://u2c-rp.forum-pro.fr");
                    Ban(i)
                    BanLog(string);
					SafeGivePlayerMoney(i, -spawnedamount);
					ScriptMoney[i] = 0;
					ScriptMoneyUpdated[i] = 0;*/
				}
				else
				{
					ScriptMoney[i] = plactualmoney;
					ScriptMoneyUpdated[i] = 0;
				}
			}
		    if (weaponid == 9)
			    {
			    	// Illegal weapon
			    	TogglePlayerControllable(i, 0);
			    	GetPlayerName(i, plname, sizeof(plname));
			    	format(string, 256, "%s à été banni par l'Anti-Cheat. Raison: Triche Armes (Tronconneuse)", plname);
			    	SendClientMessageToAll(COLOR_LIGHTRED, string);
			    	SendClientMessage(i, COLOR_LIGHTRED, "Tu as été banni pour Cheat Armes. Toutes demandes d'unban sur : http://u2c-rp.forum-pro.fr");
			    	OnPlayerUpdate(i);
				    Ban(i)
				    BanLog(string);
			    }
			    if (weaponid == 38)
			    {
			    	// Illegal weapon
			    	TogglePlayerControllable(i, 0);
			    	GetPlayerName(i, plname, sizeof(plname));
			    	format(string, 256, "%s à été banni par l'Anti-Cheat. Raison: Triche Armes (Minigun)", plname);
			    	SendClientMessageToAll(COLOR_LIGHTRED, string);
			    	SendClientMessage(i, COLOR_LIGHTRED, "Tu as été banni pour Cheat Armes. Toutes demandes d'unban sur : http://u2c-rp.forum-pro.fr");
			    	OnPlayerUpdate(i);
				    Ban(i)
				    BanLog(string);
			    }
			    if (weaponid == 44)
			    {
			    	// Illegal weapon
			    	TogglePlayerControllable(i, 0);
			    	GetPlayerName(i, plname, sizeof(plname));
			    	format(string, 256, "%s à été banni par l'Anti-Cheat. Raison: Triche Armes (Lunette de Vision Nocturne)", plname);
			    	SendClientMessageToAll(COLOR_LIGHTRED, string);
			    	SendClientMessage(i, COLOR_LIGHTRED, "Tu as été banni pour Cheat Armes. Toutes demandes d'unban sur : http://u2c-rp.forum-pro.fr");
			    	OnPlayerUpdate(i);
				    Ban(i)
				    BanLog(string);
			    }
			    if (weaponid == 45)
			    {
			    	// Illegal weapon
			    	TogglePlayerControllable(i, 0);
			    	GetPlayerName(i, plname, sizeof(plname));
			    	format(string, 256, "%s à été banni par l'Anti-Cheat. Raison: Triche Armes (Lunette Thermique)", plname);
			    	SendClientMessageToAll(COLOR_LIGHTRED, string);
			    	SendClientMessage(i, COLOR_LIGHTRED, "Tu as été banni pour Cheat Armes. Toutes demandes d'unban sur : http://u2c-rp.forum-pro.fr");
			    	OnPlayerUpdate(i);
				    Ban(i)
				    BanLog(string);
			    }
			    if (weaponid == 32)
			    {
			    	// Illegal weapon
			    	TogglePlayerControllable(i, 0);
			    	GetPlayerName(i, plname, sizeof(plname));
			    	format(string, 256, "%s à été banni par l'Anti-Cheat. Raison: Triche Armes (Tec 9)", plname);
			    	SendClientMessageToAll(COLOR_LIGHTRED, string);
			    	SendClientMessage(i, COLOR_LIGHTRED, "Tu as été banni pour Cheat Armes. Toutes demandes d'unban sur : http://u2c-rp.forum-pro.fr");
			    	OnPlayerUpdate(i);
				    Ban(i)
				    BanLog(string);
			    }
			    if (weaponid == 37)
			    {
				    // Illegal weapon
			    	TogglePlayerControllable(i, 0);
			    	GetPlayerName(i, plname, sizeof(plname));
			    	format(string, 256, "%s à été banni par l'Anti-Cheat. Raison: Triche Armes (Lance Flammes)", plname);
				    SendClientMessageToAll(COLOR_LIGHTRED, string);
				    SendClientMessage(i, COLOR_LIGHTRED, "Tu as été banni pour Cheat Armes. Toutes demandes d'unban sur : http://u2c-rp.forum-pro.fr");
			    	OnPlayerUpdate(i);
				    Ban(i)
				    BanLog(string);
				}
				if (weaponid == 35)
			    {
			    	// Illegal weapon
			    	TogglePlayerControllable(i, 0);
			    	GetPlayerName(i, plname, sizeof(plname));
			    	format(string, 256, "%s à été banni par l'Anti-Cheat. Raison: Triche Armes (RPG)", plname);
			    	SendClientMessageToAll(COLOR_LIGHTRED, string);
			    	SendClientMessage(i, COLOR_LIGHTRED, "Tu as été banni pour Cheat Armes. Toutes demandes d'unban sur : http://u2c-rp.forum-pro.fr");
			    	OnPlayerUpdate(i);
				    Ban(i)
				    BanLog(string);
			    }
			}
			GetPlayerWeaponData(i, 7, weaponid, ammo);
			new pSpecialAction = GetPlayerSpecialAction(i);
			if (weaponid > 1 || pSpecialAction == SPECIAL_ACTION_USEJETPACK)
			{
				// Illegal weapon
				TogglePlayerControllable(i, 0);
				GetPlayerName(i, plname, sizeof(plname));
				format(string, 256, "%s à été banni par l'Anti-Cheat. Raison: Triche Armes (Jet Pack)", plname);
				SendClientMessageToAll(COLOR_LIGHTRED, string);
				SendClientMessage(i, COLOR_LIGHTRED, "Tu as été banni pour Cheat Armes. Toutes demandes d'unban sur : http://u2c-rp.forum-pro.fr");
				OnPlayerUpdate(i);
				Ban(i)
				BanLog(string);
			}
        }
	  return 1;
	}

forward PingKick();
public PingKick()
{
        for(new i=0; i<MAX_PLAYERS; i++)
        {
            if(FirstSpawn[i] == 0)
			{
                new string[256];
                new pidName[MAX_PLAYER_NAME];
                new tmpp[256];
                new ping=GetPlayerPing(i);
                if(ping > pingkick)
                {
                        GetPlayerName(i,pidName, sizeof(pidName));
                        format(tmpp, sizeof(tmpp), " %s a été kické. Raison: Ping élevé (Maximum: 500)",pidName);
                        SendClientMessageToAll(COLOR_RED,tmpp);
                        KickLog(string);
                        Kick(i);
                }
			}
        }
        return 0;
}

forward OnPlayerTeamPrivmsg( playerid, text[] );
public  OnPlayerTeamPrivmsg( playerid, text[] )
{
        assert( AntiFlood_Check( playerid ) );

        return 1;
}

AntiFlood_Check( playerid, bool:inc=true )
{
        AntiFlood_Data[playerid][floodRate] += inc ? RATE_INC : 0;
        AntiFlood_Data[playerid][floodRate]  = AntiFlood_Data[playerid][floodRate] - ( GetTickCount() - AntiFlood_Data[playerid][lastCheck] );
        AntiFlood_Data[playerid][lastCheck]  = GetTickCount();
        AntiFlood_Data[playerid][floodRate]  = AntiFlood_Data[playerid][floodRate] < 0 ? 0 : AntiFlood_Data[playerid][floodRate];
        if (PlayerInfo[playerid][pAdmin] >= 1)
        {
				return 1;
		}
        if ( AntiFlood_Data[playerid][floodRate] >= RATE_MAX )
        {
                #if THRESOLD_ACTION == 1
                        new msg[64], name[MAX_PLAYER_NAME];

                        GetPlayerName( playerid, name, sizeof( name ) );

                        format( msg, sizeof( msg ), "[Auto-Kick]: %s a été Banni. Raison: Flood", name );

                        SendClientMessageToAll(COLOR_RED, msg );

                        Ban( playerid );
                #elseif THRESOLD_ACTION == 2
                        new msg[64], name[MAX_PLAYER_NAME];

                        GetPlayerName( playerid, name, sizeof( name ) );

                        format( msg, sizeof( msg ), "[Anti-Flood]: %s a été kické. Raison: Flood", name );

                        SendClientMessageToAll(COLOR_RED, msg );

                        Kick( playerid );
                #else
                        SendClientMessage( playerid,COLOR_RED, "Vous flood/spam le serveur, arrêtez ou vous serrez kicker !" );
                #endif

                return false;
        }

        return true;
}

AntiFlood_InitPlayer( playerid )
{
        AntiFlood_Data[playerid][lastCheck] = GetTickCount();
        AntiFlood_Data[playerid][floodRate] = 0;
}

FindIP(StrToChk[])
{
	new IpLevel = 0;
	for(new a = 0; a < strlen(StrToChk); a++)
	{

		switch(IpLevel)
		{
			case 0:
			{
	    		if(IsNum(StrToChk[a])) IpLevel++;
			}
			case 1, 2:
			{
                if(IsNum(StrToChk[a])) IpLevel++;
                else if(StrToChk[a] == '.') IpLevel = 4;
                else IpLevel = 0;
			}
			case 3:
			{
			    if(StrToChk[a] == '.') IpLevel++;
			    else IpLevel = 0;
			}
			case 4:
			{
			    if(IsNum(StrToChk[a])) IpLevel++;
			    else IpLevel = 0;
			}
			case 5, 6:
			{
                if(IsNum(StrToChk[a])) IpLevel++;
                else if(StrToChk[a] == '.') IpLevel = 8;
                else IpLevel = 0;
			}
			case 7:
			{
			    if(StrToChk[a] == '.') IpLevel++;
			    else IpLevel = 0;
			}
			case 8:
			{
			    if(IsNum(StrToChk[a])) IpLevel++;
			    else IpLevel = 0;
			}
			case 9, 10:{
                if(IsNum(StrToChk[a])) IpLevel++;
                else if(StrToChk[a] == '.') IpLevel = 12;
                else IpLevel = 0;
			}
			case 11:
			{
			    if(StrToChk[a] == '.') IpLevel++;
			    else IpLevel = 0;
			}
			case 12:
			{
			    if(IsNum(StrToChk[a])) return 1;
                else IpLevel = 0;
   }
  }
	}
	return 0;
}

IsNum(textchar)
{
	if(textchar == '0') return 1;
	if(textchar == '1') return 1;
	if(textchar == '2') return 1;
	if(textchar == '3') return 1;
	if(textchar == '4') return 1;
	if(textchar == '5') return 1;
	if(textchar == '6') return 1;
	if(textchar == '7') return 1;
	if(textchar == '8') return 1;
	if(textchar == '9') return 1;
	return 0;
}

forward CheckTextForBadWords(playerid, text[]);
public CheckTextForBadWords(playerid, text[])
{
    new tdebug[256];
	format(tdebug, sizeof(tdebug), "%d %s", playerid, text);
	print(tdebug);
	for(new i; i<SvWerbung_Index; i++)
	{
    	if(strfind(text,SvWerbung[i],true,0)!=-1)
    	{
    	    new string[256], name[MAX_PLAYER_NAME];
			GetPlayerName(playerid, name, sizeof(name));
			format(string, sizeof(string), "%s été kické. Raison: Mot Interdit", name);
			SendClientMessageToAll(COLOR_RED, string);
			KickLog(string);
			Kick(playerid);
    	}
	}
	for(new i; i<BadWords_Index; i++)
	{
    	if(strfind(text,BadWords[i],true,0)!=-1)
    	{
    	    new string[256], name[MAX_PLAYER_NAME];
			GetPlayerName(playerid, name, sizeof(name));
			format(string, sizeof(string), "%s été kické. Raison: Mot Interdit", name);
			SendClientMessageToAll(COLOR_RED, string);
			KickLog(string);
			Kick(playerid);
    	    return 0;
    	}
	}
	return 1;
}
forward LoadBadwordsList();
public LoadBadwordsList()
{
	new File:myfile=fopen("badwords.cfg",io_read);
	if(myfile)
	{
		new tmp[MAX_PLAYER_NAME];
		while (fread(myfile,tmp,sizeof(tmp)))
		{
	 		StripNewLine(tmp);
   			BadWords[BadWords_Index]=tmp;
			BadWords_Index++;
		}
		fclose(myfile);
	}
	new File:myfile2=fopen("ipantipub.cfg",io_read); // rentrez dans ce fichier les adresses IP des serveurs
	if(myfile2)
	{
		new tmp[MAX_PLAYER_NAME];
		while (fread(myfile2,tmp,sizeof(tmp)))
		{
	 		StripNewLine(tmp);
   			SvWerbung[BadWords_Index]=tmp;
			SvWerbung_Index++;
		}
		fclose(myfile2);
	}
	return 1;
}

stock StripNewLine(str[]) //Y_Less (ysi_misc.own)
{
	new
		l = strlen(str);
	while (l-- && str[l] <= ' ') str[l] = '\0';
}

public OnRconLoginAttempt(ip[], password[], success) // GTA Online
{
    if(!success)
    {
        printf("L'utilisateur ayant cette adresse IP: (%s) \nà tenté de s'authentifier en tant qu'administrateur RCON. \nIl a utilisé ce mot de passe : %s",ip, password);
        new pip[16], string[256];
        for(new i=0; i<MAX_PLAYERS; i++)
        {
            GetPlayerIp(i, pip, sizeof(pip));
            if(!strcmp(ip, pip, true))
            {
                if(tentativeconexionrcon != 3)
                {
                   tentativeconexionrcon++;
                }
                else
                {
                   SendClientMessage(i, 0xFFFFFFFF, "Vous avez été banni pour tentative de conexion en RCON.");
                   BanLog(string);
                   Ban(i); // Et on le ban
                }
            }
        }
    }
    else
    {
        tentativeconexionrcon = 0;
    }
    return 1;
}

/////////////////////////////////////////////////////////////////////////////

AntiDeAMX()
{
	new a[][] =
	{
		"Unarmed (Fist)",
		"Brass K"
	};
	#pragma unused a
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
